{"project": "cipher", "commit_id": "Snippet4874311_31356.java", "target": 0, "func": "public final static String HEX = \"36A52C8FB7DF9A3F\";\n\npublic static String encrypt(String seed, String cleartext) throws Exception \n{\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted) throws Exception \n{\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\n\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2*buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n}\n", "idx": 1}
{"project": "cipher", "commit_id": "Snippet46402041_28513.java", "target": 0, "func": "public static void main(String[] args) throws IOException, SQLException{\n    FileReader readFile = null;\n    BufferedReader br = null;\n\n    String timeStamp = null;\n    String visitorID = null;;\n    String visitorName = null;\n    String emailAdd;\n    String encryptedEmail = null;\n    String countryCode = null;\n    String countryName = null;\n    String region;\n    String timeStampConvo = null;\n    String convo = null;\n    String nameOfConvo = null;\n    String visitorConvo = null;\n    String staffConvo = null;\n    String staffName = null;\n\n\n\n    /////////////////////////////// MYSQL //////////////////////////////////////////    \n    String url = \"jdbc:mysql://localhost:3306/webchat_fypj?autoReconnect=true&useSSL=false\";\n    String username = \"root\";\n    String password = \"mavis\";\n\n\n    try {\n        /////////////////////// READ FROM THE TEXTFILE ////////////////////////////\n        String Path = new File(\"\").getAbsolutePath();\n        readFile = new FileReader(Path+\"/src/data/2017-01-16tiff1.text\");\n        br = new BufferedReader(readFile);\n        String str;\n        Pattern p = Pattern.compile(\"Email: \"+\"([\\\\w\\\\-]([\\\\-\\\\.\\\\w])+[\\\\w\\\\-]+@([\\\\w\\\\-]+\\\\.)+[A-Za-z]{2,4})\");      \n        Pattern timing = Pattern.compile(\"(\" + \"(\\\\d{4})\" + \"-\" + \"(\\\\d{2})\" + \"-\" + \"(\\\\d{2})\" + \" \" + \"(\\\\d{2})\"+ \":\" + \"(\\\\d{2})\" + \":\" + \"(\\\\d{2})\" + \")\");\n\n\n        ////////////////////// GET CONNECTION TO DATABASE /////////////////////////\n        Connection myConn = DriverManager.getConnection(url, username, password);\n        Statement myStat = (Statement) myConn.createStatement();        \n        ///////////////////// GET VALUES FROM TEXTFILE////////////////////////////\n        while ((str = br.readLine()) != null) {\n\n\n            if(str.toLowerCase().contains(\"timestamp\"))\n            {\n                timeStamp = StringUtils.substringAfter(str, \"Timestamp: \");\n                System.out.println(\"\\n\" + \"\\n\" + \"Timestamp - \" + timeStamp);\n            }\n            if(str.toLowerCase().contains(\"visitor id\"))\n            {\n                visitorID = StringUtils.substringAfter(str, \"Visitor ID: \");\n                System.out.println(\"Visitor ID - \" + visitorID);\n            }\n            if(str.toLowerCase().contains(\"visitor name\"))\n            {\n                visitorName = StringUtils.substringAfter(str, \"Visitor Name: \");\n                //System.out.println(\"Visitor Name - \" + visitorName);\n            }\n\n            /////////////////////////// FOR EMAIL /////////////////////////\n            Matcher m = p.matcher(str);\n            if(m.find())\n            {\n                emailAdd = m.group(1);\n                try \n                {\n                    byte[] enEmail = emailAdd.getBytes();\n\n                    Cipher c = Cipher.getInstance(\"DES\");\n                    KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n                    SecretKey sk = kg.generateKey();\n\n                    c.init(Cipher.ENCRYPT_MODE, sk);\n                    byte encryptEmail[] = c.doFinal(enEmail);\n\n                    encryptedEmail = new String(encryptEmail);\n                    if(str.toLowerCase().contains(\"Visitor Email\"))\n                    {\n                        //System.out.println(\"Email - \" + encryptedEmail.replace(\"'\", \"\\\\'\"));\n                    }\n                    else {\n                    //  System.out.println(\"Email - blank\");\n                    }\n                }\n                catch(Exception e){\n                    System.out.println(e);\n                }\n\n            }\n            if(str.toLowerCase().contains(\"country code\"))\n            {\n                countryCode = StringUtils.substringAfter(str, \"Country Code: \");\n                System.out.println(\"Country Code - \" + countryCode);\n            }\n            if(str.toLowerCase().contains(\"country name\"))\n            {\n                countryName = StringUtils.substringAfter(str, \"Country Name: \");\n                System.out.println(\"Country Name - \" + countryName);\n            }\n\n\n            Matcher timematch = timing.matcher(str);\n            if(timematch.find())\n            {\n                timeStampConvo = timematch.group(1);\n                //System.out.println(\"Mini Timestamp - \" + timeStampConvo);\n\n                convo = StringUtils.substringAfter(str, timeStampConvo + \") \");\n                //System.out.println(\"convo - \" + convo);\n                nameOfConvo = StringUtils.substringBefore(convo, \":\");\n                //System.out.println(nameOfConvo + \" \");\n\n\n                ///////////////////////DATABASE FOR CONVERSATION/////////////////////////////////////////////////\n                if(!(nameOfConvo.equals(visitorName))){\n                    staffConvo = StringUtils.substringAfter(convo, \": \");\n                //  System.out.println(\"Staff - \" + staffConvo);\n                    staffName = StringUtils.substringBefore(convo, \": \");\n                //  System.out.println(\"Staff - \" + staffName);\n                    String staffSql = \"INSERT INTO conversation\" + \"(speaker,convoTimestamp,convo)\" + \"VALUES ('\"+ staffName+\"','\"+timeStampConvo+\"','\"+ staffConvo.replace(\"'\", \"\\\\'\")+\"')\";\n                    myStat.executeUpdate(staffSql);\n                } \n                    else {\n                        visitorConvo = StringUtils.substringAfter(convo, \": \");\n                    //  System.out.println(\"Visitor - \" + visitorConvo);\n                        String visitorSql = \"INSERT INTO conversation\" + \"(speaker,convoTimestamp,convo)\" + \"VALUES ('\"+ visitorName+\"','\"+timeStampConvo+\"','\"+ visitorConvo.replace(\"'\", \"\\\\'\")+\"')\";\n                        myStat.executeUpdate(visitorSql);\n                }\n\n                }\n\n        }\n            ///////////////////////////// DATABASE /////////////////////////////////////////            \n        String countryCodeSql = \"INSERT INTO session\" + \"(sessionTimestamp,countryCode,countryName,visitorID)\" + \"VALUES ('\"+ timeStamp+\"','\"+countryCode+\"','\"+ countryName+\"','\" + visitorID+\"')\";\n        myStat.executeUpdate(countryCodeSql);\n\n            if (visitorID != null && encryptedEmail !=null){\n            String visitorSql = \"INSERT IGNORE INTO visitor\" + \"(visitorID,visitorName,visitorEmail)\" + \"VALUES ('\" + visitorID+\"','\" + visitorName+ \"','\" + encryptedEmail.replace(\"'\", \"\\\\'\")+\"')\";\n            myStat.executeUpdate(visitorSql);\n            }\n\n\n\n\n    }\n    catch (SQLException e) {\n        System.out.println(e.getMessage());\n    }\n\n\n    finally {\n\n        try {\n            readFile.close();\n            br.close();\n        }\n\n        catch (IOException x) {\n            x.printStackTrace();\n        }\n\n\n    }\n}\n", "idx": 2}
{"project": "cipher", "commit_id": "Snippet8066173_33061.java", "target": 0, "func": " public byte[] keyGen() throws NoSuchAlgorithmException {\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n    keyGenerator.init(192);\n    return keyGenerator.generateKey().getEncoded();\n }\n\n public byte[] encript(byte[] dataToEncrypt, byte[] key)\n            throws NoSuchAlgorithmException, NoSuchPaddingException,\n            InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    //I'm using AES encription\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec k = new SecretKeySpec(key, \"AES\");\n    c.init(Cipher.ENCRYPT_MODE, k);\n    return c.doFinal(dataToEncrypt);\n  }\n\n  public byte[] decript(byte[] encryptedData, byte[] key)\n            throws NoSuchAlgorithmException, NoSuchPaddingException,\n            InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec k = new SecretKeySpec(key, \"AES\");\n    c.init(Cipher.DECRYPT_MODE, k);\n    return c.doFinal(encryptedData);\n  }\n", "idx": 3}
{"project": "cipher", "commit_id": "Snippet7713034_32887.java", "target": 0, "func": "String key = PropertyManager.getInstance().getProperty(\"phikey\");\n    try {\n        ecipher = Cipher.getInstance(\"AES\");\n        dcipher = Cipher.getInstance(\"AES\");\n        byte[] raw = new BASE64Decoder().decodeBuffer(key);\n        SecretKey skey = new SecretKeySpec(raw, \"AES\");\n        ecipher.init(Cipher.ENCRYPT_MODE, skey);\n        dcipher.init(Cipher.DECRYPT_MODE, skey);\n    } catch (NoSuchAlgorithmException e) {\n        log.error(\"No encryption algorithm present!\", e);\n    } catch (NoSuchPaddingException e) {\n        log.error(\"No such padding for encryption!\", e);\n    } catch (InvalidKeyException e) {\n        log.error(\"Invalid key exception!\", e);\n    } catch (IOException e) {\n        log.error(\"Unable to decode encryption key!\", e);\n    }\n", "idx": 4}
{"project": "cipher", "commit_id": "Snippet33873856_15945.java", "target": 0, "func": "     public byte[] decryp_decompress(byte[] raw, byte[] encrypted)\n                  throws Exception {\n           SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n           Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n           cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n           byte[] decrypted = cipher.doFinal(encrypted);\n           GZip gzip = new GZip();\n           byte[] decompressData = gzip.decompresses(decrypted);\n\n           return decompressData;\n    }\n", "idx": 5}
{"project": "cipher", "commit_id": "Snippet15430085_38480.java", "target": 0, "func": " byte [] keyForEncription= new byte[16];\n        byte [] keyForDecription= new byte[16];\n        long  FixedKey= 81985526925837671L;\n        long  VariableKey=744818830;\n            for (int i1 = 0; i1 < 8; i1++)\n        {\n\n            keyForEncription[i1] = (byte)(FixedKey >> (8 * i1));\n            keyForEncription[i1 + 8] = (byte)(VariableKey >> (8 * i1));\n        }\n\n\n    byte[] data = new byte[255];\n\n    data[0]= 2;\n    data[1]= 0;\n    data[2]= 0;\n    data[3]= 0;\n    data[4]= 0;\n    data[5]= 6;\n    data[6]= 6;\n    data[7]= 81;\n    data[8]= 124;\n    data[9]= 123;\n    data[10]= 123;\n    data[11]= 12;\n    data[12]= 3;\n    data[13]= 27;\n    data[15]= 12;\n    data[16]= 0;\n    data[17]= 0;\n    data[18]= 0;\n    data[19]= 0;\n\n    System.out.println(\"Original byte Array : \" +Arrays.toString(data));\n\n    SecretKeySpec skeySpec = new SecretKeySpec(keyForEncription, \"AES\");\n   Cipher cipher1 = Cipher.getInstance(\"AES/ECB/NoPadding\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] newByteArray = new byte[data.length];\n    newByteArray = cipher.doFinal(byteArray);\n    System.out.println(\"Encrypted Array : \" +Arrays.toString(newByteArray));\n", "idx": 6}
{"project": "cipher", "commit_id": "Snippet15485409_38530.java", "target": 0, "func": "private void readFile() {\n  try {\n    Cipher cipher = getCipher(2, \"secret\");\n    DataInputStream dis;\n\n    dis = new DataInputStream(new CipherInputStream(someInputStream, cipher));\n\n    String field1 = dis.readUTF();\n    String filed2 = dis.readUTF();\n    dis.close();\n  } catch (Exception e) { }\n}\n\nprivate Cipher getCipher(int mode, String password) throws Exception {\n  Random random = new Random(43287234L);\n  byte[] salt = new byte[8];\n  random.nextBytes(salt);\n  PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, 5);\n\n  SecretKey pbeKey = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\").generateSecret(new PBEKeySpec(password.toCharArray()));\n  Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n  cipher.init(mode, pbeKey, pbeParamSpec);\n  return cipher;\n}\n", "idx": 7}
{"project": "cipher", "commit_id": "Snippet27443904_9588.java", "target": 0, "func": "public class AES {\n\npublic static String encrypt(String seed, String cleartext) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted) throws Exception {      \n    byte[] rawKey = getRawKey(seed.getBytes());       \n    byte[] enc = toByte(encrypted);\n    //ggggg\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {             \n    KeyGenerator keygen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom secrand = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n    secrand.setSeed(seed);\n    keygen.init(128, secrand);\n    SecretKey seckey = keygen.generateKey();\n    byte[] rawKey = seckey.getEncoded();\n    return rawKey;\n}\n\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    //0000\n    byte[] decrypted = cipher.doFinal(encrypted);        \n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2*buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\nprivate final static String HEX = \"0123456789ABCDEF\";\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n}\n", "idx": 8}
{"project": "cipher", "commit_id": "Snippet31272277_13386.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Base64;\n/**\nAes encryption\n*/\npublic class AES\n{\n\n    private static SecretKeySpec secretKey ;\n    private static byte[] key ;\n\n    private static String decryptedString;\n    private static String encryptedString;\n\n    public static void setKey(String myKey){\n\n\n        MessageDigest sha = null;\n        try {\n            key = myKey.getBytes(\"UTF-8\");\n            System.out.println(key.length);\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n            key = Arrays.copyOf(key, 16); // use only first 128 bit\n            System.out.println(key.length);\n            System.out.println(new String(key,\"UTF-8\"));\n            secretKey = new SecretKeySpec(key, \"AES\");\n\n\n        } catch (NoSuchAlgorithmException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n\n\n    }\n\n    public static String getDecryptedString() {\n        return decryptedString;\n    }\n    public static void setDecryptedString(String decryptedString) {\n        AES.decryptedString = decryptedString;\n    }\n    public static String getEncryptedString() {\n        return encryptedString;\n    }\n    public static void setEncryptedString(String encryptedString) {\n        AES.encryptedString = encryptedString;\n    }\n    public static String encrypt(String strToEncrypt)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n\n            setEncryptedString(Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))));\n\n        }\n        catch (Exception e)\n        {\n\n            System.out.println(\"Error while encrypting: \"+e.toString());\n        }\n        return null;\n    }\n    public static String decrypt(String strToDecrypt)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            setDecryptedString(new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt))));\n\n        }\n        catch (Exception e)\n        {\n\n            System.out.println(\"Error while decrypting: \"+e.toString());\n        }\n        return null;\n    }\n}\n", "idx": 9}
{"project": "cipher", "commit_id": "Snippet34420099_16405.java", "target": 0, "func": "import org.apache.commons.io.IOUtils;\n\npublic class CryptoTest extends TestCase {\n\n    public void testEncryption() throws Exception {\n\n        String DEFAULT_ALG = \"AES/ECB/PKCS5Padding\";\n        String DEFAULT_SALT = \"SALT\";\n        int DEFAULT_ITERATIONS = 10000;\n        int DEFAULT_KEY_LEN = 128;\n\n        String alg = DEFAULT_ALG;\n        String salt = DEFAULT_SALT;\n        int iterations = DEFAULT_ITERATIONS;\n        int keyLen = DEFAULT_KEY_LEN;\n\n        SecretKeyFactory factory = null;\n        String passPhrase = \"password\";\n        String algOnly = alg.split(\"/\")[0];\n        String password = \"CDE#VFR$\";\n\n        try {\n            factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new IOException(\"Can't load SecretKeyFactory\", e);\n        }\n\n        SecretKeySpec key = null;\n        try {\n            key = new SecretKeySpec(\n                    factory.generateSecret(\n                            new PBEKeySpec(passPhrase.toCharArray(), salt.getBytes(), iterations, keyLen)).getEncoded(),\n                    algOnly);\n        } catch (Exception e) {\n            throw new IOException(\"Can't generate secret key\", e);\n        }\n\n        Cipher crypto = null;\n\n        try {\n            crypto = Cipher.getInstance(alg);\n        } catch (Exception e) {\n            throw new IOException(\"Can't initialize the decryptor\", e);\n        }\n\n        byte[] encryptedBytes;\n\n        try {\n            crypto.init(Cipher.ENCRYPT_MODE, key);\n            encryptedBytes = crypto.doFinal(password.getBytes());\n\n            OutputStream os = new FileOutputStream(\"encrypted.txt\");\n            IOUtils.write(encryptedBytes, os);\n\n        } catch (Exception e) {\n            throw new IOException(\"Can't decrypt the password\", e);\n        }\n    }\n}\n", "idx": 10}
{"project": "cipher", "commit_id": "Snippet36054150_17960.java", "target": 0, "func": " import java.io.BufferedWriter;\n import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.OutputStreamWriter;\n import java.io.UnsupportedEncodingException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.nio.file.StandardOpenOption;\n import java.security.NoSuchAlgorithmException;\n import java.security.Security;\n\n import javax.crypto.Cipher;\n import javax.crypto.KeyGenerator;\n import javax.crypto.SecretKey;\n import javax.crypto.spec.IvParameterSpec;\n import javax.crypto.spec.SecretKeySpec;\n\n import org.apache.commons.io.FileUtils;\n import org.bouncycastle.jce.provider.BouncyCastleProvider;\n\n\npublic class SecTest {\n\npublic static void main(String[] args) throws NoSuchAlgorithmException {\n       /** Generate a secret TripleDES encryption/decryption key */\nSecurity.addProvider(new BouncyCastleProvider());\n    KeyGenerator keygen = KeyGenerator.getInstance(\"Blowfish\");\n    // Use it to generate a key\n    SecretKey key = keygen.generateKey();\n    // Convert the secret key to an array of bytes like this\n    byte[] rawKey = key.getEncoded();\n\n    // Write the raw key to the file\n    String keyPath = \"/data2/key/BlowFish.key\";\n    FileOutputStream out = null;\ntry {\n    out = new FileOutputStream(keyPath);\n} catch (FileNotFoundException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n}\n    Writer writer = null;\ntry {\n    writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n    Files.write( Paths.get(keyPath),rawKey,StandardOpenOption.CREATE);\n    writer.close();\n    out.close();\n} catch (UnsupportedEncodingException e1) {\n    e1.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\ngenerateHexCode(\"a\");\n}\n\nprivate static void generateHexCode(String pwd) {\nString hexCipher = null;\ntry {\n        byte[] byteClearText = pwd.getBytes(\"UTF-8\");\n        byte[] ivBytes = hexToBytes(\"0000000000000000\");\n        // read secretkey from key file\n\n        byte[] secretKeyByte = readSecretKey().getBytes();\n        Cipher cipher = null;\n        SecretKeySpec key = new SecretKeySpec(secretKeyByte, \"Blowfish\");\n        // Create and initialize the encryption engine\n        cipher = Cipher.getInstance(\"Blowfish/CBC/ZeroBytePadding\", \"BC\");\n\n        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n        cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec); // throws exception\n        byte[] cipherText = new byte[cipher.getOutputSize(byteClearText.length)];\n        int ctLength = cipher.update(byteClearText, 0, byteClearText.length, cipherText, 0);\n        ctLength += cipher.doFinal(cipherText, ctLength);\n        hexCipher = bytesToHex(cipherText);// hexdecimal password stored in DB\n        System.out.println(\"hex cipher is \"+hexCipher);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n}\n\n\nprivate static String readSecretKey() {\nbyte[] rawkey = null;\n    String file =\"\";\n        // Read the raw bytes from the keyfile\n        String keyFile = \"/data2/key/BlowFish.key\";\n        String is = null;\n    try {\n    is = FileUtils.readFileToString(new File(keyFile),\"UTF-8\");\n    } catch (IOException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n    }\n\n    return is;\n}\n\npublic static byte[] hexToBytes(String str) {\n    byte[] bytes = null;\n    if (str != null && str.length() >= 2) {\n        int len = str.length() / 2;\n        byte[] buffer = new byte[len];\n        for (int i = 0; i < len; i++) {\n            buffer[i] = (byte) Integer.parseInt(str.substring(i * 2, i * 2 + 2), 16);\n        }\n        bytes = buffer;\n    }\n    return bytes;\n}\n\npublic static String bytesToHex(byte[] data) {\n    if (data == null) {\n        return null;\n    } else {\n        int len = data.length;\n        StringBuilder str = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            if ((data[i] & 0xFF) < 16) {\n                str = str.append(\"0\").append(java.lang.Integer.toHexString(data[i] & 0xFF));\n            } else {\n                str.append(java.lang.Integer.toHexString(data[i] & 0xFF));\n            }\n        }\n        return str.toString().toUpperCase();\n    }\n}\n}\n", "idx": 11}
{"project": "cipher", "commit_id": "Snippet37354200_19031.java", "target": 0, "func": "scala> import javax.crypto.Cipher\nscala> import javax.crypto.spec.SecretKeySpec\nscala> val cipher = Cipher.getInstance(\"Blowfish\")\nscala> cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(\"0123456789abcdef\".getBytes(\"utf-8\"), \"Blowfish\"))\nscala> javax.xml.bind.DatatypeConverter.printBase64Binary(cipher.doFinal(\"message\".getBytes(\"utf-8\")))\nres7: String = K679Jz06jmc=\n", "idx": 12}
{"project": "cipher", "commit_id": "Snippet31077429_13250.java", "target": 0, "func": "    public String decrypt(final String encrypted) {\n    try {\n        final Cipher blowfishECB = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n        final SecretKeySpec blowfishKey = new SecretKeySpec(DECRYPT_PASSWORD.getBytes(\"UTF8\"), \"Blowfish\");\n        blowfishECB.init(Cipher.DECRYPT_MODE, blowfishKey);\n        final byte[] decryptedBytes = blowfishECB.doFinal(decodeHex(encrypted.toCharArray()));\n\n        // First 4 bytes are garbage according to specification (deletes first 4 bytes)\n        final byte[] trimGarbage = Arrays.copyOfRange(decryptedBytes, 4, decryptedBytes.length);\n        return new String(trimGarbage);\n    } catch (final Exception e) {\n        Log.e(TAG, \"Failed to decrypt content\", e);\n        return null;\n    }\n}\n", "idx": 13}
{"project": "cipher", "commit_id": "Snippet21281269_3814.java", "target": 0, "func": "                 try{\n                        SecretKeySpec skey = new SecretKeySpec(Hex.decodeHex(key.toCharArray()), \"AES\");\n                        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n                        cipher.init(Cipher.ENCRYPT_MODE, skey);\n                        output = cipher.doFinal(bFile);\n                        String SD_CARD_PATH = Environment.getExternalStorageDirectory().toString();\n                        FileOutputStream fileOuputStream = new FileOutputStream(SD_CARD_PATH+ \"/\" + \"abcd.db\"); \n                        fileOuputStream.write(output);\n                        fileOuputStream.close();\n                        //System.out.println(output);\n                    }catch(Exception e){\n                        System.out.println(\"Error: \"+e);\n                    }\n", "idx": 14}
{"project": "cipher", "commit_id": "Snippet26151172_8359.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AESCrypto {\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return Converters.toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = Converters.toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    public static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n        sr.setSeed(seed);\n        try {\n            kgen.init(256, sr);\n            } catch (Exception e) {\n            // Log.w(LOG, \"This device doesn't support 256 bits, trying 192 bits.\");\n            try {\n            kgen.init(192, sr);\n            } catch (Exception e1) {\n            // Log.w(LOG, \"This device doesn't support 192 bits, trying 128 bits.\");\n            kgen.init(128, sr);\n            }\n        }\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n            return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n            return decrypted;\n    }\n}\n", "idx": 15}
{"project": "cipher", "commit_id": "Snippet22607791_5005.java", "target": 0, "func": "public class AESencrp {\n\n  private static final String ALGO = \"AES\";\n  private static final byte[] keyValue = \n      new byte[] { 'A', 'b', 'c', 'd', 'e', 'f', 'g',\n      'h', 'i', 'j', 'k','l', 'm', 'n', 'o', 'p'};\n\n  public static String encrypt(String Data) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(Data.getBytes());\n    String encryptedValue = new BASE64Encoder().encode(encVal);\n    return encryptedValue;\n  }\n\n\n  private static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, ALGO);\n    return key;\n  }\n}\n", "idx": 16}
{"project": "cipher", "commit_id": "Snippet44131719_26206.java", "target": 0, "func": " if (!isEncrypted) {\n                        FileInputStream fis = new FileInputStream(path);\n                        // This stream write the encrypted text. This stream will be wrapped by another stream.\n                        FileOutputStream fos = new FileOutputStream(path + \".abcd\");\n\n                        // Length is 16 byte\n                        SecretKeySpec sks = new SecretKeySpec(\"abcdefghijklmnop\".getBytes(), \"AES\");\n                        // Create cipher\n                        Cipher cipher = Cipher.getInstance(\"AES\");\n                        cipher.init(Cipher.ENCRYPT_MODE, sks);\n                        // Wrap the output stream\n                        CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n                        // Write bytes\n                        int b;\n                        byte[] d = new byte[1024];\n                        try {\n                            while ((b = fis.read(d)) != -1) {\n                                cos.write(d, 0, b);\n                            }\n\n                            // Flush and close streams.\n                            cos.flush();\n                            cos.close();\n                            fis.close();\n                            new File(path).deleteOnExit();\n                            isEncrypted = true;\n                            runOnUiThread(new Runnable() {\n                                @Override\n                                public void run() {\n                                    btnEncrypt.setText(\"Decrypt Path\");\n                                    deleteMyFile(path);\n                                }\n                            });\n                        } catch (Exception ex) {\n                            ex.printStackTrace();\n                        }\n                    } else {\n                        FileInputStream fis = new FileInputStream(path + \".abcd\");\n\n                        FileOutputStream fos = new FileOutputStream(path);\n                        SecretKeySpec sks = new SecretKeySpec(\"abcdefghijklmnop\".getBytes(), \"AES\");\n                        Cipher cipher = Cipher.getInstance(\"AES\");\n                        cipher.init(Cipher.DECRYPT_MODE, sks);\n                        CipherInputStream cis = new CipherInputStream(fis, cipher);\n                        int b;\n                        byte[] d = new byte[1024];\n\n\n                        while ((b = cis.read(d)) != -1) {\n                            fos.write(d, 0, b);\n                        }\n                        fos.flush();\n                        fos.close();\n                        cis.close();\n                        isEncrypted = false;\n                        runOnUiThread(new Runnable() {\n                            @Override\n                            public void run() {\n                                deleteMyFile(path + \".abcd\");\n                                btnEncrypt.setText(\"Encrypt Path\");\n                            }\n                        });\n\n                    }\n                } catch (final Exception e) {\n                    runOnUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            progressDialog.setMessage(e.getMessage());\n                        }\n                    });\n", "idx": 17}
{"project": "cipher", "commit_id": "Snippet11928196_35907.java", "target": 0, "func": "public byte[] encrypt(byte[] key, byte[] message) throws Exception {\n\n       byte [] plainTextBytes = message;\n       byte[] encryptKey = key;\n\n       SecretKey theKey = new SecretKeySpec(encryptKey, \"DESede\");\n       Cipher cipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n       IvParameterSpec IvParameters = new IvParameterSpec(new byte[] {(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00});\n       cipher.init(Cipher.ENCRYPT_MODE, theKey, IvParameters);\n       byte[] encrypted = cipher.doFinal(plainTextBytes);\n       return encrypted;\n  }\n", "idx": 18}
{"project": "cipher", "commit_id": "Snippet20796446_3396.java", "target": 0, "func": "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport javax.crypto.*;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n        String FileName = \"encryptedtext.txt\";\n        String FileName2 = \"decryptedtext.txt\";\n\n        KeyGenerator KeyGen = KeyGenerator.getInstance(\"AES\");\n        KeyGen.init(128);\n\n        SecretKey SecKey = KeyGen.generateKey();\n\n        Cipher AesCipher = Cipher.getInstance(\"AES\");\n\n\n        byte[] byteText = \"Your Plain Text Here\".getBytes();\n\n        AesCipher.init(Cipher.ENCRYPT_MODE, SecKey);\n        byte[] byteCipherText = AesCipher.doFinal(byteText);\n        Files.write(Paths.get(FileName), byteCipherText);\n\n\n        byte[] cipherText = Files.readAllBytes(Paths.get(FileName));\n\n        AesCipher.init(Cipher.DECRYPT_MODE, SecKey);\n        byte[] bytePlainText = AesCipher.doFinal(cipherText);\n        Files.write(Paths.get(FileName2), bytePlainText);\n    }\n}\n", "idx": 19}
{"project": "cipher", "commit_id": "Snippet13300310_36851.java", "target": 0, "func": "public class AccessApp extends Activity implements OnClickListener {\nprivate SharedPreferences sp;\nString user,pass;\nButton lBttn,cBttn;\nEditText uname,pword;\nIntent i;\n\nint flag=0;\n\n/** Called when the activity is first created. */\n@Override\npublic void onCreate(Bundle savedInstanceState)\n{ \n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n    lBttn=(Button)findViewById(R.id.login_button);\n    cBttn=(Button)findViewById(R.id.cancel_button);\n    uname=(EditText)findViewById(R.id.username);\n    pword=(EditText)findViewById(R.id.password);\n\n    lBttn.setOnClickListener(this);\n    cBttn.setOnClickListener(this);\n}\npublic void onClick(View arg0) {\n\n    sp=this.getSharedPreferences(\"AccessApp\", MODE_WORLD_READABLE);\n    user = sp.getString(\"USERNAME_KEY\", \"\");\n    pass = sp.getString(\"PASSWORD_KEY\", \"\");\n\n\n\n\n   if(lBttn.equals(arg0)){\n\n      if((uname.getText().toString().equals(user))&& \n        (pword.getText().toString().equals(pass)))\n\n            {\n          Toast.makeText(this, \"You are Logged In\", 20000).show();\n\n               Intent intent;\n               intent=new Intent(this,details.class);\n               startActivity(intent);\n              flag=1;\n            }\n\n        else \n           {\n            Toast.makeText(this, \"Wrong Username or Password\",20000).show();\n            flag=0;   \n           }       \n        } \n        else if(cBttn==arg0){\n            AlertDialog.Builder builder=new AlertDialog.Builder(this);\n          builder.setTitle(\"Exit\");\n         builder.setMessage(\"Do you want to exit\");\n    builder.setCancelable(false);\n    builder.setPositiveButton(\"Yes\",new DialogInterface.OnClickListener() {\n\n public void onClick(DialogInterface dialog, int which) {\n // TODO Auto-generated method stub\nIntent intent = new Intent(Intent.ACTION_MAIN);\nintent.addCategory(Intent.CATEGORY_HOME);\nintent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\nstartActivity(intent);\n\n finish();\n }\n });\n    builder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\n\n            public void onClick(DialogInterface arg0, int arg1) {\n               arg0.cancel();\n            }\n        });\n    AlertDialog alert=builder.create();\n    alert.show();\n\n        }\n\n    }\n@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\n     Intent intent = new Intent(Intent.ACTION_MAIN);\n        intent.addCategory(Intent.CATEGORY_HOME);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        startActivity(intent);\n     finish();\n }\n return super.onKeyDown(keyCode, event);\n}\n\npublic static String decrypt(String encryptedText, byte[ ] key) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] toDecrypt = Base64.decode(encryptedText);\n    byte[] encrypted = cipher.doFinal(toDecrypt);\n    return new String(encrypted);\n}\n}\n", "idx": 20}
{"project": "cipher", "commit_id": "Snippet37457236_19295.java", "target": 0, "func": "    public static byte[] encryptText(String plainText,SecretKey secKey) throws Exception{\n    // AES defaults to AES/ECB/PKCS5Padding in Java 7\n    Cipher aesCipher = Cipher.getInstance(\"AES\");\n    aesCipher.init(Cipher.ENCRYPT_MODE, secKey);\n    byte[] byteCipherText = aesCipher.doFinal(plainText.getBytes());\n    return byteCipherText;}\n\n\n    public static String decryptText(byte[] byteCipherText, SecretKey secKey) throws Exception {\n    // AES defaults to AES/ECB/PKCS5Padding in Java 7\n    Cipher aesCipher = Cipher.getInstance(\"AES\");\n    aesCipher.init(Cipher.DECRYPT_MODE, secKey);\n    byte[] bytePlainText = aesCipher.doFinal(byteCipherText);\n    return new String(bytePlainText);\n}\n", "idx": 21}
{"project": "cipher", "commit_id": "Snippet35550306_17437.java", "target": 0, "func": "/**\n * \u521d\u59cb\u5316 AES Cipher\n * @param sKey\n * @param cipherMode\n * @return\n */\npublic static Cipher initAESCipher (String sKey, int cipherMode) throws Exception {\n    //\u521b\u5efaKey gen\n    KeyGenerator keyGenerator = null;\n    Cipher cipher = null;\n        keyGenerator = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance( \"SHA1PRNG\" ,\"Crypto\");\n        sr.setSeed(sKey.getBytes(\"UTF-8\"));\n        keyGenerator.init(128,sr);\n        SecretKey secretKey = keyGenerator.generateKey();\n        byte[] codeFormat = secretKey.getEncoded();\n        SecretKeySpec key = new SecretKeySpec(codeFormat, \"AES\");\n        cipher = Cipher.getInstance(\"AES\");\n        //\u521d\u59cb\u5316\n        cipher.init(cipherMode, key);\n    return cipher;\n}\n\n/**\n * \u5bf9\u6587\u4ef6\u8fdb\u884cAES\u52a0\u5bc6\n * @param sourceFile\n * @param fileType\n * @param sKey\n * @return\n */\npublic static File encryptFile(File sourceFile,String fileType, String sKey) throws Exception {\n    //\u65b0\u5efa\u4e34\u65f6\u52a0\u5bc6\u6587\u4ef6\n    File encrypfile = null;\n    InputStream inputStream = null;\n    OutputStream outputStream = null;\n\n        inputStream = new FileInputStream(sourceFile);\n        encrypfile = new File(fileType);\n        outputStream = new FileOutputStream(encrypfile);\n        Cipher cipher = initAESCipher(sKey,Cipher.ENCRYPT_MODE);\n        //\u4ee5\u52a0\u5bc6\u6d41\u5199\u5165\u6587\u4ef6\n        CipherInputStream cipherInputStream = new CipherInputStream(inputStream, cipher);\n        byte[] cache = new byte[1024];\n        int nRead = 0;\n        while ((nRead = cipherInputStream.read(cache)) != -1) {\n            outputStream.write(cache, 0, nRead);\n            outputStream.flush();\n        }\n        cipherInputStream.close();\n            inputStream.close();\n            outputStream.close();\n            sourceFile.delete();\n\n    return encrypfile;\n}\n", "idx": 22}
{"project": "cipher", "commit_id": "Snippet34152169_16170.java", "target": 0, "func": "private void switchToChipherStreams(String password) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException {\n    //Generate key\n    byte[] key = new byte[8];\n    for (int i = 0; i < 8; i++) {\n        if (password.length() > i) {\n            key[i] = password.getBytes()[i];\n        } else {\n            key[i] = (byte) i;\n        }\n    }\n    //Setup cipher streams\n    SecretKey key64 = new SecretKeySpec(key, \"Blowfish\");\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n    cipher.init(Cipher.ENCRYPT_MODE, key64);\n    in = new ObjectInputStream(new CipherInputStream(socket.getInputStream(), cipher));\n    out = new ObjectOutputStream(new CipherOutputStream(socket.getOutputStream(), cipher));\n    out.reset();\n    out.flush();\n    out.writeObject(\"switch\");\n}\n", "idx": 23}
{"project": "cipher", "commit_id": "Snippet41688893_23643.java", "target": 0, "func": "//          //**********AES Encryption\n            //checking time in msec\n            long startTime=System.currentTimeMillis();\n            //System.out.println(startTime);\n            //           // Create key and cipher\n            SecretKey aesKey = KeysGeneration.getKeys(keypass);\n\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            //              // encrypt the text\n            cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            byte[] encrypted = cipher.doFinal(email.getBytes());\n            System.out.println(\"checking encryption \"+new String(encrypted));\n\n            BASE64Encoder encoder = new BASE64Encoder();\n            email = encoder.encode(encrypted);\n            System.out.println(\"Encoded Encrypted Value=\"+email);\n\n            // text=\"&email=\"+URLEncoder.encode(new String(encrypted), \"UTF-8\");\n            writer.write(\"&email=\"+email);\n            //Calculating Encryption Time\n            long stopTime = System.currentTimeMillis();\n            Duration ms=Duration.ofMillis(stopTime);\n\n            //System.out.println(stopTime);\n            long elapsedTime = stopTime - startTime;\n            System.out.println(\"Time required for encryption (milliseconds)= \"+elapsedTime);\n", "idx": 24}
{"project": "cipher", "commit_id": "Snippet4928401_31411.java", "target": 0, "func": " public BoolString tryEncrypt(String inString, String key){\n        boolean success= true;\n        String err=\"\";\n        String outString=\"Encrypted\"; // BoolString.value\n\n        try {\n            byte[] byteKey= key.getBytes(\"UTF8\");   \n            if (byteKey.length != 24) {\n                success= false;\n                err= \"Key is \"+byteKey.length+\" bytes. Key must be exactly 24 bytes in length.\";\n                throw new Exception(err); // could also return here\n            }\n            KeySpec ks= new DESedeKeySpec(byteKey); \n            SecretKeyFactory skf= SecretKeyFactory.getInstance(\"DESede\");\n            SecretKey sk= skf.generateSecret(ks);\n            Cipher cph=Cipher.getInstance(\"DESede\");\n            cph.init(Cipher.ENCRYPT_MODE, sk);\n            byte[] byteInString= inString.getBytes(\"UTF8\");\n            byte[] byteEncoded= cph.doFinal(byteInString);\n            outString= Base64.encodeToString(byteEncoded, Base64.DEFAULT);\n        }\n        catch (UnsupportedEncodingException e){err=\"Unable to convert key to byte array.\"; success= false;}\n        catch (InvalidKeyException e){err=\"Unable to generate KeySpec from key\";success= false;} \n        catch (NoSuchAlgorithmException e){err=\"Unable to find algorithm.\";success= false;}\n        catch (InvalidKeySpecException e){err=\"Invalid Key Specification\";success= false;}\n        catch (NoSuchPaddingException e){err=\"No such padding\";success= false;}\n        catch (IllegalArgumentException e){err=\"Illegal argument\";success= false;}   \n        catch (Exception e){err=e.getMessage();success= false;}\n\n        return new BoolString(success,err,outString);\n    }\n\n// a utility class to signal success or failure, return an error message, and return a useful String value\n// see Try Out in C#\npublic final class BoolString {\n    public final boolean success;\n    public final String err;\n    public final String value;\n\n    public BoolString(boolean success, String err, String value){\n        this.success= success;\n        this.err= err;\n        this.value= value;\n    }\n}\n", "idx": 25}
{"project": "cipher", "commit_id": "Snippet17084232_338.java", "target": 0, "func": "private static final byte[] RAW = \"icanplayWillBeth\".getBytes();\nKeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\nkgen.init(128);\nSecretKeySpec skeySpec = new SecretKeySpec(RAW,\"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE,skeySpec);`\nbyte[] encrypted = cipher.doFinal(XXXXX);\n", "idx": 26}
{"project": "cipher", "commit_id": "Snippet45682922_27732.java", "target": 0, "func": "protected static final String DES_ECB_PKCS5PADDING = \"DESede/ECB/PKCS5Padding\";\n\n public static String decryptValueDirect(String value, String key)\n            throws NoSuchAlgorithmException, NoSuchPaddingException,\n            GeneralSecurityException, IllegalBlockSizeException,\n            BadPaddingException {\n        byte[] bytes = Base64.decodeBase64(value);\n        Cipher cipher = Cipher.getInstance(DES_ECB_PKCS5PADDING);\n        cipher.init(Cipher.DECRYPT_MODE, convertSecretKey(key.getBytes()));\n        byte[] decryptedValue = cipher.doFinal(bytes);\n\n        String nstr =  new String(decryptedValue);\n        return nstr;\n    }\nprotected static SecretKey convertSecretKey(byte[] encryptionKey) throws GeneralSecurityException {\n        if (encryptionKey == null || encryptionKey.length == 0)\n            throw new IllegalArgumentException(\"Encryption key must be specified\");\n\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(TRIPLEDES);\n        KeySpec keySpec = new DESedeKeySpec(encryptionKey);\n        return keyFactory.generateSecret(keySpec);\n    }\n", "idx": 27}
{"project": "cipher", "commit_id": "Snippet18362137_1407.java", "target": 0, "func": "`private static final String ALGO = \"AES\";\n private static final byte[] keyValue = \n new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't', 'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\n\n public static String encrypt(String Data) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(\"AES\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(Data.getBytes());\n    String encryptedValue = new BASE64Encoder().encode(encVal);\n    return encryptedValue;\n}\n\npublic static String decrypt(String encryptedData) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    return decryptedValue;\n}\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, ALGO);\n    return key;\n}\n\npublic static void main(String[] args) throws Exception {\n\n    String data = \"SOME TEXT\";\n    String dataEnc = AES.encrypt(data);\n    String dataDec = AES.decrypt(dataEnc);\n\n    System.out.println(\"Plain Text : \" + data);\n    System.out.println(\"Encrypted Text : \" + dataEnc);\n    System.out.println(\"Decrypted Text : \" + dataDec);\n}`\n", "idx": 28}
{"project": "cipher", "commit_id": "Snippet13459402_36986.java", "target": 0, "func": "if (packet instanceof IPPacket) {\n\n    IPPacket ipp = (IPPacket) packet;\n    InetAddress dest = ipp.dst_ip;\n    KeyGenerator keygenerator;\n\n    try {\n        keygenerator = KeyGenerator.getInstance(\"DES\");\n        SecretKey myDesKey = keygenerator.generateKey();\n        Cipher desCipher;\n        // Create the cipher\n        desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n        byte[] ipEncrypted = desCipher.doFinal(ipp.dst_ip.getAddress());\n        InetAddress src = ipp.src_ip;\n        //   System.out.println(dest);\n        try {\n            ipp.dst_ip = InetAddress.getByAddress(ipEncrypted);\n        } catch(Exception e) {\n             System.out.println(e.getMessage());\n        }\n        ipp.src_ip = src;\n    } catch(Exception ex ) {\n        System.out.println(ex.getMessage());\n    }\n", "idx": 29}
{"project": "cipher", "commit_id": "Snippet43171180_25308.java", "target": 0, "func": "public static void encrypt(Key key, byte[] content) throws Exception {\n        Cipher cipher;\n        byte[] encrypted = null;\n        try {\n            cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE,  key);\n            encrypted = cipher.doFinal(content);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        saveFile(encrypted);\n        JOptionPane.showMessageDialog(null, \"Encryption complete\");\n    }\n\n\n public static void decrypt(Key key, byte[] textCryp) throws Exception {\n        Cipher cipher;\n        byte[] decrypted = null;\n        try {\n            cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            decrypted = cipher.doFinal(textCryp);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        saveFile(decrypted);\n        JOptionPane.showMessageDialog(null, \"Decryption complete\");\n    }\n", "idx": 30}
{"project": "cipher", "commit_id": "Snippet34286345_16216.java", "target": 0, "func": "public String notify(String message, String encryptionKey) {\n    Security.addProvider(new BouncyCastleProvider());\n    // System.out.println(message);\n    byte[] key = Base64.decode(encryptionKey);\n    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n    byte[] data = Base64.decode(message);\n    String decryptedString = \"\";\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(data);\n        decryptedString = new String(decrypted);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    System.out.println(decryptedString);\n    return decryptedString;\n}\n", "idx": 31}
{"project": "cipher", "commit_id": "Snippet9495366_33961.java", "target": 0, "func": "  private static byte[] decrypt(byte[] raw, byte[] encrypted) throws EncrypterException {\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\ntry {\n    final Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n    return cipher.doFinal(encrypted);\n\n} catch (Exception e) {\n    throw new EncrypterException(e);\n}\n}\n", "idx": 32}
{"project": "cipher", "commit_id": "Snippet46983038_28983.java", "target": 0, "func": "        int keySize = 16*8;\n        int iterations = 800000;\n        char[] password = \"password\".toCharArray();\n        SecureRandom random = new SecureRandom();\n        byte[] salt = random.generateSeed(8);\n\n        SecretKeyFactory secKeyFactory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA512\");\n        KeySpec spec = new PBEKeySpec(password, salt, iterations, keySize);\n        SecretKey pbeSecretKey = secKeyFactory.generateSecret(spec);\n        SecretKey desSecret = new SecretKeySpec(pbeSecretKey.getEncoded(), \"DESede\");\n\n        // iv needs to have block size\n        // we will use the salt for simplification\n        IvParameterSpec ivParam = new IvParameterSpec(salt);\n\n        Cipher cipher = Cipher.getInstance(\"DESEde/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE,  desSecret, ivParam);\n\n        System.out.println(\"salt: \"+Base64.getEncoder().encodeToString(salt));\n        System.out.println(cipher.getIV().length+\" iv: \"+Base64.getEncoder().encodeToString(cipher.getIV()));\n        byte[] ciphertext = cipher.doFinal(\"plaintext input\".getBytes());\n        System.out.println(\"encrypted: \"+Base64.getEncoder().encodeToString(ciphertext));\n", "idx": 33}
{"project": "cipher", "commit_id": "Snippet28383811_10548.java", "target": 0, "func": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage tbn;\n\nimport java.awt.Graphics2D;\nimport java.awt.Point;\nimport java.awt.Transparency;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ColorModel;\nimport java.awt.image.ComponentColorModel;\nimport java.awt.image.DataBuffer;\nimport java.awt.image.DataBufferByte;\nimport java.awt.image.Raster;\nimport java.awt.image.WritableRaster;\nimport java.io.File;\nimport java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.imageio.ImageIO;\n\n/**\n *\n * @author user\n */\npublic class DbtClass {\n\n    public static void main(String[] args) {\n        try {\n            BufferedImage orgnlimage = ImageIO.read(new File(\"parrruuuuu.png\"));\n            orgnlimage = user_space(orgnlimage);\n            byte[] orgnlimagebytes = get_byte_data(orgnlimage);\n            byte[] encryptedbytes = encrypt(orgnlimagebytes, \"abc\");\n            BufferedImage encryptedimage = toImage(encryptedbytes, orgnlimage.getWidth(), orgnlimage.getHeight());\n            ImageIO.write(encryptedimage, \"png\", new File(\"encrypted.png\"));\n\n            /////////////////////////////////////////////////////////////////////\n            /////////////////////////////////////////////////////////////////////\n\n            byte[] encryptedbytes2 = get_byte_data(encryptedimage);\n            System.out.println(\"encryptedbytes before writing: \"+encryptedbytes2.length);\n\n            BufferedImage encryptedimage3 = ImageIO.read(new File(\"encrypted.png\"));\n            byte[] encryptedbyte3 = get_byte_data(encryptedimage3);\n            System.out.println(\"encryptedbytes after writing: \"+encryptedbyte3.length);\n\n\n        } catch (IOException ex) {\n            Logger.getLogger(DbtClass.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n\n    public static BufferedImage user_space(BufferedImage image) {\n        //create new_img with the attributes of image\n        BufferedImage new_img = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_3BYTE_BGR);\n        Graphics2D graphics = new_img.createGraphics();\n        graphics.drawRenderedImage(image, null);\n        graphics.dispose(); //release all allocated memory for this image\n        return new_img;\n    }\n\n    public static byte[] get_byte_data(BufferedImage image) {\n        WritableRaster raster = image.getRaster();\n        DataBufferByte buffer = (DataBufferByte) raster.getDataBuffer();\n        return buffer.getData();\n    }\n\n    public static byte[] encrypt(byte[] orgnlbytes, String key) {\n        byte[] encbytes = null;\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n            SecureRandom random = SecureRandom.getInstance(\"SHA1PRNG\");\n            // cryptograph. secure random \n            random.setSeed(key.getBytes());\n\n            keyGen.init(128, random);\n            // for example\n            SecretKey secretKey = keyGen.generateKey();\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            encbytes = cipher.doFinal(orgnlbytes);\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(DbtClass.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (NoSuchPaddingException ex) {\n            Logger.getLogger(DbtClass.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (InvalidKeyException ex) {\n            Logger.getLogger(DbtClass.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (IllegalBlockSizeException ex) {\n            Logger.getLogger(DbtClass.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (BadPaddingException ex) {\n            Logger.getLogger(DbtClass.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return encbytes;\n    }\n\n    public static BufferedImage toImage(byte[] imagebytes, int width, int height) {\n        DataBuffer buffer = new DataBufferByte(imagebytes, imagebytes.length);\n        WritableRaster raster = Raster.createInterleavedRaster(buffer, width, height, 3 * width, 3, new int[]{2, 1, 0}, (Point) null);\n        ColorModel cm = new ComponentColorModel(ColorModel.getRGBdefault().getColorSpace(), false, true, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);\n        return new BufferedImage(cm, raster, true, null);\n    }\n}\n", "idx": 34}
{"project": "cipher", "commit_id": "Snippet12791339_36455.java", "target": 0, "func": "public static String aes128(String key, String data, final int direction) {\n    SecureRandom rand = new SecureRandom(key.getBytes());\n    byte[] randBytes = new byte[16];\n    rand.nextBytes(randBytes);\n    SecretKey encKey = new SecretKeySpec(randBytes, \"AES\");\n\n    Cipher cipher = null;\n    try {\n        cipher = Cipher.getInstance(\"AES\");\n        cipher.init((direction == ENCRYPT ? Cipher.ENCRYPT_MODE : Cipher.DECRYPT_MODE), encKey);\n    } catch (InvalidKeyException e) {\n        return null;\n    } catch (NoSuchPaddingException e) {\n        return null;\n    } catch (NoSuchAlgorithmException e) {\n        return null;\n    }\n\n    try {\n        if (direction == ENCRYPT) {\n            byte[] encVal = cipher.doFinal(data.getBytes());\n            String encryptedValue = Base64.encode(encVal);\n            return encryptedValue;\n        } else {\n            byte[] dataBytes = Base64.decode(data);\n            byte[] encVal = cipher.doFinal(dataBytes);\n            return new String(encVal);\n        }\n    } catch (NullPointerException e) {\n        return null;\n    } catch (BadPaddingException e) {\n        return null;\n    } catch (IllegalBlockSizeException e) {\n        return null;\n    }\n}\n", "idx": 35}
{"project": "cipher", "commit_id": "Snippet28610751_10763.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.GeneralSecurityException;\nimport java.security.Key;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Hex;\n\npublic class TripleDes3 {\n    private Cipher cipher = null;\n    private SecretKey key = null;\n    private byte[] bytes = null;\n    private IvParameterSpec iv = null;\n\n    public static void main(String[] args) throws Exception {\n        try {\n            String hexKey = \"GD6GTT56HKY4HGF6FH3JG9J5\";\n            //TripleDes3 encryptor = new TripleDes3(new String(Hex.decodeHex(hexKey.toCharArray())));\n            TripleDes3 encryptor = new TripleDes3(hexKey);\n            String original = \"ABC\";\n            System.out.println(\"Oringal: \\\"\" + original + \"\\\"\");\n\n            String enc = encryptor.encrypt(original);\n            System.out.println(\"Encrypted: \\\"\" + enc.toUpperCase() + \"\\\"\");\n\n            String dec = encryptor.decrypt(enc);\n            System.out.println(\"Decrypted: \\\"\" + dec.toUpperCase() + \"\\\"\");\n\n            if (dec.equals(original)) {\n                System.out.println(\"Encryption ==> Decryption Successful\");\n            }\n        } catch (Exception e) {\n            System.out.println(\"Error: \" + e.toString());\n        }\n    }\n\n    public TripleDes3(String encryptionKey) throws GeneralSecurityException, DecoderException {\n        cipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n        try {\n            key = new SecretKeySpec(encryptionKey.getBytes(\"ISO8859_15\"), \"DESede\");\n            iv = new IvParameterSpec(Hex.decodeHex(\"0123456789abcdef\".toCharArray()));\n\n        } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    public String encrypt(String input) throws GeneralSecurityException, UnsupportedEncodingException {\n        bytes = input.getBytes(\"ISO8859_15\");\n        bytes = Arrays.copyOf(bytes, ((bytes.length+7)/8)*8);\n        return new String(Hex.encodeHex(encryptB(bytes)));\n    }\n\n    public String decrypt(String input) throws GeneralSecurityException, DecoderException, UnsupportedEncodingException {\n        bytes = Hex.decodeHex(input.toCharArray());\n        String decrypted = new String(decryptB(bytes), \"ISO8859_15\");\n        if (decrypted.indexOf((char) 0) > 0) {\n            decrypted = decrypted.substring(0, decrypted.indexOf((char) 0));\n        }\n        return decrypted;\n    }\n\n    public byte[] encryptB(byte[] bytes) throws GeneralSecurityException {\n        cipher.init(Cipher.ENCRYPT_MODE, (Key) key, iv);\n        return cipher.doFinal(bytes);\n    }\n\n    public byte[] decryptB(byte[] bytes) throws GeneralSecurityException {\n        cipher.init(Cipher.DECRYPT_MODE, (Key) key, iv);\n        return cipher.doFinal(bytes);\n    }\n}\n", "idx": 36}
{"project": "cipher", "commit_id": "Snippet6462954_32148.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport org.apache.commons.net.util.Base64;\n\n   private static SecretKey key;\n\n         try {\n            byte[] secretBytes = \"secret key\".getBytes(\"UTF8\");\n            DESKeySpec keySpec = new DESKeySpec(secretBytes);\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n            key = keyFactory.generateSecret(keySpec);\n         } catch (Exception e) {\n            Log.e(Flashum.LOG_TAG, \"DatabaseHelper \" + e.toString());\n         }\n\n   public byte[] encryptPassword(String userpw) {\n      try {\n         byte[] cleartext = userpw.getBytes(\"UTF8\");      \n\n         Cipher cipher = Cipher.getInstance(\"DES\");\n         cipher.init(Cipher.ENCRYPT_MODE, key);\n         byte[] clearBytes = cipher.doFinal(cleartext);\n         byte[] encryptedPwd = Base64.encodeBase64(clearBytes);\n         return encryptedPwd;\n      } catch (Exception e) {\n         Log.e(Flashum.LOG_TAG, \"DatabaseHelper \" + e.toString());\n      }\n      return null;\n   }\n\n   public String decryptPassword(byte[] userpw) {\n      String pw = \"\";\n      try {\n         byte[] encrypedPwdBytes = Base64.decodeBase64(userpw);\n\n         Cipher cipher = Cipher.getInstance(\"DES\");\n         cipher.init(Cipher.DECRYPT_MODE, key);\n         byte[] plainTextPwdBytes = cipher.doFinal(encrypedPwdBytes);\n         pw = new String(plainTextPwdBytes, \"UTF8\");\n      } catch (Exception e) {\n         Log.e(Flashum.LOG_TAG, \"DatabaseHelper \" + e.toString());\n      }\n      return pw;\n   }\n", "idx": 37}
{"project": "cipher", "commit_id": "Snippet3700039_30838.java", "target": 0, "func": "public static byte[] decryptAES(byte[] key, byte[] text) throws Exception {   \n            SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");   \n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS1Padding\");   \n            cipher.init(Cipher.DECRYPT_MODE, skeySpec);   \n            byte[] decrypted = cipher.doFinal(text);   \n            return decrypted;   \n        }\n", "idx": 38}
{"project": "cipher", "commit_id": "Snippet47466757_29450.java", "target": 0, "func": "pbKey = (PublicKey) pr.readObject();\n    Cipher cipher = Cipher.getInstance(\"RSA/None/OAEPWithSHA1AndMGF1Padding\", \"BC\");\n", "idx": 39}
{"project": "cipher", "commit_id": "Snippet45004367_27123.java", "target": 0, "func": "Cipher.getInstance(\"DES/ECB/ZeroBytePadding\", \"BC\");\n", "idx": 40}
{"project": "cipher", "commit_id": "Snippet17134249_403.java", "target": 0, "func": "public static byte[] decrypt(byte [] encryptedByteArray,String keyString)throws NoSuchAlgorithmException, \n                                                            NoSuchPaddingException, InvalidKeyException,\n                                                            IllegalBlockSizeException, BadPaddingException\n{\n    SecretKey key=loadKey(keyString);\n\nbyte[] clearByteArray;\n\nCipher dCipher=Cipher.getInstance(\"AES\");\ndCipher.init(Cipher.DECRYPT_MODE,key );\nclearByteArray=dCipher.doFinal(encryptedByteArray);\nreturn clearByteArray;\n", "idx": 41}
{"project": "cipher", "commit_id": "Snippet4285496_31072.java", "target": 0, "func": "public class TestApplet extends Applet {\n Label lblKey = new Label(\"Key\");\n TextField inputLineKey = new TextField(15);\n Label lblString = new Label(\"Value\");\n TextField inputLineString = new TextField(15);\n Label lblStringEncoded = new Label(\"Encoded Value\");\n TextField inputLineStringEncoded = new TextField(15);\n Label lblStringDecoded = new Label(\"Decoded Value\");\n TextField inputLineStringDecoded = new TextField(15);\n Button encodeButton = new Button(\"Test Encrypt\");\n Button decodeButton = new Button(\"Test Decrypt\");\n\n public TestApplet() {\n  add(inputLineKey);\n  add(lblKey);\n  add(inputLineString);\n  add(lblString);\n  add(inputLineStringEncoded);\n  add(lblStringEncoded);\n  add(inputLineStringDecoded);\n  add(lblStringDecoded);\n  add(encodeButton);\n  add(decodeButton);\n  // inputLine.addActionListener(new MyActionListener());\n }\n\n /**\n  * Turns array of bytes into string\n  * \n  * @param buf\n  *            Array of bytes to convert to hex string\n  * @return Generated hex string\n  */\n public static String asHex(byte buf[]) {\n  StringBuffer strbuf = new StringBuffer(buf.length * 2);\n  int i;\n\n  for (i = 0; i < buf.length; i++) {\n   if (((int) buf[i] & 0xff) < 0x10)\n    strbuf.append(\"0\");\n\n   strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n  }\n\n  return strbuf.toString();\n }\n\n public boolean action(Event e, Object args) {\n\n  // so do something!\n\n  // ///////////////////////\n  try {\n   String message = \"This is just an example\";\n\n   // Get the KeyGenerator\n\n   KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n   kgen.init(128); // 192 and 256 bits may not be available\n\n   // Generate the secret key specs.\n   SecretKey skey = kgen.generateKey();\n   byte[] raw = skey.getEncoded();\n\n   SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n   // Instantiate the cipher\n\n   Cipher cipher = Cipher.getInstance(\"AES\");\n\n   if (e.target == encodeButton) { // User has clicked on encrypt\n           // button\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n    byte[] encrypted = cipher.doFinal((inputLineString.getText()\n      .length() == 0 ? message : inputLineString.getText())\n      .getBytes());\n    // System.out.println(\"encrypted string: \" + asHex(encrypted));\n\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] original = cipher.doFinal(encrypted);\n    String originalString = new String(original);\n    // System.out.println(\"Original string: \" +\n    // originalString + \" \" + asHex(original));\n\n    // Create a BigInteger using the byte array\n    BigInteger bi = new BigInteger(encrypted);\n\n    inputLineStringEncoded.setText(bi.toString(2)); // (new String(encrypted));\n    inputLineStringDecoded.setText(originalString);\n   }\n\n   if (e.target == decodeButton) { // User has clicked on decrypt\n           // button\n   // cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n   //\n   // byte[] encrypted = cipher.doFinal((inputLineString.getText()\n   // .length() == 0 ? message : inputLineString.getText())\n   // .getBytes());\n   // // System.out.println(\"encrypted string: \" + asHex(encrypted));\n\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    // Parse binary string\n    BigInteger bi = new BigInteger(inputLineStringEncoded\n      .getText(), 2);\n\n    byte[] original = cipher.doFinal(bi.toByteArray());\n    String originalString = new String(original);\n    // System.out.println(\"Original string: \" +\n    // originalString + \" \" + asHex(original));\n    inputLineString.setText(originalString);\n    inputLineStringDecoded.setText(originalString);\n   }\n\n  } catch (Exception exc) {\n   inputLineStringEncoded.setText(exc.getMessage());\n  }\n  return true; // Yes, we do need this!\n }\n\n class MyActionListener implements ActionListener {\n  public void actionPerformed(ActionEvent event) {\n  }\n }\n}\n________________________________\n", "idx": 42}
{"project": "cipher", "commit_id": "Snippet39219316_21086.java", "target": 0, "func": "private static char[] ENCRYPTION_PASSWORD\n     = \"some password populated by configuration\".toCharArray();\n\npublic static String encrypt(String mystring)\n  throws GeneralSecurityException, UnsupportedEncodingException {\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey key = keyFactory.generateSecret(new PBEKeySpec(ENCRYPTION_PASSWORD));\n    Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n    return DatatypeConverter\n        .printBase64Binary(pbeCipher.doFinal(mystring.getBytes(\"UTF-8\")));\n}\n\npublic static String decrypt(String string)\n  throws GeneralSecurityException, IOException {\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey key = keyFactory.generateSecret(new PBEKeySpec(ENCRYPTION_PASSWORD));\n    Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n    return new String(pbeCipher.doFinal(DatatypeConverter\n                                           .parseBase64Binary(estring)), \"UTF-8\");\n}\n", "idx": 43}
{"project": "cipher", "commit_id": "Snippet20796042_3383.java", "target": 0, "func": "public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    // TODO Auto-generated method stub\n            String FileName=\"encryptedtext.txt\";\n            String FileName2=\"decryptedtext.txt\";\n            String pad=\"0\"; \n\n            KeyGenerator KeyGen=KeyGenerator.getInstance(\"AES\");\n            KeyGen.init(128);\n\n            SecretKey SecKey=KeyGen.generateKey();\n\n            Cipher AesCipher=Cipher.getInstance(\"AES\");\n            AesCipher.init(Cipher.ENCRYPT_MODE,SecKey);\n\n            byte[] byteText=\"My name is yogesh\".getBytes();\n            byte[] byteCipherText=AesCipher.doFinal(byteText);\n            String cipherText = null;\n\n            try {\n                FileWriter fw=new FileWriter(FileName);\n                BufferedWriter bw=new BufferedWriter(fw);\n                bw.write(byteCipherText.toString());\n                bw.close();\n            }catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n\n            try {\n                FileReader fr=new FileReader(FileName);\n                BufferedReader br=new BufferedReader(fr);\n                cipherText=br.readLine();\n                br.close();\n            } catch (FileNotFoundException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n\n            AesCipher.init(Cipher.DECRYPT_MODE,SecKey);\n            while(((cipherText.getBytes().length)%16)!=0)\n            {\n                cipherText=cipherText+pad;\n\n\n            }\n\n            byte[] bytePlainText=AesCipher.doFinal(cipherText.getBytes());\n            FileWriter fw1;\n            try {\n                fw1 = new FileWriter(FileName2);\n                BufferedWriter bw1=new BufferedWriter(fw1);\n                bw1.write(bytePlainText.toString());\n                bw1.close();\n\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n\n\n\n\n\n\n}\n", "idx": 44}
{"project": "cipher", "commit_id": "Snippet7914284_32998.java", "target": 0, "func": "private static byte[] getPassKey(String pass)\n{\n    byte[] passKey = pass.getBytes(\"UTF-8\"); //get byte arrays of the given password\n    byte[] shaKey = MessageDigest.getInstance(\"SHA-1\").digest(passKey); \n    return Arrays.copyOf(shaKey,24);\n}\n\npublic static String encrypt(String pass, String plainText) throws NoSuchAlgorithmException, UnsupportedEncodingException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{\n\n    Cipher desCipher = Cipher.getInstance(\"DESede\");\n    desCipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(getPassKey(pass), \"DESede\")); \n\n    byte[] cipherTextBytes = desCipher.doFinal(plainText.getBytes());\n    String encoded = new sun.misc.BASE64Encoder().encode(cipherTextBytes);\n\n    return encoded;\n}\n\npublic static String decrypt(String pass,String cipherText) throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{\n\n    byte[] decoded = new sun.misc.BASE64Encoder().decode(cipherText);\n\n    Cipher desCipher = Cipher.getInstance(\"DESede\");\n    desCipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(getPassKey(pass), \"DESede\"));\n    plainText = new String(desCipher.doFinal(decoded));\n    return plainText;\n}\n", "idx": 45}
{"project": "cipher", "commit_id": "Snippet15902267_38890.java", "target": 0, "func": "// Create the cipher \nCipher desCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n", "idx": 46}
{"project": "cipher", "commit_id": "Snippet39030204_20902.java", "target": 0, "func": "byte[] buf = Base64.getDecoder().decode(\"AutMdzthDvPlE+UnhcHa2h4UZGPdme7t\");\nSystem.out.println(buf.length);\nString key = \"\" + 2270457870L;\nbyte[] keyBytes = key.getBytes(\"UTF8\");\nSystem.out.println(keyBytes.length);\n\nCipher cipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\ncipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(keyBytes, \"Blowfish\"));\n\nbyte[] newBytes = cipher.doFinal(buf);\nSystem.out.println(newBytes.length);\nSystem.out.println(Arrays.toString(newBytes));\n", "idx": 47}
{"project": "cipher", "commit_id": "Snippet32012227_14062.java", "target": 0, "func": "<%\nString CONN_STRING = \"jdbc:mysql://localhost/pmsdb\";\nString USERNAME = \"dbuser\";\nString PASSWORD = \"dbpassword\";\n\nConnection conn=null;\nPreparedStatement pst=null;\nResultSet rs =null;\n\n //variables to encrypt  \n    byte [] input ;\nbyte [] keyBytes = \"12345678\".getBytes();\nbyte [] ivBytes =\"input123\".getBytes();\n\nSecretKeySpec key = new SecretKeySpec(keyBytes,\"DES\");\nIvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\nCipher cipher;\nbyte[] cipherText;\nint ctLength=0;\n\nClass.forName(\"com.mysql.jdbc.Driver\");\n    conn = DriverManager.getConnection(CONN_STRING, USERNAME, PASSWORD);\n    String user = request.getParameter(\"Username\");\n    session.putValue(\"Username\",user);\n    String pwd = request.getParameter(\"Password\");\n\n\n    //checking with pwd encryptd in db\n      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n      input = pwd.getBytes();\n      key = new SecretKeySpec(keyBytes, \"DES\");\n      ivSpec = new IvParameterSpec(ivBytes);\n      cipher = Cipher.getInstance(\"DES/CTR/NoPadding\",\"BC\");\n\n      cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);\n      cipherText = new byte[cipher.getOutputSize(input.length)];\n\n      ctLength+=cipher.update(input, 0, input.length, cipherText, 0);\n\n      ctLength+= cipher.doFinal(cipherText, ctLength);\n      String epwd = new String(cipherText);\n\n\n    String sql = \"select * from websupplierinfo where username=? and password=?\";\n    pst = conn.prepareStatement(sql);\n    pst.setString(1,user);\n    pst.setString(2,epwd);\n    rs = pst.executeQuery();\n    if(rs.next()){\n        if(rs.getString(\"password\").equals(epwd)){\n            //wantto go to supplier home page\n            response.sendRedirect(\"supplierpg-status.jsp\");\n        }else{\n        %>  \n        <script language=\"JavaScript\">\n            alert(\"Incorrect Login Details.. Try again\");\n        </script>\n        <%            \n        } \n    }\n    %>\n", "idx": 48}
{"project": "cipher", "commit_id": "Snippet6052429_31908.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\ncipher.init(Cipher.DECRYPT_MODE, serverPublicKey);\nCipherInputStream cipherIn = new CipherInputStream(inFromServer, cipher);\n\nbyte[] fileBuffer = new byte[BUFFER_SIZE];\nFileOutputStream fileWriter = new FileOutputStream(newFileName);\nint bytesRead;\nwhile((bytesRead = cipherIn.read(fileBuffer)) != EOF){\n    fileWriter.write(fileBuffer, 0, bytesRead);\n}\nfileWriter.flush();\nfileWriter.close();\n", "idx": 49}
{"project": "cipher", "commit_id": "Snippet18085125_1123.java", "target": 0, "func": "public static String encrypt(byte[] key, byte[] iv, String unencrypted) throws NoSuchAlgorithmException,\n        NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException,\n        IllegalBlockSizeException, BadPaddingException{\n    RC2ParameterSpec ivSpec = new RC2ParameterSpec(key.length*8, iv);\n    Cipher cipher = Cipher.getInstance(\"RC2/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, \"RC2\"), ivSpec);\n    byte[] encrypted = cipher.doFinal(unencrypted.getBytes());\n    return DatatypeConverter.printBase64Binary(encrypted);\n}\n\npublic static String decrypt(byte[] key, byte[] iv, String encrypted) throws NoSuchAlgorithmException,\n        NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException,\n        IllegalBlockSizeException, BadPaddingException{\n    RC2ParameterSpec ivSpec = new RC2ParameterSpec(key.length*8, iv);\n    Cipher cipher = Cipher.getInstance(\"RC2/CBC/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, \"RC2\"), ivSpec);\n    byte[] decrypted = cipher.doFinal(DatatypeConverter.parseBase64Binary(encrypted));\n\n    return new String(decrypted);\n}\n", "idx": 50}
{"project": "cipher", "commit_id": "Snippet24021142_6332.java", "target": 0, "func": "private static SecretKeySpec secret;\nprivate static String seed;\nprivate static String text;\nprivate static String salt = \"Salt123\";\nprivate static int pswdIterations = 65536;\nprivate static int keySize = 256;\n\n/**\n * \n * @param mySeed\n */\npublic static void setSeed(String mySeed) {\n\n    try {\n        byte[] saltBytes = salt.getBytes(\"UTF-8\");\n        PBEKeySpec spec = new PBEKeySpec(mySeed.toCharArray(), saltBytes,\n                pswdIterations, keySize);\n        SecretKeyFactory factory = SecretKeyFactory\n                .getInstance(\"PBKDF2WithHmacSHA1\");\n        SecretKey secretKey = factory.generateSecret(spec);\n        secret = new SecretKeySpec(secretKey.getEncoded(), \"AES\");\n\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeySpecException e) {\n        e.printStackTrace();\n    }\n\n}\n\npublic static String getEncryptedStringFor(String text) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, secret);\n        byte[] encryptedData = cipher.doFinal(text.getBytes(\"UTF-8\"));\n        return new String(Base64.encodeBase64(encryptedData));\n\n    } catch (Exception e) {\n        System.out.println(\"Error while encrypting: \" + e.toString());\n    }\n    return null;\n}\n\npublic static String getDecryptedStringFor(String text) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        cipher.init(Cipher.DECRYPT_MODE, secret);\n        return (new String(cipher.doFinal(Base64\n                .decodeBase64(text.getBytes(\"UTF-8\")))));\n    } catch (Exception e) {\n        System.out.println(\"Error while decrypting: \" + e.toString());\n    }\n    return null;\n}\n", "idx": 51}
{"project": "cipher", "commit_id": "Snippet20060036_2705.java", "target": 0, "func": "public byte[] encrypt(byte[] key, byte[] pText) throws Exception\n{\n    System.out.println( DatatypeConverter.printHexBinary(key)); // Outputs: 3FBB589A6A941D01\n    System.out.println( DatatypeConverter.printHexBinary(pText)); // Outputs: 92F3BD61F852727E\n    Cipher ciph = Cipher.getInstance(\"DES\");\n    SecretKey blah = new SecretKeySpec(key, 0, key.length, \"DES\");\n\n    ciph.init(Cipher.ENCRYPT_MODE,  blah);\n    byte[] test = ciph.doFinal(pText); \n    System.out.println( DatatypeConverter.printHexBinary(test)); // Outputs: 4799F8A1C0A427E17E2B19DD22064444\n\n    return test;\n}\n", "idx": 52}
{"project": "cipher", "commit_id": "Snippet22082893_4503.java", "target": 0, "func": "import java.nio.charset.StandardCharsets;\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport java.security.spec.AlgorithmParameterSpec;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nfinal class CrapEncryption\n{\n\n  private static final byte[] MAGIC = \"Salted__\".getBytes(StandardCharsets.US_ASCII);\n\n  private static final int KEY_LEN = 8;\n\n  private static final int SALT_LEN = 8;\n\n  private static final SecureRandom random = new SecureRandom();\n\n  static byte[] pretendToEncrypt(byte[] password, byte[] msg)\n    throws GeneralSecurityException\n  {\n    byte[] salt = new byte[SALT_LEN];\n    random.nextBytes(salt);\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n    md5.update(password);\n    md5.update(salt);\n    byte[] dk = md5.digest();\n    Cipher des;\n    try {\n      SecretKey key = new SecretKeySpec(dk, 0, KEY_LEN, \"DES\");\n      AlgorithmParameterSpec iv = new IvParameterSpec(dk, KEY_LEN, SALT_LEN);\n      des = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n      des.init(Cipher.ENCRYPT_MODE, key, iv);\n    }\n    finally {\n      Arrays.fill(dk, (byte) 0);\n    }\n    byte[] pkg = new byte[des.getOutputSize(msg.length) + MAGIC.length + SALT_LEN];\n    System.arraycopy(MAGIC, 0, pkg, 0, MAGIC.length);\n    System.arraycopy(salt, 0, pkg, MAGIC.length, SALT_LEN);\n    des.doFinal(msg, 0, msg.length, pkg, MAGIC.length + SALT_LEN);\n    return pkg;\n  }\n\n  static byte[] decrypt(byte[] password, byte[] pkg)\n    throws GeneralSecurityException\n  {\n    if ((pkg.length < MAGIC.length) || !Arrays.equals(Arrays.copyOfRange(pkg, 0, MAGIC.length), MAGIC))\n      throw new IllegalArgumentException(\"Expected magic number \\\"Salted__\\\"\");\n    if (pkg.length < MAGIC.length + SALT_LEN)\n      throw new IllegalArgumentException(\"Missing salt\");\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n    md5.update(password); /* password */\n    md5.update(pkg, MAGIC.length, SALT_LEN); /* salt */\n    byte[] dk = md5.digest();\n    Cipher des;\n    try {\n      SecretKey secret = new SecretKeySpec(dk, 0, KEY_LEN, \"DES\");\n      des = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n      des.init(Cipher.DECRYPT_MODE, secret, new IvParameterSpec(dk, KEY_LEN, SALT_LEN));\n    }\n    finally {\n      Arrays.fill(dk, (byte) 0);\n    }\n    return des.doFinal(pkg, MAGIC.length + SALT_LEN, pkg.length - MAGIC.length - SALT_LEN);\n  }\n\n  public static void main(String... argv)\n    throws Exception\n  {\n    byte[] password = \"some key\".getBytes(StandardCharsets.UTF_8);\n    byte[] message = \"hello world\".getBytes(StandardCharsets.UTF_8);\n    byte[] encrypted = pretendToEncrypt(password, message);\n    byte[] recovered = decrypt(password, encrypted);\n    System.out.println(new String(recovered, StandardCharsets.UTF_8));\n  }\n\n}\n", "idx": 53}
{"project": "cipher", "commit_id": "Snippet41590668_23513.java", "target": 0, "func": "import javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\nimport javax.crypto.Cipher;\nimport java.util.Base64;\nimport java.security.MessageDigest;\n\npublic class HelloWorld\n{\n  public static void main(String[] args) {\n    String keyhex,salt,salto,keystr;\n    salt = \"mysaltmysalt1234\";\n    keyhex = \"ce4f5bf05a57b6f9e0d7df628d266d66\";\n    byte[] binkey = DatatypeConverter.parseHexBinary(keyhex);\n    keystr = new String(binkey);\n    salto = encrypt(salt.getBytes(), keystr);\n    System.out.println(salto);\n  }\n\n\n\n  public static String encrypt(byte[] key,String inputString) {\n    try\n    {\n      SecretKeySpec secretKeySpec = new SecretKeySpec(key,\n \"AES\");\n      Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n      cipher.init(1, secretKeySpec);\n      byte[] aBytes = cipher.doFinal(inputString.getBytes());\n      String base64 = new String(Base64.getEncoder().encode(aBytes));\n      return base64; \n    } catch(Exception ex) {\n        System.out.println(\"Exception occured in encrypt : \"+ex.toString());\n    }\n    return null; \n  }\n\n}\n", "idx": 54}
{"project": "cipher", "commit_id": "Snippet16752606_138.java", "target": 0, "func": "Cipher c3des = Cipher.getInstance(\"DESede/CBC/NoPadding\");\nc3des.init(Cipher.DECRYPT_MODE, myKey, ivspec);\nbyte[] cipherText = c3des.doFinal(enc);\n", "idx": 55}
{"project": "cipher", "commit_id": "Snippet8629577_33382.java", "target": 0, "func": "cipher = Cipher.getInstance(\"Blowfish\");\n", "idx": 56}
{"project": "cipher", "commit_id": "Snippet42665178_24693.java", "target": 0, "func": "    package com.abc.some.common.nativeDES;\n\n    import java.io.ByteArrayOutputStream;\nimport java.security.spec.KeySpec;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.xml.bind.DatatypeConverter;\n\npublic class DESEncrypt {\n    public String keyValue = \"123456789\";\n    public static void main(String[] args) {\n        String text = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?><SomeRequest><OrderNumber>1564578</OrderNumber></SomeRequest>\";\n        String codedtext =\"not encrypted\";\n        try{\n            codedtext = new DESEncrypt().Encrypt1(text);\n            //codedtext = new DESEncrypt().encrypt(text);\n        }catch (Exception e) {\n            System.out.println(\"Exception in Encryption.. \" + e.getMessage());\n        }\n\n        System.out.println(codedtext);\n\n    }\n    public String Encrypt1(String CXML) {\n        try {\n            KeySpec myKey = new DESKeySpec(keyValue.getBytes(\"UTF8\"));\n        SecretKey key = SecretKeyFactory.getInstance(\"DES\").generateSecret(myKey);\n        Cipher ecipher = Cipher.getInstance(\"DES\");\n        ecipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] data = CXML.getBytes(\"ASCII\");\n\n        Cipher c = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        c.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] crypt = ecipher.doFinal(data);\n        //String encoded = DatatypeConverter.printBase64Binary(crypt.toString().getBytes(\"ASCII\"));\n        //String encoded = DatatypeConverter.printBase64Binary(crypt.getBytes(\"ASCII\"));\n\n        String encoded = DatatypeConverter.printBase64Binary(crypt).toString();\n\n        System.out.println(encoded);\n\n        return encoded;\n        } catch (Exception ex) {\n        }\n\n        return null;\n    }    \n}\n", "idx": 57}
{"project": "cipher", "commit_id": "Snippet23677746_6004.java", "target": 0, "func": "import java.net.URLDecoder;\nimport java.net.URLEncoder;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class EncTest {\n\npublic static String decryptString(String str, String key) throws Exception {\n\n    str = URLDecoder.decode(str, \"UTF-8\");\n    String result = java.net.URLDecoder.decode(str, \"UTF-8\");\n    byte[] keyBytes = key.getBytes(\"UTF-8\");\n\n    SecretKeySpec keySpec = new SecretKeySpec(keyBytes, \"DESede\");\n    Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, keySpec);\n    BASE64Decoder base64decoder = new BASE64Decoder();\n\n    byte[] clrtxt = base64decoder.decodeBuffer(result);\n    byte[] cphtxt = cipher.doFinal(clrtxt);\n\n    StringBuffer sBuffer = new StringBuffer();\n\n    for (int i = 0; i < cphtxt.length; i++) {\n        sBuffer.append((char) cphtxt[i]);\n    }\n\n    return sBuffer.toString();\n\n}\n\npublic static String encryptString(String str, String key) throws Exception {\n\n    byte[] keyBytes = key.getBytes(\"UTF-8\");\n    SecretKeySpec keySpec = new SecretKeySpec(keyBytes, \"DESede\");\n    Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n\n    byte[] clrtxt = str.getBytes(\"UTF8\");\n    byte[] cphtxt = cipher.doFinal(clrtxt);\n\n    BASE64Encoder base64encoder = new BASE64Encoder();\n\n    return URLEncoder.encode(base64encoder.encode(cphtxt), \"UTF-8\");\n}\n", "idx": 58}
{"project": "cipher", "commit_id": "Snippet21044011_3631.java", "target": 0, "func": "import java.security.*;\n\nimport javax.crypto.*;\n\nimport java.security.spec.*;\n\nimport javax.crypto.spec.*;\n\nimport javax.crypto.spec.IvParameterSpec;\n\n\n\npublic class myProgram\n{\n  public static void main (String[] args) throws Exception\n  {\n\n    String text = \"Hello World;\n\n    SecureRandom sr = new SecureRandom();\n    byte [] iv = new byte[8];\n    sr.nextBytes(iv);\n    IvParameterSpec IV = new IvParameterSpec(iv);\n    KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n    Key mykey = kg.generateKey();\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, mykey,IV);\n\n    byte[] plaintext = text.getBytes(\"UTF8\");\n\n\n\n    byte[] ciphertext = cipher.doFinal(plaintext);\n\n    System.out.println(\"\\n\\nCiphertext: \");\n    for (int i=0;i<ciphertext.length;i++) {\n\n        if (chkEight(i)) {\n            System.out.print(\"\\n\");\n        }\n        System.out.print(ciphertext[i]+\" \");\n    }\n", "idx": 59}
{"project": "cipher", "commit_id": "Snippet45639971_27705.java", "target": 0, "func": "  public static void encrypt(SecretKey key, InputStream in, OutputStream out)\n      throws NoSuchAlgorithmException, InvalidKeyException,\n      NoSuchPaddingException, IOException {\n    // Create and initialize the encryption engine\n    Cipher cipher = Cipher.getInstance(\"DESede\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n\n    // Create a special output stream to do the work for us\n    CipherOutputStream cos = new CipherOutputStream(out, cipher);\n\n    // Read from the input and write to the encrypting output stream\n    byte[] buffer = new byte[2048];\n    int bytesRead;\n    while ((bytesRead = in.read(buffer)) != -1) {\n      cos.write(buffer, 0, bytesRead);\n    }\n    cos.close();\n\n    // For extra security, don't leave any plaintext hanging around memory.\n    java.util.Arrays.fill(buffer, (byte) 0);\n  }\n\n  /**\n   * Use the specified TripleDES key to decrypt bytes ready from the input\n   * stream and write them to the output stream. This method uses uses Cipher\n   * directly to show how it can be done without CipherInputStream and\n   * CipherOutputStream.\n   */\n  public static void decrypt(SecretKey key, InputStream in, OutputStream out)\n      throws NoSuchAlgorithmException, InvalidKeyException, IOException,\n      IllegalBlockSizeException, NoSuchPaddingException,\n      BadPaddingException {\n    // Create and initialize the decryption engine\n    Cipher cipher = Cipher.getInstance(\"DESede\");\n    cipher.init(Cipher.DECRYPT_MODE, key);\n\n    // Read bytes, decrypt, and write them out.\n    byte[] buffer = new byte[2048];\n    int bytesRead;\n    while ((bytesRead = in.read(buffer)) != -1) {\n      out.write(cipher.update(buffer, 0, bytesRead));\n    }\n\n    // Write out the final bunch of decrypted bytes\n    out.write(cipher.doFinal());\n    out.flush();\n  }\n", "idx": 60}
{"project": "cipher", "commit_id": "Snippet10300185_34666.java", "target": 0, "func": "public class CryptoLibrary {\n\nprivate Cipher encryptCipher;\nprivate sun.misc.BASE64Encoder encoder = new sun.misc.BASE64Encoder();\n\npublic CryptoLibrary() throws SecurityException{\n\n    java.security.Security.addProvider(new com.sun.crypto.provider.SunJCE());\n\n    char[] pass = \"NNSHHETJKKSNKH\".toCharArray();\n    byte[] salt = {\n    (byte) 0xa3, (byte) 0x21, (byte) 0x24, (byte) 0x2c,\n    (byte) 0xf2, (byte) 0xd2, (byte) 0x3e, (byte) 0x19 };\n\n    init(pass, salt, iterations);\n\n}\n\npublic void init(char[] pass, byte[] salt, int iterations)throws SecurityException{\n\n        PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec(salt, 20);\n        SecretKeyFactory kf = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey k = kf.generateSecret(new javax.crypto.spec.PBEKeySpec(pass));\n\n        encryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");\n        encryptCipher.init(Cipher.ENCRYPT_MODE, k, ps);\n    }\n}\n\npublic synchronized String encrypt(String str)  throws SecurityException{\n    if(str!=null){\n        byte[] utf8 = str.getBytes(\"UTF8\");\n        byte[] enc = encryptCipher.doFinal(utf8);\n        return encoder.encode(enc);\n    }\n    else {\n        return null;\n    }\n}\n}\n", "idx": 61}
{"project": "cipher", "commit_id": "Snippet19412696_2205.java", "target": 0, "func": "import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\n\npublic class EncTool {\n\npublic static void encrypt(String key, String filename) throws Throwable {\n    InputStream is = new FileInputStream(\"SomeFile.class\");\n    OutputStream os = new FileOutputStream(\"SomeFile.class\");\n    encrypt(key, Cipher.ENCRYPT_MODE, is, os);\n}\n\npublic static void decrypt(String key, String filename) throws Throwable {\n    InputStream is = new FileInputStream(\"SomeFile.class\");\n    OutputStream os = new FileOutputStream(\"SomeFile.class\");\n    decrypt(key, Cipher.DECRYPT_MODE, is, os);\n}\n\npublic static void encrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n\n    DESKeySpec dks = new DESKeySpec(key.getBytes());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey desKey = skf.generateSecret(dks);\n    Cipher cipher = Cipher.getInstance(\"DES\"); // DES/ECB/PKCS5Padding for SunJCE\n\n        cipher.init(Cipher.ENCRYPT_MODE, desKey);\n        CipherInputStream cis = new CipherInputStream(is, cipher);\n        doCopy(cis, os);\n\n}\n\npublic static void decrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n\n    DESKeySpec dks = new DESKeySpec(key.getBytes());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey desKey = skf.generateSecret(dks);\n    Cipher cipher = Cipher.getInstance(\"DES\"); // DES/ECB/PKCS5Padding for SunJCE\n\n        cipher.init(Cipher.DECRYPT_MODE, desKey);\n        CipherOutputStream cos = new CipherOutputStream(os, cipher);\n        doCopy(is, cos);\n\n}\n\npublic static void doCopy(InputStream is, OutputStream os) throws IOException {\n    byte[] bytes = new byte[64];\n    int numBytes;\n    while ((numBytes = is.read(bytes)) != -1) {\n        os.write(bytes, 0, numBytes);\n    }\n    os.flush();\n    os.close();\n    is.close();\n}\n\n}\n", "idx": 62}
{"project": "cipher", "commit_id": "Snippet13514256_37072.java", "target": 0, "func": "private static final String ALGORITHM = \"AES\";\n    private static final int ITERATIONS = 5;\n    private static final byte[] keyValue = new byte[] { '1', '2', '3', '4',\n            '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6' };\n\n\n    public static String encryptMessage(String message, String salt) {\n        String encMessage = null;\n        byte[] encVal = null;\n        String messageWithSalt = null;\n        try {\n            Key key = generateKey();\n\n            Cipher c = Cipher.getInstance(ALGORITHM);\n            c.init(Cipher.ENCRYPT_MODE, key);\n\n            for (int i = 0; i < ITERATIONS; i++) {\n                messageWithSalt = salt + encMessage;\n                encVal = c.doFinal(messageWithSalt.getBytes());\n                byte[] encryptedValue = new Base64().encode(encVal);\n                encMessage = new String(encryptedValue);\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n\n        }\n        return encMessage;\n    }\n", "idx": 63}
{"project": "cipher", "commit_id": "Snippet12981202_36496.java", "target": 0, "func": "    //These will be used as the source of the configuration file's stored attributes.\n    private static final Map<String, String> COMMON_ATTRIBUTES = new HashMap<String, String>();\n    private static final Map<String, char[]> SECURE_ATTRIBUTES = new HashMap<String, char[]>();\n    //Ciphering (encryption and decryption) password/key.\n    private static final char[] PASSWORD = \"Unauthorized_Personel_Is_Unauthorized\".toCharArray();\n    //Cipher salt.\n    private static final byte[] SALT = {\n        (byte) 0xde, (byte) 0x33, (byte) 0x10, (byte) 0x12,\n        (byte) 0xde, (byte) 0x33, (byte) 0x10, (byte) 0x12,};\n    //Desktop dir:\n    private static final File DESKTOP = new File(System.getProperty(\"user.home\") + \"/Desktop\");\n    //File names:\n    private static final String NO_ENCRYPTION = \"no_layers.txt\";\n    private static final String SINGLE_LAYER = \"single_layer.txt\";\n    private static final String DOUBLE_LAYER = \"double_layer.txt\";\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) throws GeneralSecurityException, FileNotFoundException, IOException {\n        //Set common attributes.\n        COMMON_ATTRIBUTES.put(\"Gender\", \"Male\");\n        COMMON_ATTRIBUTES.put(\"Age\", \"21\");\n        COMMON_ATTRIBUTES.put(\"Name\", \"Hypot Hetical\");\n        COMMON_ATTRIBUTES.put(\"Nickname\", \"HH\");\n\n        /*\n         * Set secure attributes.\n         * NOTE: Ignore the use of Strings here, it's being used for convenience only.\n         * In real implementations, JPasswordField.getPassword() would send the arrays directly.\n         */\n        SECURE_ATTRIBUTES.put(\"Username\", \"Hypothetical\".toCharArray());\n        SECURE_ATTRIBUTES.put(\"Password\", \"LetMePass_Word\".toCharArray());\n\n        /*\n         * For demosntration purposes, I make the three encryption layer-levels I mention.\n         * To leave no doubt the code works, I use real file IO.\n         */\n        //File without encryption.\n        create_EncryptedFile(NO_ENCRYPTION, COMMON_ATTRIBUTES, SECURE_ATTRIBUTES, 0);\n        //File with encryption to secure attributes only.\n        create_EncryptedFile(SINGLE_LAYER, COMMON_ATTRIBUTES, SECURE_ATTRIBUTES, 1);\n        //File completely encrypted, including re-encryption of secure attributes.\n        create_EncryptedFile(DOUBLE_LAYER, COMMON_ATTRIBUTES, SECURE_ATTRIBUTES, 2);\n\n        /*\n         * Show contents of all three encryption levels, from file.\n         */\n        System.out.println(\"NO ENCRYPTION: \\n\" + readFile_NoDecryption(NO_ENCRYPTION) + \"\\n\\n\\n\");\n        System.out.println(\"SINGLE LAYER ENCRYPTION: \\n\" + readFile_NoDecryption(SINGLE_LAYER) + \"\\n\\n\\n\");\n        System.out.println(\"DOUBLE LAYER ENCRYPTION: \\n\" + readFile_NoDecryption(DOUBLE_LAYER) + \"\\n\\n\\n\");\n\n        /*\n         * Decryption is demonstrated with the Double-Layer encryption file.\n         */\n        //Descrypt first layer. (file content) (REMEMBER: Layers are in reverse order from writing).\n        String decryptedContent = readFile_ApplyDecryption(DOUBLE_LAYER);\n        System.out.println(\"READ: [first layer decrypted]\\n\" + decryptedContent + \"\\n\\n\\n\");\n        //Decrypt second layer (secure data).\n        for (String line : decryptedContent.split(\"\\n\")) {\n            String[] pair = line.split(\": \", 2);\n            if (pair[0].equalsIgnoreCase(\"Username\") || pair[0].equalsIgnoreCase(\"Password\")) {\n                System.out.println(\"Decrypted: \" + pair[0] + \": \" + decrypt(pair[1]));\n            }\n        }\n    }\n\n    private static String encrypt(byte[] property) throws GeneralSecurityException {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n\n        //Encrypt and save to temporary storage.\n        String encrypted = Base64.encodeBytes(pbeCipher.doFinal(property));\n\n        //Cleanup data-sources - Leave no traces behind.\n        for (int i = 0; i < property.length; i++) {\n            property[i] = 0;\n        }\n        property = null;\n        System.gc();\n\n        //Return encryption result.\n        return encrypted;\n    }\n\n    private static String encrypt(char[] property) throws GeneralSecurityException {\n        //Prepare and encrypt.\n        byte[] bytes = new byte[property.length];\n        for (int i = 0; i < property.length; i++) {\n            bytes[i] = (byte) property[i];\n        }\n        String encrypted = encrypt(bytes);\n\n        /*\n         * Cleanup property here. (child data-source 'bytes' is cleaned inside 'encrypt(byte[])').\n         * It's not being done because the sources are being used multiple times for the different layer samples.\n         */\n//      for (int i = 0; i < property.length; i++) { //cleanup allocated data.\n//          property[i] = 0;\n//      }\n//      property = null; //de-allocate data (set for GC).\n//      System.gc(); //Attempt triggering garbage-collection.\n\n        return encrypted;\n    }\n\n    private static String encrypt(String property) throws GeneralSecurityException {\n        String encrypted = encrypt(property.getBytes());\n        /*\n         * Strings can't really have their allocated data cleaned before CG,\n         * that's why secure data should be handled with char[] or byte[].\n         * Still, don't forget to set for GC, even for data of sesser importancy;\n         * You are making everything safer still, and freeing up memory as bonus.\n         */\n        property = null;\n        return encrypted;\n    }\n\n    private static String decrypt(String property) throws GeneralSecurityException, IOException {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n        return new String(pbeCipher.doFinal(Base64.decode(property)));\n    }\n\n    private static void create_EncryptedFile(\n                    String fileName,\n                    Map<String, String> commonAttributes,\n                    Map<String, char[]> secureAttributes,\n                    int layers)\n                    throws GeneralSecurityException, FileNotFoundException, IOException {\n        StringBuilder sb = new StringBuilder();\n        for (String k : commonAttributes.keySet()) {\n            sb.append(k).append(\": \").append(commonAttributes.get(k)).append(System.lineSeparator());\n        }\n        //First encryption layer. Encrypts secure attribute values only.\n        for (String k : secureAttributes.keySet()) {\n            String encryptedValue;\n            if (layers >= 1) {\n                encryptedValue = encrypt(secureAttributes.get(k));\n            } else {\n                encryptedValue = new String(secureAttributes.get(k));\n            }\n            sb.append(k).append(\": \").append(encryptedValue).append(System.lineSeparator());\n        }\n\n        //Prepare file and file-writing process.\n        File f = new File(DESKTOP, fileName);\n        if (!f.getParentFile().exists()) {\n            f.getParentFile().mkdirs();\n        } else if (f.exists()) {\n            f.delete();\n        }\n        BufferedWriter bw = new BufferedWriter(new FileWriter(f));\n        //Second encryption layer. Encrypts whole file content including previously encrypted stuff.\n        if (layers >= 2) {\n            bw.append(encrypt(sb.toString().trim()));\n        } else {\n            bw.append(sb.toString().trim());\n        }\n        bw.flush();\n        bw.close();\n    }\n\n    private static String readFile_NoDecryption(String fileName) throws FileNotFoundException, IOException, GeneralSecurityException {\n        File f = new File(DESKTOP, fileName);\n        BufferedReader br = new BufferedReader(new FileReader(f));\n        StringBuilder sb = new StringBuilder();\n        while (br.ready()) {\n            sb.append(br.readLine()).append(System.lineSeparator());\n        }\n        return sb.toString();\n    }\n\n    private static String readFile_ApplyDecryption(String fileName) throws FileNotFoundException, IOException, GeneralSecurityException {\n        File f = new File(DESKTOP, fileName);\n        BufferedReader br = new BufferedReader(new FileReader(f));\n        StringBuilder sb = new StringBuilder();\n        while (br.ready()) {\n            sb.append(br.readLine()).append(System.lineSeparator());\n        }\n        return decrypt(sb.toString());\n    }\n", "idx": 64}
{"project": "cipher", "commit_id": "Snippet6258047_32024.java", "target": 0, "func": "SecretKeySpec localSecretKeySpec = new SecretKeySpec(arrayOfByte, \"AES\");\nCipher localCipher = Cipher.getInstance(\"AES\");\n", "idx": 65}
{"project": "cipher", "commit_id": "Snippet32386142_14464.java", "target": 0, "func": "          try {\n        String dataAlgorithm =  JCEMapper.translateURItoJCEID(tmp);\n        decryptor = Cipher.getInstance(dataAlgorithm);\n\n        //decryptor = Cipher.getInstance(\"DESede/CBC/ISO10126Padding\");\n\n        int ivLen = decryptor.getBlockSize();\n        byte[] ivBytes = new byte[ivLen];\n\n        System.arraycopy(cipherInput, 0, ivBytes, 0, ivLen);\n        if (dataAlgorithm.matches(\".*[gG][cC][mM].*$\")) { // TK 03/09/2015 - probably needs more places for decrypting body stuff\n          GCMParameterSpec iv = new GCMParameterSpec(ivLen * Byte.SIZE, ivBytes);\n          decryptor.init(Cipher.DECRYPT_MODE, symmetricKey, iv);\n        }\n        else {\n          IvParameterSpec iv = new IvParameterSpec(ivBytes);\n          decryptor.init(Cipher.DECRYPT_MODE, symmetricKey, iv); <===== old line 761\n        }\n\n        cipherOutput = decryptor.doFinal(cipherInput, ivLen, cipherInput.length-ivLen);\n      } catch (Exception e) {\n        log.log(Level.SEVERE, \"WSS1232.failedto.decrypt.attachment\", e);\n        throw new XWSSecurityException(e);\n      }\n", "idx": 66}
{"project": "cipher", "commit_id": "Snippet16613293_17.java", "target": 0, "func": "public void saveProfile(Profile newProfile) {\n  try {\n    Log.i(C.TAG, newProfile.toString());\n\n    SharedPreferences.Editor editor = prefs.edit();\n    String profileJSONfied = new Gson().toJson(newProfile);\n    Log.i(C.TAG, profileJSONfied);\n\n    byte[] cleartext = profileJSONfied.getBytes(HTTP.UTF_8);\n    Log.i(C.TAG, cleartext.toString());\n\n    Cipher cipher = Cipher.getInstance(\"DES\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    String encrypedProfile = Base64.encodeToString(cipher.doFinal(cleartext), Base64.DEFAULT);\n    Log.i(C.TAG, encrypedProfile);\n\n    editor.putString(PROFILE, encrypedProfile);\n    editor.commit();\n    profile = newProfile;\n  } catch (Exception e) {\n    Log.i(C.TAG, e.getMessage());\n  }\n}\n\npublic Profile loadProfile() {\n  try {\n    Cipher cipher = Cipher.getInstance(\"DES\");\n    cipher.init(Cipher.DECRYPT_MODE, key);\n\n    Log.i(C.TAG, prefs.getString(PROFILE, null));\n\n    // byte[] plainTextProfileBytes = Base64.decode(cipher.doFinal(prefs.getString(PROFILE, null).getBytes(HTTP.UTF_8)), Base64.DEFAULT);\n    byte[] plainTextProfileBytes = Base64.decode(prefs.getString(PROFILE, null).getBytes(HTTP.UTF_8), Base64.DEFAULT);\n    Log.i(C.TAG, new String(plainTextProfileBytes, HTTP.UTF_8));\n\n    profile = new Gson().fromJson(new String(plainTextProfileBytes, HTTP.UTF_8), PROFILE_TYPE);\n    Log.i(C.TAG, profile.toString());\n\n  } catch (Exception e) {\n    Log.i(C.TAG, e.getMessage());\n  }\n  return profile;\n}\n", "idx": 67}
{"project": "cipher", "commit_id": "Snippet14620180_37853.java", "target": 0, "func": "public class AES_Encryption  {\n\npublic static void main(String[] args) throws Exception {\n    String str = new Scanner(new File(\"src//plainText.txt\")).useDelimiter(\"\\\\Z\").next();\n    FileWriter fstream = new FileWriter(\"src//cipherText.txt\");\n    BufferedWriter out = new BufferedWriter(fstream);\n    FileWriter fstream2 = new FileWriter(\"src//decrpytedText.txt\");\n    BufferedWriter out2 = new BufferedWriter(fstream2);\n    System.out.println(\"\" + str);\n\n\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n    keyGen.init(128);\n    Key key = keyGen.generateKey();\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    byte[] cipherText = cipher.doFinal(str.getBytes());\n    String ct = new String(cipherText);\n    System.out.println( new String(cipherText, \"UTF8\") );\n    out.append(ct);\n    out.close();\n\n\n    String cipherT = new Scanner(new File(\"src//cipherText.txt\")).useDelimiter(\"\\\\Z\").next();\n    cipher.init(Cipher.DECRYPT_MODE, key);\n\n    //byte[] decVal = Base64.decode(cipherT.getBytes());\n    byte[] newPlainText = cipher.doFinal(cipherT.getBytes());\n    String dt = new String(newPlainText, \"UTF8\");\n    out2.append(dt);\n    out2.close();\n}\n", "idx": 68}
{"project": "cipher", "commit_id": "Snippet24394873_6705.java", "target": 0, "func": "import java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\npublic class crypto {\n    public static void main(String [] args) {\n        String s = args[0];\n        String s1 = args[1];\n        String ivkey = \"1234567891234567891235478912345\";\n        byte[] ivraw = ivkey.getBytes();\n        SecretKeySpec skeySpec = new SecretKeySpec(ivraw, \"AES\");\n\n        if (s.equalsIgnoreCase(\"ENCRYPT\")) {\n            try {\n                Cipher cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n                byte[] encrypted = cipher.doFinal(s1.getBytes());\n                System.out.println(new String(Base64.encodeBase64(encrypted)));\n                System.out.println(s1);\n\n            } catch (NoSuchAlgorithmException | NoSuchPaddingException\n                    | InvalidKeyException | IllegalBlockSizeException\n                    | BadPaddingException e) {\n            }\n        } else {\n            try {\n                Cipher cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n                byte[] encrypted = cipher.doFinal(s1.getBytes());\n                System.out.println(new String(Base64.encodeBase64(encrypted)));\n\n            } catch (NoSuchAlgorithmException | NoSuchPaddingException\n                    | InvalidKeyException | IllegalBlockSizeException\n                    | BadPaddingException e) {\n            }\n\n        }\n        return;\n    };\n}\n", "idx": 69}
{"project": "cipher", "commit_id": "Snippet21050497_3636.java", "target": 0, "func": "public static String encryptPadding(String plaintext, byte[] salt) {\n    try {\n\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n        cipher.init(Cipher.ENCRYPT_MODE, SKey, ivSpec);\n\n        byte[] cipherText = cipher.doFinal(PlainText.getBytes(\"UTF-8\"));\n\n        cyphertext = Base64.encodeToString(cipherText, Base64.DEFAULT);\n        edit_txt_enc_string.setText(cyphertext);\n        return cyphertext;\n    } catch (GeneralSecurityException e) {\n        throw new RuntimeException(e);\n    } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(e);\n    }\n}\n\npublic static String decryptPadding(String ctext, byte[] salt) {\n    try {\n\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n        cipher.init(Cipher.DECRYPT_MODE, SKey, ivSpec);\n\n        byte[] plaintxt = cipher.doFinal(Base64.decode(cyphertext, Base64.DEFAULT));\n\n        PlainText = new String(plaintxt, \"UTF-8\");\n        edit_txt_dec_string.setText(PlainText);\n        return PlainText;\n    } catch (GeneralSecurityException e) {\n        throw new RuntimeException(e);\n    } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(e);\n    }\n}\n", "idx": 70}
{"project": "cipher", "commit_id": "Snippet47592760_29616.java", "target": 0, "func": "SecretKeyFactory kf = SecretKeyFactory.getInstance(\n    \"PBKDF2withHmacSHA1\", \"BCFIPS\");\n\nCipher c = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\", \"BCFIPS\");\n", "idx": 71}
{"project": "cipher", "commit_id": "Snippet15158089_38264.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");", "idx": 72}
{"project": "cipher", "commit_id": "Snippet15925029_38918.java", "target": 0, "func": "public static String encrypt(String key, String toEncrypt) throws Exception {\n    Key skeySpec = generateKeySpec(key);\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(toEncrypt.getBytes());\n    byte[] encryptedValue = Base64.encodeBase64(encrypted);\n    return new String(encryptedValue);\n}\n\npublic static String decrypt(String key, String encrypted) throws Exception {\n    Key skeySpec = generateKeySpec(key);\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decodedBytes = Base64.decodeBase64(encrypted.getBytes());\n    byte[] original = cipher.doFinal(decodedBytes);\n    return new String(original);\n}\n", "idx": 73}
{"project": "cipher", "commit_id": "Snippet43284828_25419.java", "target": 0, "func": "Cipher.getInstance(\"TripleDES\");", "idx": 74}
{"project": "cipher", "commit_id": "Snippet9098022_33678.java", "target": 0, "func": "public class NewEncrypter\n{\n    private String algorithm = \"DESede\";\n    private Key key = null;\n    private Cipher cipher = null;\n\n    public NewEncrypter() throws NoSuchAlgorithmException, NoSuchPaddingException\n    {\n         key = KeyGenerator.getInstance(algorithm).generateKey();\n         cipher = Cipher.getInstance(algorithm);\n    }\n\n    public byte[] encrypt(String input) throws Exception\n    {\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] inputBytes = input.getBytes(\"UTF-16\");\n\n        return cipher.doFinal(inputBytes);\n    }\n\n    public String decrypt(byte[] encryptionBytes) throws Exception\n    {\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] recoveredBytes = cipher.doFinal(encryptionBytes);\n        String recovered = new String(recoveredBytes, \"UTF-16\");\n\n        return recovered;\n    }\n}\n", "idx": 75}
{"project": "cipher", "commit_id": "Snippet9458612_33939.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.io.*;\nimport java.net.*;\n\npublic class socket_client_simple {\n\n    public static byte[] getBytesFromFile(File file) throws IOException {\n        InputStream is = new FileInputStream(file);\n\n        // Get the size of the file\n        long length = file.length();\n\n        // You cannot create an array using a long type.\n        // It needs to be an int type.\n        // Before converting to an int type, check\n        // to ensure that file is not larger than Integer.MAX_VALUE.\n        if (length > Integer.MAX_VALUE) {\n        // File is too large\n        }\n\n        // Create the byte array to hold the data\n        byte[] bytes = new byte[(int)length];\n\n        // Read in the bytes\n        int offset = 0;\n        int numRead = 0;\n        while (offset < bytes.length && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {\n        offset += numRead;\n    }\n\n        // Ensure all the bytes have been read in\n        if (offset < bytes.length) {\n            throw new IOException(\"Could not completely read file \"+file.getName());\n        }\n\n        // Close the input stream and return bytes\n        is.close();\n        return bytes;\n    }\n    public static String asHex (byte buf[]) {\n        StringBuffer strbuf = new StringBuffer(buf.length * 2);\n        int i;\n\n        for (i = 0; i < buf.length; i++) {\n            if (((int) buf[i] & 0xff) < 0x10)\n                strbuf.append(\"0\");\n\n            strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n        }\n        return strbuf.toString();\n    }\n\n    public static String aes_run(String message, String username, int mode) throws Exception\n    {\n\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        kgen.init(256); // 192 and 256 bits may not be available\n        // Generate the secret key specs.\n        SecretKey skey = kgen.generateKey();\n        String keyfilepath=new String(username+\".key\");\n        File keyfile = new File(keyfilepath);\n        byte[] raw = getBytesFromFile(keyfile);\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        System.out.println(\"Key file found\\n\\n\");\n           // Instantiate the cipher\n        byte[] encdecres;\n        String encdecresstr= new String();\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n            if(mode==0)\n            {\n                cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n                encdecres= cipher.doFinal(message.getBytes());\n                encdecresstr= new String(encdecres);\n            }\n            else if(mode==1)\n            {\n                cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n                encdecres = cipher.doFinal(message.getBytes());\n                encdecresstr= new String(encdecres);\n            }\n            return encdecresstr;\n    }   \n    public static void main(String[] args) throws Exception\n    {\n        String message,encrypted;\n        String  returnmessage;\n        String username=args[2];\n        BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in));\n\n        if(args.length<3)\n        {\n            System.out.println(\"Usage: java socket_client_simple <ip_address> <Port_num> <username>\");\n            System.exit(1);\n        }\n        Socket  mysock = new Socket(\"localhost\",Integer.parseInt(args[1])); \n        System.out.println(\"Socket Instantiated\\n\\n\");      \n        DataOutputStream out = new DataOutputStream( mysock.getOutputStream());\n        BufferedReader in = new BufferedReader(new InputStreamReader(mysock.getInputStream()));\n        out.writeBytes(username+\"\\n\");\n\n        do \n        {\n            System.out.println(\"Enter Message: \");\n            message=keyboard.readLine();\n            System.out.println(\"Sending message\\n\");\n\n            //System.out.println(aes_run(message.getBytes(),username,0) + \"\\n\");\n            encrypted = aes_run(message,username,0);\n            System.out.println(\"length: \"+encrypted.length());\n            out.write(encrypted + \"\\n\");\n            System.out.println(\"message sent: \"+encrypted );\n            System.out.println(\"Waiting for reply\\n\\n\");\n            returnmessage = in.readLine();\n            System.out.println(\"Server replied: \" + aes_run(returnmessage,username,1));\n        }while(!message.equals(\"bye\"));\n        mysock.close();\n    }\n\n}\n", "idx": 76}
{"project": "cipher", "commit_id": "Snippet42690538_24725.java", "target": 0, "func": "    package com.abc.some.common.nativeDES;\n\nimport java.io.ByteArrayOutputStream;\nimport java.security.spec.KeySpec;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.xml.bind.DatatypeConverter;\n\npublic class DESEncrypt {\n    public String keyValue = \"123456789\";\n    public static void main(String[] args) {\n        String text = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?><SomeRequest><OrderNumber>1564578</OrderNumber></SomeRequest>\";\n        String codedtext =\"not encrypted\";\n        try{\n            codedtext = new DESEncrypt().Encrypt1(text);\n            //codedtext = new DESEncrypt().encrypt(text);\n        }catch (Exception e) {\n            System.out.println(\"Exception in Encryption.. \" + e.getMessage());\n        }\n\n        System.out.println(codedtext);\n\n    }\n    public String Encrypt1(String CXML) {\n        try {\n            KeySpec myKey = new DESKeySpec(keyValue.getBytes(\"UTF8\"));\n        SecretKey key = SecretKeyFactory.getInstance(\"DES\").generateSecret(myKey);\n        Cipher ecipher = Cipher.getInstance(\"DES\");\n        ecipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] data = CXML.getBytes(\"ASCII\");\n\n        Cipher c = Cipher.getInstance(\"DES/CBC/NoPadding\");\n        c.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] crypt = ecipher.doFinal(data);\n        //String encoded = DatatypeConverter.printBase64Binary(crypt.toString().getBytes(\"ASCII\"));\n        //String encoded = DatatypeConverter.printBase64Binary(crypt.getBytes(\"ASCII\"));\n\n        String encoded = DatatypeConverter.printBase64Binary(crypt).toString();\n\n        System.out.println(encoded);\n\n        return encoded;\n        } catch (Exception ex) {\n        }\n\n        return null;\n    }    \n}\n", "idx": 77}
{"project": "cipher", "commit_id": "Snippet8397354_33202.java", "target": 0, "func": "package com.xxx;\n\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n/**\n * Usage:\n * <pre>\n * String crypto = SimpleCrypto.encrypt(masterpassword, cleartext)\n * ...\n * String cleartext = SimpleCrypto.decrypt(masterpassword, crypto)\n * </pre>\n * @author ferenc.hechler\n */\npublic class SimpleCrypto {\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2*buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n    private final static String HEX = \"0123456789ABCDEF\";\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n    }\n\n}\n", "idx": 78}
{"project": "cipher", "commit_id": "Snippet11419302_35572.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\n", "idx": 79}
{"project": "cipher", "commit_id": "Snippet14615249_37849.java", "target": 0, "func": "public static byte[] encryptBytes(byte[] bytes, byte[] key)\n{\n    Cipher cipher = null;\n\n    try\n    {\n        cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n        return Base64.encodeBase64(cipher.doFinal(bytes));\n    }\n    catch (Exception e)\n    {\n        e.printStackTrace();\n    }\n\n    return null;\n}\n\npublic static byte[] decrpytBytes(byte[] encryptedData, String key)\n{\n    byte[] keyBytes = convertToByteArray(key);\n    Cipher cipher = null;\n\n    try\n    {\n        cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, \"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n        return cipher.doFinal(Base64.decodeBase64(encryptedData));\n    }\n    catch (Exception e)\n    {\n        e.printStackTrace();\n    }\n\n    return null;\n}\n//Simply takes every other two characters an terms them into a byte value \n    //then stuffs them into  a byteArray\npublic static byte[] convertToByteArray(String key)\n{\n    byte[] b = new byte[key.length()/2];\n\n    for(int i=0, bStepper=0; i<key.length()+2; i+=2)\n        if(i !=0)\n            b[bStepper++]=((byte) Integer.parseInt((key.charAt(i-2)+\"\"+key.charAt(i-1)), 16));\n\n    return b;\n}\n\npublic static void main(String[] args) throws Exception\n{\n            //This string has 64 characters. When sent to convertToByteArray it returns a byte array or 32 bytes\n    String key = \"00112233445566778899AABBCCDDEEFF0123456789ABCDEF0123456789ABCDEF\";\n\n            //Test it out\n    byte f[] = {2,4,7};\n    byte[] encrypted = encryptBytes(f, convertToByteArray(key));\n    byte[] unencrypted = decrpytBytes(encrypted, key);\n\n    System.out.print(unencrypted[0]);\n}\n", "idx": 80}
{"project": "cipher", "commit_id": "Snippet41807894_23788.java", "target": 0, "func": "case GET_NEXT_BILL:\n{\n    int lastGetId= (int)params.get(0);\n    // recup params\n    cs.TraceEvenements(adresseDistante+\"#Get facture#\"+Thread.currentThread().getName());\n\n    System.out.println(\"Recuperation de la cle secr\u00e8te\");\n    KeyStore.SecretKeyEntry secretKeyEntry = (KeyStore.SecretKeyEntry) servKs.getEntry(\"clesecComptChiffr\", new KeyStore.PasswordProtection(\"pass\".toCharArray()));\n    SecretKey cl\u00e9Secr\u00e8te = secretKeyEntry.getSecretKey();\n\n    Cipher chiffr = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"BC\");\n    chiffr.init(Cipher.ENCRYPT_MODE, cl\u00e9Secr\u00e8te);\n\n    ResultSet rs = bdAccess.select(\"SELECT IDFacture, Montant, Destinataire, AdresseLivraison, DATE_FORMAT(DateEmission, '%d-%m-%Y') as DateEmission\"\n                     + \" FROM FACTURES WHERE IDFacture > \"+lastGetId+\" AND Valide= 0\");\n\n    if(rs.next())\n    {\n        String[][] stringArray = {{String.valueOf(rs.getInt(1)), String.valueOf(rs.getFloat(2)), \n            rs.getString(3), rs.getString(4), rs.getString(5)}};\n\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);\n            objectOutputStream.writeObject(stringArray);\n\n        rep.add(chiffr.doFinal(byteArrayOutputStream.toByteArray()));\n         typeRep= TypesRep.OK; \n    }\n    else\n    {\n        rep.add(\"Il n'y a plus de facture non valid\u00e9e\");\n        typeRep= TypesRep.ERREUR; \n    }    \n    break;\n}\n", "idx": 81}
{"project": "cipher", "commit_id": "Snippet29642271_11709.java", "target": 0, "func": "Encrypt(BufferedInputStream is, File destfile, String passcode) {\n        bis = is;\n        try {\n            fos = new FileOutputStream(destfile);\n        } catch (FileNotFoundException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        dest = new BufferedOutputStream(fos, 1024);\n        this.passcode = passcode;\n    }\n\n    static void encrypt() throws IOException, NoSuchAlgorithmException,\n    NoSuchPaddingException, InvalidKeyException {\n\n        // Length is 16 byte\n        SecretKeySpec sks = new SecretKeySpec(passcode.getBytes(), \"AES\");\n\n        // Create cipher\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, sks);\n        // Wrap the output stream\n        CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n        // Write bytes\n        int b;\n        byte[] d = new byte[1024];\n        while ((b = bis.read(d)) != -1) {\n            cos.write(d, 0, b);\n        }\n        // Flush and close streams.\n        cos.flush();\n        cos.close();\n        bis.close();\n    }\n", "idx": 82}
{"project": "cipher", "commit_id": "Snippet25715190_8034.java", "target": 0, "func": "public static String[] encrypt(String str) throws NoSuchAlgorithmException,\n        NoSuchPaddingException, InvalidKeyException,\n        UnsupportedEncodingException, IllegalBlockSizeException,\n        BadPaddingException {\n    String Key, res;\n    SecretKey key;\n    String[] Return = new String[2];\n\n    key = KeyGenerator.getInstance(\"DES\").generateKey();\n    ecipher = Cipher.getInstance(\"DES\");\n    ecipher.init(Cipher.ENCRYPT_MODE, key);\n    byte[] utf8 = str.getBytes(\"UTF8\");\n    byte[] enc = ecipher.doFinal(utf8);\n\n    enc = BASE64EncoderStream.encode(enc);\n    res = new String(enc);\n\n    // Returning values 0 = Encrypted String 1 = Key For Storage in XML\n    Return[0] = res;\n    byte[] keyBytes = key.getEncoded();\n    Key = new String(BASE64EncoderStream.encode(keyBytes), \"UTF8\");\n    Return[1] = Key;\n\n    return Return;\n}\n\npublic static String decrypt(String str, String Key)\n        throws NoSuchAlgorithmException, NoSuchPaddingException,\n        InvalidKeyException, IllegalBlockSizeException,\n        UnsupportedEncodingException, BadPaddingException {\n    SecretKey key = new SecretKeySpec(BASE64DecoderStream.decode(Key.getBytes(\"UTF8\")), \"DES\");\n    dcipher = Cipher.getInstance(\"DES\");\n    dcipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] dec = BASE64DecoderStream.decode(str.getBytes());\n    byte[] utf8 = dcipher.doFinal(dec);\n    return new String(utf8, \"UTF8\");\n}\n", "idx": 83}
{"project": "cipher", "commit_id": "Snippet37784133_19779.java", "target": 0, "func": "public static String decrypt(byte[] text, PublicKey key) throws InvalidKeyException,\n    BadPaddingException,\n    IllegalBlockSizeException,\n    NoSuchPaddingException,\n    NoSuchAlgorithmException{\n        byte[] dectyptedText = null;\n\n        // get an RSA cipher object and print the provider\n        String transformation = \"RSA/ECB/PKCS1Padding\";\n        final Cipher cipher = Cipher.getInstance(transformation);\n\n        // decrypt the text using the private key\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        dectyptedText = cipher.doFinal(text);\n\n\n\n        return new String(dectyptedText);\n    }\n", "idx": 84}
{"project": "cipher", "commit_id": "Snippet46989194_28993.java", "target": 0, "func": "public class Encrypters {\n    public static byte[] AESEncrypt(Key key, byte[] data) throws GeneralSecurityException {\n        Cipher cipher=Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] encryptedData=cipher.doFinal(data);\n        return encryptedData;\n    }\n}\n", "idx": 85}
{"project": "cipher", "commit_id": "Snippet35983553_17833.java", "target": 0, "func": "public void playENCVideo(String path) {\n    try {\n        Cipher decipher = null;\n\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n\n\n        byte[] key = AppUtiles.generateKey(\"qwertyuiopasdfgh\");\n        SecretKeySpec skey = new SecretKeySpec(key, \"AES\");\n\n        decipher = Cipher.getInstance(\"AES\");\n\n        decipher.init(Cipher.DECRYPT_MODE, skey);\n\n        mServer = new LocalSingleHttpServer();\n\n        mServer.setCipher(decipher);\n        mServer.start();\n\n        path = mServer.getURL(path);\n\n        vvPlayer.setVideoPath(path);\n        vvPlayer.start();\n    } catch (InvalidKeyException e) {\n        Log.d(TAG, \"InvalidKeyException  \");\n    } catch (NoSuchAlgorithmException e) {\n        Log.d(TAG, \"NoSuchAlgorithmException  \");\n\n    } catch (NoSuchPaddingException e) {\n        Log.d(TAG, \"NoSuchPaddingException  \");\n\n    } catch (IOException e) {\n        Log.d(TAG, \"IOEXCEPTION   \");\n\n    }\n    catch (Exception e) {\n            Log.d(TAG,\"Genral exceptin\");\n    }\n}\n", "idx": 86}
{"project": "cipher", "commit_id": "Snippet44347861_26411.java", "target": 0, "func": "import javax.crypto.Cipher\nimport javax.crypto.spec.SecretKeySpec\n\nimport com.github.kondaurovdev.snippets.helper.{CryptoHelper, TryHelper}\nimport org.apache.commons.codec.binary.Base64\n\nobject Crypter {\n\n  def apply(secret: String): Either[String, Crypter] = {\n    for (\n      s <- CryptoHelper.getSecretKey(secret).left.map(err => s\"Can't get secretKeySpec: $err\").right\n    ) yield new Crypter(s)\n  }\n\n}\n\nclass Crypter(secretKey: SecretKeySpec) {\n\n  def encrypt(input: String): Either[String, String] = {\n\n    TryHelper.tryBlock({\n      val cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\")\n      cipher.init(Cipher.ENCRYPT_MODE, secretKey)\n      val encrypted = cipher.doFinal(input.getBytes(\"UTF-8\"))\n      Base64.encodeBase64String(encrypted)\n    }, \"Can't encrypt text\")\n\n  }\n\n  //input = base64 encoded string\n  def decrypt(input: String): Either[String, String] = {\n\n    for (\n      res <- {\n        TryHelper.tryBlock({\n          val cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\")\n          cipher.init(Cipher.DECRYPT_MODE, secretKey)\n          val decrypted = cipher.doFinal(Base64.decodeBase64(input))\n          new String(decrypted)\n        }, \"Error while decrypting\")\n      }.right\n    ) yield res\n\n  }\n\n\n}\n\nobject CryptoHelper {\n\n  def getSecretKey(myKey: String): Either[String, SecretKeySpec] = {\n    TryHelper.tryBlock({\n      var key = myKey.getBytes(\"UTF-8\")\n      val sha = MessageDigest.getInstance(\"SHA-1\")\n      key = sha.digest(key)\n      key = util.Arrays.copyOf(key, 16) // use only first 128 bit\n      new SecretKeySpec(key, \"AES\")\n    }, \"Can't build secretKey\")\n  }\n\n}\n\nobject TryHelper {\n\n  def tryBlock[R, E <: Throwable](block: => R, errPrefix: String = \"\", handle: errorPF = handlePF): Either[String, R] = {\n    tryToEither(block).left.map(err => {\n      var msg = err.getMessage\n      if (errPrefix.nonEmpty) msg = s\"$errPrefix: $msg\"\n      msg\n    })\n  }\n\n}\n", "idx": 87}
{"project": "cipher", "commit_id": "Snippet38037454_20052.java", "target": 0, "func": "private static final byte[] keyValue = new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't', 'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\npublic static String encrypt(String Data) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(\"AES\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(Data.getBytes());\n    String encryptedValue = new BASE64Encoder().encode(encVal);\n    return encryptedValue;\n}\n\npublic static String decrypt(String encryptedData) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(\"AES\");\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    return decryptedValue;\n}\n\npublic static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, \"AES\");\n    return key;\n}\n\npublic static void main(String[] args) {\n    try {\n        System.out.println(AES.encrypt(\"test\"));\n    } catch (Exception e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n}\n", "idx": 88}
{"project": "cipher", "commit_id": "Snippet12290876_36179.java", "target": 0, "func": "Cipher.getInstance(\"RC4\");", "idx": 89}
{"project": "cipher", "commit_id": "Snippet40209218_22123.java", "target": 0, "func": "Encrypt Function code:\n\nboolean base64 = true;\nkey = \"thisiskey\";\nplainText = \"Google is an American multinational technology company specializing in Internet-related services\";\n\nSecretKeyFactory MyKeyFactory = SecretKeyFactory.getInstance(\"DES\");\nbyte[] keyBytes = key.getBytes();\n\nDESKeySpec generatedKeySpec = new DESKeySpec(keyBytes);\nSecretKey generatedSecretKey = MyKeyFactory.generateSecret(generatedKeySpec);\n\nCipher generatedCipher = Cipher.getInstance(\"DES\");\ngeneratedCipher.init(Cipher.ENCRYPT_MODE, generatedSecretKey);\n\nbyte[] messsageStringBytes = plainText.getBytes();\nbyte[] encryptedMessage = generatedCipher.doFinal(messsageStringBytes);\n\nString encryptedMessageString = new String(encryptedMessage);\n\nif (base64) {\n    encryptedMessageString = Base64.getEncoder().encodeToString(encryptedMessageString.getBytes(\"utf-8\"));\n}\n\nreturn encryptedMessageString;\n", "idx": 90}
{"project": "cipher", "commit_id": "Snippet8396018_33194.java", "target": 0, "func": "    CipherInputStream cis; \n    FileOutputStream fos = null;\n    FileInputStream fis = null;\n\n    File dataFile = new File(dataDir,fileName); // here I am getting encrypted file from server\n    File newDataFile = new File(dataDir,fileName+\"_TEMP\"); // I am creating temporary decrypted file\n\n    byte key[] = \"abcdEFGH\".getBytes();   \n    SecretKeySpec secretKey = new SecretKeySpec(key,\"DES\"); \n\n    Cipher decrypt =  Cipher.getInstance(\"DES/ECB/PKCS5Padding\");  \n    decrypt.init(Cipher.DECRYPT_MODE, secretKey);  \n\n    try {         \n       fis = new FileInputStream(dataFile);\n    } catch(Exception e) {  \n        //Exception\n    }  \n\n    if(dataFile.exists()){\n        cis = new CipherInputStream(fis,decrypt);  \n        try {\n            fos = new FileOutputStream(newDataFile);  \n              byte[] b = new byte[8];  \n          int i;\n              while ((i=cis.read(b)) != -1) {  \n                  fos.write(b, 0, i);  \n             }                \n            return newDataFile;\n        } finally{\n            try {\n                if(fos != null)\n                {\n                 fos.flush();  \n                 fos.close();                   }\n                 cis.close();  \n                 fis.close(); \n            } catch (IOException e) {\n                //IOException\n            }\n        }\n    }\n", "idx": 91}
{"project": "cipher", "commit_id": "Snippet17967836_1025.java", "target": 0, "func": "package com.cellapp.voda.vault.others;\n\nimport java.security.*;\nimport java.security.spec.InvalidKeySpecException;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class Codec {\n\nprivate Cipher cipher = null;\nprivate boolean operative = true;\n\npublic Codec() {\n\n    try {\n        cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    } catch (NoSuchAlgorithmException e) {\n        // This should not happen since we know the target platform\n        // but we set the operative flag to false just in case\n        operative = false;\n    } catch (NoSuchPaddingException e) {\n        // This should not happen since we know the target platform\n        // but we set the operative flag to false just in case\n        operative = false;\n    }\n}\n\n\n   public void encrypt(byte[] keyBits, byte[] plaintext)\n        throws InvalidKeySpecException, InvalidKeyException,\n        IllegalStateException, ShortBufferException,\n        IllegalBlockSizeException, BadPaddingException,\n        InvalidAlgorithmParameterException {\n        byte[] cipherText = null;\n    if (operative) {\n       try{\n            // Initialize the key from  the password\n        Key key = new SecretKeySpec(keyBits, 0, keyBits.length, \"AES\");\n        // add 2 bytes to encode the length of the plaintext\n        // as a short value\n        byte[] plaintextAndLength = new byte[plaintext.length + 2];\n        plaintextAndLength[0] = (byte) (0xff & (plaintext.length >> 8));\n        plaintextAndLength[1] = (byte) (0xff & plaintext.length);\n        // build the new plaintext\n        System.arraycopy(plaintext,\n                0,\n                plaintextAndLength,\n                2,\n                plaintext.length);\n\n        // calculate the size of the ciperthext considering\n        // the padding\n        int blocksize = 16;\n        int ciphertextLength = 0;\n        int remainder = plaintextAndLength.length % blocksize;\n        if (remainder == 0) {\n            ciphertextLength = plaintextAndLength.length;\n        } else {\n            ciphertextLength = plaintextAndLength.length - remainder\n                    + blocksize;\n        }\n        cipherText = new byte[ciphertextLength];\n\n        // reinitialize the cipher in encryption mode with the given key\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        // do the encryption\n        cipher.doFinal(plaintextAndLength,\n                0,\n                plaintextAndLength.length,\n                cipherText,\n                0);\n       }\n       catch(Exception e)\n       {\n           System.out.println(\"TT \" + cipherText);\n       }\n\n\n    } else {\n        throw new IllegalStateException(\"Codec not initialized\");\n    }\n}\n\n  public void decrypt(byte[] keyBits, byte[] cipherText)\n        throws InvalidKeySpecException, InvalidKeyException,\n        IllegalStateException, ShortBufferException,\n        IllegalBlockSizeException, BadPaddingException,\n        InvalidAlgorithmParameterException {\n    if (operative) {\n        // create a key from the keyBits\n        Key key = new SecretKeySpec(keyBits, 0, keyBits.length, \"AES\");\n\n        // Initialize the cipher in decrypt mode\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n        byte[] decrypted = new byte[cipherText.length];\n        // Decrypt the cipher text\n        cipher.doFinal(cipherText, 0, cipherText.length, decrypted, 0);\n        // Calculate the length of the plaintext\n        int plainTextLength = (decrypted[0] << 8)\n                | (decrypted[1] & 0xff);\n        byte[] finalText = new byte[plainTextLength];\n        // Decode the final text\n        System.arraycopy(decrypted, 2, finalText, 0, plainTextLength);\n\n        System.out.println(\"fina;  text \" + finalText);\n    } else {\n        throw new IllegalStateException(\"Codec not initialized\");\n    }\n}\n\n// Displays ecrypted data in hex\npublic String byteToHex(byte[] data) {\n    StringBuffer hexString = new StringBuffer();\n    String hexCodes = \"0123456789ABCDEF\";\n\n    for (int i = 0; i < data.length; i++) {\n        hexString.append(hexCodes.charAt((data[i] >> 4) & 0x0f));\n        hexString.append(hexCodes.charAt(data[i] & 0x0f));\n        if (i < data.length - 1) {\n            hexString.append(\":\");\n        }\n        if (((i + 1) % 8) == 0) {\n            hexString.append(\"\\n\");\n        }\n    }\n    return hexString.toString();\n}\n}\n", "idx": 92}
{"project": "cipher", "commit_id": "Snippet31910432_13947.java", "target": 0, "func": "public static String aesDecrypt(byte[] strBytes, String keyStr) throws Exception {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NOPadding\");\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    kgen.init(128, new SecureRandom(keyStr.getBytes()));\n    SecretKeySpec key = new SecretKeySpec(keyStr.getBytes(), \"AES\");\n\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] bytes = cipher.doFinal(strBytes);\n    return new String(bytes, \"gb2312\");\n}\n\npublic static byte[] convertStrArrayToByteArray(String s){\n    String[] ss = s.split(\";\");\n    byte[] bs = new byte[ss.length];\n    int index = 0;\n    for (String byteStr : ss) {\n        bs[index ++] = (byte) (Short.parseShort(byteStr));\n    }\n    return bs;\n}\n\npublic static void main(String[] args) throws Exception {\n    byte b = (byte) 158;\n    System.out.println(b);\n    String enStr = \"158;244;75;86;184;135;189;50;161;55;60;169;144;186;65;76;37;241;197;21;71;105;113;29;114;92;200;99;102;119;240;124;228;195;12;115;162;186;197;27;40;23;48;24;30;0;98;28;6;113;40;252;191;223;59;138;207;70;31;244;1;9;1;95;66;209;189;115;113;241;122;175;246;155;6;114;221;161;149;246;167;137;27;61;180;122;145;251;52;202;126;242;25;214;129;66;182;176;9;155;36;224;49;158;94;93;53;194;184;46;194;82;203;79;68;185;154;6;182;121;132;233;166;138;209;159;191;126;3;36;113;5;38;84;58;145;78;118;177;222;216;160;217;204;169;153;3;40;198;4;144;137;0;60;96;69;96;4;47;60;69;202;131;250;137;162;192;216;0;95;75;47;3;72;219;85;13;33;88;68;135;239;221;114;171;190;114;128;168;156;230;180;120;251;70;48;151;23;254;221;73;90;111;159;150;22;50;108;133;233;226;157;165;254;14;242;59;176;100;81;27;156;110;194;6;113;40;252;191;223;59;138;207;70;31;244;1;9;1;95;66;209;189;115;113;241;122;175;246;155;6;114;221;161;149;246;145;77;98;181;148;212;44;112;175;96;184;222;128;172;98;31;147;59;158;66;238;255;8;6;100;215;35;228;28;197;52;168;252;239;80;176;80;195;177;197;42;252;47;184;235;64;237;246\";\n    String key = \"^_^b@_@b*_*b-_-b^_^b@_@b*_*b-_-b\";\n    System.out.println(aesDecrypt(convertStrArrayToByteArray(enStr), key));\n}\n", "idx": 93}
{"project": "cipher", "commit_id": "Snippet22406368_4790.java", "target": 0, "func": "import java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class SSL {\n\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    public static String encrypt(Session current, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(current.getCurrentSession().getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(Session current, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(current.getCurrentSession().getBytes());\n        byte[] enc = toByte(encrypted);     \n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2*buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n    }\n}\n", "idx": 94}
{"project": "cipher", "commit_id": "Snippet3589375_30768.java", "target": 0, "func": "package org.kamal.crypto;\n\nimport java.security.*;\nimport java.security.spec.InvalidKeySpecException;\nimport javax.crypto.Cipher; \nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\n\npublic class SimpleProtector\n{\n    private static final String ALGORITHM = \"AES\";\n    private static final byte[] keyValue = \n        new byte[] { 'P', 'u', 't', ' ', 'Y', 'o', 'u', 'r', ' ', 'S', 'e', 'c', 'r', 'e', 't', ' ', 'K', 'e', 'y', '', 'H', 'e', 'r', 'e'};\n\n    public static String decrypt(String encryptedValue) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGORITHM);\n        // SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(ALGORITHM);\n        // key = keyFactory.generateSecret(new DESKeySpec(keyValue));\n        return key;\n    }\n}\n", "idx": 95}
{"project": "cipher", "commit_id": "Snippet43189765_25326.java", "target": 0, "func": "  public class Java {\n\n       private static SecretKey key = null;         \n       private static Cipher cipher = null;\n\n       public static void main(String[] args) throws Exception\n       {\n          String filename = RESOURCES_DIR + \"toto.enc\";\n\n          byte[] key = Base64.decode(\"2AxIw+/AzDBj83OILV9GDpOs+izDFJEhD6pve/IPsN9=\");\n          SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n          cipher = Cipher.getInstance(\"AES\");\n\n          cipher.init(Cipher.DECRYPT_MODE, secretKey);\n          byte[] test = Base64.decode(readFile(filename));\n          byte[] decryptedBytes = cipher.doFinal(test);\n          String decryptedText = new String(decryptedBytes, \"UTF8\");\n\n          System.out.println(\"After decryption: \" + decryptedText);\n       }\n\n        public final static String RESOURCES_DIR = \"C:/Users/toto/Desktop/\";\n\n        static String readFile(String filename) throws FileNotFoundException, IOException {\n            FileReader fr;\n            BufferedReader br;\n\n            fr = new FileReader(new File(filename));\n            br = new BufferedReader(fr);\n            String str;\n            String res = \"\";\n            while ((str = br.readLine()) != null) {\n                res += str;\n            }\n            return res;\n        }\n    }\n", "idx": 96}
{"project": "cipher", "commit_id": "Snippet2506547_30308.java", "target": 0, "func": "byte[] raw = key.getBytes();\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec);\nbyte[] encrypted = cipher.doFinal(str.getBytes());\nreturn new BASE64Encoder().encode(encrypted);\n", "idx": 97}
{"project": "cipher", "commit_id": "Snippet21083601_3680.java", "target": 0, "func": "public class myDesCbc2 {\n\n\npublic static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException, IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n\n\n        JFrame frame = null;\n        JFileChooser fChoose = new JFileChooser(System.getProperty(\"user.home\"));\n        int returnVal = fChoose.showOpenDialog(frame);\n        File myFile = fChoose.getSelectedFile();\n\n        FileInputStream fis = new FileInputStream(myFile);\n        BufferedReader stream = new BufferedReader(new InputStreamReader(fis, \"ISO-8859-1\"));\n        String file;\n        while ((file = stream.readLine()) != null) {\n\n            JOptionPane.showOptionDialog(\n                    null, \"Generating a 56-bit DES key...\", \"Processing...\", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{}, null);\n\n        }\n        // Create an 8-byte initialization vector\n        SecureRandom sr = new SecureRandom();\n        byte[] iv = new byte[8];\n        sr.nextBytes(iv);\n        IvParameterSpec IV = new IvParameterSpec(iv);\n\n        // Create a 56-bit DES key\n        KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n\n        // Initialize with keysize\n        kg.init(56);\n        Key mykey = kg.generateKey();\n\n        JOptionPane.showOptionDialog(\n                null, \"Your key has been generated!\", \"Processing...\", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{}, null);\n\n        // Create a cipher object and use the generated key to initialize it\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, mykey, IV);\n\n        byte[] plaintext = file.getBytes(\"UTF8\");\n\n        // Encrypt the text\n        byte[] ciphertext = cipher.doFinal(plaintext);\n\n        JOptionPane.showMessageDialog(\n                null, \"Your ciphertext is\" + asHex(ciphertext), \"Done!\", JOptionPane.PLAIN_MESSAGE);\n\n    }\n}\n", "idx": 98}
{"project": "cipher", "commit_id": "Snippet33082139_15119.java", "target": 0, "func": " // encripted file stored in android device for decrypt\n String uri= Environment.getExternalStorageDirectory().toString();\n uri=uri+\"/encry_file.mp4\";\n File file = new File(uri.toString());\n FileInputStream fis = new FileInputStream(file);\n spec =getIV();\n\n FileOutputStream fos = new FileOutputStream(Environment.getExternalStorageDirectory().toString() + \"/decrypted.mp4\");\n SecretKeySpec sks = new SecretKeySpec(\"asdfghjklzxccvbn\".getBytes(),\n          \"AES\");\n Cipher cipher = Cipher.getInstance(\"AES\");\n cipher.init(Cipher.DECRYPT_MODE, sks, spec);\n CipherInputStream cis = new CipherInputStream(fis, cipher);\n\n int b;\n byte[] d = new byte[8192];\n while ((b = cis.read(d)) != -1) {\n    fos.write(d, 0, b);\n }\n fos.flush();\n fos.close();\n cis.close();\n", "idx": 99}
{"project": "cipher", "commit_id": "Snippet21124833_3697.java", "target": 0, "func": "SecretKeySpec KS = new SecretKeySpec(KeyData, \"Blowfish\");\nCipher cipher = Cipher.getInstance(\"AES\");\n", "idx": 100}
{"project": "cipher", "commit_id": "Snippet29170447_11232.java", "target": 0, "func": "private static final String ALGORITHM = \"AES/ECB/PKCS5Padding\";\nprivate static final byte[] KEY = \"StBet9834#$10BCy\".getBytes();\n\nprivate String encryptCreditCard(String ccNumber) {\n    // do some encryption\n    if (ccNumber == null || ccNumber.length() == 0) {\n        return \"\";\n    }\n    Key key = new SecretKeySpec(KEY, \"AES\");\n    try {\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        //return Base64.encodeBytes(c.doFinal(ccNumber.getBytes()));\n        byte[] ccNumberBytes = ccNumber.getBytes();\n        byte[] encCCNumber = c.doFinal(ccNumberBytes);\n        return new String(Base64.encodeBase64(encCCNumber));\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}\n", "idx": 101}
{"project": "cipher", "commit_id": "Snippet9462380_33949.java", "target": 0, "func": "    String key = \"1234567890123456\";\n    String source = \"The quick brown fox jumped over the lazy dog\";\n\n    byte[] raw = key.getBytes();\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n    // Instantiate the cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n    byte[] encrypted = cipher.doFinal(source.getBytes());\n    System.out.println(new String(Base64.encodeBase64(encrypted)));\n", "idx": 102}
{"project": "cipher", "commit_id": "Snippet43635609_25770.java", "target": 0, "func": "public class Utilities {\n\n    public static final String FILE_EXTENSION = \".bin\";\n\n    public static boolean saveNote(Context context, Notes notes){\n        String fileName = String.valueOf(notes.getDateTime()) + FILE_EXTENSION;\n\n        FileOutputStream fos;\n        ObjectOutputStream oos;\n\n        try {\n            fos = context.openFileOutput(fileName, context.MODE_PRIVATE);\n            oos = new ObjectOutputStream(fos);\n            oos.writeObject(notes);\n            oos.close();\n            fos.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false; //tell the user something went wrong\n        }\n        return true;\n    }\n\n    public static ArrayList<Notes> getSavedNotes(Context context) {\n        ArrayList<Notes> notes = new ArrayList<>();\n\n        File filesDir = context.getFilesDir();\n        filesDir.getAbsolutePath();\n        ArrayList<String> noteFiles = new ArrayList<>();\n\n        for(String file : filesDir.list()) {\n            if(file.endsWith(FILE_EXTENSION)) {\n                noteFiles.add(file);\n            }\n        }\n\n        FileInputStream fis;\n        ObjectInputStream ois;\n\n        for(int i = 0; i < noteFiles.size(); i++) {\n            try{\n                fis = context.openFileInput(noteFiles.get(i));\n                ois = new ObjectInputStream(fis);\n\n                notes.add((Notes)ois.readObject());\n\n                fis.close();\n                ois.close();\n\n\n\n            } catch (IOException | ClassNotFoundException e) {\n                e.printStackTrace();\n                return null;\n\n            }\n        }\n\n        return notes;\n\n    }\n\n    public static Notes getNoteByName(Context context, String fileName) {\n        File file = new File(context.getFilesDir(), fileName);\n        Notes notes;\n\n        if(file.exists()) {\n            FileInputStream fis;\n            ObjectInputStream ois;\n\n            try {\n                fis = context.openFileInput(fileName);\n                ois = new ObjectInputStream(fis);\n\n                notes = (Notes) ois.readObject();\n\n                fis.close();\n                ois.close();\n\n            } catch(IOException | ClassNotFoundException e){\n                e.printStackTrace();\n                return null;\n            }\n\n            return notes;\n        }\n\n        return null;\n    }\n\n    public static void deleteNote(Context context, String fileName) {\n        File Dir = context.getFilesDir();\n        File file = new File(Dir, fileName);\n\n        if (file.exists()) file.delete();\n    }\n\n    public static void main(String[] args) {\n        try {\n            String key = \"squirrel123\"; // needs to be at least 8 characters for DES\n\n            FileInputStream fis = new FileInputStream(\"original.txt\");\n            FileOutputStream fos = new FileOutputStream(\"encrypted.txt\");\n            encrypt(key, fis, fos);\n\n            FileInputStream fis2 = new FileInputStream(\"encrypted.txt\");\n            FileOutputStream fos2 = new FileOutputStream(\"decrypted.txt\");\n            decrypt(key, fis2, fos2);\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void encrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.ENCRYPT_MODE, is, os);\n    }\n\n    public static void decrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);\n    }\n\n    public static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n        DESKeySpec dks = new DESKeySpec(key.getBytes());\n        SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey desKey = skf.generateSecret(dks);\n        Cipher cipher = Cipher.getInstance(\"DES\"); // DES/ECB/PKCS5Padding for SunJCE\n\n        if (mode == Cipher.ENCRYPT_MODE) {\n            cipher.init(Cipher.ENCRYPT_MODE, desKey);\n            CipherInputStream cis = new CipherInputStream(is, cipher);\n            doCopy(cis, os);\n        } else if (mode == Cipher.DECRYPT_MODE) {\n            cipher.init(Cipher.DECRYPT_MODE, desKey);\n            CipherOutputStream cos = new CipherOutputStream(os, cipher);\n            doCopy(is, cos);\n        }\n    }\n\n    public static void doCopy(InputStream is, OutputStream os) throws IOException {\n        byte[] bytes = new byte[64];\n        int numBytes;\n        while ((numBytes = is.read(bytes)) != -1) {\n            os.write(bytes, 0, numBytes);\n        }\n        os.flush();\n        os.close();\n        is.close();\n\n    }\n\n}\n", "idx": 103}
{"project": "cipher", "commit_id": "Snippet15390479_38431.java", "target": 0, "func": "    byte[] keyBytes = plainTextKey.getBytes(\"US-ASCII\");\n    SecretKeySpec skeySpec = new SecretKeySpec(keyBytes, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(plainText.getBytes(\"US-ASCII\"));\n", "idx": 104}
{"project": "cipher", "commit_id": "Snippet3188171_30681.java", "target": 0, "func": "File saveFile = new File(\"Settings.set\");\n        saveFile.delete();\n        FileOutputStream fout = new FileOutputStream(saveFile);\n\n        //Encrypt the settings\n        //Generate a key\n        byte key[] = \"My Encryption Key98\".getBytes();\n        DESKeySpec desKeySpec = new DESKeySpec(key);\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey skey = keyFactory.generateSecret(desKeySpec);\n\n        //Prepare the encrypter\n        Cipher ecipher = Cipher.getInstance(\"DES\");\n        ecipher.init(Cipher.ENCRYPT_MODE, skey);\n        // Seal (encrypt) the object\n        SealedObject so = new SealedObject(this, ecipher);\n\n        ObjectOutputStream o = new ObjectOutputStream(fout);\n        o.writeObject(so);\n        o.close();\n", "idx": 105}
{"project": "cipher", "commit_id": "Snippet27124931_9282.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\nSecretKeySpec key = new SecretKeySpec(cipherKey, \"AES\");\n", "idx": 106}
{"project": "cipher", "commit_id": "Snippet38879383_20784.java", "target": 0, "func": "  private String checkHostName(String hostUserName) throws IOException, InvalidKeyException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {\n            String deCrypted = null;\n            FileInputStream is = new FileInputStream(new File(\"C:\\\\test\\\\SSH\\\\PrivateKey\\\\keystore.properties\"));\n            Properties properties = new Properties();\n            properties.load(is);\n            ssh_Public_Private = new SSH_Public_Private();\n            boolean isHostNameExist = false;\n            if (properties.getProperty(hostUserName) == null) {\n\n                OutputStream outputStream = new FileOutputStream(\n                        \"C:\\\\test\\\\SSH\\\\PrivateKey\\\\keystore.properties\");\n                String passPhraseStored = new String(enCryptPwd());\n                properties.setProperty(hostUserName,passPhraseStored );\n                properties.store(outputStream, null);\n                outputStream.close();\n                is.close();\n                return checkHostName(hostUserName);\n            }else{\n                System.out.println(properties.getProperty(hostUserName));\n                String passPhrase = properties.getProperty(hostUserName);\n                 deCrypted = deCryptPwd(passPhrase);            //isHostNameExist = true;\n            }\n            return deCrypted;\n\n        }\n\nMy encryption and decryption piece of code is as follow :\n\n    private static String enCryptPwd() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {\n        String decrypted = null;\n        byte[] encrypted = null;\n        try {\n            String text = \"\";\n            Scanner sc = new Scanner(System.in);\n            System.out.println(\"Enter your passphrase : \" );\n            text = sc.next();\n            String key = \"Bar12345Bar12345\"; // 128 bit key\n            //String key = \"AesSEcREtkeyABCD\";\n            // Create key and cipher\n            Key aesKey = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\n            System.out.println(aesKey.getFormat());\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            // encrypt the text\n            cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            encrypted = cipher.doFinal(text.getBytes(\"UTF-8\"));\n            System.err.println(new String(encrypted));\n            System.err.println(encrypted.length);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return new String(encrypted);\n    }\n\n    private static  String deCryptPwd(String encrypted) throws InvalidKeyException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {\n        String originalString = \"\";\n        try {\n            String key = \"Bar12345Bar12345\"; // 128 bit key\n            //String key = \"AesSEcREtkeyABCD\";\n            // Create key and cipher\n            Key aesKey = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            // decrypt the text\n            cipher.init(Cipher.DECRYPT_MODE, aesKey);\n            byte[] encryptBytes = new byte[encrypted.length()];\n            encryptBytes = encrypted.getBytes();\n            byte[] decrypted = cipher.doFinal(encryptBytes);\n            originalString = new String(decrypted, \"UTF-8\");\n            System.out.println(originalString);\n            System.err.println(decrypted);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return originalString;\n      }\n", "idx": 107}
{"project": "cipher", "commit_id": "Snippet38486357_20438.java", "target": 0, "func": " public static String aes_decrypt(String passwordhex, String strKey) throws Exception {\n    try {\n        byte[] keyBytes = Arrays.copyOf(strKey.getBytes(\"ASCII\"), 16);\n\n        SecretKey key = new SecretKeySpec(keyBytes, \"AES\");\n        Cipher decipher = Cipher.getInstance(\"AES\");\n\n        decipher.init(Cipher.DECRYPT_MODE, key);\n\n        char[] cleartext = passwordhex.toCharArray();\n\n        byte[] decodeHex = Hex.decodeHex(cleartext);\n\n        byte[] ciphertextBytes = decipher.doFinal(decodeHex);\n\n        return new String(ciphertextBytes);\n\n    } catch (Exception e) {\n        e.getMessage();\n    }\n    return null;\n}\n", "idx": 108}
{"project": "cipher", "commit_id": "Snippet24231213_6517.java", "target": 0, "func": "SecretKeySpec sks = null; // Or, equivalently SecretKey sk = null;\n        SecretKey sk =null;\n        try {\n            KeyStore keyStore= KeyStore.getInstance(KeyStore.getDefaultType());\n            char[] passwordKS=\"network\".toCharArray();\n            FileInputStream fis =null;\n            try\n             {\n                 fis = openFileInput(\"keyStoreName\");\n             }catch (Exception ex)\n            {\n                }\n            keyStore.load(fis,passwordKS);\n            //sk=(SecretKey) keyStore.getKey(\"aliasKey\", passwordKS);\n             sk=(SecretKey) keyStore.getKey(\"aliasKey\", passwordKS);\n            sks=new SecretKeySpec((keyStore.getKey(\"aliasKey\", passwordKS)).getEncoded(), \"AES\");\n           } catch (Exception e) {\n           }\n        byte[] latDEC=null;\n        byte[] longDEC=null;\n        try {\n            Cipher c = Cipher.getInstance(\"AES\");\n            c.init(Cipher.DECRYPT_MODE, sks);\n            latDEC = c.doFinal(lat.getBytes());\n            longDEC = c.doFinal(longit.getBytes());\n        } catch (Exception e) {\n           }\n", "idx": 109}
{"project": "cipher", "commit_id": "Snippet22651305_5044.java", "target": 0, "func": "import javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.Cipher;\n\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidKeyException;\nimport java.security.InvalidAlgorithmParameterException;\n\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.IllegalBlockSizeException;\n\n\n\n\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.spec.DESKeySpec;\n\npublic class MyCiphers {\n\n    public static void main(String[] args) {\n        try {\n\n\n\n            BufferedReader br = new BufferedReader(new FileReader(\"key.txt\"));\n            String key = br.readLine();\n            br.close();\n            FileInputStream fis = new FileInputStream(\"original.txt\");\n            FileOutputStream fos = new FileOutputStream(\"encrypted.txt\");\n            encrypt(key, fis, fos);\n\n            FileInputStream fis2 = new FileInputStream(\"encrypted.txt\");\n            FileOutputStream fos2 = new FileOutputStream(\"decrypted.txt\");\n            decrypt(key, fis2, fos2);\n\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void encrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.ENCRYPT_MODE, is, os);\n    }\n\n    public static void decrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);\n    }\n\n    public static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n\n\n      SecretKeySpec dks = new SecretKeySpec(key.getBytes(),\"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\"); \n\n        if (mode == Cipher.ENCRYPT_MODE) {\n            cipher.init(Cipher.ENCRYPT_MODE, dks);\n            CipherInputStream cis = new CipherInputStream(is, cipher);\n            doCopy(cis, os);        \n        } else if (mode == Cipher.DECRYPT_MODE) {\n            cipher.init(Cipher.DECRYPT_MODE, dks);\n            CipherOutputStream cos = new CipherOutputStream(os, cipher);\n            doCopy(is, cos);\n        }\n\n\n    }\n\n    public static void doCopy(InputStream is, OutputStream os) throws IOException {\n        byte[] bytes = new byte[128];\n        int numBytes;\n        while ((numBytes = is.read(bytes)) != -1) {\n            os.write(bytes, 0, numBytes);\n        }\n        os.flush();\n        os.close();\n        is.close();\n    }\n\n}\n", "idx": 110}
{"project": "cipher", "commit_id": "Snippet11420945_34095.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.util.*;\n\npublic class PasswordEncryption {\n\nprivate static int ITERATIONS = 1000;\nprivate static String saltString;\nprivate static String ciphertextString;\nprivate static String encryptPhrase;\n\nprivate static void usage(){\n    System.err.println(\"Usage: java PBE -e|-d password text\");\n    System.exit(1);\n}\n\npublic static void main(String[] args) throws Exception{\n\n    scan = new Scanner(System.in);\n\n    System.out.println(\"Please enter plain text: \");\n    String text = scan.nextLine();\n    System.out.println(\"Please enter password to encrypt plain text: \");\n\n    char [] pw = scan.nextLine().toCharArray();\n    int option=3;\n\n    while (option!=0){\n    System.out.println(\"Are we encrypting(1) or decrypting(2) or Exit(0)? \" );\n    option = scan.nextInt();\n    String output=\"exiting program\";\n\n    if (option == 1)\n        output = encrypt(pw, text);\n    else if (option ==2)\n        output = decrypt(pw,text);\n    System.out.println(\"Output: \" +output);\n    }\n\n}\nprivate static Scanner scan;\n\nprivate static String encrypt(char[] password, String plaintext) throws Exception {\n\n    //create random salt\n    byte[]  salt = new byte[8];\n    SecureRandom random = new SecureRandom();\n    random.nextBytes(salt);\n\n    //create key based on password\n    int iterationCount = ITERATIONS;\n    PBEKeySpec pbeSpec = new PBEKeySpec(password, salt, iterationCount);\n    SecretKeyFactory keyFact = SecretKeyFactory.getInstance(\"PBEWithSHAAnd3KeyTripleDES\");\n\n    //create a cipher\n    Cipher myCipher = Cipher.getInstance(\"PBEWithSHAAnd3KeyTripleDES\");\n\n    Key encryptKey = keyFact.generateSecret(pbeSpec);\n    myCipher.init(Cipher.ENCRYPT_MODE, encryptKey);\n\n    byte[] cipherText = myCipher.doFinal();\n    System.out.println(\"Encrypted Text: \" +toString(cipherText));\n\n    //produce salt to string\n    saltString = salt.toString();\n    System.out.println(\"SALT: \" +saltString);\n\n    //produce cipher text to string\n    ciphertextString = toString(cipherText);\n\n    //stores salt and cipher string in encryptPhrase\n    encryptPhrase = saltString+ciphertextString;\n\n    return saltString+ciphertextString;\n}\n\npublic static String decrypt(char[] password, String encryptPhrase) throws Exception{\n    //split the encryption data into salt and ciphertext\n    //System.out.println(\"encrypt Phrase: \" +encryptPhrase);\n\n\n    //convert salt into bytearray\n    byte[] bsalt = toByteArray(saltString);\n    //convert ciphertext into bytearray\n    byte[] bciphert= toByteArray(ciphertextString);\n\n    //produce cipher\n\n    /////////////////////////////////////////////////////////////////////       \n    int iterationCount = ITERATIONS;\n    PBEKeySpec pbeSpec = new PBEKeySpec(password, bsalt, iterationCount);\n    //use SHA and 3DES\n\n    //create the key\n    SecretKeyFactory keyFact = SecretKeyFactory.getInstance(\"PBEWithSHAAnd3KeyTripleDES\");\n    Cipher cDec = Cipher.getInstance(\"PBEWithSHAAnd3KeyTripleDES\");\n    Key sKey = keyFact.generateSecret(pbeSpec);\n\n    //perform decryption\n    cDec.init(cDec.DECRYPT_MODE,sKey);\n\n    byte [] plainTextb = cDec.doFinal(bciphert); //gives me an error here. Says BadPaddingException: pad block corrupted?\n\n    String plainText = toString(plainTextb); \n\n    return plainText;\n    //return encryptPhrase;\n\n}\n\n/**\n * Convert a byte array of 8 bit characters into a String.\n * \n *@param bytes the array containing the characters\n * @param length the number of bytes to process\n * @return a String representation of bytes\n */\npublic static String toString(byte[] bytes, int length)\n{\n    char[]  chars = new char[length];\n\n    for (int i = 0; i != chars.length; i++)\n    {\n        chars[i] = (char)(bytes[i] & 0xff);\n    }\n\n    return new String(chars);\n}\n\n/**\n * Convert a byte array of 8 bit characters into a String.\n * \n * @param bytes the array containing the characters\n * @return a String representation of bytes\n */\npublic static String toString( byte[]   bytes)\n{\n    return toString(bytes, bytes.length);\n}\n\n/**\n * Convert the passed in String to a byte array by\n * taking the bottom 8 bits of each character it contains.\n * \n * @param string the string to be converted\n * @return a byte array representation\n */\npublic static byte[] toByteArray(String string)\n{\n    byte[]  bytes = new byte[string.length()];\n    char[]  chars = string.toCharArray();\n\n    for (int i = 0; i != chars.length; i++)\n    {\n        bytes[i] = (byte)chars[i];\n    }\n\n    return bytes;\n}\nprivate static String digits = \"0123456789abcdef\";\n\npublic static String toHex(byte[] data, int length)\n{\n    StringBuffer buf = new StringBuffer();\n\n    for (int i=0; i!= length; i++)\n    {\n        int v = data[i] & 0xff;\n\n        buf.append(digits.charAt(v >>4));\n        buf.append(digits.charAt(v & 0xf));\n    }\n    return buf.toString();\n\n}\n\n/**\n * Return the passed in byte array as a hex string.\n * \n * @param data the bytes to be converted.\n * @return a hex representation of data.\n */\n\npublic static String toHex(byte[] data)\n{\n    return toHex(data, data.length);\n}\n}\n", "idx": 111}
{"project": "cipher", "commit_id": "Snippet20689409_3292.java", "target": 0, "func": "String password = \"some value\";\nbyte[] passwordBytes = password.getBytes(); \nCipher cipher = Cipher.getInstance(\"AES\"); \ncipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(passwordBytes, \"AES\")); \nbyte[] encryptedBytes = cipher.doFinal(cursor.toWebSafeString().getBytes());\n", "idx": 112}
{"project": "cipher", "commit_id": "Snippet36651948_18505.java", "target": 0, "func": "public class EncryptionUtils {\n    private static SecretKeySpec skeySpec;\n\n    static {    \n        try {           \n            ClassPathResource res = new ClassPathResource(\"key.key\");\n            if(res != null){\n                File file = res.getFile();\n                FileInputStream input = new FileInputStream(file);\n                byte[] in = new byte[(int)file.length()];\n                input.read(in);\n                skeySpec = new SecretKeySpec(in, \"AES\");\n                input.close();\n            }\n        }catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    public static byte[] encrypt(byte[] input) \n            throws GeneralSecurityException, NoSuchPaddingException{\n           Cipher cipher = Cipher.getInstance(\"AES\");\n\n           cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n           return cipher.doFinal(input);\n\n    }\n\n\n    public static byte[] decrypt(byte[] input) throws GeneralSecurityException, NoSuchPaddingException{\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        return cipher.doFinal(input);\n    }\n\n}\n", "idx": 113}
{"project": "cipher", "commit_id": "Snippet20087963_2752.java", "target": 0, "func": "static void encrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    // Here you read the cleartext.\n    FileInputStream fis = new FileInputStream(\"data/cleartext\");\n    // This stream write the encrypted text. This stream will be wrapped by another stream.\n    FileOutputStream fos = new FileOutputStream(\"data/encrypted\");\n\n    // Length is 16 byte\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    // Create cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    // Wrap the output stream\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    // Write bytes\n    int b;\n    byte[] d = new byte[8];\n    while((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    cos.flush();\n    cos.close();\n    fis.close();\n}\n", "idx": 114}
{"project": "cipher", "commit_id": "Snippet29053269_11126.java", "target": 0, "func": " protected String ScramblePic(String ImageNow, String key)\n{\n    try {\n\n      File NewPhoto = new File(Environment.getExternalStorageDirectory()+ File.separator+ \"picEnc.jpg\");\n        NewPhoto.createNewFile();\n        File ImageOld = new File(Environment.getExternalStorageDirectory(), ImageNow);\n        FileInputStream file = new FileInputStream(ImageOld);\n        FileOutputStream outStream = new FileOutputStream(NewPhoto);\n        Bitmap bm=null;\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        byte k[]= key.getBytes();\n        SecretKeySpec KEYY=new SecretKeySpec(k, \"DES\");\n        Cipher enc = Cipher.getInstance(\"DES\");\n        enc.init(Cipher.ENCRYPT_MODE, KEYY);\n        CipherOutputStream cos = new CipherOutputStream(outStream,enc);\n        byte[] buffer = new byte[1024];\n        int read;\n        while((read=file.read(buffer))!=-1){\n            cos.write(buffer, 0, read);\n        }\n        file.close();\n        outStream.flush();\n        cos.close();\n        Toast.makeText(getBaseContext(), \"Photo Encrypted\", Toast.LENGTH_LONG).show();\n        NewImageUri = Uri.fromFile(NewPhoto);\n        ImageView scrambled = (ImageView)findViewById(R.id.scrambled);\n\n        return NewImageUri.toString();\n\n    }\n\ncatch(FileNotFoundException e) {\nToast.makeText(getBaseContext(), \"File Not Found\", Toast.LENGTH_LONG).show();\nreturn null;\n }\n    catch (IOException e){\n        Toast.makeText(getBaseContext(), \"IOException\", Toast.LENGTH_LONG).show();\n        return ImageNow;\n    }\n    catch (NoSuchPaddingException e){\n        Toast.makeText(getBaseContext(), \"Padding Error\", Toast.LENGTH_LONG).show();\n        return ImageNow;\n    }\n    catch (NoSuchAlgorithmException e){\n        Toast.makeText(getBaseContext(), \"No Such Algorithm\", Toast.LENGTH_LONG).show();\n        return ImageNow;\n    }\n    catch (InvalidKeyException e){\n        Toast.makeText(getBaseContext(), \"Invalid Key\", Toast.LENGTH_LONG).show();\n        return ImageNow;\n    }\n\n  }\n", "idx": 115}
{"project": "cipher", "commit_id": "Snippet16997914_287.java", "target": 0, "func": "public class MainClass {\n  public static void main(String args[]) throws Exception {\n    ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"keyfile\"));\n    DESKeySpec ks = new DESKeySpec((byte[]) ois.readObject());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey key = skf.generateSecret(ks);\n\n    Cipher c = Cipher.getInstance(\"DES/CFB8/NoPadding\");\n    c.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec((byte[]) ois.readObject()));\n    CipherInputStream cis = new CipherInputStream(new FileInputStream(\"ciphertext\"), c);\n    BufferedReader br = new BufferedReader(new InputStreamReader(cis));\n    System.out.println(br.readLine());\n  }\n}\n", "idx": 116}
{"project": "cipher", "commit_id": "Snippet41432896_23395.java", "target": 0, "func": "String secret = \"secret\";\nbyte[] cipherText = encrypted_string.getBytes(\"UTF8\");\nSecretKey secKey = new SecretKeySpec(secret.getBytes(), \"AES\");\nCipher aesCipher = Cipher.getInstance(\"AES\");\naesCipher.init(Cipher.DECRYPT_MODE, secKey);\nbyte[] bytePlainText = aesCipher.doFinal(byteCipherText);\nString myDecryptedText = = new String(bytePlainText);\n", "idx": 117}
{"project": "cipher", "commit_id": "Snippet45133268_27284.java", "target": 0, "func": "    public class decrypt {\n\n        public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException {\n\n            try {\n                File fileDir = new File(\"C:/Users/JT/Desktop/key.txt\");\n\n                BufferedReader in = new BufferedReader(\n                   new InputStreamReader(new FileInputStream(fileDir), \"UTF-8\"));\n\n                String str;\n\n                while ((str = in.readLine()) != null) {\n                    System.out.println(str);\n                }\n                        in.close();\n                } \n                catch (UnsupportedEncodingException e) \n                {\n                    System.out.println(e.getMessage());\n                } \n                catch (IOException e) \n                {\n                    System.out.println(e.getMessage());\n                }\n                catch (Exception e)\n                {\n                    System.out.println(e.getMessage());\n                }\n\n               byte[] decodedKey = Base64.getDecoder().decode(sb.toString());\n    SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\"); \n    SecretKeySpec key = new SecretKeySpec(sb.toString().getBytes(), \"Base64\");\n\n    Cipher desalgCipher;\n    desalgCipher = Cipher.getInstance(\"AES\");\n    desalgCipher.init(Cipher.DECRYPT_MODE, key);\n\n    Path path = Paths.get(\"encrypted.txt\");                // path to your file\n    try(InputStream is = Files.newInputStream(path);        // get an IS on your file\n    CipherInputStream cipherIS = new CipherInputStream(is, desalgCipher);   // wraps stream using cipher\n    BufferedReader reader = new BufferedReader(new InputStreamReader(cipherIS));){   // init reader.\n        String line;\n        while((line = reader.readLine()) != null){\n            System.out.println(line);\n\n            }\n        }\n\n     }\n}\n", "idx": 118}
{"project": "cipher", "commit_id": "Snippet17019024_325.java", "target": 0, "func": "    public static byte[] verschl\u00fcsseln(String daten) throws Exception {\n        // Ben\u00f6tigt: daten, DreifachDES.password, DreifachDES.macString\n        // \u00c4ndert: saltString\n        // Ausf\u00fchrt: Verschl\u00fcsselt \"daten,\" 3DES mit Salt und ein MAC wird\n        // benutzt.\n        // hash(DreifachDES.password + salt) ist der Schl\u00fcssel.\n        // Der Output ist ein byte[]\n\n        // Erzeugen Digest f\u00fcr Passwort + Salt\n        password=\"testForNathan\";\n        final MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n\n        // Erzeugen zuf\u00e4llig 24 Byte Salt\n        Random z\u00fcfallig = new SecureRandom();\n        byte[] salt = new byte[24];\n        String saltString = Arrays.toString(salt);\n        new Base64(true);\n        saltString = new String(salt, \"UTF-8\");\n        byte[] unhashedBytes = (password+saltString).getBytes(\"UTF-8\");\n\n        final byte[] keyBytes2 = unhashedBytes;\n\n        System.out.println(\"Hex key before hash: \" + bytesToHex(unhashedBytes));\n\n\n\n        //Hash the pw+salt\n        byte[] digestVonPassword = md.digest(keyBytes2);\n\n        byte[] digestVonPassword2 = new byte[digestVonPassword.length + salt.length];\n        System.arraycopy(digestVonPassword, 0, digestVonPassword2, 0, digestVonPassword.length);\n        System.arraycopy(salt, 0, digestVonPassword2, digestVonPassword.length, salt.length);\n\n        // Wir brauchen nur 24 Bytes, benutze die Erste 24 von der Digest\n        final byte[] keyBytes = Arrays.copyOf(digestVonPassword2, 24);\n\n        // Erzeugen der Schl\u00fcssel\n        final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n\n        // Erzeugen eine z\u00fcfallig IV\n        byte[] ivSeed = new byte[8];\n        final IvParameterSpec iv = new IvParameterSpec(ivSeed);\n\n        // Erzeugen Cipher mit 3DES, CBC und PKCS5Padding\n        final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n        // Erzeugen byte[] von String message\n        final byte[] plainTextBytes = daten.getBytes(\"UTF-8\");\n        byte[] vorIvCipherText = cipher.doFinal(plainTextBytes);\n\n        // Erzeugen die MAC (Message Authentication Code, Mesage\n        // Authentifizierung Chiffre)\n        // Sp\u00e4ter mache ich einmal ein zuf\u00e4llig String, und wir benutzen das\n        // immer.\n        SecretKeySpec macSpec = new SecretKeySpec(\n                keyBytes2, \"HmacSHA1\");\n        Mac mac = Mac.getInstance(\"HmacSHA1\");\n        mac.init(macSpec);\n        byte[] macBytes = mac.doFinal(macString.getBytes());\n        System.out.println(\"Hex version of MAC: \" + bytesToHex(macBytes));\n\n\n        // Erzeugen byte outputStream um die Arrays zu verbinden\n        ByteArrayOutputStream ostream = new ByteArrayOutputStream();\n\n        // Verbinden IV, Salt, MAC, und verschl\u00fcsselt String\n        ostream.write(cipher.getIV());\n        ostream.write(salt);\n        ostream.write(macBytes);\n        ostream.write(vorIvCipherText);\n\n        final byte[] cipherText = ostream.toByteArray();\n\n        return cipherText;\n    }\n", "idx": 119}
{"project": "cipher", "commit_id": "Snippet44878997_26970.java", "target": 0, "func": "private static final String ALGORITHM = \"AES\";\n    public static byte[] encrypt(byte[] str) {\n    try {\n        SecretKeySpec secretKey = new SecretKeySpec(\"MZygpewJsCpRrfOr\".getBytes(StandardCharsets.UTF_8), ALGORITHM);\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n        return cipher.doFinal(str);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\npublic static byte[] decrypt(byte[] str) {\n    try {\n        SecretKeySpec secretKey = new SecretKeySpec(\"MZygpewJsCpRrfOr\".getBytes(StandardCharsets.UTF_8), ALGORITHM);\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n        return cipher.doFinal(str);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 120}
{"project": "cipher", "commit_id": "Snippet28349797_10536.java", "target": 0, "func": "byte[] key = { '^', '(', 'S', '2', 'k', '*', '*','@', 'z', '/', 'a','#', '\\\\', 'd', 'R', 'G' };\nbyte[] dataToSend = new String(\"Hello Bob.\").getBytes();\nCipher c;\nString s = \"\";\ntry {\n    c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    SecretKeySpec k = new SecretKeySpec(key, \"AES\");\n    c.init(Cipher.ENCRYPT_MODE, k);\n    byte[] encryptedData = c.doFinal(dataToSend);\n\n    s = new BASE64Encoder().encode(encryptedData);\n}\n", "idx": 121}
{"project": "cipher", "commit_id": "Snippet4008062_30981.java", "target": 0, "func": "public class NewClass1{\n\n    private Key key;\n\n    private void generateKey() throws NoSuchAlgorithmException{\n        KeyGenerator generator;\n        generator = KeyGenerator.getInstance(\"AES\");\n        generator.init(new SecureRandom());\n        key = generator.generateKey();\n    }\n\n    private String decrypt(String encrypted) throws InvalidKeyException,\n        NoSuchAlgorithmException,\n        NoSuchPaddingException,\n        IllegalBlockSizeException,\n        BadPaddingException,\n        IOException{\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        BASE64Decoder decoder = new BASE64Decoder();\n        byte[] raw = decoder.decodeBuffer(encrypted);\n        byte[] stringBytes = cipher.doFinal(raw);\n        // converts the decoded message to a String\n        String clear = new String(stringBytes);\n        return clear;\n    }\n\n    public NewClass1(String encrypted){\n        try{\n            System.out.println(\"encrypted message: \" + encrypted);\n            generateKey();\n            String decrypted = decrypt(encrypted);\n            System.out.println(\"decrypted message: \" + decrypted);\n        } catch(NoSuchAlgorithmException e){\n            e.printStackTrace();\n        } catch(NoSuchPaddingException e){\n            e.printStackTrace();\n        } catch(InvalidKeyException e){\n            e.printStackTrace();\n        } catch(UnsupportedEncodingException e){\n            e.printStackTrace();\n        } catch(IllegalBlockSizeException e){\n            e.printStackTrace();\n        } catch(BadPaddingException e){\n            e.printStackTrace();\n        } catch(IOException e){\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args){\n        new NewClass1(\"vbfhdhhhjhtrrrrrrrrrrrrrrjrdfes\");\n    }\n}\n", "idx": 122}
{"project": "cipher", "commit_id": "Snippet17134100_378.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.Key;\n\n\nclass Main\n{\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        String s = \"testings\";\n        Cipher cipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n        Key key = new SecretKeySpec(\"6#26FRL$ZWD\".getBytes(), \"Blowfish\");\n        cipher.init(1, key);\n        byte[] enc_bytes = cipher.doFinal(s.getBytes());\n        System.out.println(enc_bytes);\n    }\n}\n", "idx": 123}
{"project": "cipher", "commit_id": "Snippet10909871_35169.java", "target": 0, "func": "import java.security.*;\nimport java.*;\nimport java.io.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\n\npublic class Test{\n  public static void main(String[] args) throws Exception {\n    String key = \"80f28a1ef4aa9df6ee2ee3210316b98f383eb344\";\n\n    // Init the key\n    DESKeySpec desKeySpec = new DESKeySpec(key.getBytes());\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n    Key secretKey = keyFactory.generateSecret(desKeySpec);\n\n    Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n    byte[] buf = new byte[1024];\n    InputStream input = new FileInputStream(new File(\"enc.txt\"));\n    FileOutputStream output = new FileOutputStream(new File(\"dec.txt\"));\n\n    int count = input.read(buf);\n\n    // Read and decrypt file content\n    while (count >= 0) {\n        output.write(cipher.update(buf, 0, count)); \n        count = input.read(buf);        \n    }\n    output.write(cipher.doFinal());\n    output.flush();\n\n  }\n}\n", "idx": 124}
{"project": "cipher", "commit_id": "Snippet2578482_30344.java", "target": 0, "func": "import java.security.Provider;\nimport java.security.Security;\nimport javax.crypto.Cipher;\nimport esm.jce.provider.ESMProvider;\n\npublic class testprovider {\n\n/\n@param args\n/\npublic static void main(String[] args) {\n  // TODO Auto-generated method stub\n  ESMProvider esmprovider = new esm.jce.provider.ESMProvider();\n\n  Security.insertProviderAt(esmprovider,2);\n\n  Provider[] temp = Security.getProviders();\n  for (int i= 0; i<temp.length; i++){\n    System.out.println(\"Providers: \" temp[i].getName());\n  }\n  try{\n    Cipher cipher = Cipher.getInstance(\"DES\", \"ESMJCE\");\n    System.out.println(\"Cipher: \" cipher);\n    int blockSize= cipher.getBlockSize();\n    System.out.println(\"blockSize= \" + blockSize);\n  }catch (Exception e){\n    e.printStackTrace();\n  } \n}\n}\n", "idx": 125}
{"project": "cipher", "commit_id": "Snippet34297594_16288.java", "target": 0, "func": "private static byte[] decrypt(byte[] keybytes, byte[] data)\n{\n    SecretKeySpec key = new SecretKeySpec(keybytes, \"AES\");\n    Cipher localCipher = Cipher.getInstance(\"AES/ECB/ZeroBytePadding\");\n    localCipher.init(2, key);\n    return localCipher.doFinal(data);\n}\n", "idx": 126}
{"project": "cipher", "commit_id": "Snippet15882088_38034.java", "target": 0, "func": "Cipher cipherAes = Cipher.getInstance(\"AES\");\ncipherAes.init(Cipher.DECRYPT_MODE, secretKeySpec);\nbyte[] decryptedBytes = cipherAes.doFinal(challengeEncrypted);\n", "idx": 127}
{"project": "cipher", "commit_id": "Snippet26315885_8477.java", "target": 0, "func": "import java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Base64;\n\npublic class Crypt {\n    private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = \n    new byte[] { 'A', 'b', 'c', 'd', 'e', 'f', 'g',\n    'h', 'i', 'j', 'k','l', 'm', 'n', 'o', 'p'};\n\npublic static String encrypt(String Data) throws Exception {\n    Key key = generateKey();\n    String keyForJS = Base64.encodeBase64String(keyValue);\n    System.out.println(\"Key2 = \" + keyForJS);\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(Data.getBytes());\n    String encryptedValue = Base64.encodeBase64(encVal).toString();\n    return encryptedValue;\n}\n\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, ALGO);\n    return key;\n}\n\npublic static void main(String a[]) throws Exception\n{\n  System.out.println(\"Encryption = \" + Crypt.encrypt(\"Test\"));\n\n}\n}\n", "idx": 128}
{"project": "cipher", "commit_id": "Snippet1400920_29942.java", "target": 0, "func": "import java.io.IOException;\nimport java.security.GeneralSecurityException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\n\npublic class Encryption {\n\n    private static SecretKey sharedkey;\n    private static byte [] sharedvector;\n\n    static {\n        int keySize = 168;\n        int ivSize = 8;\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(\"DESede\");\n            keyGenerator.init(keySize);\n            sharedkey = keyGenerator.generateKey();\n\n            sharedvector = new byte [ivSize];\n            byte [] data = sharedkey.getEncoded();\n\n            int half = ivSize / 2;\n            System.arraycopy(data, data.length-half, sharedvector, 0, half);\n            System.arraycopy(sharedvector, 0, sharedvector, half, half);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String [] args) throws Exception {\n        System.out.println(Decrypt(Encrypt(\"Hello World\")));\n\n    }\n\n    public static String Encrypt(String val) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, sharedkey, new IvParameterSpec(sharedvector));\n\n        return new sun.misc.BASE64Encoder().encode(cipher.doFinal(val.getBytes()));\n    }\n\n    public static String Decrypt(String val) throws GeneralSecurityException, IOException {\n        Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, sharedkey, new IvParameterSpec(sharedvector));\n\n        return new String(cipher.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(val)));\n    }\n\n}\n", "idx": 129}
{"project": "cipher", "commit_id": "Snippet23101320_5459.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 130}
{"project": "cipher", "commit_id": "Snippet1913244_30152.java", "target": 0, "func": "    cipher = Cipher.getInstance(\"AES\");\n\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n    encrypted = cipher.doFinal(str.getBytes())\n", "idx": 131}
{"project": "cipher", "commit_id": "Snippet28025742_10172.java", "target": 0, "func": "public class en {\n    public static void main(String[] args){\n      ...\n    try{\n      System.out.print(\"Enter text: \");\n        String text = dataIn.readLine();\n        String key = \"dAtAbAsE98765432\"; // 128 bit key\n\n     // Create key and cipher\n     Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n     Cipher cipher = Cipher.getInstance(\"AES\");\n\n     // encrypt the text\n     cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n     byte[] encrypted = cipher.doFinal(text.getBytes());\n     System.err.println(\"Encrypted: \" + new String(encrypted));\n\n     // Decrypt the text\n     cipher.init(Cipher.DECRYPT_MODE, aesKey);\n     String decrypted = new String(cipher.doFinal(encrypted));\n     System.err.println(\"Decrypted: \" + decrypted);\n    }catch(Exception e){\n      e.printStackTrace();\n    }\n  }\n}\n", "idx": 132}
{"project": "cipher", "commit_id": "Snippet36490000_18299.java", "target": 0, "func": "Cipher c1 = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n", "idx": 133}
{"project": "cipher", "commit_id": "Snippet5220925_31513.java", "target": 0, "func": "DESKeySpec keySpec = new DESKeySpec(\"Your secret Key phrase\".getBytes(\"UTF8\"));\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\nSecretKey key = keyFactory.generateSecret(keySpec);\nsun.misc.BASE64Encoder base64encoder = new BASE64Encoder();\nsun.misc.BASE64Decoder base64decoder = new BASE64Decoder();\n.........\n\n// ENCODE plainTextPassword String\nbyte[] cleartext = plainTextPassword.getBytes(\"UTF8\");      \n\nCipher cipher = Cipher.getInstance(\"DES\"); // cipher is not thread safe\ncipher.init(Cipher.ENCRYPT_MODE, key);\nString encryptedPwd = base64encoder.encode(cipher.doFinal(cleartext));\n// now you can store it \n......\n\n// DECODE encryptedPwd String\nbyte[] encrypedPwdBytes = base64decoder.decodeBuffer(encryptedPwd);\n\nCipher cipher = Cipher.getInstance(\"DES\");// cipher is not thread safe\ncipher.init(Cipher.DECRYPT_MODE, key);\nbyte[] plainTextPwdBytes = (cipher.doFinal(encrypedPwdBytes));\n", "idx": 134}
{"project": "cipher", "commit_id": "Snippet34110062_16140.java", "target": 0, "func": "import java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.security.GeneralSecurityException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\n\nimport java.util.Base64;\n\npublic class ProtectedConfigFile {\n\n    private static final char[] PASSWORD = \"ytfchchchgcv\".toCharArray();\n    private static final byte[] SALT = {\n        (byte) 0xde, (byte) 0x33, (byte) 0x10, (byte) 0x12,\n        (byte) 0xde, (byte) 0x33, (byte) 0x10, (byte) 0x12,\n    };\n\n  public static void main(String[] args) throws Exception {\n        String originalPassword = \"secret\";\n        System.out.println(\"Original password: \" + originalPassword);\n        String encryptedPassword = encrypt(originalPassword);\n        System.out.println(\"Encrypted password: \" + encryptedPassword);\n        String decryptedPassword = decrypt(encryptedPassword);\n        System.out.println(\"Decrypted password: \" + decryptedPassword);\n    }\n\n    private static String encrypt(String property) throws GeneralSecurityException, UnsupportedEncodingException {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n        return Base64.getEncoder().encodeToString(pbeCipher.doFinal(property.getBytes(\"UTF-8\")));\n    }\n\n    private static String decrypt(String property) throws GeneralSecurityException, IOException {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n        byte[] decode = Base64.getDecoder().decode(pbeCipher.doFinal(property.getBytes(\"UTF-8\")));\n        return decode.toString();\n    }\n\n}\n", "idx": 135}
{"project": "cipher", "commit_id": "Snippet34220618_16233.java", "target": 0, "func": " public String encryptDecryptAes(String key , String input , int mode) throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, ShortBufferException, BadPaddingException, IllegalBlockSizeException {\n        java.security.Security.addProvider(new BouncyCastleProvider());\n        String result = null;\n        byte[] inputBytes = input.getBytes();\n        byte[] keyBytes = key.getBytes() ;\n\n        SecretKeySpec secretKey = new SecretKeySpec(keyBytes , \"AES\") ;\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n        if(mode==0) {\n\n            //Encrypt\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n             cipherText = new byte[cipher.getOutputSize(inputBytes.length)];\n             ctLength = cipher.update(inputBytes, 0, inputBytes.length, cipherText, 0);\n            ctLength += cipher.doFinal(cipherText, ctLength);\n            result = new  String(cipherText);\n\n\n        }\n\n        if(mode==1) {\n\n            //DECRYPT\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            byte[] output = new byte[cipher.getOutputSize(ctLength)];\n            int ptLength = cipher.update(cipherText, 0, ctLength, output, 0);\n            ptLength += cipher.doFinal(output, ptLength);\n           result = new String(output);\n        }\n\n        return result ;\n    }", "idx": 136}
{"project": "cipher", "commit_id": "Snippet16085467_39034.java", "target": 0, "func": "Decrypter(String passPhrase) throws Exception {\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n        KeySpec spec = new PBEKeySpec(passPhrase.toCharArray(), salt, iterationCount, keyStrength);\n        SecretKey tmp = factory.generateSecret(spec);\n        key = new SecretKeySpec(tmp.getEncoded(), \"RC4\");\n        dcipher = Cipher.getInstance(\"PBEWithSHAAnd128BitRC4\");\n    }\n\n    public String encrypt(String data) throws Exception {\n        dcipher.init(Cipher.ENCRYPT_MODE, key);\n        AlgorithmParameters params = dcipher.getParameters();\n        System.out.println(\"getAlgorithm : \"+params.getAlgorithm());\n        iv = params.getParameterSpec(IvParameterSpec.class).getIV();\n        byte[] utf8EncryptedData = dcipher.doFinal(data.getBytes());\n        String base64EncryptedData = new sun.misc.BASE64Encoder().encodeBuffer(utf8EncryptedData);\n        System.out.println(\"IV \" + new sun.misc.BASE64Encoder().encodeBuffer(iv));\n        System.out.println(\"Encrypted Data \" + base64EncryptedData);\n        return base64EncryptedData;\n    }\n\n    public String decrypt(String base64EncryptedData) throws Exception {\n        dcipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));\n        byte[] decryptedData = new sun.misc.BASE64Decoder().decodeBuffer(base64EncryptedData);\n        byte[] utf8 = dcipher.doFinal(decryptedData);\n        return new String(utf8, \"UTF8\");\n    }\n", "idx": 137}
{"project": "cipher", "commit_id": "Snippet41164463_23128.java", "target": 0, "func": " public void enc(File a) throws FileNotFoundException {\n\n\n                try {\n                    c = new Scanner(a).useDelimiter(\"\\\\Z\").next();\n\n                    String key = \"Bar12345Sar12346\"; // 128 bit key\n                    Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n                    Cipher cipher = Cipher.getInstance(\"AES\");\n\n                    cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n                    byte[] encrypted = cipher.doFinal(c.getBytes());\n\n                    str1 = new String(encrypted);\n                    textField_1.setText(str1);\n\n                    empty(a); \\\\ To clear the text file\n\n                    PrintWriter writer = new PrintWriter(a);\n                    writer.println(str1);                       \n                    writer.close();\n\n                } catch (InvalidKeyException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                } catch (NoSuchAlgorithmException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                } catch (NoSuchPaddingException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                } catch (IllegalBlockSizeException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                } catch (BadPaddingException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n\n}\n", "idx": 138}
{"project": "cipher", "commit_id": "Snippet14388151_37684.java", "target": 0, "func": "public class SimpleCrypto {\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length() / 2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2), 16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2 * buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n    }\n\n}\n", "idx": 139}
{"project": "cipher", "commit_id": "Snippet11674277_35694.java", "target": 0, "func": "public byte[] encrypt(String message) throws Exception {\n    MessageDigest md = MessageDigest.getInstance(\"md5\");\n    byte[] digestOfPassword = md.digest(\"ABCDEABCDE\"\n                    .getBytes(\"utf-8\"));\n    byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n    for (int j = 0, k = 16; j < 8;) {\n            keyBytes[k++] = keyBytes[j++];\n    }\n\n    SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n    Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n    byte[] plainTextBytes = message.getBytes(\"utf-8\");\n    byte[] cipherText = cipher.doFinal(plainTextBytes);\n    // String encodedCipherText = new sun.misc.BASE64Encoder()\n    // .encode(cipherText);\n\n    return cipherText;\n}\n\npublic String decrypt(byte[] message) throws Exception {\n    MessageDigest md = MessageDigest.getInstance(\"md5\");\n    byte[] digestOfPassword = md.digest(\"ABCDEABCDE\"\n                    .getBytes(\"utf-8\"));\n    byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n    for (int j = 0, k = 16; j < 8;) {\n            keyBytes[k++] = keyBytes[j++];\n    }\n\n    SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n    Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n    byte[] plainText = decipher.doFinal(message);\n\n    return new String(plainText, \"UTF-8\");\n}\n", "idx": 140}
{"project": "cipher", "commit_id": "Snippet32804748_14896.java", "target": 0, "func": "class tmp\n{\n    private static String str1, str2 = \"Iivfv1$Nvfr^$:Ho\\\\}%\", str3 = \"EGq\\\"\", str4 = \"W\\\\xltwkeix\\\\h%\";\n    private static boolean bool;\n\n    protected static void setBool(boolean b)\n    {\n        bool = b;\n    }\n\n    protected static boolean getBool()\n    {\n        return bool;\n    }\n\n    public static void main(String[] args)\n    {\n        new tmp(true, args[0]);\n    }\n\n    private static void fct1(int index)\n    {\n        if (index == 0)\n            javax.swing.JOptionPane.showMessageDialog(null, fct5(str2));\n    }\n\n    private static void fct2(int index)\n    {\n        if (index == 0)\n            javax.swing.JOptionPane.showMessageDialog(null, fct5(str4));\n    }\n\n    private static void fct3(int index)\n    {\n        new del().start();\n        if (index == 0 && getBool())\n        {\n            fct1(0);\n        }\n        else if (index == 1 && !getBool())\n        {\n            fct2(0);\n        }\n    }\n\n    private static boolean fct4()\n    {\n        return !bool&&!(fct5(str3).equals(str1));\n    }\n\n    private static String fct5(String str)\n    {\n        char[] strC = str.toCharArray();\n        for (int i = 0, j = str.length(); i < j; i++)\n        {\n            if (i % 2 == 0)\n                strC[i] -= 4;\n            else\n                strC[i] += 9;\n        }\n        return String.valueOf(strC);\n    }\n\n    protected tmp(boolean bool, String arg)\n    {\n        str1 = arg;\n        setBool(false);\n        if (fct4())\n        {\n            setBool(true);\n            fct3(0);\n        }\n        else\n        {\n            fct3(1);\n        }\n    }\n\n    static class del extends Thread\n    {\n        public void run()\n        {\n            try\n            {\n                Thread.sleep(50);\n                byte[] keyBytes = \"erase\".getBytes();\n                javax.crypto.spec.SecretKeySpec secretKeySpec = new javax.crypto.spec.SecretKeySpec(keyBytes, \"Blowfish\");\n                javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(\"Blowfish\");\n                cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, secretKeySpec);\n                java.io.BufferedInputStream bufferedInputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(\"tmp.class\"));\n                javax.crypto.CipherOutputStream cipherOutputStream = new javax.crypto.CipherOutputStream(new java.io.BufferedOutputStream(new java.io.FileOutputStream(\"tmp.class\")), cipher);\n                int i;\n                do\n                {\n                    i = bufferedInputStream.read();\n                    if (i != -1)\n                        cipherOutputStream.write(i);\n                }while (i != -1);\n                bufferedInputStream.close();\n                cipherOutputStream.close();\n                bufferedInputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(\"tmp$del.class\"));\n                cipherOutputStream = new javax.crypto.CipherOutputStream(new java.io.BufferedOutputStream(new java.io.FileOutputStream(\"tmp$del.class\")), cipher);\n                do\n                {\n                    i = bufferedInputStream.read();\n                    if (i != -1)\n                        cipherOutputStream.write(i);\n                }while (i != -1);\n                bufferedInputStream.close();\n                cipherOutputStream.close();\n            }\n            catch (Exception e)\n            {\n\n            }\n        }\n    }\n}\n", "idx": 141}
{"project": "cipher", "commit_id": "Snippet37989430_20016.java", "target": 0, "func": "Cipher cp = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\ncp.init(Cipher.ENCRYPT_MODE, key);\nbyte[] criptati = cp.doFinal(input);\nout = new String(Base64.getEncoder().encode(criptati));\n", "idx": 142}
{"project": "cipher", "commit_id": "Snippet26909103_9028.java", "target": 0, "func": "public String decryptString(String dataToDecrypt) {\n        SharedPreferences prefs= context.getSharedPreferences(\"appname\", 0);\n        if (prefs.getString(\"SECRET_KEY\",\"\") != \"\") {\n            byte[] decodedBytes = null;\n            try {\n                Cipher c = Cipher.getInstance(\"AES\");\n\n                String key = prefs.getString(\"SECRET_KEY\",\"\")\n                byte[] encodedKey = Base64.decode(key, Base64.DEFAULT);\n                SecretKey originalKey = new SecretKeySpec(encodedKey, 0,\n                        encodedKey.length, \"AES\");\n                c.init(Cipher.DECRYPT_MODE, originalKey);\n\n                byte[] dataInBytes = Base64.decode(dataToDecrypt,\n                        Base64.DEFAULT);\n\n                decodedBytes = c.doFinal(dataInBytes);\n                return new String(decodedBytes);\n            } catch (Exception e) {\n//              Log.e(TAG, \"AES decryption error\");\n                e.printStackTrace();\n                return null;\n            }\n\n        } else\n            return null;\n\n    }\n", "idx": 143}
{"project": "cipher", "commit_id": "Snippet2780107_30423.java", "target": 0, "func": "public class CryptoHelper {\nprivate static final String TAG = \"CryptoHelper\";\n//private static final String PBEWithSHA256And256BitAES = \"PBEWithSHA256And256BitAES-CBC-BC\";\n//private static final String PBEWithSHA256And256BitAES = \"PBEWithMD5And128BitAES-CBC-OpenSSL\";\nprivate static final String PBEWithSHA256And256BitAES = \"PBEWithMD5And128BitAES-CBC-OpenSSLPBEWITHSHA1AND3-KEYTRIPLEDES-CB\";\nprivate static final String randomAlgorithm = \"SHA1PRNG\";\npublic static final int SALT_LENGTH = 8;\npublic static final int SALT_GEN_ITER_COUNT = 20;\nprivate final static String HEX = \"0123456789ABCDEF\";\n\nprivate Cipher e_Cipher; \nprivate Cipher d_Cipher;\nprivate SecretKey secretKey;\nprivate byte salt[];\n\npublic CryptoHelper(String password) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeySpecException {\n    char[] cPassword = password.toCharArray();\n    PBEKeySpec pbeKeySpec = new PBEKeySpec(cPassword);\n    PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, SALT_GEN_ITER_COUNT);\n    SecretKeyFactory keyFac = SecretKeyFactory.getInstance(PBEWithSHA256And256BitAES);\n    secretKey = keyFac.generateSecret(pbeKeySpec);\n\n    SecureRandom saltGen = SecureRandom.getInstance(randomAlgorithm);\n    this.salt = new byte[SALT_LENGTH];\n    saltGen.nextBytes(this.salt);\n\n    e_Cipher = Cipher.getInstance(PBEWithSHA256And256BitAES);\n    d_Cipher = Cipher.getInstance(PBEWithSHA256And256BitAES);\n\n    e_Cipher.init(Cipher.ENCRYPT_MODE, secretKey, pbeParamSpec);\n    d_Cipher.init(Cipher.DECRYPT_MODE, secretKey, pbeParamSpec);\n}\n\npublic String encrypt(String cleartext) throws IllegalBlockSizeException, BadPaddingException {\n    byte[] encrypted = e_Cipher.doFinal(cleartext.getBytes());\n\n    return convertByteArrayToHex(encrypted);\n}\n\npublic String decrypt(String cipherString) throws IllegalBlockSizeException {\n    byte[] plainText = decrypt(convertStringtobyte(cipherString));\n\n    return(new String(plainText));\n}\n\npublic byte[] decrypt(byte[] ciphertext) throws IllegalBlockSizeException {        \n    byte[] retVal = {(byte)0x00};\n    try {\n        retVal = d_Cipher.doFinal(ciphertext);\n    } catch (BadPaddingException e) {\n        Log.e(TAG, e.toString()); \n    }\n    return retVal;\n}\n\n\npublic String convertByteArrayToHex(byte[] buf) {\n    if (buf == null)  \n        return \"\";\n    StringBuffer result = new StringBuffer(2*buf.length);  \n\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);  \n    }\n    return result.toString();\n}\n\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n}\n\nprivate static byte[] convertStringtobyte(String hexString) {\n    int len = hexString.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++) {\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n    }\n    return result;\n}\n\npublic byte[] getSalt() {\n    return salt;\n}\n\npublic SecretKey getSecretKey() {\n    return secretKey;\n}\n\npublic static SecretKey createSecretKey(char[] password) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    PBEKeySpec pbeKeySpec = new PBEKeySpec(password);\n    SecretKeyFactory keyFac = SecretKeyFactory.getInstance(PBEWithSHA256And256BitAES);\n    return keyFac.generateSecret(pbeKeySpec);\n}\n", "idx": 144}
{"project": "cipher", "commit_id": "Snippet23769240_6074.java", "target": 0, "func": "import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport android.content.Context;\n\npublic class AES extends Cripto {\n\npublic static void encrypt(Context c, String nomeArquivo)\n        throws IOException, NoSuchAlgorithmException,\n        NoSuchPaddingException, InvalidKeyException {\n\n\n\n    String key = GenerateKey(); //key 32 character randomly generated\n\n\n    String pathFilePure = new _Path().getPathFilePure();\n    String pathFileCripted = new _Path().getPathFileCripto();\n\n    FileInputStream fis = new FileInputStream(pathFilePure + \"/\"\n            + nomeArquivo);\n    FileOutputStream fos = new FileOutputStream(pathFileCripted + \"/\"\n            + nomeArquivo);\n\n\n    SecretKeySpec sks = new SecretKeySpec(key.getBytes(), \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n    int b;\n    byte[] d = new byte[8];\n\n    while ((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n\n    cos.flush();\n    cos.close();\n    fis.close();        \n}\n\npublic static void decrypt(Context c, String fileName, String key)\n        throws IOException, NoSuchAlgorithmException,\n        NoSuchPaddingException, InvalidKeyException {\n    FileInputStream fis = new FileInputStream(\n            new _Path().getPathFileDownload() + \"/\" + fileName);\n\n    FileOutputStream fos = new FileOutputStream(\n            new _Path().getPathFileDescripto() + \"/\" + fileName);\n    SecretKeySpec sks = new SecretKeySpec(key.getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n    int b;\n    byte[] d = new byte[8];\n\n    while ((b = cis.read(d)) != -1) {\n        fos.write(d, 0, b);\n    }\n\n    fos.flush();\n    fos.close();\n    cis.close();\n}\n\n}\n", "idx": 145}
{"project": "cipher", "commit_id": "Snippet21103412_3687.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.StringUtils;\n\ntry\n{\n    String passEncrypt = \"my password\";\n    byte[] saltEncrypt = \"choose a better salt\".getBytes();\n    int iterationsEncrypt = 10000;\n    SecretKeyFactory factoryKeyEncrypt = SecretKeyFactory\n            .getInstance(\"PBKDF2WithHmacSHA1\");\n    SecretKey tmp = factoryKeyEncrypt.generateSecret(new PBEKeySpec(\n            passEncrypt.toCharArray(), saltEncrypt, iterationsEncrypt,\n            128));\n    SecretKeySpec encryptKey = new SecretKeySpec(tmp.getEncoded(),\n            \"AES\");\n\n    Cipher aesCipherEncrypt = Cipher\n            .getInstance(\"AES/ECB/PKCS5Padding\");\n    aesCipherEncrypt.init(Cipher.ENCRYPT_MODE, encryptKey);\n\n    // get the bytes\n    byte[] bytes = StringUtils.getBytesUtf8(toEncodeEncryptString);\n\n    // encrypt the bytes\n    byte[] encryptBytes = aesCipherEncrypt.doFinal(bytes);\n\n    // encode 64 the encrypted bytes\n    String encoded = Base64.encodeBase64URLSafeString(encryptBytes);\n\n    System.out.println(\"e: \" + encoded);\n\n    // assume some transport happens here\n\n    // create a new string, to make sure we are not pointing to the same\n    // string as the one above\n    String encodedEncrypted = new String(encoded);\n\n    //we recreate the same salt/encrypt as if its a separate system\n    String passDecrypt = \"my password\";\n    byte[] saltDecrypt = \"choose a better salt\".getBytes();\n    int iterationsDecrypt = 10000;\n    SecretKeyFactory factoryKeyDecrypt = SecretKeyFactory\n            .getInstance(\"PBKDF2WithHmacSHA1\");\n    SecretKey tmp2 = factoryKeyDecrypt.generateSecret(new PBEKeySpec(passDecrypt\n            .toCharArray(), saltDecrypt, iterationsDecrypt, 128));\n    SecretKeySpec decryptKey = new SecretKeySpec(tmp2.getEncoded(), \"AES\");\n\n    Cipher aesCipherDecrypt = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            aesCipherDecrypt.init(Cipher.DECRYPT_MODE, decryptKey);\n\n    //basically we reverse the process we did earlier\n\n    // get the bytes from encodedEncrypted string\n    byte[] e64bytes = StringUtils.getBytesUtf8(encodedEncrypted);\n\n    // decode 64, now the bytes should be encrypted\n    byte[] eBytes = Base64.decodeBase64(e64bytes);\n\n    // decrypt the bytes\n    byte[] cipherDecode = aesCipherDecrypt.doFinal(eBytes);\n\n    // to string\n    String decoded = StringUtils.newStringUtf8(cipherDecode);\n\n    System.out.println(\"d: \" + decoded);\n\n}\ncatch (Exception e)\n{\n    e.printStackTrace();\n}\n", "idx": 146}
{"project": "cipher", "commit_id": "Snippet46453050_28566.java", "target": 0, "func": "import java.math.BigInteger;\nimport java.security.GeneralSecurityException;\nimport java.security.InvalidKeyException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.lang.StringUtils;\nimport util.HexString;\n\npublic class Util {\npublic static void main(String ...x) throws NoSuchAlgorithmException,         \nNoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException{\nString keydata=  \"5E8B6E1998F421204C6576544FE1A26B44FC775982D8CE2E\";\n\nString inputData = \"13E37073120A47D119E82545CAAF1505E3E94E5E7D8B52F3\";\n\nbyte[] keyByte = new BigInteger(keydata,16).toByteArray();\n\nSecretKeySpec key=new SecretKeySpec(keyByte, \"DESede\");    \n\nCipher c = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n\nc.init(Cipher.DECRYPT_MODE, key);\n\nbyte[] output = c.doFinal(inputData.getBytes());\n\nString hexStr = HexString.bytesToHexString(output);\nSystem.out.println(\"Decoded value : \"+hexStr);\n\n} }\n", "idx": 147}
{"project": "cipher", "commit_id": "Snippet16119028_39061.java", "target": 0, "func": "    public class Ser_enc \n    {\n    private static int packet_count;\n    private static int packet_size=1024;\n    public static void main(String args[]) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException\n    {\n    System.out.println(\"Hi iam server\");\n    ServerSocket ss=new ServerSocket(2001);\n    Socket s=ss.accept();\n\n    BufferedReader in=new BufferedReader(new InputStreamReader(s.getInputStream()));//sockin\n\n    OutputStream pw= s.getOutputStream();\n\n\n    String filename=in.readLine();\n    System.out.println(\"The file requested is \" +filename);\n\n    String loc=\"F://files//source_files//\"+filename;\n\n    File file=new File(loc);\n\n    if(file.exists())\n    System.out.println(\"File found\");\n\n    File to_b_encf =new File(\"F:/files/source_files//encryped.mp3\");\n\n    if(!to_b_encf.exists())\n    to_b_encf.createNewFile();\n\n    System.out.println(\"encrypting\");\n\n    Cipher encipher = Cipher.getInstance(\"AES\");\n\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n\n    SecretKey skey = kgen.generateKey();//initiate key\n\n    encipher.init(Cipher.ENCRYPT_MODE, skey);\n\n    FileInputStream fsrc=new FileInputStream(loc);\n\n    FileOutputStream encfile=new FileOutputStream(to_b_encf);\n\n    CipherInputStream cis = new CipherInputStream(fsrc, encipher);\n\n    int read;\n    while((read=cis.read())!=-1)\n    {\n      encfile.write(read);\n      encfile.flush();\n    }\n\n     BufferedInputStream fsrcread=new BufferedInputStream(new   FileInputStream(to_b_encf));\n\n    packet_count = (int) Math.ceil((to_b_encf.length()/packet_size));\n    System.out.println(\"The number of packets to send is :\" +packet_count);\n    for(int i=0;i<=packet_count;i++)\n    {\n    byte[] packet=new byte[packet_size];\n\n    fsrcread.read(packet, 0, packet_size);\n\n    int per=(int)((i*100)/(packet_count));\n\n    System.out.println(\"Transfer \" +per +\"% done\");\n\n    pw.write(packet);\n    pw.flush();\n\n    }\n    s.close();\n   pw.close();\n   cis.close();\n   encfile.close();\n   }\n   }\n", "idx": 148}
{"project": "cipher", "commit_id": "Snippet18350459_1403.java", "target": 0, "func": "// Encryption\npublic  String encrypt(String message) throws Exception\n{\n    String message1=Base64.encodeBytes(message.getBytes(),Base64.NO_OPTIONS);\n    String salt = SharedVariables.globalContext.getString(R.string.EncryptionKey);\n    SecretKeySpec key = new SecretKeySpec(salt.getBytes(), \"AES\");\n    Cipher c = Cipher.getInstance(\"AES\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(message1.getBytes());\n    String encrypted=Base64.encodeToString(encVal, com.dharani.android.legalplex.BusinessLayer.Base64.NO_OPTIONS);\n    return encrypted;\n}\n\n//Decryption\npublic  String decrypt(String message) throws Exception\n{\n    // String message1=Base64.encodeBytes(message.getBytes(),com.dharani.android.legalplex.BusinessLayer.Base64.NO_OPTIONS);\n    String salt = SharedVariables.globalContext.getString(R.string.EncryptionKey);\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec key = new SecretKeySpec(salt.getBytes(), \"AES\");\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = Base64.decode(message.getBytes(), Base64.NO_OPTIONS);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    String decoded=new String(com.dharani.android.legalplex.BusinessLayer.Base64.decode(decryptedValue, com.dharani.android.legalplex.BusinessLayer.Base64.NO_OPTIONS));\n    return decoded;\n} \n", "idx": 149}
{"project": "cipher", "commit_id": "Snippet26129563_8331.java", "target": 0, "func": "public final class CipherUtil {\nprivate static Logger log = Logger.getLogger(CipherUtil.class);\n\nprivate static final String SECRET_KEY = \"XXX\";\nprivate static Cipher cipher;\nprivate static SecretKeySpec secretKeySpec;\n\nstatic{\n    try {\n        cipher = Cipher.getInstance(\"AES\");\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException ex) {\n        log.error(ex);\n    }\n    byte[] key = null;\n    try {\n        key = Hex.decodeHex(SECRET_KEY.toCharArray());\n    } catch (DecoderException ex) {\n        log.error(ex);\n    }\n    secretKeySpec = new SecretKeySpec(key, \"AES\");\n}\n\nprivate CipherUtil() { }\n\npublic static String encrypt(String plainText) { \n  cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n  ... \n}\npublic static String decrypt(String encryptedText) { \n  cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n  ...\n}\n}\n", "idx": 150}
{"project": "cipher", "commit_id": "Snippet32548075_14662.java", "target": 0, "func": "public static String encrypt(String message, String key) throws Exception {\n    final MessageDigest md = MessageDigest.getInstance(\"md5\");\n    final byte[] digestOfPassword = md.digest(key.getBytes(\"utf-8\"));\n    final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n    for (int j = 0, k = 16; j < 8;) {\n        keyBytes[k++] = keyBytes[j++];\n    }\n\n    final SecretKey keyz = new SecretKeySpec(keyBytes, \"DESede\");\n    final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n    final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, keyz, iv);\n\n    final byte[] plainTextBytes = message.getBytes(\"utf-8\");\n    final byte[] cipherText = cipher.doFinal(plainTextBytes);\n    final String encodedCipherText = new   sun.misc.BASE64Encoder().encode(cipherText);\n\n    return encodedCipherText;\n}\n", "idx": 151}
{"project": "cipher", "commit_id": "Snippet4436397_31117.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\n\npublic class Main{\n    public static void main(String[] args) throws Exception {\n        byte [] plain = \"I eat fish every day\".getBytes(\"utf-8\");\n\n        byte [] keyBytes = new byte [] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00\n            };\n\n        byte [] key2Bytes = new byte [] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0  }; // actual keys replaced with dummies.\n\n        SecretKey keySpec = new SecretKeySpec(keyBytes, \"DES\");\n        SecretKey keySpec2 = new SecretKeySpec(key2Bytes, \"DES\");\n\n        IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n\n        Cipher e_cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/NoPadding\");\n\n        e_cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);\n        cipher.init(Cipher.DECRYPT_MODE, keySpec2, iv);\n\n        byte [] cipherText = e_cipher.doFinal(plain);\n        cipherText = cipher.doFinal(cipherText);\n        cipherText = e_cipher.doFinal(cipherText);\n\n        System.out.println(\"Ciphertext: \" + new sun.misc.BASE64Encoder().encode(cipherText));\n    }\n}\n", "idx": 152}
{"project": "cipher", "commit_id": "Snippet3109774_30628.java", "target": 0, "func": "public static byte[] decryptPassword(byte[] result) throws GeneralSecurityException {\n    byte constant = result[0];\n    if (constant != 5) {\n        throw new IllegalArgumentException();\n    }\n\n    byte[] secretKey = new byte[8];\n    System.arraycopy(result, 1, secretKey, 0, 8);\n\n    byte[] encryptedPassword = new byte[result.length - 9];\n    System.arraycopy(result, 9, encryptedPassword, 0, encryptedPassword.length);\n\n    byte[] iv = new byte[8];\n    for (int i = 0; i < iv.length; i++) {\n        iv[i] = 0;\n    }\n\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(secretKey, \"DES\"), new IvParameterSpec(iv));\n    return cipher.doFinal(encryptedPassword);\n}\n", "idx": 153}
{"project": "cipher", "commit_id": "Snippet12211760_36125.java", "target": 0, "func": "char[] password = new char[] { 'r', 'u', 'b', 'i', 'c', 'o', 'n' };\nbyte[] raw = encrypt(password,\"06.93308\" );\n\n    private static byte[] encrypt(char[] password, String plaintext) throws Exception {\n            byte[] bytes = new byte[password.length];\n            for (int i = 0; i < password.length; ++i) {\n                    bytes[i] = (byte) password[i];\n            }\n            SecretKeySpec skeySpec = new SecretKeySpec(bytes, \"Blowfish\");\n            Cipher cipher = Cipher.getInstance(\"Blowfish/ECB/NoPadding\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n            byte[] encrypted = cipher.doFinal(plaintext.getBytes());\n            return encrypted;\n    }\n", "idx": 154}
{"project": "cipher", "commit_id": "Snippet38407929_19316.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"blowfish\")", "idx": 155}
{"project": "cipher", "commit_id": "Snippet42246129_24220.java", "target": 0, "func": "public static InputStream decryptInputStream(File encryptedFile) throws Exception {\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\"));\n    return new CipherInputStream(new FileInputStream(encryptedFile), cipher);\n}\n", "idx": 156}
{"project": "cipher", "commit_id": "Snippet27900193_10039.java", "target": 0, "func": " class decrypt{\n public static void main(String[] args) {\n    try {\n   String FileName1 = \"D:/ashok/encrypted.txt\";\n        String FileName2 = \"D:/ashok/decrypted.txt\";\n\n        KeyGenerator KeyGen = KeyGenerator.getInstance(\"AES\");\n        KeyGen.init(128);\n\n        SecretKey SecKey = KeyGen.generateKey();\n\n        Cipher AesCipher =  Cipher.getInstance(\"AES\");\n        byte[] cipherrText = Files.readAllBytes(Paths.get(FileName1));\n\n        AesCipher.init(Cipher.DECRYPT_MODE, SecKey);\n        byte[] bytePlainText = AesCipher.doFinal(cipherrText);\n        Files.write(Paths.get(FileName2), bytePlainText);  }}\n", "idx": 157}
{"project": "cipher", "commit_id": "Snippet34259975_16260.java", "target": 0, "func": "       try {\n            Utils.logDebug(TAG, \"Decrypting!\");\n            File encfile = new File(getFilesDir() + \"/encrypted.axx\");\n            int read;\n            if (!encfile.exists())\n                encfile.createNewFile();\n            File decfile = new File(getFilesDir() + \"/decrypted.mp4\");\n            if (!decfile.exists())\n                decfile.createNewFile();\n            FileInputStream encfis = new FileInputStream(encfile);\n            FileOutputStream decfos = new FileOutputStream(decfile);\n            Cipher decipher = Cipher.getInstance(\"AES\");\n            byte key[] = Base64.decode(\"CWTr 45Qg eHhy n23d YPC3 DjRi IxUe bt77 TVzQ NtSh HEc=\", Base64.DEFAULT);\n            SecretKey skey = new SecretKeySpec(key, 0, key.length, \"AES\");\n            decipher.init(Cipher.DECRYPT_MODE, skey);\n            CipherOutputStream cos = new CipherOutputStream(decfos, decipher);\n            while ((read = encfis.read()) != -1) {\n                cos.write(read);\n                cos.flush();\n            }\n            cos.close();\n            Utils.logDebug(TAG, \"Done decrypting!\");\n        } catch (Exception e) {\n            Utils.logError(TAG, \"TESTING error: \" + e.getMessage());\n        }\n", "idx": 158}
{"project": "cipher", "commit_id": "Snippet20531329_3121.java", "target": 0, "func": "private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n", "idx": 159}
{"project": "cipher", "commit_id": "Snippet11893370_35875.java", "target": 0, "func": "SecretKey key = loadKey(); // Deserialize your SecretKey object\ntry {\n            Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            FileInputStream fis = new FileInputStream(\"Your file here\");\n            BufferedInputStream bis = new BufferedInputStream(fis);\n            CipherInputStream cis = new CipherInputStream(bis, cipher);\n", "idx": 160}
{"project": "cipher", "commit_id": "Snippet36663747_18520.java", "target": 0, "func": "static void encrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    // Here you read the cleartext.\n    FileInputStream fis = new FileInputStream(\"data/cleartext\");\n    // This stream write the encrypted text. This stream will be wrapped by another stream.\n    FileOutputStream fos = new FileOutputStream(\"data/encrypted\");\n\n    // Length is 16 byte\n    // Careful when taking user input!!! http://stackoverflow.com/a/3452620/1188357\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    // Create cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    // Wrap the output stream\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    // Write bytes\n    int b;\n    byte[] d = new byte[8];\n    while((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    cos.flush();\n    cos.close();\n    fis.close();\n}\n\n\n\nstatic void decrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    FileInputStream fis = new FileInputStream(\"data/encrypted\");\n\n    FileOutputStream fos = new FileOutputStream(\"data/decrypted\");\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while((b = cis.read(d)) != -1) {\n        fos.write(d, 0, b);\n    }\n    fos.flush();\n    fos.close();\n    cis.close();\n}\n\n\n//put the last part in the method\nstatic void generate() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException{\n    FileInputStream fis;\n    FileOutputStream fos;\n    CipherOutputStream cos;\n    // File you are reading from\n    fis = new FileInputStream(\"/tmp/a.txt\");\n    // File output\n    fos = new FileOutputStream(\"/tmp/b.txt\");\n\n    // Here the file is encrypted. The cipher1 has to be created.\n    // Key Length should be 128, 192 or 256 bit => i.e. 16 byte\n    SecretKeySpec skeySpec = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\"); \n    Cipher cipher1 = Cipher.getInstance(\"AES\");  \n    cipher1.init(Cipher.ENCRYPT_MODE, skeySpec);\n    cos = new CipherOutputStream(fos, cipher1);\n    // Here you read from the file in fis and write to cos.\n    byte[] b = new byte[8];\n    int i = fis.read(b);\n    while (i != -1) {\n        cos.write(b, 0, i);\n        i = fis.read(b);\n    }\n    cos.flush();\n}\n", "idx": 161}
{"project": "cipher", "commit_id": "Snippet34138325_16164.java", "target": 0, "func": "  private static final byte[] __RawKey = {\n   (byte) 0x30, (byte) 0x31, (byte) 0x32,\n   (byte) 0x33, (byte) 0x34, (byte) 0x35,\n   (byte) 0x36, (byte) 0x37\n    };\n\n   private String decrypt(String data) throws Exception {\n   try {\n     Key key = new SecretKeySpec(__RawKey, 0, __RawKey.length, \"DES\");\n     byte[] _encrypted = data.getBytes();\n     String sKey = new String(__RawKey);\n     System.out.println(sKey);\n     System.out.println(sKey.length());\n\n     Cipher cipher = Cipher.getInstance(\"DES/ECB/NoPadding\", \"SunJCE\");                 \n     cipher.init(Cipher.DECRYPT_MODE, key);\n     byte[] _decrypted = cipher.doFinal(_encrypted);\n     System.out.println(\"Decrypted: \" + new String(_decrypted));\n     return new String(_decrypted);\n     }\n     catch (Exception e) {\n     System.out.println(e);\n     return null;\n     }\n     }  \n", "idx": 162}
{"project": "cipher", "commit_id": "Snippet24299298_6585.java", "target": 0, "func": "try\n{\n    if (key == null)\n    {\n        key = SecretKeyFactory.getInstance(\"DESede\").generateSecret(new DESedeKeySpec(keyBytes));\n    }\n\n    Cipher cipher = Cipher.getInstance(\"DESede\");\n    cipher.init(2, key);\n}\n", "idx": 163}
{"project": "cipher", "commit_id": "Snippet45130171_27270.java", "target": 0, "func": "public class frame1 {\n\n    String filepath;\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException {\n        JFrame.setDefaultLookAndFeelDecorated(true);\n        JDialog.setDefaultLookAndFeelDecorated(true);\n        JFrame frame = new JFrame(\"Test\");\n        frame.getContentPane().setLayout(new FlowLayout());\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JButton button = new JButton(\"Encrypt\");\n        button.addActionListener(new ActionListener() {\n          public void actionPerformed(ActionEvent ae) {\n            JFileChooser fileChooser = new JFileChooser();\n            FileNameExtensionFilter filter = new FileNameExtensionFilter(\"TEXT FILES\",\"txt\", \"text\");\n            fileChooser.setFileFilter(filter);\n            int returnValue = fileChooser.showOpenDialog(null);\n            if (returnValue == JFileChooser.APPROVE_OPTION) {\n                File selectedFile = fileChooser.getSelectedFile();\n                  System.out.println(selectedFile.getAbsolutePath());\n                  String filepath = selectedFile.getAbsolutePath(); \n\n            }\n        frame.getContentPane().add(button);\n        frame.pack();\n        frame.setVisible(true);\n\n      public void encrypt() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException {\n        KeyGenerator keygenerator = KeyGenerator.getInstance(\"AES\");\n        SecretKey myDesKey = keygenerator.generateKey();\n        Cipher desalgCipher;\n        desalgCipher = Cipher.getInstance(\"AES\");\n        desalgCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n\n        Path path = Paths.get(filepath); \n        try(InputStream is = Files.newInputStream(path);       \n        CipherInputStream cipherIS = new CipherInputStream(is, desalgCipher);  \n        BufferedReader reader = new BufferedReader(new InputStreamReader(cipherIS));){  \n            String line;\n            while((line = reader.readLine()) != null){\n                System.out.println(line);            \n            }\n        }\n       }         \n}\n", "idx": 164}
{"project": "cipher", "commit_id": "Snippet39871221_21786.java", "target": 0, "func": "String username = \"username\";\nString password = \"password\";\nString id = \"123456\"; \n\nString toBeHashed = username + password + id;\nMessageDigest sha256 = MessageDigest.getInstance(\"SHA-256\");\nbyte[] hashed = sha256.digest(toBeHashed.getBytes(\"UTF-8\"));\n\nString hashString = \"=\" + Base64.encodeBase64String(hashed);\nSystem.out.println(hashString);\n\nString salt = \"salt\";\nString anotherId = \"123\";\nbyte[] forAuth = (salt + orgId + hashString).getBytes(\"UTF-8\");\n\n//Mocked \"secret key\". Original key string is of size 16 bytes.\nbyte[] secKey = \"secret key\".getBytes(\"UTF-8\");\n\nSecretKey secretKey = new SecretKeySpec(secKey, 0, secKey.length, \"AES\");\n\nCipher aesCipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\naesCipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\nbyte[] authorizationKey = aesCipher.doFinal(forAuth);\n\nSystem.out.println(\"-------------------\");\nSystem.out.println(\"-------------------\");\nSystem.out.println(Base64.encodeBase64String(authorizationKey));\n", "idx": 165}
{"project": "cipher", "commit_id": "Snippet16192140_39147.java", "target": 0, "func": "Cipher aes = Cipher.getInstance(\"AES\");\naes.init(Cipher.ENCRYPT_MODE, generateKey());\nbyte[] ciphertext = aes.doFinal(rawPassword.getBytes());\n", "idx": 166}
{"project": "cipher", "commit_id": "Snippet33801033_15855.java", "target": 0, "func": "private String encryptAES(String text) throws Exception\n{\n    String key = \"something-random\";\n    SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(text.getBytes());\n\n    String encrypttext = Base64.encodeToString(encrypted, Base64.URL_SAFE|Base64.NO_WRAP);\n\n    Log.v(\"ENCRYPTED\", encrypttext); // 6sAfStQJ2zNUJLdRgXZsTA==\n\n    return encrypttext;\n}\n", "idx": 167}
{"project": "cipher", "commit_id": "Snippet38217321_20187.java", "target": 0, "func": "public static String decryptDataWithKey(String keyString, String base64String) throws Exception {\n\n        //Algorithm\n        String AES_ALGORITHM = \"AES\"; \n\n        //Key from keystring\n        MessageDigest digester = MessageDigest.getInstance(\"MD5\");\n        digester.update(keyString.getBytes());\n        byte[] password = digester.digest();\n        Key key =  new SecretKeySpec(password, AES_ALGORITHM); // what is the equivalent of this line in javascript ?\n\n        //Create decipher\n        Cipher c = Cipher.getInstance(AES_ALGORITHM);\n        c.init(Cipher.DECRYPT_MODE, key);\n\n        //Get bytes of enc data\n        byte[] decodedValue = new BASE64Decoder().decodeBuffer(base64String);\n\n        // Do decrypt\n        byte[] decValue = c.doFinal(decodedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n", "idx": 168}
{"project": "cipher", "commit_id": "Snippet32804748_14897.java", "target": 0, "func": "public class encrypt\n{\n    public static void main(String[] args) throws Exception\n    {\n        byte[] keyBytes = \"java\".getBytes();\n        javax.crypto.spec.SecretKeySpec secretKeySpec = new javax.crypto.spec.SecretKeySpec(keyBytes, \"Blowfish\");\n        javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(\"Blowfish\");\n        cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, secretKeySpec);\n\n        java.io.BufferedInputStream bufferedInputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(\"tmp.class\"));\n        javax.crypto.CipherOutputStream cipherOutputStream = new javax.crypto.CipherOutputStream(new java.io.BufferedOutputStream(new java.io.FileOutputStream(\"data.dll\")), cipher);\n        int i;\n        do\n        {\n            i = bufferedInputStream.read();\n            if (i != -1)\n                cipherOutputStream.write(i);\n        }while (i != -1);\n        bufferedInputStream.close();\n        cipherOutputStream.close();\n\n        bufferedInputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(\"tmp$del.class\"));\n        cipherOutputStream = new javax.crypto.CipherOutputStream(new java.io.BufferedOutputStream(new java.io.FileOutputStream(\"data_2.dll\")), cipher);\n        do\n        {\n            i = bufferedInputStream.read();\n            if (i != -1)\n                cipherOutputStream.write(i);\n        }while (i != -1);\n        bufferedInputStream.close();\n        cipherOutputStream.close();\n\n        System.exit(0);\n    }\n}\n", "idx": 169}
{"project": "cipher", "commit_id": "Snippet28875731_10981.java", "target": 0, "func": "public class Encryption {\n\npublic void doStuff() {\n\n    String plaintext = \"abc\";\n\n    SecretKey k1 = generateDESkey();\n    SecretKey k2 = generateDESkey();\n\n\n    String firstEncryption = desEncryption(plaintext, k1);\n    String decryption = desDecryption(firstEncryption, k2);\n    String secondEncryption = desEncryption(decryption, k1);\n\n    System.out.println(firstEncryption);\n    System.out.println(decryption);\n    System.out.println(secondEncryption);\n}\n\npublic static SecretKey generateDESkey() {\n    KeyGenerator keyGen = null;\n    try {\n        keyGen = KeyGenerator.getInstance(\"DESede\");\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    }\n    try {\n        assert keyGen != null;\n        keyGen.init(112); // key length 56\n        return keyGen.generateKey();\n    } catch (NullPointerException ex){\n        return null;\n    }\n}\n\n\npublic static String desEncryption(String strToEncrypt, SecretKey desKey) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, desKey);\n        return Base64.encode(cipher.doFinal(strToEncrypt.getBytes()));\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException |\n            IllegalBlockSizeException | BadPaddingException |\n            InvalidKeyException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    }\n    return null;\n}\n\n\npublic static String desDecryption(String strToDecrypt, SecretKey desKey) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, desKey);\n        return new String(cipher.doFinal(Base64.decode(strToDecrypt)));\n\n    } catch (NoSuchAlgorithmException |  BadPaddingException | IllegalBlockSizeException\n            | InvalidKeyException | NoSuchPaddingException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    }\n    return null;\n}\n\n}\n", "idx": 170}
{"project": "cipher", "commit_id": "Snippet9846283_34287.java", "target": 0, "func": "private static String decrypt(String inputStr, String keyStr, String ivStr) throws Exception {\n\n    IvParameterSpec iv = new IvParameterSpec(ivStr.getBytes());\n    SecretKeySpec key = new SecretKeySpec(keyStr.getBytes(), \"DESede\");\n    inputStr = hexToString(inputStr, 2);\n\n    Cipher cipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n    cipher.init(Cipher.DECRYPT_MODE, key, iv);\n    byte[] decrypted = cipher.doFinal(inputStr.getBytes());\n\n    return new String(decrypted);\n}\n\nprivate static String hexToString(String input, int groupLength) {\n    StringBuilder sb = new StringBuilder(input.length() / groupLength);\n    for (int i = 0; i < input.length() - groupLength + 1; i += groupLength) {\n        String hex = input.substring(i, i + groupLength);\n        sb.append((char) Integer.parseInt(hex, 16));\n    }\n    return sb.toString();\n}\n\npublic static void main(String[] args) throws Exception {\n    String decryptSignature = decrypt(\"c37551bb77f741d0bcdc16497b4f97b1\", \"123456781234567812345678\", \"12345678\");\n    System.out.println(decryptSignature);\n}\n", "idx": 171}
{"project": "cipher", "commit_id": "Snippet5144978_31476.java", "target": 0, "func": "\nimport java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.io.*;\n\n/**\n * This program generates a AES key, retrieves its raw bytes, and\n * then reinstantiates a AES key from the key bytes.\n * The reinstantiated key is used to initialize a AES cipher for\n * encryption and decryption.\n */\npublic class AES\n{\n\n    /**\n     * Turns array of bytes into string\n     *\n     * @param buf   Array of bytes to convert to hex string\n     * @return  Generated hex string\n     */\n    public static String asHex(byte buf[])\n    {\n        StringBuilder strbuf = new StringBuilder(buf.length * 2);\n        int i;\n\n        for (i = 0; i < buf.length; i++)\n        {\n            if (((int) buf[i] & 0xff) < 0x10)\n            {\n                strbuf.append(\"0\");\n            }\n\n            strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n        }\n\n        return strbuf.toString();\n    }\n\n    public static void main(String[] args) throws Exception\n    {\n\n        String message = \"This is just an example\";\n\n        // Get the KeyGenerator\n\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        kgen.init(128); // 192 and 256 bits may not be available\n\n\n        // Generate the secret key specs.\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n\n        // Instantiate the cipher\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encrypted = cipher.doFinal(message.getBytes());\n        System.out.println(\"encrypted string: \" + asHex(encrypted));\n\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] original = cipher.doFinal(encrypted);\n        String originalString = new String(original);\n        System.out.println(\"Original string: \" + originalString + \" \" + asHex(original));\n    }\n}\n\n", "idx": 172}
{"project": "cipher", "commit_id": "Snippet36526626_18358.java", "target": 0, "func": "    byte j[] = key.getBytes();\n    SecretKeySpec kye = new SecretKeySpec(j, \"AES\");\n    Cipher enc = Cipher.getInstance(\"AES\");\n    enc.init(Cipher.ENCRYPT_MODE, kye);\n    FileOutputStream output = new FileOutputStream(\"xyz.mkv\");\n    CipherOutputStream cos = new CipherOutputStream(output, enc);\n    byte[] buf = new byte[104857600];\n    int read;\n    while ((read = file.read(buf)) != -1) {\n        cos.write(buf, 0, read);\n    }\n    output.flush();\n    buf = null;\n    file.close();\n    cos.close();\n", "idx": 173}
{"project": "cipher", "commit_id": "Snippet6845419_32401.java", "target": 0, "func": "package com.example.aes;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport android.app.Activity;\nimport android.content.res.AssetManager;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.widget.TextView;\n\npublic class PBEencryptdecryptActivity extends Activity {\n    private int IO_BUFFER_SIZE;\n\n    /** Called when the activity is first created. */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n\n        KeyGenerator keygen;\n        try {\n            keygen = KeyGenerator.getInstance(\"AES\");\n            SecretKey aesKey = keygen.generateKey();\n            Cipher aesCipher,aesCipherDec;\n\n            AssetManager am = this.getAssets();\n            InputStream is = am.open(\"007FRAMESUPERIOR.jpg\"); // get the encrypted image from assets folder\n            Log.v(\"Size\",\"Size of inputstream \"+is.available());\n\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();  \n            byte[] b = new byte[IO_BUFFER_SIZE];  \n\n            int read;  \n            while ((read = is.read(b)) != -1) {  //convert inputstream to bytearrayoutputstream\n                baos.write(b, 0, read);\n            }\n            Log.v(\"Size\",\"Size of b \"+b.length);\n\n            aesCipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");     // Create the cipher            \n            aesCipher.init(Cipher.ENCRYPT_MODE, aesKey);    // Initialize the cipher for encryption                         \n            byte[] ciphertext = aesCipher.doFinal(b);   // Encrypt the cleartext\n            Log.v(\"Size\",\"Size of image encrypted \"+ciphertext.length);\n\n\n            aesCipherDec =  Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            aesCipherDec.init(Cipher.DECRYPT_MODE, aesKey); // Initialize the same cipher for decryption                        \n            byte[] cleartext1 = aesCipher.doFinal(ciphertext);  // Decrypt the ciphertext                   \n\n            //Bitmap bitmap = BitmapFactory.decodeByteArray(cleartext1 , 0,  cleartext1.length);    //decoding bytearrayoutputstream to bitmap\n            Log.v(\"Size\",\"Size of image decrypted \"+cleartext1.length);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            Log.v(\"Error\", \"Error Occured \"+e);\n        }\n\n    }\n}\n", "idx": 174}
{"project": "cipher", "commit_id": "Snippet2569623_30332.java", "target": 0, "func": "Cipher.getInstance(\"blowfish\"); \n\nI get a \"java.security.NoSuchAlgorithmException\"\n", "idx": 175}
{"project": "cipher", "commit_id": "Snippet20290310_2936.java", "target": 0, "func": "    String key = \"987654321\";\n    SecretKeySpec keyspec = new SecretKeySpec(getHash(key), \"AES\");\n    Cipher cipherDecode = Cipher.getInstance(\"AES/ECB/ZeroBytePadding\");\n    byte[] text = Base64.decode(\n            \"wdRe00YxTFGQ65QmWukPxFLlZRSPqmRY8tHufikBHW0=\",\n            Base64.DEFAULT);\n    cipherDecode.init(Cipher.DECRYPT_MODE, keyspec);\n\n    final byte[] decrypted = cipherDecode.doFinal(text);\n\n    String decyptedText = new String(decrypted);\n", "idx": 176}
{"project": "cipher", "commit_id": "Snippet16336017_39294.java", "target": 0, "func": "    import java.security.MessageDigest; \nimport java.security.spec.KeySpec; \nimport java.util.Arrays; \n\nimport javax.crypto.Cipher; \nimport javax.crypto.SecretKey; \nimport javax.crypto.SecretKeyFactory; \nimport javax.crypto.spec.DESedeKeySpec; \nimport javax.crypto.spec.IvParameterSpec; \n\nimport org.apache.commons.codec.binary.Base64; \n\npublic class Encrypter { \n  private KeySpec keySpec; \n  private SecretKey key; \n  private IvParameterSpec iv; \n\n  public Encrypter(String keyString, String ivString) { \n    try { \n      final MessageDigest md = MessageDigest.getInstance(\"md5\"); \n      final byte[] digestOfPassword = md.digest(Base64.decodeBase64(keyString.getBytes(\"utf-8\"))); \n      final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24); \n      for (int j = 0, k = 16; j < 8;) { \n    keyBytes[k++] = keyBytes[j++]; \n      } \n\n      keySpec = new DESedeKeySpec(keyBytes); \n\n      key = SecretKeyFactory.getInstance(\"DESede\").generateSecret(keySpec); \n\n      iv = new IvParameterSpec(ivString.getBytes()); \n    } catch(Exception e) { \n      e.printStackTrace(); \n    } \n  } \n\n  public String encrypt(String value) { \n    try { \n      Cipher ecipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\",\"SunJCE\"); \n      ecipher.init(Cipher.ENCRYPT_MODE, key, iv); \n\n      if(value==null) \n    return null; \n\n      // Encode the string into bytes using utf-8 \n      byte[] utf8 = value.getBytes(\"UTF8\"); \n\n      // Encrypt \n      byte[] enc = ecipher.doFinal(utf8); \n\n      // Encode bytes to base64 to get a string \n      return new String(Base64.encodeBase64(enc),\"UTF-8\"); \n    } catch (Exception e) { \n      e.printStackTrace(); \n    } \n    return null; \n  } \n\n  public String decrypt(String value) { \n    try { \n      Cipher dcipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\",\"SunJCE\"); \n      dcipher.init(Cipher.DECRYPT_MODE, key, iv); \n\n      if(value==null) \n    return null; \n\n      // Decode base64 to get bytes \n      byte[] dec = Base64.decodeBase64(value.getBytes()); \n\n      // Decrypt \n      byte[] utf8 = dcipher.doFinal(dec); \n\n      // Decode using utf-8 \n      return new String(utf8, \"UTF8\"); \n    } catch (Exception e) { \n      e.printStackTrace(); \n    } \n    return null; \n  } \n} \n", "idx": 177}
{"project": "cipher", "commit_id": "Snippet33006791_15035.java", "target": 0, "func": "public static byte[] decodeFile(byte[] key, byte[] fileData)\n{\n    byte[] decrypted=new byte[0];\n    try {\n        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n         decrypted= cipher.doFinal(fileData);\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    }\n\n    return decrypted;\n}\n", "idx": 178}
{"project": "cipher", "commit_id": "Snippet13973662_37403.java", "target": 0, "func": "SecretKeyFactory kf = SecretKeyFactory.getInstance(\"DES\");\nString key = \"abcdefg\";\nDESKeySpec keySpec = new DESKeySpec(key.getBytes());\nSecretKey _key = kf.generateSecret(keySpec);\nString xform = \"DES\";\nCipher cipher = Cipher.getInstance(xform);\nbyte[] IV = { 11, 22, 33, 44, 55, 66, 77, 88, 99, 18, 69, 17, 72, 94, 18, 30 };\nIvParameterSpec ips = new IvParameterSpec(IV);\ncipher.init(Cipher.DECRYPT_MODE, _key, ips);\nString cipherText;\n//cipher text is read from file.\nbyte[] plainText = cipher.doFinal(cipherText.getBytes());\n", "idx": 179}
{"project": "cipher", "commit_id": "Snippet7571171_32790.java", "target": 0, "func": "// Decrypts the given ciphertext with the given password\npublic String decrypt(String ciphertext, String password)\n    throws FailedCryptOperationException {\n    String plaintext = \"\";\n    byte[] ciphertext_bytes = decode(ciphertext);\n\n    try {\n        byte[] salt = decode(SALT_BASE64);\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\"); //$NON-NLS-1$\n        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 1024, 256);\n        SecretKey tmp = factory.generateSecret(spec);\n        SecretKey secret = new SecretKeySpec(tmp.getEncoded(), \"AES\"); \n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secret);\n        plaintext = new String(cipher.doFinal(ciphertext_bytes), TEXT_FORMAT);\n    } catch (Exception e) {\n        throw new FailedCryptOperationException(e);\n    }\n\n    return plaintext;\n}\n\n// Does Base64 decoding\npublic byte[] decode(String text) throws FailedCryptOperationException {\n    byte[] res;\n    BASE64Decoder       decoder         = new BASE64Decoder();\n    try {\n        res = decoder.decodeBuffer(text);\n    } catch (IOException e) {\n        throw new FailedCryptOperationException(e);\n    }\n    return res;\n}\n", "idx": 180}
{"project": "cipher", "commit_id": "Snippet29415279_11433.java", "target": 0, "func": "KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\nSecretKey secretKey = keyGen.generateKey();\nCipher desCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\ndesCipher.init(Cipher.ENCRYPT_MODE,secretKey);\n/* Encryption */\nstrDataToEncrypt = \"Hello World of Encryption using DES \";\nbyte[] byteDataToEncrypt = strDataToEncrypt.getBytes();\nbyte[] byteCipherText = desCipher.doFinal(byteDataToEncrypt); \nstrCipherText = new BASE64Encoder().encode(byteCipherText);\nSystem.out.println(\"Cipher Text generated using DES with CBC mode and PKCS5 Padding is \" +strCipherText);\n/* Decryption */\ndesCipher.init(Cipher.DECRYPT_MODE,secretKey,desCipher.getParameters());\n\nbyte[] byteDecryptedText = desCipher.doFinal(byteCipherText);\nstrDecryptedText = new String(byteDecryptedText);\nSystem.out.println(\" Decrypted Text message is \" +strDecryptedText);\n", "idx": 181}
{"project": "cipher", "commit_id": "Snippet27945391_10101.java", "target": 0, "func": "// generate a SHA-1 hash from your key to get 128 bit key\nbyte[] key = (SALT2 + \"yoursecret key\").getBytes(\"UTF-8\");\nMessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\nkey = sha.digest(key);\nkey = Arrays.copyOf(key, 16); // use only first 128 bit\n\nString key = new String(org.apache.commons.codec.binary.Hex.encodeHex(raw));\nbyte[] keyByteArray = org.apache.commons.codec.binary.Hex.decodeHex(key.toCharArray());\nSecretKeySpec skeySpec = new SecretKeySpec(keyByteArray, \"AES\");\n\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec);\nbyte[] encrypted = cipher.doFinal(\"Username / Password or some secret text\".getBytes());\nString encryptedMessage = new String(org.apache.commons.codec.binary.Hex.encodeHex(encrypted));\nSystem.out.printf(\"The encrypted message: %s\\n\", encryptedMessage);\n", "idx": 182}
{"project": "cipher", "commit_id": "Snippet21774693_4185.java", "target": 0, "func": "String m_sSendStringEncrypt = \"\";\ntry{\n    String m_sReqSendString = \"StringToBeEncrypted\";\n    String m_sSalt = \"test\"; // not to change\n    m_sSendStringEncrypt = encrypt(m_sReqSendString, m_sSalt);\n}catch(Exception e){\n    System.out.println(\"Exception:: \" + e);\n}\n\n\nprivate static final String ALGORITHM = \"AES\";\nprivate static final int ITERATIONS = 2;\nprivate static final byte[] keyValue = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,    0x06, 0x07, 0x08, 0x09,0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f }; // not to change\n\npublic static String encrypt(String value, String salt) throws Exception {\n     Key key = generateKey();\n     Cipher c = Cipher.getInstance(ALGORITHM);  \n     c.init(Cipher.ENCRYPT_MODE, key);\n\n     String valueToEnc = null;\n     String eValue = value;\n     for (int i = 0; i < ITERATIONS; i++) {\n          valueToEnc = salt + eValue;\n          byte[] encValue = c.doFinal(valueToEnc.getBytes());\n          eValue = new BASE64Encoder().encode(encValue);\n     }\n     return eValue;\n}\nprivate static Key generateKey() throws Exception {\n     Key key = new SecretKeySpec(keyValue, ALGORITHM);\n     return key;\n}\n", "idx": 183}
{"project": "cipher", "commit_id": "Snippet41808937_23793.java", "target": 0, "func": "import sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.io.*;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n\n    //openssl enc -nosalt -aes-128-ecb\n    // -in <input file>\n    // -out <output file>\n    // -K <16 bytes in hex, for example : \"abc\" can be hashed in SHA-1, the first 16 bytes in hex is a9993e364706816aba3e25717850c26c>\n    private final static String TRANSFORMATION = \"AES\"; // use aes-128-ecb in openssl\n\npublic static byte[] encrypt(String passcode, byte[] data) throws CryptographicException {\n        try {\n            Cipher cipher = Cipher.getInstance(TRANSFORMATION);\n            cipher.init(Cipher.ENCRYPT_MODE, genKeySpec(passcode));\n            return cipher.doFinal(data);\n        } catch (Exception ex) {\n            throw new CryptographicException(\"Error encrypting\", ex);\n        }\n    }\n\n\n    public static String encryptWithBase64(String passcode, byte[] data) throws CryptographicException {\n        return new BASE64Encoder().encode(encrypt(passcode, data));\n    }\n\n    public static byte[] decrypt(String passcode, byte[] data) throws CryptographicException {\n        try {\n            Cipher dcipher = Cipher.getInstance(TRANSFORMATION);\n            dcipher.init(Cipher.DECRYPT_MODE, genKeySpec(passcode));\n            return dcipher.doFinal(data);\n        } catch (Exception e) {\n            throw new CryptographicException(\"Error decrypting\", e);\n        }\n    }\n\n\n    public static byte[] decryptWithBase64(String passcode, String encrptedStr) throws CryptographicException {\n        try {\n            return decrypt(passcode, new BASE64Decoder().decodeBuffer(encrptedStr));\n        } catch (Exception e) {\n            throw new CryptographicException(\"Error decrypting\", e);\n        }\n    }\n\n    public static SecretKeySpec genKeySpec(String passcode) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n        byte[] key = passcode.getBytes(\"UTF-8\");\n        MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n        key = sha.digest(key);\n        key = Arrays.copyOf(key, 16); // use only first 128 bit\n        return new SecretKeySpec(key, TRANSFORMATION);\n    }\n", "idx": 184}
{"project": "cipher", "commit_id": "Snippet38135573_20110.java", "target": 0, "func": "SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\ncipher.init(1, secretKeySpec);\nbyte[] aBytes = cipher.doFinal(inputString.getBytes());\nBASE64Encoder encoder = new BASE64Encoder();\nString base64 = encoder.encode(aBytes).toString();\nbase64 = URLEncoder.encode(base64, \"UTF-8\");\nreturn base64;\n", "idx": 185}
{"project": "cipher", "commit_id": "Snippet3443457_30737.java", "target": 0, "func": "public static byte[] encryptTripleDES(String message) throws Exception {\n    final MessageDigest md = MessageDigest.getInstance(\"md5\");\n    final byte[] digestOfPassword = md.digest(\"--KEY--\".getBytes(\"utf-8\"));\n    final SecretKey key = new SecretKeySpec(digestOfPassword, \"DESede\");\n    final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n    final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n    return cipher.doFinal(message.getBytes(\"utf-8\"));\n}\n", "idx": 186}
{"project": "cipher", "commit_id": "Snippet10228138_34572.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintWriter;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Date;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class EncryptedLogger {\n\nprivate static Date lastLogTime = null;\nprivate static EncryptedLogger instance = null;\nprivate static FileOutputStream fos = null;\nprivate static CipherOutputStream cos = null;\nprivate static PrintWriter writer = null;\nprivate Cipher cipher;\nbyte[] Key ={(byte) 0x12,(byte) 0x34,0x55,(byte) 0x66,0x67,(byte)0x88,(byte)0x90,0x12,(byte) 0x23,0x45,0x67,(byte)0x89,0x12,0x33,(byte) 0x55,0x74};\n\npublic static EncryptedLogger getInstance(){\n    if (instance==null) {\n        instance = new EncryptedLogger();\n    }\n    return instance;\n}\n\nprivate EncryptedLogger(){\n\n    class SQLShutdownHook extends Thread{\n        @Override\n        public void run() {\n            EncryptedLogger.close();\n            super.run();\n        }\n    }\n\n    SecretKeySpec sks = new SecretKeySpec(Key,\"AES\");\n    try {\n        cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE,sks);\n\n        fos = new FileOutputStream(new File(\"log.txt\"),true);\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    }\n    cos = new CipherOutputStream(fos, cipher);\n    writer = new PrintWriter(cos);\n\n    SQLShutdownHook hook = new SQLShutdownHook();\n    Runtime.getRuntime().addShutdownHook(hook);\n}\n\npublic synchronized void logSQL(String s){\n    if ((lastLogTime==null)||((new Date().getTime() -lastLogTime.getTime())>1000)){\n        lastLogTime = new Date();\n        writer.printf(\"-- %1$tm-%1$te-%1$tY %1$tH-%1$tM-%1$tS\\n%2$s\\n\",new Date(),s);   \n    }\n    else{\n        writer.println(s);\n    }\n}\n\npublic synchronized void logComment(String s){\n    writer.printf(\"-- %1$tm-%1$te-%1$tY %1$tH-%1$tM-%1$tS: %2$s\\n\",new Date(),s);\n}\n\npublic static void close(){\n    writer.flush();\n    writer.close();\n}\n\npublic static void main(String[] args) throws InterruptedException {\n    EncryptedLogger.getInstance().logSQL(\"1\");\n    EncryptedLogger.getInstance().logSQL(\"22\");\n    EncryptedLogger.getInstance().logSQL(\"33333\");\n    EncryptedLogger.getInstance().logSQL(\"4900\");\n    EncryptedLogger.getInstance().logSQL(\"5\");\n    EncryptedLogger.getInstance().logSQL(\"66666\");\n    EncryptedLogger.getInstance().logSQL(\"Some test logging statement\");\n    EncryptedLogger.getInstance().logSQL(\"AAAAAAAAAAAAAAAAAAAAAAAAAA\");\n    EncryptedLogger.getInstance().logComment(\"here is test commentary\");\n}\n\n}\n", "idx": 187}
{"project": "cipher", "commit_id": "Snippet24044986_6338.java", "target": 0, "func": "private static final String KEY_FACTORY_ALGORITHM = \"PBEWITHSHAAND128BITAES-CBC-BC\";\nprivate static final String KEY_ALGORITHM = \"AES\";\nprivate static final String CIPHER_PROVIDER = \"AES\";\n\npublic Crypto(String password, byte[] salt) {\n\n    if (TextUtils.isEmpty(password)) {\n        throw new IllegalArgumentException(\n                \"password cannot be null or empty.\");\n    }\n\n    PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, 20,\n            128);\n\n    SecretKeyFactory factory;\n    try {\n        factory = SecretKeyFactory.getInstance(KEY_FACTORY_ALGORITHM);\n        PBEKey key = (PBEKey) factory.generateSecret(keySpec);\n\n        this.createKeyAndCipher(key.getEncoded());\n    } catch (Exception e) {\n        Log.e(this.getClass().getName(), Log.getStackTraceString(e));\n        throw new RuntimeException(e);\n    }\n}\n\nprivate void createKeyAndCipher(byte[] keyData)\n        throws NoSuchAlgorithmException, NoSuchPaddingException {\n    _secretKey = new SecretKeySpec(keyData, KEY_ALGORITHM);\n    _cipher = Cipher.getInstance(CIPHER_PROVIDER);\n}\n", "idx": 188}
{"project": "cipher", "commit_id": "Snippet39565618_21483.java", "target": 0, "func": "import java.security.Key;\nimport java.security.MessageDigest;\nimport java.util.Base64;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class H {\n    public static void main(String args[]){\n        try{\n        String strDefaultKey = \"QabC-+50\";\n        Key key = new SecretKeySpec(strDefaultKey.getBytes(\"UTF-8\"), \"DES\");\n        Cipher encryptCipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        encryptCipher.init(Cipher.ENCRYPT_MODE, key);\n        String seed = \"2016-09-19 05:11\";\n        byte[] a = encryptCipher.doFinal(seed.getBytes());\n        byte[] encodeUrl = Base64.getEncoder().encode(a);\n//      byte[] encodeUrl = Base64.encodeBase64(sEncription.encrypt(m));\n        String finalUrl = new String(encodeUrl);\n        String finalResult = finalUrl.substring(2, 8) + finalUrl.substring(10, 13);\n        System.out.println(finalUrl);\n        System.out.println(finalResult);\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 189}
{"project": "cipher", "commit_id": "Snippet7302986_32675.java", "target": 0, "func": "import java.awt.event.*;\nimport java.awt.*;\nimport javax.swing.*;\nimport java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.io.*;\n\npublic class AESGUI extends JPanel {\n\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"AES Encryption\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setPreferredSize(new Dimension(600,300));\n\n        frame.setLocationRelativeTo(null);\n        frame.setResizable(false);\n\n        AESGUI p = new AESGUI();\n\n        frame.getContentPane().add(p);\n        frame.pack();\n        frame.setVisible(true);\n    }\n\n    private JTextField in;\n    private JTextArea out;\n\n    public AESGUI() {\n        JLabel info = new JLabel(\"Type any String\");\n        in = new JTextField(20);\n        JButton encrypt = new JButton(\"Encrypt\");\n        out = new JTextArea(10,40);\n\n        out.setEditable(false);\n\n        encrypt.addActionListener(new encryptListener());\n        in.addActionListener(new encryptListener());\n\n        add(info);\n        add(in);\n        add(encrypt);\n        add(out);\n        add(new JScrollPane(out));\n    }\n\n    private class encryptListener implements ActionListener {\n        public void actionPerformed(ActionEvent e) {\n            String data = in.getText();\n            if (data.length() == 0) { }\n            else\n                try {\n                    String en = encrypt(data);\n                    out.append(\"Encrypted string: \" + en + \"\\n\");\n                    out.append(\"Original String: \" + decrypt(en) + \"\\n\\n\");\n                } catch(Exception ex) { }\n        }\n    }\n\n    public String asHex(byte[] buf) {\n        StringBuffer strbuf = new StringBuffer(buf.length * 2);\n        int i;\n        for (i = 0; i < buf.length; i++) {\n            if (((int) buf[i] & 0xff) < 0x10)\n                strbuf.append(\"0\");\n            strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n        }\n        return strbuf.toString();\n    }\n\n    private SecretKeySpec skeySpec;\n    private Cipher cipher;\n    private byte[] encrypted;\n\n    public String encrypt(String str) throws Exception {\n        // Get the KeyGenerator\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        kgen.init(128); // 192 and 256 bits may not be available\n\n        // Generate the secret key specs.\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        skeySpec = new SecretKeySpec(raw, \"AES\");\n\n        // Instantiate the cipher\n        cipher = Cipher.getInstance(\"AES\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        encrypted = cipher.doFinal(str.getBytes());\n        return asHex(encrypted);\n    }\n\n    public String decrypt(String str) throws Exception {\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] original = cipher.doFinal(encrypted);\n        String originalString = new String(original);\n        return originalString;\n    }\n\n}\n", "idx": 190}
{"project": "cipher", "commit_id": "Snippet10230082_34579.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/PKCS5Padding\")", "idx": 191}
{"project": "cipher", "commit_id": "Snippet28440214_10586.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n", "idx": 192}
{"project": "cipher", "commit_id": "Snippet16336353_39297.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport android.util.Base64;\n//string encryption\npublic class EncryptionHelper {\n\n\n\n    // Encrypts string and encode in Base64\n    public static String encryptText(String plainText) throws Exception {\n        // ---- Use specified 3DES key and IV from other source --------------\n        byte[] plaintext = plainText.getBytes();//input\n        byte[] tdesKeyData = Constants.getKey().getBytes();// your encryption key\n\n        byte[] myIV = Constants.getInitializationVector().getBytes();// initialization vector\n\n        Cipher c3des = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        SecretKeySpec myKey = new SecretKeySpec(tdesKeyData, \"DESede\");\n        IvParameterSpec ivspec = new IvParameterSpec(myIV);\n\n        c3des.init(Cipher.ENCRYPT_MODE, myKey, ivspec);\n        byte[] cipherText = c3des.doFinal(plaintext);\n        String encryptedString = Base64.encodeToString(cipherText,\n                Base64.DEFAULT);\n        // return Base64Coder.encodeString(new String(cipherText));\n        return encryptedString;\n    }\n\n}\n", "idx": 193}
{"project": "cipher", "commit_id": "Snippet5678604_31767.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\")", "idx": 194}
{"project": "cipher", "commit_id": "Snippet34737457_16727.java", "target": 0, "func": "public static byte[] encrypt3DESECB(byte[] keyBytes, byte[] dataBytes) {\n    try {\n        SecretKeySpec newKey = new SecretKeySpec(keyBytes, \"DESede\");\n        Cipher cipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, newKey);\n        System.out.println(\"function called\");\n        return cipher.doFinal(dataBytes);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return null;\n}           \n", "idx": 195}
{"project": "cipher", "commit_id": "Snippet24274100_6560.java", "target": 0, "func": "import java.security.Key;\nimport java.security.Security;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\n\npublic class CipherBasicSample\n{\n    public static void main(String args[]) throws Exception\n    {\n        Security.addProvider(new BouncyCastleProvider());\n\n        // text to cipher\n        String secret = \"secret\";\n\n        // create the key to cipher an decipher\n        KeyGenerator kg = KeyGenerator.getInstance(\"AES\",\"BC\");\n        kg.init(128);\n        SecretKey sk = kg.generateKey();\n        Key key = new SecretKeySpec(sk.getEncoded(), \"AES\");\n\n        // get a cipher instance\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"BC\");\n        // init to encrypt mode\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        // encrypt the text\n        cipher.update(secret.getBytes());\n        byte[] secretEncrypt = cipher.doFinal();\n\n        System.out.println(\"Encrypt text: \" + new String(secretEncrypt));\n\n        // get a cipher instance\n        Cipher decipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"BC\");\n        // init to decrypt mode\n        decipher.init(Cipher.DECRYPT_MODE, key);\n        // decrypt the text\n        decipher.update(secretEncrypt);\n        byte[] secretDecrypt = decipher.doFinal();\n\n        System.out.println(\"Encrypt text: \" + new String(secretDecrypt));\n    }\n}\n", "idx": 196}
{"project": "cipher", "commit_id": "Snippet4896175_31378.java", "target": 0, "func": "package crypting;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.microedition.midlet.*;\n\npublic class Encryptor extends MIDlet {\n\n    String buffer;\n\n    public void startApp() {\n        String keyString = \"testtest\";\n//        encrypt(\"Text for encrypting\", keyString);\n        encrypt(\"\u041f\u0440\u0438\u0432\u0435\u0442\", keyString);\n        decrypt(buffer, keyString);\n    }\n\n    public void pauseApp() {\n    }\n\n    public void destroyApp(boolean unconditional) {\n    }\n\n    public void encrypt(String textToEnrypt, String keyString) {\n        Cipher cipher;\n        try {\n            cipher = Cipher.getInstance(\"DES\");\n        } catch (Exception ex) {\n            System.out.println(ex.toString());\n            return;\n        }\n\n        byte[] keyData = keyString.getBytes();\n        SecretKeySpec key = new SecretKeySpec(keyData, 0, keyData.length, \"DES\");\n\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n        } catch (Exception ex) {\n            System.out.println(ex.toString());\n            return;\n        }\n\n        int cypheredBytes = 0;\n\n        byte[] inputBytes;\n        try {\n            inputBytes = textToEnrypt.getBytes(\"UTF-8\");\n//            inputBytes = textToEnrypt.getBytes();\n        } catch (Exception ex) {\n            System.out.println(ex.toString());\n            return;\n        }\n\n        byte[] outputBytes = new byte[100];\n\n        try {\n            cypheredBytes = cipher.doFinal(inputBytes, 0, inputBytes.length,\n                    outputBytes, 0);\n        } catch (Exception ex) {\n            System.out.println(ex.toString());\n            return;\n        }\n\n        String str = new String(outputBytes, 0, cypheredBytes);\n        buffer = str;\n        System.out.println(\"Encrypted string = \" + str);\n    }\n\n\n    public void decrypt(String textToDecrypt, String keyString) {\n        Cipher cipher;\n        try {\n            cipher = Cipher.getInstance(\"DES\");\n        } catch (Exception ex) {\n            System.out.println(ex.toString());\n            return;\n        }\n\n        byte[] keyData = keyString.getBytes();\n        SecretKeySpec key = new SecretKeySpec(keyData, 0, keyData.length, \"DES\");\n\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, key);\n        } catch (Exception ex) {\n            System.out.println(\"2. \" + ex.toString());\n            return;\n        }\n\n        int cypheredBytes = 0;\n\n        byte[] inputBytes;\n        try {\n            inputBytes = textToDecrypt.getBytes(\"UTF-8\");\n//            inputBytes = textToDecrypt.getBytes();\n        } catch (Exception ex) {\n            System.out.println(\"3. \" + ex.toString());\n            return;\n        }\n\n        byte[] outputBytes = new byte[100];\n\n        try {\n            cypheredBytes = cipher.doFinal(inputBytes, 0, inputBytes.length,\n                    outputBytes, 0);\n        } catch (Exception ex) {\n            System.out.println(\"4. \" + ex.toString());\n            return;\n        }\n\n        String str = new String(outputBytes, 0, cypheredBytes);\n        System.out.println(\"Decrypted string = \" + str);\n    }\n}\n", "idx": 197}
{"project": "cipher", "commit_id": "Snippet4560461_31180.java", "target": 0, "func": "    byte[] input = etInput.getText().toString().getBytes();\n    byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,\n        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };\n\n    SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n    // encryption pass\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n\n    byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n    int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n    ctLength += cipher.doFinal(cipherText, ctLength);\n\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] plainText = new byte[cipher.getOutputSize(ctLength)];\n    int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);\n\n    String strLength = new String(cipherText,\"US-ASCII\");\n    byte[] byteCiphterText = strLength.getBytes(\"US-ASCII\");\n    Log.e(\"Decrypt\", Integer.toString(byteCiphterText.length));\n\n    etOutput.setText(new String(cipherText,\"US-ASCII\"));\n\n    cipherText  = etOutput.getText().toString().getBytes(\"US-ASCII\");\n    Log.e(\"Decrypt\", Integer.toString(cipherText.length));\n\n    ptLength += cipher.doFinal(plainText, ptLength);\n    Log.e(\"Decrypt\", new String(plainText));\n    Log.e(\"Decrypt\", Integer.toString(ptLength));\n", "idx": 198}
{"project": "cipher", "commit_id": "Snippet28590279_10755.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\n\n\npublic class TripleDes2 \n{\n    private static final String PLAIN_TEXT = \"TESTDATATESTDATATESTDATA\";\n    private static final String SHARED_KEY = \"GD6GTT56HKY4HGF6FH3JG9J5F62FT1\";\n\n   public static void main(String args []) throws Exception\n\n{\n\n    String algorithm = \"DESede\";\n    String transformation = \"DESede/CBC/PKCS5Padding\";\n\n    byte[] keyValue = SHARED_KEY.getBytes(\"UTF-8\");\n\n    DESedeKeySpec keySpec = new DESedeKeySpec(keyValue);\n\n    IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n\n    SecretKey key = SecretKeyFactory.getInstance(algorithm).generateSecret(keySpec);\n    Cipher encrypter = Cipher.getInstance(transformation);\n    encrypter.init(Cipher.ENCRYPT_MODE, key, iv);\n\n    byte[] input = PLAIN_TEXT.getBytes(\"UTF-8\");\n\n    byte[] encrypted = encrypter.doFinal(input);\n\n    System.out.println(new String(Hex.encodeHex(encrypted)).toUpperCase());\n}\n}\n", "idx": 199}
{"project": "cipher", "commit_id": "Snippet47574155_29588.java", "target": 0, "func": "    import java.security.Key;\nimport java.security.spec.KeySpec;\nimport java.util.Base64;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.persistence.AttributeConverter;\nimport javax.persistence.Converter;\n\n@Converter(autoApply=true)\npublic class CryptoJPAConverter implements AttributeConverter<String, String> {\n\n    private static final String _algorithm = \"AES\";\n    private static final String _password = \"_pasword*\";\n    private static final String _salt = \"_salt*\";\n    private static final String _keygen_spec = \"PBKDF2WithHmacSHA1\";\n    private static final String _cipher_spec = \"AES/ECB/PKCS5Padding\";\n\n    @Override\n    public String convertToDatabaseColumn(String clearText) {\n        Key key;\n        Cipher cipher;\n        try {\n            key = getKey();\n            cipher = Cipher.getInstance(_cipher_spec);\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] encVal = cipher.doFinal(clearText.getBytes());\n            String encryptedValue = Base64.getEncoder().encodeToString(encVal);\n            return encryptedValue;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public String convertToEntityAttribute(String encryptedText) {\n        Key key;\n        try {\n            key = getKey();\n            Cipher cipher = Cipher.getInstance(_cipher_spec);\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] decordedValue = Base64.getDecoder().decode(encryptedText);\n            byte[] decValue = cipher.doFinal(decordedValue);\n            String decryptedValue = new String(decValue);\n            return decryptedValue;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static Key getKey() throws Exception {\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(_keygen_spec);\n        KeySpec spec = new PBEKeySpec(_password.toCharArray(), _salt.getBytes(), 65536, 128);\n        SecretKey tmp = factory.generateSecret(spec);\n        SecretKey secret = new SecretKeySpec(tmp.getEncoded(), _algorithm);\n        return secret;\n    }\n}\n", "idx": 200}
{"project": "cipher", "commit_id": "Snippet21798220_4213.java", "target": 0, "func": "SecureRandom m = SecureRandom.getInstance(\"SHA1PRNG\");\n//Secure Hash\nMessageDigest hash = MessageDigest.getInstance(\"SHA-1\");\n//get a KeyGenerator DES init with a PRNG\nKeyGenerator keyGenerator = KeyGenerator.getInstance(\"DES\");\nkeyGenerator.init(m);\n//get Masterkey\nKey masterkey = keyGenerator.generateKey();\n//Get a DES cipger\nCipher cipher = Cipher.getInstance(\"DES\");\n//AND HERE HOW I RESOLVED!\nSecretKeySpec secretKeySpec = new SecretKeySpec(Arrays.copyOf(hash.digest(passphrase.getBytes()), 8), \"DES\");\n", "idx": 201}
{"project": "cipher", "commit_id": "Snippet25011238_7335.java", "target": 0, "func": "import org.apache.commons.codec.binary.Base64;\n\npublic class Decrypts {\n    private static final String password = \"haasd\";\n    private static final String ALGO = \"AES\";\n\n    public static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        byte[] encryptedValue = new Base64().encode(encVal);\n        String ency = new String(encryptedValue);\n        return ency;\n    }\n\n    @SuppressWarnings(\"static-access\")\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new Base64().decodeBase64(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n\n    private static Key generateKey() throws Exception {\n\n        try {\n            String salt;\n            int pswdIterations = 65536;\n            int keySize = 256;\n            salt = generateSalt();\n            byte[] saltBytes = salt.getBytes(\"UTF-8\");\n\n            SecretKeyFactory factory = SecretKeyFactory\n                    .getInstance(\"PBKDF2WithHmacSHA1\");\n            PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), saltBytes,\n                    pswdIterations, keySize);\n\n            SecretKey secretKey = factory.generateSecret(spec);\n\n            Key key = new SecretKeySpec(secretKey.getEncoded(), \"AES\");\n            return key;\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n        return null;\n\n    }\n\n    public static String generateSalt() {\n        SecureRandom random = new SecureRandom();\n        byte bytes[] = new byte[20];\n        random.nextBytes(bytes);\n        String s = new String(bytes);\n        return s;\n    }\n\n}\n", "idx": 202}
{"project": "cipher", "commit_id": "Snippet14642351_37865.java", "target": 0, "func": "SecretKey deskey = new SecretKeySpec(keybyte, \"DESede/ECB/NOPADDING\");\n//enter code here..\nCipher c1 = Cipher.getInstance(\"DESede/ECB/NOPADDING\");\nc1.init(Cipher.ENCRYPT_MODE, deskey);\n", "idx": 203}
{"project": "cipher", "commit_id": "Snippet15398193_38433.java", "target": 0, "func": "String CIPHER_ALGORITHM = \"DES/CFB8/NoPadding\";\nSecretKeySpec key5= new SecretKeySpec(\"passkey*\".getBytes(\"UTF-8\"), \n    CIPHER_ALGORITHM);\n\nString ivString = \"passkey*\";\nbyte[] ivByte = ivString.getBytes(\"UTF-8\");\nIvParameterSpec iv5 = new IvParameterSpec(ivByte);  \n\nCipher c = Cipher.getInstance(CIPHER_ALGORITHM);\nc.init(Cipher.DECRYPT_MODE, key5, iv5);\n\nCipherInputStream cis = new CipherInputStream(\n    new FileInputStream(\"/sdcard/test_folder/test.file\"), c);\n\nBufferedReader br = new BufferedReader(new InputStreamReader(cis));\nLog.d(\"SONUC2\", \" \" +br.readLine());\n", "idx": 204}
{"project": "cipher", "commit_id": "Snippet19546063_2310.java", "target": 0, "func": "private static byte[] xorBytes(byte[] rndA, byte[] rndB) {\n    // TODO Auto-generated method stub\n    byte[] b = new byte[rndB.length];\n    for (int i = 0; i < rndB.length; i++) {\n        b[i] = (byte) (rndA[i] ^ rndB[i]);\n    }\n    return b;\n}\n\n\npublic static byte[] decrypt(byte[] key, byte[] enciphered_data) {\n\n    try {\n        byte[] iv = new byte[] { 0,0,0,0,0,0,0,0 };\n        IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);\n        SecretKey s = new SecretKeySpec(key, \"DESede\");\n        Cipher cipher;\n        cipher = Cipher.getInstance(\"DESede/CBC/NoPadding\", \"BC\");\n        cipher.init(Cipher.DECRYPT_MODE, s, ivParameterSpec);\n        byte[] deciphered_data = cipher.doFinal(enciphered_data);\n        return deciphered_data;\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchProviderException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidAlgorithmParameterException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 205}
{"project": "cipher", "commit_id": "Snippet38883454_20587.java", "target": 0, "func": "  def aes_encrypt(value: String, k: String): Array[Byte] = {\n    val cipher = Cipher.getInstance(\"AES\")\n    val key = Arrays.copyOf(k.getBytes(\"UTF-8\"), 16)\n    val secretKey: SecretKeySpec = new SecretKeySpec(key, 0, key.length, \"AES\")\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey)\n    cipher.doFinal(value.getBytes(\"UTF-8\"), 0, value.getBytes(\"UTF-8\").length)\n  }\n", "idx": 206}
{"project": "cipher", "commit_id": "Snippet34361655_16337.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/PKCS5Padding\");", "idx": 207}
{"project": "cipher", "commit_id": "Snippet8269133_33127.java", "target": 0, "func": "import javax.crypto.Cipher;  \nimport javax.crypto.spec.SecretKeySpec;  \n\npublic class AESTest {  \n     public static String asHex (byte buf[]) {\n          StringBuffer strbuf = new StringBuffer(buf.length * 2);\n          int i;\n\n          for (i = 0; i < buf.length; i++) {\n           if (((int) buf[i] & 0xff) < 0x10)\n            strbuf.append(\"0\");\n\n           strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n          }\n\n          return strbuf.toString();\n     }\n\n     public static void main(String[] args) throws Exception {  \n        String keyString = \"ssssssssssssssss\";  \n        // 546578746F2070617261207465737465 (Hex)  \n        byte[] key = keyString.getBytes();  \n        System.out.println(asHex(key).toUpperCase());  \n\n        String clearText = \"sdhhgfffhamayaqqqaaaa\";  \n        // ZXNzYXNlbmhhZWhmcmFjYQ== (Base64)  \n        // 6573736173656E686165686672616361 (Hex)  \n        byte[] clear = clearText.getBytes();  \n        System.out.println(asHex(clear).toUpperCase());  \n\n        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");  \n        // PKCS5Padding or NoPadding  \n        Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");  \n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);  \n\n        byte[] encrypted = cipher.doFinal(clear);  \n        System.out.println(asHex(encrypted).toUpperCase());  \n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] original =\n                    cipher.doFinal(encrypted);\n\n        System.out.println(original);\n        String originalString = new String(original);\n        System.out.println(\"Original string: \" +\n                    originalString + \" \" + asHex(original));\n    }  \n}  \n", "idx": 208}
{"project": "cipher", "commit_id": "Snippet7787773_32935.java", "target": 0, "func": "private static String decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec );\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return new String(decrypted);\n}\n", "idx": 209}
{"project": "cipher", "commit_id": "Snippet26824262_8971.java", "target": 0, "func": "byte[] ciphertext;\n\nCipher enc = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");   \n\nenc.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, \"DES\"), new IvParameterSpec(vector));\n\n// Is this the complete ciphertext?\nciphertext = encrypt.doFinal(data.getbytes(\"UTF-8\"));\n", "idx": 210}
{"project": "cipher", "commit_id": "Snippet34728834_16732.java", "target": 0, "func": "          String text = \"Test TEST\";         \n          String key = \"deadbeefbeefdead\"; // 128 bit key\n         // Create key and cipher\n         Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n         Cipher cipher = Cipher.getInstance(\"AES\");\n         // encrypt the text\n         cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n         byte[] encrypted = cipher..doFinal(text.getBytes());\n         System.err.println(new String(encrypted));\n         // decrypt the text\n         cipher.init(Cipher.DECRYPT_MODE, aesKey);\n         String decrypted = new String(cipher.doFinal(encrypted));\n         System.err.println(decrypted\n", "idx": 211}
{"project": "cipher", "commit_id": "Snippet5448832_31627.java", "target": 0, "func": "package example.com.cryptage;\n\nimport java.security.*;\nimport javax.crypto.*;\n\n//\n// encrypt and decrypt using the DES private key algorithm\n\npublic class PrivateExample {\n\n   public static void main(String[] args) throws Exception {\n      //\n      // check args and get plaintext\n      if (args.length != 1) {\n         System.err.println(\"Usage: java PrivateExample text\");\n         System.exit(1);\n      }\n\n//    byte[] plainText = args[0].getBytes(\"UTF8\");\n      String ss = \"Hello world, haris is here!\";\n      byte[] plainText = ss.getBytes();\n      //\n      // get a DES private key\n      System.out.println(\"\\nStart generating DES key\");\n      KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\n      keyGen.init(56);\n      Key key = keyGen.generateKey();\n      System.out.println(\"Finish generating DES key\");\n      //\n      // get a DES cipher object and print the provider\n      Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n      System.out.println(\"\\n\" + cipher.getProvider().getInfo());\n      //\n      // encrypt using the key and the plaintext\n      System.out.println(\"\\nStart encryption\");\n      cipher.init(Cipher.ENCRYPT_MODE, key);\n      byte[] cipherText = cipher.doFinal(plainText);\n      System.out.println(\"Finish encryption: \");\n      System.out.println(new String(cipherText, \"UTF8\"));\n\n      //\n      // decrypt the ciphertext using the same key\n      System.out.println(\"\\nStart decryption\");\n      cipher.init(Cipher.DECRYPT_MODE, key);\n      byte[] newPlainText = cipher.doFinal(cipherText);\n      System.out.println(\"Finish decryption: \");\n\n      System.out.println(new String(newPlainText, \"UTF8\"));\n   }\n}\n", "idx": 212}
{"project": "cipher", "commit_id": "Snippet9601932_34058.java", "target": 0, "func": "        public static String DecryptBlowfish(byte[] msg){\n      byte[] decrypted =null;\n      try {\n\n\n       Cipher cipher = Cipher.getInstance(\"Blowfish\");\n\n          cipher.init(Cipher.DECRYPT_MODE, secretkey);\n\n\n     decrypted = cipher.doFinal(msg);\n\n        } catch (){ //NoSuchAlgorithmException, NoSuchPaddingException..etc\n     }  \n\n    return decrypted;\n}\n", "idx": 213}
{"project": "cipher", "commit_id": "Snippet35558370_17408.java", "target": 0, "func": "public static final byte[] keyValue = new byte[] { 'T', 'h', 'e', 'B', 'e',\n        's', 't', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };\npublic final static String ALGO = \"AES\";\n\npublic static String Dcrypt(String encryptedData) {\n    Key key = new SecretKeySpec(keyValue, ALGO);\n    // Key key = generateKey();\n    try {\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = Base64.decodeBase64(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        decryptedValue = new String(decValue);\n    } catch (Exception e) {\n    }\n    return decryptedValue;\n}\n", "idx": 214}
{"project": "cipher", "commit_id": "Snippet7782574_32923.java", "target": 0, "func": "        SecretKeySpec key = new SecretKeySpec(salt.getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    String result = new String(cipher.doFinal(message));\n\n    System.out.println(\"Decrypted:\" + result);\n", "idx": 215}
{"project": "cipher", "commit_id": "Snippet5336141_31601.java", "target": 0, "func": "    public static void encryptFile(String path, byte[] key) throws Exception {\n\n    Cipher c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    SecretKeySpec k = new SecretKeySpec(key, \"AES\");\n    c.init(Cipher.ENCRYPT_MODE, k);\n    RandomAccessFile raf = new RandomAccessFile(path, \"rw\");\n\n    byte[] buf = new byte[256];\n    byte[] output;\n    int bytesRead = 0;\n    int totalBytes = 0;\n    while ((bytesRead = raf.read(buf)) >= 0) {\n        int len = buf.length;\n        if (bytesRead < len) {\n            byte[] out2 = c.doFinal(buf, 0 , bytesRead);\n            raf.seek(totalBytes);\n            raf.write(out2);\n        } else {\n        output = c.update(buf, 0, bytesRead);\n        raf.seek(totalBytes);\n        raf.write(output);\n        }\n        totalBytes += bytesRead;\n        }\n    raf.getFD().sync();\n    raf.close();\n    }\n", "idx": 216}
{"project": "cipher", "commit_id": "Snippet11179587_35376.java", "target": 0, "func": "public static byte[] decrypt(byte[] input)\n{\n    try\n    {\n        SecretKeySpec skey = new SecretKeySpec(KEY.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, skey);\n        return cipher.doFinal(input);\n    }\n    catch (Exception e) {}\n    return input;\n}\n", "idx": 217}
{"project": "cipher", "commit_id": "Snippet11385963_35545.java", "target": 0, "func": "byte[] encipheredCodeRandomB = { (byte)0xEA ,(byte)0x18 ,(byte)0xDE ,(byte)0xFF\n     ,(byte)0x52 ,(byte)0x0E,(byte)0xCD, (byte) 90};\nbyte[] masterKeyBytes = \"0000000000000000\".getBytes();\nbyte[] ivBytes = \"00000000\".getBytes();\n\nDESKeySpec desKeySpec = new DESKeySpec(masterKeyBytes);  \nSecretKeyFactory desKeyFact = SecretKeyFactory.getInstance(\"DES\");\nSecretKey s = desKeyFact.generateSecret(desKeySpec);\naliceCipher = Cipher.getInstance(\"DES/CBC/NoPadding\");\naliceCipher.init(Cipher.DECRYPT_MODE, s, new IvParameterSpec(ivBytes));\n\nbyte[] decipheredCodeRandomB = aliceCipher.doFinal(encipheredCodeRandomB);\n", "idx": 218}
{"project": "cipher", "commit_id": "Snippet26618763_8747.java", "target": 0, "func": "private static byte[] decrypt(byte[] rawKey, byte[] encrypted) throws Exception {\n    SecretKeySpec spec = new SecretKeySpec(rawKey, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\n    cipher.init(Cipher.DECRYPT_MODE, spec);\n\n    return cipher.doFinal(encrypted); //THIS LINE THROWS EXCEPTION\n}\n", "idx": 219}
{"project": "cipher", "commit_id": "Snippet26200166_7796.java", "target": 0, "func": "        Cipher c = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = BASE64DecoderStream.decode(encryptedData.getBytes());\n        byte[] decValue = c.doFinal(decordedValue);\n        decryptedValue = new String(decValue); \n", "idx": 220}
{"project": "cipher", "commit_id": "Snippet12136740_36071.java", "target": 0, "func": "// Note that we are not reading the image in here...\nSystem.out.print(\"Decryption Password: \");\nSystem.out.flush();\nPBEKeySpec pbeKeySpec = new PBEKeySpec(scanner.next().toCharArray());\n// Set up other parameters to be used by the password-based\n// encryption.\nPBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, 20);\nSecretKeyFactory keyFac = SecretKeyFactory\n        .getInstance(\"PBEWithMD5AndDES\");\nSecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n// Make a PBE Cyper object and initialize it to decrypt using\n// the given password.\nCipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\npbeCipher.init(Cipher.DECRYPT_MODE, pbeKey, pbeParamSpec);\n\n// We're now going to read the image in, using the cipher\n// input stream, which wraps a file input stream\nFile inputFile = new File(\"sheepTest.png\");\nFileInputStream fis = new FileInputStream(inputFile);\nCipherInputStream cis = new CipherInputStream(fis, pbeCipher);\n// We then use all that to read the image\nBufferedImage input = ImageIO.read(cis);\ncis.close();\n\n// We then write the dcrypted image out...\n// Decrypt the ciphertext and then print it out.\nFileOutputStream output = new FileOutputStream(\"sheepTest.png\");\nImageIO.write(input, \"PNG\", output);\n", "idx": 221}
{"project": "cipher", "commit_id": "Snippet15160714_38266.java", "target": 0, "func": "byte[] masterKey;\n    if (Base64.decode(config.getProperty(\"encrMasterKey\")) != null) {\n        masterKey=aes.decrypt(Base64.decode(config.getProperty(\"encrMasterKey\")),\"password\");\n    } else {\n        masterKey = aes.keyGeneration();\n        byte[] encrMasterKey = aes.encrypt(masterKey, keyderivation(\"password\"));\n       writeToConfigFile(\"encrMasterKey\", Base64.encode(encrMasterKey));\n    }\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    SecretKeySpec keySpec = new SecretKeySpec(masterKey, \"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n    byte[] cypherText = aes.encrypt(myJSONString,masterKey);'\n", "idx": 222}
{"project": "cipher", "commit_id": "Snippet44176595_26235.java", "target": 0, "func": " public string encrypt(String input, string key) {\n    SecretKeySpec skey = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, skey);\n    crypted = cipher.doFinal(input.getBytes(\"UTF-8\"));\n    return Base64.encodeToString(crypted,Base64.NO_WRAP);\n}\n", "idx": 223}
{"project": "cipher", "commit_id": "Snippet36904204_18877.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.util.Scanner;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\n\n\npublic class AESEncryptor {\n\n public void encrypt(String fname) throws Exception{\n  KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n  keyGen.init(256);  //using AES-256\n  SecretKey key = keyGen.generateKey();  //generating key\n  Cipher aesCipher = Cipher.getInstance(\"AES\");  //getting cipher for AES\n  aesCipher.init(Cipher.ENCRYPT_MODE, key);  //initializing cipher for         encryption with key\n\n  //creating file output stream to write to file\n  try(FileOutputStream fos = new FileOutputStream(fname+\".aes\")){\n   //creating object output stream to write objects to file\n   ObjectOutputStream oos = new ObjectOutputStream(fos);\n   oos.writeObject(key);  //saving key to file for use during decryption\n\n   //creating file input stream to read contents for encryption\n   try(FileInputStream fis = new FileInputStream(fname)){\n    //creating cipher output stream to write encrypted contents\n    try(CipherOutputStream cos = new CipherOutputStream(fos, aesCipher)){\n     int read;\n     byte buf[] = new byte[4096];\n     while((read = fis.read(buf)) != -1)  //reading from file\n      cos.write(buf, 0, read);  //encrypting and writing to file\n    }\n   }\n  }\n\n }\n\n public void decrypt(String fname)throws Exception{\n  SecretKey key =null;\n\n  //creating file input stream to read from file\n  try(FileInputStream fis = new FileInputStream(fname)){\n   //creating object input stream to read objects from file\n   ObjectInputStream ois = new ObjectInputStream(fis);\n   key = (SecretKey)ois.readObject();  //reading key used for encryption\n\n   Cipher aesCipher = Cipher.getInstance(\"AES\");  //getting cipher for AES\n   aesCipher.init(Cipher.DECRYPT_MODE, key);  //initializing cipher for     decryption with key\n   //creating file output stream to write back original contents\n   try(FileOutputStream fos = new FileOutputStream(fname+\".dec\")){\n    //creating cipher input stream to read encrypted contents\n    try(CipherInputStream cis = new CipherInputStream(fis, aesCipher)){\n     int read;\n     byte buf[] = new byte[4096];\n     while((read = cis.read(buf)) != -1)  //reading from file\n      fos.write(buf, 0, read);  //decrypting and writing to file\n    }\n   }\n  }\n\n }\n\n public static void main(String[] args) throws Exception {\n  AESEncryptor obj = new AESEncryptor();\n File file = new     File(\"C://Users/Jasmine/Documents/NetBeansProjects/testing/clear.txt\");\n\n  obj.encrypt(file.getName());\n  obj.decrypt(\"clear.txt.aes\");\n }\n\n}\n", "idx": 224}
{"project": "cipher", "commit_id": "Snippet15309493_38376.java", "target": 0, "func": "public static byte[] generateKey(String password) throws Exception\n{\n    byte[] keyStart = password.getBytes(\"UTF-8\");\n\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n    sr.setSeed(keyStart);\n    kgen.init(128, sr);\n    SecretKey skey = kgen.generateKey();\n    return skey.getEncoded();\n}\n\n    public static byte[] encodeFile(byte[] key, byte[] fileData) throws Exception\n    {\n\n        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encrypted = cipher.doFinal(fileData);\n\n        return encrypted;\n    }\n\n    public static byte[] decodeFile(byte[] key, byte[] fileData) throws Exception\n    {\n        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        byte[] decrypted = cipher.doFinal(fileData);\n\n        return decrypted;\n    }\n", "idx": 225}
{"project": "cipher", "commit_id": "Snippet32073550_14134.java", "target": 0, "func": "private static String password = \"AxkbK2jZ5PMaeNZWfn8XRLUWF2waGwH2EkAXxBDU6aZ\";\nprivate static String salt = \"2#g+XK^Sc3\\\"4ABXbvwF8CPD%en%;9,c(\";\nprivate static String text = \"Fm+Zfufqe3DjRQtWcYdw9g9oXriDjrAkRrBLhEfu7fCtT4BzD0gw7D+8KxrcbbgJm26peTUWHU2k4YJ4KqCSRQN3NPzuXwlJ4mC4444Edg3Q==\";\n\npublic String decrypt(String pass, String encr) {\n\n    try {\n        int i = 0;\n\n        String key = hash();\n        byte[] iv = Base64.decodeBase64(text.substring(0, 22) + \"==\");\n\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        SecretKeySpec keySpec = new SecretKeySpec(password.getBytes(), \"DES\");\n        IvParameterSpec ivSpec = new IvParameterSpec(salt.getBytes());\n        cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);\n        ByteArrayInputStream fis = new ByteArrayInputStream(iv);\n        CipherInputStream cis = new CipherInputStream(fis, cipher);\n        ByteArrayOutputStream fos = new ByteArrayOutputStream();\n        // decrypting\n        byte[] b = new byte[8];\n        while ((i = cis.read(b)) != -1) {\n            fos.write(b, 0, i);\n        }\n        fos.flush();\n        fos.close();\n        cis.close();\n        fis.close();\n\n        return fos.toString();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return null;\n}\n\nprivate String hash() {\n    StringBuffer sb = new StringBuffer();\n\n    try {\n        MessageDigest md = null;\n        md = MessageDigest.getInstance(\"SHA-256\");\n        md.update((password + salt).getBytes());\n        byte byteData[] = md.digest();\n\n        for (int i = 0; i < byteData.length; i++) {\n            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n        }\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } finally {\n        return sb.toString();\n    }\n\n}\n", "idx": 226}
{"project": "cipher", "commit_id": "Snippet27657355_9828.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.nio.ByteBuffer;\n\nimport java.security.*;\nimport java.security.cert.CertificateException;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\npublic class Main\n{   \n    public static void main(String[] args) throws IOException, UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, NoSuchPaddingException, CertificateException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, SignatureException{\n        //open the file containing keys\n        File file = new File(\"keys/ks_file.jks\");\n        //cipher object that will hold the information\n        Cipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        //create keystore object from stored keys inside the file\n        KeyStore keystore = loadKeyStore(file, \"sergey\", \"JKS\");\n        //messageDigest instance\n        MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n        //singanture instance\n        Signature dsa = Signature.getInstance(\"SHA1withDSA\"); \n\n        //params for getting keys\n        String allias = \"enc_key\", password = \"sergey\";\n        SecureRandom s_random = SecureRandom.getInstance(\"SHA1PRNG\");\n        //create random bytes for semtric key\n        byte key_bytes[] = new byte[16];\n        s_random.setSeed(711);\n        s_random.nextBytes(key_bytes);\n\n        Key key = new SecretKeySpec(key_bytes, \"AES\");\n\n        Key key_enc = keystore.getKey(allias, password.toCharArray());\n        KeyPair enc_key = null;\n\n        if (key_enc instanceof PrivateKey) {\n            // Get certificate of public key\n            java.security.cert.Certificate cert = keystore.getCertificate(allias);\n            // Get public key\n            PublicKey publicKey = cert.getPublicKey();\n            enc_key = new KeyPair(publicKey, (PrivateKey) key_enc);\n        }\n        //cipher the file\n        aes.init(Cipher.ENCRYPT_MODE, key);\n        FileInputStream fis; \n        FileOutputStream fos; \n        CipherInputStream cis; \n        fis = new FileInputStream(\"tmp/a.txt\"); \n        cis = new CipherInputStream(fis, aes);\n        fos = new FileOutputStream(\"tmp/b.txt\"); \n        byte[] b = new byte[8]; \n        int i = cis.read(b); \n        byte[] bytes = ByteBuffer.allocate(4).putInt(i).array();\n        //update message digest for signature\n        md.update(bytes);\n        while (i != -1) { \n            fos.write(b, 0, i); \n            i = cis.read(b);\n            bytes = ByteBuffer.allocate(4).putInt(i).array();\n            md.update(bytes);\n        } \n        fis.close();\n        cis.close();\n        fos.close();\n\n        //encode the secret key\n        aes.init(Cipher.ENCRYPT_MODE, (Key)enc_key.getPublic());\n        byte[] cipherKey = aes.doFinal(key.toString().getBytes());\n\n        //we save the final digest\n        byte[] hash = md.digest();\n        //init singature with private key\n        dsa.initSign(enc_key.getPrivate());\n        //update the signature with the hash aster digest\n        dsa.update(hash); \n        //final signature\n        byte[] sig = dsa.sign();\n\n        //creating config xml\n        try {\n\n            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n\n            // root elements\n            Document doc = docBuilder.newDocument();\n            Element rootElement = doc.createElement(\"config\");\n            doc.appendChild(rootElement);\n\n            // signature elements\n            Element sig_xml = doc.createElement(\"sig\");\n            rootElement.appendChild(sig_xml);\n            sig_xml.setAttribute(\"value\", sig.toString());\n\n            // key element\n            Element key_xml = doc.createElement(\"key\");\n            rootElement.appendChild(key_xml);\n            key_xml.setAttribute(\"value\", cipherKey.toString());\n\n            // write the content into xml file\n            TransformerFactory transformerFactory = TransformerFactory.newInstance();\n            Transformer transformer = transformerFactory.newTransformer();\n            DOMSource source = new DOMSource(doc);\n            StreamResult result = new StreamResult(new File(\"./config.xml\"));\n\n            transformer.transform(source, result);\n\n            System.out.println(\"File saved!\");\n\n          } catch (ParserConfigurationException pce) {\n            pce.printStackTrace();\n          } catch (TransformerException tfe) {\n            tfe.printStackTrace();\n          }\n        }\n\n    /**\n     * Reads a Java keystore from a file.\n     * \n     * @param keystoreFile\n     *          keystore file to read\n     * @param password\n     *          password for the keystore file\n     * @param keyStoreType\n     *          type of keystore, e.g., JKS or PKCS12\n     * @return the keystore object\n     * @throws KeyStoreException\n     *           if the type of KeyStore could not be created\n     * @throws IOException\n     *           if the keystore could not be loaded\n     * @throws NoSuchAlgorithmException\n     *           if the algorithm used to check the integrity of the keystore\n     *           cannot be found\n     * @throws CertificateException\n     *           if any of the certificates in the keystore could not be loaded\n     */\n    public static KeyStore loadKeyStore(final File keystoreFile,\n        final String password, final String keyStoreType)\n        throws KeyStoreException, IOException, NoSuchAlgorithmException,\n        CertificateException {\n      if (null == keystoreFile) {\n        throw new IllegalArgumentException(\"Keystore url may not be null\");\n      }\n      final URI keystoreUri = keystoreFile.toURI();\n      final URL keystoreUrl = keystoreUri.toURL();\n      final KeyStore keystore = KeyStore.getInstance(keyStoreType);\n      InputStream is = null;\n      try {\n        is = keystoreUrl.openStream();\n        keystore.load(is, null == password ? null : password.toCharArray());\n      } finally {\n        if (null != is) {\n          is.close();\n        }\n      }\n      return keystore;\n    }\n\n}\n", "idx": 227}
{"project": "cipher", "commit_id": "Snippet20136740_2803.java", "target": 0, "func": "import java.io.IOException;\nimport java.util.*;\n\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.conf.*;\nimport org.apache.hadoop.io.*;\nimport org.apache.hadoop.mapreduce.*;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.input.TextInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;\n\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.Cipher;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidKeyException;\nimport java.security.InvalidAlgorithmParameterException;\n\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.IllegalBlockSizeException;\n\nimport sun.misc.BASE64Encoder;\n\npublic class Enc {\n\n      public static class Map extends Mapper<LongWritable, Text, LongWritable, Text> {\n        private Text word = new Text();\n        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n\n            try {\n            String strDataToEncrypt = new String();\n            String strCipherText = new String();\n\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n            keyGen.init(128);\n            SecretKey secretKey = keyGen.generateKey();\n\n            Cipher aesCipher = Cipher.getInstance(\"AES\");\n            aesCipher.init(Cipher.ENCRYPT_MODE,secretKey);\n            strDataToEncrypt = value.toString();\n\n            byte[] byteDataToEncrypt = strDataToEncrypt.getBytes();\n            byte[] byteCipherText = aesCipher.doFinal(byteDataToEncrypt); \n            strCipherText = new BASE64Encoder().encode(byteCipherText);\n            System.out.println(\"cipher text: \" +strCipherText);\n\n            String cipherString =  new String(strCipherText);\n            context.write(key, new Text(cipherString));\n            }\n            catch (NoSuchAlgorithmException noSuchAlgo)\n            {\n                System.out.println(\" No Such Algorithm exists \" + noSuchAlgo);\n            }\n\n                catch (NoSuchPaddingException noSuchPad)\n                {\n                    System.out.println(\" No Such Padding exists \" + noSuchPad);\n                }\n\n                    catch (InvalidKeyException invalidKey)\n                    {\n                        System.out.println(\" Invalid Key \" + invalidKey);\n                    }\n\n                    catch (BadPaddingException badPadding)\n                    {\n                        System.out.println(\" Bad Padding \" + badPadding);\n                    }\n\n                    catch (IllegalBlockSizeException illegalBlockSize)\n                    {\n                        System.out.println(\" Illegal Block Size \" + illegalBlockSize);\n                    }\n\n\n        }\n    } \n\n\n    public static void main(String[] args) throws Exception {\n        Configuration conf = new Configuration();\n\n        Job job = new Job(conf, \"Enc\");\n        job.setJarByClass(Enc.class);\n\n        job.setOutputKeyClass(LongWritable.class);\n        job.setOutputValueClass(Text.class);\n\n        job.setMapperClass(Map.class);\n        //job.setCombinerClass(Reduce.class);\n        //job.setReducerClass(Reduce.class);\n\n\n        job.setInputFormatClass(TextInputFormat.class);\n        job.setOutputFormatClass(TextOutputFormat.class);\n\n        FileInputFormat.addInputPath(job, new Path(args[0]));\n        FileOutputFormat.setOutputPath(job, new Path(args[1]));\n\n        job.waitForCompletion(true);\n    }        \n}\n", "idx": 228}
{"project": "cipher", "commit_id": "Snippet32643338_14761.java", "target": 0, "func": "import java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AESHelper {\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2*buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n    private final static String HEX = \"0123456789ABCDEF\";\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n    }\n}\n", "idx": 229}
{"project": "cipher", "commit_id": "Snippet37646385_19596.java", "target": 0, "func": "private static String decrypt(String data, String key){\n    try {\n\n\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n\n    md.update(key.getBytes(\"UTF-8\"));\n    byte[] digest = md.digest();\n\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec k = new SecretKeySpec(digest, \"AES\");\n    c.init(Cipher.DECRYPT_MODE, k);\n\n    byte[] decrypt = c.doFinal(data.getBytes(\"UTF-8\"));\n\n    String decrypted = new String(decrypt);\n\n    return decrypted;\n    } catch (Exception e){\n        e.printStackTrace();\n        return \"Something went wrong\";\n    }\n}\n", "idx": 230}
{"project": "cipher", "commit_id": "Snippet42548673_24594.java", "target": 0, "func": "KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n        SecretKey myDesKey = keygenerator.generateKey();\n        Cipher desCipher;\n        desCipher = Cipher.getInstance(\"DES\");\n\n       desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n       byte[] text =uname.getBytes();\n       byte[] textEncrypted = desCipher.doFinal(text);\n       System.out.println(\"username Encryted : \" + textEncrypted);\n", "idx": 231}
{"project": "cipher", "commit_id": "Snippet47219488_29211.java", "target": 0, "func": "public static String encryptBlowFish(String cleartext, String key)\n            throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException\n    {\n        String encBlowFish = \"\";\n        SecretKeySpec skeySpec = getGenerateKey(key);\n        Cipher cipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n        cipher.init(1, skeySpec);\n        byte[] raw = cipher.doFinal(cleartext.getBytes(\"UTF8\"));\n        encBlowFish = new Base64Encoder().encode(raw);\n        encBlowFish = URLEncoder.encode(encBlowFish, \"UTF8\");\n        encBlowFish = specialChars(encBlowFish);\n        return encBlowFish;\n    }\n", "idx": 232}
{"project": "cipher", "commit_id": "Snippet30166305_12325.java", "target": 0, "func": " byte[] iv1=new byte[]{(byte)0x00 , (byte)0x00 , (byte)0x00 , (byte)0x00 ,\n                        (byte)0x00 , (byte)0x00 , (byte)0x00 , (byte)0x00 };\n                byte[] newPICCKeyEnciphered = new byte[24];\n                //..............................\n                byte[] block1 = new byte[]{(byte)0x11, (byte)0x22, (byte)0x33, (byte)0x44, \n                        (byte)0x55, (byte)0x66, (byte)0x77 ,(byte)0x88};\n                byte[] block2 = new byte[]{\n                (byte)0x11, (byte)0x22, (byte)0x33 ,(byte)0x44 ,\n                (byte)0x55, (byte)0x66, (byte)0x77 ,(byte)0x88};\n                byte[] block3 = new byte[]{(byte)0x00 , (byte)0x00,\n                        (byte)0x00 ,(byte)0x00 ,(byte)0x00 ,\n                        (byte)0x00 ,(byte)0x00 ,(byte)0x00};\n                block3[0] = newPICCKey_deciphered[16];\n                block3[1] = newPICCKey_deciphered[17];\n\n   try\n                {\n                    Cipher cipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n                SecretKeyFactory desKeyFact = SecretKeyFactory.getInstance(\"DES\");\n                DESKeySpec desKeySpec = new DESKeySpec(sessionKey);  \n                SecretKey s = desKeyFact.generateSecret(desKeySpec);\n                cipher.init(Cipher.DECRYPT_MODE, s);\n\n                byte[] r1 = new byte[8];\n                r1 =Utils.doXorTwoByteArray(block1, iv1);\n\n                byte[] r2 = new byte[8];\n                r2 = cipher.doFinal(r1, 0, 8);\n                //...............\n                byte[] r3 = new byte[8];\n                r3 =Utils.doXorTwoByteArray(block2, r2);\n\n                byte[] r4 = new byte[8];\n                r4 =cipher.doFinal(r3, 0, 8);\n                //................\n                byte[] r5 = new byte[8];\n                r5 =Utils.doXorTwoByteArray(block3, r4);\n\n                byte[] r6 = new byte[8];\n                r6 =cipher.doFinal(r5, 0, 8);\n                for(int i=0; i<8;i++)\n                    newPICCKeyEnciphered[i] = r2[i];\n                for(int i=8; i<16;i++)\n                    newPICCKeyEnciphered[i] = r4[i-8];\n                for(int i=16; i<24;i++)\n                    newPICCKeyEnciphered[i] = r6[i-16];\n                }\n                catch(Exception e)\n                {\n                    e.printStackTrace();\n                }\n", "idx": 233}
{"project": "cipher", "commit_id": "Snippet32616019_14735.java", "target": 0, "func": "public static String cryptBC(String data, String key) throws Exception{\n    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n    byte[] input = data.getBytes();\n    byte[] keyBytes = key.getBytes() ;   \n    SecretKeySpec skey = new SecretKeySpec(keyBytes, \"DESede\");\n    Cipher cipher = Cipher.getInstance(\"DESede/ECB/NoPadding\", \"BC\");\n\n    if(input.length % 8 != 0){ \n        byte[] padded = new byte[input.length + 8 - (input.length % 8)];\n        System.arraycopy(input, 0, padded, 0, input.length);\n        input = padded;\n    }\n    System.out.println(\"input : \" + new String(input));\n    cipher.init(Cipher.ENCRYPT_MODE, skey);\n    byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n    int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n    ctLength += cipher.doFinal(cipherText, ctLength);\n\n    return new String(Base64.encodeBase64(cipherText));\n}\n", "idx": 234}
{"project": "cipher", "commit_id": "Snippet5665680_31750.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\nKey skeySpec = KeyGenerator.getInstance(\"AES\").generateKey();\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec);\nSystem.out.println(Arrays.toString(cipher.doFinal(new byte[] { 0, 1, 2, 3 })));\n", "idx": 235}
{"project": "cipher", "commit_id": "Snippet41807894_23789.java", "target": 0, "func": "    EnvoiRequete(cliSock, new RequeteBIMAP(TypesReq.GET_NEXT_BILL, params));\n    ReponseP rep = (ReponseP)LectureReponse(cliSock);\n\n    if(rep.getTypeRet() == Reponse.TypesRep.OK){\n        try {\n            KeyStore.SecretKeyEntry secretKeyEntry = (KeyStore.SecretKeyEntry) cliKs.getEntry(\"clesecComptChiffr\", new KeyStore.PasswordProtection(\"pass\".toCharArray()));\n            SecretKey cle = secretKeyEntry.getSecretKey();\n\n            Cipher dechiffr = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"BC\");\n            dechiffr.init(Cipher.DECRYPT_MODE, cle);\n\n            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(dechiffr.doFinal((byte[])rep.getParams().get(0)));\n\n            String[][] stringArray2= null;\n             try (ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream)) {\n                stringArray2 = (String[][]) objectInputStream.readObject();\n             }\n\n            ListeFactures lf= new ListeFactures(stringArray2);\n            lf.setVisible(true);\n\n            lastGetID= Integer.valueOf(stringArray2[0][0]);\n            FieldFacture.setText(stringArray2[0][0]);\n\n        } catch (ClassNotFoundException | InvalidKeyException | NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException | IOException | IllegalBlockSizeException | BadPaddingException | UnrecoverableEntryException | KeyStoreException ex) {\n            Logger.getLogger(Comptable.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n    else\n        JOptionPane.showMessageDialog(null, rep.getParams().get(0));\n", "idx": 236}
{"project": "cipher", "commit_id": "Snippet28120370_10282.java", "target": 0, "func": "public static String Cripto(String Password)\n{\n    String PasswordCripto = \"\";\n    try\n    {\n        String encryptionKey = \"anyEncryptionString\";\n        MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n        messageDigest.update(encryptionKey.getBytes(\"UTF-8\"), 0, encryptionKey.length());\n        byte[] encryptionKeyBytes = messageDigest.digest();\n\n        SecretKeySpec Key = new SecretKeySpec(encryptionKeyBytes,\"DESede\");\n        Cipher cipher = Cipher.getInstance(\"DESEDE/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, Key);\n        byte[] encryptedBytes = cipher.doFinal(Password.getBytes(\"UTF-8\"));\n\n        PasswordCripto = new String(Base64.encode(encryptedBytes, Base64.DEFAULT), \"UTF-8\");\n    } catch(Exception e) { }\n    return PasswordCripto ;\n}\n", "idx": 237}
{"project": "cipher", "commit_id": "Snippet18498887_1549.java", "target": 0, "func": "private static final String DECRYPTION_ALGORITHM = \"blowfish/ecb/nopadding\";\nprivate static final String KEY_ALGORITHM = \"blowfish\";\nprivate static byte[] decrypt(byte[] keyData, byte[] valueData) throws Exception {\n    SecretKeySpec keySpec = new SecretKeySpec(keyData, KEY_ALGORITHM);\n    Cipher cipher = Cipher.getInstance(DECRYPTION_ALGORITHM);\n    cipher.init(Cipher.DECRYPT_MODE, keySpec);\n    return cipher.doFinal(valueData);\n}\n", "idx": 238}
{"project": "cipher", "commit_id": "Snippet47075678_29072.java", "target": 0, "func": "import java.util.Base64;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\n\npublic class Main {\n\nprivate static final String ALGO_NAME = \"DESede/ECB/NoPadding\";\nprivate static final char[] HEX_DIGIT = { '0', '1', '2', '3', '4', '5',\n        '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n\npublic static byte[] hexStringToByteArray(String s) {\n    int len = s.length();\n    byte[] data = new byte[len / 2];\n    for (int i = 0; i < len; i += 2) {\n        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)\n                + Character.digit(s.charAt(i+1), 16));\n    }\n    return data;\n}\n\n\npublic static void main(String[] args) throws Exception {\n\n    String defKey = \"CA:FE:BA:BE:FF:FF:FF:FF:XY:XY+1:XY+2:XY+3:XY+4:XY+5:FF:FF:WZ:WZ+1:WZ+2:WZ+3:WZ+4:WZ+5:FF:FF\";\n    String encryptedText = \"6t8Z5bKl5ybJL+MiFerNBmiTDS7wlTEUdWNwJJApWmQ=\";\n    byte[] input = Base64.getDecoder().decode(encryptedText);\n\n    for (int i = 0; i < 251; i++)\n        for (int j = 0; j < 251; j++) {\n            String[] split = defKey.split(\":\");\n            for (int k = 0; k < 6; k++) {\n                String a = HEX_DIGIT[(i + k) / 16] + \"\" + HEX_DIGIT[(i + k) % 16];\n                split[8 + k] = a;\n                a = HEX_DIGIT[(j + k) / 16] + \"\" + HEX_DIGIT[(j + k) % 16];\n                split[16 + k] = a;\n            }\n\n            String secretKey = \"\";\n            for (String q: split) {\n                secretKey += q;\n            }\n\n            DESedeKeySpec keySpec = new DESedeKeySpec(hexStringToByteArray(secretKey));\n            SecretKeyFactory factory = SecretKeyFactory.getInstance(\"DESede\");\n            SecretKey key = factory.generateSecret(keySpec);\n\n\n            Cipher cipher = Cipher.getInstance(ALGO_NAME);\n            cipher.init(Cipher.DECRYPT_MODE, key);\n\n            byte[] plainText = cipher.doFinal(input);\n            String decrypted = new String (plainText);\n\n            if (decrypted.toLowerCase().contains(\"the\"))\n                System.out.println(decrypted);\n        }\n}\n", "idx": 239}
{"project": "cipher", "commit_id": "Snippet33082516_15122.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/PKCS5Padding\")", "idx": 240}
{"project": "cipher", "commit_id": "Snippet20737376_3323.java", "target": 0, "func": "        FileInputStream  file = new FileInputStream(\"src/image/AA.jpg\");\n        FileOutputStream output = new FileOutputStream(\"src/image/AAA.jpg\");\n        byte j[]=\"12345678\".getBytes();\n        SecretKeySpec kye = new SecretKeySpec(j,\"DES\");\n        System.out.println(kye);\n        Cipher enc = Cipher.getInstance(\"DES\");\n        enc.init(Cipher.DECRYPT_MODE,kye);\n        CipherOutputStream cos = new CipherOutputStream(output, enc);\n        byte[] buf = new byte[1024];\n        int read;\n        while((read=file.read(buf))!=-1){\n            cos.write(buf,0,read);\n        }\n        file.close();\n        output.flush();\n        cos.close();\n", "idx": 241}
{"project": "cipher", "commit_id": "Snippet25051085_7379.java", "target": 0, "func": "        FileInputStream in = new FileInputStream(\"YOUR DIRECTORY\");\n        Cipher decryptionCipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, createKey(password));\n\n        CipherInputStream ciphIn = new CipherInputtStream(in, decryptionCipher);\n\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        byte[] buffer = new byte[8];\n        int i = in.read(buffer);\n        while (i != -1)\n        {\n            //just like a file copy\n            out.write(buffer, 0, i)\n            i = in.read(buffer);\n        }\n\n        /*\n         * YOUR NATIVE DATA UNENCRYPTED\n         */\n        byte[] nativeFileData = out.toByteArray();\n\n        ciphIn.close();\n        in.close();\n", "idx": 242}
{"project": "cipher", "commit_id": "Snippet32996278_15028.java", "target": 0, "func": "import java.security.Key;\nimport java.security.MessageDigest;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class MainClass {\n\nprivate static final String ALGORITHM = \"AES\";\nprivate static final String keyValue = \"thisisasecretkey\";\nfinal protected static char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n\npublic static void main(String[] args) throws Exception {\n    System.out.println(encrypt(\"hello world\"));\n}\n\npublic static String encrypt(String valueToEnc) throws Exception {\n  Key key = generateKey();\n  Cipher cipher = Cipher.getInstance(ALGORITHM);\n  cipher.init(Cipher.ENCRYPT_MODE, key);\n  byte[] encValue = cipher.doFinal(valueToEnc.getBytes());\n  System.out.println(bytesToHex(encValue));\n  return new String(encValue);\n}\n\nprivate static Key generateKey() throws Exception {\n  byte[] key2 = keyValue.getBytes(\"UTF-8\");\n  MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n  key2 = sha.digest(key2);\n  key2 = Arrays.copyOf(key2, 16);\n\n  Key key = new SecretKeySpec(key2, ALGORITHM);\n  return key;\n}\n\npublic static String bytesToHex(byte[] bytes) {\n    char[] hexChars = new char[bytes.length * 2];\n    for ( int j = 0; j < bytes.length; j++ ) {\n        int v = bytes[j] & 0xFF;\n        hexChars[j * 2] = hexArray[v >>> 4];\n        hexChars[j * 2 + 1] = hexArray[v & 0x0F];\n    }\n    return new String(hexChars);\n }\n\n}\n", "idx": 243}
{"project": "cipher", "commit_id": "Snippet42211257_24182.java", "target": 0, "func": "ObservableList<Access> userData;\nuserData = FXCollections.observableArrayList();\n...\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, key128);\nFile file = new File(\"./resources/saves\" + username);\nfile.createNewFile();\nCipherOutputStream cipherOut = new CipherOutputStream(\n        new BufferedOutputStream(new FileOutputStream(file, true)), cipher);\nObjectOutputStream out = new ObjectOutputStream(cipherOut);\n\nuserData.forEach((item) -> {\n    try {\n        out.writeObject(new SealedObject(item, cipher));\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n});\nout.flush();\nout.close();\n", "idx": 244}
{"project": "cipher", "commit_id": "Snippet11115834_35325.java", "target": 0, "func": "import javax.crypto.Cipher;  \nimport javax.crypto.SecretKey;  \nimport javax.crypto.spec.SecretKeySpec;  \n\npublic class JcaTest {  \nprivate Cipher ecipher;  \nprivate Cipher dcipher;  \n\nJcaTest(SecretKey key) {  \n    try {  \n        ecipher = Cipher.getInstance(\"AES\");  \n        dcipher = Cipher.getInstance(\"AES\");  \n        ecipher.init(Cipher.ENCRYPT_MODE, key);  \n        dcipher.init(Cipher.DECRYPT_MODE, key);  \n    } catch (Exception e) {  \n        System.out.println(\"Failed in initialization\");  \n    }  \n}  \n\npublic String encrypt(String str) {  \n    try {  \n        byte[] utf8 = str.getBytes(\"UTF-8\");  \n        byte[] enc = ecipher.doFinal(utf8);  \n\n        return new sun.misc.BASE64Encoder().encode(enc);  \n    } catch (Exception e) {  \n        System.out.println(\"Failed in Encryption\");  \n    }  \n    return null;  \n}  \n\npublic String decrypt(String str) {  \n    try {  \n        byte[] dec = new sun.misc.BASE64Decoder().decodeBuffer(str);  \n\n        byte[] utf8 = dcipher.doFinal(dec);  \n\n        return new String(utf8, \"UTF-8\");  \n    } catch (Exception e) {  \n        System.out.println(\"Failed in Decryption\");  \n    }  \n    return null;  \n}  \n", "idx": 245}
{"project": "cipher", "commit_id": "Snippet30355879_12506.java", "target": 0, "func": "    public static String decode( String secret ) {\n    String retString = \"\";\n    try {\n        byte[] kbytes = \"jaas is the way\".getBytes();\n        SecretKeySpec key = new SecretKeySpec( kbytes, \"Blowfish\" );\n\n        BigInteger n = new BigInteger( secret, 16 );\n        byte[] encoding = n.toByteArray();\n\n        Cipher cipher = Cipher.getInstance( \"Blowfish\" );\n        cipher.init( Cipher.DECRYPT_MODE, key );\n        byte[] decode = cipher.doFinal( encoding );\n        retString = new String( decode );\n    } catch (Exception ignore) {\n        ignore.printStackTrace();\n    }\n\n    return retString;\n}\n", "idx": 246}
{"project": "cipher", "commit_id": "Snippet11615132_35647.java", "target": 0, "func": "public static synchronized byte[] encryptPrivateKey(\n        ElGamalPrivateKey privateKey, byte[] hashedAnsBytes)\n        throws NoSuchAlgorithmException, NoSuchPaddingException,\n        InvalidKeyException, IllegalBlockSizeException,\n        BadPaddingException, NoSuchProviderException, IOException {\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec key = new SecretKeySpec(hashedAnsBytes, \"SHA256\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    ObjectOutput out = new ObjectOutputStream(bos);\n    out.writeObject(privateKey);\n    out.close();\n    bos.close();\n    byte[] pvtKeyBytes = c.doFinal(bos.toByteArray());\n    return pvtKeyBytes;\n}\n", "idx": 247}
{"project": "cipher", "commit_id": "Snippet40175319_22072.java", "target": 0, "func": "public static SecretKey generateKey() \n    throws NoSuchAlgorithmException, InvalidKeySpecException \n{ \n    return secret = new SecretKeySpec(password.getBytes(), \"AES\"); \n}\n\npublic static byte[] encryptMsg(String message, SecretKey secret)\n    throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidParameterSpecException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException \n{ \n   /* Encrypt the message. */\n   Cipher cipher = null; \n   cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n   cipher.init(Cipher.ENCRYPT_MODE, secret); \n   byte[] cipherText = cipher.doFinal(message.getBytes(\"UTF-8\")); \n   return cipherText; \n}\n\npublic static String decryptMsg(byte[] cipherText, SecretKey secret) \n    throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidParameterSpecException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException \n{\n    /* Decrypt the message, given derived encContentValues and initialization vector. */\n    Cipher cipher = null;\n    cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, secret); \n    String decryptString = new String(cipher.doFinal(cipherText), \"UTF-8\");\n    return decryptString; \n}\n", "idx": 248}
{"project": "cipher", "commit_id": "Snippet38578903_20521.java", "target": 0, "func": "    String plainTextKey = \"STRING_KEY\";\n    String plainText = \"WORD_TO_ENCRYPT\";\n    // Encrypt where jo is input, and query is output and ENCRPYTION_KEy is key\n    //String inputtt = \"some clear text data\";\n    byte[] input = new byte[0];\n    String skyKey;\n\n    input = plainText.getBytes(\"utf-8\");\n    MessageDigest md;\n    md = MessageDigest.getInstance(\"MD5\");\n    byte[] thedigest = md.digest(plainTextKey.getBytes(\"UTF-8\"));\n    SecretKeySpec skc = new SecretKeySpec(thedigest, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skc);\n    byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n    int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n    ctLength += cipher.doFinal(cipherText, ctLength);\n    String encode = Base64.encode(cipherText);\n    System.out.println(encode);\n", "idx": 249}
{"project": "cipher", "commit_id": "Snippet3151077_30635.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class MainClass {\n  public static void main(String[] args) throws Exception {\n    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());    \n    byte[] input = \"www.java2s.com\".getBytes();\n    byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, \n                 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, \n                 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, \n                 0x15, 0x16, 0x17 };\n\n    SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n    System.out.println(new String(input));\n\n    // encryption pass\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n\n    byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n    int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n    ctLength += cipher.doFinal(cipherText, ctLength);\n    System.out.println(new String(cipherText));\n    System.out.println(ctLength);\n\n    // decryption pass\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] plainText = new byte[cipher.getOutputSize(ctLength)];\n    int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);\n    ptLength += cipher.doFinal(plainText, ptLength);\n    System.out.println(new String(plainText));\n    System.out.println(ptLength);\n  }\n}\n", "idx": 250}
{"project": "cipher", "commit_id": "Snippet23269981_5612.java", "target": 0, "func": "public static void main(String[] args) {\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"text_to_crypt_with_aes\");\n        String clearText = sb.toString();\n        StringBuilder sbKey = new StringBuilder(\" 4288f0b8060ca1b \");\n        for (int i = 0; i < 7; i++) {\n            sbKey.append(\"\\0\");\n        }\n\n        try {\n\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n            Key key = new SecretKeySpec(sbKey.toString().getBytes(\"UTF-8\"),\n                    \"AES\");\n\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] encryptedMessageInBytes = cipher.doFinal(clearText\n                    .getBytes(\"UTF-8\"));\n            byte[] b64 = Base64.encodeBase64(encryptedMessageInBytes);\n            String scrambled_text = new String(b64, Charset.forName(\"US-ASCII\"));\n            System.out.println(scrambled_text);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "idx": 251}
{"project": "cipher", "commit_id": "Snippet16971126_265.java", "target": 0, "func": "String fileName = \"result.dat\"; //some result file\n\n//You may use any combination, but you should use the same for writing and reading\nSecretKey key64 = new SecretKeySpec( new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 }, \"Blowfish\" );\nCipher cipher = Cipher.getInstance( \"Blowfish\" );\n\n//Code to write your object to file\ncipher.init( Cipher.ENCRYPT_MODE, key64 );\nPerson person = new Person(); //some object to serialise\nSealedObject sealedObject = new SealedObject( person, cipher);\nCipherOutputStream cipherOutputStream = new CipherOutputStream( new BufferedOutputStream( new FileOutputStream( fileName ) ), cipher );\nObjectOutputStream outputStream = new ObjectOutputStream( cipherOutputStream );\noutputStream.writeObject( sealedObject );\noutputStream.close();\n\n//Code to read your object from file\ncipher.init( Cipher.DECRYPT_MODE, key64 );\nCipherInputStream cipherInputStream = new CipherInputStream( new BufferedInputStream( new FileInputStream( fileName ) ), cipher );\nObjectInputStream inputStream = new ObjectInputStream( cipherInputStream );\nSealedObject sealedObject = (SealedObject) inputStream.readObject();\nPerson person1 = (Person) sealedObject.getObject( cipher );\n", "idx": 252}
{"project": "cipher", "commit_id": "Snippet41286149_23259.java", "target": 0, "func": "public void encrypt(File sourceFile, File targetFile) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, IOException {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, this.secretKey);\n    try(InputStream inputStream = new FileInputStream(sourceFile)){\n        try(OutputStream outputStream = new FileOutputStream(targetFile)){\n            byte[] chunk = new byte[8192];\n            int chunkLen = 0;\n            while ((chunkLen = inputStream.read(chunk)) != -1) {\n                byte[] encrytedBytes = cipher.update(chunk);\n                outputStream.write(encrytedBytes);\n            }\n            byte[] finalBytes =  cipher.doFinal();\n            if(finalBytes!=null) {\n                outputStream.write(finalBytes);\n            }\n        }\n    }\n}\n\npublic void decrypt(File encryptedFile, File targetFile) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, IOException {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, this.secretKey);\n    try(InputStream inputStream = new FileInputStream(encryptedFile)){\n        try(OutputStream outputStream = new FileOutputStream(targetFile)){\n            byte[] chunk = new byte[8192];\n            int chunkLen = 0;\n            while ((chunkLen = inputStream.read(chunk)) != -1) {\n                byte[] decrytedBytes = cipher.update(chunk);\n                outputStream.write(decrytedBytes);\n            }\n            byte[] finalBytes =  cipher.doFinal();\n            if(finalBytes!=null) {\n                outputStream.write(finalBytes);\n            }\n        }\n    }\n}\n", "idx": 253}
{"project": "cipher", "commit_id": "Snippet46738664_28819.java", "target": 0, "func": "            String strToDecrypt=\"6t8Z5bKl5ybJL+MiFerNBmiTDS7wlTEUdWNwJJApWmQ==\";\n            byte[] input = strToDecrypt.getBytes();\n\n            //Decrypt\n            Cipher b = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n            b.init(Cipher.DECRYPT_MODE, keySpec);\n            byte output[] = b.doFinal(input);\n            String out = new String(output);\n            System.out.println(new String(out));\n", "idx": 254}
{"project": "cipher", "commit_id": "Snippet20803436_3407.java", "target": 0, "func": "  public static void main(String[]args){\n\n      String imageName[] ={\"A01\",\"A02\",\"A03\",\"B01\",\"B02\",\"B03\"};\n\n      String imageNameEncrypy[] ={\"A001\",\"A002\",\"A003\",\"B001\",\"B002\",\"B003\"};\n\n      for(int i=0;i<imageName.length;i++){ \n\n      try{\n\n        //FileInputStream file;\n\n        FileInputStream  file = new FileInputStream(\"src/image2/\"+imageName[i]+\".jpg\");\n\n        FileOutputStream output = new FileOutputStream(\"src/image2/\"+imageNameEncrypy[i]+\".jpg\");\n\n        byte j[]=\"NiTh5252\".getBytes();\n\n        SecretKeySpec kye = new SecretKeySpec(j,\"DES\");\n\n        System.out.println(kye);\n\n        Cipher enc = Cipher.getInstance(\"DES\");\n\n        enc.init(Cipher.ENCRYPT_MODE,kye);\n\n        CipherOutputStream cos = new CipherOutputStream(output, enc);\n\n        byte[] buf = new byte[1024];\n\n        int read;\n\n        while((read=file.read(buf))!=-1){\n\n            cos.write(buf,0,read);\n\n        }\n\n        file.close();\n\n        output.flush();\n\n        cos.close();\n\n         JOptionPane.showMessageDialog(null,\"Suscess\");\n\n    }catch(Exception e){\n\n         JOptionPane.showMessageDialog(null,e);\n\n    }\n\n      }\n\n     }\n", "idx": 255}
{"project": "cipher", "commit_id": "Snippet46713558_28788.java", "target": 0, "func": "public class des {\n\n    public static void main(String[] args) throws Exception {\n        KeyGenerator keygen=KeyGenerator.getInstance(\"DES\");\n        SecretKey secretkey=keygen.generateKey();\n        Cipher encrypter=Cipher.getInstance(\"DES\");\n        Cipher decrypter=Cipher.getInstance(\"DES\");\n\n        String inputText=JOptionPane.showInputDialog(\"Give input:\");\n\n        encrypter.init(Cipher.ENCRYPT_MODE,secretkey);\n        byte[] encrypted=encrypter.doFinal(inputText.getBytes());\n\n        decrypter.init(Cipher.DECRYPT_MODE,secretkey);\n        byte[] decrypted=decrypter.doFinal(encrypted);\n\n        JOptionPane.showMessageDialog(null,\"Encrypted :\"+new String(encrypted)+\"\\n Decrypted :\"+new String(decrypted));\n        System.exit(0);\n\n    }\n\n}\n", "idx": 256}
{"project": "cipher", "commit_id": "Snippet18101545_1136.java", "target": 0, "func": "public void enc(){\n    byte[] rawKey = getRawKey(\"my_key\".getBytes());\n    SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(\"my_message\".getBytes());\n    String result=Base64.encodeToString(encrypted, Base64.DEFAULT);\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(256, sr); \n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n", "idx": 257}
{"project": "cipher", "commit_id": "Snippet40445760_22311.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Base64;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\n\npublic class Criptografia {\n    byte[] chave = \"chave de 16bytes\".getBytes();\n\n    public String encriptaAES(String chaveCriptografada)\n            throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {\n        try {\n\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            byte[] mensagem = chaveCriptografada.getBytes();\n            cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(chave, \"AES\"));\n            chaveCriptografada = cipher.doFinal(mensagem).toString();\n\n\n\n            chaveCriptografada  =Base64.getUrlEncoder().encodeToString(chaveCriptografada.getBytes(\"utf-8\"));\n\n\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n\n            e.printStackTrace();\n        }\n\n        return chaveCriptografada;\n\n    }\n\n\n    public String descriptografaAES(String chaveCriptografada) throws NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException{\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        byte[] base64decodedBytes = Base64.getUrlDecoder().decode(chaveCriptografada);\n\n        chaveCriptografada= base64decodedBytes.toString();\n\n\n         try {\n            cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(this.chave, \"AES\"));\n             byte[] decrypted = cipher.doFinal(chaveCriptografada.getBytes(\"UTF-8\"));\n             chaveCriptografada=decrypted.toString();\n\n        } catch (InvalidKeyException e) {\n\n            e.printStackTrace();\n        }\n\n\n\n        return chaveCriptografada;\n\n\n    }   \n\n}\n\nException in thread \"main\" javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher\n    at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:922)\n    at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:833)\n    at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:446)\n    at javax.crypto.Cipher.doFinal(Cipher.java:2165)\n    at Criptografia.descriptografaAES(Criptografia.java:47)\n    at Run.main(Run.java:15)\n", "idx": 258}
{"project": "cipher", "commit_id": "Snippet20045235_2691.java", "target": 0, "func": "    SecretKeySpec sks = null;\n    try {\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(\"exSeed\".getBytes());\n        KeyGenerator kg = KeyGenerator.getInstance(\"AES\");\n        kg.init(128, sr);\n        sks = new SecretKeySpec((kg.generateKey()).getEncoded(), \"AES\");\n    } catch (Exception e) {\n        Log.e(TAG, \"AES secret key spec error\");\n    }\n\n    byte[] decodedBytes = null;\n    try {\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.DECRYPT_MODE, sks);\n        decodedBytes = c.doFinal(key);\n    } catch (Exception e) {\n        Log.e(TAG, \"AES decryption error\");\n    }\n    String decoded = new String(decodedBytes);\n", "idx": 259}
{"project": "cipher", "commit_id": "Snippet27785741_9957.java", "target": 0, "func": "public static String encrypt(String strToEncrypt) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        setEncryptedString(Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))));\n    }\n}\n", "idx": 260}
{"project": "cipher", "commit_id": "Snippet30369390_12515.java", "target": 0, "func": "public static SecretKeySpec createSecretKey(String mKey) {\n    SecretKeySpec secretKey = null;\n    MessageDigest sha = null;\n    try {\n        byte[] key = mKey.getBytes(\"UTF-8\");\n        sha = MessageDigest.getInstance(\"SHA-1\");\n        key = sha.digest(key);\n        key = Arrays.copyOf(key, 16); // use only first 128 bit\n        secretKey = new SecretKeySpec(key, \"AES\");\n    } catch (NoSuchAlgorithmException ex) {\n        System.out.println(\"- createSecretKey > NoSuchAlgorithmException:\" + ex.getMessage());\n    } catch (UnsupportedEncodingException ex) {\n        System.out.println(\"- createSecretKey > UnsupportedEncodingException:\" + ex.getMessage());\n    } catch (Exception ex) {\n        System.out.println(\"- createSecretKey > Exception:\" + ex.getMessage());\n    }\n    return secretKey;\n}\n\npublic static String encryptAES(String stringToEncrypt, SecretKeySpec secretKey) {        //Rijndael\n    String encryptedString = null;\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        encryptedString = Base64.encodeBase64String(cipher.doFinal(stringToEncrypt.getBytes(\"UTF-8\")));\n    } catch (Exception ex) {\n        System.out.println(\"- encryptAES > Exception: \" + ex.getMessage());\n    }\n    return encryptedString;\n}\n", "idx": 261}
{"project": "cipher", "commit_id": "Snippet34959528_16924.java", "target": 0, "func": "try {\n    encrypt(filePath);\n} catch (IOException | NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException e) {\n    e.printStackTrace();\n}\n\npublic void encrypt(String image) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,\n            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 }; //Choose a key wisely\n    FileInputStream fis = new FileInputStream(image);\n    FileOutputStream fos = new FileOutputStream(image);\n\n    // Length is 16 byte\n    SecretKeySpec sks = new SecretKeySpec(keyBytes, \"AES\");\n    // Create cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    // Wrap the output stream\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    // Write bytes\n    int b;\n    byte[] d = new byte[8];\n    while((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    cos.flush();\n    cos.close();\n    fis.close();\n}\n", "idx": 262}
{"project": "cipher", "commit_id": "Snippet46713247_28787.java", "target": 0, "func": "import javax.crypto.spec.*;\nimport javax.crypto.*;\nimport javax.swing.*;\npublic class des \n{\n    public static void main(String ar[]) throws Exception\n    {\n        KeyGenerator keygen=KeyGenerator.getInstance(\"DES\");\n        SecretKey secretkey=keygen.generateKey();\n        Cipher cip=Cipher.getInstance(\"DES\");\n\n        String inputText=JOptionPane.showInputDialog(\"Give input:\");\n\n        byte[] iv=cip.getIV();\n        IvParameterSpec ps=new IvParameterSpec(iv);\n\n        cip.init(Cipher.ENCRYPT_MODE,secretkey);\n        byte[] encrypted=cip.doFinal(inputText.getBytes());\n\n        cip.init(Cipher.DECRYPT_MODE,secretkey,ps);\n        byte[] decrypted=cip.doFinal(encrypted);\n\n        JOptionPane.showMessageDialog(null,\"Encrypted :\"+new String(encrypted)+\"\\n Decrypted :\"+new String(decrypted));\n        System.exit(0);\n    }\n}\n", "idx": 263}
{"project": "cipher", "commit_id": "Snippet29730647_11799.java", "target": 0, "func": "import de.flexiprovider.api.keys.SecretKey;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.NoSuchProviderException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.crypto.Cipher;\nimport javax.crypto.NoSuchPaddingException;\nimport de.flexiprovider.core.FlexiCoreProvider;\nimport de.flexiprovider.core.rc5.RC5KeyGenerator;\nimport de.flexiprovider.core.rc5.RC5ParameterSpec;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.Security;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\n\npublic class RC5moje {\n\n    private int roundNumer;\n    private int wordSize;\n\n    private SecretKey key;\n    private RC5ParameterSpec RC5params;\n    private Cipher rc5;\n\n   public RC5moje(int roundNumer, int wordSize) {\n        this.roundNumer = roundNumer;\n        this.wordSize = wordSize;\n\n        Security.addProvider(new FlexiCoreProvider());\n        this.RC5params = new RC5ParameterSpec(roundNumer, wordSize);\n        try {\n            this.rc5 = Cipher.getInstance(\"RC5\", \"FlexiCore\");\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(RC5moje.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (NoSuchProviderException ex) {\n            Logger.getLogger(RC5moje.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (NoSuchPaddingException ex) {\n            Logger.getLogger(RC5moje.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        RC5KeyGenerator rC5KeyGenerator = new RC5KeyGenerator();\n        this.key = rC5KeyGenerator.generateKey();\n\n    }\n\n    public void encrypt(String inFile, String outFile) {\n        try {\n\n            rc5.init(Cipher.ENCRYPT_MODE, key, RC5params);\n\n            FileInputStream fis = new FileInputStream(inFile);\n            FileOutputStream fos = new FileOutputStream(outFile);\n            CipherOutputStream cos = new CipherOutputStream(fos, rc5);\n\n            byte[] block = new byte[8];\n            int i;\n            while ((i = fis.read(block)) != -1) {\n                cos.write(block, 0, i);\n            }\n            cos.close();\n\n        } catch (InvalidKeyException ex) {\n            Logger.getLogger(RC5moje.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (InvalidAlgorithmParameterException ex) {\n            System.out.println(ex.getMessage());\n            Logger.getLogger(RC5moje.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (IOException ex) {\n            Logger.getLogger(RC5moje.class.getName()).log(Level.SEVERE, null, ex);\n        }\n\n    }\n\n    public void decrypt(String inFile, String outFile) {\n\n        try {\n            rc5.init(Cipher.DECRYPT_MODE, key,RC5params);\n\n            FileInputStream fis;\n\n            fis = new FileInputStream(inFile);\n\n            FileOutputStream fos = new FileOutputStream(outFile);\n            CipherInputStream cis = new CipherInputStream(fis, rc5);\n\n            byte[] block = new byte[8];\n            int i;\n\n            while ((i = cis.read(block)) != -1) {\n                fos.write(block, 0, i);\n            }\n            fos.close();\n        } catch (InvalidKeyException ex) {\n            Logger.getLogger(RC5moje.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (FileNotFoundException ex) {\n            Logger.getLogger(RC5moje.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (IOException ex) {\n            Logger.getLogger(RC5moje.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n}\n", "idx": 264}
{"project": "cipher", "commit_id": "Snippet45737528_27771.java", "target": 0, "func": "public static String decrypt(String sessionId)\n{\n    try\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        final String decryptedSessionId = new String(cipher.doFinal(Base64.decodeBase64(sessionId)));\n        return decryptedSessionId;\n    }\n    catch (Exception e)\n    {\n        e.printStackTrace();\n\n    }\n    return null;\n}\n", "idx": 265}
{"project": "cipher", "commit_id": "Snippet29832434_11904.java", "target": 0, "func": "import java.security.NoSuchAlgorithmException;\nimport java.security.NoSuchProviderException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic final class PwdCipher {\n\n    private static final Logger LOG = LoggerFactory.getLogger(PwdCipher.class);\n\n    private static final int BASE64_ARG0 = 32;\n\n    private static final String SECRET = \"tvnw63ufg9gh5392\";\n\n    private static byte[] linebreak = {};\n    private static SecretKey key;\n    private static Cipher cipher;\n    private static Base64 coder;\n\n    static {\n            key = new SecretKeySpec(SECRET.getBytes(), \"AES\");\n            try {\n                cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n            } catch (NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException e) {\n                LOG.debug(\"Erro ao criar encriptador.\", e);\n            }\n            coder = new Base64(BASE64_ARG0, linebreak, true);\n    }\n\n    private PwdCipher(){\n    }\n\n    public static synchronized String encrypt(String plainText) {\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] cipherText = cipher.doFinal(plainText.getBytes());\n            return new String(coder.encode(cipherText));\n        } catch (Exception e) {\n            throw new GdocException(\"Erro ao encriptar senha.\", e);\n        }\n    }\n\n    public static synchronized String decrypt(String codedText) {\n        try {\n            byte[] encypted = coder.decode(codedText.getBytes());\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] decrypted = cipher.doFinal(encypted);\n            return new String(decrypted);\n        } catch (Exception e) {\n            throw new GdocException(\"Erro ao decriptar senha.\", e);\n        }\n    }\n\n}\n", "idx": 266}
{"project": "cipher", "commit_id": "Snippet42179694_24147.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");", "idx": 267}
{"project": "cipher", "commit_id": "Snippet17570834_734.java", "target": 0, "func": "      public class Cryptography {\n\n    private String encryptedFileName = \"Enc_File2.txt\";\n    private static String algorithm = \"AES\";\n    private static final int outputKeyLength = 256;\n    static SecretKey yourKey = null;\n\n    SQLiteDatabase database;\n    DBHelper helper;\n    Context context;\n\n    //saveFile(\"Hello From CoderzHeaven testing :: Gaurav Wable\");\n    //decodeFile();\n\n    public Cryptography (Context context) {\n        this.context = context;\n        helper = new DBHelper(context);\n        database = helper.getWritableDatabase();\n    }\n\n\n    public String encryptString(String data) {\n        char[] p = { 'p', 'a', 's', 's' };\n        //SecretKey yourKey = null;\n        byte[] keyBytes = null;\n        byte[] filesBytes = null;\n        try {\n            if(this.yourKey == null) {\n                Log.d(\"key\", \"instance null\");\n                Cursor cursor = database.query(\"assmain\", new String[]{\"keyAvailability\"}, null, null, null, null, null);\n                cursor.moveToFirst();\n                if(cursor.getInt(cursor.getColumnIndex(\"keyAvailability\")) == 1) {\n                    Log.d(\"key\", \"exists in DB\");\n                    keyBytes = cursor.getBlob(cursor.getColumnIndex(\"key\"));\n                    cursor.close();\n                    filesBytes = encodeFile(keyBytes, data.getBytes());\n                } else {\n                    Log.d(\"key\", \"generating\");\n                    this.yourKey = generateKey(p, generateSalt().toString().getBytes()); \n                    filesBytes = encodeFile(this.yourKey, data.getBytes());\n                }\n            } else {\n                Log.d(\"key\", \"instance exists\");\n                //yourKey = this.yourKey;\n                filesBytes = encodeFile(yourKey, data.getBytes());\n            }\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        return new String(filesBytes);\n    }\n\n    public String decryptString(String data) {\n        String str = null;\n        byte[] decodedData = null;\n        try {\n            Log.d(\"To decrypt\", data);\n            if(this.yourKey == null) {\n                Log.d(\"key\", \"null\");\n                Cursor cursor = database.query(\"assmain\", new String[]{\"keyAvailability\"}, null, null, null, null, null);\n                cursor.moveToFirst();\n                if(cursor.getInt(cursor.getColumnIndex(\"keyAvailability\")) == 1) {\n                    Log.d(\"key\", \"exists in DB\");\n                    byte[] keyBytes = cursor.getBlob(cursor.getColumnIndex(\"key\"));\n                    cursor.close();\n                    decodedData = decodeFile(keyBytes, data.getBytes());\n                } else {\n                    Log.d(\"key\", \"Unavailable\");\n                    Toast.makeText(context, \"Key Unavailable\", Toast.LENGTH_SHORT).show();\n                }\n            } else {\n                Log.d(\"key\", \"instance exists\");\n                decodedData = decodeFile(this.yourKey, data.getBytes());\n            }\n            decodedData = decodeFile(yourKey, data.getBytes());\n            str = new String(decodedData);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return str;\n    }\n\n    public static SecretKey generateKey(char[] passphraseOrPin, byte[] salt)\n            throws NoSuchAlgorithmException, InvalidKeySpecException {\n        // Number of PBKDF2 hardening rounds to use. Larger values increase\n        // computation time. You should select a value that causes computation\n        // to take >100ms.\n        final int iterations = 1000;\n\n        // Generate a 256-bit key\n        //final int outputKeyLength = 256;\n\n        SecretKeyFactory secretKeyFactory = SecretKeyFactory\n                .getInstance(\"PBKDF2WithHmacSHA1\");\n        KeySpec keySpec = new PBEKeySpec(passphraseOrPin, salt, iterations,\n                outputKeyLength);\n        yourKey = secretKeyFactory.generateSecret(keySpec);\n        return yourKey;\n    }\n\n    public static SecretKey generateSalt() throws NoSuchAlgorithmException {\n        // Generate a 256-bit key\n        //final int outputKeyLength = 256;\n\n        SecureRandom secureRandom = new SecureRandom();\n        // Do *not* seed secureRandom! Automatically seeded from system entropy.\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n        keyGenerator.init(outputKeyLength, secureRandom);\n        SecretKey key = keyGenerator.generateKey();\n        return key;\n    }\n\n    public static byte[] encodeFile(SecretKey yourKey, byte[] fileData)\n            throws Exception {\n        byte[] data = yourKey.getEncoded();\n        SecretKeySpec skeySpec = new SecretKeySpec(data, 0, data.length,\n                algorithm);\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encrypted = cipher.doFinal(fileData);\n\n        return encrypted;\n    }\n\n    public static byte[] encodeFile(byte[] data, byte[] fileData)\n            throws Exception {\n        //byte[] data = yourKey.getEncoded();\n        SecretKeySpec skeySpec = new SecretKeySpec(data, 0, data.length,\n                algorithm);\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encrypted = cipher.doFinal(fileData);\n\n        return encrypted;\n    }\n\n    public static byte[] decodeFile(SecretKey yourKey, byte[] fileData)\n            throws Exception {\n        byte[] data = yourKey.getEncoded();\n        SecretKeySpec skeySpec = new SecretKeySpec(data, 0, data.length,\n                algorithm);\n        //Cipher cipher = Cipher.getInstance(algorithm);\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        byte[] decrypted = cipher.doFinal(fileData);\n\n        return decrypted;\n    }\n\n    public static byte[] decodeFile(byte[] data, byte[] fileData)\n            throws Exception {\n        //byte[] data = yourKey.getEncoded();\n        SecretKeySpec skeySpec = new SecretKeySpec(data, 0, data.length,\n                algorithm);\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        byte[] decrypted = cipher.doFinal(fileData);\n\n        return decrypted;\n    }\n    }\n", "idx": 268}
{"project": "cipher", "commit_id": "Snippet19294149_2131.java", "target": 0, "func": "        FileInputStream fis = new FileInputStream(new File(\"D:/QLurnVideo/inputVideo.mp4\"));\n        File outfile = new File(\"D:/QLurnVideo/encVideo.mp4\");\n        int read;\n        if(!outfile.exists())\n            outfile.createNewFile();\n        File decfile = new File(\"D:/QLurnVideo/decVideo.mp4\");\n        if(!decfile.exists())\n            decfile.createNewFile();\n        FileOutputStream fos = new FileOutputStream(outfile);\n        FileInputStream encfis = new FileInputStream(outfile);\n        FileOutputStream decfos = new FileOutputStream(decfile);\n        Cipher encipher = Cipher.getInstance(\"AES\");\n        Cipher decipher = Cipher.getInstance(\"AES\");\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n\n        SecretKey skey = kgen.generateKey();\n        //Lgo\n        encipher.init(Cipher.ENCRYPT_MODE, skey);\n        CipherInputStream cis = new CipherInputStream(fis, encipher);\n        decipher.init(Cipher.DECRYPT_MODE, skey);\n        CipherOutputStream cos = new CipherOutputStream(decfos,decipher);\n        while((read = cis.read())!=-1)\n                {\n                    fos.write((char)read);\n                    fos.flush();\n                }   \n        fos.close();\n        while((read=encfis.read())!=-1)\n        {\n            cos.write(read);\n            cos.flush();\n        }\ncos.close();\n", "idx": 269}
{"project": "cipher", "commit_id": "Snippet20266516_2919.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\npublic class AESencrp \n{\n private static final String ALGO = \"AES\";\nprivate static final byte[] keyValue = \n    new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't',\n 'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n public static String encrypt(String Data) throws Exception \n {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(Data.getBytes());\n    String encryptedValue = new BASE64Encoder().encode(encVal);\n    return encryptedValue.toString().trim();\n }\n public static String decrypt(String encryptedData) throws Exception \n {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    return decryptedValue.toString().trim();\n }   \n private static Key generateKey() throws Exception \n {\n    Key key = new SecretKeySpec(keyValue, ALGO);\n    return key;\n }\n }\n", "idx": 270}
{"project": "cipher", "commit_id": "Snippet31499222_13637.java", "target": 0, "func": "import java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class AHShelper {\n    public static String encrypt(String seed, String cleartext)\n            throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted)\n            throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted)\n            throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length() / 2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                    16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2 * buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n    }\n\n}\n", "idx": 271}
{"project": "cipher", "commit_id": "Snippet1418846_29955.java", "target": 0, "func": "public static byte[] encryptDES(byte[] message, byte[] key) {\n    byte[] encrypted = new byte[0];\n    try{\n        Cipher c = Cipher.getInstance(\"DES\");\n        c.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(key,\"DES\"));\n        encrypted = c.doFinal(message);\n    }\n    catch (Exception e) {\n        e.printStackTrace();\n    }\n    return encrypted;\n}\n", "idx": 272}
{"project": "cipher", "commit_id": "Snippet47401728_29365.java", "target": 0, "func": "public class EncProj1 {\n\n    // Class constants \n    public static final String ORIG_FPATH = \"test.jpg\";\n    public static final String ENC_FPATH = \"enc.jpg\";\n    public static final String DECRYP_FPATH = \"decryp.jpg\";\n\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, InstantiationException, IllegalAccessException, IOException {\n        //Define enc key\n        SecretKeySpec secretKey;\n        byte[] key;\n        String myKey = \"ThisIsAStrongPasswordForEncryptionAndDecryption\";\n\n        //Hash the key\n        //Define hash algo\n        MessageDigest sha = null;\n        //Convert key to bytes\n        key = myKey.getBytes(\"UTF-8\");\n        System.out.println(\"Orig key len:-> \" + key.length); //==> Debug <==\n        //Dedine hash algo\n        sha = MessageDigest.getInstance(\"SHA-1\");\n        //Hash the key\n        key = sha.digest(key);\n        //Pad the key... use only first 128 bit (16)\n        key = Arrays.copyOf(key, 16); \n        System.out.println(\"Padded key len:-> \" + key.length); //==> Debug <==\n        System.out.println(\"Hashed key:-> \" + new String(key, \"UTF-8\")); //==> Debug <==\n        //Define the key\n        secretKey = new SecretKeySpec(key, \"AES\");\n\n        //Get the file for encryption\n        byte[] fForEnc = getFileBytes(ORIG_FPATH);\n        System.out.println(\"File for enc:-> \" + fForEnc); //==> Debug <==\n\n        //Encrypt file\n        byte[] encrypted = encryptFile(secretKey, fForEnc);\n        System.out.println(\"Encrypted file:-> \" + encrypted); //==> Debug <==\n\n        //Save encrypted file\n        saveFile(encrypted, ENC_FPATH);\n        System.out.println(\"Encrypted file saved!\");\n\n        //Get enc file\n        byte[] encFile = getFileBytes(ENC_FPATH);\n        System.out.println(\"Enc File:-> \" + encFile); //==> Debug <==\n\n        //decrypt the file\n        byte[] decrypted = decryptFile(secretKey, encFile);\n        System.out.println(\"Decryp File:-> \" + decrypted); //==> Debug <==\n\n        //Save decryp file\n        saveFile(decrypted, DECRYP_FPATH);\n        System.out.println(\"Done\");\n\n\n    }\n\n    public static byte[] getFileBytes(String fPath) {\n\n              File f = new File(fPath);\n              InputStream is = null;\n              try {\n                  is = new FileInputStream(f);\n              } catch (FileNotFoundException e2) {\n                  e2.printStackTrace();\n              }\n              byte[] content = null;\n              try {\n                  content = new byte[is.available()];\n              } catch (IOException e1) {\n                  e1.printStackTrace();\n              }\n              try {\n                  is.read(content);\n              } catch (IOException e) {\n                  e.printStackTrace();\n              }\n\n              return content;\n          }\n\n    public static byte[] encryptFile(SecretKey secretKey, byte[] content) {\n              Cipher cipher;\n              byte[] encrypted = null;\n              try {\n                  //Define AES cipher\n                  cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n                  cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n                  //Encrypt a base64 version of the file bytes\n                  encrypted = Base64.encodeBase64(cipher.doFinal(content));\n\n              } catch (Exception e) {\n\n                  System.out.println(\"Error while encrypting: \" + e.toString());\n              }\n              return encrypted;\n\n          }\n\n    public static void saveFile(byte[] bytes, String fPath) throws IOException {\n\n              FileOutputStream fos = new FileOutputStream(fPath);\n              fos.write(bytes);\n              fos.close();\n\n          }\n\n    public static byte[] decryptFile(SecretKey secretKey, byte[] textCryp) {\n              Cipher cipher;\n              byte[] decrypted = null;\n              try {\n                  cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n\n                  cipher.init(Cipher.DECRYPT_MODE, secretKey);\n                  decrypted = cipher.doFinal(Base64.decodeBase64(textCryp));\n\n              } catch (Exception e) {\n\n                  System.out.println(\"Error while decrypting: \" + e.toString());\n              }\n              return decrypted;\n          }\n\n}\n", "idx": 273}
{"project": "cipher", "commit_id": "Snippet28940058_11015.java", "target": 0, "func": "    package cat.copernic.simetriccd;\n\n\nimport java.security.MessageDigest;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\nclass symetric{\n\n    public static String byteArrayToHexString(byte[] b){ \n        StringBuilder sb = new StringBuilder(b.length * 2); \n        for(int i = 0; i < b.length; i++){ \n            int v = b[i] & 0xff; if(v < 16){ \n                sb.append(\"0\"); \n            } \n            sb.append(Integer.toHexString(v)); \n        } return sb.toString(); \n    }\n\n    static SecretKey genKey(String text) {    \n        SecretKey sKey = null;  \n        int keySize = 256;      \n        try {\n            byte[] data = text.getBytes(\"UTF-8\");\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = md.digest(data);\n            byte[] key = Arrays.copyOf(hash, keySize/8);\n            sKey = new SecretKeySpec(key, \"AES\");      \n        } catch (Exception ex) {\n            System.err.println(\"Error generant la clau:\" + ex);  \n        }\n\n        return sKey;   \n    }\n\n    static String encryptData(String password, byte[] data) {\n        byte[] encryptedData = null;    \n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, genKey(password));\n            encryptedData =  cipher.doFinal(data);\n        } catch (Exception  ex) {  \n            System.err.println(\"Error xifrant les dades: \" + ex);          \n        } \n\n        return byteArrayToHexString(encryptedData);\n    }\n\n    static String decryptData(String password, byte[] data) {\n        byte[] decryptedData = null;    \n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, genKey(password));\n            decryptedData =  cipher.doFinal(data);\n        } catch (Exception  ex) {  \n            System.err.println(\"Error desxifrant les dades: \" + ex);          \n        } \n        return decryptedData.toString();\n    }\n\n}\n\n\n\npublic class Main { \n\n    public static void main(String[] args) {\n\n        //controlar numero de parametros que se pasan\n        if(args.length <= 1 || args.length > 3 || args.length == 2){\n            System.out.println(\"java Main -mode=encrypt|decrypt <message> <key>\");\n            return;\n        }\n\n        //sacamos los valores de los argumentos\n        String mode = args[0].split(\"=\")[1].toLowerCase();\n        byte[] mensage = args[1].getBytes();\n        String key = args[2];\n\n        if(mode.equals(\"encrypt\") || mode.equals(\"decrypt\")){\n            switch (mode) {\n            case \"encrypt\":\n                //System.out.println(\"encrypt\");\n                System.out.println(symetric.encryptData(key, mensage));\n                break;\n\n            case \"decrypt\":\n                //System.out.println(\"decrypt\");\n                System.out.println(symetric.decryptData(key, mensage));\n                break;\n\n            default:\n                break;\n            }\n        }else {\n            System.out.println(\"Solo coje valores encrypt/ENCRYPT o decrypt/DECRYPT\");\n        }\n    }\n}\n", "idx": 274}
{"project": "cipher", "commit_id": "Snippet16203619_39156.java", "target": 0, "func": "import sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport java.security.spec.KeySpec;\n\npublic\u00a0final\u00a0class\u00a0Encrypter\n{\n    public static final String DESEDE_ENCRYPTION = \"DESede\";\n\n    private\u00a0KeySpec\u00a0keySpec;\n    private\u00a0SecretKeyFactory\u00a0keyFactory;\n    private\u00a0Cipher\u00a0cipher;\n\n    private\u00a0static\u00a0final\u00a0String\u00a0UNICODE_FORMAT\u00a0=\u00a0\"UTF8\";\n\n    public\u00a0Encrypter(String\u00a0encryptionKey)\n        throws\u00a0Exception\n    {\n        byte[]\u00a0keyAsBytes\u00a0=\u00a0encryptionKey.getBytes(UNICODE_FORMAT);\n        keySpec\u00a0=\u00a0new\u00a0DESedeKeySpec(keyAsBytes);\n        keyFactory\u00a0=\u00a0SecretKeyFactory.getInstance(DESEDE_ENCRYPTION);\n        cipher\u00a0=\u00a0Cipher.getInstance(DESEDE_ENCRYPTION);\n    }\n\n    public\u00a0String\u00a0encryptString(String\u00a0unencryptedString)\n    {\n        SecretKey\u00a0key\u00a0=\u00a0keyFactory.generateSecret(keySpec);\n        cipher.init(Cipher.ENCRYPT_MODE,\u00a0key);\n        byte[]\u00a0cleartext\u00a0=\u00a0unencryptedString.getBytes(UNICODE_FORMAT);\n        byte[]\u00a0ciphertext\u00a0=\u00a0cipher.doFinal(cleartext);\n\n        BASE64Encoder\u00a0base64encoder\u00a0=\u00a0new\u00a0BASE64Encoder();\n        return\u00a0base64encoder.encode(ciphertext);\n    }\n\n    public\u00a0String\u00a0decryptString(String\u00a0encryptedString)\n    {\n        SecretKey\u00a0key\u00a0=\u00a0keyFactory.generateSecret(keySpec);\n        cipher.init(Cipher.DECRYPT_MODE,\u00a0key);\n        BASE64Decoder\u00a0base64decoder\u00a0=\u00a0new\u00a0BASE64Decoder();\n        byte[]\u00a0ciphertext\u00a0=\u00a0base64decoder.decodeBuffer(encryptedString);\n        byte[]\u00a0cleartext\u00a0=\u00a0cipher.doFinal(ciphertext);\n\n        return\u00a0bytesToString(cleartext);\n    }\n\n    private\u00a0static\u00a0String\u00a0bytesToString(byte[]\u00a0bytes)\n    {\n        StringBuilder\u00a0sb\u00a0=\u00a0new\u00a0StringBuilder();\n        for\u00a0(byte\u00a0aByte\u00a0:\u00a0bytes)\n        {\n            sb.append((char)\u00a0aByte);\n        }\n        return\u00a0sb.toString();\n    }\n}\n", "idx": 275}
{"project": "cipher", "commit_id": "Snippet15046796_38071.java", "target": 0, "func": "    import java.lang.Class.*;\n    import java.io.FileInputStream;\n    import java.io.FileOutputStream;\n    import java.io.IOException;\n    import java.io.InputStream;\n    import java.io.OutputStream;\n    import javax.crypto.Cipher;\n    import javax.crypto.CipherInputStream;\n    import javax.crypto.CipherOutputStream;\n    import javax.crypto.SecretKey;\n    import javax.crypto.SecretKeyFactory;\n    import javax.crypto.spec.DESKeySpec;\n\npublic class Example1 {\n\npublic String keyGen() {\n//create an array used for storing each character    \nchar array[] = new char[8];\n\n    //for loop checks for each character between '!' and '~'\n    for (char c0 = '!'; c0 <= '~'; c0++) {\n    array[0] = c0;\n\n    for (char c1 = '!'; c1 <= '~'; c1++) {\n    array[1] = c1;\n\n    for (char c2 = '!'; c2 <= '~'; c2++) {\n    array[2] = c2;\n\n    for (char c3 = '!'; c3 <= '~'; c3++) {\n    array[3] = c3;\n\n    for (char c4 = '!'; c4 <= '~'; c4++) {\n    array[4] = c4;\n\n    for (char c5 = '!'; c5 <= '~'; c5++) {\n    array[5] = c5;\n\n    for (char c6 = '!'; c6 <= '~'; c6++) {\n    array[6] = c6;\n\n    for (char c7 = '!'; c7 <= '~'; c7++) {\n    array[7] = c7;\n\n    //create new string that stores the array\n    String pKey = new String(array);\n\n    //trying to return the new string \n    return pKey;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } \n                }\n            }\n\npublic static void main(String []args) {\ntry {\n\n// I am getting an error here; I know it has something to do with static references\n\n    String key = new String(keyGen(pKey); \n\n                    // needs to be at least 8 characters for DES\n\n        FileInputStream fis = new FileInputStream(\"original.txt\");\n        FileOutputStream fos = new FileOutputStream(\"encrypted.txt\");\n        encrypt(key, fis, fos);\n\n        FileInputStream fis2 = new FileInputStream(\"encrypted.txt\");\n        FileOutputStream fos2 = new FileOutputStream(\"decrypted.txt\");\n        decrypt(key, fis2, fos2);\n    } catch (Throwable e) {\n        e.printStackTrace();\n    }\n}\n\npublic static void encrypt(String key, InputStream is, OutputStream os) throws Throwable {\n    encryptOrDecrypt(key, Cipher.ENCRYPT_MODE, is, os);\n}\n\npublic static void decrypt(String key, InputStream is, OutputStream os) throws Throwable {\n    encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);\n}\n\npublic static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n\n    DESKeySpec dks = new DESKeySpec(key.getBytes());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey desKey = skf.generateSecret(dks);\n    Cipher cipher = Cipher.getInstance(\"DES\"); // DES/ECB/PKCS5Padding for SunJCE\n\n    if (mode == Cipher.ENCRYPT_MODE) {\n        cipher.init(Cipher.ENCRYPT_MODE, desKey);\n        CipherInputStream cis = new CipherInputStream(is, cipher);\n        doCopy(cis, os);\n    } else if (mode == Cipher.DECRYPT_MODE) {\n        cipher.init(Cipher.DECRYPT_MODE, desKey);\n        CipherOutputStream cos = new CipherOutputStream(os, cipher);\n        doCopy(is, cos);\n    }\n}\n\npublic static void doCopy(InputStream is, OutputStream os) throws IOException {\n    byte[] bytes = new byte[64];\n    int numBytes;\n    while ((numBytes = is.read(bytes)) != -1) {\n        os.write(bytes, 0, numBytes);\n    }\n    os.flush();\n    os.close();\n    is.close();\n}\n", "idx": 276}
{"project": "cipher", "commit_id": "Snippet43840827_25948.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"RSA/ECB/OAEPWITHSHA1ANDMGF1PADDING\", \"SunJCE\"); \ncipher.init(Cipher.DECRYPT_MODE, pub); //exception !\n", "idx": 277}
{"project": "cipher", "commit_id": "Snippet26908591_9026.java", "target": 0, "func": "public class Crypto {\n    public static String encrypt(String seed, String cleartext)\n            throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted)\n            throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted)\n            throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length() / 2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                    16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2 * buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n    }\n}\n", "idx": 278}
{"project": "cipher", "commit_id": "Snippet26145693_8347.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.log4j.Logger;\n\npublic class CipherUtil {\n    private static Logger log = Logger.getLogger(CipherUtil.class);\n    private static final String SECRET_KEY = \"000102030405060708090A0B0C0D0E0F\";\n    private Cipher cipher;\n    private SecretKeySpec secretKeySpec;\n\n    private static CipherUtil cipherUtil;\n\n    private CipherUtil() {\n        try {\n            cipher = Cipher.getInstance(\"AES\");\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException ex) {\n            log.error(ex);\n        }\n        byte[] key = null;\n        try {\n            key = Hex.decodeHex(SECRET_KEY.toCharArray());\n        } catch (DecoderException ex) {\n            log.error(ex);\n        }\n        secretKeySpec = new SecretKeySpec(key, \"AES\");\n    }\n\n    public static synchronized CipherUtil getCipherUtilObject() {\n        if (cipherUtil == null) {\n            cipherUtil = new CipherUtil();\n        }\n        return cipherUtil;\n    }\n\n    public Object clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException();\n    }\n\n    public String encrypt(String plainText) {\n        if (plainText == null)\n            return null;\n        String encryptedText = null;\n        byte[] encrypted = null;\n\n        synchronized (cipher) {\n            try {\n                cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n            } catch (InvalidKeyException e) {\n                log.error(e.getMessage());\n            }\n        }\n\n        synchronized (cipher) {\n            try {\n                encrypted = cipher.doFinal(plainText.getBytes(\"UTF-8\"));\n                encryptedText = new String(Base64.encodeBase64(encrypted));\n            } catch (IllegalBlockSizeException | BadPaddingException\n                    | UnsupportedEncodingException e) {\n                log.error(e.getMessage());\n            }\n        }\n\n        return encryptedText;\n    }\n\n    public synchronized String decrypt(String encryptedText) {\n        if (encryptedText == null)\n            return null;\n        byte[] toDecrypt = null;\n        byte[] original = null;\n        String decryptedText = null;\n\n        synchronized (cipher) {\n            try {\n                cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n            } catch (InvalidKeyException e) {\n                log.error(e.getMessage());\n            }\n        }\n        toDecrypt = Base64.decodeBase64(encryptedText);\n        synchronized (cipher) {\n            try {\n                original = cipher.doFinal(toDecrypt);\n            } catch (IllegalBlockSizeException | BadPaddingException e) {\n                log.error(e.getMessage());\n            }\n        }\n        try {\n            decryptedText = new String(original, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            log.error(e.getMessage());\n        }\n\n        return decryptedText;\n    }\n}\n", "idx": 279}
{"project": "cipher", "commit_id": "Snippet14474669_37747.java", "target": 0, "func": "// Code below omits comments for Brevity\n\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport java.math.BigInteger;\n\npublic class JBoss {\n\n    public static void main(String[] args) throws Exception {\n\n        if ((args.length != 2)\n                || !(args[0].equals(\"-e\") | args[0].equals(\"-d\"))) {\n            System.out\n                    .println(\"Usage:\\n\\tjava JBoss <-e|-d> <encrypted_password>\");\n            return;\n        }\n\n        String mode = args[0];\n\n        byte[] kbytes = \"jaas is the way\".getBytes();\n        SecretKeySpec key = new SecretKeySpec(kbytes, \"Blowfish\");\n        Cipher cipher = Cipher.getInstance(\"Blowfish\");\n\n        String out = null;\n\n        if (mode.equals(\"-e\")) {\n            String secret = args[1];\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] encoding = cipher.doFinal(secret.getBytes());\n            out = new BigInteger(encoding).toString(16);\n        } else {\n            BigInteger secret = new BigInteger(args[1], 16);\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] encoding = cipher.doFinal(secret.toByteArray());\n            out = new String(encoding);\n        }\n        System.out.println(out);\n    }\n}\n", "idx": 280}
{"project": "cipher", "commit_id": "Snippet33654118_15712.java", "target": 0, "func": "        KeyAgreement keyAgreement = this.getSecretKeyAgreement(publicOtherUserKey, privateOwnKey);\n        byte[] encodedBytes = text.getBytes();\n        SecretKey secretKey = new SecretKeySpec(keyAgreement.generateSecret(), \"AES\");\n        byte[] decodedBytes = Base64.decodeBase64(encodedBytes);\n        Cipher decrypt = Cipher.getInstance(\"AES\");\n        decrypt.init(Cipher.DECRYPT_MODE, secretKey);\n        textDecrypted = new String(decrypt.doFinal(decodedBytes));\n", "idx": 281}
{"project": "cipher", "commit_id": "Snippet43202243_25341.java", "target": 0, "func": "public static String encryptString(String src) throws Exception {\n    String dst = \"\";\n\n    SecretKey secret_key = KeyGenerator.getInstance(\"DES\").generateKey();\n    AlgorithmParameterSpec alogrithm_specs = new IvParameterSpec(initialization_vector);\n    encrypt = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    encrypt.init(Cipher.ENCRYPT_MODE, secret_key, alogrithm_specs);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    CipherOutputStream cout = new CipherOutputStream(baos,encrypt);\n    cout.write(src.getBytes());\n    cout.flush();               //ByteOutputStream -> Write Encryption Text\n    cout.close(); \n    dst = DatatypeConverter.printHexBinary(baos.toByteArray());\n    return dst;\n}\n", "idx": 282}
{"project": "cipher", "commit_id": "Snippet23668299_5988.java", "target": 0, "func": "    SecretKey key = new SecretKeySpec(SHARED_DECRYPTION_KEY.getBytes(\"UTF8\"), \"DESede\");\n    byte[] encryptedSecretBytes = Base64.decode(secret);     \n    Cipher cipher = Cipher.getInstance(\"DESede\"); // cipher is not thread safe\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] plainTextSecretBytes = (cipher.doFinal(encryptedSecretBytes));\n    String decryptedSecret = Base64.encodeBytes(plainTextSecretBytes);\n", "idx": 283}
{"project": "cipher", "commit_id": "Snippet3915644_30939.java", "target": 0, "func": "         String bytes = toHex(\"the 16 bit key\");\n            Key skeySpec = new SecretKeySpec(toByte(bytes), \"AES\");\n            Cipher c = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");  \n\n            byte[] buf = new byte[1024]; \n\n\n            // Bytes read from in will be decrypted \n\n            InputStream inCipher = new FileInputStream(enc_File);\n            OutputStream outCipher = new FileOutputStream(cipherFile);\n            c.init(Cipher.DECRYPT_MODE, skeySpec);\n            inCipher = new CipherInputStream(inCipher, c); // Read in the decrypted bytes and write the cleartext to out \n            int numRead = 0;            \n\n                    while ((numRead = inCipher.read(buf)) >= 0) {\n                          outCipher.write(buf, 0, numRead);\n                } \n                outCipher.close(); \n", "idx": 284}
{"project": "cipher", "commit_id": "Snippet6846859_32403.java", "target": 0, "func": "private static byte[] DESEdeDecrypt(byte[] keyBytes, byte[] dataBytes){\n\n    byte[] decryptedData = null;\n    try{\n        DESedeKeySpec keySpec = new DESedeKeySpec(keyBytes, 0); \n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DESede\");\n        SecretKey key = keyFactory.generateSecret(keySpec); \n        Cipher cipher = Cipher.getInstance(\"DESede\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        decryptedData = cipher.doFinal(dataBytes);\n    }\n    catch(Exception e){System.out.println(e);}  \n\n    return decryptedData;\n", "idx": 285}
{"project": "cipher", "commit_id": "Snippet15946259_38928.java", "target": 0, "func": "String userPin3DESEncrypted = new String(Base64.decodeBase64(userPin3DESBase64Encrypted.getBytes()));\nbyte [] keyByte = \"jgd8f3m8ybjhwlGhr4hihbp0\".getBytes();\nSecretKeySpec secretKeySpec = new SecretKeySpec(keyByte, \"DESEDE\");\nCipher cipher = Cipher.getInstance(\"DESEDE/ECB/PKCS5Padding\");\ncipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\nString userPinDecrypted = new String(cipher.doFinal(userPin3DESEncrypted.getBytes()));\n", "idx": 286}
{"project": "cipher", "commit_id": "Snippet17286045_532.java", "target": 0, "func": "private static final String ALGO = \"AES\";\n\n\n@RequestMapping(value = \"/util/encrypt/\", method = RequestMethod.GET)\n@ResponseBody\npublic String encrypt(HttpServletResponse httpResponse,\n        @RequestParam(value = \"token\", required=true) String token) throws Exception \n{\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(token.getBytes());\n    String encryptedValue = Base64.encodeBase64String(encVal);\n    return encryptedValue.trim();\n}\n\n\n\n@RequestMapping(value = \"/util/decrypt/\", method = RequestMethod.GET)\n@ResponseBody\npublic String decrypt(HttpServletResponse httpResponse,\n        @RequestParam(value = \"token\", required=true) String token) throws Exception \n{\n    token = URLDecoder.decode(token, \"UTF-8\");\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = Base64.decodeBase64(token);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    return decryptedValue.trim();\n}\n\n\n\nprivate Key generateKey() throws Exception \n{\n    Key key = new SecretKeySpec(getAesKey().getBytes(), ALGO);\n    return key;\n}\n", "idx": 287}
{"project": "cipher", "commit_id": "Snippet9856568_34296.java", "target": 0, "func": "SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\nbyte[] encData = cipher.doFinal(data, 0, data.length);\nArrays.fill(key, (byte)0);\n", "idx": 288}
{"project": "cipher", "commit_id": "Snippet38880631_20787.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Test3DES {\n    public static void main(String[] args) throws Exception  {\n        //byte length has to be mutiple of 8!\n        String plaintext = \"Attack at dawn!!\";\n        byte[] plainBytes = plaintext.getBytes(\"UTF-8\");\n        byte[] encrypted = encrypt(plainBytes);\n        byte[] decrypted = decrypt(encrypted);\n\n        System.out.println(\"Original message: \");\n        System.out.printf(\"Text: %s%n\", plaintext);\n        System.out.printf(\"Raw bytes: %s%n\", toHexString(plainBytes));\n        System.out.println(\"---\");\n        System.out.println(\"Encrypted message: \");\n        System.out.printf(\"Text: %s%n\", new String(encrypted, \"UTF-8\"));\n        System.out.printf(\"Raw bytes: %s%n\", toHexString(encrypted));\n        System.out.println(\"---\");\n        System.out.println(\"Decrypted message: \");\n        System.out.printf(\"Text: %s%n\", new String(decrypted, \"UTF-8\"));\n        System.out.printf(\"Raw bytes: %s%n\", toHexString(decrypted));\n    }\n\n    private static String toHexString(byte[] array) {\n        StringBuilder sb = new StringBuilder();\n        for (byte b : array) {\n            sb.append(String.format(\"%02X \", b));\n        }\n        return sb.toString();\n    }\n\n    private static byte[] encrypt(byte[] message) throws Exception {\n        Cipher encr1, decr2, encr3;\n        SecretKeySpec kL, kR, tmp;\n\n        kL = new SecretKeySpec(new byte[] {0, 1, 2, 3, 4, 5, 6, 7}, \"DES\");\n        kR = new SecretKeySpec(new byte[] {8, 9, 10, 11, 12, 13, 14, 15}, \"DES\");\n\n        encr1 = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        decr2 = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        encr3 = Cipher.getInstance(\"DES/ECB/NoPadding\");\n\n        encr1.init(Cipher.ENCRYPT_MODE, kL);\n        decr2.init(Cipher.DECRYPT_MODE, kR);\n        encr3.init(Cipher.ENCRYPT_MODE, kL);\n\n        return encr3.doFinal( decr2.doFinal( encr1.doFinal(message) ) );\n    }\n\n    private static byte[] decrypt(byte[] message) throws Exception {\n        Cipher decr1, encr2, decr3;\n        SecretKeySpec kL, kR;\n\n        kL = new SecretKeySpec(\n            new byte[] {0, 1, 2, 3, 4, 5, 6, 7},\n            \"DES\"\n        );\n        kR = new SecretKeySpec(\n            new byte[] {8, 9, 10, 11, 12, 13, 14, 15},\n            \"DES\"\n        );\n\n        decr1 = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        encr2 = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        decr3 = Cipher.getInstance(\"DES/ECB/NoPadding\");\n\n        decr1.init(Cipher.DECRYPT_MODE, kL);\n        encr2.init(Cipher.ENCRYPT_MODE, kR);\n        decr3.init(Cipher.DECRYPT_MODE, kL);\n\n        return decr3.doFinal( encr2.doFinal( decr1.doFinal(message) ) );\n    }\n}\n", "idx": 289}
{"project": "cipher", "commit_id": "Snippet26909103_9027.java", "target": 0, "func": "     public String encryptString(String dataToEncrypt) {\n\n        try {\n            SharedPreferences prefs = context.getSharedPreferences(\"appname\", 0);\n            if (prefs.getString(\"SECRET_KEY\",\"\") == \"\") {\n                secretKeySpec = GenerateSecretKeySpecs();\n                String stringSecretKey = Base64.encodeToString(\n                        secretKeySpec.getEncoded(), Base64.DEFAULT);\n\n                SharedPreferences.Editor editor = prefs.edit();\n                editor.putString(\"SECRET_KEY\", stringSecretKey);\n                editor.commit();\n\n            }\n            if (prefs.getString(\"SECRET_KEY\",\"\") != \"\") {\n                byte[] encodedBytes = null;\n\n                Cipher c = Cipher.getInstance(\"AES\");\n                String key =prefs.getString(\"SECRET_KEY\",\"\");\n\n                byte[] encodedKey = Base64.decode(key, Base64.DEFAULT);\n                SecretKey originalKey = new SecretKeySpec(encodedKey, 0,\n                        encodedKey.length, \"AES\");\n                c.init(Cipher.ENCRYPT_MODE, originalKey);\n                encodedBytes = c.doFinal(dataToEncrypt.getBytes());\n\n                return Base64.encodeToString(encodedBytes, Base64.DEFAULT);\n            } else {\n                return null;\n            }\n        } catch (Exception e) {\n//          Log.e(TAG, \"AES encryption error\");\n            return null;\n        }\n    }\n", "idx": 290}
{"project": "cipher", "commit_id": "Snippet11271845_35428.java", "target": 0, "func": "        // read the key\n    FileInputStream fis = new FileInputStream(keyFile);\n    byte[] keyBytes = new byte[fis.available()];\n    fis.read(keyBytes);\n    SecretKeySpec spec = new SecretKeySpec(keyBytes, \"DES\");\n\n    // encrypt\n    Cipher encCipher = Cipher.getInstance(\"DES\");\n    encCipher.init(Cipher.ENCRYPT_MODE, spec);\n\n    CipherInputStream cipherIn = new CipherInputStream(new FileInputStream(zipFile), encCipher);\n    FileChannel out = new FileOutputStream(encZipFile).getChannel();\n    out.transferFrom(Channels.newChannel(cipherIn), 0, Long.MAX_VALUE);\n\n    // decrypt\n    Cipher decCipher = Cipher.getInstance(\"DES\");\n    decCipher.init(Cipher.DECRYPT_MODE, spec);\n\n    cipherIn = new CipherInputStream(new FileInputStream(encZipFile), decCipher);\n    out = new FileOutputStream(decZipFile).getChannel();\n    out.transferFrom(Channels.newChannel(cipherIn), 0, Long.MAX_VALUE);\n", "idx": 291}
{"project": "cipher", "commit_id": "Snippet12753370_36434.java", "target": 0, "func": "public class DesEncrypter {\n    Cipher ecipher;\n    Cipher dcipher;\n\n    DesEncrypter(SecretKey key) {\n        try {\n            ecipher = Cipher.getInstance(\"DES\");\n            dcipher = Cipher.getInstance(\"DES\");\n            ecipher.init(Cipher.ENCRYPT_MODE, key);\n            dcipher.init(Cipher.DECRYPT_MODE, key);\n\n        } catch (javax.crypto.NoSuchPaddingException e) {\n        } catch (java.security.NoSuchAlgorithmException e) {\n        } catch (java.security.InvalidKeyException e) {\n        }\n    }\n\n    public String encrypt(String str) {\n        try {\n            // Encode the string into bytes using utf-8\n            byte[] utf8 = str.getBytes(\"UTF8\");\n\n            // Encrypt\n            byte[] enc = ecipher.doFinal(utf8);\n\n            // Encode bytes to base64 to get a string\n            return new sun.misc.BASE64Encoder().encode(enc);\n        } catch (javax.crypto.BadPaddingException e) {\n        } catch (IllegalBlockSizeException e) {\n        } catch (UnsupportedEncodingException e) {\n        } catch (java.io.IOException e) {\n        }\n        return null;\n    }\n\n    public String decrypt(String str) {\n        try {\n            // Decode base64 to get bytes\n            byte[] dec = new sun.misc.BASE64Decoder().decodeBuffer(str);\n\n            // Decrypt\n            byte[] utf8 = dcipher.doFinal(dec);\n\n            // Decode using utf-8\n            return new String(utf8, \"UTF8\");\n        } catch (javax.crypto.BadPaddingException e) {\n        } catch (IllegalBlockSizeException e) {\n        } catch (UnsupportedEncodingException e) {\n        } catch (java.io.IOException e) {\n        }\n        return null;\n    }\n}\n", "idx": 292}
{"project": "cipher", "commit_id": "Snippet29093333_11172.java", "target": 0, "func": "private static byte[] keyValue = new byte[]{ 'W', 'e', 'l', 'c', 'o', 'm', 'e','t', 'o', 'e', 'n','c', 'r', 'y', 'p', 't' };\n\nprivate String seedWith16Chars = new String(keyValue);\nprivate String textToEncrypt = \"1\";\n\nprivate TextView seed;\nprivate TextView text;\nprivate TextView encryptedValue;\nprivate TextView decryptedValue;\n\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    seed = (TextView) findViewById(R.id.seedName);\n    seed.setText(seedWith16Chars);\n\n    text = (TextView) findViewById(R.id.textToEncrypt);\n    text.setText(textToEncrypt);\n\n    encryptedValue = (TextView) findViewById(R.id.encryptedText);\n    decryptedValue = (TextView) findViewById(R.id.decryptedText);\n\n    try {\n        // This value was got when did run it from an 2.3.3 device a Galaxy SII running Android 4.0.4\n        String encrypted = \"\";\n\n        // Uncomment the line bellow and comment the line above to run it on an Android 4.1.2 or older.\n        // String encrypted = EncodeDecodeAES.encrypt(seedWith16Chars, textToEncrypt);\n        Log.e(\"Encrypt\", encrypted);\n        encrypted = encrypt(textToEncrypt);//EncodeDecodeAES.encrypt(seedWith16Chars, textToEncrypt);\n        encryptedValue.setText(\"Encrypt \"+encrypted);\n\n        String decrypted = decrypt(encrypted);//EncodeDecodeAES.decrypt(seedWith16Chars, encrypted);\n        decryptedValue.setText(\"Decrypt \"+decrypted);\n        Log.e(\"Decrypt\", decrypted);\n    } catch (Exception e) {\n        Log.e(\"Exception\", e.getLocalizedMessage());\n    }\n\n}\n\npublic static String encrypt(String Data) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(\"AES\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(Data.getBytes());\n    String encryptedValue = Base64.encodeToString(encVal, 0);\n    return encryptedValue;\n}\n\npublic static String decrypt(String encryptedData) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(\"AES\");\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = Base64.decode(encryptedData, 0);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    return decryptedValue;\n}\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, \"AES\");\n    return key;\n}\n", "idx": 293}
{"project": "cipher", "commit_id": "Snippet40828357_22708.java", "target": 0, "func": "static final String KEY_STRING = \"MOGO_APP\";\n\npublic static byte[] decrypt(byte[] encrypt)\n{\n    byte[] bArr = null;\n    Key key = new SecretKeySpec(KEY_STRING.getBytes(), \"DES\");\n    Cipher cipher = Cipher.getInstance(\"DES\");\n    cipher.init(2, key);\n    bArr = cipher.doFinal(encrypt);\n    return bArr;\n}\n", "idx": 294}
{"project": "cipher", "commit_id": "Snippet12792604_36468.java", "target": 0, "func": "        KeyGenerator kgen = KeyGenerator.getInstance(\"DES\");\n        SecretKey sk_1 = kgen.generateKey(); \n        SecretKey sk_2 = kgen.generateKey();\n        byte[] raw_1 = sk_1.getEncoded();\n        byte[] raw_2 = sk_2.getEncoded();\n\n        spec_1 = new SecretKeySpec(raw_1, \"DES\"); //key 1\n        spec_2 = new SecretKeySpec(raw_2, \"DES\"); //key 2\n\n        cipher = Cipher.getInstance(\"DES\"); //standard mode is ECB which is block-by-block w/PKCS5Padding\n        cipher2 = Cipher.getInstance(\"DES\");\n\n\n    protected byte[] get3DESEncryption(byte[] plaintext) throws Exception{\n        byte[] output = new byte[plaintext.length];\n        System.out.println(\"output len init: \" + output.length);\n        cipher.init(Cipher.ENCRYPT_MODE, spec_1);\n        cipher2.init(Cipher.DECRYPT_MODE, spec_2);\n\n        //first encryption round, key 1 used\n        output = cipher.doFinal(plaintext);\n        //second \"encryption\" round, key 2 used but decrypt run\n        output = cipher2.doFinal(output);\n        //third encryption round, key 1 used\n        output = cipher.doFinal(output);\n\n        //return ciphertext\n        return output;\n    } \n", "idx": 295}
{"project": "cipher", "commit_id": "Snippet30432155_12587.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport android.util.Base64;\n\npublic class SimpleCrypto {\n\n    private String charsetName = \"UTF8\";\n    private String algorithm = \"DES\";\n    private int base64Mode = Base64.DEFAULT;\n\n    public String getCharsetName() {\n        return charsetName;\n    }\n\n    public void setCharsetName(String charsetName) {\n        this.charsetName = charsetName;\n    }\n\n    public String getAlgorithm() {\n        return algorithm;\n    }\n\n    public void setAlgorithm(String algorithm) {\n        this.algorithm = algorithm;\n    }\n\n    public int getBase64Mode() {\n        return base64Mode;\n    }\n\n    public void setBase64Mode(int base64Mode) {\n        this.base64Mode = base64Mode;\n    }\n\n    public String encrypt(String key, String data) {\n        if (key == null || data == null)\n            return null;\n        try {\n            DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(charsetName));\n            SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithm);\n            SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);\n            byte[] dataBytes = data.getBytes(charsetName);\n            Cipher cipher = Cipher.getInstance(algorithm);\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            return Base64.encodeToString(cipher.doFinal(dataBytes), base64Mode);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    public String decrypt(String key, String data) {\n        if (key == null || data == null)\n            return null;\n        try {\n            byte[] dataBytes = Base64.decode(data, base64Mode);\n            DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(charsetName));\n            SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithm);\n            SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);\n            Cipher cipher = Cipher.getInstance(algorithm);\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            byte[] dataBytesDecrypted = (cipher.doFinal(dataBytes));\n            return new String(dataBytesDecrypted);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n}\n", "idx": 296}
{"project": "cipher", "commit_id": "Snippet32483738_14535.java", "target": 0, "func": "byte key[] = {0x13, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, (byte) 0xB4, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00};\nSecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec);\nbyte[] myIv = {70, 114, 122, 82, 70, 114, 122, 82, 70, 114, 122, 82, 70, 114, 122, 82}\nbyte[] newIv = cipher.doFinal(myIv);\n", "idx": 297}
{"project": "cipher", "commit_id": "Snippet35124187_17069.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/PKCS5Padding\");", "idx": 298}
{"project": "cipher", "commit_id": "Snippet16613819_28.java", "target": 0, "func": "try{\n   Cipher c = Cipher.getInstance(\"AES\");\n}\ncatch(NoSuchAlgorithmException e){\n   //handle the case of having no matching algorithm\n}\ncatch(NoSuchPaddingException e){\n   //handle the case of a padding problem\n}\n", "idx": 299}
{"project": "cipher", "commit_id": "Snippet28389507_10508.java", "target": 0, "func": "import javax.crypto.*;\nimport java.util.Scanner;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\n\npublic class CIBAw\n{    \n    public static void main(String[] argv)  \n    {\n        Scanner input = new Scanner(System.in);\n        Scanner File = new Scanner(System.in); \n        try\n        {\n            KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n            SecretKey myDesKey = keygenerator.generateKey();\n            Cipher desCipher;\n            desCipher = Cipher.getInstance(\"DES\");\n            desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n            System.out.println(\"Encrypt a File\");\n            System.out.print(\"Enter a sentence:\"); \n            //String file = File.nextLine(); \n            byte[] text = \"\".getBytes();\n            System.out.println(\"\" + new String(text));\n            // Encrypt the text\n            byte[] textEncrypted = desCipher.doFinal(text);\n            System.out.println(\"File Encryted : \" + textEncrypted);\n            // Initialize the same cipher for decryption\n            desCipher.init(Cipher.DECRYPT_MODE, myDesKey);\n            // Decrypt the text\n            byte[] textDecrypted = desCipher.doFinal(textEncrypted);\n            System.out.println(\"File Decryted : \" +  new String(textDecrypted));\n\n        }catch(NoSuchAlgorithmException e)\n        {\n            e.printStackTrace();\n        }catch(NoSuchPaddingException e)\n        {\n            e.printStackTrace();\n        }catch(InvalidKeyException e)\n        {\n            e.printStackTrace();\n        }catch(IllegalBlockSizeException e)\n        {\n            e.printStackTrace();\n        }catch(BadPaddingException e)\n        {\n            e.printStackTrace();\n        } \n\n    }\n}\n", "idx": 300}
{"project": "cipher", "commit_id": "Snippet10836139_35106.java", "target": 0, "func": " import java.security.Key;\n\n import javax.crypto.Cipher;\n import javax.crypto.spec.SecretKeySpec;\n\n import sun.misc.BASE64Decoder;\n import sun.misc.BASE64Encoder;\n\n public class AESEncryptionDecryptionTest {\n\n   private static final String ALGORITHM       = \"AES\";\n   private static final String myEncryptionKey = \"ThisIsFoundation\";\n   private static final String UNICODE_FORMAT  = \"UTF8\";\n\n   public static String encrypt(String valueToEnc) throws Exception {\n      Key key = generateKey();\n      Cipher c = Cipher.getInstance(ALGORITHM);\n      c.init(Cipher.ENCRYPT_MODE, key);  \n      byte[] encValue = c.doFinal(valueToEnc.getBytes());\n      String encryptedValue = new BASE64Encoder().encode(encValue);\n      return encryptedValue;\n   }\n\npublic static String decrypt(String encryptedValue) throws Exception {\n     Key key = generateKey();\n     Cipher c = Cipher.getInstance(ALGORITHM);\n     c.init(Cipher.DECRYPT_MODE, key);\n     byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n     byte[] decValue = c.doFinal(decordedValue);//////////LINE 50\n     String decryptedValue = new String(decValue);\n     return decryptedValue;\n}\n\nprivate static Key generateKey() throws Exception {\n     byte[] keyAsBytes;\n     keyAsBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n     Key key = new SecretKeySpec(keyAsBytes, ALGORITHM);\n     return key;\n}\n\npublic static void main(String[] args) throws Exception {\n\n     String value = \"password1\";\n     String valueEnc = AESEncryptionDecryptionTest.encrypt(value);\n     String valueDec = AESEncryptionDecryptionTest.decrypt(valueEnc);\n\n     System.out.println(\"Plain Text : \" + value);\n     System.out.println(\"Encrypted : \" + valueEnc);\n     System.out.println(\"Decrypted : \" + valueDec);\n}\n\n}\n", "idx": 301}
{"project": "cipher", "commit_id": "Snippet26278953_8469.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"Crypto\");\n", "idx": 302}
{"project": "cipher", "commit_id": "Snippet21075369_3665.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/PKCS5Padding\");", "idx": 303}
{"project": "cipher", "commit_id": "Snippet10690710_34981.java", "target": 0, "func": "public class AESEncryption {\n\nprivate SecretKeySpec keySpec;\n\npublic AESEncryption()\n{\n    super();\n    setKeySpec(AES256Encryption.generateAES256KeySpec());\n}\n\n// Uses 256-bit encryption by default.\npublic static SecretKeySpec generateAES256KeySpec()\n{\n    // Stack variables\n    byte[] byteArray = new byte[16];\n    SecretKey oTmpKey = null;\n    KeyGenerator oKeyGen;\n    try\n    {\n        oKeyGen = KeyGenerator.getInstance(\"AES\");\n        oKeyGen.init(256);\n        oTmpKey = oKeyGen.generateKey();\n    }\n    catch(Throwable oThrown)\n    {\n        throw new RuntimeException(oThrown);\n    }\n\n    byteArray = oTmpKey.getEncoded();\n\n    return new SecretKeySpec(byteArray, \"AES\");\n}\n\npublic String encrypt(final String p_strPlaintext)\n{\n    String strEncrypted = null;\n\n    try\n    {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n        strEncrypted = Base64.encodeBase64String(cipher\n            .doFinal(p_strPlaintext.getBytes()));\n    }\n    catch(Throwable oThrown)\n    {\n        System.out.println(oThrown.getMessage());\n        throw new RuntimeException(oThrown);\n    }\n\n    return strEncrypted;\n}\n\n}\n", "idx": 304}
{"project": "cipher", "commit_id": "Snippet42766290_24726.java", "target": 0, "func": "byte[] value = characteristic.getValue();\nbyte[] tmpValue = Arrays.copyOfRange(value, 3, 19);\nCipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n\n// here we use key like in our firt requst\nSecretKeySpec key = new SecretKeySpec(new byte[] {0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45}, \"AES\");\n\ncipher.init(Cipher.ENCRYPT_MODE, key);\nbyte[] bytes = cipher.doFinal(tmpValue);\n\nbyte[] rq = ArrayUtils.addAll(new byte[]{0x03, 0x8}, bytes);\ncharacteristic.setValue(rq);\ngatt.writeCharacteristic(characteristic);\n", "idx": 305}
{"project": "cipher", "commit_id": "Snippet15926867_38920.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\", new BouncyCastleProvider());\n", "idx": 306}
{"project": "cipher", "commit_id": "Snippet13673556_37181.java", "target": 0, "func": "import java.various.stuff;\n\n/**Utility class to encrypt and decrypt files**/\npublic class FileEncryptor {\n    //Arbitrarily selected 8-byte salt sequence:\n    private static final byte[] salt = {\n        (byte) 0x43, (byte) 0x76, (byte) 0x95, (byte) 0xc7,\n        (byte) 0x5b, (byte) 0xd7, (byte) 0x45, (byte) 0x17 \n    };\n\n    private static Cipher makeCipher(String pass, Boolean decryptMode) throws GeneralSecurityException{\n\n        //Use a KeyFactory to derive the corresponding key from the passphrase:\n        PBEKeySpec keySpec = new PBEKeySpec(pass.toCharArray());\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(keySpec);\n\n        //Create parameters from the salt and an arbitrary number of iterations:\n        PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, 42);\n\n        /*Dump the key to a file for testing: */\n        FileEncryptor.keyToFile(key);\n\n        //Set up the cipher:\n        Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n\n        //Set the cipher mode to decryption or encryption:\n        if(decryptMode){\n            cipher.init(Cipher.ENCRYPT_MODE, key, pbeParamSpec);\n        } else {\n            cipher.init(Cipher.DECRYPT_MODE, key, pbeParamSpec);\n        }\n\n        return cipher;\n    }\n\n\n    /**Encrypts one file to a second file using a key derived from a passphrase:**/\n    public static void encryptFile(String fileName, String pass)\n                                throws IOException, GeneralSecurityException{\n        byte[] decData;\n        byte[] encData;\n        File inFile = new File(fileName);\n\n        //Generate the cipher using pass:\n        Cipher cipher = FileEncryptor.makeCipher(pass, false);\n\n        //Read in the file:\n        FileInputStream inStream = new FileInputStream(inFile);\n        decData = new byte[(int)inFile.length()];\n        inStream.read(decData);\n        inStream.close();\n\n        //Encrypt the file data:\n        encData = cipher.doFinal(decData);\n\n\n        //Write the encrypted data to a new file:\n        FileOutputStream outStream = new FileOutputStream(new File(fileName + \".encrypted\"));\n        outStream.write(encData);\n        outStream.close();\n    }\n\n\n    /**Decrypts one file to a second file using a key derived from a passphrase:**/\n    public static void decryptFile(String fileName, String pass)\n                            throws GeneralSecurityException, IOException{\n        byte[] encData;\n        byte[] decData;\n        File inFile = new File(fileName);\n\n        //Generate the cipher using pass:\n        Cipher cipher = FileEncryptor.makeCipher(pass, true);\n\n        //Read in the file:\n        FileInputStream inStream = new FileInputStream(inFile);\n        encData = new byte[(int)inFile.length()];\n        inStream.read(encData);\n        inStream.close();\n\n        //Decrypt the file data:\n        decData = cipher.doFinal(encData);\n\n        //Write the decrypted data to a new file:\n        FileOutputStream target = new FileOutputStream(new File(fileName + \".decrypted.txt\"));\n        target.write(decData);\n        target.close();\n    }\n\n    /**Record the key to a text file for testing:**/\n    private static void keyToFile(SecretKey key){\n        try {\n            File keyFile = new File(\"C:\\\\keyfile.txt\");\n            FileWriter keyStream = new FileWriter(keyFile);\n            String encodedKey = \"\\n\" + \"Encoded version of key:  \" + key.getEncoded().toString();\n            keyStream.write(key.toString());\n            keyStream.write(encodedKey);\n            keyStream.close();\n        } catch (IOException e) {\n            System.err.println(\"Failure writing key to file\");\n            e.printStackTrace();\n        }\n\n    }\n\n}\n", "idx": 307}
{"project": "cipher", "commit_id": "Snippet15111298_38172.java", "target": 0, "func": "    String key = \"MrSShZqHM6dtVNdX\";\n    String message = \"NzZiNGM3ZjIyNjM5ZWM3M2YxMGM5NjgzZDQzZDA3ZTQ=\";\n    String charsetName = \"UTF-8\";\n    String algo = \"AES\";\n\n    // decode message\n    byte[] decodeBase64 = Base64.decodeBase64(message.getBytes(charsetName));\n    System.out.println(\"decoded message: \" + new String(decodeBase64));\n\n    // prepare the key\n    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(charsetName), algo);\n\n    // aes 128 decipher\n    Cipher cipher = Cipher.getInstance(algo);\n    cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n    byte[] doFinal = cipher.doFinal(Hex.decodeHex(new String(decodeBase64).toCharArray()));\n    System.out.println(\"done with: \" + new String(doFinal));\n", "idx": 308}
{"project": "cipher", "commit_id": "Snippet18950566_1861.java", "target": 0, "func": "Login() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{\n\n  //Check to make sure a username has been entered.\n\n  if (!name.contains(\"[a-zA-Z0-9]\") && name.length() > 0 ){\n\n  //Find which line the user's data is stored on:\n\n        try{\n            int LineCount = 0;\n            String line = \"\";\n\n            BufferedReader bReader = new BufferedReader(new FileReader(\"resources/user_names.txt\"));\n             while ((line = bReader.readLine()) != null) {\n                 LineCount ++;\n\n            int posFound = line.indexOf(name);\n\n            if (posFound > - 1) {\n                System.out.println(\"Search word found at position \" + posFound + \" on line \" + LineCount);\n\n\n //What do I do here to read my key and password from their text files from the line found above.\n\n//The following code works when there is only one entry on each line of the text files.\n\n\n            FileInputStream keyFis = new FileInputStream(\"resources/password_keys.txt\");\n            byte[] encKey = new byte[keyFis.available()];\n            keyFis.read(encKey);\n            keyFis.close();\n\n            Key keyFromFile = new SecretKeySpec(encKey, \"DES\");\n\n\n            FileInputStream encryptedTextFis = new FileInputStream(\"resources/user_data.txt\");\n            byte[] encText = new byte[encryptedTextFis.available()];\n            encryptedTextFis.read(encText);\n            encryptedTextFis.close();\n\n\n            Cipher decrypter = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n            decrypter.init(Cipher.DECRYPT_MODE, keyFromFile);\n            byte[] decryptedText = decrypter.doFinal(encText);\n\n\n\n            System.out.println(\"Decrypted Text: \" + new String(decryptedText));\n\n\n                      }else{\n\n                 JOptionPane.showMessageDialog(null, String.format(\"The password you entered has not been created.\"),\n                 \"Missing account\", JOptionPane.ERROR_MESSAGE);\n                    }\n             }\n\n             bReader.close();\n\n        }catch(IOException e){\n            System.out.println(\"Error: \" + e.toString());\n        }\n\n  }else{\nJOptionPane.showMessageDialog(null, String.format(\"Please enter a valid username.\"),\n\"No Input\", JOptionPane.ERROR_MESSAGE);\n\n  }\n\n}\n", "idx": 309}
{"project": "cipher", "commit_id": "Snippet6316225_32042.java", "target": 0, "func": "    import java.security.SecureRandom;\n\n    import javax.crypto.Cipher;\n    import javax.crypto.KeyGenerator;\n    import javax.crypto.SecretKey;\n    import javax.crypto.spec.SecretKeySpec;\n\n    import android.app.Activity;\n    import android.os.Bundle;\n    import android.widget.TextView;\n\n    public class main extends Activity {\n        TextView tvOutput;\n        static String out;\n        String TEST_STRING = \"abcdefghijklmnopqrstuvwxyz\";\n        String PASSKEY = \"ThePasswordIsPassord\";\n\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            tvOutput = (TextView) findViewById(R.id.tvOutput);\n        }\n\n        @Override\n        public void onResume() {\n            super.onResume();\n            out = \"\";\n            runTest();\n            tvOutput.setText(out);\n        }\n\n        private void runTest() {\n            out = \"Test string: \" + TEST_STRING + \"\\n\";\n            out += \"Passkey: \" + PASSKEY + \"\\n\";\n            try {\n                out += \"Encrypted: \" + encrypt(PASSKEY, TEST_STRING) + \"\\n\";\n            } catch (Exception e) {\n                out += \"Error: \" + e.getMessage() + \"\\n\";\n                e.printStackTrace();\n            }\n\n        }\n\n        public static String encrypt(String seed, String cleartext)\n        throws Exception {\n            byte[] rawKey = getRawKey(seed.getBytes());\n            byte[] result = encrypt(rawKey, cleartext.getBytes());\n            return toHex(result) + \"\\n\" + \"Raw Key: \" + String.valueOf(rawKey)\n                    + \"\\n\";\n        }\n\n        private static byte[] getRawKey(byte[] seed) throws Exception {\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n            SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n            sr.setSeed(seed);\n            kgen.init(128, sr); // 192 and 256 bits may not be available\n            SecretKey skey = kgen.generateKey();\n            byte[] raw = skey.getEncoded();\n            return raw;\n        }\n\n        private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n                byte[] encrypted = cipher.doFinal(clear);\n            return encrypted;\n        }\n\n        public static String toHex(String txt) {\n            return toHex(txt.getBytes());\n        }\n\n        public static String fromHex(String hex) {\n            return new String(toByte(hex));\n        }\n\n        public static byte[] toByte(String hexString) {\n            int len = hexString.length() / 2;\n            byte[] result = new byte[len];\n            for (int i = 0; i < len; i++)\n                result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                        16).byteValue();\n            return result;\n        }\n\n        public static String toHex(byte[] buf) {\n            if (buf == null)\n                return \"\";\n            StringBuffer result = new StringBuffer(2 * buf.length);\n            for (int i = 0; i < buf.length; i++) {\n                appendHex(result, buf[i]);\n            }\n            return result.toString();\n        }\n\n         private final static String HEX = \"0123456789ABCDEF\";\n\n        private static void appendHex(StringBuffer sb, byte b) {\n            sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n        }\n    }\n", "idx": 310}
{"project": "cipher", "commit_id": "Snippet33498037_15537.java", "target": 0, "func": "public class AES {\npublic static String SALT = \"8e0b86611d5922ffd57fcc053644ff6d73459b2b\";\npublic static SecretKeySpec getKey(String myKey) {\n    MessageDigest sha = null;\n    byte[] key;\n    try {\n        key = myKey.getBytes(\"UTF-8\");\n        sha = MessageDigest.getInstance(\"SHA-1\");\n        key = sha.digest(key);\n        key = Arrays.copyOf(key, 16); // use only first 128 bit\n        return new SecretKeySpec(key, \"AES\");\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (UnsupportedEncodingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    return null;\n}\n\npublic static String encrypt(String strToEncrypt, String password) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, getKey(password));\n        return Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\")));\n    } catch (Exception e) {\n        System.out.println(\"Error while encrypting: \" + e.toString());\n    }\n    return null;\n\n}\n\npublic static String decrypt(String strToDecrypt, String password) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        cipher.init(Cipher.DECRYPT_MODE, getKey(password));\n        return new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt)));\n    } catch (Exception e) {\n        System.out.println(\"Error while decrypting: \" + e.toString());\n    }\n    return null;\n}\n\n\npublic static void main(String args[]) {\n    String text = \"Hello World!\";\n    String encrypt = AES.encrypt(text,SALT);\n\n    System.out.println(\"String to Encrypt: \" + text);\n    System.out.println(\"Encrypted: \" + encrypt);\n\n    System.out.println(\"String To Decrypt : \" + encrypt);\n    System.out.println(\"Decrypted : \" + AES.decrypt(encrypt,SALT));\n}\n\n}\n", "idx": 311}
{"project": "cipher", "commit_id": "Snippet17925572_783.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n", "idx": 312}
{"project": "cipher", "commit_id": "Snippet27196375_9333.java", "target": 0, "func": "import java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class Crypter {\n\n    Cipher ecipher;\n    Cipher dcipher;\n\n    Crypter(String as_Phrase)\n            throws UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException {\n        this.ecipher = Cipher.getInstance(\"DESede\");\n        this.dcipher = Cipher.getInstance(\"DESede\");\n        this.ecipher.init(1, getSecretKey(as_Phrase));\n        this.dcipher.init(2, getSecretKey(as_Phrase));\n\n    }\n\n    public String encrypt(String as_valueToEncrypt)\n            throws BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException, IOException {\n        byte[] lbarr_utf8 = as_valueToEncrypt.getBytes(\"UTF8\");\n        byte[] lbarr_enc = this.ecipher.doFinal(lbarr_utf8);\n\n        return new BASE64Encoder().encode(lbarr_enc);\n    }\n\n    public String decrypt(String as_valueToDecrypt)\n            throws BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException, IOException {\n        byte[] lbarr_enc = new BASE64Decoder().decodeBuffer(as_valueToDecrypt);\n\n        byte[] lbarr_utf8 = this.dcipher.doFinal(lbarr_enc);\n\n        return new String(lbarr_utf8, \"UTF8\");\n    }\n\n    private SecretKey getSecretKey(String as_Phrase)\n            throws UnsupportedEncodingException {\n        return new SecretKeySpec(as_Phrase.getBytes(\"UTF8\"), \"DESede\");\n    }\n}\n", "idx": 313}
{"project": "cipher", "commit_id": "Snippet23863235_6166.java", "target": 0, "func": " import java.security.Key;\n\n        import javax.crypto.Cipher;\n        import javax.crypto.spec.SecretKeySpec;\n\n        import sun.misc.BASE64Decoder;\n        import sun.misc.BASE64Encoder;\n\n        public class Decrypt256bit {\n\n\n        private static Key key;\n\n        private static Cipher cipher;\n\n        static {\n            key = new SecretKeySpec(\"P@ssw0Rd!@#**&&&P@ssw0Rd!@#**&&&\".getBytes(), \"AES\");\n            try {\n                cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\",\"SunJCE\");\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        public static String encryptData(String plainText) {\n            try {\n                cipher.init(Cipher.ENCRYPT_MODE, key);\n                byte[] encrypted = cipher.doFinal(plainText.getBytes());\n                return new BASE64Encoder().encode(encrypted);\n            } catch (Exception e) {\n\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n\n        //For testing purpose - to be deleted\n        public static String decryptData(String encryptedValue) {\n            try {\n                cipher.init(Cipher.DECRYPT_MODE, key);\n                byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n                int maxKeyLen = Cipher.getMaxAllowedKeyLength(\"AES\");\n                System.out.println(\"Length===\"+maxKeyLen);\n                return new String(cipher.doFinal(decordedValue));\n            } catch (Exception e) {\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        public static void main(String... a) {\n            //String enc = encryptData(\"TPASU~TPAGU\");\n            //System.out.println(\"Encrypted text===\"+enc);      \n        }\n\n        }\n", "idx": 314}
{"project": "cipher", "commit_id": "Snippet23679143_6009.java", "target": 0, "func": "public static void main( String[] args ) throws Exception {\n    String password = \"a lovely password of any length\";\n\n    // source file encoding should be UTF-8 to support this literal\n    String plain = \"\u00e1 pl\u00e1\u00efn t\u00e9xt w\u00eeth non-ascii characters\";\n    System.out.println( plain );\n\n    // proper cipher modes need iv\n    byte[] ivBytes = new byte[ 8 ];\n    SecureRandom.getInstance( \"SHA1PRNG\" ).nextBytes( ivBytes );\n\n    String encrypted = encryptString( plain, password, ivBytes );\n    System.out.println( encrypted );\n\n    String decrypted = decryptString( encrypted, password, ivBytes );\n    System.out.println( decrypted );\n}\n\npublic static String encryptString( String plainText, String password, byte[] ivBytes ) throws Exception {\n    MessageDigest sha1 = MessageDigest.getInstance( \"SHA1\" );\n    byte[] keyBytes = Arrays.copyOf( sha1.digest( password.getBytes( \"UTF-8\" ) ), 24 );\n    SecretKeySpec key = new SecretKeySpec( keyBytes, \"DESede\" );\n\n    IvParameterSpec iv = new IvParameterSpec( ivBytes );\n\n    Cipher cipher = Cipher.getInstance( \"DESede/CTR/PKCS5Padding\" );\n    cipher.init( Cipher.ENCRYPT_MODE, key, iv );\n\n    byte[] plainBytes = plainText.getBytes( \"UTF-8\" );\n    byte[] encryptedBytes = cipher.doFinal( plainBytes );\n    String encryptedBase64 = new BASE64Encoder().encode( encryptedBytes );\n    String urlEncodedEncryptedBase64 = URLEncoder.encode( encryptedBase64, \"UTF-8\" );\n\n    return urlEncodedEncryptedBase64;\n}\n\npublic static String decryptString( String urlEncodedEncryptedBase64, String password, byte[] ivBytes ) throws Exception {\n    MessageDigest sha1 = MessageDigest.getInstance( \"SHA1\" );\n    byte[] keyBytes = Arrays.copyOf( sha1.digest( password.getBytes( \"UTF-8\" ) ), 24 );\n    SecretKeySpec key = new SecretKeySpec( keyBytes, \"DESede\" );\n\n    IvParameterSpec iv = new IvParameterSpec( ivBytes );\n\n    Cipher cipher = Cipher.getInstance( \"DESede/CTR/PKCS5Padding\" );\n    cipher.init( Cipher.DECRYPT_MODE, key, iv );\n\n    // exact mirror of encryption sequence\n    String encryptedBase64 = URLDecoder.decode( urlEncodedEncryptedBase64, \"UTF-8\" );\n    byte[] encryptedBytes = new BASE64Decoder().decodeBuffer( encryptedBase64 );\n    byte[] decryptedBytes = cipher.doFinal( encryptedBytes );\n    String decryptedText = new String( decryptedBytes, \"UTF-8\" );\n\n    return decryptedText;\n}\n", "idx": 315}
{"project": "cipher", "commit_id": "Snippet15500664_38551.java", "target": 0, "func": "byte[] keyBytes = new byte[16];\nkeyBytes[0] = 1;\nSecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\nString input = \"hello\";\nCipher cipher;\nbyte[] bytes = null;\ncipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, key);\nbytes = cipher.doFinal(input.getBytes(\"UTF-8\"));\n\nSystem.out.println(\"Encoded: \"+Arrays.toString(bytes));\n\ncipher.init(Cipher.DECRYPT_MODE, key);\nbyte[] decoded = cipher.doFinal(bytes);\n\nSystem.out.println(\"Decoded: \"+new String(decoded, \"UTF-8\"));\n", "idx": 316}
{"project": "cipher", "commit_id": "Snippet31875296_13932.java", "target": 0, "func": "public static String aesDecrypt(byte[] strBytes, String keyStr) throws Exception {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NOPadding\");\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    kgen.init(128, new SecureRandom(keyStr.getBytes()));\n    SecretKey secretKey = kgen.generateKey();\n    byte[] enCodeFormat = secretKey.getEncoded();\n    SecretKeySpec key = new SecretKeySpec(enCodeFormat, \"AES\");\n\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] bytes = cipher.doFinal(strBytes);\n    return new String(bytes, \"utf-8\");\n}\n\npublic static byte[] convertStrArrayToByteArray(String s){\n    String[] ss = s.split(\";\");\n    byte[] bs = new byte[ss.length];\n    int index = 0;\n    for (String byteStr : ss) {\n        bs[index ++] = (byte) (Short.parseShort(byteStr) >> 8 & 0xff);\n    }\n    return bs;\n}\n\npublic static void main(String[] args) throws Exception {\n    byte b = (byte) 158;\n    System.out.println(b);\n    String enStr = \"158;244;75;86;184;135;189;50;161;55;60;169;144;186;65;76;37;241;197;21;71;105;113;29;114;92;200;99;102;119;240;124;228;195;12;115;162;186;197;27;40;23;48;24;30;0;98;28;6;113;40;252;191;223;59;138;207;70;31;244;1;9;1;95;66;209;189;115;113;241;122;175;246;155;6;114;221;161;149;246;167;137;27;61;180;122;145;251;52;202;126;242;25;214;129;66;182;176;9;155;36;224;49;158;94;93;53;194;184;46;194;82;203;79;68;185;154;6;182;121;132;233;166;138;209;159;191;126;3;36;113;5;38;84;58;145;78;118;177;222;216;160;217;204;169;153;3;40;198;4;144;137;0;60;96;69;96;4;47;60;69;202;131;250;137;162;192;216;0;95;75;47;3;72;219;85;13;33;88;68;135;239;221;114;171;190;114;128;168;156;230;180;120;251;70;48;151;23;254;221;73;90;111;159;150;22;50;108;133;233;226;157;165;254;14;242;59;176;100;81;27;156;110;194;6;113;40;252;191;223;59;138;207;70;31;244;1;9;1;95;66;209;189;115;113;241;122;175;246;155;6;114;221;161;149;246;145;77;98;181;148;212;44;112;175;96;184;222;128;172;98;31;147;59;158;66;238;255;8;6;100;215;35;228;28;197;52;168;252;239;80;176;80;195;177;197;42;252;47;184;235;64;237;246\";\n    String key = \"^_^b@_@b*_*b-_-b^_^b@_@b*_*b-_-b\";\n    System.out.println(aesDecrypt(convertStrArrayToByteArray(enStr), key));\n}\n", "idx": 317}
{"project": "cipher", "commit_id": "Snippet37364256_19195.java", "target": 0, "func": "import javax.crypto.Cipher\nimport javax.crypto.spec._\nimport javax.xml.bind.DatatypeConverter\n\nval cipher = Cipher.getInstance(\"Blowfish/CBC/NoPadding\")\n\nval key = new SecretKeySpec(DatatypeConverter.parseHexBinary(\"0123456789ABCDEF0123456789ABCDEF\"), \"Blowfish\")\n\nval specIv = new IvParameterSpec(DatatypeConverter.parseHexBinary(\"0000000000000000\"))\n\ncipher.init(Cipher.ENCRYPT_MODE, key, specIv)\n\nval enc = cipher.doFinal(\"messages\".getBytes(\"UTF-8\"))\n\nprintln(DatatypeConverter.printBase64Binary(enc))\n", "idx": 318}
{"project": "cipher", "commit_id": "Snippet27260575_9427.java", "target": 0, "func": "Security.addProvider(new BouncyCastleProvider());\n\nbyte[] mKeyData = new byte[16];\nbyte[] mIv = new byte[8];\n\nSecretKeySpec KS = new SecretKeySpec(mKeyData, \"Blowfish\");\n\nCipher cipher = Cipher.getInstance(\"Blowfish/CBC/ZeroBytePadding\");\ncipher.init(Cipher.ENCRYPT_MODE, KS, new IvParameterSpec(mIv));\n", "idx": 319}
{"project": "cipher", "commit_id": "Snippet16657220_48.java", "target": 0, "func": " public static String decrypt(String seed, String encrypted) throws Exception {\n            byte[] rawKey = getRawKey(seed.getBytes());\n            System.out.println(rawKey);\n          //  byte[] enc = toByte(encrypted);\n            byte[] enc = Base64.decode(encrypted);\n            byte[] result = decrypt(rawKey, enc);\n            return new String(result);\n        }\n\n  private static byte[] getRawKey(byte[] seed) throws Exception {\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n            SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n            sr.setSeed(seed);\n            kgen.init(128, sr); // 192 and 256 bits may not be available\n            SecretKey skey = kgen.generateKey();\n            byte[] raw = skey.getEncoded();\n            return raw;\n        }\n\n\n  private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n            byte[] decrypted = cipher.doFinal(encrypted);\n            return decrypted;\n        }\n", "idx": 320}
{"project": "cipher", "commit_id": "Snippet37476331_19398.java", "target": 0, "func": "String key  = \"50B62ECEF1B777353372A44CDDC463987815F783E39D68B8EE6A0AB74A79C7FA\";\nbyte[] keyBytes = key.getBytes(\"UTF-8\");\nSecretKey keySpec = new SecretKeySpec(keyBytes, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\ncipher.init(Cipher.DECRYPT_MODE, keySpec);\nbuffer = cipher.doFinal(buffer);\n", "idx": 321}
{"project": "cipher", "commit_id": "Snippet17455950_646.java", "target": 0, "func": "String input=\"Text\";\nString key=\"1234567891234567\";\n    byte[] crypted = null;\n            try {\n                SecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n                cipher.init(Cipher.ENCRYPT_MODE, skey);\n                crypted = cipher.doFinal(input.getBytes());\n            } catch (Exception exception) {\n                throw exception;\n            }\n            return new String(Base64.encodeBase64(crypted));\n", "idx": 322}
{"project": "cipher", "commit_id": "Snippet22654565_5050.java", "target": 0, "func": "private static String encrypt(String encryptionKey, String value) throws Exception{\n\n    //Instantiate the encrypter/decrypter\n    String paddedValue = value;\n    if ((value.length() % 8) != 0) {\n        for (int i= 0; i< (8 - value.length() % 8); i++) {\n            paddedValue += ' ';\n        }\n    }             \n\n    byte[] iv ={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};\n    byte[] valueByteArray = paddedValue.getBytes(\"UTF8\");\n\n    SecretKeySpec desKey = new SecretKeySpec(encryptionKey.getBytes(), \"DES\");\n    Cipher desCipher = Cipher.getInstance(\"DES/CBC/NoPadding\");\n    desCipher.init(Cipher.ENCRYPT_MODE, desKey, new IvParameterSpec(iv));\n\n    // Encode the string into bytes using utf-8        \n    // Encrypt\n    byte[] encryptedBytesArray = desCipher.doFinal(valueByteArray);\n\n    StringBuffer encryptedValue = new StringBuffer(1000000);\n\n    for (int i = 0, n = encryptedBytesArray.length; i < n; i++) {\n        String hex = (java.lang.Integer.toHexString(encryptedBytesArray[i] & 0XFF));\n        if (hex.length() == 1) {\n            encryptedValue.append(\"0\").append(hex);\n        } else {\n            encryptedValue.append(hex);\n        }\n    }\n\n    return encryptedValue.toString().toUpperCase();\n}\n", "idx": 323}
{"project": "cipher", "commit_id": "Snippet14368374_37672.java", "target": 0, "func": "public static byte[] decryptByte(byte[] blahh, byte[] keyExample) throws Exception\n{\nCipher cipher = null;\n\ntry\n{\n    cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n    SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n    return cipher.doFinal(Base64.decodeBase64(blah));\n}\ncatch(Exception e)\n{\n    e.printStackTrace();\n}\nreturn null;\n}\n\nString keyExample = \"99112277445566778899AABBCCDDEEFF0123456789ABCDEF0123456789ABCDEF\";\nbyte[] key = keyExample.getBytes();    \nbyte[] barrayMessage = {123,45,55,23,64,21,65};    \nbyte[] result = decryptByte(barrayMessage, key);\n", "idx": 324}
{"project": "cipher", "commit_id": "Snippet12844338_36508.java", "target": 0, "func": "public void onClick(View arg0) {\n    user=rName.getText().toString().trim();\n    pass=rPwd.getText().toString().trim();\n\n    if(arg0==regBttn){\n        if((user.length()!=0))\n        {\n            if((pass.length()!=0))\n            {\n\n                sp=getSharedPreferences(\"AccessApp\",MODE_WORLD_WRITEABLE);\n                Editor myEditor=sp.edit();\n\n                try {\n                    myEditor.putString(\"USERNAME_KEY\", user);\n                    byte[ ] superSecretKeyBytes = Base64.decode(user);\n                    byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6 };\n                    for (int i = 0; i &lt; pass.length(); i++) {\n                        key[i] = superSecretKeyBytes[i];\n                    }\n                    } catch (IOException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n                try {\n                    myEditor.putString(\"PASSWORD_KEY\", pass);\n                    byte[ ] superSecretKeyBytes = Base64.decode(pass);\n                    byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6 };\n                    for (int i = 0; i &lt; pass.length(); i++) {\n                        key[i] = superSecretKeyBytes[i];\n                    }\n                    } catch (IOException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n\n                myEditor.commit();\n                Toast.makeText(this, \"Registration is successfull\",10000).show();\n                i=new Intent(this,AccessApp.class);\n                startActivity(i);\n            }\n            else\n            {\n                Toast.makeText(this, \"Please Enter password\", 10000).show();\n            }\n        }\n        else{\n            Toast.makeText(this,\"Please Enter Username\",10000).show();\n        }\n    }\n\n    else if(arg0==rtnBttn){\n        AlertDialog.Builder builder=new AlertDialog.Builder(this);\n        builder.setTitle(\"Exit\");\n        builder.setMessage(\"Do you want to exit\");\n        builder.setCancelable(false);\n        builder.setPositiveButton(\"Yes\",new DialogInterface.OnClickListener() {\n\n            public void onClick(DialogInterface dialog, int which) {\n                // TODO Auto-generated method stub\n                finish();\n            }\n        });\n        builder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\n\n            public void onClick(DialogInterface arg0, int arg1) {\n                arg0.cancel();\n            }\n        });\n        AlertDialog alert=builder.create();\n        alert.show();\n\n    }\n}\n\npublic String encrypt(String toencrypt, byte key[]) throws Exception {\n    SecretKeySpec secret = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secret);\n    byte[] encryptedbytes = cipher.doFinal(toencrypt.getBytes());\n    String encrypted = Base64.encodeBytes(encryptedbytes);\n    return encrypted;\n\n}\n", "idx": 325}
{"project": "cipher", "commit_id": "Snippet15050475_38107.java", "target": 0, "func": "import java.security.spec.KeySpec;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport org.apache.commons.codec.binary.Base64;\n\npublic class EncryptDecrypt {\n    private static final String UNICODE_FORMAT = \"UTF8\";\n    public static final String DESEDE_ENCRYPTION_SCHEME = \"DESede\";\n    private KeySpec ks;\n    private SecretKeyFactory skf;\n    private Cipher cipher;\n    byte[] arrayBytes;\n    private String myEncryptionKey;\n    private String myEncryptionScheme;\n    SecretKey key;\n\n    public EncryptDecrypt() throws Exception {\n        myEncryptionKey = \"ThisIsSpartaThisIsSparta\";\n        myEncryptionScheme = DESEDE_ENCRYPTION_SCHEME;\n        arrayBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n        ks = new DESedeKeySpec(arrayBytes);\n        skf = SecretKeyFactory.getInstance(myEncryptionScheme);\n        cipher = Cipher.getInstance(myEncryptionScheme);\n        key = skf.generateSecret(ks);\n    }\n\n\n    public String encrypt(String unencryptedString) {\n        String encryptedString = null;\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);\n            byte[] encryptedText = cipher.doFinal(plainText);\n            encryptedString = new String(Base64.encodeBase64(encryptedText));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return encryptedString;\n    }\n\n\n    public String decrypt(String encryptedString) {\n        String decryptedText=null;\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] encryptedText = Base64.decodeBase64(encryptedString.getBytes());\n            byte[] plainText = cipher.doFinal(encryptedText);\n            decryptedText= new String(plainText);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return decryptedText;\n    }\n\n\n    public static void main(String args []) throws Exception\n    {\n        EncryptDecrypt td= new EncryptDecrypt();\n\n        String target=\"password@123\";\n        String encrypted=td.encrypt(target);\n        String decrypted=td.decrypt(encrypted);\n\n        System.out.println(\"String To Encrypt: \"+ target);\n        System.out.println(\"Encrypted String: \" + encrypted);\n        System.out.println(\"Decrypted String: \" + decrypted);\n\n    }\n}\n", "idx": 326}
{"project": "cipher", "commit_id": "Snippet42418031_24462.java", "target": 0, "func": "import java.security.MessageDigest;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class Md5Encryption \n{\n    private static final String ALGORITHM = \"md5\";\n    private static final String DIGEST_STRING = \"HG58YZ3CR9\";\n    private static final String CHARSET_UTF_8 = \"utf-8\";\n    private static final String SECRET_KEY_ALGORITHM = \"DESede\";\n    private static final String TRANSFORMATION_PADDING = \"DESede/CBC/PKCS5Padding\";\n\n/* Encryption Method */\npublic byte[] encrypt(String message) throws Exception \n{ \n    final MessageDigest md = MessageDigest.getInstance(ALGORITHM); \n    final byte[] digestOfPassword = md.digest(DIGEST_STRING.getBytes(CHARSET_UTF_8)); \n    final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24); \n    for (int j = 0, k = 16; j < 8;) { \n            keyBytes[k++] = keyBytes[j++]; \n    } \n    System.out.println(new String(keyBytes));\n    final SecretKey key = new SecretKeySpec(keyBytes, SECRET_KEY_ALGORITHM); \n    final IvParameterSpec iv = new IvParameterSpec(new byte[8]); \n    final Cipher cipher = Cipher.getInstance(TRANSFORMATION_PADDING); \n    cipher.init(Cipher.ENCRYPT_MODE, key, iv); \n\n    final byte[] plainTextBytes = message.getBytes(CHARSET_UTF_8);\n    System.out.println(new String(plainTextBytes));\n    final byte[] cipherText = cipher.doFinal(plainTextBytes); \n\n    //BASE64Encoder base64encoder = new BASE64Encoder();\n    //return base64encoder.encode(cipherText);\n    return cipherText; \n} \n\n\n\n/* Decryption Method */\n    public String decrypt(byte[] message) throws Exception { \n        final MessageDigest md = MessageDigest.getInstance(ALGORITHM); \n        final byte[] digestOfPassword = md.digest(DIGEST_STRING.getBytes(CHARSET_UTF_8)); \n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24); \n        for (int j = 0, k = 16; j < 8;) { \n                keyBytes[k++] = keyBytes[j++]; \n        } \n        System.out.println(new String(keyBytes));\n        final SecretKey key = new SecretKeySpec(keyBytes, SECRET_KEY_ALGORITHM); \n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]); \n        final Cipher decipher = Cipher.getInstance(TRANSFORMATION_PADDING); \n        decipher.init(Cipher.DECRYPT_MODE, key, iv); \n\n        final byte[] plainText = decipher.doFinal(message); \n\n        return new String(plainText); \n    }\n\n    public static void main(String[] args) throws Exception {\n\n\n        String text = \"TEST STRING TO ENCRYPT\";\n        byte[] codedtext = new Md5Encryption().encrypt(text);\n//        String codedtext = \".\u00aa\u00c9\u2026U$L\u00a7U`8\u00cb\u2030\u00ad?\u00a6\u201d\u203a\u00b0\u201e\";\n        String decodedtext = new Md5Encryption().decrypt(codedtext); \n\n        System.out.println(codedtext); // this is a byte array, you'll just see a reference to an array \n        System.out.println(decodedtext); // This correctly shows \"TEST STRING TO ENCRYPT\" \n    } \n\n\n}\n", "idx": 327}
{"project": "cipher", "commit_id": "Snippet24658939_6938.java", "target": 0, "func": "SecretKey secretKey = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\").generateSecret(new PBEKeySpec(\"a_private_key\".toCharArray()));\nCipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\")\ncipher.init(Cipher.ENCRYPT_MODE, secretKey, \n            new PBEParameterSpec(\n               new byte[] { (byte) 0x30, (byte) 0x31, (byte) 0x32, (byte) 0x33,\n                            (byte) 0x34, (byte) 0x35, (byte) 0x36, (byte) 0x37, },\n               15);\nbyte[] crypted = cipher.doFinal(\"StringToEncrypt\".getBytes(UTF8));\n", "idx": 328}
{"project": "cipher", "commit_id": "Snippet19644998_2374.java", "target": 0, "func": "/**\n* Usage:\n* \n* <pre>\n* String crypto = SimpleCrypto.encrypt(masterpassword, cleartext)\n* ...\n* String cleartext = SimpleCrypto.decrypt(masterpassword, crypto)\n* </pre>\n* \n* @author ferenc.hechler\n*/\npublic class SimpleCrypto {\n\nprivate final static String HEX = \"0123456789ABCDEF\";\n\npublic static String encrypt(String seed, String cleartext)\n        throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted)\n        throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted)\n        throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\n\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length() / 2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2 * buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\n\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n}\n\n}\n", "idx": 329}
{"project": "cipher", "commit_id": "Snippet859402_29781.java", "target": 0, "func": " next_pass :\n        for (int pass = 0; pass < 100; pass++) {\n          byte[] key = new byte[16];\n          (new SecureRandom()).nextBytes(key);\n          Cipher ciph = Cipher.getInstance(\"AES\");\n          SecretKeySpec ks = new SecretKeySpec(key, \"AES\");\n          ByteBuffer bb = ByteBuffer.allocate(16);\n          Set<String> already = new HashSet<String>(100000);\n          int colls = 0;\n          for (int i = 0; i < 200000; i++) {\n            bb.putLong(0, i);\n            ciph.init(Cipher.ENCRYPT_MODE, ks);\n            byte[] encr = ciph.doFinal(bb.array());\n            encr[0] &= 0x7f; // make all numbers positive\n            BigInteger bigint = new BigInteger(encr);\n            String userNo = bigint.toString();\n            userNo = userNo.substring(4, 16);\n            if (!already.add(userNo)) {\n              System.out.println(\"Coll after \" + i);\n              continue next_pass;\n            }\n          }\n          System.out.println(\"No collision.\");\n        }\n", "idx": 330}
{"project": "cipher", "commit_id": "Snippet18584937_1611.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.GeneralSecurityException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\n\nimport sun.misc.BASE64Encoder;\n\npublic class EncryptUtil {\nprivate static final byte[] SALT = {\n    (byte) 0xde, (byte) 0x33, (byte) 0x10, (byte) 0x12,\n    (byte) 0xde, (byte) 0x33, (byte) 0x10, (byte) 0x12,\n};\n\nprivate static String encrypt(String property, char[] password) throws GeneralSecurityException, UnsupportedEncodingException {\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey key = keyFactory.generateSecret(new PBEKeySpec(password));\n    Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n    return base64Encode(pbeCipher.doFinal(property.getBytes(\"UTF-8\")));\n}\n\nprivate static String base64Encode(byte[] bytes) {\n        // NB: This class is internal, and you probably should use another impl\n        return new BASE64Encoder().encode(bytes);\n    }\n\n    public static String encryptPassword(String username, String password) throws     UnsupportedEncodingException, GeneralSecurityException{\n        char[] pwChar = password.toCharArray();\n        String encryptedPassword = encrypt(username, pwChar);\n        return encryptedPassword;\n    }\n}\n", "idx": 331}
{"project": "cipher", "commit_id": "Snippet25590953_7922.java", "target": 0, "func": "String str = \"\";\n    String str2 = \"\";\n    DataOutputStream out;\n    DataInputStream in;\n\n    try {\n        Socket t = new Socket(\"127.0.0.1\", 9003);\n        in = new DataInputStream(t.getInputStream());\n        out = new DataOutputStream(t.getOutputStream());\n        BufferedReader br = new BufferedReader (new InputStreamReader(System.in));\n\n        boolean more = true;\n        System.out.println(in.readUTF());   \n\n        while (more) {\n            str = in.readUTF();\n            System.out.print(str);\n            str2 = br.readLine();\n            out.writeUTF(str2);\n            out.flush();\n            str = in.readUTF();\n\n            System.out.println(\"Encrypted Info: \" + str);\n\n            try {\n                String key1 = \"1234567812345678\"; \n                byte[] key2 = key1.getBytes();\n                SecretKeySpec secret = new SecretKeySpec(key2, \"AES\");\n\n                Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");        \n\n                cipher.init(Cipher.DECRYPT_MODE, secret);\n                byte[] decrypted = cipher.doFinal(str.getBytes());\n                System.out.println(\"Decrypted Info: \" + new String(decrypted));\n\n            }\n", "idx": 332}
{"project": "cipher", "commit_id": "Snippet9802368_34235.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/PKCS5Padding\");", "idx": 333}
{"project": "cipher", "commit_id": "Snippet9862394_34300.java", "target": 0, "func": "public byte[] decryptt(byte[] toDecrypt) throws Exception {\n    byte[] key = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    System.arraycopy(this.passphrase.getBytes(), 0, key, 0, ((this.passphrase.getBytes().length < 16) ? this.passphrase.getBytes().length : 16));\n    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] original = cipher.doFinal(toDecrypt);\n    return original;\n}\n", "idx": 334}
{"project": "cipher", "commit_id": "Snippet20401576_3032.java", "target": 0, "func": "import java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\n@SuppressWarnings(\"restriction\")\npublic class EncryptDecrypt {\n\n    private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = new byte[] { 'T', 'h', 'e', 'B',\n            'e', 's', 't', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };\n\n    public static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encVal);\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n    }\n\n}\n", "idx": 335}
{"project": "cipher", "commit_id": "Snippet33016371_15043.java", "target": 0, "func": "public class Crypto {\n    public static final String TAG = Crypto.class.getSimpleName();\n    // Replace me with a 16-byte key, share between Java and C#\n    private static Cipher aesCipher;\n    private static SecretKey secretKey;\n    private static IvParameterSpec ivParameterSpec;\n    private static String CIPHER_TRANSFORMATION = \"AES/CBC/PKCS5Padding\";\n    private static String CIPHER_ALGORITHM = \"AES\";\n    private static byte[] rawSecretKey = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};\n\n    private static String MESSAGEDIGEST_ALGORITHM = \"SHA-256\";\n\n    public Crypto(String passphrase) {\n        byte[] passwordKey = encodeDigest(passphrase);\n\n        try {\n            aesCipher = Cipher.getInstance(CIPHER_TRANSFORMATION);\n        } catch (NoSuchAlgorithmException e) {\n            Log.e(TAG, \"No such algorithm \" + CIPHER_ALGORITHM, e);\n        } catch (NoSuchPaddingException e) {\n            Log.e(TAG, \"No such padding PKCS5\", e);\n        }\n\n        secretKey = new SecretKeySpec(passwordKey, CIPHER_ALGORITHM);\n        ivParameterSpec = new IvParameterSpec(rawSecretKey);\n    }\n\n    public byte[] decrypt(byte[] clearData) {\n        try {\n            aesCipher.init(Cipher.DECRYPT_MODE, secretKey);\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        }\n\n        byte[] decryptedData;\n\n        try {\n            decryptedData = aesCipher.doFinal(clearData);\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n            return null;\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n            return null;\n        }\n        return decryptedData;\n\n    }\n\n    public String decryptAsBase64(byte[] clearData) throws IOException {\n        byte[] decryptedData = decrypt(clearData);\n        return new String(Base64New.decode(decryptedData));\n    }\n\n    public String encryptAsBase64(byte[] clearData) {\n        byte[] encryptedData = encrypt(clearData);\n        return Base64New.encodeBytes(encryptedData);\n    }\n\n    public byte[] encrypt(byte[] clearData) {\n        try {\n            aesCipher.init(Cipher.ENCRYPT_MODE, secretKey, ivParameterSpec);\n        } catch (InvalidKeyException e) {\n            Log.e(TAG, \"Invalid key\", e);\n            return null;\n        } catch (InvalidAlgorithmParameterException e) {\n            Log.e(TAG, \"Invalid algorithm \" + CIPHER_ALGORITHM, e);\n            return null;\n        }\n\n        byte[] encryptedData;\n        try {\n            encryptedData = aesCipher.doFinal(clearData);\n        } catch (IllegalBlockSizeException e) {\n            Log.e(TAG, \"Illegal block size\", e);\n            return null;\n        } catch (BadPaddingException e) {\n            Log.e(TAG, \"Bad padding\", e);\n            return null;\n        }\n        return encryptedData;\n    }\n\n    private byte[] encodeDigest(String text) {\n        MessageDigest digest;\n        try {\n            digest = MessageDigest.getInstance(MESSAGEDIGEST_ALGORITHM);\n            return digest.digest(text.getBytes());\n        } catch (NoSuchAlgorithmException e) {\n            Log.e(TAG, \"No such algorithm \" + MESSAGEDIGEST_ALGORITHM, e);\n        }\n\n        return null;\n    }\n}\n", "idx": 336}
{"project": "cipher", "commit_id": "Snippet20995263_3601.java", "target": 0, "func": "File f=new File(\"C:/Users/User/Desktop/Test.txt\");\nint ch;\n\nStringBuffer strContent = new StringBuffer(\"\");\nFileInputStream fin = null;\ntry {\n    fin = new FileInputStream(f);\n    while ((ch = fin.read()) != -1)\n        strContent.append((char) ch);\n    fin.close();\n} \ncatch (Exception e) {\n    System.out.println(e);\n}\n\nKeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\nkgen.init(128);\n\nSecretKey skey = kgen.generateKey();\nbyte[] raw = skey.getEncoded();\n\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\nCipher cipher = Cipher.getInstance(\"AES\");\n\ncipher.init(Cipher.DECRYPT_MODE, skeySpec);\nbyte[] original =cipher.doFinal(strContent.toString().getBytes());\n\nString originalString = new String(original);\nJOptionPane.showMessageDialog(null,originalString.toString());\n", "idx": 337}
{"project": "cipher", "commit_id": "Snippet12628315_36377.java", "target": 0, "func": "PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(key);\nKeyFactory factory = KeyFactory.getInstance(\"EC\", \"JsafeJCE\");\nPrivateKey privateKey = factory.generatePrivate(privKeySpec);\nCipher eciesDecrypter = Cipher.getInstance(\"ECIES/SHA1/HMACSHA1\", \"JsafeJCE\");\n", "idx": 338}
{"project": "cipher", "commit_id": "Snippet27018357_9162.java", "target": 0, "func": "package crypt;\n\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.util.Scanner;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.swing.JButton;\nimport javax.swing.JFileChooser;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\n\n/**\n * This program imports exports encrypts and decrypts any text file.\n * The known bugs are that you can't reuse exported and imported files\n * outside of the current application session.\n * This may be cause by the cipher having different random values in place\n * when it restarts the program. 2 ciphers are never the same.\n * This encryption application is nearly impossible to decrypt.\n * Yet do to the lack of being able to reuse the same cipher over 2 applications\n * the program is all but useless.\n * @author qward\n *\n */\n@SuppressWarnings(\"serial\")\npublic class Crypt extends JFrame {\n\n    final private Cipher cipher = Cipher.getInstance(\"AES\");\n\n    /**\n     * @throws NoSuchAlgorithmException\n     * @throws NoSuchPaddingException\n     */\n    public Crypt() throws NoSuchAlgorithmException, NoSuchPaddingException {\n        super(\"Cypt\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(600, 600);\n        setLocationRelativeTo(null);\n        setResizable(false);\n\n        // sets one cipher for encode and decode\n\n        // Initiating Components\n        JFileChooser fileChooser = new JFileChooser();\n        fileChooser.setCurrentDirectory(new File(System\n                .getProperty(\"user.home\")));\n        JPanel left = new JPanel();\n        JPanel right = new JPanel();\n        JPanel bottom = new JPanel();\n        JPanel top = new JPanel();\n        left.setLayout(new BorderLayout());\n        right.setLayout(new BorderLayout());\n        bottom.setLayout(new FlowLayout());\n        top.setLayout(new FlowLayout());\n        JLabel inputLabel = new JLabel(\"Input\");\n        JLabel outputLabel = new JLabel(\"Output\");\n        JButton generateKey = new JButton(\"Generate Key\");\n        final JTextArea input = new JTextArea(20, 25);\n        final JTextArea output = new JTextArea(20, 25);\n        JScrollPane inputScroll = new JScrollPane(input);\n        JScrollPane outputScroll = new JScrollPane(output);\n        final JTextField key = new JTextField(20);\n        JButton encode = new JButton(\"encode\");\n        JButton decode = new JButton(\"decode\");\n        JButton swap = new JButton(\"Swap\");\n        JMenuBar bar = new JMenuBar();\n        JMenu file = new JMenu(\"File\");\n        JMenuItem export = export(fileChooser, output);\n        JMenuItem imports = imports(fileChooser, input);\n        file.add(imports);\n        file.add(export);\n        bar.add(file);\n\n        // Position Components\n        bottom.add(generateKey);\n        bottom.add(key);\n        bottom.add(encode);\n        bottom.add(decode);\n        top.add(swap);\n        left.add(inputScroll, BorderLayout.CENTER);\n        left.add(inputLabel, BorderLayout.NORTH);\n        right.add(outputScroll, BorderLayout.CENTER);\n        right.add(outputLabel, BorderLayout.NORTH);\n        add(left, BorderLayout.WEST);\n        add(right, BorderLayout.EAST);\n        add(bottom, BorderLayout.SOUTH);\n        add(top, BorderLayout.NORTH);\n        setJMenuBar(bar);\n\n        // Add events to buttons\n        encode.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent arg0) {\n                if (key.getText().length() == 16) {\n                    output.setText(encrypt(input.getText(), new SecretKeySpec(\n                            key.getText().getBytes(), \"AES\"), cipher));\n                } else {\n                    JOptionPane.showMessageDialog(null,\n                            \"Please input a valid 16 character key\");\n                }\n            }\n        });\n        generateKey.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent arg0) {\n                key.setText(generateKey());\n            }\n        });\n        decode.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent arg0) {\n                if (key.getText().length() == 16) {\n                    output.setText(decrypt(input.getText(), new SecretKeySpec(\n                            key.getText().getBytes(), \"AES\"), cipher));\n                } else {\n                    JOptionPane.showMessageDialog(null,\n                            \"Please input a valid 16 character key\");\n                }\n            }\n        });\n        swap.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent arg0) {\n                String temp = input.getText();\n                input.setText(output.getText());\n                output.setText(temp);\n            }\n        });\n\n        // begin\n        pack();\n        setVisible(true);\n    }\n\n    /**\n     * @param fileChooser\n     * @param output\n     * @return\n     */\n    private JMenuItem export(final JFileChooser fileChooser,\n            final JTextArea output) {\n        JMenuItem export = new JMenuItem(\"Export\");\n        export.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent arg0) {\n                int result = fileChooser.showOpenDialog(Crypt.this);\n                if (result == JFileChooser.APPROVE_OPTION) {\n                    File selectedFile = fileChooser.getSelectedFile();\n                    if (selectedFile.getName().toLowerCase().endsWith(\".txt\")) {\n                        PrintWriter out = null;\n                        try {\n                            out = new PrintWriter(selectedFile\n                                    .getAbsolutePath());\n                            out.print(new String(cipher.doFinal(output\n                                    .getText().getBytes())));\n                        } catch (FileNotFoundException\n                                | IllegalBlockSizeException\n                                | BadPaddingException e) {\n                            out.print(output.getText());\n                        } finally {\n                            out.close();\n                        }\n                    } else {\n                        JOptionPane.showMessageDialog(null,\n                                \"Please Select a .txt File\");\n                    }\n                }\n            }\n        });\n        return export;\n    }\n\n    /**\n     * @param fileChooser\n     * @param input\n     * @return\n     */\n    private JMenuItem imports(final JFileChooser fileChooser,\n            final JTextArea input) {\n        JMenuItem imports = new JMenuItem(\"Import\");\n        imports.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent arg0) {\n                int result = fileChooser.showOpenDialog(Crypt.this);\n                if (result == JFileChooser.APPROVE_OPTION) {\n                    File selectedFile = fileChooser.getSelectedFile();\n                    if (selectedFile.getName().toLowerCase().endsWith(\".txt\")) {\n                        Scanner in = null;\n                        try {\n                            in = new Scanner(new File(selectedFile\n                                    .getAbsolutePath()));\n                            String str = \"\";\n                            while (in.hasNextLine()) {\n                                str += in.nextLine() + \"\\n\";\n                            }\n                            byte[] encrypted = cipher.doFinal(input.getText()\n                                    .getBytes());\n                            input.setText(new String(encrypted, \"ISO-8859-1\"));\n                        } catch (Exception e) {\n                            try {\n                                in = new Scanner(new File(selectedFile\n                                        .getAbsolutePath()));\n                                String str = \"\";\n                                while (in.hasNextLine()) {\n                                    str += in.nextLine() + \"\\n\";\n                                }\n                                input.setText(new String(str));\n                            } catch (FileNotFoundException e1) {\n                                // TODO Auto-generated catch block\n                                e1.printStackTrace();\n                            }\n                        } finally {\n                            in.close();\n                        }\n                    } else {\n                        JOptionPane.showMessageDialog(null,\n                                \"Please Select a .txt File\");\n                    }\n                }\n            }\n        });\n        return imports;\n    }\n\n    /**\n     * @return\n     */\n    private String generateKey() {\n        try {\n            SecureRandom random = new SecureRandom();\n            return new String(random.generateSeed(16), \"ISO-8859-1\");\n        } catch (UnsupportedEncodingException u) {\n\n        }\n        return \"\";\n    }\n\n    /**\n     * @param input\n     * @param key\n     * @param cipher\n     * @return\n     */\n    private String encrypt(String input, Key key, Cipher cipher) {\n\n        try {\n            // encrypt the text\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] encrypted = cipher.doFinal(input.getBytes());\n\n            return new String(encrypted, \"ISO-8859-1\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return \"\";\n    }\n\n    /**\n     * @param input\n     * @param key\n     * @param cipher\n     * @return\n     */\n    private String decrypt(String input, Key key, Cipher cipher) {\n        try {\n            // decrypt the text\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            String decrypted = new String(cipher.doFinal(input\n                    .getBytes(\"ISO-8859-1\")));\n\n            return decrypted;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return \"\";\n    }\n\n    /**\n     * @param args\n     * @throws NoSuchAlgorithmException\n     * @throws NoSuchPaddingException\n     * @throws InvalidKeyException\n     */\n    public static void main(String[] args) throws NoSuchAlgorithmException,\n            NoSuchPaddingException, InvalidKeyException {\n        new Crypt();\n    }\n}\n", "idx": 339}
{"project": "cipher", "commit_id": "Snippet21050096_3634.java", "target": 0, "func": "package com.devleb.encdecapp;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.GeneralSecurityException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Base64;\nimport android.util.Log;\nimport android.view.ContextMenu;\nimport android.view.ContextMenu.ContextMenuInfo;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.AdapterView;\nimport android.widget.AdapterView.OnItemSelectedListener;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Spinner;\n\npublic class MainActivity extends Activity implements OnClickListener {\n    // views for the layout\n    Spinner spin;\n    EditText edit_txt_pass;\n    static EditText edit_txt_enc_string;\n    EditText edit_txt_raw;\n    static EditText edit_txt_dec_string;\n    Button btn_encrypt, btn_decrypt, btn_clear;\n\n    private static SecretKey SKey;\n    static String cyphertext = \"\";\n    static String STReditTxtPass;\n    String strPaddingencryption;\n    static int iterations = 1000;\n    private static final String[] items = { \"Padding Key derivation\",\n            \"SHA1PRNG key derivation\", \"PBKDF2 key derivation\",\n            \"PKCS#12 key derivation\" };\n\n    private static final String TAG = MainActivity.class.getSimpleName();\n    private static final String[] Passwords = { \"password\", \"cryptography\",\n            \"cipher\", \"algorithm\", \"qwerty\" };\n\n    // mesage that will be binded with the key to generate the cypher text\n    private static String PlainText = \"this is the text that will be encrypted\";\n\n    // the list that will be used for the OnItemSelection method\n    private static final int PADDING_ENC_IDX = 0;\n    private static final int SHA1PRNG_ENC_IDX = 1;\n    private static final int PBKDF2_ENC_IDX = 2;\n    private static final int PKCS12_ENC_IDX = 3;\n\n    byte[] salt = { (byte) 0x11, (byte) 0x9B, (byte) 0xC6, (byte) 0xFE,\n            (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x77 };;\n\n    static byte[] ivBytes = { 0, 0, 0, 0, 0, 0, 0, 0 };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        KeyGenerator kg = null;\n        try {\n            kg = KeyGenerator.getInstance(\"DES\");\n        } catch (NoSuchAlgorithmException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        SKey = kg.generateKey();\n\n        // creation of the spinner with setting Array adapter and\n        // DropDownresourse\n        spin = (Spinner) findViewById(R.id.spiner);\n        spin.setOnItemSelectedListener(new OnItemSelectedListener() {\n\n            @Override\n            public void onItemSelected(AdapterView<?> arg0, View arg1,\n                    int arg2, long arg3) {\n                // TODO Auto-generated method stub\n\n            }\n\n            @Override\n            public void onNothingSelected(AdapterView<?> arg0) {\n                // TODO Auto-generated method stub\n\n            }\n        });\n\n        ArrayAdapter<String> aa = new ArrayAdapter<String>(this,\n                android.R.layout.simple_spinner_item, items);\n        aa.setDropDownViewResource(android.R.layout.simple_dropdown_item_1line);\n        spin.setAdapter(aa);\n        // end of the spinner code\n\n        edit_txt_pass = (EditText) findViewById(R.id.editTxtPass);\n        edit_txt_enc_string = (EditText) findViewById(R.id.editTxtEncString);\n        edit_txt_raw = (EditText) findViewById(R.id.editTxtRawKey);\n        edit_txt_dec_string = (EditText) findViewById(R.id.editTxtDecString);\n\n        btn_encrypt = (Button) findViewById(R.id.btnEncrypt);\n        btn_encrypt.setOnClickListener(this);\n\n        btn_decrypt = (Button) findViewById(R.id.btnDecrypt);\n        btn_decrypt.setOnClickListener(this);\n\n        btn_clear = (Button) findViewById(R.id.btnClear);\n        btn_clear.setOnClickListener(this);\n\n        // / for registering the editText to the Context Menu\n        registerForContextMenu(edit_txt_pass);\n\n    }\n\n    // for the ciphering of the plainText using the base 64\n    public static String toBase64(byte[] bytes) {\n        return Base64.encodeToString(bytes, Base64.NO_WRAP);\n    }\n\n    public static byte[] fromBase64(byte[] bytes) {\n        // return Base64.encodeToString(bytes, Base64.NO_WRAP);\n        return Base64.decode(bytes, Base64.DEFAULT);\n    }\n\n    @Override\n    public void onCreateContextMenu(ContextMenu menu, View v,\n            ContextMenuInfo menuInfo) {\n        // TODO Auto-generated method stub\n\n        int groupId = 0;\n        menu.add(groupId, 1, 1, \"password\");\n        menu.add(groupId, 2, 2, \"cryptography\");\n        menu.add(groupId, 3, 3, \"cipher\");\n        menu.add(groupId, 4, 4, \"algorithm\");\n        menu.add(groupId, 5, 5, \"qwerty\");\n\n        super.onCreateContextMenu(menu, v, menuInfo);\n    }\n\n    @Override\n    public boolean onContextItemSelected(MenuItem item) {\n        // TODO Auto-generated method stub\n\n        return getText(item);\n\n        // return super.onContextItemSelected(item);\n    }\n\n    private boolean getText(MenuItem item) {\n        // TODO Auto-generated method stub\n\n        int menuItemId = item.getItemId();\n\n        if (menuItemId == 1) {\n            edit_txt_pass.setText(\"password\");\n        }\n        if (menuItemId == 2) {\n            edit_txt_pass.setText(\"cryptography\");\n        }\n        if (menuItemId == 3) {\n            edit_txt_pass.setText(\"cipher\");\n        }\n        if (menuItemId == 4) {\n            edit_txt_pass.setText(\"algorithm\");\n        }\n        if (menuItemId == 5) {\n            edit_txt_pass.setText(\"qwerty\");\n        }\n        STReditTxtPass = edit_txt_pass.getText().toString();\n\n        Log.w(\"the String of the Password text\", STReditTxtPass);\n        return false;\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.main, menu);\n        return true;\n    }\n\n    @Override\n    public void onClick(View v) {\n        // TODO Auto-generated method stub\n\n        if (v == btn_encrypt) {\n\n            encryptPadding(PlainText, salt);\n        } else if (v == btn_clear) {\n            edit_txt_enc_string.setText(\"\");\n        } else if (v == btn_decrypt) {\n            decryptPadding(cyphertext, salt);\n        }\n    }\n\n    public static String encryptPadding(String plaintext, byte[] salt) {\n        try {\n\n            Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n            cipher.init(Cipher.ENCRYPT_MODE, SKey);\n\n            byte[] cipherText = cipher.doFinal(PlainText.getBytes(\"UTF-8\"));\n\n            cyphertext = String.format(\"%s%s%s\", toBase64(salt), \"]\",\n                    toBase64(cipherText));\n            edit_txt_enc_string.setText(cyphertext);\n            return cyphertext;\n        } catch (GeneralSecurityException e) {\n            throw new RuntimeException(e);\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static String decryptPadding(String ctext, byte[] salt) {\n        try {\n\n            Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n            IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n            cipher.init(Cipher.DECRYPT_MODE, SKey, ivSpec);\n\n            byte[] plaintxt = cipher.doFinal(cyphertext.getBytes(\"UTF-8\"));\n\n            PlainText = String.format(\"%s%s%s\", fromBase64(salt), \"]\",\n                    fromBase64(plaintxt));\n            edit_txt_dec_string.setText(PlainText);\n            return PlainText;\n        } catch (GeneralSecurityException e) {\n            throw new RuntimeException(e);\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n", "idx": 340}
{"project": "cipher", "commit_id": "Snippet15147738_38232.java", "target": 0, "func": "this.encrypter = Cipher.getInstance(\"DESede/ECB/Nopadding\", \"BC\");", "idx": 341}
{"project": "cipher", "commit_id": "Snippet17221829_468.java", "target": 0, "func": "private static final String ALGO = \"AES\";\nprivate static final byte[] keyValue = new byte[] { '1', '1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1','1','1','1','1' };\n\npublic static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n     //   String encryptedValue = new BASE64Encoder().encode(encVal);\n\n        byte[] decoded = Base64.encodeBase64(encVal);\n\n        return (new String(decoded, \"UTF-8\") + \"\\n\");\n    }\n\nprivate static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n    }\n", "idx": 342}
{"project": "cipher", "commit_id": "Snippet19296028_1627.java", "target": 0, "func": "byte[] iv = \"87654321\".getBytes(\"US-ASCII\");\nbyte[] key = \"SampleKey\".getBytes(\"US-ASCII\");\nbyte[] data = new byte[30]; // for example\n\nSecretKeySpec skeySpec = new SecretKeySpec(key, \"RC2\");\n\nRC2ParameterSpec ivSpec = new RC2ParameterSpec(key.length * 8, iv);\n\nCipher cipher = Cipher.getInstance(\"RC2/CBC/PKCS5Padding\");\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivSpec);\nbyte[] encrypted = cipher.doFinal(data);\n\n// ....\n", "idx": 343}
{"project": "cipher", "commit_id": "Snippet21252990_3785.java", "target": 0, "func": "private static String decrypt(String seed, String encrypted) throws Exception {\n    byte[] keyb = seed.getBytes(\"UTF-8\");\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    byte[] thedigest = md.digest(keyb);\n    SecretKeySpec skey = new SecretKeySpec(thedigest, \"AES\");\n    Cipher dcipher = Cipher.getInstance(\"AES\");\n    dcipher.init(Cipher.DECRYPT_MODE, skey);\n\n    byte[] clearbyte = dcipher.doFinal(toByte(encrypted));\n    return new String(clearbyte);\n}\n\nprivate static byte[] toByte(String hexString) {\n    int len = hexString.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++) {\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n    }\n    return result;\n}\n", "idx": 344}
{"project": "cipher", "commit_id": "Snippet37435895_19370.java", "target": 0, "func": "    private static String encryptDataWithSymmetricKey (SecretKeySpec symmKey, String data) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\n\n\n    // encryption\n    byte[] toBeCiphred = data.getBytes(\"UTF-8\");\n    String encryptedData = null;\n\n    try {\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.ENCRYPT_MODE, symmKey);\n        byte[] encodedBytes = c.doFinal(toBeCiphred);\n        System.out.println(\"BYTE STRING (ASYMM): \" + encodedBytes);\n        encryptedData = Base64.encodeToString(encodedBytes, Base64.DEFAULT);\n\n    } catch (Exception e) {\n        Log.e(TAG, \"AES encryption error\");\n        throw new RuntimeException(e);\n    }\n\n\n    return encryptedData;\n}\n    encryptedData = encryptDataWithSymmetricKey(symmKey, text);\n", "idx": 345}
{"project": "cipher", "commit_id": "Snippet5207184_31498.java", "target": 0, "func": "public static String code(String stringToCode) {\n    try {\n        stringToCode = encrypt(\"somekey\",stringToCode);\n    } catch (Exception e1) {\n        // TODO Auto-generated catch block\n        e1.printStackTrace();\n    }\n    return stringToCode;\n}\n\npublic static String decode(String stringToDecode) {\n    try {\n        stringToDecode = decrypt(\"somekey\",stringToDecode);\n    } catch (Exception e1) {\n        // TODO Auto-generated catch block\n        e1.printStackTrace();\n    }\n    return stringToDecode;\n}\n\npublic static String encrypt(String seed, String cleartext) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2*buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\n\nprivate final static String HEX = \"0123456789ABCDEF\";\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n}\n", "idx": 346}
{"project": "cipher", "commit_id": "Snippet11644152_35670.java", "target": 0, "func": "protected String encrypt( String value ) {\n    try {\n        final byte[] bytes = value!=null ? value.getBytes(UTF8) : new byte[0];\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(),Settings.System.ANDROID_ID).getBytes(UTF8), 20));\n        return new String(Base64.encode(pbeCipher.doFinal(bytes), Base64.NO_WRAP),UTF8);\n    } catch( Exception e ) {\n        throw new RuntimeException(e);\n    }\n}\n\nprotected String decrypt(String value){\n    try {\n        final byte[] bytes = value!=null ? Base64.decode(value,Base64.DEFAULT) : new byte[0];\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(),Settings.System.ANDROID_ID).getBytes(UTF8), 20));\n        return new String(pbeCipher.doFinal(bytes),UTF8);\n    } catch( Exception e) {\n        throw new RuntimeException(e);\n    }\n}\n", "idx": 347}
{"project": "cipher", "commit_id": "Snippet20847679_3457.java", "target": 0, "func": "public static void main(String[] args) throws Exception\n{\n    byte[]        input = new byte[] {\n                      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n                      (byte)0x88, (byte)0x99, (byte)0xaa, (byte)0xbb,\n                      (byte)0xcc, (byte)0xdd, (byte)0xee, (byte)0xff };\n    byte[]        keyBytes = new byte[] {\n                      0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n                      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n                      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };\n\n    SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n\n    Cipher        cipher = Cipher.getInstance(\"AES/ECB/NoPadding\", \"BC\");\n\n    System.out.println(\"input text : \" + Utils.toHex(input));\n\n    // encryption pass\n\n    byte[] cipherText = new byte[input.length];\n\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n\n    int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n\n    ctLength += cipher.doFinal(cipherText, ctLength);\n\n    System.out.println(\"cipher text: \" + Utils.toHex(cipherText)\n                                                 + \" bytes: \" + ctLength);\n\n    // decryption pass\n\n    byte[] plainText = new byte[ctLength];\n\n    cipher.init(Cipher.DECRYPT_MODE, key);\n\n    int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);\n\n    ptLength += cipher.doFinal(plainText, ptLength);\n\n    System.out.println(\"plain text : \" + Utils.toHex(plainText)\n                                                 + \" bytes: \" + ptLength);\n}\n", "idx": 348}
{"project": "cipher", "commit_id": "Snippet6431225_32124.java", "target": 0, "func": "final Cipher encryptCipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"BC\");\nencryptCipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(\"7c54367a45b37a192abc2cd7f4520304\".getBytes(), \"AES\"));\nfinal byte[] encrypt = encryptCipher.doFinal(\"This is my text\".getBytes());\nSystem.out.println(new String(Base64.encode(encrypt)));\n\nfinal Cipher decryptCipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"BC\");\ndecryptCipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(\"7c54367a45b37a192abc2cd7f4520304\".getBytes(), \"AES\"));\nfinal byte[] decrypt = decryptCipher.doFinal(encrypt);\nSystem.out.println(new String(decrypt));\n", "idx": 349}
{"project": "cipher", "commit_id": "Snippet22864105_5270.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\n", "idx": 350}
{"project": "cipher", "commit_id": "Snippet5613948_31720.java", "target": 0, "func": "    //Decrypt the httpURLConnection response stream\n    Cipher symmetricCipher = Cipher.getInstance(\"DES\");\n    symmetricCipher.init(Cipher.DECRYPT_MODE, symmetricKey);\n    CipherInputStream cipherInput = new CipherInputStream(httpInput, symmetricCipher);\n    BufferedInputStream bufferedInput = new BufferedInputStream(cipherInput);           \n\n    //read HashMap and MD5\n    ObjectInputStream objectInput = new ObjectInputStream(in);\n    HashMap<String, Object> result = (HashMap<String, Object>) objectInput.readObject();\n    byte[] hash1 = (byte[]) objectInput.readObject();\n\n    //workout hash of the Hashmap received.\n    MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n    ByteArrayOutputStream bos = new ByteArrayOutputStream() ;\n    ObjectOutputStream out = new ObjectOutputStream(bos) ;\n    out.writeObject(result);\n    out.close();\n    byte[] hash2 = messageDigest.digest(bos.toByteArray();\n\n    // Compare two hashes\n    if (!Arrays.equals(hash1, hash2)) {\n        System.out.println(\"Result received does not match hash, stopping list operation\");\n        return;\n    }\n", "idx": 351}
{"project": "cipher", "commit_id": "Snippet35027229_16949.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class PHPEncryption\n{   \n    private static final char[] hexDigits = {\n        '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'\n    };\n       /**\n     * Returns a string of hexadecimal digits from a byte array. Each\n     * byte is converted to 2 hex symbols.\n     * <p>\n     * If offset and length are omitted, the whole array is used.\n     */\n    public static String toString(byte[] ba, int offset, int length) {\n        char[] buf = new char[length * 2];\n        int j = 0;\n        int k;\n\n        for (int i = offset; i < offset + length; i++) {\n            k = ba[i];\n            buf[j++] = hexDigits[(k >>> 4) & 0x0F];\n            buf[j++] = hexDigits[ k        & 0x0F];\n        }\n        return new String(buf);\n    }\n    public static String toString(byte[] ba) {\n        return toString(ba, 0, ba.length);\n    }\n      /**\n     * Returns the number from 0 to 15 corresponding to the hex digit <i>ch</i>.\n     */\n    public static int fromDigit(char ch) {\n        if (ch >= '0' && ch <= '9')\n            return ch - '0';\n        if (ch >= 'A' && ch <= 'F')\n            return ch - 'A' + 10;\n        if (ch >= 'a' && ch <= 'f')\n            return ch - 'a' + 10;\n\n        throw new IllegalArgumentException(\"invalid hex digit '\" + ch + \"'\");\n    }\n    /**\n     * Returns a byte array from a string of hexadecimal digits.\n     */\n    public static byte[] fromString(String hex) {\n        int len = hex.length();\n        byte[] buf = new byte[((len + 1) / 2)];\n\n        int i = 0, j = 0;\n        if ((len % 2) == 1)\n            buf[j++] = (byte) fromDigit(hex.charAt(i++));\n\n        while (i < len) {\n            buf[j++] = (byte) ((fromDigit(hex.charAt(i++)) << 4) |\n                                fromDigit(hex.charAt(i++)));\n        }\n        return buf;\n    }\n\n    //Add padding to input value to \n    public static byte[] addPadding(byte[] inData, int offset, int len) {\n\n        byte[] bp = null;\n        int padChars = 8;               // start with max padding value\n        int partial = (len + 1) % padChars;     // calculate how many extra bytes exist\n        if (partial == 0) padChars = 1;         // if none, set to only pad with length byte\n        else padChars = padChars - partial + 1; // calculate padding size to include length\n\n        bp = new byte[len + padChars];\n        //bp[0] = Byte.parseByte(Integer.toString(padChars));\n        System.arraycopy(inData, offset, bp, 0, len);\n        return bp;\n    }\n    //remove padding added while decryption\n     public static byte[] removePadding(byte[] inData) {\n\n            byte[] bp = null;\n            int dataLength = 0;\n            int padLength = 0;\n            //loop in to find out pad lenght\n            for(int i=inData.length -1 ; i > -1  ; i--) {\n                byte currentData = inData[i];\n                if(i != inData.length -1) {\n                    //check for current and previous data and both must be 0\n                    byte previousData = inData[i+1];\n                    if(previousData == currentData && currentData == 0) {\n                        padLength++;\n                    } else {\n                        //break the loop\n                        break;\n                    }\n                } else {\n                    //if last data is null then increase the pad length\n                    if(currentData == 0) {\n                        padLength++;\n                    }\n                }\n            }\n            dataLength = inData.length - padLength;\n            bp = new byte[dataLength];\n            System.arraycopy(inData, 0, bp, 0, dataLength);      \n            return bp;\n      } \n     //Get SecretKey object \n    public static SecretKey getSecretKey(String secretString) {\n            SecretKey myDesKey = null;\n            try {\n                //get bytes from key\n                byte [] keyBytes = secretString.getBytes();\n\n                //Generate DES key \n                myDesKey = new SecretKeySpec(keyBytes,\"DESede\" );\n\n            }catch (Exception e) {\n                e.printStackTrace();    \n            }\n            return myDesKey;\n    }\n     //encrypt data\n     public static byte[] encrypt(byte[] text, String secretString) {\n         byte[] textEncrypted = null;\n            try {\n                 //Generate DES key \n                SecretKey myDesKey = getSecretKey(secretString);\n\n                Cipher desCipher;\n                // Create the cipher  for DES-EDE3\n                desCipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n\n                // Initialize the cipher for encryption\n                desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n\n                //Add padding to make it multiple of 8\n                text  = addPadding (text, 0 , text.length);\n\n                // encrypt the text\n                textEncrypted = desCipher.doFinal(text);\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n            return textEncrypted;\n\n          } \n     //Decrypt given encrypted bytes\n    public static byte[] decrypt (byte [] textEncrypted, String secretString){\n        byte[] textDecrypted = null;\n        try {            \n            //Generate DES key \n            SecretKey myDesKey = getSecretKey(secretString);\n\n            Cipher desCipher;\n            // Create the cipher  for DES-EDE3\n            desCipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n\n\n            // Initialize the same cipher for decryption\n            desCipher.init(Cipher.DECRYPT_MODE, myDesKey);\n\n            // Decrypt the text\n            textDecrypted = desCipher.doFinal(textEncrypted);\n\n            //remove padding which was added during encryption\n            textDecrypted  = removePadding (textDecrypted);\n\n        }catch (Exception e) {\n            e.printStackTrace();    \n        }\n        return textDecrypted;\n    } \n    public static void main(String[] argv) {        \n        try{\n            String secretString = \"1234567890qwertyuiopasdf\"; //key must be 24 chars\n            String plainTextString = \"Hello World\";\n            byte[] plainText = plainTextString.getBytes();\n            //Encrypt given plain text\n            byte [] encryptedText = encrypt(plainText, secretString);\n            //Convert into hex\n\n            String hexStr = toString(encryptedText);\n            System.out.println(\"Encrypted String \"+hexStr);        \n            byte [] decryptedText = decrypt(encryptedText, secretString);\n            System.out.println(\"Decrypted string \"+new String (decryptedText));\n\n        }catch(Exception e){\n            e.printStackTrace();\n        } \n\n    }\n}\n", "idx": 352}
{"project": "cipher", "commit_id": "Snippet32054670_14105.java", "target": 0, "func": "String privateKey = \"someprivatekey\";\nString data = \"dataToEncrypt\";\n\nDESKeySpec keySpec = new DESKeySpec(privateKey.getBytes(\"UTF-8\"));\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\nSecretKey key = keyFactory.generateSecret(keySpec);\n\nbyte[] dataToBytes = data.getBytes(\"UTF-8\");      \n\nCipher cipher = Cipher.getInstance(\"DES\"); \ncipher.init(Cipher.ENCRYPT_MODE, key);\n\n// send this string to server \nString encryptedStr = Base64.encodeToString(cipher.doFinal(dataToBytes), 0);\n", "idx": 353}
{"project": "cipher", "commit_id": "Snippet21852889_4248.java", "target": 0, "func": " public class AESImpl {\n\n  private static String decryptedString;\n\n  private static String encryptedString;\n\n  public static void main(String[] args) throws NoSuchAlgorithmException, IOException,  ClassNotFoundException {\n\n    String strToEncrypt = \"This text has to be encrypted\";\n    SecretKey secretKey = generateSecretKey();\n    String encryptStr = encrypt(strToEncrypt, secretKey);\n    System.out.println(\"Encrypted String : \" + encryptStr + \"It should not come in new line\");\n    String decryptStr = decrypt(encryptStr, secretKey);\n    System.out.println(\"Decrypted String : \" + decryptStr);\n  }\n\n  private static SecretKey generateSecretKey() throws NoSuchAlgorithmException, IOException {\n    KeyGenerator kg = KeyGenerator.getInstance(\"AES\");\n    kg.init(128);\n    SecretKey sk = kg.generateKey();\n    String secretKey = String.valueOf(Hex.encodeHex(sk.getEncoded()));\n    System.out.println(\"Secret key is \" + secretKey);\n    return sk;\n  }\n\n  public static String encrypt(String strToEncrypt, SecretKey secretKey) {\n    try {\n      Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n      cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n      encryptedString = new String(Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes())));\n    } catch (Exception e) {\n      System.out.println(\"Error while encrypting: \" + e.toString());\n    }\n\n    return encryptedString;\n  }\n\n  public static String decrypt(String strToDecrypt, SecretKey secretKey) {\n    try {\n      Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n      cipher.init(Cipher.DECRYPT_MODE, secretKey);\n      decryptedString = new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt)));\n    } catch (Exception e) {\n      System.out.println(\"Error while decrypting: \" + e.toString());\n    }\n\n    return decryptedString;\n  }\n}\n", "idx": 354}
{"project": "cipher", "commit_id": "Snippet7020945_32529.java", "target": 0, "func": "    String key = \"blah\";\n    DESKeySpec dks = new DESKeySpec(key.getBytes());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey desKey = skf.generateSecret(dks);\n    System.out.println(desKey);\n\n    Cipher cipher = Cipher.getInstance(\"DES\"); // DES/ECB/PKCS5Padding for SunJCE\n\n    if (mode == Cipher.DECRYPT_MODE) {\n        cipher.init(Cipher.DECRYPT_MODE, desKey);\n        CipherOutputStream cos = new CipherOutputStream(os, cipher);\n        doCopy(is, cos);\n    }\n", "idx": 355}
{"project": "cipher", "commit_id": "Snippet35318524_17248.java", "target": 0, "func": "          SecretKeySpec key = new SecretKeySpec(strkey.getBytes(\"UTF-8\"), \"Blowfish\");\n         Cipher cipher = Cipher.getInstance(\"Blowfish\");\n         cipher.init(Cipher.DECRYPT_MODE, key);\n         byte[] decrypted = cipher.doFinal(encryptedData);\n         return new String(decrypted);\n", "idx": 356}
{"project": "cipher", "commit_id": "Snippet6182668_31993.java", "target": 0, "func": "try {\n    FileInputStream inFile = new FileInputStream(f.getAbsolutePath());\n    FileOutputStream outFile = new FileOutputStream(f.getAbsoluteFile() + \".des\");\n\n    PBEKeySpec keySpec = new PBEKeySpec(text.toCharArray());\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey passwordKey = keyFactory.generateSecret(keySpec);\n    byte[] salt = new byte[8];\n    Random rnd = new Random();\n    rnd.nextBytes(salt);\n    int iterations = 100;\n\n    PBEParameterSpec paramaterSpec = new PBEParameterSpec(salt, iterations);\n\n    Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    cipher.init(Cipher.ENCRYPT_MODE, passwordKey, paramaterSpec);\n\n    outFile.write(salt);\n\n\n\n    byte[] input = new byte[inFile.available()];\n\n    int bytesRead;\n     while ((bytesRead = inFile.read(input)) != -1)\n                {\n                  byte[] output = cipher.update(input, 0, bytesRead);\n                   if (output != null) outFile.write(output);\n               }\n\n               byte[] output = cipher.doFinal();\n               if (output != null) outFile.write(output);\n               f.delete();\n              inFile.close();\n               outFile.flush();\n               outFile.close();\n", "idx": 357}
{"project": "cipher", "commit_id": "Snippet39288462_21173.java", "target": 0, "func": "public void encrypt(String desKey, String zipFileName, String fileName) {\n    InputStream inputStream = null;\n    FileInputStream fileInputStream = null;\n    FileOutputStream fileOutputStream = null;\n    try {\n        fileInputStream = new FileInputStream(zipFileName);\n\n        SecretKey keySpec = new SecretKeySpec(desKey.getBytes(), \"DESede\");\n\n        Cipher cipher = Cipher.getInstance(\"DESede\");\n        cipher.init(Cipher.DECRYPT_MODE, keySpec);\n\n        InputStream cipherInputStream = new CipherInputStream(fileInputStream, cipher);\n\n        ZipInputStream zipInputStream = new ZipInputStream(cipherInputStream);\n        ZipEntry nextEntry = zipInputStream.getNextEntry();\n        inputStream = zipInputStream;\n        if (nextEntry == null) {\n            System.out.println(\"error\");\n            inputStream = null;\n        }\n        fileOutputStream = new FileOutputStream(fileName);\n        IOUtils.copy(inputStream, fileOutputStream);\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            if (inputStream != null) {\n                inputStream.close();\n            } else if (fileInputStream != null) {\n                fileInputStream.close();\n            } else if (fileOutputStream != null) {\n                fileOutputStream.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n", "idx": 358}
{"project": "cipher", "commit_id": "Snippet24014714_6329.java", "target": 0, "func": "public class MainActivity extends Activity {\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_aeshelper);\n\n    Button btn = (Button) findViewById(R.id.button1);\n\n    final String FileDir = \"data/\";\n\n\n    btn.setOnClickListener(new View.OnClickListener() {\n\n        @Override\n        public void onClick(View arg0) {\n            try {\n                FileInputStream fis = new FileInputStream(new File(FileDir+\"aaa.mp4\"));\n                File outfile = new File(FileDir + \"EncryptedVideo.mp4\");\n                int read;\n                if (!outfile.exists())\n                    outfile.createNewFile();\n                File decfile = new File(FileDir + \"DecryptedVideo.mp4\");\n                if (!decfile.exists())\n                    decfile.createNewFile();\n                FileOutputStream fos = new FileOutputStream(outfile);\n                FileInputStream encfis = new FileInputStream(outfile);\n                FileOutputStream decfos = new FileOutputStream(decfile);\n                Cipher encipher = Cipher.getInstance(\"AES\");\n                Cipher decipher = Cipher.getInstance(\"AES\");\n                KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n\n                SecretKey skey = kgen.generateKey();\n                encipher.init(Cipher.ENCRYPT_MODE, skey);\n                CipherInputStream cis = new CipherInputStream(fis, encipher);\n                decipher.init(Cipher.DECRYPT_MODE, skey);\n                CipherOutputStream cos = new CipherOutputStream(decfos, decipher);\n                while ((read = cis.read()) != -1) {\n                    fos.write((char) read);\n                    fos.flush();\n                }\n                fos.close();\n                while ((read = encfis.read()) != -1) {\n                    cos.write(read);\n                    cos.flush();\n                }\n                cos.close();\n            } catch (Exception e) {\n                Toast.makeText(getApplicationContext(),\"!!!\", \n                           Toast.LENGTH_LONG).show();               }\n        }\n\n    });\n\n\n\n\n}   \n", "idx": 359}
{"project": "cipher", "commit_id": "Snippet31414449_13446.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"Rijndael/ECB/NoPadding\");\nbyte[] key = getKey(input[1]);\nSecretKey secretKey = new SecretKeySpec(key, 0, key.length, \"Rijndael\");\ncipher.init(Cipher.DECRYPT_MODE, secretKey);\n", "idx": 360}
{"project": "cipher", "commit_id": "Snippet40534873_22392.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 361}
{"project": "cipher", "commit_id": "Snippet34361655_16336.java", "target": 0, "func": "Cipher.getInstance(\"AES\");", "idx": 362}
{"project": "cipher", "commit_id": "Snippet22075311_4497.java", "target": 0, "func": "                private static final String ALGO = \"AES\";\n                // private static final String ALGO = \"ARCFOUR\";\n                private static String keyString;\n                private static byte[] keyValue;\n                private static Key key;\n                private static Cipher c1;\n                private static Cipher c2;\n\n                private static void about() {\n                                StringBuffer sb = new StringBuffer(128);\n                                sb.append(\"Encryption version 1\");\n                                System.out.println(sb.toString());\n                }\n\n                public static String encrypt(String Data) throws Exception {\n                                byte[] encVal = c1.doFinal(Data.getBytes());\n                                String encryptedValue = Base64.encodeBase64String(encVal);\n                                return encryptedValue;\n                }\n\n                public static String decrypt(String encryptedData) throws Exception {\n                                byte[] decordedValue = Base64.decodeBase64(encryptedData);\n                                byte[] decValue = c2.doFinal(decordedValue);\n                                String decryptedValue = new String(decValue);\n                                return decryptedValue;\n                }\n\n                public static void main(String[] args) throws Exception\n                  {\n\n                    String data = null;\n                    String dataEnc = null;\n                    String dataDec = null;\n\n                    long start = Calendar.getInstance().getTimeInMillis();\n                    for (int i=0; i<1000000; i++)\n                    {\n                      data = \"S0me Very Har!!d Pa$$w0rd !!\";\n                      dataEnc = AES256.encrypt(data);\n                      dataDec = AES256.decrypt(dataEnc);\n                    }\n                    long end = Calendar.getInstance().getTimeInMillis();\n                    System.out.println(\"Time millisecons: \" + (end-start));\n\n                    System.out.println(\"Plain Text : \" + data + \", Length=\" + data.length());\n                    System.out.println(\"Encrypted Text : \" + dataEnc);\n                    System.out.println(\"Decrypted Text : \" + dataDec + \", Length=\" + dataDec.length());\n                  }\n\n\n                static {\n                                try {\n                                                about();\n                                                File f = new File(\".password\");\n                                                if (!f.exists() || !f.canRead()) {\n                                                                f = new File(System.getenv(\"HOME\")    + \"/pps/.password\");\n                                                }\n\n                                                BufferedReader reader = new BufferedReader(new FileReader(f));\n                                                keyString = reader.readLine();\n                                                reader.close();\n                                } catch (IOException ioe) {\n                                                keyString = \"thesecretekey\";\n                                }\n                                try {\n                                                /*\n                                                * KeyGenerator generator =\n                                                * KeyGenerator.getInstance(\"AES/CTR/PKCS5PADDING\");\n                                                * generator.init(128); SecretKey key = generator.generateKey();\n                                                * Cipher cipher = Cipher.getInstance(\"AES\");\n                                                * cipher.init(Cipher.ENCRYPT_MODE, key);\n                                                */\n                                                keyValue = DatatypeConverter.parseHexBinary(keyString);\n                                                key = new SecretKeySpec(keyValue, ALGO);\n                                                c1 = Cipher.getInstance(ALGO);\n                                                c1.init(Cipher.ENCRYPT_MODE, key);\n                                                c2 = Cipher.getInstance(ALGO);\n                                                c2.init(Cipher.DECRYPT_MODE, key);\n                                } catch (NoSuchPaddingException nop) {\n                                                nop.printStackTrace();\n                                } catch (NoSuchAlgorithmException noa) {\n                                                noa.printStackTrace();\n                                } catch (InvalidKeyException e) {\n                                                e.printStackTrace();\n                                } catch (Exception othere) {\n                                                othere.printStackTrace();\n                                }\n                }\n\n}\n", "idx": 363}
{"project": "cipher", "commit_id": "Snippet38764746_20699.java", "target": 0, "func": "        public static  byte[] encrypt(byte[] datasource, String password) {            \n            try{\n                    SecureRandom random = new SecureRandom();\n                    DESKeySpec desKey = new DESKeySpec(password.getBytes());\n                    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n                    SecretKey securekey = keyFactory.generateSecret(desKey);\n                    Cipher cipher = Cipher.getInstance(\"DES\");\n                    cipher.init(Cipher.ENCRYPT_MODE, securekey, random);\n                    return cipher.doFinal(datasource);\n            }catch(Throwable e){\n                e.printStackTrace();\n            }\n            return null;\n        }\n\n        private static void longToByteArray(long l, byte[] b) {\n            b[7] = (byte) (l);\n            l >>>= 8;\n            b[6] = (byte) (l);\n            l >>>= 8;\n            b[5] = (byte) (l);\n            l >>>= 8;\n            b[4] = (byte) (l);\n            l >>>= 8;\n            b[3] = (byte) (l);\n            l >>>= 8;\n            b[2] = (byte) (l);\n            l >>>= 8;\n            b[1] = (byte) (l);\n            l >>>= 8;\n            b[0] = (byte) (l);\n        }\n\n\n\n        long aliveTime = Long.parseLong(\"13664547854160806\");\n        byte[] longAsBytes = new byte[8];\n        longToByteArray(aliveTime, longAsBytes);\n        byte[] result = DES.encrypt(longAsBytes, password);\n        String en = REncrypt.base64Encode(result);\n", "idx": 364}
{"project": "cipher", "commit_id": "Snippet9156616_33718.java", "target": 0, "func": "FileInputStream fis = new FileInputStream(new File(\"D:/Shashank/Test123.txt\"));\n        File outfile = new File(\"D:/Shashank/encTest1234.txt\");\n        int read;\n        if(!outfile.exists())\n            outfile.createNewFile();\n        File decfile = new File(\"D:/Shashank/dec123.txt\");\n        if(!decfile.exists())\n            decfile.createNewFile();\n        FileOutputStream fos = new FileOutputStream(outfile);\n        FileInputStream encfis = new FileInputStream(outfile);\n        FileOutputStream decfos = new FileOutputStream(decfile);\n        Cipher encipher = Cipher.getInstance(\"AES\");\n        Cipher decipher = Cipher.getInstance(\"AES\");\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecretKey skey = kgen.generateKey();\n        encipher.init(Cipher.ENCRYPT_MODE, skey);\n        CipherInputStream cis = new CipherInputStream(fis, encipher);\n        decipher.init(Cipher.DECRYPT_MODE, skey);\n        CipherOutputStream cos = new CipherOutputStream(decfos,decipher);\n        while((read = cis.read())!=-1)\n                {\n                    fos.write((char)read);\n                    fos.flush();\n                }   \n        fos.close();\n        while((read=encfis.read())!=-1)\n        {\n            cos.write(read);\n            cos.flush();\n        }\n    cos.close();\n", "idx": 365}
{"project": "cipher", "commit_id": "Snippet17139643_406.java", "target": 0, "func": "import java.math.BigInteger;\nimport java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Blowfish1 {\n\n    public static void main(String[] args) throws Exception {\n        String s = \"testings\";\n        Cipher cipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n        Key key = new SecretKeySpec(\"6#26FRL$ZWD\".getBytes(), \"Blowfish\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] enc_bytes = cipher.doFinal(s.getBytes());\n        System.out.printf(\"%x%n\", new BigInteger(1, enc_bytes));\n    }\n\n}\n", "idx": 366}
{"project": "cipher", "commit_id": "Snippet6262776_32025.java", "target": 0, "func": "public class App {\n\n    public static void main(String[] args) throws Exception {\n        TCPPacket packet = new TCPPacket(481, 516, 23, 42, true, false, false, false, false, false, false, false, 10, 10);\n\n        final char[] password = \"secretpass\".toCharArray();\n        final byte[] salt = \"a9v5n38s\".getBytes();\n\n        // Create key\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n        KeySpec spec = new PBEKeySpec(password, salt, 1024, 128);\n        SecretKey tmp = factory.generateSecret(spec);\n        SecretKey secret = new SecretKeySpec(tmp.getEncoded(), \"AES\");\n\n        // Init ciphers\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        Cipher dcipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secret);\n        dcipher.init(Cipher.DECRYPT_MODE, secret);\n\n        // Encrypt packet\n        SealedObject so = new SealedObject(packet, cipher);\n\n        // Decrypt packet\n        TCPPacket decryptedPacket = (TCPPacket) so.getObject(dcipher);\n\n        System.out.println(decryptedPacket.first);\n    }\n\n    private static class TCPPacket implements Serializable {\n        private int first;\n        public TCPPacket(final int _first, final int i1, final int i2, final int i3, final boolean b, final boolean b1,\n                         final boolean b2, final boolean b3, final boolean b4, final boolean b5, final boolean b6,\n                         final boolean b7, final int i4, final int i5) {\n\n            first = _first;\n        }\n        public int getFirst() {\n            return first;\n        }\n\n    }\n}\n", "idx": 367}
{"project": "cipher", "commit_id": "Snippet28551934_10710.java", "target": 0, "func": "   import javax.crypto.Cipher;\n   import javax.crypto.BadPaddingException;\n   import javax.crypto.IllegalBlockSizeException;\n   import javax.crypto.KeyGenerator;\n   import java.security.Key;\n   import java.security.InvalidKeyException;\n\n   public class CryptTest {\n\n        private static String algorithm = \"DESede\";\n        private static Key key = null;\n        private static Cipher cipher = null;\n\n        private static void setUp() throws Exception {\n            key = KeyGenerator.getInstance(algorithm).generateKey();\n            cipher = Cipher.getInstance(algorithm);\n        }\n\n        public static void main(String[] args) \n           throws Exception {\n            setUp();\n\n            byte[] encryptionBytes = null;\n            String input = \"something\";\n            System.out.println(\"Entered: \" + input);\n            encryptionBytes = encrypt(input);\n            String encryptedInput =  encryptionBytes.toString();\n            System.out.println(\"encrypted: \" + encryptedInput);\n\n\n            System.out.println(\n              \"Recovered: \" + decrypt(encryptionBytes));\n        }\n\n        private static byte[] encrypt(String input)\n            throws InvalidKeyException, \n                   BadPaddingException,\n                   IllegalBlockSizeException {\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] inputBytes = input.getBytes();\n            return cipher.doFinal(inputBytes);\n        }\n\n        private static String decrypt(byte[] encryptionBytes)\n            throws InvalidKeyException, \n                   BadPaddingException,\n                   IllegalBlockSizeException {\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] recoveredBytes = \n              cipher.doFinal(encryptionBytes);\n            String recovered = \n              new String(recoveredBytes);\n            return recovered;\n          }\n   }\n", "idx": 368}
{"project": "cipher", "commit_id": "Snippet8300787_33140.java", "target": 0, "func": "public class EncryptionTest {\n    public static void main(String[] args) throws Exception {\n        byte[] keyBytes = \"1234567890azertyuiopqsdf\".getBytes(\"ASCII\");\n        DESedeKeySpec keySpec = new DESedeKeySpec(keyBytes);\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"DESede\");\n        SecretKey key = factory.generateSecret(keySpec);\n        byte[] text = \"Hello world\".getBytes(\"ASCII\");\n\n        Cipher cipher = Cipher.getInstance(\"DESede\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encrypted = cipher.doFinal(text);\n\n        cipher = Cipher.getInstance(\"DESede\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        System.out.println(new String(decrypted, \"ASCII\"));\n    }\n}\n", "idx": 369}
{"project": "cipher", "commit_id": "Snippet41928720_23929.java", "target": 0, "func": "@Converter\npublic class CryptoConverter implements AttributeConverter<String, String> {\n\nprivate static final String ALGORITHM = \"AES/ECB/PKCS5Padding\";\nprivate static final byte[] KEY = \"MySuperSecretKey\".getBytes();\n\n@Override\npublic String convertToDatabaseColumn(String ccNumber) {\n  // do some encryption\n  Key key = new SecretKeySpec(KEY, \"AES\");\n  try {\n     Cipher c = Cipher.getInstance(ALGORITHM);\n     c.init(Cipher.ENCRYPT_MODE, key);\n     return Base64.encodeBytes(c.doFinal(ccNumber.getBytes()));\n  } catch (Exception e) {\n     throw new RuntimeException(e);\n  }\n}\n\n@Override\npublic String convertToEntityAttribute(String dbData) {\n  // do some decryption\n  Key key = new SecretKeySpec(KEY, \"AES\");\n  try {\n    Cipher c = Cipher.getInstance(ALGORITHM);\n    c.init(Cipher.DECRYPT_MODE, key);\n    return new String(c.doFinal(Base64.decode(dbData)));\n  } catch (Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n}\n", "idx": 370}
{"project": "cipher", "commit_id": "Snippet22905541_5298.java", "target": 0, "func": "// these are initialized in main\nSecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n            AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);\n            ecipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n            dcipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n            ecipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n            dcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n// catches ..\n\n// it will take a string and the file that will have the encrypted strings\nprivate static void encrypt(String s, OutputStream os) throws IllegalBlockSizeException, BadPaddingException {\n        try {\n            byte[] buf = s.getBytes();\n            byte[] b = ecipher.doFinal(buf);\n            os.write(b);\n// this is to write a new line after writing each encrypted value and avoid overwriting\n            os.write(System.getProperty(\"line.separator\").getBytes()); \n            os.flush();\n            os.close();\n        }\n    catch (IOException e) {\n        System.out.println(\"I/O Error:\" + e.getMessage());\n    }\n}\n// this will take the file that has all of the encryptions\nprivate static void decrypt(InputStream is) throws IllegalBlockSizeException, BadPaddingException {\n    try {\n        byte[] buf = new byte[is.available()];\n        is.read(buf);\n        byte[] decrypted = dcipher.doFinal(buf);  // THE CAUSE OF THE PROBLEM!!!!\n        System.out.println(new String (decrypted));\n        is.close();\n    }\n    catch (IOException e) {\n        System.out.println(\"I/O Error:\" + e.getMessage());\n    }\n", "idx": 371}
{"project": "cipher", "commit_id": "Snippet26216967_8430.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 372}
{"project": "cipher", "commit_id": "Snippet43938869_26032.java", "target": 0, "func": "public static String crypt(String plaintext) throws GinException\n{\n    return toHexString(crypt(plaintext.getBytes()));\n}\n\nprivate static byte[] crypt(byte[] plaintext) throws GinException\n{\n    try\n    {\n        Cipher cipher = Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        return cipher.doFinal(plaintext);    \n    }\n    catch (Exception e)\n    {\n        throw new GinException(e.getMessage());\n    }\n}\n\n\n// Convert a byte array to a hex string.\nprivate static String toHexString ( byte[] b )\n{\n    StringBuffer sb = new StringBuffer( b.length * 2 );\n    for ( int i=0; i<b.length; i++ )\n    {\n        // look up high nibble char\n        sb.append( hexChar [( b[i] & 0xf0 ) >>> 4] ); // fill left with zero bits\n\n        // look up low nibble char\n        sb.append( hexChar [b[i] & 0x0f] );\n    }\n    return sb.toString();\n}\n", "idx": 373}
{"project": "cipher", "commit_id": "Snippet42179986_24149.java", "target": 0, "func": "try {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] hash = md.digest(PKey.getBytes(\"UTF-8\")); // <-- note encoding\n        byte[] toEncryptByte = encString.getBytes(\"UTF-8\");\n        Cipher cipher = Cipher.getInstance(\"DESEDE/EBC/X9.23PADDING\");\n        SecretKeySpec myKey = new SecretKeySpec(hash,\"DESede\");\n        cipher.init(Cipher.ENCRYPT_MODE, myKey);\n        byte[] encryptedPlainText = cipher.doFinal(toEncryptByte);\n\n        String encrypted = Base64.encodeToString(encryptedPlainText, 0);\n\n        return encrypted;\n\n\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e){\n        e.printStackTrace();\n    } catch (InvalidKeyException e){\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e){\n        e.printStackTrace();\n    } catch (BadPaddingException e){\n        e.printStackTrace();\n    }\n\n    return null;\n}\n", "idx": 374}
{"project": "cipher", "commit_id": "Snippet20726030_3321.java", "target": 0, "func": "    byte[] message = Base64.decodeBase64(encryptedText.getBytes(\"UTF-8\"));\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] digestOfUsername = md.digest(key.getBytes(\"UTF-8\"));\n        byte[] keyBytes = Arrays.copyOf(digestOfUsername, 24);\n        SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\nCipher decipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\",new SunJCE());\n        decipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] plainText = decipher.doFinal(message);// BadpaddingException \n        String decryptedString = new String(plainText);\n", "idx": 375}
{"project": "cipher", "commit_id": "Snippet20711837_3303.java", "target": 0, "func": "    package org.owasp.crypto;\n\nimport java.io.InputStream;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.Cipher;\n\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidKeyException;\nimport java.security.InvalidAlgorithmParameterException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.IllegalBlockSizeException;\n\nimport sun.misc.BASE64Encoder;\n\n/**\n * @author Joe Prasanna Kumar\n * This program provides the following cryptographic functionalities\n * 1. Encryption using DES\n * 2. Decryption using DES\n * \n * The following modes of DES encryption are supported by SUNJce provider \n * 1. ECB (Electronic code Book) - Every plaintext block is encrypted separately \n * 2. CBC (Cipher Block Chaining) - Every plaintext block is XORed with the previous ciphertext block\n * 3. PCBC (Propogating Cipher Block Chaining) - \n * 4. CFB (Cipher Feedback Mode) - The previous ciphertext block is encrypted and this enciphered block is XORed with the plaintext block to produce the corresponding ciphertext block \n * 5. OFB (Output Feedback Mode) - \n *\n *  High Level Algorithm :\n * 1. Generate a DES key\n * 2. Create the Cipher (Specify the Mode and Padding)\n * 3. To Encrypt : Initialize the Cipher for Encryption\n * 4. To Decrypt : Initialize the Cipher for Decryption\n * \n * Need for Padding :\n * Block ciphers operates on data blocks on fixed size n. \n * Since the data to be encrypted might not always be a multiple of n, the remainder of the bits are padded.\n * PKCS#5 Padding is what will be used in this program \n * \n */\n\npublic class DES {\n    public static void main(String[] args) {\n\n        DES strDataToEncrypt = new DES(System.in);\n                DES strCipherText = new DES(System.in);\n                DES strDecryptedText = new DES(System.in);\n\n        try{\n        /**\n         *  Step 1. Generate a DES key using KeyGenerator \n         * \n         */\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\n        SecretKey secretKey = keyGen.generateKey();\n\n        /**\n         *  Step2. Create a Cipher by specifying the following parameters\n         *          a. Algorithm name - here it is DES\n         *          b. Mode - here it is CBC\n         *          c. Padding - PKCS5Padding\n         */\n\n        Cipher desCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        /**\n         *  Step 3. Initialize the Cipher for Encryption \n         */\n\n        desCipher.init(Cipher.ENCRYPT_MODE,secretKey);\n\n        /**\n         *  Step 4. Encrypt the Data\n         *          1. Declare / Initialize the Data. Here the data is of type String\n         *          2. Convert the Input Text to Bytes\n         *          3. Encrypt the bytes using doFinal method \n         */\n                System.out.print( \"Type some data for the program: \" );\n                String input = strDataToEncrypt.nextLine();\n        //strDataToEncrypt = \"Hello World of Encryption using DES \";\n        byte[] byteDataToEncrypt = strDataToEncrypt.getBytes();\n        byte[] byteCipherText = desCipher.doFinal(byteDataToEncrypt); \n        strCipherText = new BASE64Encoder().encode(byteCipherText);\n        System.out.println(\"Cipher Text generated using DES with CBC mode and PKCS5 Padding is \" +strCipherText);\n\n        /**\n         *  Step 5. Decrypt the Data\n         *          1. Initialize the Cipher for Decryption \n         *          2. Decrypt the cipher bytes using doFinal method \n         */\n        desCipher.init(Cipher.DECRYPT_MODE,secretKey,desCipher.getParameters());\n         //desCipher.init(Cipher.DECRYPT_MODE,secretKey);\n        byte[] byteDecryptedText = desCipher.doFinal(byteCipherText);\n        strDecryptedText = new String(byteDecryptedText);\n        System.out.println(\" Decrypted Text message is \" +strDecryptedText);\n        }\n\n        catch (NoSuchAlgorithmException noSuchAlgo)\n        {\n            System.out.println(\" No Such Algorithm exists \" + noSuchAlgo);\n        }\n\n            catch (NoSuchPaddingException noSuchPad)\n            {\n                System.out.println(\" No Such Padding exists \" + noSuchPad);\n            }\n\n                catch (InvalidKeyException invalidKey)\n                {\n                    System.out.println(\" Invalid Key \" + invalidKey);\n                }\n\n                catch (BadPaddingException badPadding)\n                {\n                    System.out.println(\" Bad Padding \" + badPadding);\n                }\n\n                catch (IllegalBlockSizeException illegalBlockSize)\n                {\n                    System.out.println(\" Illegal Block Size \" + illegalBlockSize);\n                }\n\n                catch (InvalidAlgorithmParameterException invalidParam)\n                {\n                    System.out.println(\" Invalid Parameter \" + invalidParam);\n                }\n    }\n\n    private DES(InputStream in) {\n\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    private String nextLine() {\n\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    private byte[] getBytes() {\n\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n}\n", "idx": 376}
{"project": "cipher", "commit_id": "Snippet27820538_9169.java", "target": 0, "func": " key = new SecretKeySpec(keyValue, \"AES\");\n try {\n     cipher = Cipher.getInstance(\"AES\");\n } catch (Exception e) {\n     e.printStackTrace();\n }\n", "idx": 377}
{"project": "cipher", "commit_id": "Snippet22530242_4934.java", "target": 0, "func": "private final static String ALGORITHM = \"AES\";\n\n\n    public static String cipher(String secretKey, String data) throws Exception {\n\n\n\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n\n        KeySpec spec = new PBEKeySpec(secretKey.toCharArray(), secretKey.getBytes(), 128, 256);\n\n        SecretKey tmp = factory.generateSecret(spec);\n\n        SecretKey key = new SecretKeySpec(tmp.getEncoded(), ALGORITHM);\n\n\n\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n\n\n        return toHex(cipher.doFinal(data.getBytes()));\n\n    }\n\n\n    public static String decipher(String secretKey, String data) throws Exception {\n\n\n\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n\n        KeySpec spec = new PBEKeySpec(secretKey.toCharArray(), secretKey.getBytes(), 128, 256);\n\n        SecretKey tmp = factory.generateSecret(spec);\n\n        SecretKey key = new SecretKeySpec(tmp.getEncoded(), ALGORITHM);\n\n\n\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n\n\n\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n\n\n        return new String(cipher.doFinal(toByte(data)));\n\n    }\n\n\n    private static byte[] toByte(String hexString) {\n\n        int len = hexString.length()/2;\n\n\n\n        byte[] result = new byte[len];\n\n\n\n        for (int i = 0; i < len; i++)\n\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n\n        return result;\n\n    }\n\n\n    public static String toHex(byte[] stringBytes) {\n\n        StringBuffer result = new StringBuffer(2*stringBytes.length);\n\n\n\n        for (int i = 0; i < stringBytes.length; i++) {\n\n            result.append(HEX.charAt((stringBytes[i]>>4)&0x0f)).append(HEX.charAt(stringBytes[i]&0x0f));\n\n        }\n\n\n\n        return result.toString();\n\n    }\n    private final static String HEX = \"0123456789ABCDEF\";\n", "idx": 378}
{"project": "cipher", "commit_id": "Snippet9251160_33792.java", "target": 0, "func": "package com.chaos.sitelogins;\n\nimport android.util.Base64;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.security.*;\n\n/**\n * Created by IntelliJ IDEA.\n * User: Family\n * Date: 1/21/12\n * Time: 11:20 PM\n * To change this template use File | Settings | File Templates.\n */\n\npublic class AES128 {\n    private final String characterEncoding = \"UTF-8\";\n    private final String cipherTransformation = \"AES/CBC/PKCS7Padding\";\n    private final String aesEncryptionAlgorithm = \"AES\";\n\npublic  byte[] decrypt(byte[] cipherText, byte[] key, byte [] initialVector) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException\n{\n    Cipher cipher = Cipher.getInstance(cipherTransformation);\n    SecretKeySpec secretKeySpecy = new SecretKeySpec(key, aesEncryptionAlgorithm);\n    IvParameterSpec ivParameterSpec = new IvParameterSpec(initialVector);\n    cipher.init(Cipher.DECRYPT_MODE, secretKeySpecy, ivParameterSpec);\n    cipherText = cipher.doFinal(cipherText);\n    return cipherText;\n}\n\npublic byte[] encrypt(byte[] plainText, byte[] key, byte [] initialVector) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException\n{\n    Cipher cipher = Cipher.getInstance(cipherTransformation);\n    SecretKeySpec secretKeySpec = new SecretKeySpec(key, aesEncryptionAlgorithm);\n    IvParameterSpec ivParameterSpec = new IvParameterSpec(initialVector);\n    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivParameterSpec);\n    plainText = cipher.doFinal(plainText);\n    return plainText;\n}\n\nprivate byte[] getKeyBytes(String key) throws UnsupportedEncodingException {\n    byte[] keyBytes= new byte[16];\n    byte[] parameterKeyBytes= key.getBytes(characterEncoding);\n    System.arraycopy(parameterKeyBytes, 0, keyBytes, 0, Math.min(parameterKeyBytes.length, keyBytes.length));\n    return keyBytes;\n}\n\n/// <summary>\n/// Encrypts plaintext using AES 128bit key and a Chain Block Cipher and returns a base64 encoded string\n/// </summary>\n/// <param name=\"plainText\">Plain text to encrypt</param>\n/// <param name=\"key\">Secret key</param>\n/// <returns>Base64 encoded string</returns>\npublic String encrypt(String plainText, String key) throws UnsupportedEncodingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException{\n    byte[] plainTextbytes = plainText.getBytes(characterEncoding);\n    byte[] keyBytes = getKeyBytes(key);\n    return Base64.encodeToString(encrypt(plainTextbytes, keyBytes, keyBytes), Base64.DEFAULT);\n}\n\n/// <summary>\n/// Decrypts a base64 encoded string using the given key (AES 128bit key and a Chain Block Cipher)\n/// </summary>\n/// <param name=\"encryptedText\">Base64 Encoded String</param>\n/// <param name=\"key\">Secret Key</param>\n/// <returns>Decrypted String</returns>\npublic String decrypt(String encryptedText, String key) throws KeyException, GeneralSecurityException, GeneralSecurityException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, IOException {\n    byte[] cipheredBytes = Base64.decode(encryptedText, Base64.DEFAULT);\n    byte[] keyBytes = getKeyBytes(key);\n    return new String(decrypt(cipheredBytes, keyBytes, keyBytes), characterEncoding);\n}\n", "idx": 379}
{"project": "cipher", "commit_id": "Snippet15880901_38860.java", "target": 0, "func": "byte[] key = hexStringToByteArray(\"C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF\");\n\nbyte[] message = hexStringToByteArray(\"01A0A1A2A3A4A5A6A703020100060001\");\n\nSecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n\n// Instantiate the cipher\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n\nbyte[] encrypted = cipher.doFinal(message);\n\ncipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\nbyte[] original = cipher.doFinal(encrypted);\n", "idx": 380}
{"project": "cipher", "commit_id": "Snippet35786839_17639.java", "target": 0, "func": "String smykey = \"01234567891234567890123456789012\";\nString hellos = \"hello\";\n\nSecretKeySpec key = new SecretKeySpec(smykey.getBytes(), \"AES\");\n\nCipher cipher =  Cipher.getInstance(\"AES\");//(\"AES/ECB/PKCS7Padding\");//(\"ECB\");//(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, key);\n\nbyte[] encrypted = cipher.doFinal(hellos.getBytes());\n", "idx": 381}
{"project": "cipher", "commit_id": "Snippet38335994_20289.java", "target": 0, "func": "public class AES {\n  static String IV = \"AAAAAAAAAAAAAAAA\";\n  static String plaintext = \"sanmacs88       \"; /*Note null padding*/\n  static String encryptionKey = \"0123456789123456\";\n  public static void main(String [] args) {\n    try {\n\n      System.out.println(\"==Java==\");\n      System.out.println(\"plain:   \" + plaintext);\n\n      byte[] cipher = encrypt(plaintext, encryptionKey);\n\n      System.out.print(\"cipher:  \");\n      for (int i=0; i<cipher.length; i++)\n        System.out.print(new Integer(cipher[i])+\" \");\n      System.out.println(\"\");\n\n      String decrypted = decrypt(cipher, encryptionKey);\n\n      System.out.println(\"decrypt: \" + decrypted);\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    } \n  }\n\n  public static byte[] encrypt(String plainText, String encryptionKey) throws Exception {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\", \"SunJCE\");\n    SecretKeySpec key = new SecretKeySpec(encryptionKey.getBytes(\"UTF-8\"), \"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    return cipher.doFinal(plainText.getBytes(\"UTF-8\"));\n  }\n\n  public static String decrypt(byte[] cipherText, String encryptionKey) throws Exception{\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\", \"SunJCE\");\n    SecretKeySpec key = new SecretKeySpec(encryptionKey.getBytes(\"UTF-8\"), \"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    return new String(cipher.doFinal(cipherText),\"UTF-8\");\n  }\n}      \n", "idx": 382}
{"project": "cipher", "commit_id": "Snippet16911632_221.java", "target": 0, "func": "public static void main(String[] args) throws NoSuchAlgorithmException, FileNotFoundException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, InvalidAlgorithmParameterException, UnsupportedEncodingException {\n\n    String encryptedText = user.read(fileNameOK);\n    String key1 = user.read(fileName1);\n    String key2 = user.read(fileName2);\n    String encryptedSeanceKey1 = user.read(fileNameEK1);\n    String encryptedSeanceKey2 = user.read(fileNameEK2);\n\n\n\n\n    SecretKey secretKey1=getKeyInstance(key1);\n    SecretKey secretKey2=getKeyInstance(key2);\n\n\n\n    Cipher aesCipher = Cipher.getInstance(\"AES\");\n    aesCipher.init(Cipher.DECRYPT_MODE,secretKey1,aesCipher.getParameters());\n\n\n\n\n    //byte[] byteKey = encryptedSeanceKey1.getBytes();\n\n       byte[] byteDecryptedKey = aesCipher.doFinal(encryptedSeanceKey1.getBytes());\n       String decryptedKey1 = new String(byteDecryptedKey);\n       System.out.println(\"\u0420\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u043a\u043b\u044e\u0447 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 1: \" +decryptedKey1);\n\n    aesCipher.init(Cipher.DECRYPT_MODE,secretKey2,aesCipher.getParameters());\n\n\n\n\n    byte[] byteKey2 = encryptedSeanceKey2.getBytes();\n        byteDecryptedKey = aesCipher.doFinal(byteKey2); \n        String decryptedKey2 = new String(byteDecryptedKey);\n       System.out.println(\"\u0420\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u043a\u043b\u044e\u0447 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 2: \" +decryptedKey2);\n\n\n\n\n\n        // \u0420\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n        aesCipher.init(Cipher.DECRYPT_MODE,getKeyInstance(decryptedKey1),aesCipher.getParameters());\n\n         byte[] byteText = encryptedText.getBytes();\n\n        byte[] byteDecryptedText = aesCipher.doFinal(byteText);\n        decryptedText = new String(byteDecryptedText);\n        System.out.println(\" \u0420\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 \" +decryptedText);\n\n\n\n}\n", "idx": 383}
{"project": "cipher", "commit_id": "Snippet41328904_23296.java", "target": 0, "func": " public void decrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\nFileInputStream fis = new FileInputStream(\"Path Of your file\");\n\nFileOutputStream fos = new FileOutputStream(\"Path Of your file\");\nSecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, sks);\nCipherInputStream cis = new CipherInputStream(fis, cipher);\nint b;\nbyte[] d = new byte[8];\nwhile((b = cis.read(d)) != -1) {\n    fos.write(d, 0, b);\n}\nfos.flush();\nfos.close();\ncis.close();} \n", "idx": 384}
{"project": "cipher", "commit_id": "Snippet34817697_16812.java", "target": 0, "func": "package com.mycompany.util;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.security.GeneralSecurityException;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\n\npublic class EncryptionUtil {\n\n    private static SecretKey sharedkey;\n    private static byte [] sharedvector;\n\n    static {\n        int keySize = 168;\n        int ivSize = 8;\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(\"DESede\");\n            keyGenerator.init(keySize);\n            sharedkey = keyGenerator.generateKey();\n\n            sharedvector = new byte [ivSize];\n            byte [] data = sharedkey.getEncoded();\n\n            int half = ivSize / 2;\n            System.arraycopy(data, data.length-half, sharedvector, 0, half);\n            System.arraycopy(sharedvector, 0, sharedvector, half, half);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String [] args) throws Exception {\n        String plainText = \"Encrypt this in java\";\n        String systemId= \"949367136-5890454\";\n\n        String dataText = plainText+systemId\n        String keyString = \"key1234\";\n        String ivString  = \"iv1234\";\n\n        try {\n            byte[] keyBytes = keyString.getBytes(\"UTF-8\");\n            byte[] ivBytes = ivString.getBytes(\"UTF-8\");\n            byte[] dataBytes = plainText.getBytes(\"UTF-8\");\n            System.out.println(\"key=\"+keyBytes.toString());\n            System.out.println(\"iv=\"+ivBytes.toString());\n            System.out.println(\"plaintextBytesUTF-8=\"+dataBytes.toString());\n        } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    public static String Encrypt(String val) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, sharedkey, new IvParameterSpec(sharedvector));\n\n        return new sun.misc.BASE64Encoder().encode(cipher.doFinal(val.getBytes()));\n    }\n\n    public static String Decrypt(String val) throws GeneralSecurityException, IOException {\n        Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, sharedkey, new IvParameterSpec(sharedvector));\n\n        return new String(cipher.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(val)));\n    }\n\n}\n", "idx": 385}
{"project": "cipher", "commit_id": "Snippet45908118_27982.java", "target": 0, "func": "import android.support.v7.app.AppCompatActivity;    \nimport android.os.Bundle;    \nimport android.util.Log;    \nimport java.security.Security;    \nimport javax.crypto.Cipher;    \nimport javax.crypto.spec.SecretKeySpec;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);\n\n        byte[] input = \"this is a test taht we will use to text the validaty of your program, here goes nothing\".getBytes();\n        byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04,\n                0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,\n                0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14,\n                0x15, 0x16, 0x17 };\n\n        SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"SC\");\n\n            System.out.println(new String(input));\n\n            // encryption pass\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n\n            byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n            int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n            ctLength += cipher.doFinal(cipherText, ctLength);\n            Log.i(\"testAppEncrypted --> \", new String(cipherText));\n            System.out.println(ctLength);\n\n\n\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] plainText = new byte[cipher.getOutputSize(ctLength)];\n            int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);\n            ptLength += cipher.doFinal(plainText, ptLength);\n            Log.i(\"testAppDecrypted --> \", new String(plainText));\n            System.out.println(ptLength);\n        }\n        catch(Exception ex)\n        {\n            System.out.println(ex.getMessage());\n        }\n", "idx": 386}
{"project": "cipher", "commit_id": "Snippet18824665_1737.java", "target": 0, "func": "      static void encrypt(String inputPath, String outputPath) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException \n      {\n     // Here you read the cleartext.\n    FileInputStream fis = new FileInputStream(inputPath);\n    // This stream write the encrypted text. This stream will be wrapped by another stream.\n    FileOutputStream fos = new FileOutputStream(outputPath);\n\n    // Length is 16 byte\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    // Create cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    // Wrap the output stream\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    // Write bytes\n    int b;\n    int count = 0;\n    byte[] d = new byte[1024];\n\n    while((b = fis.read(d)) != -1) {\n        if(count <= 1024){\n            count += b;\n            cos.write(d, 0, b);\n        }else{\n\n            cos.write(d, 0, b);\n\n        }\n       // cos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    cos.flush();\n    cos.close();\n    fis.close();\n}\n\nstatic byte[] decrypt(String inputPath) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    FileInputStream fis = new FileInputStream(inputPath);\n\n   // FileOutputStream fos = new FileOutputStream(outputPath);\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n\n    int b;\n    byte[] d = new byte[1024];\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    int count =0;\n    while((b = cis.read(d)) != -1) {\n        if(count <= 1024){\n            count += b;\n            bos.write(d, 0, b);\n        }else{\n\n            bos.write(d, 0, b);\n\n        }\n\n    }\n\n     byte[] completeBytes = bos.toByteArray();\n    cis.close();\n    return completeBytes;\n}\n", "idx": 387}
{"project": "cipher", "commit_id": "Snippet22223043_4613.java", "target": 0, "func": "public class Crypto {\n  Cipher decipher;\n\n  byte[] salt = {\n      (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04,\n      (byte) 0x0A, (byte) 0x0B, (byte) 0x0C, (byte) 0x0D\n  };\n  int iterationCount = 10;\n\n  public Crypto(String pass) {\n    try {\n      KeySpec keySpec = new PBEKeySpec(pass.toCharArray(), salt, iterationCount);\n\n      SecretKey key = SecretKeyFactory.getInstance(\n          \"PBEWithMD5AndTripleDES\").generateSecret(keySpec);\n\n      ecipher = Cipher.getInstance(\"PBEWithMD5AndTripleDES/CBC/PKCS5Padding\");\n\n      AlgorithmParameterSpec paramSpec = new PBEParameterSpec(salt, iterationCount);\n\n      decipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n\n    } catch (Exception ex) {\n    }\n  }\n}\n", "idx": 388}
{"project": "cipher", "commit_id": "Snippet22863889_5265.java", "target": 0, "func": "static void decrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    FileInputStream fis = new FileInputStream(\"data/encrypted\");\n\n    FileOutputStream fos = new FileOutputStream(\"data/decrypted\");\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while((b = cis.read(d)) != -1) {\n        fos.write(d, 0, b);\n    }\n    fos.flush();\n    fos.close();\n    cis.close();\n}   \n", "idx": 389}
{"project": "cipher", "commit_id": "Snippet14150849_37498.java", "target": 0, "func": "   Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());        \n    byte[] input = \" www.java2s.com \".getBytes();\n    byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,\n        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };\n\n    SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\", \"BC\");\n    System.out.println(\"input text : \" + new String(input));\n\n    // encryption pass\n\n    byte[] cipherText = new byte[input.length];\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n    ctLength += cipher.doFinal(cipherText, ctLength);\n    System.out.println(\"cipher text: \" + new String(cipherText) + \" bytes: \" + ctLength);\n\n    // decryption pass\n\n    byte[] plainText = new byte[ctLength];\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);\n    ptLength += cipher.doFinal(plainText, ptLength);\n    System.out.println(\"plain text : \" + new String(plainText) + \" bytes: \" + ptLength);\n", "idx": 390}
{"project": "cipher", "commit_id": "Snippet22648953_5043.java", "target": 0, "func": "import javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.Cipher;\n\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidKeyException;\nimport java.security.InvalidAlgorithmParameterException;\n\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.IllegalBlockSizeException;\n\n\n\n\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.spec.DESKeySpec;\n\npublic class MyCiphers {\n\n    public static void main(String[] args) {\n        try {\n\n\n\n            BufferedReader br = new BufferedReader(new FileReader(\"key.txt\"));\n            String key = br.readLine();\n            br.close();\n            FileInputStream fis = new FileInputStream(\"original.txt\");\n            FileOutputStream fos = new FileOutputStream(\"encrypted.txt\");\n            encrypt(key, fis, fos);\n\n            FileInputStream fis2 = new FileInputStream(\"encrypted.txt\");\n            FileOutputStream fos2 = new FileOutputStream(\"decrypted.txt\");\n            decrypt(key, fis2, fos2);\n\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void encrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.ENCRYPT_MODE, is, os);\n    }\n\n    public static void decrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);\n    }\n\n    public static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n\n\n      SecretKeySpec dks = new SecretKeySpec(key.getBytes(),\"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\"); \n\n        if (mode == Cipher.ENCRYPT_MODE) {\n            cipher.init(Cipher.ENCRYPT_MODE, dks);\n            CipherInputStream cis = new CipherInputStream(is, cipher);\n            doCopy(cis, os);        \n        } else if (mode == Cipher.DECRYPT_MODE) {\n            cipher.init(Cipher.DECRYPT_MODE, dks);\n            CipherOutputStream cos = new CipherOutputStream(os, cipher);\n            doCopy(is, cos);\n        }\n\n\n    }\n\n    public static void doCopy(InputStream is, OutputStream os) throws IOException {\n        byte[] bytes = new byte[128];\n        int numBytes;\n        while ((numBytes = is.read(bytes)) != -1) {\n            os.write(bytes, 0, numBytes);\n        }\n        os.flush();\n        os.close();\n        is.close();\n    }\n\n}\n", "idx": 391}
{"project": "cipher", "commit_id": "Snippet19699977_2432.java", "target": 0, "func": "public class AESencrp {\nprivate static final String ALGO = \"AES\";\nprivate static final byte[] keyValue = new byte[] { 'S', 'D', 'P', 'i', 'b', 'm', 'B','H', 'A', 'R', 'T','I', 'P', 'K', 'e', 'y' };\n\npublic static String encrypt(String Data) throws Exception {\n    System.out.println(\".............Encryption start............\");\n    Key key = generateKey();\n    System.out.println(\"Key : \" + key);\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(Data.getBytes());\n    //System.out.println(\"encVal in byte[] : \" + encVal);\n    String encryptedValue = new BASE64Encoder().encode(encVal);\n    System.out.println(\"encryptedValue byusing base64 : \" + encryptedValue);\n    System.out.println(\"..............Encryption End............\");\n    return encryptedValue;\n}\n\npublic static String decrypt(String encryptedData) throws Exception {\n    //final byte[] keyValue1 =  new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't','S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n    System.out.println(\"\");\n    System.out.println(\"\");\n    System.out.println(\".............Decryption start............\");\n    Key key = generateKey();\n    //Key key = new SecretKeySpec(keyValue1, ALGO);\n    //System.out.println(\"Key : \" + key);\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n    //System.out.println(\"decryptedValue byusing base64 : \" + decordedValue);\n    byte[] decValue = c.doFinal(decordedValue);\n   // System.out.println(\"decValue in byte[] : \" + decValue);\n    String decryptedValue = new String(decValue);\n    System.out.println(\"String representation of decrypted value: \" + decryptedValue);\n    System.out.println(\".............Decryption End............\");\n    return decryptedValue;\n}\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, ALGO);\n    System.out.println(\"key is \" + keyValue  );\n    return key;\n}\n\n\npublic static void main(String[] args) throws Exception {\n    String password = \"encrypt_this\";\n    String passwordEnc = AESencrp.encrypt(password);\n    String passwordDec = AESencrp.decrypt(passwordEnc);\n    System.out.println(\"\");System.out.println(\"\");\n    System.out.println(\"Plain Text : \" + password);\n    System.out.println(\"Encrypted Text : \" + passwordEnc);\n    System.out.println(\"Decrypted Text : \" + passwordDec);\n   }\n}\n", "idx": 392}
{"project": "cipher", "commit_id": "Snippet47516485_29523.java", "target": 0, "func": "String key = \"Bar12345Bar12345\";\nKey aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\nbyte[] encrypted = text.getBytes(); \ncipher.init(Cipher.DECRYPT_MODE, aesKey);\nString decrypted = new String(cipher.doFinal(encrypted));\nSystem.err.println(decrypted);\n", "idx": 393}
{"project": "cipher", "commit_id": "Snippet43468973_25585.java", "target": 0, "func": "public static void main(String[] args) throws Exception {\n\n    String text = \"test\";\n\n    byte[] codedtext = new TripleDESTest().encrypt(text);\n    String decodedtext = new TripleDESTest().decrypt(codedtext);\n\n    System.out.println(codedtext); \n    System.out.println(decodedtext); \n}\n\npublic byte[] encrypt(String message) throws Exception {\n    final MessageDigest md = MessageDigest.getInstance(\"md5\");\n    final byte[] digestOfPassword = md.digest(\"XYZ\"\n            .getBytes(\"utf-8\"));\n    final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n    for (int j = 0, k = 16; j < 8;) {\n        keyBytes[k++] = keyBytes[j++];\n    }\n\n    final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n    final Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n    final byte[] plainTextBytes = message.getBytes(\"utf-8\");\n    final byte[] cipherText = cipher.doFinal(plainTextBytes);\n    // final String encodedCipherText = new sun.misc.BASE64Encoder()\n    // .encode(cipherText);\n\n    return cipherText;\n}\n\npublic String decrypt(byte[] message) throws Exception {\n    final MessageDigest md = MessageDigest.getInstance(\"md5\");\n    final byte[] digestOfPassword = md.digest(\"XYZ\"\n            .getBytes(\"utf-8\"));\n    final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n    for (int j = 0, k = 16; j < 8;) {\n        keyBytes[k++] = keyBytes[j++];\n    }\n\n    final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n    final Cipher decipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n    // final byte[] encData = new\n    // sun.misc.BASE64Decoder().decodeBuffer(message);\n    final byte[] plainText = decipher.doFinal(message);\n\n    return new String(plainText, \"UTF-8\");\n}\n", "idx": 394}
{"project": "cipher", "commit_id": "Snippet18422207_1487.java", "target": 0, "func": "public void actionPerformed(ActionEvent e) {\n\n    //Handle open button action.\n    if (e.getSource() == openButton) {\n        int returnVal = fc.showOpenDialog(FileChooserDemo.this);\n\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            try {\n                SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n\n                AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);\n\n                ecipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n                dcipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n                ecipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n\n                dcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n\n                File file = fc.getSelectedFile();\n\n                Socket s = null;\n                s = new Socket(\"localhost\", 6880);\n                DataOutputStream output = new DataOutputStream(s.getOutputStream());\n\n\n                encrypt(new FileInputStream(file), output);\n\n                log.append(\"encrypted \" + newline);\n\n                log.append(\"Sent\" + file.getName() + \".\" + newline);\n            } catch (Exception ex) {\n                Logger.getLogger(FileChooserDemo.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        } else {\n            log.append(\"Open command cancelled by user.\" + newline);\n        }\n        log.setCaretPosition(log.getDocument().getLength());\n\n        //Handle save button action.\n    } else if (e.getSource() == saveButton) {\n        int returnVal = fc.showSaveDialog(FileChooserDemo.this);\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            File file = fc.getSelectedFile();\n            //This is where a real application would save the file.\n            log.append(\"Saving: \" + file.getName() + \".\" + newline);\n        } else {\n            log.append(\"Save command cancelled by user.\" + newline);\n        }\n        log.setCaretPosition(log.getDocument().getLength());\n    }\n}\n", "idx": 395}
{"project": "cipher", "commit_id": "Snippet22410602_4791.java", "target": 0, "func": "    public class SHAHashingExample\n{\n    private static byte[] keyValue;\n\n    public static void main(String[] args)throws Exception\n    {\n        String password = \"123456\";\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        md.update(password.getBytes());\n\n        byte byteData[] = md.digest();\n        keyValue = md.digest();\n\n        //convert the byte to hex format method 1\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < byteData.length/2; i++) {\n         sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n        }\n\n        System.out.println(\"Hex format : \" + sb.toString());\n\n        //convert the byte to hex format method 2\n        StringBuffer hexString = new StringBuffer();\n        for (int i=0;i<byteData.length/2;i++) {\n            String hex=Integer.toHexString(0xff & byteData[i]);\n            if(hex.length()==1) hexString.append('0');\n            hexString.append(hex);\n        }\n        System.out.println(\"Hex format : \" + hexString.toString());\n\n        String k = \"hello world\";\n        String f = encrypt(k);\n        System.out.println(f);\n        String j = decrypt(f);\n        System.out.println(j);\n    }\n\n    public static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encVal);\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, \"AES\");\n        return key;\n    }\n}\n", "idx": 396}
{"project": "cipher", "commit_id": "Snippet38525770_20484.java", "target": 0, "func": "public class EncryptionUtils {\n\nprivate static String ALGO = \"AES\";\nprivate static  Cipher cipher;\n\n\n\n\npublic static String encrypt(String message, String keyString) {\n    cipher = Cipher.getInstance(ALGO);\n        Key key = generateKey(keyString);\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        return new String(BASE64EncoderStream.encode(cipher.doFinal( message.getBytes())));\n}\n\npublic static String decrypt(String message, String keyString)  {\n\n       cipher = Cipher.getInstance(ALGO);\n        Key key = generateKey(keyString);\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        return new String(cipher.doFinal(BASE64DecoderStream.decode(message.getBytes()))); \n\n}\n\nprivate static Key generateKey(String keyString) throws NoSuchAlgorithmException {\n    byte[] keyBytes = BASE64DecoderStream.decode(keyString.getBytes());\n    Key key = new SecretKeySpec(keyBytes, ALGO);\n    return key;\n}\n\npublic static void main(String args[]) {\n    byte[] keyValue = new byte[16];\n    new SecureRandom().nextBytes(keyValue);\n    String key = new String(BASE64EncoderStream.encode(keyValue));\n    String message = \"test message\";\n    String enc = encrypt(message, key);\n    String dec = decrypt(enc, key);\n    System.out.println(dec);\n}}\n", "idx": 397}
{"project": "cipher", "commit_id": "Snippet17926003_986.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");", "idx": 398}
{"project": "cipher", "commit_id": "Snippet11930805_35908.java", "target": 0, "func": "public class TripleDES {\n\npublic static int MAX_KEY_LENGTH = DESedeKeySpec.DES_EDE_KEY_LEN;\nprivate static String ENCRYPTION_KEY_TYPE = \"DESede\";\nprivate static String ENCRYPTION_ALGORITHM = \"DESede/ECB/PKCS7Padding\";\nprivate final SecretKeySpec keySpec;\nprivate final static String LOG = \"TripleDES\";\n\npublic TripleDES(String passphrase) {\n    byte[] key;\n    try {\n        // get bytes representation of the password\n        key = passphrase.getBytes(\"UTF8\");\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalArgumentException(e);\n    }\n\n    key = padKeyToLength(key, MAX_KEY_LENGTH);\n    key = addParity(key);\n    keySpec = new SecretKeySpec(key, ENCRYPTION_KEY_TYPE);\n}\n\n// !!! - see post below\nprivate byte[] padKeyToLength(byte[] key, int len) {\n    byte[] newKey = new byte[len];\n    System.arraycopy(key, 0, newKey, 0, Math.min(key.length, len));\n    return newKey;\n}\n\n// standard stuff\npublic byte[] encrypt(String message) throws GeneralSecurityException, UnsupportedEncodingException {\n    byte[] unencrypted = message.getBytes(\"UTF8\");\n    return doCipher(unencrypted, Cipher.ENCRYPT_MODE);\n}\n\npublic byte[] decrypt(byte[] encrypted) throws GeneralSecurityException {\n    return doCipher(encrypted, Cipher.DECRYPT_MODE);\n}\n\nprivate byte[] doCipher(byte[] original, int mode)\n        throws GeneralSecurityException {\n    Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);\n    // IV = 0 is yet another issue, we'll ignore it here\n    // IvParameterSpec iv = new IvParameterSpec(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });\n    cipher.init(mode, keySpec); //, iv);\n    return cipher.doFinal(original);\n}\n\n// Takes a 7-byte quantity and returns a valid 8-byte DES key.\n// The input and output bytes are big-endian, where the most significant\n// byte is in element 0.\npublic static byte[] addParity(byte[] in) {\n    byte[] result = new byte[8];\n\n    // Keeps track of the bit position in the result\n    int resultIx = 1;\n\n    // Used to keep track of the number of 1 bits in each 7-bit chunk\n    int bitCount = 0;\n\n    // Process each of the 56 bits\n    for (int i = 0; i < 56; i++) {\n        // Get the bit at bit position i\n        boolean bit = (in[6 - i / 8] & (1 << (i % 8))) > 0;\n\n        // If set, set the corresponding bit in the result\n        if (bit) {\n            result[7 - resultIx / 8] |= (1 << (resultIx % 8)) & 0xFF;\n            bitCount++;\n        }\n\n        // Set the parity bit after every 7 bits\n        if ((i + 1) % 7 == 0) {\n            if (bitCount % 2 == 0) {\n                // Set low-order bit (parity bit) if bit count is even\n                result[7 - resultIx / 8] |= 1;\n            }\n            resultIx++;\n            bitCount = 0;\n        }\n        resultIx++;\n    }\n\n    Log.d(LOG, \"result: \" + result);\n    return result;\n}\n}\n", "idx": 399}
{"project": "cipher", "commit_id": "Snippet21913803_4338.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.spec.AlgorithmParameterSpec;\nimport java.security.spec.InvalidKeySpecException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\n/**\n * \n * @param password\n * @return\n * @throws AuthException \n */\npublic static String encryptPassword(String password) throws AuthException{\n    byte[] textEncrypted = \"\".getBytes();\n    try{\n\n        DESKeySpec keySpec = new DESKeySpec(Constants.DESkey);\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey myDesKey = keyFactory.generateSecret(keySpec);\n\n        Cipher desCipher;\n\n        // Create the cipher \n        //desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        desCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        AlgorithmParameterSpec alogrithm_specs = new IvParameterSpec(Constants.DESkey);\n\n        // Initialize the cipher for encryption\n        desCipher.init(Cipher.ENCRYPT_MODE, myDesKey, alogrithm_specs);\n\n        //sensitive information\n        byte[] text = password.getBytes();\n\n        // Encrypt the text\n        textEncrypted = desCipher.doFinal(text);\n\n    }catch(NoSuchAlgorithmException e){\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    }catch(NoSuchPaddingException e){\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    }catch(InvalidKeyException e){\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    }catch(IllegalBlockSizeException e){\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    }catch(BadPaddingException e){\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    } catch (InvalidKeySpecException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    } catch (InvalidAlgorithmParameterException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    } \n\n    return new String(textEncrypted);\n\n}   \npublic static String decryptPassword(String passwordToDecrypt) throws AuthException{\n\n    DESKeySpec keySpec;\n    byte[] textDecrypted = \"\".getBytes();\n    try {\n        keySpec = new DESKeySpec(Constants.DESkey);\n\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey myDesKey = keyFactory.generateSecret(keySpec);\n\n        Cipher desCipher;\n\n        AlgorithmParameterSpec alogrithm_specs = new IvParameterSpec(Constants.DESkey);\n\n        // Create the cipher \n        //desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        desCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        // Initialize the same cipher for decryption\n        desCipher.init(Cipher.DECRYPT_MODE, myDesKey, alogrithm_specs);\n\n        // Decrypt the text\n        byte[] passwordToDecryptByte = passwordToDecrypt.getBytes();\n\n\n\n       textDecrypted = desCipher.doFinal(passwordToDecryptByte);\n\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    } catch (InvalidKeySpecException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n        logger.error(\"Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    } catch (InvalidAlgorithmParameterException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    }\n\n    return new String(textDecrypted);\n\n}\n\n\npublic static void main(String[] args) throws AuthException, UnsupportedEncodingException{\n    String password = URLEncoder.encode(encryptPassword(\"bnlbnl18\"), \"UTF-8\");\n\n    System.out.println(\"\\\"\" + URLDecoder.decode(password, \"UTF-8\") + \"\\\"\" + decryptPassword(URLDecoder.decode(password,\"UTF-8\")));\n\n}\n", "idx": 400}
{"project": "cipher", "commit_id": "Snippet24592607_6942.java", "target": 0, "func": "Cipher cipher;\nSecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\ntry {\n    cipher = Cipher.getInstance(\"AES\");\n} catch (NoSuchAlgorithmException e) {\n} catch (NoSuchPaddingException e) {\n}try {\n      cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n} catch (InvalidKeyException e) {\n}\n", "idx": 401}
{"project": "cipher", "commit_id": "Snippet13205019_36775.java", "target": 0, "func": "SecureRandom random = new SecureRandom(); // quite heavy, look into a lighter method.\n\nString stringToEncrypt = \"mypassword\";\nbyte[] realiv = new byte[16];\nrandom.nextBytes(realiv);\nCipher ecipher = Cipher.getInstance(\"AES\");\n\nSecureRandom random = new SecureRandom(); // quite heavy, look into a lighter method.\n\nbyte[] realiv = new byte[16];\nrandom.nextBytes(realiv);       \n\nbyte[] secret = \"somelongsecretkey\".getBytes();\nSecretKeySpec secretKey = new SecretKeySpec(secret, \"AES\");\necipher.init(Cipher.ENCRYPT_MODE, secretKey, random);\nbyte[] encryptedData = ecipher.doFinal();\n", "idx": 402}
{"project": "cipher", "commit_id": "Snippet42404347_24431.java", "target": 0, "func": "package ...\n\nimport sun.misc.BASE64Encoder;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\n\npublic class SymmetricDESedeCipher {\n    private static final String DATA = \"Whackabad\";\n    private static final String key = \"bAJLyifeUJUBFWdHzVbykfDmPHtLKLMzViHW9aHGmyTLD8hGYZ\";\n    private static final String ALGORITHM = \"DESede\";\n    private static final String XFORM = \"DESede/CBC/PKCS5Padding\";\n\n    private static byte[] iv = new byte[8];\n\n    private static byte[] encrypt(byte[] inpBytes,\n                                  SecretKey key, String XFORM) throws Exception {\n        Cipher cipher = Cipher.getInstance(XFORM);\n        IvParameterSpec ips = new IvParameterSpec(iv);\n        cipher.init(Cipher.ENCRYPT_MODE, key, ips);\n        return cipher.doFinal(inpBytes);\n    }\n\n    public static void main(String[] unused) throws Exception {\n        byte[] keyBytes = key.getBytes();\n        DESedeKeySpec desKeySpec = new DESedeKeySpec(keyBytes);\n        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(ALGORITHM);\n\n        SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);\n\n        byte[] dataBytes = DATA.getBytes();\n        byte[] encBytes = encrypt(dataBytes, secretKey, XFORM);\n\n        System.out.println(\"Data: \" + DATA);\n        System.out.println(\"Encrypted Data: \" + new BASE64Encoder().encode(encBytes));\n    }\n}\n", "idx": 403}
{"project": "cipher", "commit_id": "Snippet22314417_4702.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\n\npublic class Crypto {\n\n    public FileInputStream mIn;\n    public FileOutputStream mOut;\n    public Crypto(String fileIn, String fileOut) {\n        try {\n                mIn = new FileInputStream(new File(fileIn));\n                mOut = new FileOutputStream(new File(fileOut));\n                decryptAES(mIn, mOut);\n        } catch (Exception e) {\n                e.printStackTrace();\n        }\n    }\n\n    public static void decryptAES(InputStream in, FileOutputStream out) throws Exception {\n        final String string = \"346a23652a46392b4d73257c67317e352e3372482177652c\";\n        byte[] hexAsBytes = DatatypeConverter.parseHexBinary(string);\n\n        SecretKeySpec keySpec = new SecretKeySpec(hexAsBytes, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\"); \n\n        cipher.init(Cipher.DECRYPT_MODE, keySpec);\n\n        in = new CipherInputStream(in, cipher);\n        byte[] buffer = new byte[24]; \n        int bytesRead;\n        while ((bytesRead = in.read(buffer)) != -1)\n        {\n            out.write(buffer, 0, bytesRead);\n        }\n\n    }\n\n\n    public static void main(String[] args){    \n        Crypto c = new Crypto(\"C:\\\\msgstore.db.crypt\", \"D:\\\\WhatsappDb\");\n        System.out.println(\"Decrypting Done\");\n    }\n}\n", "idx": 404}
{"project": "cipher", "commit_id": "Snippet5769965_31795.java", "target": 0, "func": " //Load Key\n FileInputStream fis2= new FileInputStream(\"a.key\");\n File f=new File(\"a.key\");\n long l=f.length();\n byte[] b1=new byte[(int)l];\n fis2.read(b1, 0, (int)l);\n\n\n\n SecretKeySpec ks2=new SecretKeySpec(b1,\"AES\");\n\n  Cipher c1 = Cipher.getInstance(\"AES\");\n  c1.init(Cipher.DECRYPT_MODE, ks2);\n FileInputStream fis1=new FileInputStream(\"Encrypted.file\");\n CipherInputStream in= new CipherInputStream(fis1,c1);\n FileOutputStream fos0 =new FileOutputStream(\"decrypted.file\");\n byte[] b3=new byte[1];\n int ia=in.read(b3);\n while (ia >=0)\n {\n    c1.update(b3); //<-------remove this\n    fos0.write(b3, 0, ia);\n    ia=in.read(b3);\n }\nin.close();\nfos0.flush();\nfos0.close();\n", "idx": 405}
{"project": "cipher", "commit_id": "Snippet5677550_31763.java", "target": 0, "func": "cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");", "idx": 406}
{"project": "cipher", "commit_id": "Snippet44381359_26442.java", "target": 0, "func": "private static final String ALGO = \"AES\";\n private static final byte[] keyValue =\n        new byte[]{'T', 'h', 'e', 'B', 'e', 's', 't',\n                'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'};\n\npublic static String encrypt(String Data) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(Data.getBytes());\n    String encryptedValue = new BASE64Encoder().encode(encVal);\n    return encryptedValue;\n}\n\npublic static String decrypt(String encryptedData) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n\n    return decryptedValue;\n}\n\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, ALGO);\n    return key;\n}\n", "idx": 407}
{"project": "cipher", "commit_id": "Snippet17690611_808.java", "target": 0, "func": "final Cipher decipher = Cipher.getInstance(\"DESede/CFB/NoPadding\");", "idx": 408}
{"project": "cipher", "commit_id": "Snippet26546208_8694.java", "target": 0, "func": "private void decodealgo() {\n\n        vers();\n\n        geheim2 = input.getText().toString();\n\n    // BASE64 String zu Byte-Array konvertieren\n    data = Base64.decode(geheim2, Base64.NO_WRAP);\n\n\n    // Entschluesseln\n\n    try {\n        cipher3 = Cipher.getInstance(\"AES\");\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    try {\n        cipher3.init(Cipher.DECRYPT_MODE, secretKeySpec2);\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        Toast.makeText(getApplicationContext(), \"Invalid key\",\n        Toast.LENGTH_SHORT).show();\n        e.printStackTrace();\n    }\n\n    try {\n        cipherData3 = cipher3.doFinal(data);\n    } catch (IllegalBlockSizeException e) {\n        // TODO Auto-generated catch block\n        Toast.makeText(getApplicationContext(), \"No valid encryption\",\n        Toast.LENGTH_SHORT).show();\n    } catch (BadPaddingException e) {\n        // TODO Auto-generated catch block\n        Toast.makeText(getApplicationContext(), \"Key invalid format\",\n        Toast.LENGTH_SHORT).show();\n        e.printStackTrace();\n    }\n\n    try {\n        text3 = new String(cipherData3, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n\n    // Klartext\n    output.setText(text3);\n\n}\n", "idx": 409}
{"project": "cipher", "commit_id": "Snippet1912785_30149.java", "target": 0, "func": "import java.awt.event.*;\nimport java.awt.*;\nimport javax.swing.*;\nimport java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.io.*;\n\npublic class AESGUI extends JPanel {\n\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"AES Encryption\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setPreferredSize(new Dimension(600,300));\n\n        frame.setLocationRelativeTo(null);\n        frame.setResizable(false);\n\n        AESGUI p = new AESGUI();\n\n        frame.getContentPane().add(p);\n        frame.pack();\n        frame.setVisible(true);\n    }\n\n    private JTextField in;\n    private JTextArea out;\n\n    public AESGUI() {\n        JLabel info = new JLabel(\"Type any String\");\n        in = new JTextField(20);\n        JButton encrypt = new JButton(\"Encrypt\");\n        out = new JTextArea(10,40);\n\n        out.setEditable(false);\n\n        encrypt.addActionListener(new encryptListener());\n        in.addActionListener(new encryptListener());\n\n        add(info);\n        add(in);\n        add(encrypt);\n        add(out);\n        add(new JScrollPane(out));\n    }\n\n    private class encryptListener implements ActionListener {\n        public void actionPerformed(ActionEvent e) {\n            String data = in.getText();\n            if (data.length() == 0) { }\n            else\n                try {\n                    String en = encrypt(data);\n                    out.append(\"Encrypted string: \" + en + \"\\n\");\n                    out.append(\"Original String: \" + decrypt(en) + \"\\n\\n\");\n                } catch(Exception ex) { }\n        }\n    }\n\n    public String asHex(byte[] buf) {\n        StringBuffer strbuf = new StringBuffer(buf.length * 2);\n        int i;\n        for (i = 0; i < buf.length; i++) {\n            if (((int) buf[i] & 0xff) < 0x10)\n                strbuf.append(\"0\");\n            strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n        }\n        return strbuf.toString();\n    }\n\n    private SecretKeySpec skeySpec;\n    private Cipher cipher;\n    private byte[] encrypted;\n\n    public String encrypt(String str) throws Exception {\n        // Get the KeyGenerator\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        kgen.init(128); // 192 and 256 bits may not be available\n\n        // Generate the secret key specs.\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        skeySpec = new SecretKeySpec(raw, \"AES\");\n\n        // Instantiate the cipher\n        cipher = Cipher.getInstance(\"AES\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        encrypted = cipher.doFinal(str.getBytes());\n        return asHex(encrypted);\n    }\n\n    public String decrypt(String str) throws Exception {\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] original = cipher.doFinal(encrypted);\n        String originalString = new String(original);\n        return originalString;\n    }\n\n}\n", "idx": 410}
{"project": "cipher", "commit_id": "Snippet14845525_37957.java", "target": 0, "func": "byte[] key = \"1234567890ABCDEF1234567890ABCDEF\".getBytes(\"UTF-8\");\nbyte[] iv  = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\nAlgorithmParameterSpec ivSpec = new IvParameterSpec(iv);\nSecretKeySpec newKey = new SecretKeySpec(key, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, newKey, ivSpec);\nbyte[] results = cipher.doFinal(\"This is a test\".getBytes(\"UTF-8\"));\n\nreturn Base64.encodeToString(results,Base64.DEFAULT);\n", "idx": 411}
{"project": "cipher", "commit_id": "Snippet44233617_26282.java", "target": 0, "func": "package com.google.firebase.david.encryptochat; //firebase API\n\n\nimport java.security.MessageDigest;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n//**************************************\n//THis class is our message object\n//*****************************************\npublic class EncryptoMessage {\n\nprivate String text;\nprivate String name;\nprivate String photoUrl;\n\npublic EncryptoMessage() {\n\n    // Default constructor required for calls to \n    //DataSnapshot.getValue(User.class)\n  }\n\n// The encrypto message constructor to create the object\npublic EncryptoMessage(String text, String name, String photoUrl) {\n    this.text = text;\n    this.name = name;\n    this.photoUrl = photoUrl;\n}\n  //Copy constuctor\n\n  /* public EncryptoMessage(EncryptoMessage EncryptoMessageCopy){\n    this(EncryptoMessageCopy.getText(), EncryptoMessageCopy.getName());\n}*/\npublic String getText() {\n    return text;\n}\n\npublic void setText(String text) {\n    this.text = text;\n}\n\npublic String getName() {\n    return name;\n}\n\npublic void setName(String name) {\n    this.name = name;\n}\n\npublic String getPhotoUrl() {\n    return photoUrl;\n}\n\npublic void setPhotoUrl(String photoUrl) {\n    this.photoUrl = photoUrl;\n}\n\n\n   //Encryption of the messages\n\n   public byte[] encrypt(String message) throws Exception {\n        final MessageDigest md = MessageDigest.getInstance(\"md5\");\n\n        final byte[] digestOfPassword = md.digest(\"HG58YZ3CR9\"\n                .getBytes(\"utf-8\"));\n\n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        for (int j = 0, k = 16; j < 8;) {\n            keyBytes[k++] = keyBytes[j++];\n        }\n\n        final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n\n        final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n        final byte[] plainTextBytes = message.getBytes(\"utf-8\");\n        final byte[] cipherText = cipher.doFinal(plainTextBytes);\n\n\n        return cipherText;\n       }\n       //Decrypt\n\n      public String decrypt(byte[] message) throws Exception {\n\n        //get the bytes if the string passing in\n        //byte [] bytes = message.getBytes();\n\n        final MessageDigest md = MessageDigest.getInstance(\"md5\");\n        final byte[] digestOfPassword = md.digest(\"HG58YZ3CR9\"\n                .getBytes(\"utf-8\"));\n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        for (int j = 0, k = 16; j < 8;) {\n            keyBytes[k++] = keyBytes[j++];\n        }\n\n        final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n        final Cipher decipher = \n        Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n        final byte[] plainText = decipher.doFinal(message);\n\n        return new String(plainText, \"UTF-8\");\n    }\n", "idx": 412}
{"project": "cipher", "commit_id": "Snippet14232377_37579.java", "target": 0, "func": "    private  byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n}\n", "idx": 413}
{"project": "cipher", "commit_id": "Snippet46704765_28784.java", "target": 0, "func": "public static byte[] encodeFile(byte[] secretKey, byte[] fileData) {\n    SecretKeySpec skeySpec = new SecretKeySpec(secretKey, \"AES\");\n    byte[] encrypted = null;\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        encrypted = cipher.doFinal(fileData);\n\n        // Now write your logic to save encrypted data to sdcard here\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } catch (Exception e){\n        e.printStackTrace();\n    }\n    return encrypted;\n}\n", "idx": 414}
{"project": "cipher", "commit_id": "Snippet43425189_25526.java", "target": 0, "func": "public class AES\n{\n\nprivate static SecretKeySpec secretKey ;\nprivate static byte[] key ;\n\nprivate static String decryptedString;\nprivate static String encryptedString;\n\npublic static void setKey(String myKey){\n\n\n    MessageDigest sha = null;\n    try {\n        key = myKey.getBytes(\"UTF-8\");\n        System.out.println(key.length);\n        sha = MessageDigest.getInstance(\"SHA-1\");\n        key = sha.digest(key);\n        key = Arrays.copyOf(key, 16); // use only first 128 bit\n        System.out.println(key.length);\n        System.out.println(new String(key,\"UTF-8\"));\n        secretKey = new SecretKeySpec(key, \"AES\");\n\n\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (UnsupportedEncodingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n\n\n}\n\npublic static String getDecryptedString() {\n    return decryptedString;\n}\npublic static void setDecryptedString(String decryptedString) {\n    AES.decryptedString = decryptedString;\n}\npublic static String getEncryptedString() {\n    return encryptedString;\n}\npublic static void setEncryptedString(String encryptedString) {\n    AES.encryptedString = encryptedString;\n}\npublic static String encrypt(String strToEncrypt)\n{\n    try\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n\n        setEncryptedString(Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))));\n\n    }\n    catch (Exception e)\n    {\n\n        System.out.println(\"Error while encrypting: \"+e.toString());\n    }\n    return null;\n}\npublic static String decrypt(String strToDecrypt)\n{\n    try\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        setDecryptedString(new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt))));\n\n    }\n    catch (Exception e)\n    {\n\n        System.out.println(\"Error while decrypting: \"+e.toString());\n    }\n    return null;\n}\npublic static void main(String args[])\n{\n            final String strToEncrypt = \"My text to encrypt\";\n            final String strPssword = \"encryptor key\";\n            AES.setKey(strPssword);\n\n            AES.encrypt(strToEncrypt.trim());\n\n            System.out.println(\"String to Encrypt: \" + strToEncrypt); \n            System.out.println(\"Encrypted: \" + AES.getEncryptedString());\n\n            final String strToDecrypt =  AES.getEncryptedString();\n            AES.decrypt(strToDecrypt.trim());\n\n            System.out.println(\"String To Decrypt : \" + strToDecrypt);\n            System.out.println(\"Decrypted : \" + AES.getDecryptedString());\n\n}\n\n}\n", "idx": 415}
{"project": "cipher", "commit_id": "Snippet20382488_3022.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"ARC4\");\nc.init(Cipher.DECRYPT_MODE, new SecretKeySpec(\"BrianIsInTheKitchen\".getBytes(), \"ARC4\"));\n", "idx": 416}
{"project": "cipher", "commit_id": "Snippet16547290_39462.java", "target": 0, "func": "import javax.crypto.Cipher;\nprivate Cipher myGetCipher() {\n    Cipher c = Cipher.getInstance(\"RC4\");\n    c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(\"myPassword\".getBytes(), \"RC4\"));\n    return c\n}\n", "idx": 417}
{"project": "cipher", "commit_id": "Snippet17529679_695.java", "target": 0, "func": "if(getFileToEncrypt.exists()){\n            System.out.println(\"-----------FILE EXISTS--------------\");\n            secRand = SecureRandom.getInstance(\"SHA1PRNG\");\n            key = new BigInteger(128, secRand).toString(16);\n            rawKey = key.getBytes();\n            sKeySpec = new SecretKeySpec(rawKey, \"AES\");\n            cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, sKeySpec);\n            inputStream = new FileInputStream(getFileToEncrypt);\n            byte[] byts = new byte[(int) getFileToEncrypt.length()];\n            inputStream.read(byts);\n            inputStream.close();\n            encrypted = cipher.doFinal(byts);\n            encryptedFile.createNewFile();\n            ostr = new FileOutputStream(encryptedFile);\n            ostr.write(encrypted);\n            ostr.close();   \n            System.out.println(\"--------FILE ENCRYPTION COMPLETE----------\");\n\n        }\n", "idx": 418}
{"project": "cipher", "commit_id": "Snippet4184058_31033.java", "target": 0, "func": "public static void main(String args[]){ \n     String message = \"<abc>ABCDEFG</abc>\"; \n     String key = \"key\"; \n     byte[] b = encrypt(message.getBytes(), key.getBytes());\n}\n\npublic byte[] encrypt(byte encrypt[], byte en_key[]) { \n     try { \n           SecretKeySpec key = new SecretKeySpec(en_key, \"Blowfish\"); \n           Cipher cipher = Cipher.getInstance(\"Blowfish/ECB/NoPadding\"); \n           cipher.init(Cipher.ENCRYPT_MODE, en_key); \n           return cipher.doFinal(encrypt); \n     } catch (Exception e) { \n           e.printStackTrace();\n           return null; \n     }\n} \n", "idx": 419}
{"project": "cipher", "commit_id": "Snippet42192585_24170.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n", "idx": 420}
{"project": "cipher", "commit_id": "Snippet7957752_33008.java", "target": 0, "func": "public void validateUserPassword(String encryptedPassword) {\n    String algorithm = \"AES\";\n    SecretKeySpec  keySpec = null;\n    byte[] key =  \"<==OMGWTFBBQ!==>\".getBytes();\n\n    Cipher cipher = null;\n\n    cipher = Cipher.getInstance(algorithm);\n    keySpec = new SecretKeySpec(key, algorithm);\n\n    byte[] encryptionBytes = new sun.misc.BASE64Decoder().decodeBuffer(encryptedPassword);      \n    cipher.init(Cipher.DECRYPT_MODE, keySpec);\n    byte[] recoveredBytes = cipher.doFinal(encryptionBytes);\n    String recovered = new String(recoveredBytes);\n\n    log.info(\"Encrypted password: \" + encryptedPassword);\n    log.info(\"Dencrypted password: \" + recovered);\n}\n", "idx": 421}
{"project": "cipher", "commit_id": "Snippet42044614_24018.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DESede\");\nbyte[] bytes = cipher.doFinal(value.getBytes());\nString encrypted = new String(bytes);\n", "idx": 422}
{"project": "cipher", "commit_id": "Snippet25425486_7780.java", "target": 0, "func": "package security;\n\nimport java.security.spec.KeySpec;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\n/**\n * This class defines methods for encrypting and decrypting using the Triple DES\n * algorithm and for generating, reading and writing Triple DES keys. It also\n * defines a main() method that allows these methods to be used from the command\n * line.\n */\npublic class TripleDesEncryptionDecryption {\n  /**\n   * The program. The first argument must be -e, -d, or -g to encrypt,\n   * decrypt, or generate a key. The second argument is the name of a file\n   * from which the key is read or to which it is written for -g. The -e and\n   * -d arguments cause the program to read from standard input and encrypt or\n   * decrypt to standard output.\n   */\n    private static final String UNICODE_FORMAT = \"UTF-8\";\n    public static final String DESEDE_ENCRYPTION_SCHEME = \"DESede\";\n    private KeySpec myKeySpec;\n    private SecretKeyFactory mySecretKeyFactory;\n    private Cipher cipher;\n    byte[] keyAsBytes;\n    private String myEncryptionKey;\n    private String myEncryptionScheme;\n    SecretKey key;\n    static String stringToEncrypt=\"\";\n\n    public void setKey(String myKey) throws Exception\n    {\n        myEncryptionKey = myKey ;\n        myEncryptionScheme = DESEDE_ENCRYPTION_SCHEME;\n        keyAsBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n        myKeySpec = new DESedeKeySpec(keyAsBytes);\n        mySecretKeyFactory = SecretKeyFactory.getInstance(myEncryptionScheme);\n        cipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n        key = mySecretKeyFactory.generateSecret(myKeySpec);\n    }\n\n    /**\n     * Method To Encrypt The String\n     */\n    public String encrypt(byte[] plainText) {\n        String encryptedString = null;\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            //byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);\n            //byte[] encryptedText = cipher.doFinal(plainText);\n            BASE64Encoder base64encoder = new BASE64Encoder();\n            encryptedString = base64encoder.encode(plainText);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return encryptedString;\n    }\n    /**\n     * Method To Decrypt An Ecrypted String\n     */\n    public String decrypt(String encryptedString) {\n        String decryptedText=null;\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            BASE64Decoder base64decoder = new BASE64Decoder();\n            System.out.println(myEncryptionKey);\n            byte[] encryptedText = base64decoder.decodeBuffer(encryptedString);\n            byte[] plainText = cipher.doFinal(encryptedText);\n            decryptedText= bytes2String(plainText);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return decryptedText;\n    }\n    /**\n     * Returns String From An Array Of Bytes\n     */\n    private static String bytes2String(byte[] bytes) {\n        StringBuffer stringBuffer = new StringBuffer();\n        for (int i = 0; i < bytes.length; i++) {\n            stringBuffer.append((char) bytes[i]);\n        }\n        return stringBuffer.toString();\n    }\n\n    /**\n     * Testing The DESede Encryption And Decryption Technique\n    */\n    public static void main(String args []) throws Exception\n    {\n        TripleDesEncryptionDecryption myEncryptor= new TripleDesEncryptionDecryption();\n\n\n        myEncryptor.setKey(\"tarunvermacdac@gmail.com\") ;\n\n        System.out.println(\"tarun1234\".getBytes());\n        String encrypted=myEncryptor.encrypt(\"tarun\".getBytes());\n        String decrypted=myEncryptor.decrypt(encrypted);\n\n        System.out.println(\"String To Encrypt: \"+stringToEncrypt);\n        System.out.println(\"Encrypted Value :\" + encrypted);\n        System.out.println(\"Decrypted Value :\"+decrypted);\n    }\n}\n", "idx": 423}
{"project": "cipher", "commit_id": "Snippet25225514_7589.java", "target": 0, "func": "package application;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\n\nimport javafx.application.Platform;\nimport javafx.concurrent.Service;\nimport javafx.concurrent.Task;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AESEncryption {\n\nprivate final File toBeUsed;\nprivate final String password;\n\npublic AESEncryption(String passkey, File given){\n    this.password = passkey;\n    this.toBeUsed = given;\n}\n\npublic void encrypt(boolean toBeLocal){\n    Service<Void> encryption = new Service<Void>() {\n\n        @Override\n        protected Task<Void> createTask() {\n\n            return new Task<Void>(){\n\n                @Override\n                protected Void call() throws Exception {\n                    if(toBeLocal) this.startEncryption();\n                    this.success();\n                    return null;\n\n                }\n\n                private void success() {\n                    Platform.runLater(new Runnable() {\n\n                        @Override\n                        public void run() {\n                            EncryptionSuccessController controller = (EncryptionSuccessController)new OfflineWindow(\"/fxml/encryption_success.fxml\", \"Success\").getLoader().getController();\n                            controller.setPath(toBeUsed.getAbsolutePath()+\".enc\");\n                        }\n\n                    });\n                }\n\n                private void startEncryption() throws Exception{\n                     SecureRandom randomizer = new SecureRandom();\n                     byte[] salt = new byte[16];\n                     randomizer.nextBytes(salt);\n\n                     byte key[] = (password+salt).getBytes(\"UTF-8\");  \n                     MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n                     key = sha.digest(key);\n                     key = Arrays.copyOf(key, 16);\n\n                     SecretKeySpec pass = new SecretKeySpec(key,\"AES\");  \n                     Cipher encrypt =  Cipher.getInstance(\"AES\");  \n                     encrypt.init(Cipher.ENCRYPT_MODE, pass);\n\n                     FileOutputStream fos = new FileOutputStream(toBeUsed.getAbsolutePath() +\".enc\");\n                     try(FileInputStream fis =new FileInputStream(toBeUsed.getAbsolutePath())){\n                        try(CipherOutputStream cout=new CipherOutputStream(fos, encrypt)){\n                            copy(fis,cout);\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                        }\n                     }\n                }\n\n                private void copy(InputStream is,OutputStream os) throws Exception{\n                     byte buf[] = new byte[4096];\n                     int read = 0;\n                     while((read = is.read(buf)) != -1) os.write(buf,0,read); \n                }\n            };\n\n        };\n    };\n    encryption.start(); \n}\n\npublic void decrypt(boolean isLocallyEncrypted){\n    Service<Void> decryption = new Service<Void>() {\n\n        @Override\n        protected Task<Void> createTask() {\n\n            return new Task<Void>(){\n\n                @Override\n                protected Void call() throws Exception {\n\n                    if(isLocallyEncrypted) this.startDecryption();\n                    this.message();\n                    return null;\n\n                }\n\n                private void message() {\n                    Platform.runLater(new Runnable(){\n\n                        @Override\n                        public void run() {\n                            DecryptionCompleteController controller = (DecryptionCompleteController)new OfflineWindow(\"/fxml/decryption_over.fxml\", \"Completed\").getLoader().getController();\n                            controller.setPath(toBeUsed.getAbsolutePath());\n                        }\n\n                    });\n                }\n\n                private void startDecryption() throws Exception{\n                    SecureRandom randomizer = new SecureRandom();\n                    byte[] salt = new byte[16];\n                    randomizer.nextBytes(salt);\n                    byte key[] = (password+salt).getBytes(\"UTF-8\");  \n                    MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n                    key = sha.digest(key);\n                    key = Arrays.copyOf(key, 16); \n\n                    SecretKeySpec pass = new SecretKeySpec(key,\"AES\");  \n                    Cipher decrypt =  Cipher.getInstance(\"AES\");  \n                    decrypt.init(Cipher.DECRYPT_MODE, pass);\n                    FileInputStream fis = new FileInputStream(toBeUsed.getAbsolutePath());\n                    try(CipherInputStream cin=new CipherInputStream(fis, decrypt)){  \n                       try(FileOutputStream fos =new FileOutputStream(toBeUsed.getAbsolutePath().substring(0,toBeUsed.getAbsolutePath().lastIndexOf(\".\")))){\n                          copy(cin,fos);\n                       }\n                    }\n                }\n\n                private void copy(InputStream is,OutputStream os) throws Exception{\n                     byte buf[] = new byte[4096];\n                     int read = 0;\n                     while((read = is.read(buf)) != -1) os.write(buf,0,read); \n                }\n            };\n\n        };\n\n    };\n    decryption.start();\n  }\n\n}\n", "idx": 424}
{"project": "cipher", "commit_id": "Snippet11105718_35310.java", "target": 0, "func": "public static String encrypt(String plaintext, String enctoken){\n\n    if(enctoken == null)\n        enctoken = \"sfdjf48mdfdf3054\";\n\n    String encrypted = null;\n\n    byte[] plaintextByte = EncodingUtils.getAsciiBytes(plaintext);\n\n    //nel caso non funzionasse provare getBytes semplicemente\n    byte[] pwd = EncodingUtils.getAsciiBytes(Connessione.md5(enctoken));        \n\n    try {\n        Cipher cipher = Cipher.getInstance(\"DESEDE/ECB/NoPadding\");\n        SecretKeySpec myKey = new SecretKeySpec(pwd,\"DESede\");\n\n        cipher.init( Cipher.ENCRYPT_MODE, myKey);\n\n        try {\n            byte[] encryptedPlainText= cipher.doFinal(plaintextByte);\n\n            encrypted = Base64.encodeToString(encryptedPlainText, 0); \n            return encrypted;\n\n        } catch (IllegalBlockSizeException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }       \n\n    return \"\";\n}\n", "idx": 425}
{"project": "cipher", "commit_id": "Snippet38450858_20400.java", "target": 0, "func": " private Cipher myGetCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException {\n    // avoid the default security provider \"AndroidOpenSSL\" in Android 4.3+ (http://libeasy.alwaysdata.net/network/#provider)\n    Cipher c = Cipher.getInstance(\"ARC4\", \"BC\");\n    c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(\"BrianIsInTheKitchen\".getBytes(), \"ARC4\"));\n    return c;\n}\n", "idx": 426}
{"project": "cipher", "commit_id": "Snippet25371351_7745.java", "target": 0, "func": "public static String encryptWithAES(String payload, String aesKey) {\n\n    byte[] raw = aesKey.getBytes();\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES/ECB/PKCS5Padding\");\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encrypted;\n        encrypted = cipher.doFinal(payload.getBytes());\n        cipher = null;\n        return Base64.encodeToString(encrypted, Base64.DEFAULT);\n    } catch (Exception e) {\n        System.out.println(\"Error in encryptWithAES!!!\");\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 427}
{"project": "cipher", "commit_id": "Snippet27988312_10135.java", "target": 0, "func": "private static final String CIPHER_ALGORITHM = \"AES\";\n\n// nullSafeSet\nprotected void noNullSet(PreparedStatement st, Object value, int index, SessionImplementor si) throws SQLException {\n    byte[] clearText = ((String) value).getBytes(Charset.forName(\"UTF-8\"));\n\n    try {\n        Cipher encryptCipher = Cipher.getInstance(CIPHER_ALGORITHM);\n        encryptCipher.init(Cipher.ENCRYPT_MODE, getKey(cle));\n        st.setBytes(index, encryptCipher.doFinal(clearText));\n    } \n    catch (GeneralSecurityException e) {\n        throw new RuntimeException(\"should never happen\", e);\n    }\n}\n\n@Override\npublic Object nullSafeGet(ResultSet rs, String[] names, SessionImplementor si, Object owner) throws HibernateException, SQLException {\n    byte[] bytes = rs.getBytes(names[0]);\n    try {\n        Cipher decryptCipher = Cipher.getInstance(CIPHER_ALGORITHM);\n        decryptCipher.init(Cipher.DECRYPT_MODE, getKey(cle));\n        if (bytes != null) {\n            return new String(decryptCipher.doFinal(bytes), Charset.forName(\"UTF-8\"));\n        } \n        else {\n            return new String();\n        }\n\n    } \n    catch (GeneralSecurityException e) {\n        throw new RuntimeException(\"Mauvaise cl\u00e9\");\n    }\n}\n\nprivate static SecretKeySpec getKey(String secretKey) {\n    final byte[] finalKey = new byte[16];\n    int i = 0;\n    for (byte b : secretKey.getBytes()) {\n        // XOR\n        finalKey[i++ % 16] ^= b;\n    }\n    return new SecretKeySpec(finalKey, \"AES\");\n}\n", "idx": 428}
{"project": "cipher", "commit_id": "Snippet18350459_1402.java", "target": 0, "func": "public  String encrypt(String message) throws Exception\n{\n    String salt = SharedVariables.globalContext.getString(R.string.EncryptionKey);\n    SecretKeySpec key = new SecretKeySpec(salt.getBytes(), \"AES\");\n    Cipher c = Cipher.getInstance(\"AES\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(message.getBytes());\n    String encrypted=Base64.encodeToString(encVal, Base64.DEFAULT);\n    return encrypted;\n}\n\npublic  String decrypt(String message) throws Exception\n{\n    String salt = SharedVariables.globalContext.getString(R.string.EncryptionKey);\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec key = new SecretKeySpec(salt.getBytes(), \"AES\");\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = Base64.decode(message.getBytes(), Base64.DEFAULT);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    return decryptedValue;\n}\n", "idx": 429}
{"project": "cipher", "commit_id": "Snippet11048838_35278.java", "target": 0, "func": "public class DesEncrypter {\n\nprivate static final String ALGO=\"AES\";\nprivate static final String a=\"TheBestSecretKey\";\nprivate static final byte[] keyValue=a.getBytes();\n\npublic byte[] encrypt(byte[] bs) throws Exception{\n\nbyte[] key={'h','e','l','l','o','o','o','o','h','e','l','l','o','o','o','o'};\nSecretKeySpec skeyspec=new SecretKeySpec(key,\"AES\");\nLog.d(\"Encrypted Key=  \",key+\"\");\nCipher c=Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\nc.init(Cipher.ENCRYPT_MODE,skeyspec);\nbyte[] encVal=bs;\nLog.d(\"Encrypted\",encVal.toString());\nreturn c.doFinal(encVal);\n}\n\npublic byte[] decrypt(byte[] encryptedData) throws Exception{\nbyte[] key={'h','e','l','l','o','o','o','o','h','e','l','l','o','o','o','o'};\nLog.d(\"Decrypted Key=  \",key+\"\");\nSecretKeySpec skeyspec=new SecretKeySpec(key,\"AES\");\nCipher c=Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\nc.init(Cipher.DECRYPT_MODE,skeyspec);\nLog.d(\"Inside Decryption 2 \",encryptedData+\"\");\nbyte[] decValue=c.doFinal(encryptedData);\nreturn decValue;\n}\n}\n", "idx": 430}
{"project": "cipher", "commit_id": "Snippet29679283_11748.java", "target": 0, "func": "   public String DesDecryptPin(String pin, String encryptKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException {\n\n        String UNICODE_FORMAT = \"UTF8\";\n        String decryptedPinText = null;\n\n\n\n        SecretKey desKey = null;\n        byte[] encryptKeyBytes = EncodingUtils.getAsciiBytes(encryptKey);\n        byte[] tdesKey = new byte[24];\n        System.arraycopy(encryptKeyBytes, 8, tdesKey, 0, 8);\n        System.arraycopy(encryptKeyBytes, 0, tdesKey, 8, 16);\n        KeySpec desKeySpec = new DESedeKeySpec(tdesKey);\n        Cipher desCipher;\n        SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DESede\");\n        desCipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n        try {\n            desKey = skf.generateSecret(desKeySpec);\n        } catch (InvalidKeySpecException e) {\n            e.printStackTrace();\n        }\n        desCipher.init(Cipher.DECRYPT_MODE, desKey);\n\n        byte[] decryptPin = desCipher.doFinal(EncodingUtils.getAsciiBytes(pin));\n\n        decryptedPinText = new String(decryptPin, \"ASCII\");\n        return decryptedPinText;\n    }\n", "idx": 431}
{"project": "cipher", "commit_id": "Snippet46202245_28305.java", "target": 0, "func": "String encryptedKey = Base64.encodeToString(keyword.getBytes(), Base64.NO_WRAP);\nKey key = new SecretKeySpec(encryptedKey.getBytes(), algorithm);\nCipher chiper = Cipher.getInstance(\"AES\");\nchiper.init(Cipher.ENCRYPT_MODE, key);\nbyte[] encVal = chiper.doFinal(plainText.getBytes());\nString encryptedValue = Base64.encodeToString(encVal, Base64.NO_WRAP);\nreturn encryptedValue;\n", "idx": 432}
{"project": "cipher", "commit_id": "Snippet20759426_3352.java", "target": 0, "func": "import java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\n\npublic class AESFile \n{\nprivate static String algorithm = \"AES\";\nprivate static byte[] keyValue=new byte[] {'0','2','3','4','5','6','7','8','9','1','2','3','4','5','6','7'};// your key\n\n    // Performs Encryption\n    public static String encrypt(String plainText) throws Exception \n    {\n            Key key = generateKey();\n            Cipher chiper = Cipher.getInstance(algorithm);\n            chiper.init(Cipher.ENCRYPT_MODE, key);\n            byte[] encVal = chiper.doFinal(plainText.getBytes());\n            String encryptedValue = new BASE64Encoder().encode(encVal);\n            return encryptedValue;\n    }\n\n    // Performs decryption\n    public static String decrypt(String encryptedText) throws Exception \n    {\n            // generate key \n            Key key = generateKey();\n            Cipher chiper = Cipher.getInstance(algorithm);\n            chiper.init(Cipher.DECRYPT_MODE, key);\n            byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedText);\n            byte[] decValue = chiper.doFinal(decordedValue);\n            String decryptedValue = new String(decValue);\n            return decryptedValue;\n    }\n\n//generateKey() is used to generate a secret key for AES algorithm\n    private static Key generateKey() throws Exception \n    {\n            Key key = new SecretKeySpec(keyValue, algorithm);\n            return key;\n    }\n\n    // performs encryption & decryption \n    public static void main(String[] args) throws Exception \n    {\n        FileReader file = new FileReader(\"C://myprograms//plaintext.txt\");\n        BufferedReader reader = new BufferedReader(file);\n        String text = \"\";\n        String line = reader.readLine();\n    while(line!= null)\n        {\n            text += line;\n    line = reader.readLine();\n        }\n        reader.close();\n    System.out.println(text);\n\n            String plainText = text;\n            String encryptedText = AESFile.encrypt(plainText);\n            String decryptedText = AESFile.decrypt(encryptedText);\n\n            System.out.println(\"Plain Text : \" + plainText);\n            System.out.println(\"Encrypted Text : \" + encryptedText);\n            System.out.println(\"Decrypted Text : \" + decryptedText);\n    }\n}\n", "idx": 433}
{"project": "cipher", "commit_id": "Snippet9846760_34292.java", "target": 0, "func": "// I use String.getBytes() as a convenince a lot.  I specify the encoding\n// to ensure that the result is consistent.\nfinal String utf8 = \"utf-8\";\n\nString password = \"It's a secret!  Make sure it's long enough (24 bytes)\";\nbyte[] keyBytes = Arrays.copyOf(password.getBytes(utf8), 24);\nSecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n\n// Your vector must be 8 bytes long\nString vector = \"ABCD1234\";\nIvParameterSpec iv = new IvParameterSpec(vector.getBytes(utf8));\n\n// Make an encrypter\nCipher encrypt = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\nencrypt.init(Cipher.ENCRYPT_MODE, key, iv);\n\n// Make a decrypter\nCipher decrypt = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\ndecrypt.init(Cipher.DECRYPT_MODE, key, iv);\n\n// Example use\nString message = \"message\";\nbyte[] messageBytes = message.getBytes(utf8);\nbyte[] encryptedByted = encrypt.doFinal(messageBytes);\nbyte[] decryptedBytes = decrypt.doFinal(encryptedByted);\n\n// You can re-run the exmaple to see taht the encrypted bytes are consistent\nSystem.out.println(new String(messageBytes, utf8));\nSystem.out.println(new String(encryptedByted, utf8));\nSystem.out.println(new String(decryptedBytes, utf8));\n", "idx": 434}
{"project": "cipher", "commit_id": "Snippet34379255_16346.java", "target": 0, "func": "public class Security {\n\npublic static void main(String[] args) throws NoSuchAlgorithmException,UnknownHostException, SocketException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchPaddingException, UnsupportedEncodingException\n{\n    String algorithm = \"DESede\";\n    ObjectCrypter obj = null;\n    Key symKey = KeyGenerator.getInstance(algorithm).generateKey();\n    Cipher c = Cipher.getInstance(algorithm);\n    String serial = getSerialNumber();\n    String mac = getMacAddress();\n\n\n    serial = getSerialNumber();\n    mac = getMacAddress();\n    byte[] encryptionBytes1 = obj.encryptF(serial,symKey,c);\n    System.out.println(\"Serial: \" + serial);\n    System.out.println(\"Encr: \" + encryptionBytes1);\n    System.out.println(\"Decr: \" + obj.decryptF(encryptionBytes1, symKey, c));\n    byte[] encryptionBytes2 = obj.encryptF(mac,symKey,c);\n    System.out.println(\"MAC: \" + mac);\n    System.out.println(\"Encr: \" + encryptionBytes2);\n    System.out.println(\"Decr: \" + obj.decryptF(encryptionBytes2, symKey, c));\n\n\n    System.out.println(\"EncryptionBytes: \"+encryptionBytes1);\n    System.out.println(\"Array EncBytes: \"+Arrays.toString(encryptionBytes1));\n    String ts = encryptionBytes1.toString();\n    System.out.println(\"TesString: \"+ts);\n    System.out.println(\"TesString ConvBytes: \"+ts.getBytes(\"ISO-8859-1\"));\n    System.out.println(\"TesString ConvBytes2: \"+ts.getBytes(\"ISO-8859-1\"));\n    System.out.println(\"ts array: \"+Arrays.toString(ts.getBytes(\"ISO-8859-1\")));\n    byte[] tsec = ts.getBytes(\"ISO-8859-1\");\n    System.out.println(\"tsec array: \"+Arrays.toString(tsec));\n    System.out.println(\"esTrEncrypt: \"+tsec);\n    System.out.println(\"esTrEncryptBytes1: \"+tsec.toString().getBytes(\"ISO-8859-1\"));\n    System.out.println(\"esTRarray1: \"+Arrays.toString(tsec));\n    System.out.println(\"esTrEncryptBytes2: \"+tsec.toString().getBytes(\"ISO-8859-1\"));\n    System.out.println(\"esTRarray1: \"+Arrays.toString(tsec));\n    System.out.println(\"esTrEncryptBytes3: \"+tsec.toString().getBytes(\"ISO-8859-1\"));\n    System.out.println(\"esTRarray1: \"+Arrays.toString(tsec));\n    String decoded = new String(encryptionBytes1, \"ISO-8859-1\");\n    System.out.println(\"Decoded: \"+decoded);\n    byte[] encoded = decoded.getBytes(\"ISO-8859-1\");\n    System.out.println(\"Encoded: \"+encoded);\n    System.out.println(\"ArrayEncoded: \"+Arrays.toString(encoded));\n    String decrypted = obj.decryptF(encoded, symKey, c);\n    System.out.println(\"decrypted: \"+decrypted);\n\n    serial = getSerialNumber();\n    mac = getMacAddress();\n    byte[] encryptionBytes12 = obj.encryptF(serial,symKey,c);\n    System.out.println(\"Serial: \" + serial);\n    System.out.println(\"Encr: \" + encryptionBytes12);\n    System.out.println(\"Decr: \" + obj.decryptF(encryptionBytes1, symKey, c));\n    byte[] encryptionBytes22 = obj.encryptF(mac,symKey,c);\n    System.out.println(\"MAC: \" + mac);\n    System.out.println(\"Encr: \" + encryptionBytes22);\n    System.out.println(\"Decr: \" + obj.decryptF(encryptionBytes2, symKey, c));\n}//end test\npublic static String generateData() throws NoSuchAlgorithmException, NoSuchPaddingException, UnknownHostException, SocketException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException\n{\n    String part1 = null, part2 = null;\n    String algorithm = \"DESede\";\n    ObjectCrypter obj = null;\n    Key symKey = KeyGenerator.getInstance(algorithm).generateKey();\n    Cipher c = Cipher.getInstance(algorithm);\n    String serial = getSerialNumber();\n    String mac = getMacAddress();\n    byte[] encryptionBytes = obj.encryptF(serial, symKey, c);\n    part1 = encryptionBytes.toString();\n    byte[] encryptionBytes2 = obj.encryptF(mac, symKey, c);\n    part2 = encryptionBytes2.toString();\n    part1 = sliceString(part1);\n    part2 = sliceString(part2);\n    return part1+part2;\n}//end generateData\n\n\npublic static boolean checkLicense(String license) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnknownHostException, SocketException, UnsupportedEncodingException\n{\n    String part1 = null, part2 = null;\n    String genSerial = null, genMac = null;\n    if (license.length() == 16)\n    {\n        part1 = \"[B@\" + license.substring(0, 8);\n        part2 = \"[B@\" + license.substring(8, license.length());\n    }//end if\n    else if (license.length() == 15)\n    {\n        part1 = \"[B@\" + license.substring(0, 7);\n        part2 = \"[B@\" + license.substring(7, license.length());\n    }//end if\n    else\n    {\n        return false;\n    }//end else\n\n\n    byte[] bpart1 = part1.getBytes(\"ISO-8859-1\");\n    byte[] bpart2 = part2.getBytes(\"ISO-8859-1\");\n\n    System.out.println(\"bytes: \"+bpart1 + \"\\t\" + bpart2);\n\n    System.out.println(\"parts: \"+part1 + \"\\t\" + part2);\n    String algorithm = \"DESede\";\n    ObjectCrypter obj = null;\n    Key symKey = KeyGenerator.getInstance(algorithm).generateKey();\n    Cipher c = Cipher.getInstance(algorithm);\n    genSerial = sliceString(obj.decryptF(bpart1, symKey, c));\n    genMac = sliceString(obj.decryptF(bpart2, symKey, c));\n    System.out.println(genSerial + \"\\t\" + genMac);\n    System.out.println(getSerialNumber() + \"\\t\" + getMacAddress());\n    if (genSerial == getSerialNumber() && genMac == getMacAddress())\n    {\n        return true;\n    }//end if\n    else\n    {\n        return false;\n    }//end else\n}//end checkLicense\npublic static String sliceString(String arg)\n{\n    return arg.substring(3);\n}//end sliceString\n\npublic static String getSerialNumber()\n{\n    String output = \"\";\n    try \n    { \n        Process p=Runtime.getRuntime().exec(\"wmic baseboard get serialnumber\"); \n        //p.waitFor(); \n        BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream())); \n        String line = \"\";\n        int index = 0;\n        while((line = reader.readLine()) != null)\n        {\n            if (line.length() > 0)\n            {\n                output = line;\n            }//end if\n        }//end while\n    } \n    catch(IOException e1) {}\n    return output;\n}//end extractMBSerialNumber\n\npublic static String getMacAddress() throws UnknownHostException, SocketException\n{\n    InetAddress ip;\n    ip = InetAddress.getLocalHost();\n\n    NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n    byte[] mac = network.getHardwareAddress();\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < mac.length; i++) {\n        sb.append(String.format(\"%02X%s\", mac[i], (i < mac.length - 1) ? \"-\" : \"\"));        \n    }\n    return sb.toString();\n}\n", "idx": 435}
{"project": "cipher", "commit_id": "Snippet17339845_576.java", "target": 0, "func": "String encrypt(String inputText) throws Exception {\n    byte[] keyValue = new byte[] { 'm', 'y', 'k', 'e', 'y', 'n', 'u', 'l'};\n    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n    try {           \n        KeySpec keySpec = new DESKeySpec(keyValue);\n        SecretKey key = SecretKeyFactory.getInstance(\"DES\").generateSecret(keySpec);\n        IvParameterSpec iv = new IvParameterSpec(keyValue);\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\"); \n        cipher.init(Cipher.ENCRYPT_MODE,key,iv);\n        bout.write(cipher.doFinal(inputText.getBytes(\"ASCII\")));                        \n    } catch(Exception e) {\n        System.out.println(\"Exception .. \"+ e.getMessage());\n    }\n    return new String(Base64.encodeBase64(bout.toByteArray()),\"ASCII\");\n}\n\nString decrypt(String inputText) throws Exception {\n    byte[] keyValue = new byte[] { 'm', 'y', 'k', 'e', 'y', 'n', 'u', 'l'};\n    try {\n        KeySpec keySpec = new DESKeySpec(keyValue);\n        SecretKey key = SecretKeyFactory.getInstance(\"DES\").generateSecret(keySpec);\n        IvParameterSpec iv = new IvParameterSpec(keyValue);\n\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE,key,iv);\n        //byte[] decoded = Base64.decodeBase64(inputText); //Works with apache.commons.codec-1.8\n        byte[] decoded = Base64.decodeBase64(inputText.getBytes(\"ASCII\"));// works with apache.commons.codec-1.3\n        bout.write(cipher.doFinal(decoded));\n    } catch(Exception e) {\n        System.out.println(\"Exception ... \"+e);\n    }\n    return new String(bout.toByteArray(),\"ASCII\");\n}\n", "idx": 436}
{"project": "cipher", "commit_id": "Snippet36002834_17871.java", "target": 0, "func": "import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class Encryption {\n\nprivate String algorithm = \"Blowfish/CBC/PKCS5Padding\";\nprivate SecretKeySpec keySpec;\nprivate Cipher cipher;\n\n\npublic void setupForEncryption(String keyString) throws java.security.GeneralSecurityException, UnsupportedEncodingException {\n    byte[] keyData = keyString.getBytes();\n    keySpec = new SecretKeySpec(keyString.getBytes(\"UTF-8\"), \"Blowfish\");\n    cipher = Cipher.getInstance(algorithm);\n}\n\npublic SecretKeySpec getSecretKey() {\n    return keySpec;\n}\n\npublic boolean checkForKeySpec() {\n    if (keySpec != null) {\n        return true;\n    }\n    return false;\n}\n\npublic String encryptString(String inputString) throws java.security.GeneralSecurityException, UnsupportedEncodingException {\n    IvParameterSpec ivSpec = new IvParameterSpec(keySpec.getEncoded());\n    cipher.init(Cipher.ENCRYPT_MODE, getSecretKey(),ivSpec);\n    byte[] encryptedBytes = cipher.doFinal(inputString.getBytes(\"UTF-8\"));\n    return new String(encryptedBytes);\n}\n", "idx": 437}
{"project": "cipher", "commit_id": "Snippet4747850_31290.java", "target": 0, "func": "import javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.security.*;\n\n/**\n * Decrypt passwords stored in Oracle SQL Developer. This is intended for\n * password recovery.\n * \n * Passwords are stored in\n * ~/.sqldeveloper/system2.1.1.64.39/o.jdeveloper.db.connection\n * .11.1.1.2.36.55.30/connections.xml\n */\npublic class Decrypt {\n    public static byte[] decryptPassword(byte[] result)\n            throws GeneralSecurityException {\n        byte constant = result[0];\n        if (constant != (byte) 5) {\n            throw new IllegalArgumentException();\n        }\n\n        byte[] secretKey = new byte[8];\n        System.arraycopy(result, 1, secretKey, 0, 8);\n\n        byte[] encryptedPassword = new byte[result.length - 9];\n        System.arraycopy(result, 9, encryptedPassword, 0,\n                encryptedPassword.length);\n\n        byte[] iv = new byte[8];\n        for (int i = 0; i < iv.length; i++) {\n            iv[i] = 0;\n        }\n\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(secretKey, \"DES\"),\n                new IvParameterSpec(iv));\n        return cipher.doFinal(encryptedPassword);\n    }\n\n    public static void main(String[] args) {\n        if (args.length != 1) {\n            System.err.println(\"Usage:  java Decrypt <password>\");\n            System.exit(1);\n        }\n\n        if (args[0].length() % 2 != 0) {\n            System.err\n                    .println(\"Password must consist of hex pairs.  Length is odd (not even).\");\n            System.exit(2);\n        }\n\n        byte[] secret = new byte[args[0].length() / 2];\n        for (int i = 0; i < args[0].length(); i += 2) {\n            String pair = args[0].substring(i, i + 2);\n            secret[i / 2] = (byte) (Integer.parseInt(pair, 16));\n        }\n\n        try {\n            System.out.println(new String(decryptPassword(secret)));\n        } catch (GeneralSecurityException e) {\n            e.printStackTrace();\n            System.exit(3);\n        }\n    }\n}\n", "idx": 438}
{"project": "cipher", "commit_id": "Snippet30035313_12114.java", "target": 0, "func": "    try {\n        SecretKeySpec secretKeySpec = new SecretKeySpec(byteKey, \"DES\");\n\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); //Request the use of the DES algorithm, using the ECB mode (Electronic CodeBook) and style padding PKCS-5.\n        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n        byte[] myCipherText = cipher.doFinal(plainText);\n        byte[] test = (new String(myCipherText, \"UTF8\")).getBytes();\n\n         System.out.println(\"\\nStart decryption\");\n         cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n         byte[] newPlainText = cipher.doFinal(test);\n         System.out.println(new String(newPlainText, \"UTF8\"));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n", "idx": 439}
{"project": "cipher", "commit_id": "Snippet33197370_15272.java", "target": 0, "func": "try\n{ \n    Class.forName(\"com.mysql.jdbc.Driver\");\n    //connection for database\n    Connection conn = (Connection)\n            //root and username and password for access to the database\n    DriverManager.getConnection(\"jdbc:mysql://localhost:3306/salventri\",\"root\",\"password\");\n    //create the statement that will be used\n    Statement stmt=conn.createStatement();\n    //executes the statement\n    ResultSet rs = stmt.executeQuery(getCat); \n\n    int user = Integer.parseInt(txtUsername.getText());\n    String pwd = new String(txtPassword.getPassword());\n    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n    SecretKeySpec key = new SecretKeySpec(keyBytes, \"DES\"); \n    IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n    cipher = Cipher.getInstance(\"DES/CTR/NoPadding\", \"BC\");\n\n\n\n    while (rs.next())\n    {\n        int uname = rs.getInt(\"username\");\n        //Username is the coloumn name in the database table \n        String password = rs.getString(\"password\");\n        byte [] pass = password.getBytes();\n        cipherText = pass;\n        cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);\n        byte[] plainText = new byte[cipher.getOutputSize(ctLength)];\n        int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);\n        ptLength += cipher.doFinal(plainText, ptLength);\n        String upassword = String.valueOf(ptLength);\n\n\n        if (user == uname) \n        {\n            JOptionPane.showMessageDialog(null, \"username  \" + uname + \" Password \" + cipherText + \"\\n password as string \" + password);\n            //...\n        }\n    }\n}\ncatch (Exception e)\n{\n    //exception handled\n    JOptionPane.showMessageDialog(null, e);\n}\n", "idx": 440}
{"project": "cipher", "commit_id": "Snippet18441050_1458.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/NoPadding\");\n", "idx": 441}
{"project": "cipher", "commit_id": "Snippet34634399_16623.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");", "idx": 442}
{"project": "cipher", "commit_id": "Snippet25139532_7491.java", "target": 0, "func": "package protect.my.password;\n\nimport java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport android.app.Activity;\n\npublic class AESHelper extends Activity{\n\n       public static String encrypt(String seed, String cleartext) throws Exception {\n               byte[] rawKey = getRawKey(seed.getBytes());\n               byte[] result = encrypt(rawKey, cleartext.getBytes());\n               return toHex(result);\n       }\n\n       public static String decrypt(String seed, String encrypted) throws Exception {\n               byte[] rawKey = getRawKey(seed.getBytes());\n               byte[] enc = toByte(encrypted);\n               byte[] result = decrypt(rawKey, enc);\n               return new String(result);\n       }\n\n       private static byte[] getRawKey(byte[] seed) throws Exception {\n               KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n               SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n               sr.setSeed(seed);\n           kgen.init(128, sr); // 192 and 256 bits may not be available\n           SecretKey skey = kgen.generateKey();\n           byte[] raw = skey.getEncoded();\n           return raw;\n       }\n\n\n       private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n           SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n               Cipher cipher = Cipher.getInstance(\"AES\");\n           cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n           byte[] encrypted = cipher.doFinal(clear);\n               return encrypted;\n       }\n\n       private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n           SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n               Cipher cipher = Cipher.getInstance(\"AES\");\n           cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n           byte[] decrypted = cipher.doFinal(encrypted);\n               return decrypted;\n       }\n\n       public static String toHex(String txt) {\n               return toHex(txt.getBytes());\n       }\n       public static String fromHex(String hex) {\n               return new String(toByte(hex));\n       }\n\n       public static byte[] toByte(String hexString) {\n               int len = hexString.length()/2;\n               byte[] result = new byte[len];\n               for (int i = 0; i < len; i++)\n                       result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n               return result;\n       }\n\n       public static String toHex(byte[] buf) {\n               if (buf == null)\n                       return \"\";\n               StringBuffer result = new StringBuffer(2*buf.length);\n               for (int i = 0; i < buf.length; i++) {\n                       appendHex(result, buf[i]);\n               }\n               return result.toString();\n       }\n       private final static String HEX = \"0123456789ABCDEF\";\n       private static void appendHex(StringBuffer sb, byte b) {\n               sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n       }\n\n\n}\n", "idx": 443}
{"project": "cipher", "commit_id": "Snippet47197753_29188.java", "target": 0, "func": "public class Seclib {\n\n\n      private static String algorithm = \"AES\";\n      private static Key key = null;\n      private static Cipher cipher = null;\n\n    public Seclib(){\n        key = KeyGenerator.getInstance(algorithm).generateKey();\n        cipher = Cipher.getInstance(algorithm);\n    }\n\n    public static String messageHash(String message) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        md.update(message.getBytes());\n        return md.digest(message.getBytes()).toString();\n    }\n\n    public static byte[] encryptMessage(String input) throws InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] inputBytes = input.getBytes();\n        return cipher.doFinal(inputBytes);\n    }   \n\n    private static String decrypt(byte[] encryptionBytes) throws InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] recoveredBytes = \n        cipher.doFinal(encryptionBytes);\n        String recovered = new String(recoveredBytes);\n        return recovered;\n    }   \n\n    public static String initializeSecurityParameters(Scanner reader, int securityArray[]){\n\n        int flagC = 0;\n        int flagI = 0;\n        int flagA = 0;\n\n        String securityArrayString = \"\";\n\n        String s;\n\n        while(flagC == 0){\n\n            System.out.println(\"Does this session require confidentiality? Y/N\");\n            System.out.println();\n            s = reader.next();\n            System.out.println();\n\n            if(s.equals(\"Y\") || s.equals(\"y\") || s.equals(\"N\") || s.equals(\"n\")){\n\n                if(s.equals(\"Y\") || s.equals(\"y\")){\n                    securityArray[0] = 1;\n                    flagC = 1;\n                }else{\n                    securityArray[0] = 0;\n                    flagC = 2;\n                }\n            }\n\n            if(flagC == 0){\n                System.out.println(\"Invalid entry, must be one of Y,y,N,n\");\n                System.out.println();\n            }\n        }\n\n        while(flagI == 0){\n\n            System.out.println(\"Does this session require integrity? Y/N\");\n            System.out.println();\n            s = reader.next();\n            System.out.println();\n\n            if(s.equals(\"Y\") || s.equals(\"y\") || s.equals(\"N\") || s.equals(\"n\")){\n                flagI = 1;\n                if(s.equals(\"Y\") || s.equals(\"y\")){\n                    securityArray[1] = 1;\n                    flagI = 1;\n                }else{\n                    securityArray[1] = 0;\n                    flagI = 2;\n                }\n            }\n\n            if(flagI == 0){\n                System.out.println(\"Invalid entry, must be one of Y,y,N,n\");\n                System.out.println();\n            }\n        }\n\n        while(flagA == 0){\n\n            System.out.println(\"Does this session require authentication? Y/N\");\n            System.out.println();\n            s = reader.next();\n            System.out.println();\n\n            if(s.equals(\"Y\") || s.equals(\"y\") || s.equals(\"N\") || s.equals(\"n\")){\n\n                if(s.equals(\"Y\") || s.equals(\"y\")){\n                    securityArray[2] = 1;\n                    flagA = 1;\n                }else{\n                    securityArray[2] = 0;\n                    flagA = 2;\n                }\n            }\n\n            if(flagA == 0){\n                System.out.println(\"Invalid entry, must be one of Y,y,N,n\");\n                System.out.println();\n            }\n        }\n\n        //create security string\n\n        for(int i = 0; i < 3; i++){\n            securityArrayString = securityArrayString + String.valueOf(securityArray[i]);\n        }\n\n        //Use security array values to create key, etc based on need\n\n        if(securityArray[0] == 1){\n            System.out.println(\"C operations needed\");\n        }\n\n        if(securityArray[1] == 1){\n            System.out.println(\"I operations needed\");\n        }\n\n        if(securityArray[2] == 1){\n            System.out.println(\"A operations needed\");\n        }       \n\n        return securityArrayString;\n    }\n\n\n\n\n\n\n\n}\n", "idx": 444}
{"project": "cipher", "commit_id": "Snippet44525943_26630.java", "target": 0, "func": "    public void aliceEncrypt(byte[] plaintext, byte[] sharedSecret) {\n\n    Cipher cipher;\n    byte[] encrypted = null;\n    try {\n        cipher = Cipher.getInstance(\"RC4\");\n        Key sk = new SecretKeySpec(sharedSecret, \"RC4\");\n        cipher.init(Cipher.ENCRYPT_MODE, sk);\n        encrypted = cipher.doFinal(plaintext);\n        CipherOutputStream cos = new CipherOutputStream(socket.getOutputStream(), cipher);\n        ObjectOutputStream oos = new ObjectOutputStream(cos);\n        oos.writeObject(encrypted);\n        oos.flush();\n\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException | IOException | InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    }\n}\n", "idx": 445}
{"project": "cipher", "commit_id": "Snippet44960261_27094.java", "target": 0, "func": "           try {                    \n                InputStream tis = getApplicationContext().getResources().openRawResource(R.raw.devdb_enc);\n                FileOutputStream fos = new FileOutputStream(new File(\"file_to_be_decrypted\"));\n\n                SecretKeySpec sks = new SecretKeySpec(\"MyPasswordDiff\".getBytes(), \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.DECRYPT_MODE, sks);\n                CipherInputStream cis = new CipherInputStream(tis, cipher);\n                int b;\n                byte[] d = new byte[8];\n                while ((b = cis.read(d)) != -1) {\n                    fos.write(d, 0, b);\n                }\n                fos.flush();\n                fos.close();\n                cis.close();\n                isDecryptSucsess = true;\n\n\n            } catch (NoSuchAlgorithmException e) {\n                Utils.showLogger(e);\n            } catch (NoSuchPaddingException e) {\n                Utils.showLogger(e);\n            } catch (InvalidKeyException e) {\n                Utils.showLogger(e);\n            } catch (IOException e) {\n                Utils.showLogger(e);\n            }catch (Exception e) {\n                Utils.showLogger(e);\n            }\n", "idx": 446}
{"project": "cipher", "commit_id": "Snippet44425914_26472.java", "target": 0, "func": "@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        expListView = (ExpandableListView) findViewById(R.id.rules);\n\n        prepareListData();\n\n        listAdapter = new ExpandableListAdapter(MainActivity.this, listDataHeader, listDataChild);\n\n        expListView.setAdapter(listAdapter);\n\n        expListView.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {\n            @Override\n            public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {\n                TextView az = (TextView) v.findViewById(R.id.l_child);\n                String link = az.getText().toString() + \".pdf\";\n                PATH = Environment.getExternalStorageDirectory() + \"/BKI Rules/\" + link;\n                File filecheck = new File(PATH);\n                if (filecheck.exists()) {\n\n                    fileList.add(filecheck);\n                    Intent intent = new Intent(getApplicationContext(), PDFreader.class);\n                    intent.putExtra(\"nameOfFile\",link);\n                    intent.putExtra(\"position\", PATH);\n                    startActivity(intent);\n\n                } else {\n                    String link1 = link.replace(\" \", \"%20\");\n                    String linkdownload = myHTTPUrl + link1;\n\n                    new DownloadFileFromURL().execute(linkdownload);\n\n        });\n    }\n\n    class DownloadFileFromURL extends AsyncTask<String, String, String> {\n\n        @Override\n        protected String doInBackground(String... f_url) {\n            try {\n                URL url = new URL(f_url[0]);\n                String link = url.toString();\n                URLConnection conection = url.openConnection();\n                conection.connect();\n\n                try {\n                    String nameOfFile = URLUtil.guessFileName(link, null, MimeTypeMap.getFileExtensionFromUrl(link));\n\n                    // download the file\n                    InputStream input = new BufferedInputStream(url.openStream(), 8192);\n\n                    // Output stream\n                    FileOutputStream output = new FileOutputStream(Environment.getExternalStorageDirectory() + \"/\"\n                            + \"BKI Rules\" + \"/\" + nameOfFile);\n\n                    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n\n                    Cipher cipher = Cipher.getInstance(\"AES\");\n                    cipher.init(Cipher.ENCRYPT_MODE, sks);\n\n                    CipherOutputStream cos = new CipherOutputStream(output, cipher);\n\n                    int b;\n                    byte[] d = new byte[8];\n                    while ((b = input.read(d)) != -1) {\n                        cos.write(d, 0, b);\n                    }\n                    // Flush and close streams.\n                    cos.flush();\n                    cos.close();\n                    input.close();\n\n                }catch (InvalidKeyException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                } catch (NoSuchAlgorithmException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                } catch (NoSuchPaddingException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n\n            } catch (Exception e) {\n                Log.e(\"Error: \", e.getMessage());\n            }\n            return null;\n        }\n    }", "idx": 447}
{"project": "cipher", "commit_id": "Snippet4817515_31322.java", "target": 0, "func": "       // Get the KeyGenerator\n\n       KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n       kgen.init(128); // 192 and 256 bits may not be available\n\n\n       // Generate the secret key specs.\n       SecretKey skey = kgen.generateKey();\n       byte[] raw = skey.getEncoded();\n\n       SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n\n       // Instantiate the cipher\n\n       Cipher cipher = Cipher.getInstance(\"AES\");\n\n       cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n       byte[] encrypted =\n         cipher.doFinal((args.length == 0 ?\n          \"This is just an example\" : args[0]).getBytes());\n       System.out.println(\"encrypted string: \" + asHex(encrypted));\n\n       cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n       byte[] original =\n         cipher.doFinal(encrypted);\n       String originalString = new String(original);\n       System.out.println(\"Original string: \" +\n         originalString + \" \" + asHex(original));\n", "idx": 448}
{"project": "cipher", "commit_id": "Snippet21485046_3980.java", "target": 0, "func": "//ENCRYPTED  as  jAOtTv22BfkTkVrhTN/RHQ==   \npublic String encrypt(String username,String code) throws Exception {\n     try {\n    byte[] keyData = (username).getBytes();\n    SecretKeySpec secretKeySpec = new SecretKeySpec(keyData, \"Blowfish\");\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n    byte[] hasil1 = cipher.doFinal(username.getBytes());\nbyte[] hasil2 = cipher.doFinal(code.getBytes());\nreturn new BASE64Encoder().encode(hasil1);\n    } catch (Exception e) { System.out.println(e);\n    return null; }\n}\n\n//DECRYPT  --doug@gmail.com\npublic String decrypt(String email,String code) throws Exception {\n    try {\n    byte[] keyData = (code).getBytes();\n    SecretKeySpec secretKeySpec = new SecretKeySpec(keyData, \"Blowfish\");\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n    cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n    byte[] hasil = cipher.doFinal(new BASE64Decoder().decodeBuffer(email));\n    return new String(hasil);\n    } catch (Exception e) {  System.out.println(\"exaception =\"+e);\n    return null; }\n}\n", "idx": 449}
{"project": "cipher", "commit_id": "Snippet8767593_33486.java", "target": 0, "func": "package com.thebodgeitstore.util;\n\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.regex.Pattern;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\n\n\n   public class AES {\n       private SecretKeySpec key;\n       private Cipher cipher;\n       private int size = 128;\n\n       public AES() throws NoSuchAlgorithmException, NoSuchPaddingException{\n           KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n           kgen.init(size); // 192 and 256 bits may not be available\n           SecretKey skey = kgen.generateKey();\n           byte[] raw = skey.getEncoded();\n           key = new SecretKeySpec(raw, \"AES\");\n           cipher = Cipher.getInstance(\"AES\");\n       }\n\n       public void setKey(String keyText){\n           byte[] bText = new byte[size];\n           bText = keyText.getBytes();\n           key = new SecretKeySpec(bText, \"AES\");\n       }\n\n       public String encrypt(String message) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException{\n           cipher.init(Cipher.ENCRYPT_MODE, key);\n           byte[] encrypted = cipher.doFinal(message.getBytes());\n           return byteArrayToHexString(encrypted);\n       }\n       public String decrypt(String hexCiphertext) throws IllegalBlockSizeException, BadPaddingException, InvalidKeyException{\n           cipher.init(Cipher.DECRYPT_MODE, key);\n           byte[] decrypted = cipher.doFinal(hexStringToByteArray(hexCiphertext));\n           return byteArrayToHexString(decrypted);\n       }\n\n       private static String byteArrayToHexString( byte [] raw ) {\n            String hex = \"0x\";\n            String s = new String(raw);\n            for(int x = 0; x < s.length(); x++){\n                char[] t = s.substring(x, x + 1).toCharArray();\n                hex += Integer.toHexString((int) t[0]).toUpperCase();\n            }\n            return hex;\n       }\n\n       private static byte[] hexStringToByteArray(String hex) {\n            Pattern replace = Pattern.compile(\"^0x\");\n            String s = replace.matcher(hex).replaceAll(\"\");\n\n            byte[] b = new byte[s.length() / 2];\n            for (int i = 0; i < b.length; i++){\n              int index = i * 2;\n              int v = Integer.parseInt(s.substring(index, index + 2), 16);\n              b[i] = (byte)v;\n            }\n            return b;\n       }\n\n\n   }\n", "idx": 450}
{"project": "cipher", "commit_id": "Snippet21250330_3778.java", "target": 0, "func": "public void setkey() throws Exception {\n    byte[] key1 = new String(\"abcd\").getBytes(\"UTF-8\"); // some logic will replace \"abcd\"\n     MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-1\");\n     key1 = messageDigest.digest(key1);\n     key1 = Arrays.copyOf(key1,16);\n     key = key1;\n     //this key must be the same when encrypting and decrypting, right?\n}\n\n@Override\npublic String encryptField(Myclass myClass) throws Exception {\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n    String encryptedField = Base64.encodeBase64String(cipher.doFinal(myClass.myField.getBytes(\"UTF-8\")));\n    myClass.setMyField(encryptedField);\n    save(myClass);\n\n    return encryptedField;\n    //this looks OK, and gives me 24 character string.\n}\n\n\n@Override\npublic String decryptVoucher(Myclass myClass) throws Exception {\n\n    String skey = key.toString();\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n    byte[] decryptedField = cipher.doFinal(Base64.decodeBase64(yClass.myField.getBytes(\"UTF-8\")));\n    // decryptedField.toString() is not as same as original data...\n    return decryptedField.toString();\n}\n", "idx": 451}
{"project": "cipher", "commit_id": "Snippet31159573_13312.java", "target": 0, "func": "byte[] dataBytes = new byte []{(byte)0xf3,(byte)0x8b,(byte)0x0c,(byte)0xb3,(byte)0xa3,(byte)0x26,(byte)0x12,(byte)0x23,(byte)0xe0,(byte)0xe0,(byte)0x9f,(byte)0x1f,(byte)0x28,(byte)0x01,(byte)0x28,(byte)0x35};\nSecretKeySpec secretKeySpec = new SecretKeySpec(\"keykeykeykeykey1\".getBytes(\"UTF-8\"), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\nbyte[] decryptedData = cipher.doFinal(dataBytes); //this line throws exception\n", "idx": 452}
{"project": "cipher", "commit_id": "Snippet35182131_17113.java", "target": 0, "func": "import java.io.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\n\npublic class Decrypt {\n\n    public static void main(String[] args) {\n\n        try {\n            FileInputStream fisKey = new FileInputStream(\"..\\\\KEY\");\n            byte[] arrayKey = new byte[fisKey.available()];\n            fisKey.read(arrayKey);\n            SecretKey key = new SecretKeySpec(arrayKey, \"DES\");\n\n            Cipher decrypt = Cipher.getInstance(\"DES\");\n            decrypt.init(Cipher.DECRYPT_MODE, key);\n\n            FileInputStream fis = new FileInputStream(\"..\\\\FileCrypted.txt\");\n            byte[] encText = new byte[16];\n            int bytesReads;\n            while ((bytesReads = fis.read(encText)) != -1) {\n                fis.read(decrypt.doFinal(encText), 0, bytesReads);\n            }\n            fis.close();\n            System.out.println(new String(encText));\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 453}
{"project": "cipher", "commit_id": "Snippet28793353_10933.java", "target": 0, "func": "public void encrypt(Cipher c0) throws IllegalBlockSizeException, IOException{\n    /*\n     * Creates unique AES key for encrypting the Object\n     */\n    KeyGenerator keyGen = null;\n    try {\n        keyGen = KeyGenerator.getInstance(\"AES\");\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    keyGen.init(256);\n    keyCache = keyGen.generateKey();\n\n    /*\n     * Creating AES Cipher for encryption\n     */\n    Cipher c1 = null;\n    try {\n        c1 = Cipher.getInstance(\"AES\");\n        c1.init(Cipher.ENCRYPT_MODE, keyCache);\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    /*\n     * Encrypts Object\n     */\n    stack = new SealedObject(stackCache, c1);\n    /*\n     * Encrypts AES key with a Cipher given as argument (intended to be a public RSA key initialized Cipher)\n     */\n    key = new SealedObject(keyCache, c0);\n}\n", "idx": 454}
{"project": "cipher", "commit_id": "Snippet1638971_29948.java", "target": 0, "func": "byte[] key = \"1234567891123456\".getBytes();\nCipher c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\nSecretKeySpec k =  new SecretKeySpec(key, \"AES\");\nc.init(Cipher.ENCRYPT_MODE, k);\nbyte[] encryptedData = c.doFinal(\"message\".getBytes());\n", "idx": 455}
{"project": "cipher", "commit_id": "Snippet15158089_38265.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");", "idx": 456}
{"project": "cipher", "commit_id": "Snippet18521562_1573.java", "target": 0, "func": " public static String encrypt(String in) throws Exception {\n    String out = \" \";\n    // generate a key\n    KeyGenerator keygen = KeyGenerator.getInstance(\"DES\");\n    keygen.init(56);\n    byte[] key = keygen.generateKey().getEncoded();\n    SecretKeySpec skeySpec = new SecretKeySpec(key, \"DES\");\n\n    // build the initialization vector\n    SecureRandom random = new SecureRandom();\n    byte iv[] = new byte[8]; //generate random 8 byte IV. \n    random.nextBytes(iv);\n    IvParameterSpec ivspec = new IvParameterSpec(iv);\n    // initialize the cipher for encrypt mode\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivspec);\n\n    byte[] encrypted = cipher.doFinal(in.getBytes());\n\n    out = asHex(encrypted);\n\n    return out;\n}\n", "idx": 457}
{"project": "cipher", "commit_id": "Snippet858814_29770.java", "target": 0, "func": "public void mytestSimple(long code, String password) throws Exception \n       { SecretKey key       = new SecretKeySpec (password.getBytes(),\"DES\");\n         Cipher    ecipher   = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n         byte[]    plaintext = new byte[8];\n\n         for (int i=0; i<8; i++)\n             { plaintext[7-i] = (byte) (code & 0x00FF);\n                >>>= 8;\n             }\n\n         ecipher.init      (Cipher.ENCRYPT_MODE, key);\n         System.out.println(ecipher.getOutputSize(8));\n\n         byte[] encrypted = ecipher.doFinal(plaintext);\n         System.out.println(\"--\" + encrypted.length);\n\n         Cipher dcipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n         dcipher.init(Cipher.DECRYPT_MODE, key);\n\n         byte[] crypttext = dcipher.doFinal(encrypted);\n         long   decoded    = 0;\n\n         for (int i=0; i<8; i++)\n             { decoded <<= 8;\n               decoded  += crypttext[i] & 0x00FF;\n             }\n\n         System.out.println(decode + \"--\" + crypttext.length);\n       }\n", "idx": 458}
{"project": "cipher", "commit_id": "Snippet45651746_27720.java", "target": 0, "func": "public String encryptMsg(String message, SecretKey secret)\n            throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidParameterSpecException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {\n        Cipher cipher = null;\n        cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, secret);\n        byte[] cipherText = cipher.doFinal(message.getBytes(\"UTF-8\"));\n        return Base64.encodeToString(cipherText, Base64.NO_WRAP);\n    }\n\npublic String decryptMsg(String cipherText, SecretKey secret)\n        throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidParameterSpecException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException {\n    Cipher cipher = null;\n    cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, secret);\n    byte[] decode = Base64.decode(cipherText, Base64.NO_WRAP);\n    String decryptString = new String(cipher.doFinal(decode), \"UTF-8\");\n    return decryptString;\n}\n", "idx": 459}
{"project": "cipher", "commit_id": "Snippet6907822_32446.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\n\npublic class TripleDES \n{\n    SecretKey key;\n\n    TripleDES(byte [] rawkey) throws Exception\n    {\n        key = readKey(rawkey);\n    }\n\n    public SecretKey readKey(byte[] rawkey) throws Exception\n    {\n         DESedeKeySpec keyspec = new DESedeKeySpec(rawkey);\n         SecretKeyFactory keyfactory = SecretKeyFactory.getInstance(\"DESede\");\n         SecretKey key = keyfactory.generateSecret(keyspec);\n         return key;\n    }\n\n    public byte[] encrypt(byte[] plain ) throws Exception\n    {\n        Cipher cipher = Cipher.getInstance(\"DESede\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encrypted = cipher.doFinal(plain);\n        return encrypted;\n    }\n    public byte[] decrypt(byte[] cipher ) throws Exception\n    {\n        Cipher dcipher = Cipher.getInstance(\"DESede\");\n        dcipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decrypted = dcipher.doFinal(cipher);\n        return decrypted;\n    }  \n}\n", "idx": 460}
{"project": "cipher", "commit_id": "Snippet41811956_23795.java", "target": 0, "func": "encrypt_ciper = Cipher.getInstance(\"AES\");\ndecrypt_ciper =   Cipher.getInstance(\"AES\");\ntext=Base64.encodeToString(encrypt_ciper.doFinal(strToEncrypt.getBytes()),Base64.DEFAULT);\n", "idx": 461}
{"project": "cipher", "commit_id": "Snippet39392533_21299.java", "target": 0, "func": "public static void main(String args[]) throws Exception {\n    KeyGenerator kg = KeyGenerator.getInstance(\"DESede\");\n    Cipher c = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    PrivateKey key = getPrivateKey(\"path/DESedeRACE.key\");\n\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte input[] = \"Gufz74gXCm2UV3ux+D4/Bnp7Jop90EvfK3QCkt6ZhRmtKeRf9OxzNilY8Xcai1UUQ==\".getBytes();\n    byte encrypted[] = c.doFinal(input);\n    byte iv[] = c.getIV();\n    System.out.println(new String(iv));\n\n    IvParameterSpec dps = new IvParameterSpec(iv);\n    c.init(Cipher.DECRYPT_MODE, key, dps);\n    byte output[] = c.doFinal(encrypted);\n    System.out.println(new String(output));\n} \n", "idx": 462}
{"project": "cipher", "commit_id": "Snippet39083856_20964.java", "target": 0, "func": "// Here is the sample java code:\nString inputString =\"have a good day\"; \n\n   final Cipher encryptCipher = Cipher.getInstance(\"AES\");                          \n            encryptCipher.init(Cipher.ENCRYPT_MODE,   generateMySQLAESKey(\"default\", \"UTF-8\"));     \n\n\n            String encryptedText =new String(Hex.encodeHex(encryptCipher.doFinal(inputString.getBytes(\"UTF-8\"))));\n\n    Deflater deflater = new Deflater();\n    deflater.setInput(encryptedText );\n    ByteArrayOutputStream outputStream = new             ByteArrayOutputStream(data.length);  \n    deflater.finish();\n    byte[] buffer = new byte[1024];\n    while (!deflater.finished()) {\n        int count = deflater.deflate(buffer); // returns the generated\n                                                // code... index\n        outputStream.write(buffer, 0, count);\n    }\n    outputStream.close();\n    byte[] output = outputStream.toByteArray();\n\n    return Base64.encodeBase64String(output);\n\n\n //I want it to match mysql query like:\n\nselect TO_BASE64(COMPRESS(HEX(AES_ENCRYPT(\"have a good day\",default))) from dual;\n", "idx": 463}
{"project": "cipher", "commit_id": "Snippet29354133_11386.java", "target": 0, "func": "package com.anoncrypt.services;\n\nimport java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class SymAES\n{\n    private static final String ALGORITHM = \"AES\";\n    private static byte[] keyValue= new byte[] { 'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };\n\n     public  String encode(String valueToEnc) throws Exception {\n         System.out.println(\"The Key byte value\"+keyValue );\n\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encValue = c.doFinal(valueToEnc.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encValue);\n        return encryptedValue;\n    }\n\n    public  String decode(String encryptedValue) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n\n    private static Key generateKey() throws Exception {\n        //System.out.println(\"passs value\"+pass);\n\n        System.out.println(\"The Key byte value instde genkey\"+keyValue );\n        Key key = new SecretKeySpec(keyValue, ALGORITHM);\n        return key;\n    }\n\n    public  void start(String passcode)throws Exception\n    {\n        keyValue = passcode.getBytes();\n        System.out.println(\"passcode\"+passcode);    \n        System.out.println(\"The Key byte value inside start\"+keyValue );\n    }\n}\n", "idx": 464}
{"project": "cipher", "commit_id": "Snippet42837573_24924.java", "target": 0, "func": " for encryption\n\n{\n\n// create a cipher using a key to initialize it\nCipher cipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\ncipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n// perform the actual encryption\nbyte[] ciphertext = cipher.doFinal(text);\n\nreturn ciphertext;\n}\n\n   for decryption \n {\n// create a cipher using a key to initialize it\nCipher cipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\ncipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n// perform the decryption\nbyte[] decryptedText = cipher.doFinal(text);\n\nreturn decryptedText;\n}\n", "idx": 465}
{"project": "cipher", "commit_id": "Snippet13612902_37137.java", "target": 0, "func": "import java.security.spec.KeySpec;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport org.apache.commons.codec.binary.Base64;\n\npublic class TrippleDes {\n\n    private static final String UNICODE_FORMAT = \"UTF8\";\n    public static final String DESEDE_ENCRYPTION_SCHEME = \"DESede\";\n    private KeySpec ks;\n    private SecretKeyFactory skf;\n    private Cipher cipher;\n    byte[] arrayBytes;\n    private String myEncryptionKey;\n    private String myEncryptionScheme;\n    SecretKey key;\n\n    public TrippleDes() throws Exception {\n        myEncryptionKey = \"ThisIsSpartaThisIsSparta\";\n        myEncryptionScheme = DESEDE_ENCRYPTION_SCHEME;\n        arrayBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n        ks = new DESedeKeySpec(arrayBytes);\n        skf = SecretKeyFactory.getInstance(myEncryptionScheme);\n        cipher = Cipher.getInstance(myEncryptionScheme);\n        key = skf.generateSecret(ks);\n    }\n\n\n    public String encrypt(String unencryptedString) {\n        String encryptedString = null;\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);\n            byte[] encryptedText = cipher.doFinal(plainText);\n            encryptedString = new String(Base64.encodeBase64(encryptedText));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return encryptedString;\n    }\n\n\n    public String decrypt(String encryptedString) {\n        String decryptedText=null;\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] encryptedText = Base64.decodeBase64(encryptedString);\n            byte[] plainText = cipher.doFinal(encryptedText);\n            decryptedText= new String(plainText);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return decryptedText;\n    }\n\n\n    public static void main(String args []) throws Exception\n    {\n        TrippleDes td= new TrippleDes();\n\n        String target=\"imparator\";\n        String encrypted=td.encrypt(target);\n        String decrypted=td.decrypt(encrypted);\n\n        System.out.println(\"String To Encrypt: \"+ target);\n        System.out.println(\"Encrypted String:\" + encrypted);\n        System.out.println(\"Decrypted String:\" + decrypted);\n\n    }\n\n}\n", "idx": 466}
{"project": "cipher", "commit_id": "Snippet41156520_23121.java", "target": 0, "func": "public static void main(String[] args) {\n       String key = \"1234567890ABCDEF\";\n        try {\n            byte[] encrypt = encrypt(\"hello word\",key);\n            System.out.println(new String(encrypt));\n            String decrypt = decrypt(encrypt, key);\n            System.out.println(decrypt);\n        } catch (Exception ex) {\n\n        }\n\n    }\n\n   public static byte[] encrypt(String message, String key1) throws Exception {\n\n        SecretKeySpec key = new SecretKeySpec(key1.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        return cipher.doFinal(message.getBytes());\n    }\n\n    public static String decrypt(byte[] message, String key1) throws Exception {\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n        SecretKeySpec key = new SecretKeySpec(key1.getBytes(), \"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decryptedByte = cipher.doFinal(message);\n        String decryptedText = new String(decryptedByte);\n        return decryptedText;\n    }\n", "idx": 467}
{"project": "cipher", "commit_id": "Snippet32932928_14954.java", "target": 0, "func": "private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {                                           \n        try\n        {\n            Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n            input = txtPlain.getText().getBytes();\n            SecretKeySpec key = new SecretKeySpec(keyBytes, \"DES\"); \n            IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n            cipher = Cipher.getInstance(\"DES/CTR/NoPadding\", \"BC\");\n            cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);\n            cipherText = new byte[cipher.getOutputSize(input.length)];\n            ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n            ctLength += cipher.doFinal(cipherText, ctLength);\n            txtEncrypt.setText(new String(cipherText));\n            System.out.println(\"cipher: \" + new String(cipherText));\n        }\n        catch(Exception e)\n        {\n            JOptionPane.showMessageDialog(null, e);\n        }\n    } \n", "idx": 468}
{"project": "cipher", "commit_id": "Snippet21655286_4103.java", "target": 0, "func": "// Java\n\nbyte[] rawKey = \"deadbeefdeadbeef\".getBytes(\"us-ascii\");\nSecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\nCipher cip = Cipher.getInstance(\"AES/ECB/NoPadding\");\ncip.init(Cipher.DECRYPT_MODE, skeySpec);\nbyte[] plaintext = cip.doFinal(ciphertext, 0, ciphertext.length);\n", "idx": 469}
{"project": "cipher", "commit_id": "Snippet1401193_29949.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Encryption\n{\n\n  private static byte[] sharedkey = {\n    0x01, 0x02, 0x03, 0x05, 0x07, 0x0B, 0x0D, 0x11, \n    0x12, 0x11, 0x0D, 0x0B, 0x07, 0x02, 0x04, 0x08, \n    0x01, 0x02, 0x03, 0x05, 0x07, 0x0B, 0x0D, 0x11\n  };\n\n  private static byte[] sharedvector = {\n    0x01, 0x02, 0x03, 0x05, 0x07, 0x0B, 0x0D, 0x11\n  };\n\n  public static void main(String... argv)\n    throws Exception\n  {\n    String plaintext = \"userNameHere:passwordHere\";\n    String ciphertext = encrypt(plaintext);\n    System.out.println(ciphertext);\n    System.out.println(decrypt(ciphertext));\n  }\n\n  public static String encrypt(String plaintext)\n    throws Exception\n  {\n    Cipher c = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(sharedkey, \"DESede\"), new IvParameterSpec(sharedvector));\n    byte[] encrypted = c.doFinal(plaintext.getBytes(\"UTF-8\"));\n    return Base64.encode(encrypted);\n  }\n\n  public static String decrypt(String ciphertext)\n    throws Exception\n  {\n    Cipher c = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(sharedkey, \"DESede\"), new IvParameterSpec(sharedvector));\n    byte[] decrypted = c.doFinal(Base64.decode(ciphertext));\n    return new String(decrypted, \"UTF-8\");\n  }\n\n}\n", "idx": 470}
{"project": "cipher", "commit_id": "Snippet18863322_1780.java", "target": 0, "func": " SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n Cipher cipher = Cipher.getInstance(\"AES\");\n cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n decrypted = cipher.doFinal(encryptedData);\n", "idx": 471}
{"project": "cipher", "commit_id": "Snippet22085107_4511.java", "target": 0, "func": "  val secretKey = new SecretKeySpec(\"some key\".getBytes(\"UTF-8\"), \"DES\")\n  val encipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n  encipher.init(Cipher.ENCRYPT_MODE, secretKey)\n  val encrypted = encipher.doFinal(bytes)\n\n  println(\"BYTES:\" + bytes)\n  println(\"ENCRYPTED!!!!!!: \" + encrypted)\n  println(toString(encrypted))\n", "idx": 472}
{"project": "cipher", "commit_id": "Snippet4526612_31148.java", "target": 0, "func": "public void initCiphers(char password[]) {\n\nPBEKeySpec pbeKeySpec;\nPBEParameterSpec pbeParamSpec;\nSecretKeyFactory keyFac;\n\nbyte[] salt = {\n   (byte)0xc7, (byte)0x73, (byte)0x21, (byte)0x8c,\n   (byte)0x7e, (byte)0xc8, (byte)0xee, (byte)0x99\n};\nint count = 20;\npbeParamSpec = new PBEParameterSpec(salt, count);          \npbeKeySpec = new PBEKeySpec(password);\ntry {\n    keyFac = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n    encryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    decryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");    \n    encryptCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n    decryptCipher.init(Cipher.DECRYPT_MODE, pbeKey, pbeParamSpec);       \n} catch (Exception e) { \n    Log.v(\"tag\", e.toString()); \n}\n", "idx": 473}
{"project": "cipher", "commit_id": "Snippet11914775_35626.java", "target": 0, "func": "byte[] key = //\nbyte[] encryptedData = //\n\nCipher c = Cipher.getInstance(\"AES\");\nSecretKeySpec k =\n  new SecretKeySpec(key, \"AES\");\nc.init(Cipher.DECRYPT_MODE, k);\nbyte[] data = c.doFinal(encryptedData);\n", "idx": 474}
{"project": "cipher", "commit_id": "Snippet9862394_34299.java", "target": 0, "func": "public byte[] crypt(byte[] toCrypt) throws Exception {\n    byte[] key = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    System.arraycopy(this.passphrase.getBytes(), 0, key, 0, ((this.passphrase.getBytes().length < 16) ? this.passphrase.getBytes().length : 16));\n    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(toCrypt);\n    return encrypted;\n}\n", "idx": 475}
{"project": "cipher", "commit_id": "Snippet6995191_32514.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n", "idx": 476}
{"project": "cipher", "commit_id": "Snippet17573542_740.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n", "idx": 477}
{"project": "cipher", "commit_id": "Snippet4490169_31138.java", "target": 0, "func": "KeySpec ks = new DESKeySpec(\"key12345\".getBytes(\"UTF-8\"));\nSecretKey key = SecretKeyFactory.getInstance(\"DES\").generateSecret(ks);\n\nIvParameterSpec iv = new IvParameterSpec(\n        Hex.decodeHex(\"1234567890ABCDEF\".toCharArray()));\n\nCipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\ncipher.init(Cipher.DECRYPT_MODE, key, iv);\n\nbyte[] decoded = cipher.doFinal(Base64.decodeBase64(\"B3xogi/Qfsc=\"));\n\nSystem.out.println(\"Decoded: \" + new String(decoded, \"UTF-8\"));\n", "idx": 478}
{"project": "cipher", "commit_id": "Snippet32018672_14066.java", "target": 0, "func": "public class CryptUtil {\n    public static final String DEFAULT_KEY = \"0123456789\";\n\n    private static CryptUtil instance;\n\n    private String chiperKey;\n\n    private CryptUtil(String chiperKey) {\n        this.chiperKey = chiperKey;\n    }\n\n    public static CryptUtil getInstance() {\n        if (null == instance) {\n            instance = new CryptUtil(DEFAULT_KEY);\n        }\n\n        return instance;\n    }\n\n    public static CryptUtil getInstance(String cipherkey) {\n        instance = new CryptUtil(cipherkey);\n        return instance;\n    }\n\n    public String aesEncrypt(String plainText) {\n            byte[] keyBytes = Arrays.copyOf(this.chiperKey.getBytes(\"ASCII\"), 16);\n\n            SecretKey key = new SecretKeySpec(keyBytes, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n\n            byte[] cleartext = plainText.getBytes(\"UTF-8\");\n            byte[] ciphertextBytes = cipher.doFinal(cleartext);\n            final char[] encodeHex = Hex.encodeHex(ciphertextBytes);\n\n            return new String(encodeHex);\n\n        return null;\n    }\n\n    public static void main(String[] args) {\n\n        CryptUtil cryptUtil = CryptUtil.getInstance();\n        System.out.println(cryptUtil.aesEncrypt(\"lun01\"));\n    }\n}\n", "idx": 479}
{"project": "cipher", "commit_id": "Snippet33999427_16064.java", "target": 0, "func": "public class Encryption {\n\npublic static int MAX_KEY_LENGTH = DESedeKeySpec.DES_EDE_KEY_LEN;\nprivate static String ENCRYPTION_KEY_TYPE = \"DESede\";\nprivate static String ENCRYPTION_ALGORITHM = \"DESede/ECB/NoPadding\";\nprivate final SecretKeySpec keySpec; \n\npublic Encryption(String passphrase) {\n        byte[] key;\n    try {\n        // get bytes representation of the password\n        key = passphrase.getBytes(\"UTF8\");\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalArgumentException(e);\n    }\n\n    key = padKeyToLength(key, MAX_KEY_LENGTH);\n    keySpec = new SecretKeySpec(key, ENCRYPTION_KEY_TYPE);\n}\n\n\nprivate byte[] padKeyToLength(byte[] key, int len) {\n    byte[] newKey = new byte[len];\n    System.arraycopy(key, 0, newKey, 0, Math.min(key.length, len));\n    return newKey;\n}\n\n// standard stuff\npublic byte[] encrypt(byte[] unencrypted) throws GeneralSecurityException {\n    return doCipher(unencrypted, Cipher.ENCRYPT_MODE);\n}\n\npublic byte[] decrypt(byte[] encrypted) throws GeneralSecurityException {\n    return doCipher(encrypted, Cipher.DECRYPT_MODE);\n}\n\nprivate byte[] doCipher(byte[] original, int mode) throws GeneralSecurityException {\n    Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);\n    int bs = cipher.getBlockSize();\n    byte[] padded = new byte[original.length + bs - original.length % bs];\n    System.arraycopy(original, 0, padded, 0, original.length);\n    cipher.init(mode, keySpec);\n    return cipher.doFinal(padded);\n}\n", "idx": 480}
{"project": "cipher", "commit_id": "Snippet13865540_37317.java", "target": 0, "func": "public class Encryption {\n\n    public String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n    private byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n\n    public String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public byte[] toByte(String hexString) {\n        int len = hexString.length() / 2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                    16).byteValue();\n        return result;\n    }\n\n    public String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2 * buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    private void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n    }\n\n}\n", "idx": 481}
{"project": "cipher", "commit_id": "Snippet37660429_19620.java", "target": 0, "func": "   import javax.xml.bind.DatatypeConverter;\n   public static boolean encrypt(byte[] text){\n\n    Boolean yorn = false;\n    try{\n        myDesKey = KeyGenerator.getInstance(\"DES\").generateKey();\n\n        //myDeskKey = myDesKey.toString();\n        Cipher desCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n\n//I felt it would be better seeing the secret key as \"woatDnBJLAg=\"  instead of  \"com.sun.crypto.provider.DESKey@18765\"\n\n        if (myDesKey != null) {\n           stringKey = DatatypeConverter.printBase64Binary(myDesKey.getEncoded());\n\n            System.out.println(\"actual secret_key:\" + myDesKey);\n\n            byte[] encodedKey = DatatypeConverter.parseBase64Binary(stringKey);\n\n            myDesKey = new SecretKeySpec(encodedKey, 0, encodedKey.length,\n                    \"DES\");\n            System.out.println(\"after encode & decode secret_key:\"\n                    + DatatypeConverter.printBase64Binary(myDesKey.getEncoded()));\n            }\n        textEncrypted = desCipher.doFinal(text);\n\n    yorn = true;\n    JTextArea textArea = new JTextArea(2,50);\n    textArea.setText(\"Your encryption key is:  \" +  stringKey + \" . Ensure you store it in a safe place\" );// + DatatypeConverter.printBase64Binary(myDesKey.getEncoded()));\n    textArea.setEditable(false);\n    JOptionPane.showMessageDialog(null, new JScrollPane(textArea), \"RESULT\", JOptionPane.INFORMATION_MESSAGE);\n\n\n    }catch(Exception e)\n    {\n        System.out.println(\"There has been an error encrypting the file\");\n        yorn = false;\n    }\n        return yorn;\n", "idx": 482}
{"project": "cipher", "commit_id": "Snippet30853043_12983.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 483}
{"project": "cipher", "commit_id": "Snippet37660602_19623.java", "target": 0, "func": "Cipher.getInstance(\"DES/ECB/PKCS5Padding\")", "idx": 484}
{"project": "cipher", "commit_id": "Snippet19610358_2335.java", "target": 0, "func": "public static void main(String[] args) {\n\n    SecretKey k1 = generateDESkey();\n    SecretKey k2 = generateDESkey();\n\n    String firstEncryption = desEncryption(\"plaintext\", k1);\n    String decryption = desDecryption(firstEncryption, k2);\n    String secondEncryption = desEncryption(decryption, k1);\n\n}\n\npublic static SecretKey generateDESkey() {\n    KeyGenerator keyGen = null;\n    try {\n        keyGen = KeyGenerator.getInstance(\"DES\");\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    }\n    keyGen.init(56); // key length 56\n    SecretKey secretKey = keyGen.generateKey();\n    return secretKey;\n}\n\npublic static String desEncryption(String strToEncrypt, SecretKey desKey) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, desKey);\n        String encryptedString = Base64.encode(cipher.doFinal(strToEncrypt.getBytes()));\n        return encryptedString;\n\n\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchPaddingException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalBlockSizeException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    } catch (BadPaddingException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidKeyException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    }\n    return null;\n}\n\npublic static String desDecryption(String strToDecrypt, SecretKey desKey) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5PADDING\");\n        cipher.init(Cipher.DECRYPT_MODE, desKey);\n        String decryptedString = new String(cipher.doFinal(Base64.decode(strToDecrypt)));\n        return decryptedString;\n\n\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchPaddingException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidKeyException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalBlockSizeException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    } catch (BadPaddingException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    } catch (Base64DecodingException ex) {\n        Logger.getLogger(Test.class\n                .getName()).log(Level.SEVERE, null, ex);\n    }\n    return null;\n}\n", "idx": 485}
{"project": "cipher", "commit_id": "Snippet46828430_28872.java", "target": 0, "func": "//Convert bytes to AES SecertKey\nSecretKey originalKey = new SecretKeySpec(decryptedKey , 0, decryptedKey .length, \"AES\");\nCipher aesCipher = Cipher.getInstance(\"AES\");\naesCipher.init(Cipher.DECRYPT_MODE, originalKey);\nbyte[] bytePlainText = aesCipher.doFinal(byteCipherText);\nString plainText = new String(bytePlainText);`\n", "idx": 486}
{"project": "cipher", "commit_id": "Snippet33799494_15849.java", "target": 0, "func": "    String secretCodeString = \"Mk9m98IfEblmPfrpsawt7BmxObt98Jev\";\n    String Ds_Merchant_Order = \"1442772645\";\n    String Ds_MerchantParameters = \"eyJEU19NRVJDSEFOVF9BTU9VTlQiOiIxNDUiLCJEU19NRVJDSEFOVF9PUkRFUiI6IjE0NDI3NzI2NDUiLCJEU19NRVJDSEFOVF9NRVJDSEFOVENPREUiOiI5OTkwMDg4ODEiLCJEU19NRVJDSEFOVF9DVVJSRU5DWSI6Ijk3OCIsIkRTX01FUkNIQU5UX1RSQU5TQUNUSU9OVFlQRSI6IjAiLCJEU19NRVJDSEFOVF9URVJNSU5BTCI6Ijg3MSIsIkRTX01FUkNIQU5UX01FUkNIQU5UVVJMIjoiaHR0cHM6XC9cL2VqZW1wbG9cL2VqZW1wbG9fVVJMX05vdGlmLnBocCIsIkRTX01FUkNIQU5UX1VSTE9LIjoiaHR0cHM6XC9cL2VqZW1wbG9cL2VqZW1wbG9fVVJMX09LX0tPLnBocCIsIkRTX01FUkNIQU5UX1VSTEtPIjoiaHR0cHM6XC9cL2VqZW1wbG9cL2VqZW1wbG9fVVJMX09LX0tPLnBocCJ9\";\n\n    byte [] secretCode = decodeB64(secretCodeString.getBytes(\"UTF-8\"));\n    String secretKc = toHexadecimal(secretCode, secretCode.length);\n    byte [] Ds_Merchant_Order_encrypt3DES = encrypt_3DES(secretKc, Ds_Merchant_Order);\n    byte [] hash = mac256(Ds_MerchantParameters, Ds_Merchant_Order_encrypt3DES);\n    byte [] res = encodeB64UrlSafe(hash);\n    String Ds_Signature = new String(res, \"UTF-8\");\n    //Ds_Signature: hueCwD/cbvrCi+9IDY86WteMpXulIl0IDNXNlYgcZHM=\n\n\npublic byte [] encrypt_3DES(final String claveHex, final String datos) {\n        byte [] ciphertext = null;\n        try {\n            DESedeKeySpec desKeySpec = new DESedeKeySpec(toByteArray(claveHex));\n            SecretKey desKey = new SecretKeySpec(desKeySpec.getKey(), \"DESede\");\n            Cipher desCipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n            byte [] IV = {0, 0, 0, 0, 0, 0, 0, 0};\n\n            desCipher.init(Cipher.ENCRYPT_MODE, desKey, new IvParameterSpec(IV));\n\n            int numeroCerosNecesarios = 8 - (datos.length() % 8);\n            if (numeroCerosNecesarios == 8) {\n                numeroCerosNecesarios = 0;\n            }\n            ByteArrayOutputStream array = new ByteArrayOutputStream();\n            array.write(datos.getBytes(\"UTF-8\"), 0, datos.length());\n            for (int i = 0; i < numeroCerosNecesarios; i++) {\n                array.write(0);\n            }\n            byte [] cleartext = array.toByteArray();\n\n            ciphertext = desCipher.doFinal(cleartext);\n        } catch (Exception e) {\n            e.printStackTrace(System.err);\n        }\n        return ciphertext;\n    }\n", "idx": 487}
{"project": "cipher", "commit_id": "Snippet18254518_1288.java", "target": 0, "func": "try {\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"Blowfish\");\n        SecretKey secretKey = keyGenerator.generateKey();\n        Cipher cipher = Cipher.getInstance(\"Blowfish\"); \n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        String input = \"tester\";\n        byte encrypted[] = cipher.doFinal(input.getBytes());\n\n        // PRINT ENCRYPTED TEXT\n\n        System.out.println(new String(Base64.encodeBytes(encrypted))); \n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(JavaApplication1.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchPaddingException ex) {\n        Logger.getLogger(JavaApplication1.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidKeyException ex) {\n        Logger.getLogger(JavaApplication1.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalBlockSizeException ex) {\n        Logger.getLogger(JavaApplication1.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (BadPaddingException ex) {\n        Logger.getLogger(JavaApplication1.class.getName()).log(Level.SEVERE, null, ex);\n    }\n", "idx": 488}
{"project": "cipher", "commit_id": "Snippet6679734_31860.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\",\"BC\");\n", "idx": 489}
{"project": "cipher", "commit_id": "Snippet5763743_31780.java", "target": 0, "func": "KeyGenerator keyGen = KeyGenerator.getInstance(\"Blowfish\");\nCipher cipher = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\");\n", "idx": 490}
{"project": "cipher", "commit_id": "Snippet31013035_13195.java", "target": 0, "func": "KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\nkeyGenerator.init(128, new SecureRandom());\nSecretKey secretKey = keyGenerator.generateKey();\n\nCipher cipher = Cipher.getInstance(\"AES\");\n\nString plainText = \"This is supposed to be encrypted\";\nString plainKey = Base64.encodeToString(secretKey.getEncoded(), Base64.DEFAULT);\n\n//encrypt\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);\nbyte[] encryptedBytes = cipher.doFinal(plainText.getBytes());\nString encryptedText = Base64.encodeToString(encryptedBytes, Base64.DEFAULT);\n\n//decrypt\ncipher.init(Cipher.DECRYPT_MODE, secretKey);\nbyte[]decryptedBytes = cipher.doFinal(encryptedBytes);\nString decryptedText = Base64.encodeToString(decryptedBytes, Base64.DEFAULT);\n", "idx": 491}
{"project": "cipher", "commit_id": "Snippet35277808_17208.java", "target": 0, "func": "  static RSAPrivateKey decrypt(String keyDataStr, String ivHex, String password)\n    throws GeneralSecurityException\n  {\n    byte[] pw = password.getBytes(StandardCharsets.UTF_8);\n    byte[] iv = h2b(ivHex);\n    SecretKey secret = opensslKDF(pw, iv);\n    Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, secret, new IvParameterSpec(iv));\n    byte[] pkcs1 = cipher.doFinal(Base64.getMimeDecoder().decode(keyDataStr));\n    /* See note for definition of \"decodeRSAPrivatePKCS1\" */\n    RSAPrivateCrtKeySpec spec = decodeRSAPrivatePKCS1(pkcs1);\n    KeyFactory rsa = KeyFactory.getInstance(\"RSA\");\n    return (RSAPrivateKey) rsa.generatePrivate(spec);\n  }\n\n  private static SecretKey opensslKDF(byte[] pw, byte[] iv)\n    throws NoSuchAlgorithmException\n  {\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n    md5.update(pw);\n    md5.update(iv);\n    byte[] d0 = md5.digest();\n    md5.update(d0);\n    md5.update(pw);\n    md5.update(iv);\n    byte[] d1 = md5.digest();\n    byte[] key = new byte[24];\n    System.arraycopy(d0, 0, key, 0, 16);\n    System.arraycopy(d1, 0, key, 16, 8);\n    return new SecretKeySpec(key, \"DESede\");\n  }\n\n  private static byte[] h2b(CharSequence s)\n  {\n    int len = s.length();\n    byte[] b = new byte[len / 2];\n    for (int src = 0, dst = 0; src < len; ++dst) {\n      int hi = Character.digit(s.charAt(src++), 16);\n      int lo = Character.digit(s.charAt(src++), 16);\n      b[dst] = (byte) (hi << 4 | lo);\n    }\n    return b;\n  }\n", "idx": 492}
{"project": "cipher", "commit_id": "Snippet41756395_23721.java", "target": 0, "func": "cipher = Cipher.getInstance(\"Blowfish/CFB8/NOPADDING\");\n", "idx": 493}
{"project": "cipher", "commit_id": "Snippet27034508_9181.java", "target": 0, "func": "try{\n    String pass=request.getParameter(\"password\");\n    String plainData=pass,cipherText,decryptedText;\n\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\"); \n    keyGen.init(128); \n\n    SecretKey secretKey = keyGen.generateKey(); \n    Cipher aesCipher = Cipher.getInstance(\"AES\"); \n    aesCipher.init(Cipher.ENCRYPT_MODE,secretKey); \n\n    byte[] byteDataToEncrypt = plainData.getBytes(); \n    byte[] byteCipherText = aesCipher.doFinal(byteDataToEncrypt); \n\n    cipherText=new BASE64Encoder().encode(byteCipherText);\n\n    System.out.println(\"cipherText\"+cipherText);\n    ld=new LoginDao();\n\n    String encryptedpass=ld.validatepass(cipherText);\n    System.out.println();\n}\ncatch(Exception ex){\n\n}\n", "idx": 494}
{"project": "cipher", "commit_id": "Snippet1730313_30054.java", "target": 0, "func": "public class ZipTest {\n\n    public static void main(String [] args) throws Exception {\n        String password = \"password\";\n        write(password);\n        read(password);\n    }\n\n    private static void write(String password) throws Exception {\n        OutputStream target = new FileOutputStream(\"out.zip\");\n        target = new CipherOutputStream(target, createCipher(Cipher.ENCRYPT_MODE, password));\n        ZipOutputStream output = new ZipOutputStream(target);\n\n        ZipEntry e = new ZipEntry(\"filename\");\n        output.putNextEntry(e);\n        output.write(\"helloWorld\".getBytes());\n        output.closeEntry();\n\n        e = new ZipEntry(\"filename1\");\n        output.putNextEntry(e);\n        output.write(\"helloWorld1\".getBytes());\n        output.closeEntry();\n\n        output.finish();\n        output.flush();\n    }\n\n    private static Cipher createCipher(int mode, String password) throws Exception {\n        String alg = \"PBEWithSHA1AndDESede\"; //BouncyCastle has better algorithms\n        PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(alg);\n        SecretKey secretKey = keyFactory.generateSecret(keySpec);\n\n        Cipher cipher = Cipher.getInstance(\"PBEWithSHA1AndDESede\");\n        cipher.init(mode, secretKey, new PBEParameterSpec(\"saltsalt\".getBytes(), 2000));\n\n        return cipher;\n    }\n\n    private static void read(String password) throws Exception {\n        InputStream target = new FileInputStream(\"out.zip\");\n        target = new CipherInputStream(target, createCipher(Cipher.DECRYPT_MODE, password));\n        ZipInputStream input = new ZipInputStream(target);\n        ZipEntry entry = input.getNextEntry();\n        while (entry != null) {\n            System.out.println(\"Entry: \"+entry.getName());\n            System.out.println(\"Contents: \"+toString(input));\n            input.closeEntry();\n            entry = input.getNextEntry();\n        }\n    }\n\n    private static String toString(InputStream input) throws Exception {\n        byte [] data = new byte[1024];\n        StringBuilder result = new StringBuilder();\n\n        int bytesRead = input.read(data);\n        while (bytesRead != -1) {\n            result.append(new String(data, 0, bytesRead));\n            bytesRead = input.read(data);\n        }\n\n        return result.toString();\n    } \n}\n", "idx": 495}
{"project": "cipher", "commit_id": "Snippet35195386_17124.java", "target": 0, "func": "private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = \n            new byte[] { 'a', '/', '5', '0', '0', '2', '*', 'l', '+', 'O', '&','@', 'b', '~', '_', '$' };\n\n    //For encryption\n    public String encrypt(String Data) throws Exception {\n        String encryptedValue =\"\";\n        try{\n        SecretKeySpec key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, (java.security.Key) key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        encryptedValue = new BASE64Encoder().encode(encVal);\n            return encryptedValue;\n        }catch (Exception e) {\n            e.printStackTrace();\n        }\n        return encryptedValue;\n    }\n\n\n //Generate Secret Key\n    private static \n\n\n\n\n generateKey() throws Exception {\n        SecretKeySpec key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n    }\n", "idx": 496}
{"project": "cipher", "commit_id": "Snippet43872318_26002.java", "target": 0, "func": "public class Sifreleme {\n\n    public static void encrypt(){\n     try {\n            SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n\n            FileOutputStream fosKey = new FileOutputStream(\"..\\\\KEY\");\n            SecretKeyFactory keyfac = SecretKeyFactory.getInstance(\"DES\");\n            DESKeySpec keyspec = (DESKeySpec) keyfac.getKeySpec(key, DESKeySpec.class);\n            fosKey.write(keyspec.getKey());\n            fosKey.close();\n\n            Cipher crypt = Cipher.getInstance(\"DES\");\n            crypt.init(Cipher.ENCRYPT_MODE, key);\n\n            FileInputStream fis = new FileInputStream(\"C:\\\\Users\\\\akif\\\\Desktop\\\\zilsesi.mp3\");\n            FileOutputStream fos = new FileOutputStream(\"C:\\\\Users\\\\akif\\\\Desktop\\\\sifrelenenzilsesi.mp3\");\n            byte[] arrayBytes = new byte[8];\n            int bytesReads;\n            while ((bytesReads = fis.read(arrayBytes)) != -1) {\n                fos.write(crypt.doFinal(arrayBytes), 0, bytesReads);\n            }\n            fis.close();\n            fos.close();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n\n\n\npublic static void decrypt(){\n       try {\n                FileInputStream fisKey = new FileInputStream(\"..\\\\KEY\");\n                byte[] arrayKey = new byte[fisKey.available()];\n                fisKey.read(arrayKey);\n                SecretKey key = new SecretKeySpec(arrayKey, \"DES\");\n\n                Cipher decrypt = Cipher.getInstance(\"DES\");\n                decrypt.init(Cipher.DECRYPT_MODE, key);\n\n                FileInputStream fis = new FileInputStream(\"C:\\\\Users\\\\akif\\\\Desktop\\\\sifrelenenzilsesi.mp3\");\n                byte[] encText = new byte[16];\n                int bytesReads;\n                while ((bytesReads = fis.read(encText)) != -1) {\n                    fis.read(decrypt.doFinal(encText), 0, bytesReads);\n                }\n                fis.close();\n                System.out.println(new String(encText));\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        public static void main(String []args) throws IOException{\n        encrypt();\n        decrypt();\n        }\n", "idx": 497}
{"project": "cipher", "commit_id": "Snippet33826574_15906.java", "target": 0, "func": "private SecretKeySpec secretKey;\npublic void setKey() {\n    skey = \"mykey\";\n    MessageDigest sha = null;\n    try {\n        key = skey.getBytes(\"UTF-8\");\n        logger.debug(\"Key length ====> \" + key.length);\n        sha = MessageDigest.getInstance(\"SHA-512\");\n        key = sha.digest(key);\n        key = Arrays.copyOf(key, 16); // use only first 128 bit\n\n        secretKey = new SecretKeySpec(key, \"AES\");\n\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n    }\n}\npublic String decrypt(String strToDecrypt) {\n    Cipher cipher = null;\n    try {\n        cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n\n        cipher.init(Cipher.DECRYPT_MODE, this.secretKey);\n        setDecryptedString(new String(cipher.doFinal(Base64\n                .decodeBase64(strToDecrypt))));\n\n    } catch (Exception e) {\n        System.out.println(\"Error while decrypting: \" + e.toString());\n    }\n    return null;\n}\n", "idx": 498}
{"project": "cipher", "commit_id": "Snippet28438124_10583.java", "target": 0, "func": "KeySpec keySpec= new DESedeKeySpec(bytesKey);\nSecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(\"DESede\");\nSecretKey secretKey= secretKeyFactory.generateSecret(keySpec);\nCipher cipher = Cipher.getInstance(\"DESede\");\ncipher.init(modo, secretKey);\n", "idx": 499}
{"project": "cipher", "commit_id": "Snippet31666602_13775.java", "target": 0, "func": "import java.io.*;\nimport java.util.*;\nimport java.nio.file.*;\nimport java.nio.charset.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.security.*;\n\npublic class encrypt {\n    public static void encrypt() {\n        try {\n            String path = null;\n            String fileName;\n            KeyGenerator keyGenerator;\n            SecretKey secretKey = null;\n            Cipher DESCipher = null;\n            byte[] data;\n            String encryptedData;\n            File file = null, dataFile = null, keyFile = null;\n            Scanner scanner;\n            BufferedWriter bufferedWriter;\n\n            path = Paths.get(\"\").toAbsolutePath().toString();\n            keyGenerator = KeyGenerator.getInstance(\"DES\");\n            secretKey = keyGenerator.generateKey();\n            DESCipher = Cipher.getInstance(\"DES\");\n\n            if(null == secretKey || null == DESCipher) {\n                System.exit(1);\n            }\n\n            scanner = new Scanner(System.in);\n\n            System.out.print(\"File to encrypt: \");\n            fileName = scanner.nextLine();\n            file = new File(fileName);\n\n            while(!(file.exists() && !file.isDirectory())) {\n                System.out.println(\"Error. File was not found.\\n\");\n                System.out.print(\"File to encrypt: \");\n\n                fileName = scanner.nextLine();\n                file = new File(fileName);\n            }\n\n            data = Files.readAllBytes(Paths.get(fileName));\n\n            DESCipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            encryptedData = new String(DESCipher.doFinal(data));\n            encryptedData = Base64.getEncoder().encodeToString(\n                encryptedData.getBytes(Charset.forName(\"UTF-8\")));\n\n            dataFile = new File(path + \"/\" + fileName + \".data\");\n            keyFile = new File(path + \"/\" + fileName + \".key\");\n\n            /* Write content to file */\n        } catch (Exception e) {\n            /* Throw error */\n            System.exit(1);\n        }\n    }\n\n    public static void decrypt() {\n        try {\n            String path = null;\n            String dataFileName, keyFileName;\n            Scanner scanner = null;\n            Cipher DESCipher;\n            SecretKey secretKey;\n            File file = null;\n            byte[] decodedKey, decryptedBytes;\n            BufferedWriter bufferedWriter;\n\n            path = Paths.get(\"\").toAbsolutePath().toString();\n            scanner = new Scanner(System.in);\n\n            System.out.print(\"File to decrypt: \");\n            dataFileName = scanner.nextLine();\n            file = new File(dataFileName);\n\n            while(!(file.exists() && !file.isDirectory())) {\n                System.out.println(\"Error. File was not found.\\n\");\n                System.out.print(\"File to decrypt: \");\n\n                dataFileName = scanner.nextLine();\n                file = new File(dataFileName);\n            }\n\n            System.out.print(\"Key file for decrypt: \");\n            keyFileName = scanner.nextLine();\n            file = new File(keyFileName);\n\n            while(!(file.exists() && !file.isDirectory())) {\n                System.out.println(\"Error. File was not found.\\n\");\n                System.out.print(\"Key file for decrypt: \");\n\n                keyFileName = scanner.nextLine();\n                file = new File(keyFileName);\n            }\n\n            decodedKey = Base64.getDecoder().decode(\n                new String(Files.readAllBytes(\n                    Paths.get(keyFileName))));\n\n            secretKey = new SecretKeySpec(\n                decodedKey, 0, decodedKey.length, \"DES\");\n\n            DESCipher = Cipher.getInstance(\"DES\");\n            DESCipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n            decryptedBytes = DESCipher.doFinal(\n                Base64.getDecoder().decode(\n                    new String(Files.readAllBytes(\n                        Paths.get(dataFileName)))));\n\n            /* Write content to file */\n        } catch (Exception e) {\n            /* Throw error */\n            System.exit(1);\n        }\n    }\n\n    public static void main(String[] args) {\n        // Encrypt or decrypt?\n    }\n}\n", "idx": 500}
{"project": "cipher", "commit_id": "Snippet17012078_318.java", "target": 0, "func": " byte[] encryptedByteArray;\nCipher eCipher=Cipher.getInstance(\"AES\");\neCipher.init(Cipher.ENCRYPT_MODE,key );\nencryptedByteArray=eCipher.doFinal(clearByteArray);\n", "idx": 501}
{"project": "cipher", "commit_id": "Snippet19442207_2230.java", "target": 0, "func": "    public static void test2() throws Exception {\n\n    Security.addProvider(new SunJCE());\n    Security.addProvider(new IBMJCE());\n    String strKey = \"12345678\";\n    KeyGenerator generator = KeyGenerator.getInstance(\"DES\", \"SunJCE\");\n    // KeyGenerator generator = KeyGenerator.getInstance(\"DES\", \"IBMJCE\");\n    System.out.println(\"KeyGenerator provider:\" + generator.getProvider());\n    //\n    SecureRandom secureRandom = SecureRandom.getInstance(\"SHA1PRNG\");\n    secureRandom.setSeed(strKey.getBytes());\n    generator.init(secureRandom);\n    Key key = generator.generateKey();\n    Cipher cipher = Cipher.getInstance(\"DES\", \"SunJCE\");\n    // Cipher cipher = Cipher.getInstance(\"DES\", \"IBMJCE\");\n    System.out.println(\"Cipher provider:\" + cipher.getProvider());\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    String strTest = \"TESTtest123\";\n    byte[] byteTest = strTest.getBytes(\"UTF-8\");\n    byte[] byteEncry = cipher.doFinal(byteTest);\n    System.out.println(\"strTest:\" + strTest);\n    System.out.println(\"encode:\" + new BASE64Encoder().encode(byteEncry));\n\n\n}\n", "idx": 502}
{"project": "cipher", "commit_id": "Snippet25429001_7787.java", "target": 0, "func": "Cipher.getInstance(\"DESede/CBC/PKCS5Padding\"); // or \"AES\" instead of \"DESede\"\n", "idx": 503}
{"project": "cipher", "commit_id": "Snippet38501320_20462.java", "target": 0, "func": "private void executeDecryption() {\n    encryptMessageStr = messageEncryptTA.getText();\n    algorithmType = decryptAlgorithmTypeCB.getSelectionModel().getSelectedItem();\n    keyDecrypt = keyTF.getText();\n\n    if (!messageEncryptedTA.getText().isEmpty()) {\n\n        try {\n            //Using decryptText()\n            String textDecipher = decryptText(encryptedMessageStr, keyDecrypt);\n            messageEncryptedTA.setText(textDecipher);\n\n        } catch (Exception ex) {\n            MessageBox.display(\"Error!\", \"Could not decrypt message! Please try again later\");\n            //System.out.println(ex.getMessage());\n        }\n\n    } else {\n        MessageBox.display(\"Warning!\", \"Please make sure message field is not empty!\");\n    }\n}\n\npublic static String decryptText(String encryptedMessageStr, String secretKey) {\n    try {\n        Key k = new SecretKeySpec(Base64.getDecoder().decode(secretKey), \"AES\");\n        Cipher cipherAES = Cipher.getInstance(\"AES\");\n        cipherAES.init(Cipher.DECRYPT_MODE, k);\n\n        byte[] decodedValue = Base64.getDecoder().decode(encryptedMessageStr);\n        byte[] cipherTextBytes = cipherAES.doFinal(decodedValue);\n        String decryptedValue = new String(cipherTextBytes);\n        return decryptedValue;\n\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n\n    return \"Error\";\n\n}\n", "idx": 504}
{"project": "cipher", "commit_id": "Snippet7275414_32667.java", "target": 0, "func": "String stringKey = \"60380131061660211660380426804995\";\nString message = \"This is a secret message\";\ntry {\n    SecretKeySpec sks = new SecretKeySpec(stringKey.getBytes(),\"AES\");\n    Cipher c = Cipher.getInstance(\"AES/ECB/ZeroBytePadding\"); // Change to CBC and use appropriate IV\n    c.init(Cipher.ENCRYPT_MODE, sks);\n    c.update(message.getBytes());\n    byte[] ciphertext = c.doFinal();\n    Log.i(\"CE\", new String(ciphertext));\n\n    } catch (NoSuchAlgorithmException e) {\n        Log.e(\"CE\",e.getMessage());\n    } catch (NoSuchPaddingException e) {\n        Log.e(\"CE\",e.getMessage());\n    } catch (InvalidKeyException e) {\n        Log.e(\"CE\",e.getMessage());\n    } catch (IllegalBlockSizeException e) {\n        Log.e(\"CE\",e.getMessage());\n    } catch (BadPaddingException e) {\n        Log.e(\"CE\",e.getMessage());\n}\n", "idx": 505}
{"project": "cipher", "commit_id": "Snippet1330032_29927.java", "target": 0, "func": "cipher = Cipher.getInstance(\"DESede/CBC/NOPADDING\");\ncipher.init(Cipher.DECRYPT_MODE, key, ivSpec);\nint outSize = cipher.getOutputSize(cipherText.length);  \nplainText = new byte[outSize];\nlength = cipher.update(cipherText, plainText, 0);\ncipher.doFinal(plainText, length);\n\n//Remove padding\nint newLen = plainText.length - (plainText[plainText.length-1] & 0xFF);\nbyte[] data = new byte[newLen];\nSystem.arraycopy(plainText, 0, data, 0, newLen);\n", "idx": 506}
{"project": "cipher", "commit_id": "Snippet9175004_33728.java", "target": 0, "func": "     import java.security.SecureRandom;\n     import javax.crypto.Cipher;\n     import javax.crypto.KeyGenerator;\n     import javax.crypto.SecretKey;\n     import javax.crypto.spec.SecretKeySpec;\n\n     public class SimpleCrypto {\n\npublic  String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n}\n\npublic  String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n}\n\n//done\nprivate  byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\n\nprivate  byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n}\n\nprivate  byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n}\n\npublic  String toHex(String txt) {\n        return toHex(txt.getBytes());\n}\npublic  String fromHex(String hex) {\n        return new String(toByte(hex));\n}\n\npublic  byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n                result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n}\n\npublic  String toHex(byte[] buf) {\n        if (buf == null)\n                return \"\";\n        StringBuffer result = new StringBuffer(2*buf.length);\n        for (int i = 0; i < buf.length; i++) {\n                appendHex(result, buf[i]);\n        }\n        return result.toString();\n}\nprivate final static String HEX = \"0123456789ABCDEF\";\nprivate  void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n}\n\n  }\n", "idx": 507}
{"project": "cipher", "commit_id": "Snippet28132124_10298.java", "target": 0, "func": "private static void decryptRSA()\n    {\n        FileInputStream cipherfile;\n        try {\n            cipherfile = new FileInputStream(inFile);\n\n        byte[] ciphertext = new byte[cipherfile.available()];\n\n        PrivateKey privatekey = getKeyPair().getPrivate();\n\n        /* Create cipher for decryption. */\n\n        Cipher decrypt_cipher = Cipher.getInstance(\"AES\");\n        decrypt_cipher.init(Cipher.DECRYPT_MODE, privatekey);\n\n        /* Reconstruct the plaintext message. */\n\n\n        byte[] plaintext = decrypt_cipher.doFinal(ciphertext);\n        FileOutputStream plainfile = new FileOutputStream(outFile);\n        plainfile.write(plaintext);\n        plainfile.close();\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\nprivate static KeyPair getKeyPair() throws Exception\n    {\n        KeyPair keypair = null;\n        FileInputStream is = new FileInputStream(keyStore);\n        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n        keystore.load(is, password.toCharArray());\n        Key key = keystore.getKey(keyName, password.toCharArray());\n        if (key instanceof PrivateKey) {\n            Certificate cert = keystore.getCertificate(keyName);\n            PublicKey publicKey = cert.getPublicKey();\n            keypair = new KeyPair(publicKey, (PrivateKey) key);\n        }\n        return keypair;\n    }\n", "idx": 508}
{"project": "cipher", "commit_id": "Snippet10416828_34787.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB128/PKCS5Padding\", \"SunJCE\");\n", "idx": 509}
{"project": "cipher", "commit_id": "Snippet26486120_8627.java", "target": 0, "func": "public static String encryptBlowfish(String to_encrypt, String strkey) {\n    try {\n        SecretKeySpec key = new SecretKeySpec(strkey.getBytes(), \"Blowfish\");\n        Cipher cipher = Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        return new String(cipher.doFinal(to_encrypt.getBytes()).toString()); // Added here .toString() because otherwise I get some hardcoded text\n    } catch (Exception e) { return null; }\n}\n", "idx": 510}
{"project": "cipher", "commit_id": "Snippet29831300_11897.java", "target": 0, "func": "1. Stored the private key in hex string. I.e. 48 chars hex string as below which is equivalent to 24 bytes reuquired for 3des\n73AD9CEC99816AA6A4D82FB273AD9CEC99816AA6A4D82FB2\n2. Following is code written in java \nhttps://github.com/dilipkumar2k6/3des/blob/master/TripleDes.java\nimport java.security.GeneralSecurityException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class TripleDes {\n    // Crypto library related keys\n    private static final String ALGO_NAME = \"DESede/ECB/NoPadding\";\n    private static final int PADDING_BLOCK = 8;\n\n    // Test Data\n    private static final String PLAIN_TEXT = \"Hello World\";\n    private static final String SHARED_KEY = \"73AD9CEC99816AA6A4D82FB273AD9CEC99816AA6A4D82FB2\";\n\n    public static void main(String[] arg) {\n\n        try {\n            // Get Algorithm name\n            String desAlgoName = getDESAlgorithmName(ALGO_NAME);\n            // Create Cipher object\n            Cipher cipher = Cipher.getInstance(ALGO_NAME);\n            //Actual DES algo needs 56 bits key, which is equivalent to 1byte (0 at 0th position)  Get 8*3 byets key\n            byte [] key = hexFromString(SHARED_KEY);\n            System.out.println(\"DES Algorithm  shared key size in bytes >> \"+key.length);\n            // Create SecretKeySpec\n            SecretKeySpec secretKeySpec = new SecretKeySpec(key, desAlgoName);\n            //Encrypt bytes\n            byte [] encryptedBytes = encryptIntoBytes(cipher, secretKeySpec, PLAIN_TEXT.getBytes(), 0, PLAIN_TEXT.getBytes().length);\n            String encryptedString=  hexToString(encryptedBytes);\n            System.out.println(encryptedString);\n\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    public static byte[] encryptIntoBytes(Cipher cipher, SecretKeySpec secretKeySpec, byte[] dct, int offset, int len) throws GeneralSecurityException {\n        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n        byte[] ect = cipher.doFinal(addPadding(dct, offset, len));\n        return ect;\n    }\n\n    public static String getDESAlgorithmName(String algoName) {\n        System.out.println(\"getDESAlgorithmName algoName >> \"+algoName);\n        String desAlgoName = null;\n        int i = algoName.indexOf(\"/\");\n        if (i != -1)\n            desAlgoName = algoName.substring(0, i);\n        else\n            desAlgoName = algoName;\n        return desAlgoName;\n    }\n\n    /**\n     * Adds padding characters to the data to be encrypted. Also adds random\n     * Initial Value to the beginning of the encrypted data when using Triple\n     * DES in CBC mode (DES-EDE3/CBC).\n     * \n     * @param inData\n     *            Array of bytes to be padded\n     * @param offset\n     *            Offset to starting point within array\n     * @param len\n     *            Number of bytes to be encrypted\n     * @return Padded array of bytes\n     */\n    public static byte[] addPadding(byte[] inData, int offset, int len) {\n        System.out.println(\"addPadding offset >> \"+offset+\", len >> \"+len);\n        byte[] bp = null;\n        int padChars = PADDING_BLOCK; // start with max padding value\n        int partial = (len + 1) % padChars; // calculate how many extra bytes\n                                            // exist\n        if (partial == 0) {\n            padChars = 1; // if none, set to only pad with length byte\n        } else {\n            padChars = padChars - partial + 1; // calculate padding size to\n                                                // include length\n        }\n        System.out.println(\"addPadding >> Add padding of \"+padChars);\n        /*\n         * Create a byte array large enough to hold data plus padding bytes The\n         * count of padding bytes is placed in the first byte of the data to be\n         * encrypted. That byte is included in the count.\n         */\n        bp = new byte[len + padChars];\n        bp[0] = Byte.parseByte(Integer.toString(padChars));\n        System.arraycopy(inData, offset, bp, 1, len);\n        return bp;\n    }\n\n    public static byte[] hexFromString(String hex) {\n        int len = hex.length();\n        byte[] buf = new byte[((len + 1) / 2)];\n\n        int i = 0, j = 0;\n        if ((len % 2) == 1)\n            buf[j++] = (byte) fromDigit(hex.charAt(i++));\n\n        while (i < len) {\n            buf[j++] = (byte) ((fromDigit(hex.charAt(i++)) << 4) | fromDigit(hex\n                    .charAt(i++)));\n        }\n        return buf;\n    }\n\n    public static int fromDigit(char ch) {\n        if (ch >= '0' && ch <= '9')\n            return ch - '0';\n        if (ch >= 'A' && ch <= 'F')\n            return ch - 'A' + 10;\n        if (ch >= 'a' && ch <= 'f')\n            return ch - 'a' + 10;\n\n        throw new IllegalArgumentException(\"invalid hex digit '\" + ch + \"'\");\n    }\n\n    public static String hexToString(byte[] ba) {\n        return hexToString(ba, 0, ba.length);\n    }\n\n    public static final char[] hexDigits = { '0', '1', '2', '3', '4', '5',\n            '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n\n    public static String hexToString(byte[] ba, int offset, int length) {\n        char[] buf = new char[length * 2];\n        int j = 0;\n        int k;\n\n        for (int i = offset; i < offset + length; i++) {\n            k = ba[i];\n            buf[j++] = hexDigits[(k >>> 4) & 0x0F];\n            buf[j++] = hexDigits[k & 0x0F];\n        }\n        return new String(buf);\n    }\n\n}\n", "idx": 511}
{"project": "cipher", "commit_id": "Snippet11197046_35394.java", "target": 0, "func": " public void decryptFile(String key, String typeFile) throws InvalidKeyException, \n                                                          NoSuchAlgorithmException, \n                                                       InvalidKeySpecException, \n                                                            NoSuchPaddingException, \n                                                                       IOException\n   {\n\n       DESKeySpec dks = new DESKeySpec(key.getBytes());\n       SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n       SecretKey desKey = skf.generateSecret(dks);\n       Cipher pbeCipher = Cipher.getInstance(\"DES\"); // DES/ECB/PKCS5Padding for SunJCE\n\n       pbeCipher.init(Cipher.DECRYPT_MODE, desKey);    \n\n\n        // Decrypt the ciphertext and then print it out.     \n        FileInputStream output = null;\n\n        File encryptedFile = new File(Environment.getExternalStorageDirectory() + \"/images/Et1.jpg\");   \n        File decryptedFile = new File(Environment.getExternalStorageDirectory() + \"/images/Dt1.jpg\");\n\n\n        try \n        {\n\n        output = new FileInputStream(encryptedFile);\n        } \n        catch (FileNotFoundException e) \n        {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n        }\n\n    CipherInputStream cis = new CipherInputStream(output, pbeCipher);\n    BufferedImage input = null;\n\n    try \n    {\n        input = ImageIO.read(cis);\n    } \n    catch (IOException e) \n    {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    FileOutputStream out = null;\n\n    try \n    {\n        out = new FileOutputStream(decryptedFile);\n    } \n    catch (FileNotFoundException e) \n    {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    try \n    {\n        ImageIO.write(input,typeFile, out);\n    } \n    catch (IOException e) \n    {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    try \n    {\n        cis.close();\n    } \n    catch (IOException e) \n    {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n\n   }\n", "idx": 512}
{"project": "cipher", "commit_id": "Snippet37405669_19309.java", "target": 0, "func": "private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n", "idx": 513}
{"project": "cipher", "commit_id": "Snippet27530067_9645.java", "target": 0, "func": "    MessageDigest digest;\n    try {\n        digest = MessageDigest.getInstance(\"MD5\");\n        byte[] md5key = digest.digest(key.getBytes(\"UTF-8\"));\n        Cipher cipher = Cipher.getInstance(\"DESEDE/ECB/PKCS5Padding\");\n        SecretKeySpec myKey = new SecretKeySpec(md5key, \"DESede\");\n        cipher.init(Cipher.ENCRYPT_MODE, myKey);\n\n        try {\n            byte[] encryptedPlainText = cipher.doFinal(input.getBytes());\n\n            String encrypted = Base64.encodeToString(encryptedPlainText, 0);\n            return encrypted;\n\n        }\n    }\n", "idx": 514}
{"project": "cipher", "commit_id": "Snippet9171156_33723.java", "target": 0, "func": "package com.filepermition.android;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\n\npublic class AndroidFilePermitionActivity extends Activity \n{\n    Button btn_button;\n\n    /** Called when the activity is first created. */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n\n        btn_button = (Button)findViewById(R.id.btn_button);\n\n        btn_button.setOnClickListener(new OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n\n                try{\n                    FileInputStream fis = new FileInputStream(\n                        new File(\"/mnt/sdcard/testfile/file.wav\"));\n                    File outfile = new File(\"/mnt/sdcard/testfile/encTest1234.wav\");\n\n                    int read;\n                    if(!outfile.exists())\n                        outfile.createNewFile();\n\n                    File decfile = new File(\"/mnt/sdcard/testfile/dec123.wav\");\n                    if(!decfile.exists())\n                        decfile.createNewFile();\n\n                    FileOutputStream fos = new FileOutputStream(outfile);\n                    FileInputStream encfis = new FileInputStream(outfile);\n                    FileOutputStream decfos = new FileOutputStream(decfile);\n\n                    Cipher encipher = Cipher.getInstance(\"AES\");\n                    Cipher decipher = Cipher.getInstance(\"AES\");\n\n                    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n                    SecretKey skey = kgen.generateKey();\n                    encipher.init(Cipher.ENCRYPT_MODE, skey);\n                    CipherInputStream cis = new CipherInputStream(fis, encipher);\n                    decipher.init(Cipher.DECRYPT_MODE, skey);\n                    CipherOutputStream cos = new CipherOutputStream(decfos,decipher);\n\n                    while((read = cis.read())!=-1)\n                    {\n                        fos.write((char)read);\n                        fos.flush();\n                    }   \n                    fos.close();\n                    while((read=encfis.read())!=-1)\n                    {\n                        cos.write(read);\n                        cos.flush();\n                    }\n                    cos.close();\n\n                }catch (Exception e) {\n                    // TODO: handle exceptione\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n}\n", "idx": 515}
{"project": "cipher", "commit_id": "Snippet11557983_35610.java", "target": 0, "func": "sslContext = SSLContext.getInstance(\"TLS\");\n/*   some code to initialize ssl context  */\nSSLSocketFactory sslSocketfactory =  sslContext.getSocketFactory();\nsock = (SSLSocket) sslSocketfactory.createSocket(host,port1);\nsock.setSoTimeout(12000);\n\nis = new DataInputStream(new BufferedInputStream(sock.getInputStream(),\n                                 16384));\nos = sock.getOutputStream();\n/*  some more code using above mentioned is and os to recieve rc4 key and \n    write it into a byte array   */\n\nSecretKey key2 = new SecretKeySpec(reverserRc4InBytes, 0, reverserRc4InBytes.length, \"RC4\");\nCipher cipherOS = Cipher.getInstance(\"RC4\");\ncipherOS.init(Cipher.ENCRYPT_MODE, key2);\n\n\nCipher cipherIS = Cipher.getInstance(\"RC4\");\ncipherIS.init(Cipher.DECRYPT_MODE, key2);\ncos = new CipherOutputStream(os,cipherOS);\ncis = new CipherInputStream(is,cipherIS);\n", "idx": 516}
{"project": "cipher", "commit_id": "Snippet26732703_8832.java", "target": 0, "func": "   import java.security.MessageDigest;\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\npublic class SimpleCrypto {\n     public static String encrypt(String seed, String cleartext) throws Exception {\n         byte[] rawKey = getRawKey(seed.getBytes(\"US-ASCII\"));\n         byte[] result = encrypt(rawKey, cleartext.getBytes());\n         return toHex(result);\n }\n\n\n\n private static byte[] getRawKey(byte[] seed) throws Exception {\n\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"MD5\");\n\n        // md.update(seed);\n\n         byte[] temp=md.digest(seed);\n\n        byte[] raw =new byte[32];\n\n     System.arraycopy(temp, 0, raw, 0, temp.length);\n       System.arraycopy(temp, 0, raw, temp.length, temp.length);\n\n\n\n     return raw;\n     //    return null;\n }\n\n\n private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n     SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES/ECB/NoPadding\");\n         Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n     cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n     byte[] encrypted = cipher.doFinal(clear);\n         return encrypted;\n }\n\n\n\n public static String toHex(String txt) {\n         return toHex(txt.getBytes());\n }\n public static String fromHex(String hex) {\n         return new String(toByte(hex));\n }\n\n public static byte[] toByte(String hexString) {\n         int len = hexString.length()/2;\n         byte[] result = new byte[len];\n         for (int i = 0; i < len; i++)\n                 result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n         return result;\n }\n\n public static String toHex(byte[] buf) {\n         if (buf == null)\n                 return \"\";\n         StringBuffer result = new StringBuffer(2*buf.length);\n         for (int i = 0; i < buf.length; i++) {\n                 appendHex(result, buf[i]);\n         }\n         return result.toString();\n }\n private final static String HEX = \"0123456789ABCDEF\";\n private static void appendHex(StringBuffer sb, byte b) {\n         sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n }\n}\n", "idx": 517}
{"project": "cipher", "commit_id": "Snippet10223540_34044.java", "target": 0, "func": "byte[] keyBytes = KeyGenerator.getInstance(\"AES\").getEncoded();\n\n...\n\nSecretKeySpec skeySpec = new SecretKeySpec(keyBytes, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, skeySpec);\n", "idx": 518}
{"project": "cipher", "commit_id": "Snippet47174603_29175.java", "target": 0, "func": "public static String encryptIt(String value) {\ntry {\n    DESKeySpec keySpec = new DESKeySpec(new byte[]{105, 107, 18, 51, 114, 83, 51, 120, 121}); \n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey key = keyFactory.generateSecret(keySpec);\n\n    byte[] clearText = value.getBytes(\"UTF8\");\n    // Cipher is not thread safe\n    Cipher cipher = Cipher.getInstance(\"DES\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n\n    //   Log.d(\"aa\", \"Encrypted: \" + value + \" -> \" + encrypedValue);\n    return Base64.encodeToString(cipher.doFinal(clearText), Base64.DEFAULT);\n} catch (Exception e) {\n    e.printStackTrace();\n}\nreturn value;\n", "idx": 519}
{"project": "cipher", "commit_id": "Snippet30598753_12806.java", "target": 0, "func": "package com.comviva.logic;\n\nimport java.io.IOException;\nimport javax.crypto.Cipher;\nimport org.apache.tomcat.util.IntrospectionUtils;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport com.comviva.util.Util;\n\n    public class Decrypt implements IntrospectionUtils.PropertySource {\n\n        static Log log = LogFactory.getLog(Decrypt.class);\n        static int count =0;\n        static String encrypted_password=null;\n        private static byte[] key = {\n            0x74, 0x68, 0x69, 0x73, 0x49, 0x73, 0x41, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79\n        };//\"thisIsASecretKey\";\n\n\n        public static String decrypt(String strToDecrypt)\n        {\n            try\n            {\n                Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n                final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n                cipher.init(Cipher.DECRYPT_MODE, secretKey);\n                final String decryptedString = new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt)));\n                return decryptedString;\n            }\n            catch (Exception e)\n            {\n                log.error(\"Error while decrypting\", e);\n                return null;\n            }\n\n        }\n\n        @Override\n        public String getProperty(String arg0) {\n\n            System.out.println(\"Count is \" + count++);\n\n            String fname=this.getClass().getClassLoader().getResource(\"\").getFile();\n            fname=fname.substring(0, fname.length()-4);\n            String OS = System.getProperty(\"os.name\").toLowerCase();\n            if(OS.indexOf(\"win\")>=0)\n            {\n                log.info(\"System Type is :\"+OS);\n                fname=fname.concat(\"conf\\\\catalina.properties\\n\");\n                System.out.print(\"File Name is :\"+fname);\n            }\n            else\n            {\n                log.info(\"System Type is :\"+OS);\n                fname=fname.concat(\"conf/catalina.properties\\n\");\n                System.out.print(\"File Name is :\"+fname);\n            }\n            log.info(\"File is read successfully\");\n            try {\n                Util utility=new Util(fname);\n                log.info(\"Hello\");\n\n                encrypted_password=utility.getValue(arg0);\n                log.info(\"ecrypted password is :\" + encrypted_password);\n                System.out.println(\"ecrypted password is :\" + encrypted_password);\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n\n            return decrypt(encrypted_password);\n        }\n\n    }\n", "idx": 520}
{"project": "cipher", "commit_id": "Snippet11322625_35468.java", "target": 0, "func": "cipher = Cipher.getInstance(\"DESede/CFB8/NoPadding\");\n", "idx": 521}
{"project": "cipher", "commit_id": "Snippet27791726_9959.java", "target": 0, "func": "BASE64Encoder base64 = new BASE64Encoder();\nPasswordDeriveBytes i_Pass = new PasswordDeriveBytes(passWord, saltWordAsBytes);\nbyte[] keyBytes = i_Pass.getBytes(24);\nbyte[] ivBytes = i_Pass.getBytes(8);\nCipher c3des = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\nSecretKeySpec myKey = new SecretKeySpec(keyBytes, \"DESede\");\nIvParameterSpec ivspec = new IvParameterSpec(ivBytes);\nc3des.init (Cipher.ENCRYPT_MODE, myKey, ivspec);\nencrytpedTextAsByte  = c3des.doFinal(plainTextAsBytes);\nencryptedText  = base64.encode(encrytpedTextAsByte);\n", "idx": 522}
{"project": "cipher", "commit_id": "Snippet29236370_11271.java", "target": 0, "func": "public abstract class EncryptionDecryption {\nstatic  byte[]  key = \"!@#$!@#$%^&**&^%\".getBytes();\nfinal static String algorithm=\"AES\";\n\npublic static String encrypt(String data){\n\n    byte[] dataToSend = data.getBytes();\n    Cipher c = null;\n    try {\n        c = Cipher.getInstance(algorithm);\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    SecretKeySpec k =  new SecretKeySpec(key, algorithm);\n    try {\n        c.init(Cipher.ENCRYPT_MODE, k);\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    byte[] encryptedData = \"\".getBytes();\n    try {\n        encryptedData = c.doFinal(dataToSend);\n    } catch (IllegalBlockSizeException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    byte[] encryptedByteValue =    new Base64().encode(encryptedData);\n    return  new String(encryptedByteValue);//.toString();\n}\n\npublic static String decrypt(String data){\n\n    byte[] encryptedData  = new Base64().decode(data);\n    Cipher c = null;\n    try {\n        c = Cipher.getInstance(algorithm);\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    SecretKeySpec k =\n            new SecretKeySpec(key, algorithm);\n    try {\n        c.init(Cipher.DECRYPT_MODE, k);\n    } catch (InvalidKeyException e1) {\n        // TODO Auto-generated catch block\n        e1.printStackTrace();\n    }\n    byte[] decrypted = null;\n    try {\n        decrypted = c.doFinal(encryptedData);\n    } catch (IllegalBlockSizeException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    return new String(decrypted);\n}\n\npublic static void main(String[] args){\n    String password=EncryptionDecryption.encrypt(\"password123\");\n    System.out.println(password);\n    System.out.println(EncryptionDecryption.decrypt(password));\n}\n}\n", "idx": 523}
{"project": "cipher", "commit_id": "Snippet21452309_3891.java", "target": 0, "func": "SecretKey key = new SecretKeySpec(new byte[8], \"DES\");\n\nCipher cipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\ncipher.init(Cipher.ENCRYPT_MODE, key);\n\nSystem.out.println(DatatypeConverter.printHexBinary(cipher\n    .doFinal(new byte[8])));\n", "idx": 524}
{"project": "cipher", "commit_id": "Snippet41673845_23611.java", "target": 0, "func": "byte[] a = encryptFIN128AES(\"pls\");\nString b = decryptFIN128AES(a);\nLog.e(\"AES_Test\", \"b = \" + b);\n\n\n/**\n * Encrypts a string with AES (128 bit key)\n * @param fin \n * @return the AES encrypted byte[]\n */\nprivate byte[] encryptFIN128AES(String fin) {\n\n    SecretKeySpec sks = null;\n\n    try {\n        sks = new SecretKeySpec(generateKey(\"Test1\".toCharArray(), \"Test2\".getBytes()).getEncoded(),\"AES\");\n    } catch (Exception e) {\n        Log.e(\"encryptFIN128AES\", \"AES key generation error\");\n    }\n\n    // Encode the original data with AES\n    byte[] encodedBytes = null;\n    try {\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.ENCRYPT_MODE, sks);\n        encodedBytes = c.doFinal(fin.getBytes());\n    } catch (Exception e) {\n        Log.e(\"encryptFIN128AES\", \"AES encryption error\");\n    }\n\n    return encodedBytes;\n\n}\n\n\n/**\n * Decrypts a string with AES (128 bit key)\n * @param encodedBytes\n * @return the decrypted String\n */\nprivate String decryptFIN128AES(byte[] encodedBytes) {\n\n    SecretKeySpec sks = null;\n\n    try {\n        sks = new SecretKeySpec(generateKey(\"Test1\".toCharArray(), \"Test2\".getBytes()).getEncoded(),\"AES\");\n    } catch (Exception e) {\n        Log.e(\"decryptFIN128AES\", \"AES key generation error\");\n    }\n\n    // Decode the encoded data with AES\n    byte[] decodedBytes = null;\n    try {\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.DECRYPT_MODE, sks);\n        decodedBytes = c.doFinal(encodedBytes);\n    } catch (Exception e) {\n        Log.e(\"decryptFIN128AES\", \"AES decryption error\");\n    }\n\n    return Base64.encodeToString(decodedBytes, Base64.DEFAULT);\n}\n\n\npublic static SecretKey generateKey(char[] passphraseOrPin, byte[] salt)\n        throws NoSuchAlgorithmException, InvalidKeySpecException {\n\n    final int iterations = 1000;\n\n    // Generate a 256-bit key\n    final int outputKeyLength = 128;\n\n    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n    KeySpec keySpec = new PBEKeySpec(passphraseOrPin, salt, iterations, outputKeyLength);\n    SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);\n    return secretKey;\n}\n", "idx": 525}
{"project": "cipher", "commit_id": "Snippet42995386_25131.java", "target": 0, "func": " public static String harden(String unencryptedString) throws NoSuchAlgorithmException, UnsupportedEncodingException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    String key =\"***************\";\n        MessageDigest md = MessageDigest.getInstance(\"md5\");\n    byte[] digestOfPassword = md.digest(key.getBytes(\"utf-8\"));\n    byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n\n    for (int j = 0, k = 16; j < 8;) {\n        keyBytes[k++] = keyBytes[j++];\n    }\n\n    SecretKey secretKey = new SecretKeySpec(keyBytes, \"DESede\");\n    Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n    byte[] plainTextBytes = unencryptedString.getBytes(\"utf-8\");\n    byte[] buf = cipher.doFinal(plainTextBytes);\n    byte[] base64Bytes;\n\n           base64Bytes = Base64.getEncoder().encode(buf);\n\n    String base64EncryptedString = new String(base64Bytes);\n\n    return base64EncryptedString;\n}\n", "idx": 526}
{"project": "cipher", "commit_id": "Snippet8530312_33312.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class Encrypt3DES {\n\n     private byte[] key;\n     private byte[] initializationVector;\n\n    public Encrypt3DES(){\n\n    }\n\n    public String encryptText(String plainText, String key) throws Exception{\n\n         //----  Use specified 3DES key and IV from other source --------------\n        byte[] plaintext = plainText.getBytes();\n        byte[] myIV = key.getBytes();\n        byte[] tdesKeyData = {(byte)0xA2, (byte)0x15, (byte)0x37, (byte)0x08, (byte)0xCA, (byte)0x62,\n        (byte)0xC1, (byte)0xD2, (byte)0xF7, (byte)0xF1, (byte)0x93, (byte)0xDF,\n        (byte)0xD2, (byte)0x15, (byte)0x4F, (byte)0x79, (byte)0x06, (byte)0x67,\n        (byte)0x7A, (byte)0x82, (byte)0x94, (byte)0x16, (byte)0x32, (byte)0x95};\n\n        Cipher c3des = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        SecretKeySpec    myKey = new SecretKeySpec(tdesKeyData, \"DESede\");\n        IvParameterSpec ivspec = new IvParameterSpec(myIV);\n           c3des.init(Cipher.ENCRYPT_MODE, myKey, ivspec);\n        byte[] cipherText = c3des.doFinal(plaintext);\n        sun.misc.BASE64Encoder obj64=new sun.misc.BASE64Encoder();\n        return obj64.encode(cipherText);\n\n    }\n\n    public String decryptText(String encryptText, String key) throws Exception{\n\n\n        byte[] initializationVector = key.getBytes();\n        byte[] tdesKeyData = {(byte)0xA2, (byte)0x15, (byte)0x37, (byte)0x08, (byte)0xCA, (byte)0x62,\n        (byte)0xC1, (byte)0xD2, (byte)0xF7, (byte)0xF1, (byte)0x93, (byte)0xDF,\n        (byte)0xD2, (byte)0x15, (byte)0x4F, (byte)0x79, (byte)0x06, (byte)0x67,\n        (byte)0x7A, (byte)0x82, (byte)0x94, (byte)0x16, (byte)0x32, (byte)0x95};\n\n\n          byte[] encData = new sun.misc.BASE64Decoder().decodeBuffer(encryptText);\n          Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n          SecretKeySpec myKey = new SecretKeySpec(tdesKeyData, \"DESede\");\n          IvParameterSpec ivspec = new IvParameterSpec(initializationVector);\n          decipher.init(Cipher.DECRYPT_MODE, myKey, ivspec);\n          byte[] plainText = decipher.doFinal(encData);\n          return new String(plainText);\n\n    }\n}\n", "idx": 527}
{"project": "cipher", "commit_id": "Snippet32996278_15026.java", "target": 0, "func": "package com.caja.utilidades;\n\nimport java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class MainClass {\n\nprivate static final String ALGORITHM = \"AES\";\nprivate static final String keyValue = \"thisisasecretkey\";\n\npublic static void main(String[] args) throws Exception {\n    System.out.println(encrypt(\"hello world\"));\n}\n\npublic static String encrypt(String valueToEnc) throws Exception {\n  Key key = generateKey();\n  Cipher cipher = Cipher.getInstance(ALGORITHM);\n  cipher.init(Cipher.ENCRYPT_MODE, key);\n  byte[] encValue = cipher.doFinal(valueToEnc.getBytes());\n  return new String(encValue);\n}\n\nprivate static Key generateKey() throws Exception {\n  Key key = new SecretKeySpec(keyValue.getBytes(), ALGORITHM);\n  return key;\n}\n\n\n}\n", "idx": 528}
{"project": "cipher", "commit_id": "Snippet31768498_13830.java", "target": 0, "func": "public static byte[] RC4(byte[] x,byte[] keyBytes)   \n{   \n    byte[] e = null; \n\n    try   \n    {   \n        SecureRandom sr = new SecureRandom(keyBytes);\n        KeyGenerator kg = KeyGenerator.getInstance(algorithm);\n        kg.init(sr);\n        SecretKey sk = kg.generateKey();  \n        Cipher enCipher = Cipher.getInstance(\"RC4\");   \n        enCipher.init(Cipher.ENCRYPT_MODE,sk);   \n        e = enCipher.doFinal(plaintext);              \n    }   \n    catch(Exception ex)   \n    {   \n        ex.printStackTrace();   \n    }   \n    return e;   \n} \n", "idx": 529}
{"project": "cipher", "commit_id": "Snippet19372343_2192.java", "target": 0, "func": "validate(cipherText)\n private static final byte[] desKeyData = {\n        (byte)0xA2, (byte)0x15, (byte)0x37, (byte)0x07, (byte)0xCB, (byte)0x62, \n        (byte)0xC1, (byte)0xD3, (byte)0xF8, (byte)0xF1, (byte)0x97, (byte)0xDF,\n        (byte)0xD0, (byte)0x13, (byte)0x4F, (byte)0x79, (byte)0x01, (byte)0x67, \n        (byte)0x7A, (byte)0x85, (byte)0x94, (byte)0x16, (byte)0x31, (byte)0x88 };\n\n\nbyte[] bCipherText = Base64.decode(CipherText);\n\n\nCipher oC3des = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\nSecretKeySpec    oKey = new SecretKeySpec(s_desKeyData , \"DESede\");\nIvParameterSpec oIvSpec = new IvParameterSpec(s_baIV);\n\noC3des.init(Cipher.DECRYPT_MODE, oKey, oIvSpec);\nbyte[] plaintext = oC3des.doFinal(bCipherText );\n\nreturn new String(plainText, Charset.forName(\"UTF-8\"));\n", "idx": 530}
{"project": "cipher", "commit_id": "Snippet24600721_6950.java", "target": 0, "func": "private static String saveToFile(Serializable object, String fileName,\n        Context ctx) {\n    try {\n        Cipher cipher = null;\n        cipher = Cipher.getInstance(\"DES\");\n        SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n        AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);\n\n        cipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n        SealedObject sealedObject = null;\n        sealedObject = new SealedObject(object, cipher);\n        CipherOutputStream cipherOutputStream = null;\n\n        FileOutputStream fos = ctx.openFileOutput(fileName,\n                Context.MODE_PRIVATE);\n        cipherOutputStream = new CipherOutputStream(\n                new BufferedOutputStream(fos), cipher);\n        ObjectOutputStream outputStream = null;\n        outputStream = new ObjectOutputStream(cipherOutputStream);\n        outputStream.writeObject(sealedObject);\n        outputStream.close();\n\n        return \"Save Complete!\";\n\n    } catch (IOException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (InvalidAlgorithmParameterException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    }\n}\n", "idx": 531}
{"project": "cipher", "commit_id": "Snippet42798372_24850.java", "target": 0, "func": "public class SymmetricDESedeCipher {\n    private static final String DATA = \"Whackabad\";\n    private static final String ALGORITHM = \"DESede\";\n    private static final String XFORM = \"DESede/CBC/PKCS5Padding\";\n    private static final String KEY = \"s9e42J3PpmQv8n5T8L3zzuFaGdrzK/wU\";\n    private static final String IV = \"VDiJjncs4ak=\";\n\n    private static byte[] encrypt(String data,\n                                  SecretKey key, String XFORM, byte[] iv) throws Exception {\n        Cipher cipher = Cipher.getInstance(XFORM);\n        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));\n        return cipher.doFinal(data.getBytes());\n    }\n\n    public static void main(String[] unused) throws Exception {\n        DESedeKeySpec spec = new DESedeKeySpec(new BASE64Decoder().decodeBuffer(KEY));\n        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(ALGORITHM);\n        SecretKey secretKey = secretKeyFactory.generateSecret(spec);\n\n        byte[] encBytes = encrypt(DATA, secretKey, XFORM,  new BASE64Decoder().decodeBuffer(IV));\n\n        System.out.println(\"Data: \" + DATA);\n        System.out.println(\"Encrypted Data: \" + new BASE64Encoder().encode(encBytes));\n    }\n}\n", "idx": 532}
{"project": "cipher", "commit_id": "Snippet20739513_3324.java", "target": 0, "func": "public static byte[] encrypt(String input, String salt) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    SecretKeySpec key = new SecretKeySpec(salt.getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    return cipher.doFinal(input.getBytes());\n}\n", "idx": 533}
{"project": "cipher", "commit_id": "Snippet20923535_3514.java", "target": 0, "func": "package com.devleb.testforencdemo;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Base64;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class MainActivity extends Activity {\n\n    String plaintTxt1;\n    String pass1;\n\n    String plaintxt;\n    String strPass;\n    String cypherTxt = \"\";\n    EditText strTxt;\n    EditText editStrPass;\n\n    TextView encryptTxt;\n\n    Button btn;\n\n    int iterations = 200;\n    byte[] salt = { (byte) 0x11, (byte) 0x9B, (byte) 0xC6, (byte) 0xFE,\n            (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x77 };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        strTxt = (EditText) findViewById(R.id.editTxtSTR);\n        plaintxt = strTxt.getText().toString();\n\n        encryptTxt = (TextView) findViewById(R.id.encryptSTR);\n        editStrPass = (EditText) findViewById(R.id.editTxtPass);\n\n        btn = (Button) findViewById(R.id.btn);\n        btn.setOnClickListener(new OnClickListener() {\n\n            @Override\n            public void onClick(View arg0) {\n                // TODO Auto-generated method stub\n\n                Encrypt(plaintTxt1, pass1, salt);\n            }\n        });\n\n    }\n\n    public static String toBase64(byte[] bytes) {\n        return Base64.encodeToString(bytes, Base64.NO_WRAP);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.main, menu);\n        return true;\n\n    }\n\n    public void Encrypt(String pltxt, String pass, byte[] salte) {\n        strPass = editStrPass.getText().toString();\n        Toast.makeText(this, strPass, Toast.LENGTH_SHORT).show();\n        try {\n            PBEKeySpec pbeKeySpec = new PBEKeySpec(pass.toCharArray());\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            SecretKeyFactory keyFactory = SecretKeyFactory\n                    .getInstance(\"PBKDF2WithHmacSHA1\");\n            SecretKey pbeKey = keyFactory.generateSecret(pbeKeySpec);\n            Log.e(\"SecreteKey\", pbeKey.toString());\n            PBEParameterSpec pbeSpec = new PBEParameterSpec(salte, iterations);\n            Log.e(\"SecreteKey\", pbeSpec.toString());\n            cipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeSpec);\n            byte[] cipherText = cipher.doFinal(pltxt.getBytes(\"UTF-8\"));\n            cypherTxt = String.format(\"%s%s%s\", toBase64(salt), \"]\",\n                    toBase64(cipherText));\n            encryptTxt.setText(cypherTxt);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n", "idx": 534}
{"project": "cipher", "commit_id": "Snippet11367849_35505.java", "target": 0, "func": "\n    package com.zenimax.encryption;\n\n    import java.security.InvalidKeyException;\n    import java.security.NoSuchAlgorithmException;\n    import java.security.NoSuchProviderException;\n    import java.security.Security;\n    import javax.crypto.BadPaddingException;\n    import javax.crypto.Cipher;\n    import javax.crypto.IllegalBlockSizeException;\n    import javax.crypto.NoSuchPaddingException;\n    import javax.crypto.SecretKey;\n    import javax.crypto.spec.SecretKeySpec;\n    import org.bouncycastle.jce.provider.BouncyCastleProvider;\n\n    /**\n     * \n     * @author Matthew H. Wagner\n     */\n    public class TripleDesBouncyCastle {\n        private static String TRIPLE_DES_TRANSFORMATION = \"DESede/ECB/PKCS7Padding\";\n        private static String ALGORITHM = \"DESede\";\n        private static String BOUNCY_CASTLE_PROVIDER = \"BC\";\n\n        private static void init()\n        {\n            Security.addProvider(new BouncyCastleProvider());\n        }\n\n        public static byte[] encode(byte[] input, byte[] key)\n                throws IllegalBlockSizeException, BadPaddingException,\n                NoSuchAlgorithmException, NoSuchProviderException,\n                NoSuchPaddingException, InvalidKeyException {\n            init();\n            SecretKey keySpec = new SecretKeySpec(key, ALGORITHM);\n            Cipher encrypter = Cipher.getInstance(TRIPLE_DES_TRANSFORMATION,\n                    BOUNCY_CASTLE_PROVIDER);\n            encrypter.init(Cipher.ENCRYPT_MODE, keySpec);\n            return encrypter.doFinal(input);\n        }\n\n        public static byte[] decode(byte[] input, byte[] key)\n                throws IllegalBlockSizeException, BadPaddingException,\n                NoSuchAlgorithmException, NoSuchProviderException,\n                NoSuchPaddingException, InvalidKeyException {\n            init();\n            SecretKey keySpec = new SecretKeySpec(key, ALGORITHM);\n            Cipher decrypter = Cipher.getInstance(TRIPLE_DES_TRANSFORMATION,\n                    BOUNCY_CASTLE_PROVIDER);\n            decrypter.init(Cipher.DECRYPT_MODE, keySpec);\n            return decrypter.doFinal(input);\n        }\n    }\n", "idx": 535}
{"project": "cipher", "commit_id": "Snippet9841958_34271.java", "target": 0, "func": "import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\n\npublic class RCC4 {\n    public RCC4(){} \n\n    public static void main(String[] args)throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException{\n        String test = \"testisperfect\";\n        System.out.println(RCC4.keyGet());\n        byte b[] = RCC4.keyGet().getBytes();\n        byte plain[] = test.getBytes();\n        **byte c[] = RCC4.encrypt(plain,b);**\n        **byte p[] = RCC4.decrypt(c,b);**\n\n        **System.out.println(new String(c)) ;\n        System.out.println(new String(p));**\n\n    }\n    public static byte[] encrypt(byte[] plaintext,byte[] keyBytes)\n    {\n        byte[] e = null;\n        try\n        {\n            Key key = new SecretKeySpec(keyBytes,\"RC4\");\n            Cipher enCipher = Cipher.getInstance(\"RC4\");\n            **enCipher.init(Cipher.ENCRYPT_MODE ,key);**\n            e = enCipher.doFinal(plaintext);           \n        }\n        catch(Exception ex)\n        {\n            ex.printStackTrace();\n        }\n        return e;\n    }\n    public static byte[] decrypt(byte[] ciphertext,byte[] keyBytes)\n    {\n        byte de[] = null;\n        try\n        {\n           Key key = new SecretKeySpec(keyBytes,\"RC4\");\n            Cipher deCipher = Cipher.getInstance(\"RC4\");\n           **deCipher.init(Cipher.DECRYPT_MODE, key);**\n            de = deCipher.doFinal(ciphertext);\n        }\n        catch(Exception e)\n        {\n            e.printStackTrace();\n        } \n        return de;\n\n    }\n\n    public static Key getKey()\n    {\n        Key key = null;\n        try\n        {\n            SecureRandom sr = new SecureRandom();\n            KeyGenerator kg = KeyGenerator.getInstance(\"RC4\");\n            kg.init(128,sr);\n            key = kg.generateKey(); \n        }catch(Exception e)\n        {\n            e.printStackTrace();\n        }\n        return key;\n    }\n    public static String keyGet()\n    {\n        Key k = RCC4.getKey();\n        byte[] b = k.getEncoded();\n    BigInteger big = new BigInteger(b);\n        String s = big.toString();\n        return s;\n    }\n\n    }\n", "idx": 536}
{"project": "cipher", "commit_id": "Snippet18774246_1717.java", "target": 0, "func": "public class MessageEncrypt {\n\n        public String encryptString(String message, String seckey) throws Exception{\n            byte[] encData = encrypt(message, seckey);\n\n            return Base64.encodeToString(encData, Base64.DEFAULT);\n        }\n\n        public String decryptString(String message, String seckey) throws Exception{\n            byte[] encData= Base64.decode(message, Base64.DEFAULT);\n\n            return decrypt(encData, seckey);\n        }\n\n        private byte[] encrypt(String message, String seckey) throws Exception {\n            final MessageDigest md = MessageDigest.getInstance(\"md5\");\n            final byte[] digestOfPassword = md.digest(seckey.getBytes(\"utf-8\"));\n            final byte[] keyBytes = acopyof(digestOfPassword, 24);\n            for (int j = 0, k = 16; j < 8;) {\n                keyBytes[k++] = keyBytes[j++];\n            }\n\n            final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n            final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n            final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n            final byte[] plainTextBytes = message.getBytes(\"utf-8\");\n            final byte[] cipherText = cipher.doFinal(plainTextBytes);\n\n            return cipherText;\n        }\n\n        private String decrypt(byte[] message, String seckey) throws Exception {\n            final MessageDigest md = MessageDigest.getInstance(\"md5\");\n            final byte[] digestOfPassword = md.digest(seckey.getBytes(\"utf-8\"));\n            final byte[] keyBytes = acopyof(digestOfPassword, 24);\n            for (int j = 0, k = 16; j < 8;) {\n                keyBytes[k++] = keyBytes[j++];\n            }\n\n            final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n            final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n            final Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n            decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n            final byte[] plainText = decipher.doFinal(message);\n\n            return new String(plainText, \"UTF-8\");\n        }\n\n        public byte[] acopyof(byte[] orig, int newlength){\n            byte[] copya = new byte[newlength];\n            for(int i=0;i< orig.length;i++){\n                copya[i]=orig[i];\n            }\n            for(int i=orig.length;i<newlength;i++){\n                copya[i]=0x0;\n            }\n            return copya;\n        }\n    }\n", "idx": 537}
{"project": "cipher", "commit_id": "Snippet34906218_16854.java", "target": 0, "func": " public void executeAsyncDownload(String urlFile, String id, int position, HandlerCallback callback) {\n\n    String encryptedName = Cypher.md5(id);\n\n    if (MediaUtils.containsFile(encryptedName)) {\n        callback.onDownloadFinish(position);\n        return;\n    }\n\n    File dir = MediaUtils.getDestinationFolder(destination);\n\n    if (!dir.exists()) {\n        dir.mkdir();\n    }\n\n    try {\n        if (canceled)\n            return;\n\n        callback.onDownloadStart(position);\n        URL url = new URL(urlFile);\n        URLConnection connection = url.openConnection();\n        connection.connect();\n        int tamFile = connection.getContentLength();\n        String filePath = MediaUtils.getFilePath(MediaUtils.tempPath + encryptedName).toString();\n\n        InputStream fis = new BufferedInputStream(url.openStream());\n        OutputStream fos = new FileOutputStream(filePath);\n        File file = new File(filePath);\n\n        byte data[] = new byte[80192];\n        int count;\n        long total = 0;\n\n        while ((count = fis.read(data)) != -1) {\n            total += count;\n            if (tamFile > 0) {\n                int percentage = (int) (total * 100 / tamFile);\n                if (percentage % 20 == 0)\n                    callback.onDownloadProgress(percentage, position);\n            }\n\n            fos.write(data, 0, count);\n\n            if (canceled) {\n                MediaUtils.deleteFile(file);\n                return;\n            }\n        }\n\n\n        if (canceled)\n            return;\n\n\n        byte[] key = (salt + cryptPassword).getBytes(\"UTF-8\");\n        MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n        key = sha.digest(key);\n        key = Arrays.copyOf(key, 8);\n        SecretKeySpec sks = new SecretKeySpec(key, \"DES\");\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, sks);\n        CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n        int b;\n        byte[] d = new byte[8192];\n        while ((b = fis.read(d)) != -1) {\n            cos.write(d, 0, b);\n        }\n\n        OutputStream outputEncrypted = new FileOutputStream(dir + File.separator + encryptedName);\n        outputEncrypted.write(d);\n        outputEncrypted.close();\n\n\n        fos.flush();\n        fos.close();\n        fis.close();\n\n        MediaUtils.deleteFile(file);//delete temp file\n\n        callback.onDownloadFinish(position);\n    } catch (Exception e) {\n        e.printStackTrace();\n        callback.onDownloadError(position);\n    }\n}\n", "idx": 538}
{"project": "cipher", "commit_id": "Snippet36209725_18064.java", "target": 0, "func": "package crypto;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\n\n/**\n *\n * @author fIZI/Z47\n */\npublic class ImageCrypto extends javax.swing.JFrame {\n\n    /**\n     * Creates new form ImageCrypto\n     */\n    public ImageCrypto() {\n        initComponents();\n    }\n\n    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         \n        // TODO add your handling code here:\n        JFileChooser chooser = new JFileChooser();\n        chooser.showOpenDialog(null);\n        File f = chooser.getSelectedFile();\n        file_path.setText(f.getAbsolutePath());\n    }                                        \n\n    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         \n        // TODO add your handling code here:\n        try{\n            FileInputStream file = new FileInputStream(file_path.getText());\n            FileOutputStream outStream = new FileOutputStream(\"C:\\\\Users\\\\Z47\\\\Desktop\\\\Encrypt Image.jpg\");\n            byte k[]=\"FiZi1701NuLl5252\".getBytes();\n            SecretKeySpec key = new SecretKeySpec(k, \"AES\");\n            Cipher enc = Cipher.getInstance(\"AES\");\n            enc.init(Cipher.ENCRYPT_MODE, key);\n            CipherOutputStream cos = new CipherOutputStream(outStream, enc);\n            byte[] buf = new byte[1024];\n            int read;\n            while((read=file.read(buf))!=-1){\n                cos.write(buf,0,read);\n            }\n            file.close();\n            outStream.flush();\n            cos.close();\n            JOptionPane.showMessageDialog(null, \"The image was encrypted successfully !\");\n        }catch(Exception e){\n            JOptionPane.showMessageDialog(null, e);\n        }\n    }                                        \n\n    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         \n        // TODO add your handling code here:\n        try{\n            FileInputStream file = new FileInputStream(file_path.getText());\n            FileOutputStream outStream = new FileOutputStream(\"C:\\\\Users\\\\Z47\\\\Desktop\\\\Decrypt Image.jpg\");\n            byte k[]=\"FiZi1701NuLl5252\".getBytes();\n            SecretKeySpec key = new SecretKeySpec(k, \"AES\");\n            Cipher enc = Cipher.getInstance(\"AES\");\n            enc.init(Cipher.DECRYPT_MODE, key);\n            CipherOutputStream cos = new CipherOutputStream(outStream, enc);\n            byte[] buf = new byte[1024];\n            int read;\n            while((read=file.read(buf))!=-1){\n                cos.write(buf,0,read);\n            }\n            file.close();\n            outStream.flush();\n            cos.close();\n            JOptionPane.showMessageDialog(null, \"Success! your image was decrypted. Click OK to preview the image.\");\n            Runtime.getRuntime().exec(\"rundll32 url.dll, FileProtocolHandler \"+\"C:\\\\Users\\\\Z47\\\\Desktop\\\\Decrypt Image.jpg\");\n        }catch(Exception e){\n            JOptionPane.showMessageDialog(null, e);\n        }\n    }                                        \n\n    private void file_pathActionPerformed(java.awt.event.ActionEvent evt) {                                          \n        // TODO add your handling code here:\n    }                                         \n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String args[]) {\n        /* Set the Nimbus look and feel */\n        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\n        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\n         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html \n         */\n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"Nimbus\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException ex) {\n            java.util.logging.Logger.getLogger(ImageCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (InstantiationException ex) {\n            java.util.logging.Logger.getLogger(ImageCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {\n            java.util.logging.Logger.getLogger(ImageCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(ImageCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n        //</editor-fold>\n\n        /* Create and display the form */\n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                new ImageCrypto().setVisible(true);\n            }\n        });\n    }\n    // Variables declaration - do not modify                     \n    private javax.swing.JTextField file_path;\n    private javax.swing.JButton jButton1;\n    private javax.swing.JButton jButton2;\n    private javax.swing.JButton jButton3;\n    private javax.swing.JPanel jPanel2;\n    // End of variables declaration                   \n}\n", "idx": 539}
{"project": "cipher", "commit_id": "Snippet34164395_16185.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class DesHelper { \n    private Cipher _dcipher;\n    public DesHelper() {\n       try {\n\n           byte[] tdesKey = new byte[24];\n           System.arraycopy(\"2557133392096270\".getBytes(StandardCharsets.US_ASCII), 0, tdesKey, 0, 16);\n           System.arraycopy(\"2557133392096270\".getBytes(StandardCharsets.US_ASCII), 0, tdesKey, 16, 8);\n\n           final SecretKey key = new SecretKeySpec(tdesKey, \"DESede\");\n\n           _dcipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n           final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n\n           _dcipher.init(Cipher.DECRYPT_MODE, key,iv);\n\n      } catch (final Exception e) {\n          throw new RuntimeException(e);\n      }\n  }\n\n\n  public String decrypt(final String str) {\n      try {\n\n          final byte[] dec1 = hexToBytes(str);\n          final byte[] decryptedBytes = _dcipher.doFinal(dec1);   \n          return new String(decryptedBytes, StandardCharacters.US_ASCII);\n      } catch (final Exception e) {\n          System.out.println(\"decrypting string failed: \" + str + \" (\" + e.getMessage() + \")\");\n          return null;\n      }\n  }\n\n private static byte[] hexToBytes(final String hex) {\n      final byte[] bytes = new byte[hex.length() / 2];\n      for (int i = 0; i < bytes.length; i++) {\n          bytes[i] = (byte) Integer.parseInt(hex.substring(i * 2, i * 2 + 2), 16);\n      }\n      return bytes;\n }\n", "idx": 540}
{"project": "cipher", "commit_id": "Snippet12227510_36141.java", "target": 0, "func": "private static final String KEY = \"AAAAAAAA000000000000000000000000\";\nprivate static final String IV = \"AAAAAAAA00000000\";\nprivate static final String FCN = \"Blowfish/CBC/PKCS5Padding\";\nprivate static final String CN = \"Blowfish\";\n\nfinal byte[] encoded = Base64.decode(\"eAIUXziwB8QbBexkiIDR3A==\");\nfinal SecretKeySpec key =\nnew SecretKeySpec(Hex.decodeHex(KEY.toCharArray()), CN);\nfinal Cipher cipher = Cipher.getInstance(FCN, JCE_PROVIDER);\ncipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(Hex.decodeHex(IV.toCharArray())));\nfinal byte[] decrypted = cipher.doFinal(encoded);\nreturn new String(decrypted);\n", "idx": 541}
{"project": "cipher", "commit_id": "Snippet16864197_204.java", "target": 0, "func": "public class Encryption {\n     public static String encrypt(String seed, String cleartext) throws Exception {\n            byte[] rawKey = getRawKey(seed.getBytes());\n            byte[] result = encrypt(rawKey, cleartext.getBytes());\n            return toHex(result);\n        }\n\n        public static String decrypt(String seed, String encrypted) throws Exception {\n            byte[] rawKey = getRawKey(seed.getBytes());\n            byte[] enc = toByte(encrypted);\n            byte[] result = decrypt(rawKey, enc);\n            return new String(result);\n        }\n\n        private static byte[] getRawKey(byte[] seed) throws Exception {\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n            SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n            sr.setSeed(seed);\n            kgen.init(128, sr); // 192 and 256 bits may not be available\n            SecretKey skey = kgen.generateKey();\n            byte[] raw = skey.getEncoded();\n            return raw;\n        }\n\n\n        private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n            byte[] encrypted = cipher.doFinal(clear);\n            return encrypted;\n        }\n\n        private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n            byte[] decrypted = cipher.doFinal(encrypted);\n            return decrypted;\n        }\n\n        public static String toHex(String txt) {\n            return toHex(txt.getBytes());\n        }\n        public static String fromHex(String hex) {\n            return new String(toByte(hex));\n        }\n\n        public static byte[] toByte(String hexString) {\n            int len = hexString.length()/2;\n            byte[] result = new byte[len];\n            for (int i = 0; i < len; i++)\n                result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n            return result;\n        }\n\n        public static String toHex(byte[] buf) {\n            if (buf == null)\n                return \"\";\n            StringBuffer result = new StringBuffer(2*buf.length);\n            for (int i = 0; i < buf.length; i++) {\n                appendHex(result, buf[i]);\n            }\n            return result.toString();\n        }\n        private final static String HEX = \"0123456789ABCDEF\";\n        private static void appendHex(StringBuffer sb, byte b) {\n            sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n        }\n}\n", "idx": 542}
{"project": "cipher", "commit_id": "Snippet19878196_2567.java", "target": 0, "func": "public static String encryptBlowFish(String to_encrypt, String salt){\n    String dbpassword = null;\n    try{\n        SecretKeySpec skeySpec = new SecretKeySpec( salt.getBytes(), \"Blowfish\" );\n\n        // Instantiate the cipher.\n        Cipher cipher = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        //byte[] encrypted = cipher.doFinal( URLEncoder.encode(data).getBytes() );\n        byte[] encrypted = cipher.doFinal( to_encrypt.getBytes() );\n        dbpassword = new String(encrypted);\n    } catch (Exception e) {\n        System.out.println(\"Exception while encrypting\");\n        e.printStackTrace();\n         dbpassword = null;\n    } finally {\n        return  dbpassword;\n    }\n}\n\npublic static String decryptBlowFish(String to_decrypt, String salt){\n    String dbpassword = null;\n    try{\n        SecretKeySpec skeySpec = new SecretKeySpec( salt.getBytes(), \"Blowfish\" );\n\n        // Instantiate the cipher.\n        Cipher cipher = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        //byte[] encrypted = cipher.doFinal( URLEncoder.encode(data).getBytes() );\n        byte[] encrypted = cipher.doFinal( to_decrypt.getBytes() );\n        dbpassword = new String(encrypted);\n    } catch (Exception e) {\n        System.out.println(\"Exception while decrypting\");\n        e.printStackTrace();\n        dbpassword = null;\n    } finally {\n        return  dbpassword;\n    }\n}\n", "idx": 543}
{"project": "cipher", "commit_id": "Snippet6847024_32404.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n", "idx": 544}
{"project": "cipher", "commit_id": "Snippet23293892_5641.java", "target": 0, "func": "import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;\nimport java.io.PrintStream;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class SecureCardData\n{\n  public static final String retailerid = \"61220121\";\n\n  public String encryptData(String sData)\n    throws Exception\n  {\n    byte[] bPrivateKey = \"61220121\".getBytes();\n    SecretKeySpec spec = new SecretKeySpec(bPrivateKey, \"DES\");\n    Cipher cipher = Cipher.getInstance(\"DES\");\n    cipher.init(1, spec);\n    byte[] bEncryptedData = cipher.doFinal(sData.getBytes());\n    return Base64.encode(bEncryptedData);\n  }\n\n  public String decryptData(String sData)\n    throws Exception\n  {\n    byte[] bPrivateKey = \"61220121\".getBytes();\n    SecretKeySpec spec = new SecretKeySpec(bPrivateKey, \"DES\");\n    Cipher cipher = Cipher.getInstance(\"DES\");\n    cipher.init(2, spec);\n    byte[] bencryptedData = Base64.decode(sData);\n    byte[] bDecryptedData = cipher.doFinal(bencryptedData);\n    return new String(bDecryptedData);\n  }\n\n  public static void main(String[] args)\n    throws Exception\n  {\n    String s = \"1800585544448888|445|0611\";\n    SecureCardData sd = new SecureCardData();\n    String ss = sd.encryptData(s);\n    System.out.println(ss);\n\n    ss = sd.decryptData(ss);\n    System.out.println(ss);\n  }\n}\n", "idx": 545}
{"project": "cipher", "commit_id": "Snippet30816219_12975.java", "target": 0, "func": "byte[] key = \"testKeyMaster123\".getBytes(\"UTF-8\");\nSecretKeySpec _secretKey = new SecretKeySpec(key, \"AES\");\nString input = \"some.email.m@gmail.com\";\nCipher cipher = Cipher.getInstance(\"AES\");\nbyte[] bytes = input.getBytes(\"UTF-8\");\ncipher.init(Cipher.ENCRYPT_MODE, _secretKey);\nbyte[] output = cipher.doFinal(bytes);\nresult = Base64.encodeToString(output, Base64.DEFAULT);\n", "idx": 546}
{"project": "cipher", "commit_id": "Snippet43860936_25980.java", "target": 0, "func": "public class CipherFactory extends BasePooledObjectFactory<Cipher> {\n\n    private boolean running = false;\n\n    @Override\n    public Cipher create() throws Exception {\n        return Cipher.getInstance(\"DESede/CBC/NoPadding\");\n    }\n\n    @Override\n    public PooledObject<Cipher> wrap(Cipher arg0) {\n        return new DefaultPooledObject<Cipher>(arg0);\n    }\n\n    @Override\n    public boolean validateObject(PooledObject<Cipher> p) {\n        //Ensures that the instance is safe to be returned by the pool\n        return true;\n    }\n\n    @Override\n    public void destroyObject(PooledObject<Cipher> p) {\n        //Destroys an instance no longer needed by the pool. \n        System.out.println(\"destroying\");\n    }\n\n    @Override\n    public void activateObject(PooledObject<Cipher> p) throws Exception { //Reinitialize an instance to be returned by the pool\n\n        setRunning(true);\n    }\n\n    @Override\n    public void passivateObject(PooledObject<Cipher> p) throws Exception {   // reset the object after the object returns to the pool\n\n        setRunning(false);\n    }\n\n    public void setRunning(boolean running) {\n\n        this.running = running;\n    }\n//    \n}\n", "idx": 547}
{"project": "cipher", "commit_id": "Snippet19623518_2348.java", "target": 0, "func": "Cipher desCipher\n// Create the cipher \ndesCipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\ndesCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\nbyte[] textEncrypted = desCipher.doFinal(msgBytes);\n", "idx": 548}
{"project": "cipher", "commit_id": "Snippet21038504_3617.java", "target": 0, "func": "public static String encryptToBase64(String data, String key){\n    try {\n        byte[] valueByte = encrypt(data.getBytes(\"utf-8\"), key.getBytes(\"utf-8\");\n        return new String(Base64.encode(valueByte));\n    } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(\"encrypt fail!\", e);\n    }\n\n}\n\n public static byte[] encrypt(byte[] data, byte[] key) {\n\n    if(key.length!=16){\n        throw new RuntimeException(\"Invalid AES key length (must be 16 bytes)\");\n    }\n    try {\n        SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\"); \n        byte[] enCodeFormat = secretKey.getEncoded();\n        SecretKeySpec seckey = new SecretKeySpec(enCodeFormat,\"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, seckey);// \u521d\u59cb\u5316\n        byte[] result = cipher.doFinal(data);\n        return result; // \u52a0\u5bc6\n    } catch (Exception e){\n        throw new RuntimeException(\"encrypt fail!\", e);\n    }\n}\n", "idx": 549}
{"project": "cipher", "commit_id": "Snippet33818977_15846.java", "target": 0, "func": "cipher = Cipher.getInstance(\"DES\") \n", "idx": 550}
{"project": "cipher", "commit_id": "Snippet6575450_32211.java", "target": 0, "func": "Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\nbyte[] keyBytes = DES_KEY.getBytes(); //<== The same as above\n\nSecretKeySpec keySpec = new SecretKeySpec(keyBytes, \"AES\");\n\ntry {\n    // Return the raw bytes \n    byte []data = Base64.decode(encryptedContent);\n\n    // Gets the Cipher...\n    final Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n    cipher.init(Cipher.DECRYPT_MODE, keySpec);\n\n    String resultString = new String(cipher.doFinal(data));\n} catch (Exception ex) {\n    ...\n}\n", "idx": 551}
{"project": "cipher", "commit_id": "Snippet14483756_37770.java", "target": 0, "func": "public static void main(String[] args) throws Exception {\n     // generate key\n     KeyGenerator keyGen = KeyGenerator.getInstance(\"Blowfish\");\n     SecretKey secretKey = keyGen.generateKey();\n     // get Cipher and init it for encryption\n     Cipher cipher = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\");\n     cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n     String data=\"u7mzqw2\";\n\n     // encrypt data\n     byte[] cipherText = cipher.doFinal(data.getBytes());\n     // get the initialization vector from the cipher\n     byte[] ivBytes = cipher.getIV();\n     IvParameterSpec iv = new IvParameterSpec(ivBytes);\n\n     byte[] keyBytes = secretKey.getEncoded();\n     // create a SecretKeySpec from key material\n     SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, \"Blowfish\");\n     // get Cipher and init it for encryption\n     cipher = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\");\n     cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, iv);\n     byte[] plainText = cipher.doFinal(cipherText);\n     System.out.println(new String(plainText));\n}\n", "idx": 552}
{"project": "cipher", "commit_id": "Snippet43718918_25843.java", "target": 0, "func": "public static class TokenizerMapper extends Mapper<Object, Text, IntWritable, Text>\n{\n    private Text one = new Text();\n    private static IntWritable word = new IntWritable(1);    \n    public void map(Object key, Text value, Context context) throws IOException, InterruptedException\n    {\n        String plainText = value.toString();\n\n        int leng =  plainText.length();\n        int num = leng / 128;\n        int i = 0;\n        String[] arr;\n        List<String> list = new ArrayList<String>();\n        while (i<num)\n        {\n            list.add(plainText.substring(num*i, num*(i+1)-1));\n             i++;\n        }   \n        Iterator iterator = list.iterator();\n        while (iterator.hasNext()) \n        {\n            try{\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n            keyGenerator.init(128);\n            SecretKey secretKey = keyGenerator.generateKey();\n            cipher = Cipher.getInstance(\"AES\");\n            ///////////////////////////////////\n            String blocktext = (String) iterator.next();\n            byte[] plainTextByte = blocktext.getBytes();\n            /////////////////////////////////// \n            //byte[] plainTextByte = plainText.getBytes();\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            byte[] encryptedByte = cipher.doFinal(plainTextByte);\n            Base64.Encoder encoder = Base64.getEncoder();\n            String encryptedText = encoder.encodeToString(encryptedByte);\n            one.set(encryptedText);\n                context.write(word, one);\n            }\n            catch (Exception e){System.out.println(e);}\n        }   \n    }\n}//end of TokenizerMapper class\n", "idx": 553}
{"project": "cipher", "commit_id": "Snippet42225119_24191.java", "target": 0, "func": "private static byte[] encryptText(String plaintext, byte[] keyBytes) throws Exception {\n    // Get plaintext as ASCII byte array\n    final byte[] plainBytes;\n    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {\n        plainBytes = plaintext.getBytes(StandardCharsets.US_ASCII);\n    } else {\n        plainBytes = plaintext.getBytes(\"US-ASCII\");\n    }\n\n    // Generate triple DES key from byte array\n    final DESedeKeySpec keySpec = new DESedeKeySpec(keyBytes);\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DESede\");\n    SecretKey key = keyFactory.generateSecret(keySpec);\n\n    // Setup the cipher\n    final Cipher c3des = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    c3des.init(Cipher.ENCRYPT_MODE, key);\n\n    // Return ciphertext\n    return c3des.doFinal(plainBytes);\n}\n", "idx": 554}
{"project": "cipher", "commit_id": "Snippet7797626_32954.java", "target": 0, "func": "public static String decrypt(String seed, String encrypted) throws Exception {\n  byte[] keyb = seed.getBytes(\"UTF-8\");\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n  byte[] thedigest = md.digest(keyb);\n  SecretKeySpec skey = new SecretKeySpec(thedigest, \"AES/ECB/PKCS7Padding\");\n  Cipher dcipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n  dcipher.init(Cipher.DECRYPT_MODE, skey);\n\n  byte[] clearbyte = dcipher.doFinal(toByte(encrypted));\n  return new String(clearbyte);\n}\n\npublic static byte[] toByte(String hexString) {\n  int len = hexString.length()/2;\n  byte[] result = new byte[len];\n  for (int i = 0; i < len; i++)\n    result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n  return result;\n}\n", "idx": 555}
{"project": "cipher", "commit_id": "Snippet23529733_5896.java", "target": 0, "func": "public class DESUtil\n{\n    private static final String Algorithm = \"DESede/ECB/PKCS5Padding\";// DESede/ECB/PKCS5Padding;DESede\n\n    private static final String DESede = \"DESede\";\n\n    public static byte[] encrypt(byte[] keybyte, byte[] src)\n    throws NoSuchAlgorithmException, NoSuchPaddingException, Exception\n    {\n        SecretKey deskey = new SecretKeySpec(keybyte, DESede);\n        Cipher c1 = Cipher.getInstance(Algorithm);\n        c1.init(Cipher.ENCRYPT_MODE, deskey);\n        return c1.doFinal(src);\n    }\n\n    public static byte[] decrypt(byte[] keybyte, byte[] src)\n        throws NoSuchAlgorithmException, NoSuchPaddingException, Exception\n    {\n        SecretKey deskey = new SecretKeySpec(keybyte, DESede);\n        Cipher c1 = Cipher.getInstance(Algorithm);\n        c1.init(Cipher.DECRYPT_MODE, deskey);\n        return c1.doFinal(src);\n    }\n\n    public static String byte2hex(byte[] b)\n    {\n        StringBuffer hs = new StringBuffer();\n        String stmp = \"\";\n        for (int n = 0; n <b.length; n++)\n        {\n            stmp = (java.lang.Integer.toHexString(b[n] & 0XFF));\n            if (stmp.length() == 1)\n                hs.append(\"0\").append(stmp);\n            else\n                hs.append(stmp);\n        }\n        return hs.toString().toUpperCase(Locale.getDefault());\n    }\n\n    public static byte[] hex2byte(String hexStr)\n    {\n        if (hexStr.length() % 2 != 0)\n        {\n            AppLogger.error(\"hex2bytes's hexStr length is not even.\");\n            return null;\n        }\n\n        byte[] toBytes = new byte[hexStr.length() / 2];\n        for (int i = 0, j = 0; i <hexStr.length(); j++, i = i + 2)\n        {\n            int tmpa = Integer.decode(\n                \"0X\" + hexStr.charAt(i) + hexStr.charAt(i + 1)).intValue();\n            toBytes[j] = (byte) (tmpa & 0XFF);\n        }\n        return toBytes;\n    }\n\n\n    public static void main(String[] args)\n    {\n        Security.addProvider(new com.sun.crypto.provider.SunJCE());\n        final byte[] rawKey = \"db90e7eb\".getBytes();\n        final byte[] keyBytes = new byte[24];\n\n        for (int i = 0; i <rawKey.length; i++)\n        {\n            keyBytes[i] = rawKey[i];\n        }\n\n        for (int i = rawKey.length; i <keyBytes.length; i++)\n        {\n            keyBytes[i] = (byte)0;\n        }\n\n        String szSrc = \"20926330$AD75B1697FB5EB6345B2D412124030D2$10086$10086$10.164.111$ABCDEFGH$Reserved$CTC\";\n        System.out.println(\"string before encrypt:\" + szSrc);\n        byte[] encoded = null;\n\n        try\n        {\n            encoded = encrypt(keyBytes, szSrc.getBytes());\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n        System.out.println(\"string after encrypt::\" + byte2hex(encoded));\n\n        byte[] srcBytes = null;\n\n        try\n        {\n            srcBytes = decrypt(keyBytes, encoded);\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n        System.out.println(\"string before decode: :\" + (new String(srcBytes)));\n    }\n}\n", "idx": 556}
{"project": "cipher", "commit_id": "Snippet19378137_2194.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\", \"SunJCE\");\n", "idx": 557}
{"project": "cipher", "commit_id": "Snippet8426397_33217.java", "target": 0, "func": "BufferedReader reader = new BufferedReader(new InputStreamReader(content.getInputStream()));\nStringBuffer buffer = new StringBuffer();\nString line = reader.readLine();\nwhile (line != null) {\n    buffer.append(line + \"\\n\");\n    line = reader.readLine();\n}\nreader.close();\n\nBASE64Decoder decoder = new BASE64Decoder();\nbyte[] decodedBytes = decoder.decodeBuffer(buffer.toString());\n\nSecretKeySpec blowfishKey = new SecretKeySpec(password, \"Blowfish\");\nCipher blowfishCipher = Cipher.getInstance(\"Blowfish\");\nblowfishCipher.init(Cipher.DECRYPT_MODE, blowfishKey);\nbyte[] decryptedBytes = blowfishCipher.doFinal(decodedBytes);\n", "idx": 558}
{"project": "cipher", "commit_id": "Snippet21124475_3693.java", "target": 0, "func": "   public class FileChooser extends ListActivity {\n\n    private File currentDir;\n    private File moveToDir;\n    private FileArrayAdapter adapter;\n    public static String TAG = \"DEBUG THIS:\";\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        currentDir = new File(\"/sdcard/\");\n        fill(currentDir);\n        registerForContextMenu(getListView());\n        // get the attachment's filename\n        SharedPreferences preferences = PreferenceManager\n                .getDefaultSharedPreferences(this);\n        String attachmentFileName = preferences.getString(\"fileName\", \"\");\n\n        // save the attachment\n        try {\n            InputStream attachment = getContentResolver().openInputStream(\n                    getIntent().getData());\n\n            File savedFile = new File(Environment.getExternalStorageDirectory()\n                    .getAbsolutePath(), attachmentFileName);\n            FileOutputStream f = new FileOutputStream(savedFile);\n            byte[] buffer = new byte[1024];\n            int len1 = 0;\n            while ((len1 = attachment.read(buffer)) > 0) {\n                f.write(buffer);\n            }\n            f.close();\n        } catch (Exception e) {\n        }\n    }\n\n    // File Manager Source to view SD Card or Internal Storage Contents\n    private void fill(File f) {\n        File[] dirs = f.listFiles();\n        this.setTitle(\"Current Dir: \" + f.getName());\n        List<Item> dir = new ArrayList<Item>();\n        List<Item> fls = new ArrayList<Item>();\n        try {\n            for (File ff : dirs) {\n                Date lastModDate = new Date(ff.lastModified());\n                DateFormat formater = DateFormat.getDateTimeInstance();\n                String date_modify = formater.format(lastModDate);\n                if (ff.isDirectory()) {\n\n                    File[] fbuf = ff.listFiles();\n                    int buf = 0;\n                    if (fbuf != null) {\n                        buf = fbuf.length;\n                    } else\n                        buf = 0;\n                    String num_item = String.valueOf(buf);\n                    if (buf == 0)\n                        num_item = num_item + \" item\";\n                    else\n                        num_item = num_item + \" items\";\n\n                    // String formated = lastModDate.toString();\n                    dir.add(new Item(ff.getName(), num_item, date_modify, ff\n                            .getAbsolutePath(), \"directory_icon\"));\n                } else {\n\n                    fls.add(new Item(ff.getName(), ff.length() + \" Byte\",\n                            date_modify, ff.getAbsolutePath(), \"file_icon\"));\n                }\n            }\n        } catch (Exception e) {\n\n        }\n        Collections.sort(dir);\n        Collections.sort(fls);\n        dir.addAll(fls);\n        if (!f.getName().equalsIgnoreCase(\"sdcard\"))\n            dir.add(0, new Item(\"..\", \"Parent Directory\", \"\", f.getParent(),\n                    \"directory_up\"));\n        adapter = new FileArrayAdapter(FileChooser.this, R.layout.file_view,\n                dir);\n        this.setListAdapter(adapter);\n    }\n\n    // onClick listener to move back one directory\n    @Override\n    protected void onListItemClick(ListView l, View v, int position, long id) {\n        // TODO Auto-generated method stub\n        super.onListItemClick(l, v, position, id);\n        Item o = adapter.getItem(position);\n        if (o.getImage().equalsIgnoreCase(\"directory_icon\")\n                || o.getImage().equalsIgnoreCase(\"directory_up\")) {\n            currentDir = new File(o.getPath());\n            fill(currentDir);\n        } else {\n            onFileClick(o);\n        }\n    }\n\n    // open file onClick\n    private void onFileClick(Item o) {\n\n        Intent intent = new Intent();\n        intent.putExtra(\"GetPath\", currentDir.toString());\n        intent.putExtra(\"GetFileName\", o.getName());\n        setResult(RESULT_OK, intent);\n        finish();\n    }\n\n    @Override\n    public void onCreateContextMenu(ContextMenu menu, View v,\n            ContextMenuInfo menuInfo) {\n        super.onCreateContextMenu(menu, v, menuInfo);\n        menu.setHeaderTitle(\"Context Menu\");\n        menu.add(0, v.getId(), 0, \"Copy\");\n        menu.add(0, v.getId(), 0, \"Paste\");\n        menu.add(0, v.getId(), 0, \"Delete\");\n        menu.add(0, v.getId(), 0, \"Encrypt\");\n        menu.add(0, v.getId(), 0, \"Decrypt\");\n    }\n\n    @Override\n    public boolean onContextItemSelected(MenuItem item) {\n        if (item.getTitle() == \"Copy\") {\n            function1(item.getItemId());\n        }\n        if (item.getTitle() == \"Paste\") {\n            function2(item.getItemId());\n        }\n        if (item.getTitle() == \"Delete\") {\n            function3(item.getItemId());\n        }\n        if (item.getTitle() == \"Encrypt\") {\n            function4(item.getItemId());\n        }\n        if (item.getTitle() == \"Decrypt\") {\n            function5(item.getItemId());\n        } else {\n        }\n        return false;\n\n    }\n\n    public void function1(int id) {\n        Toast.makeText(this, \"Copy\", Toast.LENGTH_SHORT).show();\n\n        try {\n\n            File sd = Environment.getExternalStorageDirectory();\n            currentDir = new File(sd.getAbsolutePath());\n            moveToDir = new File(sd.getAbsolutePath());\n            copyDirectoryOneLocationToAnotherLocation(currentDir, currentDir);\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    }\n\n    public void function2(int id) {\n\n        Toast.makeText(this, \"Paste\", Toast.LENGTH_SHORT).show();\n    }\n\n    public void function3(int id) {\n        Toast.makeText(this, \"Delete\", Toast.LENGTH_SHORT).show();\n        DeleteRecursive(currentDir);\n    }\n\n    public void function4(int id) {\n        Toast.makeText(this, \"Encrypt\", Toast.LENGTH_SHORT).show();\n        //encrypt(null, null, null);\n        // encrypt(String PlaintextFile, String Key, String CiphertextFile);\n          encrypt(\"D:\\\\plaintext.txt\", \"testkey\", \"D:\\\\ciphertext.txt\");\n    }\n\n    public void function5(int id) {\n        Toast.makeText(this, \"Decrypt\", Toast.LENGTH_SHORT).show();\n        decrypt(null, null, null);\n        // decrypt(String PlaintextFile, String Key, String CiphertextFile);\n\n    }\n\n    private void DeleteRecursive(File fileOrDirectory) {\n\n        if (fileOrDirectory.isDirectory()) {\n            File[] children = fileOrDirectory.listFiles();\n            if (null != children) {\n                for (File child : children)\n                    DeleteRecursive(child);\n            }\n        }\n\n        fileOrDirectory.delete();\n\n    }\n\n    public static void copyDirectoryOneLocationToAnotherLocation(\n            File sourceLocation, File targetLocation) throws IOException {\n\n        if (sourceLocation.isDirectory()) {\n            if (!targetLocation.exists()) {\n                targetLocation.mkdir();\n            }\n\n            String[] children = sourceLocation.list();\n            for (int i = 0; i < sourceLocation.listFiles().length; i++) {\n\n                copyDirectoryOneLocationToAnotherLocation(new File(\n                        sourceLocation, children[i]), new File(targetLocation,\n                        children[i]));\n            }\n        } else {\n\n            InputStream in = new FileInputStream(Environment\n                    .getExternalStorageDirectory().getPath());\n\n            OutputStream out = new FileOutputStream(Environment\n                    .getExternalStorageDirectory().getPath());\n            Log.d(\"TEST\", \"source: \" + in);\n            Log.d(\"TEST\", \"target: \" + out);\n\n            // Copy the bits from instream to outstream\n            byte[] buf = new byte[1024];\n            int len;\n            while ((len = in.read(buf)) > 0) {\n                out.write(buf, 0, len);\n            }\n            in.close();\n            out.close();\n        }\n\n    }\n\n    public static void encrypt(String PlaintextFile, String Key,\n            String CiphertextFile) {\n        try {\n            byte[] KeyData = Key.getBytes();\n            SecretKeySpec KS = new SecretKeySpec(KeyData, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, KS);\n            FileInputStream fis = new FileInputStream(PlaintextFile);\n            CipherInputStream cis = new CipherInputStream(fis, cipher);\n            FileOutputStream fos = new FileOutputStream(CiphertextFile);\n            byte[] b = new byte[1024];\n            int i = cis.read(b);\n            while (i != -1) {\n                fos.write(b, 0, i);\n                i = cis.read(b);\n            }\n            fos.flush();\n            fos.close();\n            fis.close();\n            cis.close();\n            System.out.println(\"Encryption Successfull !!!\");\n\n        } catch (NoSuchAlgorithmException exception) {\n            // do something.\n\n            Thread.currentThread().getStackTrace();\n        } catch (NoSuchPaddingException exception) {\n            // do something (else?).\n            Thread.currentThread().getStackTrace();\n        } catch (InvalidKeyException exception) {\n            // do something.\n            Thread.currentThread().getStackTrace();\n        } catch (IOException exception) {\n            // do something (else?).\n            Thread.currentThread().getStackTrace();\n\n        }\n\n    }\n\n    public static void decrypt(String CiphertextFile, String Key,\n            String DecipheredFile) {\n        try {\n            byte[] KeyData = Key.getBytes();\n            SecretKeySpec KS = new SecretKeySpec(KeyData, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, KS);\n            FileInputStream fis = new FileInputStream(CiphertextFile);\n            FileOutputStream fos = new FileOutputStream(DecipheredFile);\n            CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n            byte[] b = new byte[1024];\n            int i = fis.read(b);\n            while (i != -1) {\n                cos.write(b, 0, i);\n                i = fis.read(b);\n            }\n            fos.flush();\n            fos.close();\n            fis.close();\n            cos.flush();\n            cos.close();\n            System.out.println(\"Decryption Successfull !!!\");\n\n        } catch (NoSuchAlgorithmException exception) {\n            // do something.\n\n            Thread.currentThread().getStackTrace();\n        } catch (NoSuchPaddingException exception) {\n            // do something (else?).\n            Thread.currentThread().getStackTrace();\n        } catch (InvalidKeyException exception) {\n            // do something.\n            Thread.currentThread().getStackTrace();\n        } catch (IOException exception) {\n            // do something (else?).\n            Thread.currentThread().getStackTrace();\n\n        }\n\n    }\n     public static void main(String[] args) {\n            encrypt(\"D:\\\\plaintext.txt\", \"testkey\", \"D:\\\\ciphertext.txt\");\n            decrypt(\"D:\\\\ciphertext.txt\", \"testkey\", \"D:\\\\originaltext.txt\");\n        }\n}\n", "idx": 559}
{"project": "cipher", "commit_id": "Snippet22561689_4916.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\n", "idx": 560}
{"project": "cipher", "commit_id": "Snippet41286149_23253.java", "target": 0, "func": "import javax.crypto.BadPaddingException;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\n/**\n * Created by Ashish Pancholi on 22-12-2016.\n */\npublic class EncryDecryPtion implements Securable{\n    public static void main(String[] argu){\n        EncryDecryPtion encryDecryPtion = new EncryDecryPtion();\n        File file = new File(\"shouldbeoriginal.jpg\");\n        try {\n            encryDecryPtion.encryptFile(file,\"Pa$$w0rd\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        }\n\n        File file_ = new File(\"shouldbeoriginal.jpg\");\n        try {\n            encryDecryPtion.decryptFile(file_,\"Pa$$w0rd\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        }\n    }\n} \n\n\n\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\n/**\n * Encrypt and decrypt file with AES algorithm\n * Created by Ashish Pancholi on 20-12-2016.\n */\npublic interface Securable {\n\n    /**\n     * Read and write the file in chunk.\n     * Encrypts the chunks with AES algorithm.\n     * It creates a new a file which having encrypted data,\n     * deletes old original file and\n     * rename a new file with the old file\n     * @param file which is to be encrypted and password.\n     */\n\n    default File encryptFile(File file, String password) throws IOException, NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchPaddingException {\n        AESEncryptionDecryption aesEncryptionDecryption = new AESEncryptionDecryption(password);\n        String encryptedFilePath = file.getAbsolutePath() + \".ENCRYPTED\";\n        File encryptedFile = new File(encryptedFilePath);\n        encryptedFile.createNewFile();\n        try\n                (FileInputStream in = new FileInputStream(file)) {\n\n            try\n                    (OutputStream out = new FileOutputStream(encryptedFile)) {\n                byte[] chunk = new byte[1024];\n                int chunkLen = 0;\n                while ((chunkLen = in.read(chunk)) != -1) {\n                    byte[] encryptedChunk = aesEncryptionDecryption.encrypt(chunk);\n                    out.write(encryptedChunk);\n                }\n            }\n        }\n        Path path_originalFile = Paths.get(file.getAbsolutePath());\n        Path path_encryptedFile = Paths.get(encryptedFile.getAbsolutePath());\n        try {\n            Files.delete(path_originalFile);\n        }catch (IOException ex){\n            try {\n                FileUtils.forceDelete(file);\n            }catch (IOException ex1){\n                //ignore\n            }\n        }\n        Path path = Files.move(path_encryptedFile, path_originalFile);\n        return path.toFile();\n    }\n\n    default File encryptWholeFile(File file, String password) throws IOException, NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchPaddingException {\n        AESEncryptionDecryption aesEncryptionDecryption = new AESEncryptionDecryption(password);\n        String encryptedFilePath = file.getAbsolutePath() + \".ENCRYPTED\";\n        File encryptedFile = new File(encryptedFilePath);\n        encryptedFile.createNewFile();\n        try(FileInputStream in = new FileInputStream(file)) {\n            byte[] bytes = IOUtils.toByteArray(in);\n            byte[] encryptedChunk = aesEncryptionDecryption.encrypt(bytes);\n            FileUtils.writeByteArrayToFile(encryptedFile, encryptedChunk);\n        }\n        Path path_originalFile = Paths.get(file.getAbsolutePath());\n        Path path_encryptedFile = Paths.get(encryptedFile.getAbsolutePath());\n        try {\n            Files.delete(path_originalFile);\n        }catch (IOException ex){\n            try {\n                FileUtils.forceDelete(file);\n            }catch (IOException ex1){\n                //ignore\n            }\n        }\n        Path path = Files.move(path_encryptedFile, path_originalFile);\n        return path.toFile();\n    }\n\n    /**\n     * Read and write the file in chunk.\n     * Encrypts the chunks with AES algorithm.\n     * It creates a new a file which having encrypted data,\n     * deletes old original file and\n     * rename a new file with the old file\n     * @param inputStream of file which is to be encrypted and a password.\n     */\n    default InputStream encryptFile(InputStream inputStream, String password) throws IOException, NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchPaddingException {\n        InputStream in;\n        try {\n            AESEncryptionDecryption aesEncryptionDecryption = new AESEncryptionDecryption(password);\n            try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n                byte[] chunk = new byte[1024];\n                int chunkLen = 0;\n                while ((chunkLen = inputStream.read(chunk)) != -1) {\n                    byte[] encryptedChunk = aesEncryptionDecryption.encrypt(chunk);\n                    baos.write(encryptedChunk);\n                }\n                baos.flush();\n                in = new ByteArrayInputStream(baos.toByteArray());\n            }\n        }finally {\n            inputStream.close();\n        }\n        return in;\n    }\n\n    /**\n     * Read and write the file in chunk.\n     * Encrypts the chunks with AES algorithm.\n     * It creates a new a file which having encrypted data,\n     * deletes old original file and\n     * rename a new file with the old file\n     * @param inputStream of file which is to be encrypted and a password.\n     */\n    default File encryptFile(InputStream inputStream, String password, String targetFileName) throws IOException, NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchPaddingException {\n        File encryptedFile = new File(targetFileName);\n        try {\n            AESEncryptionDecryption aesEncryptionDecryption = new AESEncryptionDecryption(password);\n            encryptedFile.getParentFile().mkdirs();\n            encryptedFile.createNewFile();\n            try (OutputStream baos = new FileOutputStream(encryptedFile)) {\n                byte[] chunk = new byte[1024];\n                int chunkLen = 0;\n                while ((chunkLen = inputStream.read(chunk)) != -1) {\n                    byte[] encryptedChunk = aesEncryptionDecryption.encrypt(chunk);\n                    baos.write(encryptedChunk);\n                }\n            }\n        }finally {\n            inputStream.close();\n        }\n        return encryptedFile;\n\n    }\n\n    /**\n     * Read and write the file in chunk.\n     * Decrypts the chunks with AES algorithm.\n     * It creates a new a file which having decrypted data,\n     * deletes old original encrypted file and\n     * rename a new file with the old file\n     * @param file which is to be decrypted and password.\n     */\n\n    default void decryptFile(File file, String password) throws IOException, NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchPaddingException {\n        AESEncryptionDecryption aesEncryptionDecryption = new AESEncryptionDecryption(password);\n        String decryptedFilePath = file.getAbsolutePath() + \".DECRYPTED\";\n        File decryptedFile = new File(decryptedFilePath);\n        decryptedFile.createNewFile();\n        try\n                (FileInputStream in = new FileInputStream(file)) {\n\n            try\n                    (OutputStream out = new FileOutputStream(decryptedFile)) {\n                byte[] chunk = new byte[1024];\n                int chunkLen = 0;\n                while ((chunkLen = in.read(chunk)) != -1) {\n                    byte[] encryptedChunk = aesEncryptionDecryption.decrypt(chunk);\n                    out.write(encryptedChunk);\n                }\n            }\n        }\n        Path path_originalFile = Paths.get(file.getAbsolutePath());\n        Path path_decryptedFile = Paths.get(decryptedFile.getAbsolutePath());\n        try {\n            Files.delete(path_originalFile);\n        }catch (IOException ex){\n            try {\n                FileUtils.forceDelete(file);\n            }catch (IOException ex1){\n                //ignore\n            }\n        }\n        Files.move(path_decryptedFile, path_originalFile);\n    }\n\n    default File decryptWholeFile(File file, String password) throws IOException, NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchPaddingException {\n        AESEncryptionDecryption aesEncryptionDecryption = new AESEncryptionDecryption(password);\n        String decryptedFilePath = file.getAbsolutePath() + \".DECRYPTED\";\n        File decryptedFile = new File(decryptedFilePath);\n        decryptedFile.createNewFile();\n        try(FileInputStream in = new FileInputStream(file)) {\n                byte[] bytes = IOUtils.toByteArray(in);\n                byte[] encryptedChunk = aesEncryptionDecryption.decrypt(bytes);\n                FileUtils.writeByteArrayToFile(decryptedFile, encryptedChunk);\n          }\n        Path path_originalFile = Paths.get(file.getAbsolutePath());\n        Path path_decryptedFile = Paths.get(decryptedFile.getAbsolutePath());\n        try {\n            Files.delete(path_originalFile);\n        }catch (IOException ex){\n            try {\n                FileUtils.forceDelete(file);\n            }catch (IOException ex1){\n                //ignore\n            }\n        }\n       Path path =  Files.move(path_decryptedFile, path_originalFile);\n        return path.toFile();\n    }\n\n}\n\n\nimport org.apache.commons.io.FileUtils;\nimport java.io.File;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.InvalidKeyException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\n\n/**\n * Encrypt and decrypt file with AES algorithm\n * Created by Ashish Pancholi on 20-12-2016.\n */\n\npublic class AESEncryptionDecryption {\n\n    private SecretKeySpec secretKey;\n    private byte[] key;\n\n    public AESEncryptionDecryption(String password) throws NoSuchAlgorithmException, UnsupportedEncodingException{\n        MessageDigest sha = null;\n        key = password.getBytes(\"UTF-8\");\n        sha = MessageDigest.getInstance(\"SHA-1\");\n        key = sha.digest(key);\n        key = Arrays.copyOf(key, 16); // use only first 128 bit\n        this.secretKey = new SecretKeySpec(key, \"AES\");\n    }\n\n    /**\n     * Encrypts the file with AES algorithm\n     * @param bytes of file which is to encrypted\n     * @return byte[] which is encrypted bytes\n     */\n    public byte[] encrypt(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, this.secretKey);\n            byte[] encrytedBytes = cipher.doFinal(bytes);\n            return encrytedBytes;\n\n    }\n\n    /**\n     * Decrypts the file with AES algorithm\n     * @param encrytedBytes of file that to be decrypted\n     * @return byte[] which is original data.\n     */\n    public byte[] decrypt(byte[] encrytedBytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        cipher.init(Cipher.DECRYPT_MODE, this.secretKey);\n        byte[] bytes = cipher.doFinal(encrytedBytes);\n        return bytes;\n    }\n}\n", "idx": 561}
{"project": "cipher", "commit_id": "Snippet42154479_23934.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, secretKey_AES);\nbyte[] decrypted = cipher.doFinal(Base64.decode(message,Base64.DEFAULT));\nString decryptedMessage = new String(Base64.encode(decrypted, Base64.DEFAULT));\nreturn decryptedMessage;\n", "idx": 562}
{"project": "cipher", "commit_id": "Snippet26482147_8622.java", "target": 0, "func": "import java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport javax.swing.JFormattedTextField;\nimport java.io.ObjectOutputStream;\nimport java.security.Key;\nimport java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.KeyGenerator;\nimport javax.swing.JButton;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport javax.swing.JTextField;\nimport javax.swing.JLabel;\nimport javax.swing.JPasswordField;\nimport javax.swing.WindowConstants;\npublic class aa extends javax.swing.JFrame {\nprivate JButton jButton1;\nprivate JButton jButton2;\nprivate JLabel jLabel2;\nprivate JLabel jLabel3;\nprivate JButton jButton3;\nprivate JPasswordField jPasswordField1;\nprivate JLabel jLabel1;\nprivate JTextField jTextField1;\nprivate JTextField jTextField3;\n\n/**\n* Auto-generated main method to display this JFrame\n*/\npublic static void main(String[] args) {\naa inst = new aa();\ninst.setVisible(true);\n}\n\npublic aa() {\nsuper();\ninitGUI();\n}\n\nprivate void initGUI() {\ntry {\nsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\nthis.getContentPane().setLayout(null);\nthis.setTitle(\"Program Enkripsi Dekripsi\");\n{\njButton1 = new JButton();\nthis.getContentPane().add(jButton1);\njButton1.setText(\"Enkripsi\");\njButton1.setBounds(70, 88, 58, 24);\njButton1.addActionListener(new ActionListener() {\npublic void actionPerformed(ActionEvent evt) {\n\n//TODO add your code for jButton10.actionPerformed\nsaveFile();\n\n}\n});\n}\n{\njTextField1 = new JTextField();\nthis.getContentPane().add(jTextField1);\njTextField1.setBounds(71, 17, 141, 19);\n}\n{\njLabel1 = new JLabel();\nthis.getContentPane().add(jLabel1);\njLabel1.setText(\"Input\");\njLabel1.setBounds(8, 10, 60, 30);\n}\n{\njButton2 = new JButton();\nthis.getContentPane().add(jButton2);\njButton2.setText(\"Browse\");\njButton2.setBounds(218, 17, 65, 19);\njButton2.addActionListener(new ActionListener() {\npublic void actionPerformed(ActionEvent evt){\n//TODO add your code for jButton1.actionPerformed\nloadFile();\n}\n});\n}\n{\njLabel2 = new JLabel();\nthis.getContentPane().add(jLabel2);\njLabel2.setText(\"Password\");\njLabel2.setBounds(7, 42, 60, 30);\n}\n{\njPasswordField1 = new JPasswordField();\nthis.getContentPane().add(jPasswordField1);\njPasswordField1.setBounds(71, 47, 141, 19);\n}\n{\njButton3 = new JButton();\nthis.getContentPane().add(jButton3);\njButton3.setText(\"Dekripsi\");\njButton3.setBounds(150, 89, 62, 24);\njButton3.addActionListener(new ActionListener() {\npublic void actionPerformed(ActionEvent evt) {\nsaveFile2();\n}\n});\n}\n{\njLabel3 = new JLabel();\nthis.getContentPane().add(jLabel3);\njLabel3.setBounds(68, 112, 148, 30);\njLabel3.setFont(new java.awt.Font(\"Dialog\",0,10));\njLabel3.setForeground(new java.awt.Color(0,0,255));\n}\n\npack();\nthis.setSize(299, 170);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n\nprivate void loadFile ( ) {\nJFileChooser chooser = new JFileChooser( );\nint result = chooser.showOpenDialog(this);\nif (result == JFileChooser.CANCEL_OPTION) return;\ntry {\njTextField1.setText(chooser.getSelectedFile().getAbsolutePath());\njTextField3.setText(chooser.getSelectedFile().getName());\n}\ncatch (Exception e) {\n\n}\n}\n\nprivate void saveFile( ) {\nFile plain = new File(jTextField1.getText());\nKey key;\n//copy = chooser.getSelectedFile();\nFile copy = new File(jTextField1.getText()+\".dika\");\ntry {\nKeyGenerator generator = KeyGenerator.getInstance(\"Blowfish\");\n// initialization of keygenerator with PRNG\n\nbyte[] seed = jPasswordField1.getText().getBytes();\ngenerator.init(new SecureRandom(seed));\n// generating key\nkey = generator.generateKey();\n// creating of file\nFile kunci =new File(jTextField1.getText()+\".key\");\nObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(kunci));\n// writing key to a file\nout.writeObject(key);\n// closing of stream\nout.close();\n\nCipher cipher = Cipher.getInstance(\"Blowfish/EBC/PKCS5Padding\");\ncipher.init(Cipher.ENCRYPT_MODE, key);\nFileInputStream fis = new FileInputStream(plain);\nFileOutputStream fos = new FileOutputStream(copy);\nCipherOutputStream out2 = new CipherOutputStream(fos, cipher);\nbyte[] buffer = new byte[1024];\nwhile (fis.read(buffer)>=0) {\nout2.write(buffer);\n}\nkunci.delete();\nplain.delete();\nJOptionPane.showMessageDialog(this,\"File Berhasil dienkripsi.\");\n\n}catch(Exception e) {\n\nJOptionPane.showMessageDialog(this, e);\nJOptionPane.showMessageDialog(this,\"File Gagal dienkripsi.\");\n\n\n}finally {\n\n}\n}\n\nprivate void saveFile2( ) {\n\n//JFileChooser chooser = new JFileChooser( );\n//chooser.showSaveDialog(this);\nFile plain = new File(jTextField1.getText());\nKey key;\n//copy = chooser.getSelectedFile();\nFile copy = new File(jTextField1.getText().replaceAll(\".dika\",\"\"));\n\ntry {\nKeyGenerator generator = KeyGenerator.getInstance(\"Blowfish\");\n// initialization of keygenerator with PRNG\nbyte[] dika = jPasswordField1.getText().getBytes();\ngenerator.init(new SecureRandom(dika));\n// generating key\nkey = generator.generateKey();\nFile kunci =new File(jTextField1.getText().replaceAll(\".dika\",\"\")+\".key\");\nObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(kunci));\n// writing key to a file\nout.writeObject(key);\n// closing of stream\nout.close();\n\nCipher cipher = Cipher.getInstance(\"Blowfish/EBC/PKCS5Padding\");\ncipher.init(Cipher.DECRYPT_MODE, key);\nFileInputStream fis = new FileInputStream(plain);\nFileOutputStream fos = new FileOutputStream(copy);\nCipherOutputStream out2 = new CipherOutputStream(fos, cipher);\nbyte[] buffer = new byte[1024];\nwhile (fis.read(buffer)>=0) {\nout2.write(buffer);\n}\nfos.close();\nfis.close();\nkunci.delete();\nplain.delete();\nJOptionPane.showMessageDialog(this,\"File berhasil di dekripsi.\");\n}catch(Exception e) {\nJOptionPane.showMessageDialog(this, e);\nJOptionPane.showMessageDialog(this,\"File gagal di dekripsi.\");\n} finally {\n\n}\n\n}\n\n}\n", "idx": 563}
{"project": "cipher", "commit_id": "Snippet26426151_8568.java", "target": 0, "func": "public static String encrypt(String plainFile, String encryptedFile) throws    IOException, NoSuchAlgorithmException,\nNoSuchPaddingException, InvalidKeyException {\n    // Here you read the cleartext.\n    File extStore = Environment.getExternalStorageDirectory();\n    FileInputStream fis = new FileInputStream(plainFile);\n    // This stream write the encrypted text. This stream will be wrapped by\n    // another stream.\n    FileOutputStream fos = new FileOutputStream(encryptedFile);\n\n    // Length is 16 byte\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    // Create cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    // Wrap the output stream\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    // Write bytes\n    int b;\n    byte[] d = new byte[8];\n    while ((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    cos.flush();\n    cos.close();\n    fis.close();\n\n    return encryptedFile;\n}   \n\nstatic String decrypt(String plainFile, String encryptedFile) throws IOException, NoSuchAlgorithmException,\nNoSuchPaddingException, InvalidKeyException {\n\n    File encFile=new File(encryptedFile);\n    FileInputStream fis = new FileInputStream(encFile);\n\n    FileOutputStream fos = new FileOutputStream(plainFile);\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(),\n              \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while ((b = cis.read(d)) != -1) {\n        fos.write(d, 0, b);\n    }\n    fos.flush();\n    fos.close();\n    cis.close();\n\n    return plainFile;\n}    \n", "idx": 564}
{"project": "cipher", "commit_id": "Snippet34129586_16119.java", "target": 0, "func": "import java.security.*;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\npublic class StrongAES \n{\n\n    public static void main(String[] args) \n    {\n         //listing all available cryptographic algorithms \n\n        /* for (Provider provider: Security.getProviders()) {\n              System.out.println(provider.getName());\n              for (String key: provider.stringPropertyNames())\n                System.out.println(\"\\t\" + key + \"\\t\" + provider.getProperty(key));\n            }*/\n        StrongAES saes = new StrongAES();\n        String encrypt = saes.encrypt(new String(\"Bar12346Bar12346\"),new String(\"1234567812345678\"));\n        //String encrypt = saes.encrypt(new String(\"Bar12346Bar12346\"),new String(\"Hello world\"));\n        System.out.println(encrypt);\n        String decrypt = saes.decrypt(new String(\"Bar12346Bar12346\"), new String(encrypt));\n        System.out.println(decrypt);\n    }\n\n\n    String encrypt(String key, String text) \n    {\n        String encryptedText=\"\";\n        try{\n         // Create key and cipher\n        Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n\n        // encrypt the text\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n        byte[] encrypted = cipher.doFinal(text.getBytes());\n        encryptedText = new String(encrypted);\n       // System.out.println(encryptedText);\n        }\n        catch(Exception e) \n        {\n            e.printStackTrace();\n        }\n        return encryptedText;\n\n    }\n\n    String decrypt(String key, String encryptedText)\n    {\n        String decryptedText=\"\";\n        try{\n         // Create key and cipher\n        Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        // decrypt the text\n        cipher.init(Cipher.DECRYPT_MODE, aesKey);\n        decryptedText = new String(cipher.doFinal(encryptedText.getBytes()));\n       // System.out.println(\"Decrypted   \"+decryptedText);\n\n        }\n        catch(Exception e) \n        {\n            e.printStackTrace();\n        }\n        return decryptedText;\n\n    }\n\n}\n", "idx": 565}
{"project": "cipher", "commit_id": "Snippet43436954_25549.java", "target": 0, "func": "public String encrypt(String property) throws GeneralSecurityException, UnsupportedEncodingException {\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n    Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT, ITERATIONS));\n    return Base64.encodeToString(pbeCipher.doFinal(property.getBytes(\"UTF-8\")), Base64.DEFAULT);\n}\n\npublic String decrypt(String property) throws GeneralSecurityException, IOException {\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n    Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(SALT, ITERATIONS));\n    return new String(pbeCipher.doFinal(Base64.decode(property, Base64.DEFAULT)), \"UTF-8\");\n}\n", "idx": 566}
{"project": "cipher", "commit_id": "Snippet36339011_18187.java", "target": 0, "func": "public InputStream decryptInputStream(InputStream inputStream) throws Exception{\n    KeyCipher keyCipher = new keyCipher();\n    String streamContents = CharStreams.toString(new InputStreamReader(inputStream, \"UTF-8\"));\n    byte[] encrypted = Base64.decode(streamContents, DEFAULT);\n\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n    cipher.init(Cipher.DECRYPT_MODE, keyCipher.getSecretSpecKey(), keyCipher.getIvParameterSpec());\n\n    byte[] decryptedBytes = cipher.doFinal(encrypted);\n    InputStream decryptedStream = new ByteArrayInputStream(decryptedBytes);\n    return decryptedStream;\n", "idx": 567}
{"project": "cipher", "commit_id": "Snippet37710587_19684.java", "target": 0, "func": "public void decrypt(final byte[] secret, final File encryptedFile ) throws IOException {\n        final ByteArrayOutputStream baos;\n        try {\n            final Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, modelEncryptor.getKey());\n            try (FileInputStream fis = new FileInputStream(encryptedFile); CipherInputStream cis = new CipherInputStream(fis, cipher)) {\n                baos = new ByteArrayOutputStream();\n                byte[] buff = new byte[8];\n                int numRead = cis.read(buff);\n                while (numRead != -1) {\n                    baos.write(buff, 0, numRead); //I was trying to combine this write with the unzipping write.\n                    numRead = cis.read(buff);\n                }\n            }\n        } catch (Exception ex) {\n            throw new IOException(\"Unable to decrypt \" + encryptedFile, ex);\n        }\n\n        try (ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray()); ZipInputStream zipIn = new ZipInputStream(new BufferedInputStream(bais))) {\n            ZipEntry entry;\n            while ((entry = zipIn.getNextEntry()) != null) {\n                int BUFFER = 2048;\n                ByteArrayOutputStream fos = new ByteArrayOutputStream(2048);\n                try (BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER)) {\n                    int count;\n                    byte data[] = new byte[BUFFER];\n                    while ((count = zipIn.read(data, 0, BUFFER)) != -1) {\n                        dest.write(data, 0, count);\n                    }\n                    dest.flush();\n                }\n                final List<String> lines = Arrays.asList(fos.toString().split(\"\\r\\n\"));\n                //Do something with lines...\n            }\n        }\n        baos.close();\n    }\n", "idx": 568}
{"project": "cipher", "commit_id": "Snippet5777105_31800.java", "target": 0, "func": "ObjectInputStream oIn = new ObjectInputStream(new FileInputStream(new File(\"key\")));\nSecretKeySpec spec = (SecretKeySpec) oIn.readObject();\n//'key' file was saved previously\n\n\nCipher cEncrypt = Cipher.getInstance(\"AES\");\ncEncrypt.init(Cipher.ENCRYPT_MODE, spec); \nCipher cDecrypt = Cipher.getInstance(\"AES\");\ncDecrypt.init(Cipher.DECRYPT_MODE, spec); \n//should have no problems here, I tried the ciphers out by encoding and decoding a String, works fine\n\nObjectOutputStream objectOutputStream= new ObjectOutputStream(new CipherOutputStream(socket.getOutputStream,cEncrypt)); \nobjectOutputStream.flush(); \nObjectInputStream objectInputStream = new ObjectInputStream(new CipherInputStream(socket.getInputStream,cDecrypt));\n", "idx": 569}
{"project": "cipher", "commit_id": "Snippet41666727_23604.java", "target": 0, "func": "import org.bouncycastle.crypto.AsymmetricBlockCipher;\nimport org.bouncycastle.crypto.engines.RSAEngine;\nimport org.bouncycastle.crypto.params.AsymmetricKeyParameter;\nimport org.bouncycastle.crypto.util.PrivateKeyFactory;\nimport org.bouncycastle.crypto.util.PublicKeyFactory;\n\nimport java.security.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Cryption {\n    private Key publicKey;\n    private PrivateKey privateKey;\n    private String AES = \"AES\";\n    private String RSA = \"RSA\";\n    public Cryption() {\n        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n        KeyPair keyPair = null;\n        try {\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(RSA, \"BC\");\n            keyPairGenerator.initialize(1024);\n            keyPair = keyPairGenerator.generateKeyPair();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        publicKey = keyPair.getPublic();\n        privateKey = keyPair.getPrivate();\n    }\n\n    public byte[] getPublicKeyBytes() {\n        return publicKey.getEncoded();\n    }\n\n\n    ////////////ENCRYPT\n\n\n    public EncryptedData encrypt(Object o, byte[] keyRSA) {\n        return encrypt(Utils.serialize(o), keyRSA);\n    }\n\n    public EncryptedData encrypt(byte[] bytes, byte[] keyRSA) {\n\n        try {\n            //get AES Random Key\n\n            KeyGenerator keygen = KeyGenerator.getInstance(AES, \"BC\");\n            keygen.init(128);\n            Key aesKey= keygen.generateKey();\n            byte[] aesKeyByte = aesKey.getEncoded();\n\n            //AES encryption\n            byte[] dataEncyptedAES = null;\n            Cipher aescipher = Cipher.getInstance(AES, \"BC\");\n            aescipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            dataEncyptedAES = aescipher.doFinal(bytes);\n\n            //encode AES Key\n            byte[] encodedAESkey = encodeRSA(aesKeyByte, keyRSA);\n            return new EncryptedData(encodedAESkey, dataEncyptedAES);\n        }catch(Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private byte[] encodeRSA(byte[] data, byte[] keyRSA) {\n        try {\n            AsymmetricKeyParameter publicKey = PublicKeyFactory.createKey(keyRSA);\n            AsymmetricBlockCipher e = new RSAEngine();\n            e = new org.bouncycastle.crypto.encodings.PKCS1Encoding(e);\n            e.init(true, publicKey);\n\n            List<Byte> value = new ArrayList<Byte>();\n            int i = 0;\n            int len = e.getInputBlockSize();\n            while(i<data.length) {\n                if(i+len > data.length) len = data.length - i;\n                byte[] hexEncodedCipher = e.processBlock(data, i ,len);\n                for(Byte b : hexEncodedCipher) {\n                    value.add(b);\n                }\n                i+=e.getInputBlockSize();\n            }\n            return Utils.convert(value.toArray(new Byte[value.size()]));\n        }catch(Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n\n\n\n    ///////////////////DECRYPT\n\n\n\n    public Object decryptToObject(EncryptedData encryptedData) {\n        return Utils.deserialize(decrypt(encryptedData));\n    }\n\n    private byte[] decrypt(EncryptedData encryptedData) {\n        if(encryptedData == null) System.out.println(\"ENCRYPTED DATA == NULL\");\n        try {\n            //decode AES key\n            byte[] decodedAESKey = decryptRSA(encryptedData.getEncryptedAESKey());\n\n            //decrypt data\n            byte[] decodedBytes = null;\n            Cipher cipherData = Cipher.getInstance(AES, \"BC\");\n            cipherData.init(Cipher.DECRYPT_MODE, new SecretKeySpec(decodedAESKey, 0, decodedAESKey.length, AES));\n            decodedBytes = cipherData.doFinal(encryptedData.getDataEncryptedAES());\n            return decodedBytes;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private byte[] decryptRSA(byte[] data) {\n        try {\n            AsymmetricKeyParameter privateKey = PrivateKeyFactory.createKey(this.privateKey.getEncoded());\n            AsymmetricBlockCipher e = new RSAEngine();\n            e = new org.bouncycastle.crypto.encodings.PKCS1Encoding(e);\n            e.init(false, privateKey);\n\n            List<Byte> value = new ArrayList<Byte>();\n            int i = 0;\n            int len = e.getInputBlockSize();\n            while(i<data.length) {\n                if(i+len > data.length) len = data.length - i;\n                byte[] hexEncodedCipher = e.processBlock(data, i ,len);\n                for(Byte b : hexEncodedCipher) {\n                    value.add(b);\n                }\n                i+=e.getInputBlockSize();\n            }\n            return Utils.convert(value.toArray(new Byte[value.size()]));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public void clear() {\n        privateKey = null;\n        publicKey = null;\n    }\n}\n", "idx": 570}
{"project": "cipher", "commit_id": "Snippet40176282_22075.java", "target": 0, "func": "public class AES2\n\n{\n\n    private static AES2 aes = new AES2( );\n\n    private AES2() { }\n\n    public static AES2 getInstance( ) {\n        return aes;\n    }\n\n    private static SecretKeySpec secretKey ;\n    private static byte[] key ;\n\n    private static String decryptedString;\n    private static String encryptedString;\n\n    public static void setKey(String myKey){\n\n\n        MessageDigest sha = null;\n        try {\n            key = myKey.getBytes(\"UTF-8\");\n            System.out.println(key.length);\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n            key = Arrays.copyOf(key, 16); // use only first 128 bit\n            System.out.println(key.length);\n            System.out.println(new String(key,\"UTF-8\"));\n            secretKey = new SecretKeySpec(key, \"AES\");\n\n\n        } catch (NoSuchAlgorithmException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n\n\n    }\n\n    public static String encrypt(String strToEncrypt)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            encryptedString =     (Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))));\n        }\n        catch (Exception e)\n        {\n\n            System.out.println(\"Error while encrypting: \"+e.toString());\n        }\n        return null;\n    }\n    public static String decrypt(String strToDecrypt)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            byte[] bytes = cipher.doFinal(Base64.decodeBase64(strToDecrypt));\n            decryptedString = bytes.toString();\n\n        }\n        catch (Exception e)\n        {\n\n            System.out.println(\"Error while decrypting: \"+e.toString());\n        }\n        return null;\n    }\n}\n", "idx": 571}
{"project": "cipher", "commit_id": "Snippet37315137_19224.java", "target": 0, "func": "public class Main2Activity extends AppCompatActivity {\n\n    private String encryptedFileName = \"encrypted_Audio.mp3\";\n    private static String algorithm = \"AES\";\n    static SecretKey yourKey = null;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main2);\n\n        //saveFile(\"Hello From CoderzHeaven asaksjalksjals\");\n        try {\n            saveFile(getAudioFile());\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        decodeFile();\n\n    }\n\n    public static SecretKey generateKey(char[] passphraseOrPin, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n        // Number of PBKDF2 hardening rounds to use. Larger values increase\n        // computation time. You should select a value that causes computation\n        // to take >100ms.\n        final int iterations = 1000;\n\n        // Generate a 256-bit key\n        final int outputKeyLength = 256;\n\n        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n        KeySpec keySpec = new PBEKeySpec(passphraseOrPin, salt, iterations, outputKeyLength);\n        SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);\n        return secretKey;\n    }\n\n    public static SecretKey generateKey() throws NoSuchAlgorithmException {\n        // Generate a 256-bit key\n        final int outputKeyLength = 256;\n        SecureRandom secureRandom = new SecureRandom();\n        // Do *not* seed secureRandom! Automatically seeded from system entropy.\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n        keyGenerator.init(outputKeyLength, secureRandom);\n        yourKey = keyGenerator.generateKey();\n        return yourKey;\n    }\n\n    public static byte[] encodeFile(SecretKey yourKey, byte[] fileData)\n            throws Exception {\n        byte[] encrypted = null;\n        byte[] data = yourKey.getEncoded();\n        SecretKeySpec skeySpec = new SecretKeySpec(data, 0, data.length, algorithm);\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec, new IvParameterSpec(\n                new byte[cipher.getBlockSize()]));\n        encrypted = cipher.doFinal(fileData);\n        return encrypted;\n    }\n\n    public static byte[] decodeFile(SecretKey yourKey, byte[] fileData)\n            throws Exception {\n        byte[] decrypted = null;\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.DECRYPT_MODE, yourKey, new IvParameterSpec(new byte[cipher.getBlockSize()]));\n        decrypted = cipher.doFinal(fileData);\n        return decrypted;\n    }\n\n    void saveFile(byte[] stringToSave) {\n        try {\n            File file = new File(Environment.getExternalStorageDirectory() + File.separator, encryptedFileName);\n\n            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file));\n            yourKey = generateKey();\n            byte[] filesBytes = encodeFile(yourKey, stringToSave);\n            bos.write(filesBytes);\n            bos.flush();\n            bos.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    void decodeFile() {\n\n        try {\n            byte[] decodedData = decodeFile(yourKey, readFile());\n           // String str = new String(decodedData);\n            //System.out.println(\"DECODED FILE CONTENTS : \" + str);\n            playMp3(decodedData);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public byte[] readFile() {\n        byte[] contents = null;\n\n        File file = new File(Environment.getExternalStorageDirectory()\n                + File.separator, encryptedFileName);\n        int size = (int) file.length();\n        contents = new byte[size];\n        try {\n            BufferedInputStream buf = new BufferedInputStream(\n                    new FileInputStream(file));\n            try {\n                buf.read(contents);\n                buf.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        return contents;\n    }\n\n    public byte[] getAudioFile() throws FileNotFoundException\n    {\n        byte[] audio_data = null;\n        byte[] inarry = null;\n        AssetManager am = getAssets();\n        try {\n            InputStream is = am.open(\"Sleep Away.mp3\"); // use recorded file instead of getting file from assets folder.\n            int length = is.available();\n            audio_data = new byte[length];\n            int bytesRead;\n            ByteArrayOutputStream output = new ByteArrayOutputStream();\n            while ((bytesRead = is.read(audio_data)) != -1) {\n                output.write(audio_data, 0, bytesRead);\n            }\n            inarry = output.toByteArray();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        return inarry;\n\n    }\n\n    private void playMp3(byte[] mp3SoundByteArray) {\n\n        try {\n            // create temp file that will hold byte array\n            File tempMp3 = File.createTempFile(\"kurchina\", \"mp3\", getCacheDir());\n            tempMp3.deleteOnExit();\n            FileOutputStream fos = new FileOutputStream(tempMp3);\n            fos.write(mp3SoundByteArray);\n            fos.close();\n            // Tried reusing instance of media player\n            // but that resulted in system crashes...\n            MediaPlayer mediaPlayer = new MediaPlayer();\n            FileInputStream fis = new FileInputStream(tempMp3);\n            mediaPlayer.setDataSource(fis.getFD());\n            mediaPlayer.prepare();\n            mediaPlayer.start();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n\n        }\n\n    }\n}\n", "idx": 572}
{"project": "cipher", "commit_id": "Snippet14952130_38020.java", "target": 0, "func": "DHParameterSpec dhSkipParamSpec = new DHParameterSpec(skip1024Modulus, skip1024Base);\nKeyPairGenerator aliceKpairGen = KeyPairGenerator.getInstance(\"DH\", \"BC\");\naliceKpairGen.initialize(dhSkipParamSpec);\nKeyPair aliceKpair = aliceKpairGen.generateKeyPair();\nbyte[] alicePubKeyEnc = aliceKpair.getPublic().getEncoded();\n\naliceKeyAgree = KeyAgreement.getInstance(\"DH\", \"BC\");\naliceKeyAgree.init(aliceKpair.getPrivate());\n\n\n//... obtaining Bob's Public Key\naliceKeyFac = KeyFactory.getInstance(\"DH\", \"BC\");\nX509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(bobPubKeyEnc);\nbobPubKey = aliceKeyFac.generatePublic(x509KeySpec);\n\naliceKeyAgree.doPhase(bobPubKey, true);\nSecretKey aliceAesKey = aliceKeyAgree.generateSecret(\"AES\");\n\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"BC\");\ncipher.init(Cipher.ENCRYPT_MODE, aliceAesKey);\nbyte[] cipherText = cipher.doFinal(plaintext.getBytes());\n", "idx": 573}
{"project": "cipher", "commit_id": "Snippet13371741_36894.java", "target": 0, "func": "public void onClick(View arg0) {\n\n    sp=this.getSharedPreferences(\"AccessApp\", MODE_WORLD_READABLE); \n\n    byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5 };\n\n    try {\n         String decryptedUser = decrypt(user, key);  \n         user = sp.getString(\"USERNAME_KEY\", decryptedUser);\n    }\n catch (Exception e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n}   \ntry {\n         String decryptedPass = decrypt(pass, key);  \n         pass = sp.getString(\"PASSWORD_KEY\", decryptedPass);\n\n} catch (Exception e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n}\n\n   if(lBttn.equals(arg0)){\n\n      if((uname.getText().toString().equals(user))&& \n        (pword.getText().toString().equals(pass)))\n\n            {\n          Toast.makeText(this, \"You are Logged In\", 20000).show();\n\n               Intent intent;\n               intent=new Intent(this,details.class);\n               startActivity(intent);\n              flag=1;\n            }\n\n        else \n           {\n            Toast.makeText(this, \"Wrong Username or Password\",20000).show();\n            flag=0;   \n           }       \n        } \n        else if(cBttn==arg0){\n            AlertDialog.Builder builder=new AlertDialog.Builder(this);\n          builder.setTitle(\"Exit\");\n         builder.setMessage(\"Do you want to exit\");\n    builder.setCancelable(false);\n    builder.setPositiveButton(\"Yes\",new DialogInterface.OnClickListener() {\n\n   public void onClick(DialogInterface dialog, int which) {\n   // TODO Auto-generated method stub\nIntent intent = new Intent(Intent.ACTION_MAIN);\nintent.addCategory(Intent.CATEGORY_HOME);\nintent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\nstartActivity(intent);\n\n  finish();\n   }\n  });\n    builder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\n\n            public void onClick(DialogInterface arg0, int arg1) {\n               arg0.cancel();\n            }\n        });\n    AlertDialog alert=builder.create();\n    alert.show();\n\n        }\n\n    }\n@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\n     Intent intent = new Intent(Intent.ACTION_MAIN);\n        intent.addCategory(Intent.CATEGORY_HOME);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        startActivity(intent);\n     finish();\n }\n return super.onKeyDown(keyCode, event);\n }\n\npublic static String decrypt(String encryptedText, byte[ ] key) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] toDecrypt = Base64.decode(encryptedText);\n    byte[] encrypted = cipher.doFinal(toDecrypt);\n    return new String(encrypted);\n }\n }\n", "idx": 574}
{"project": "cipher", "commit_id": "Snippet47394806_29360.java", "target": 0, "func": "public static void main(String[] args) throws Exception {\n  convertToHex(System.out, new File(\"E:\\\\TESTS\\\\kristersss.txt\"));\n  //write the output into a file\n  convertToHex(new PrintStream(\"E:\\\\TESTS\\\\kristersssHex.txt\"), new File(\"E:\\\\TESTS\\\\kristersss.txt\"));\n\n  System.out.println( \"  \" ); \n  System.out.println( \"128-bit hex key example: ffffffffffffffffffffffffffffffff\" );\n  String content = new Scanner(new File(\"E:\\\\TESTS\\\\kristersssHex.txt\")).useDelimiter(\"\\\\Z\").next();\n  System.out.println(\"----------FAILA SATURS----------\");\n\n\n  System.out.println(content);\n\n  System.out.println(\"------------------------------\");    \n  Scanner scanner = new Scanner( System.in );\n\n  System.out.println( \"Enter 128-bit hex key: \" );\n  final String keyHex = scanner.nextLine();\n\n  final String plaintextHex = \"aaaaaaaaaabbbbbbbbbbbccccccccccff\";\n  SecretKey key = new SecretKeySpec(DatatypeConverter\n      .parseHexBinary(keyHex), \"AES\");\n\n  Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n  cipher.init(Cipher.ENCRYPT_MODE, key);\n\n  byte[] result = cipher.doFinal(DatatypeConverter\n      .parseHexBinary(content));\n\n  String a = DatatypeConverter.printHexBinary(result);\n  System.out.println(\"----------FAILA SATURA ENKRIPTACIJA----------\");\n  System.out.println(DatatypeConverter.printHexBinary(result));\n  BufferedWriter output = null;\n  try {\n\n    File file = new File(\"E:\\\\TESTS\\\\kristerssEncrypts.txt\");\n    output = new BufferedWriter(new FileWriter(file));\n    output.write(a);\n  } catch ( IOException e ) {\n    e.printStackTrace();\n  } finally {\n    if ( output != null ) {\n      output.close();\n    }\n  }\n\n  Cipher cipherd = Cipher.getInstance(\"AES/ECB/NoPadding\");\n  cipherd.init(Cipher.DECRYPT_MODE, key);\n\n  byte[] result2 = cipherd.doFinal(result);\n  System.out.println(\"----------FAILA SATURA DEKRIPTACIJA----------\");\n  System.out.println(DatatypeConverter.printHexBinary(result2));\n  BufferedWriter outputt = null;\n  String aa = DatatypeConverter.printHexBinary(result2);\n  try {\n\n    File file = new File(\"E:\\\\TESTS\\\\kristerssDekrypts.txt\");\n    outputt = new BufferedWriter(new FileWriter(file));\n    outputt.write(aa);\n  } catch ( IOException e ) {\n    e.printStackTrace();\n  } finally {\n    if ( outputt != null ) {\n      outputt.close();\n    }\n  }\n", "idx": 575}
{"project": "cipher", "commit_id": "Snippet22449053_4853.java", "target": 0, "func": "   // Create a Blowfish key\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(\"Blowfish\");\n\n    // Now set the keysize to 256 bits\n    keyGenerator.init(256);\n\n    Key key = keyGenerator.generateKey();\n\n    System.out.println(\"Done generating the key.\");\n\n    // Create a cipher using that key to initialize it\n    Cipher cipher = Cipher.getInstance(\"Blowfish/CFB8/NoPadding\");\n\n\n        //Cipher encrypter = Cipher.getInstance(\"Blowfish/C/NoPadding\");\n    System.out.println(\"good here\");\n     SecureRandom random = new SecureRandom();\n    byte[] iv = new byte[16];\n    random.nextBytes(iv);\n\n\n  IvParameterSpec spec = new IvParameterSpec(iv);\n\n    cipher.init(Cipher.ENCRYPT_MODE, key,spec);\n", "idx": 576}
{"project": "cipher", "commit_id": "Snippet17125709_398.java", "target": 0, "func": "package karp.generalutil.common;\n\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class Encryptor {\n\n/**\n * @param args\n */\n\nstatic Cipher eCipher,dCipher;\n\npublic Encryptor()\n{\n    try {\n        eCipher=Cipher.getInstance(\"AES\");\n        dCipher=Cipher.getInstance(\"AES\");\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n\n}\n\n/// for test\npublic static void main (String args[])\n{\ntry {\n    KeyGenerator aes;\n\n\n    aes = KeyGenerator.getInstance(\"AES\");\n\n    aes.init(128);\n\n    SecretKey key = aes.generateKey();\n\n\n\n\n\n\n} catch (Exception e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n}\n\n}\n\n\npublic static String encrypt(String clearText,String keyString) throws NoSuchAlgorithmException, \n                                                       NoSuchPaddingException, InvalidKeyException,\n                                                        IllegalBlockSizeException, BadPaddingException\n{\n\n\n    SecretKey key=loadKey(keyString);\n    String encryptedText;\n\n    eCipher.init(Cipher.ENCRYPT_MODE,key );\n    encryptedText=new String(eCipher.doFinal(clearText.getBytes()));\n\n\n\n\n\n    return encryptedText;\n}\n\npublic static String decrypt(String encryptedText,String keyString) throws NoSuchAlgorithmException, \n                                                           NoSuchPaddingException, InvalidKeyException,\n                                                           IllegalBlockSizeException, BadPaddingException\n{\n\n    SecretKey key=loadKey(keyString);\n    String clearText;\n    Cipher dCipher=Cipher.getInstance(\"AES\");\n    dCipher.init(Cipher.DECRYPT_MODE,key);\n    clearText=new String(dCipher.doFinal(encryptedText.getBytes()));\n\n\n\n\n\n    return clearText;\n\n\n}\n\n\npublic static byte[] encrypt(byte [] clearByteArray,String keyString)throws NoSuchAlgorithmException, \n                                                            NoSuchPaddingException, InvalidKeyException,\n                                                            IllegalBlockSizeException, BadPaddingException\n{\n\n    SecretKey key=loadKey(keyString);\n    byte[] encryptedByteArray;\n    Cipher eCipher=Cipher.getInstance(\"AES\");\n    eCipher.init(Cipher.ENCRYPT_MODE,key );\n    encryptedByteArray=eCipher.doFinal(clearByteArray);\n\n    return encryptedByteArray;\n}\n\n\npublic static byte[] decrypt(byte [] encryptedByteArray,String keyString)throws NoSuchAlgorithmException, \n                                                            NoSuchPaddingException, InvalidKeyException,\n                                                            IllegalBlockSizeException, BadPaddingException\n{\n    SecretKey key=loadKey(keyString);\n    byte[] clearByteArray;\n\n    Cipher dCipher=Cipher.getInstance(\"AES\");\n    dCipher.init(Cipher.DECRYPT_MODE,key );\n    clearByteArray=dCipher.doFinal(encryptedByteArray);\n    return clearByteArray;\n}\n\npublic static SecretKey loadKey(String  keyString)  {\n\n        byte[] encoded = keyString.getBytes();\n\n        SecretKey key = new SecretKeySpec(encoded, \"AES\");\n        return key;\n    }\n\n}\n", "idx": 577}
{"project": "cipher", "commit_id": "Snippet20871030_3467.java", "target": 0, "func": " public static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n", "idx": 578}
{"project": "cipher", "commit_id": "Snippet15582202_38609.java", "target": 0, "func": "public Crypto() {\n    try {\n        PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(keySpec);\n        ecipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        dcipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        byte[] salt = new byte[8];\n        PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 100);\n        ecipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n        dcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n        } catch (Exception e) {\n    }\n}\n\n@SuppressWarnings(\"resource\")\npublic static List<String> decrypt(String file) {\n    List<String> list = new LinkedList<String>();\n    try {\n        InputStream in = new CipherInputStream(new FileInputStream(file), dcipher);\n        int numRead = 0;\n        while ((numRead = in.read(buffer)) >= 0) {\n            list.add(new String(buffer, 0, numRead);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return list;\n}\n", "idx": 579}
{"project": "cipher", "commit_id": "Snippet17316547_554.java", "target": 0, "func": "void encrypt(String inputText) throws Exception {\n    try {\n        String myKey = \"mykey\";\n        byte[] mybyte = str.getBytes(\"ASCII\");\n        //String plainIV = \"1234567890ABCDEF\";\n        KeySpec keySpec = new DESKeySpec(myKey.getBytes(\"ASCII\"));\n        SecretKey key = SecretKeyFactory.getInstance(\"DES\").generateSecret(keySpec);\n        //IvParameterSpec iv = new IvParameterSpec(org.apache.commons.codec.binary.Hex.decodeHex(plainIV.toCharArray()));\n        IvParameterSpec iv = new IvParameterSpec(mybyte);\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE,key,iv);\n        byte[] encoded = cipher.doFinal(inputText.getBytes(\"ASCII\"));   \n        System.out.println(\"Encoded Value ..... \"+Base64.encodeBase64(encoded));\n    } catch(UnsupportedEncodingException e) {\n        System.out.println(\"Exception .. \"+ e.getMessage());\n    }\n", "idx": 580}
{"project": "cipher", "commit_id": "Snippet20670_29653.java", "target": 0, "func": "import java.security.MessageDigest;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class TripleDESTest {\n\n    public static void main(String[] args) throws Exception {\n\n        String text = \"kyle boon\";\n\n        byte[] codedtext = new TripleDESTest().encrypt(text);\n        String decodedtext = new TripleDESTest().decrypt(codedtext);\n\n        System.out.println(codedtext); // this is a byte array, you'll just see a reference to an array\n        System.out.println(decodedtext); // This correctly shows \"kyle boon\"\n    }\n\n    public byte[] encrypt(String message) throws Exception {\n        final MessageDigest md = MessageDigest.getInstance(\"md5\");\n        final byte[] digestOfPassword = md.digest(\"HG58YZ3CR9\"\n                .getBytes(\"utf-8\"));\n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        for (int j = 0, k = 16; j < 8;) {\n            keyBytes[k++] = keyBytes[j++];\n        }\n\n        final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n        final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n        final byte[] plainTextBytes = message.getBytes(\"utf-8\");\n        final byte[] cipherText = cipher.doFinal(plainTextBytes);\n        // final String encodedCipherText = new sun.misc.BASE64Encoder()\n        // .encode(cipherText);\n\n        return cipherText;\n    }\n\n    public String decrypt(byte[] message) throws Exception {\n        final MessageDigest md = MessageDigest.getInstance(\"md5\");\n        final byte[] digestOfPassword = md.digest(\"HG58YZ3CR9\"\n                .getBytes(\"utf-8\"));\n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        for (int j = 0, k = 16; j < 8;) {\n            keyBytes[k++] = keyBytes[j++];\n        }\n\n        final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n        final Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n        // final byte[] encData = new\n        // sun.misc.BASE64Decoder().decodeBuffer(message);\n        final byte[] plainText = decipher.doFinal(message);\n\n        return new String(plainText, \"UTF-8\");\n    }\n}\n", "idx": 581}
{"project": "cipher", "commit_id": "Snippet1205272_29881.java", "target": 0, "func": "// wrap key data in Key/IV specs to pass to cipher\nSecretKeySpec key = new SecretKeySpec(keyBytes, \"DES\");\nIvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n// create the cipher with the algorithm you choose\n// see javadoc for Cipher class for more info, e.g.\nCipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n", "idx": 582}
{"project": "cipher", "commit_id": "Snippet32582546_14707.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.spec.InvalidKeySpecException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\nimport javax.xml.bind.DatatypeConverter;\n\n        public class CryptoPropio {\n\n\n            /**\n             * Master password.\n             */\n            private static char[] PASSWORD;\n\n            /** The Constant SALT. */\n            private static final byte[] SALT = { (byte) 0xde, (byte) 0x33, (byte) 0x10,\n                    (byte) 0x12, (byte) 0xde, (byte) 0x33, (byte) 0x10, (byte) 0x12, };\n\n            /** The error des. */\n            private static String errorDes = \"Error al des/encriptar\";\n\n            /** The Constant ALGORITMO. */\n            private static final String ALGORITMO = \"PBEWithMD5AndDES\";\n\n            /**\n             * Instantiates a new crypto propio.\n             * \n             * @param pass\n             *            the pass\n             */\n            public CryptoPropio(String pass) {\n                super();\n                PASSWORD = pass.toCharArray();\n\n            }\n\n\n            public String encrypt(String property) {\n                SecretKeyFactory keyFactory;\n                String result = null;\n\n                try {\n                    keyFactory = SecretKeyFactory.getInstance(ALGORITMO);\n\n                    SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n                    Cipher pbeCipher = Cipher.getInstance(ALGORITMO);\n                    pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT,\n                            20));\n                    result = base64Encode(\n                                    pbeCipher.doFinal(property.getBytes(\"UTF-8\")))\n                                    .toString();\n                } catch (InvalidKeyException | InvalidAlgorithmParameterException\n                        | NoSuchAlgorithmException | InvalidKeySpecException\n                        | NoSuchPaddingException | IllegalBlockSizeException\n                        | BadPaddingException | UnsupportedEncodingException e) {\n                  e.printStackTrace();\n                }\n\n                return result;\n            }\n\n            /**\n             * Base64 encode.\n             * \n             * @param bytes\n             *            the bytes\n             * @return the string\n             */\n            private String base64Encode(byte[] bytes) {\n                return DatatypeConverter.printBase64Binary(bytes);\n            }\n\n\n            public String decrypt(String propert) {\n                String property = propert;\n                String result = null;\n                try {\n                    SecretKeyFactory keyFactory = SecretKeyFactory\n                            .getInstance(ALGORITMO);\n                    SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n                    Cipher pbeCipher = Cipher.getInstance(ALGORITMO);\n                    pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(SALT,\n                            20));\n                    result = new String(pbeCipher.doFinal(base64Decode(property)),\n                            \"UTF-8\");\n                } catch (InvalidKeyException | InvalidAlgorithmParameterException\n                        | NoSuchAlgorithmException | InvalidKeySpecException\n                        | NoSuchPaddingException | IllegalBlockSizeException\n                        | BadPaddingException | UnsupportedEncodingException e) {\n                   e.printStackTrace();\n                }\n                return result;\n            }\n\n            /**\n             * Base64 decode.\n             * \n             * @param property\n             *            the property\n             * @return the byte[]\n             */\n            private byte[] base64Decode(String property) {\n\n                return DatatypeConverter.parseBase64Binary(property);\n            }\n\n        }\n", "idx": 583}
{"project": "cipher", "commit_id": "Snippet29066713_11134.java", "target": 0, "func": "        mServer = new LocalSingleHttpServer();\n        c = Cipher.getInstance(\"AES\");\n\n        SecretKey skey = new SecretKeySpec(\"password\".getBytes(),\n                \"AES\");\n        c.init(Cipher.DECRYPT_MODE, skey);\n        mServer.setCipher(c);\n        mServer.start();\n        String path = mServer.getURL(\"asset://video.mp4\");\n        mVideoView.setMediaController(new MediaController(this)); \n        mVideoView.setOnCompletionListener(this);\n        mVideoView.setVideoPath(path);\n        mVideoView.start();\n", "idx": 584}
{"project": "cipher", "commit_id": "Snippet659475_29722.java", "target": 0, "func": "import java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Decrypt\n{\n\n  public static void main(String... argv)\n    throws Exception\n  {\n    byte[] password = \"password\".getBytes(\"UTF-8\");\n    byte[] ciphertext = { -68, -112,  66, 78,   85,   50, 22, -63, \n                           16,   24, -45,  4, -116,  -14, 88,  34, \n                          -85,  116, 105, 59,   45, -126 };\n    byte[] plaintext = decrypt(password, ciphertext);\n    System.out.println(new String(plaintext, \"UTF-8\"));\n  }\n\n  public static byte[] decrypt(byte[] password, byte[] ciphertext)\n    throws GeneralSecurityException\n  {\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    byte[] hash = digest.digest(password);\n    Cipher rc4 = Cipher.getInstance(\"RC4\");\n    rc4.init(Cipher.DECRYPT_MODE, new SecretKeySpec(hash, \"RC4\"));\n    return rc4.doFinal(ciphertext);\n  }\n\n}\n", "idx": 585}
{"project": "cipher", "commit_id": "Snippet32485255_14546.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 586}
{"project": "cipher", "commit_id": "Snippet37588144_19537.java", "target": 0, "func": "byte[] dataBytes = \"text to be encrypted\".getBytes(StandardCharsets.ISO_8859_1);\n\nCipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\nSecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\ncipher.init(Cipher.ENCRYPT_MODE, key);\n\nbyte[] cipByte = cipher.doFinal(dataBytes);\nbyte[] encr = Base64.getEncoder().encode(cipByte);\n\nFile encryptedFile = new File(\"/tmp/in.enc\");\nFiles.write(Paths.get(encryptedFile.getAbsolutePath()), encr);\n\nSystem.out.println(\"encr length: \" + encr.length);\nSystem.out.println(\"file length: \" + encryptedFile.length());\n", "idx": 587}
{"project": "cipher", "commit_id": "Snippet18382872_1468.java", "target": 0, "func": "public static String decrypt(String strToDecrypt) throws UnsupportedEncodingException\n{\n     byte[] key = \"12345678911234567891123456789112\".getBytes(\"UTF-8\");\n\n    try\n    {   Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n        final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        final String decryptedString = new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt.getBytes(\"UTF-8\"))));\n        return decryptedString;\n    }\n    catch (Exception e)\n    {\n        System.out.println(\"Error while decrypting\"+ e);\n\n    }\n    return null;\n}\n", "idx": 588}
{"project": "cipher", "commit_id": "Snippet15108317_38169.java", "target": 0, "func": "byte[] valueData = value.getBytes();   \nbyte[] keyData = skey.getBytes();\n\nSecretKeySpec skeySpec = new SecretKeySpec(keyData, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7PADDING\");\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\nbyte[] valueEncryptedData = cipher.doFinal(valueData);\nString valueEncryptedString = Base64.encodeToString(valueEncryptedData, Base64.DEFAULT);\n\nreturn valueEncryptedString;\n", "idx": 589}
{"project": "cipher", "commit_id": "Snippet27074374_9245.java", "target": 0, "func": "    public class SecurityAES {\n    private final static String encoding = \"UTF-8\"; \n    public static void main(String[] args) {\n        String str = encryptAES(\"18382360986%2Cqq200600\",\"uu24sfsd8sdggs\");\n\n        System.out.println(str);\n        String uriAPI = \"http://xxxxxx.com/do/httpapi!apiUserInfo.shtml\";\n\n        Map parameters=new HashMap();\n\n        parameters.put(\"token\", \"uu24sfsd8sdggs\");\n        parameters.put(\"formVals\", str);\n\n        System.out.println(post(uriAPI, parameters, true));\n\n    }\n    public static String post(String urlStr, Map parameters, boolean flag) {\n        try {\n            String content = \"\";\n            String result = \"\";\n            URL url = null;\n            URLConnection conn = null;\n            OutputStreamWriter writer = null;\n            StringBuffer params = new StringBuffer();\n\n            for (Iterator iter = parameters.entrySet().iterator(); iter.hasNext();) {\n                Entry element = (Entry) iter.next();\n                params.append(element.getKey().toString());\n                params.append(\"=\");\n                params.append(element.getValue().toString());\n                params.append(\"&\");\n            }\n\n            if (params.length() > 0) {\n                params = params.deleteCharAt(params.length() - 1);\n            }\n\n            try {\n                url = new URL(urlStr);\n                conn = url.openConnection();\n                conn.setDoOutput(true);\n                conn.setRequestProperty(\"Referer\", \"\");\n                conn.setConnectTimeout(3000);// \u8bbe\u7f6e\u8fde\u63a5\u4e3b\u673a\u8d85\u65f6\uff08\u5355\u4f4d\uff1a\u6beb\u79d2\uff09\n                conn.setReadTimeout(3000);// \u8bbe\u7f6e\u4ece\u4e3b\u673a\u8bfb\u53d6\u6570\u636e\u8d85\u65f6\uff08\u5355\u4f4d\uff1a\u6beb\u79d2\uff09\n\n                writer = new OutputStreamWriter(conn.getOutputStream());\n                writer.write(params.toString());\n                writer.flush();\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    if (writer != null) {\n                        writer.close();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            InputStreamReader reder = null;\n            BufferedReader breader = null;\n            try {\n                reder = new InputStreamReader(conn.getInputStream(), \"utf-8\");\n                breader = new BufferedReader(reder);\n                while ((content = breader.readLine()) != null) {\n                    result += content;\n                }\n            } catch (Exception e) {\n            } finally {\n                try {\n                    if (reder != null) {\n                        reder.close();\n                    }\n                    if (breader != null) {\n                        breader.close();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n\n            }\n\n            if (result == null || result.equals(\"\")) {\n                result = \"|\";\n            }\n            System.out.println(result);\n            return result;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"\";\n        }\n\n    }\n    /**\n     * \n     * @param content\n     * @param password\n     * @return\n     */\n    public static String encryptAES(String content, String password) {\n        byte[] encryptResult = encrypt(content, password);\n        String encryptResultStr = parseByte2HexStr(encryptResult);\n        encryptResultStr = ebotongEncrypto(encryptResultStr);\n        return encryptResultStr;\n    }\n\n    /**\n     * \n     * @param encryptResultStr\n     * @param password\n     * @return\n     */\n    public static String decrypt(String encryptResultStr, String password) {\n        String decrpt = ebotongDecrypto(encryptResultStr);\n        byte[] decryptFrom = parseHexStr2Byte(decrpt);\n        byte[] decryptResult = decrypt(decryptFrom, password);\n        return new String(decryptResult);\n    }\n\n    /**\n     */\n    public static String ebotongEncrypto(String str) {\n        BASE64Encoder base64encoder = new BASE64Encoder();\n        String result = str;\n        if (str != null && str.length() > 0) {\n            try {\n                byte[] encodeByte = str.getBytes(encoding);\n                result = base64encoder.encode(encodeByte);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return result.replaceAll(\"\\r\\n\", \"\").replaceAll(\"\\r\", \"\").replaceAll(\"\\n\", \"\");\n    }\n\n    /**\n     */\n    public static String ebotongDecrypto(String str) {\n        BASE64Decoder base64decoder = new BASE64Decoder();\n        try {\n            byte[] encodeByte = base64decoder.decodeBuffer(str);\n            return new String(encodeByte);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return str;\n        }\n    }\n    /**  \n     *   \n     * @return  \n     */  \n    private static byte[] encrypt(String content, String password) {   \n            try {              \n                    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\"); \n                    SecureRandom secureRandom = SecureRandom.getInstance(\"SHA1PRNG\" );   \n                    secureRandom.setSeed(password.getBytes());   \n                    kgen.init(128, secureRandom);\n                    //kgen.init(128, new SecureRandom(password.getBytes()));   \n                    SecretKey secretKey = kgen.generateKey();   \n                    byte[] enCodeFormat = secretKey.getEncoded();   \n                    SecretKeySpec key = new SecretKeySpec(enCodeFormat, \"AES\");   \n                    Cipher cipher = Cipher.getInstance(\"AES\");// \n                    byte[] byteContent = content.getBytes(\"utf-8\");   \n                    cipher.init(Cipher.ENCRYPT_MODE, key);\n                    byte[] result = cipher.doFinal(byteContent);   \n                    return result; \n            } catch (NoSuchAlgorithmException e) {   \n                    e.printStackTrace();   \n            } catch (NoSuchPaddingException e) {   \n                    e.printStackTrace();   \n            } catch (InvalidKeyException e) {   \n                    e.printStackTrace();   \n            } catch (UnsupportedEncodingException e) {   \n                    e.printStackTrace();   \n            } catch (IllegalBlockSizeException e) {   \n                    e.printStackTrace();   \n            } catch (BadPaddingException e) {   \n                    e.printStackTrace();   \n            }   \n            return null;   \n    }  \n\n\n    private static byte[] decrypt(byte[] content, String password) {   \n            try {   \n                     KeyGenerator kgen = KeyGenerator.getInstance(\"AES\"); \n\n                     SecureRandom secureRandom = SecureRandom.getInstance(\"SHA1PRNG\" );   \n                     secureRandom.setSeed(password.getBytes());   \n                     kgen.init(128, secureRandom);\n                     //kgen.init(128, new SecureRandom(password.getBytes()));   \n                     SecretKey secretKey = kgen.generateKey();   \n                     byte[] enCodeFormat = secretKey.getEncoded();   \n                     SecretKeySpec key = new SecretKeySpec(enCodeFormat, \"AES\");               \n                     Cipher cipher = Cipher.getInstance(\"AES\"); \n                    cipher.init(Cipher.DECRYPT_MODE, key);  \n                    byte[] result = cipher.doFinal(content);   \n                    return result; //\n            } catch (NoSuchAlgorithmException e) {   \n            } catch (NoSuchPaddingException e) {   \n            } catch (InvalidKeyException e) {   \n            } catch (IllegalBlockSizeException e) {   \n            } catch (BadPaddingException e) {   \n            }   \n            return null;   \n    }  \n\n    public static String parseByte2HexStr(byte buf[]) {   \n            StringBuffer sb = new StringBuffer();   \n            for (int i = 0; i < buf.length; i++) {   \n                    String hex = Integer.toHexString(buf[i] & 0xFF);   \n                    if (hex.length() == 1) {   \n                            hex = '0' + hex;   \n                    }   \n                    sb.append(hex.toUpperCase());   \n            }   \n            return sb.toString();   \n    }  \n\n    public static byte[] parseHexStr2Byte(String hexStr) {   \n            if (hexStr.length() < 1)   \n                    return null;   \n            byte[] result = new byte[hexStr.length()/2];   \n            for (int i = 0;i< hexStr.length()/2; i++) {   \n                    int high = Integer.parseInt(hexStr.substring(i*2, i*2+1), 16);   \n                    int low = Integer.parseInt(hexStr.substring(i*2+1, i*2+2), 16);   \n                    result[i] = (byte) (high * 16 + low);   \n            }   \n            return result;   \n    }  \n}\n", "idx": 590}
{"project": "cipher", "commit_id": "Snippet36923382_18896.java", "target": 0, "func": "Cipher cipher = null;\ntry {\n    cipher = Cipher.getInstance(\"AES\");\n} catch (NoSuchAlgorithmException e) {\n    e.printStackTrace();\n} catch (NoSuchPaddingException e) {\n    e.printStackTrace();\n}\nSecretKeySpec secretKeySpec = new SecretKeySpec(array, \"AES\");\ntry {\n    cipher.init(Cipher.DECRYPT_MODE,secretKeySpec);\n} catch (InvalidKeyException e) {\n    e.printStackTrace();\n}\nbyte[] decrypted=new byte[0];\ntry {\n    decrypted=cipher.doFinal(ciphertext.getBytes());\n} catch (IllegalBlockSizeException e) {\n    e.printStackTrace();\n} catch (BadPaddingException e) {\n    e.printStackTrace();\n}\nString plaintext= Base64.encodeToString(decrypted,0);\npt.setText(plaintext);\n", "idx": 591}
{"project": "cipher", "commit_id": "Snippet43268322_25403.java", "target": 0, "func": "public class AES{\n    private static SecretKeySpec secretKey ;\n    private static byte[] key ;\n\n    private static String decryptedString;\n    private static String encryptedString;\n\n\n    public static void setKey(String myKey){\n\n\n        MessageDigest sha = null;\n        try {\n            key = myKey.getBytes(\"UTF-8\");\n            System.out.println(key.length);\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n            key = Arrays.copyOf(key, 16); // use only first 128 bit\n            System.out.println(key.length);\n            System.out.println(new String(key,\"UTF-8\"));\n            secretKey = new SecretKeySpec(key, \"AES\");\n\n\n        } catch (NoSuchAlgorithmException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n\n\n\n    }\n\n    public static String getDecryptedString() {\n        return decryptedString;\n    }\n\n    public static void setDecryptedString(String decryptedString) {\n        AES.decryptedString = decryptedString;\n    }\n\n    public static String getEncryptedString() {\n        return encryptedString;\n    }\n\n    public static void setEncryptedString(String encryptedString) {\n        AES.encryptedString = encryptedString;\n    }\n\n    public static String encrypt(String strToEncrypt){\n        try{\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n            setEncryptedString(Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))));\n            //              byte[] encodedBytes = Base64.getEncoder().encode(strToEncrypt.getBytes(\"UTF-8\"));\n            //              setEncryptedString(new String(encodedBytes));\n\n        }\n        catch (Exception e)\n        {\n\n            System.out.println(\"Error while encrypting: \"+e.toString());\n        }\n        return null;\n\n    }\n\n    public static String decrypt(String strToDecrypt){\n        try{\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            setDecryptedString(new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt))));\n            //setDecryptedString(new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt))));\n\n\n        }\n        catch (Exception e){\n\n            System.out.println(\"Error while decrypting: \"+e.toString());\n\n        }\n        return null;\n    }\n\n\n    public static void main(String args[]){\n\n        final String strToEncrypt = \"My text to encrypt\";\n        final String strPssword = \"encryptor key\";\n        AES.setKey(strPssword);\n\n        AES.encrypt(strToEncrypt.trim());\n\n        System.out.println(\"String to Encrypt: \" + strToEncrypt); \n        System.out.println(\"Encrypted: \" + AES.getEncryptedString());\n\n        final String strToDecrypt =  AES.getEncryptedString();\n        AES.decrypt(strToDecrypt.trim());\n\n        System.out.println(\"String To Decrypt : \" + strToDecrypt);\n        System.out.println(\"Decrypted : \" + AES.getDecryptedString());\n    }\n}\n", "idx": 592}
{"project": "cipher", "commit_id": "Snippet1575415_29910.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n", "idx": 593}
{"project": "cipher", "commit_id": "Snippet33100713_15078.java", "target": 0, "func": "InputStream payload = new ByteArrayInputStream(payloadArray);\nCipher encryptCipher = Cipher.getInstance(\"AES\", \"SunJCE\");\nencryptCipher.init(Cipher.ENCRYPT_MODE, key, IV);\nInputStream encryptStream = new CipherInputStream(payload, encryptCipher);\n\nCipher decryptCipher = Cipher.getInstance(\"AES\", \"SunJCE\");\ndecryptCipher.init(Cipher.DECRYPT_MODE, key, IV);\nInputStream decryptStream = new CipherInputStream(encryptStream, decryptCipher);\n\nbyte[] plainText = IOUtisl.toByteArray(decryptStream);\n", "idx": 594}
{"project": "cipher", "commit_id": "Snippet17153381_415.java", "target": 0, "func": "import javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\npublic class SimpleSymmetricPaddingExample{\n\npublic static void main(String[] args) throws Exception{\n    String s = \"HelloWorld\";\n    byte[] input = s.getBytes();\n\n    byte[] keyBytes = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,\n                          0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e, 0x0f,\n                          0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17};\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n    SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n\n    System.out.println(\"input: \" + new String(input));\n\n    //encryption\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n\n    byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n\n    int ctLength = cipher.update(input, 0 , input.length, cipherText, 0);\n\n    ctLength += cipher.doFinal(cipherText, ctLength);\n\n    System.out.println(\"encrypted: \" + new String(cipherText));\n\n    //Decryption\n    cipher.init(Cipher.DECRYPT_MODE, key);\n\n    byte[] plainText = new byte[cipher.getOutputSize(cipherText.length)];\n\n    int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);\n\n    ptLength += cipher.doFinal(plainText, ptLength);\n    System.out.println(\"decrypted: \" + new String(plainText));\n}\n\n}\n", "idx": 595}
{"project": "cipher", "commit_id": "Snippet92456_29661.java", "target": 0, "func": "Cipher ecipher;\ntry {\n    ecipher = Cipher.getInstance(\"DES\");\n    SecretKeySpec keySpec = new SecretKeySpec(key, \"DES\");      \n    ecipher.init(Cipher.ENCRYPT_MODE, keySpec);         \n    byte[] utf8 = password.getBytes(\"UTF8\");\n    byte[] enc = ecipher.doFinal(utf8);\n    return new sun.misc.BASE64Encoder().encode(enc);\n}\ncatch {\n    // ...\n}\n", "idx": 596}
{"project": "cipher", "commit_id": "Snippet13433529_36957.java", "target": 0, "func": "public static byte[] encrypt(byte[] data, String seed) throws Exception {\n\n    KeyGenerator keygen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom secrand = SecureRandom.getInstance(\"SHA1PRNG\");\n    secrand.setSeed(seed.getBytes());\n    keygen.init(128, secrand);\n\n    SecretKey seckey = keygen.generateKey();\n    byte[] rawKey = seckey.getEncoded();\n\n    SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    return cipher.doFinal(data);\n}\n\npublic static byte[] decrypt(byte[] data, String seed) throws Exception {\n\n    KeyGenerator keygen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom secrand = SecureRandom.getInstance(\"SHA1PRNG\");\n    secrand.setSeed(seed.getBytes());\n    keygen.init(128, secrand);\n\n    SecretKey seckey = keygen.generateKey();\n    byte[] rawKey = seckey.getEncoded();\n\n    SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    return cipher.doFinal(data);\n}\n", "idx": 597}
{"project": "cipher", "commit_id": "Snippet24226554_6510.java", "target": 0, "func": "package Encrypt;\n\nimport org.apache.hadoop.hive.ql.exec.UDF;\nimport org.apache.hadoop.io.Text;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.hadoop.hive.ql.exec.FunctionTask;\nimport java.security.MessageDigest;\n\nimport javax.crypto.Cipher;\n\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic final class Dec1 extends UDF {\n\npublic Text evaluate(final Text s) {\n  if (s == null) {\n    return null;\n   }\n  byte[] sharedvector = {\n   0x01, 0x02, 0x03, 0x05, 0x07, 0x0B, 0x0D, 0x11\n   };\n\nString RawText = \"\";\nbyte[] keyArray = new byte[24];\nbyte[] temporaryKey;\nString key = \"developersnotedotcom\";\nbyte[] toEncryptArray = null;\n\ntry\n  {\n\n    MessageDigest m = MessageDigest.getInstance(\"MD5\");\n        temporaryKey = m.digest(key.getBytes(\"UTF-8\"));           \n\n        if(temporaryKey.length < 24) // DESede require 24 byte length key\n        {\n            int index = 0;\n            for(int i=temporaryKey.length;i< 24;i++)\n            {                  \n                keyArray[i] =  temporaryKey[index];\n            }\n        }\n\n        Cipher c = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(keyArray, \"DESede\"), new IvParameterSpec(sharedvector));\n        byte[] decrypted = c.doFinal(Base64.decodeBase64(s.toString()));    \n        RawText = new String(decrypted, \"UTF-8\"); \n   }\n   catch(Exception NoEx)\n    {\n    //JOptionPane.showMessageDialog(null, NoEx);\n     System.out.println(NoEx + \"This is Udf error\");\n     System.exit(1);\n    }\n\n   return new Text(RawText.toString());        \n}\n\n}\n", "idx": 598}
{"project": "cipher", "commit_id": "Snippet18742733_1676.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\n\npublic final class Crypto {\n\n    private final static String CIPHER_ALGORITHM = \"AES\";\n    private final static String CIPHER_TRANSFORMATION = \"AES/CBC/PKCS5Padding\";\n\n    public final static int CRYPTO_KEY_SIZE = 16;    \n\n    public static byte[] encryptByteArray(byte[] blockToEncrypt, int maxLengthToEncrypt, byte[] encryptionKey, byte[] ivBytes) {\n        return processCipher(blockToEncrypt, maxLengthToEncrypt, Cipher.ENCRYPT_MODE, ivBytes, encryptionKey);\n    }\n\n    public static byte[] decryptByteArray(byte[] encryptedData, byte[] encryptionKey, byte[] ivBytes) {\n        return processCipher(encryptedData, encryptedData.length, Cipher.DECRYPT_MODE, ivBytes, encryptionKey);\n    }\n\n    private static byte[] processCipher(byte[] blockToEncrypt, int maxLength, int cryptionMode, byte[] ivBytes, byte[] encryptionKey) {\n        try {\n            IvParameterSpec iv = new IvParameterSpec(ivBytes);\n            final Cipher cipher = initCipher(cryptionMode, iv, encryptionKey);\n            return cipher.doFinal(blockToEncrypt, 0, maxLength);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failure\", e);\n        }\n    }\n\n    private static Cipher initCipher(int cryptionMode, IvParameterSpec iv, byte[] encryptionKey) {\n        KeyGenerator keyGen;\n        try {\n            keyGen = KeyGenerator.getInstance(CIPHER_ALGORITHM);\n\n            final SecureRandom randomSeed = new SecureRandom();\n            randomSeed.setSeed(encryptionKey);\n            keyGen.init(CRYPTO_KEY_SIZE * 8, randomSeed);\n\n            // Generate the secret key specs.\n            final SecretKey secretKey = keyGen.generateKey();\n\n            final SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getEncoded(), CIPHER_ALGORITHM);\n\n            // Instantiate the cipher\n            final Cipher cipher = Cipher.getInstance(CIPHER_TRANSFORMATION);\n\n            cipher.init(cryptionMode, secretKeySpec, iv);\n            return cipher;\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failure\", e);\n        }\n    }\n}\n", "idx": 599}
{"project": "cipher", "commit_id": "Snippet12861325_36517.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"Blowfish/CFB/NoPadding\");\n", "idx": 600}
{"project": "cipher", "commit_id": "Snippet18477898_1533.java", "target": 0, "func": "byte[] inputByteArray = Base64.decode(val);\nCipher c = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\nc.init(Cipher.DECRYPT_MODE, new SecretKeySpec(byKey, \"DESede\"), new IvParameterSpec(iv, 0, 8));\n\nbyte[] decryptedBytes;\nfor (int i = 0, j = 0; i < inputByteArray.length; i++) {\n    if ((decryptedBytes = c.update(inputByteArray, i, 1)) == null)\n        continue;\n    else {\n        System.out.println(new String(decryptedBytes));\n        j += decryptedBytes.length;\n    }          \n}\n", "idx": 601}
{"project": "cipher", "commit_id": "Snippet10316509_34681.java", "target": 0, "func": "import java.security.spec.KeySpec;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport org.apache.commons.codec.binary.Base64;\n\npublic class TrippleDes {\n\n    private static final String UNICODE_FORMAT = \"UTF8\";\n    public static final String DESEDE_ENCRYPTION_SCHEME = \"DESede\";\n    private KeySpec ks;\n    private SecretKeyFactory skf;\n    private Cipher cipher;\n    byte[] arrayBytes;\n    private String myEncryptionKey;\n    private String myEncryptionScheme;\n    SecretKey key;\n\n    public TrippleDes() throws Exception {\n        myEncryptionKey = \"ThisIsSpartaThisIsSparta\";\n        myEncryptionScheme = DESEDE_ENCRYPTION_SCHEME;\n        arrayBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n        ks = new DESedeKeySpec(arrayBytes);\n        skf = SecretKeyFactory.getInstance(myEncryptionScheme);\n        cipher = Cipher.getInstance(myEncryptionScheme);\n        key = skf.generateSecret(ks);\n    }\n\n\n    public String encrypt(String unencryptedString) {\n        String encryptedString = null;\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);\n            byte[] encryptedText = cipher.doFinal(plainText);\n            encryptedString = new String(Base64.encodeBase64(encryptedText));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return encryptedString;\n    }\n\n\n    public String decrypt(String encryptedString) {\n        String decryptedText=null;\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] encryptedText = Base64.decodeBase64(encryptedString);\n            byte[] plainText = cipher.doFinal(encryptedText);\n            decryptedText= new String(plainText);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return decryptedText;\n    }\n\n\n    public static void main(String args []) throws Exception\n    {\n        TrippleDes td= new TrippleDes();\n\n        String target=\"imparator\";\n        String encrypted=td.encrypt(target);\n        String decrypted=td.decrypt(encrypted);\n\n        System.out.println(\"String To Encrypt: \"+ target);\n        System.out.println(\"Encrypted String:\" + encrypted);\n        System.out.println(\"Decrypted String:\" + decrypted);\n\n    }\n\n}\n", "idx": 602}
{"project": "cipher", "commit_id": "Snippet16547808_39470.java", "target": 0, "func": " inStream = new BufferedInputStream(conn.getInputStream());\n outFile = new File(path + fileName);\n outStream = new BufferedOutputStream(new FileOutputStream(outFile), 4096);\n byte[] data = new byte[4096];\n String seed = \"password\";\n byte[] rawKey = Utils.getRawKey(seed.getBytes());\n SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\n Cipher cipher = Cipher.getInstance(\"AES\");\n cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n int bytesRead = 0;\n while((bytesRead = inStream.read(data, 0, data.length)) >= 0)\n {\n      outStream.write(cipher.doFinal(data),0, bytesRead);\n }\n outStream.flush();\n outStream.close();  \n inStream.close();\n", "idx": 603}
{"project": "cipher", "commit_id": "Snippet22863889_5251.java", "target": 0, "func": "static void encrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    // Here you read the cleartext.\n    FileInputStream fis = new FileInputStream(\"data/cleartext\");\n    // This stream write the encrypted text. This stream will be wrapped by another stream.\n    FileOutputStream fos = new FileOutputStream(\"data/encrypted\");\n\n    // Length is 16 byte\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    // Create cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    // Wrap the output stream\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    // Write bytes\n    int b;\n    byte[] d = new byte[8];\n    while((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    cos.flush();\n    cos.close();\n    fis.close();\n}\n", "idx": 604}
{"project": "cipher", "commit_id": "Snippet1927380_30167.java", "target": 0, "func": "public class AES {\n\n    /**\n     * Turns array of bytes into string\n     * \n     * @param buf\n     *            Array of bytes to convert to hex string\n     * @return Generated hex string\n     */\n\n    public static void main(String[] args) throws Exception {\n\n        File file = new File(\"testxls.xls\");\n\n        byte[] lContents = new byte[(int) file.length()];\n        try {\n            FileInputStream fileInputStream = new FileInputStream(file);\n            fileInputStream.read(lContents);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e1) {\n            e1.printStackTrace();\n        }\n        try {\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n            kgen.init(256); // 192 and 256 bits may not be available\n            // Generate the secret key specs.\n            SecretKey skey = kgen.generateKey();\n            // byte[] raw = skey.getEncoded();\n            byte[] raw = \"aabbccddeeffgghhaabbccddeeffgghh\".getBytes();\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n            byte[] encrypted = cipher.doFinal(lContents);\n            cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n            byte[] original = cipher.doFinal(lContents);\n            FileOutputStream f1 = new FileOutputStream(\"testxls_java.xls\");\n            f1.write(original);\n\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    }\n}\n", "idx": 605}
{"project": "cipher", "commit_id": "Snippet6386650_32099.java", "target": 0, "func": "package encryption;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.security.Security;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\n\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\n\npublic class Decrypter {\n\n    private static final String PASSWORD = \"t_9Y#i@eT[h3}-7!\";\n    private static final String KEY_ALGORITHM = \"PBEWithMD5AndDES\";\n    private static final String CIPHER_ALGORITHM = \"RC4\"; //Using Salsa20 or HC256 solves the problem\n    private static final String PROVIDER = \"BC\";\n\n    public static void main(String[] args) throws Exception {\n        Security.addProvider(new BouncyCastleProvider());\n\n        File inputFile = new File(args[0]);\n        File outputFile = new File(args[1]);\n\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KEY_ALGORITHM);\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD.toCharArray()));\n\n        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n        InputStream inputStream = new FileInputStream(inputFile);\n        OutputStream outputStream = new FileOutputStream(outputFile);\n\n        CipherInputStream cipherInputStream = new CipherInputStream(inputStream, cipher);\n\n        byte []byteBuffer = new byte[(int)inputFile.length()]; \n        cipherInputStream.read(byteBuffer);\n        outputStream.write(byteBuffer); //Only 512bytes of decrypted data is written to file, the rest becomes null\n        outputStream.close();\n    }\n\n}\n", "idx": 606}
{"project": "cipher", "commit_id": "Snippet39128103_21004.java", "target": 0, "func": "private static final String ALGORITHM = \"DES\";\nprivate static final String MESSAGE = \"This is an extremely secret message\";\nprivate static final byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7 };\n\n...\n\n// Do encryption\nfinal Cipher cipher = Cipher.getInstance(ALGORITHM);\ncipher.init(ENCRYPT_MODE, new SecretKeySpec(key, ALGORITHM));\nfinal byte[] encrypted = cipher.doFinal(MESSAGE.getBytes());\n\n// Copy the encrypted message to a file\nfinal InputStream inputStream = new ByteArrayInputStream(encrypted);\nfinal OutputStream outputStream = new FileOutputStream(\"___SECRET\");\ncopy(inputStream, outputStream);\n", "idx": 607}
{"project": "cipher", "commit_id": "Snippet18257702_1293.java", "target": 0, "func": "try {\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"Blowfish\");\n        SecretKey secretKey = keyGenerator.generateKey();\n        Cipher cipher = Cipher.getInstance(\"Blowfish\"); \n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        String decryptSt = new String(cipher.doFinal(DatatypeConverter.parseHexBinary(\"f250d7a040859d66541e2ab4a83eb2225d4fff880f7d2506\")));\n        System.out.println(decryptSt);\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(Tester.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchPaddingException ex) {\n        Logger.getLogger(Tester.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidKeyException ex) {\n        Logger.getLogger(Tester.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalBlockSizeException ex) {\n        Logger.getLogger(Tester.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (BadPaddingException ex) {\n        Logger.getLogger(Tester.class.getName()).log(Level.SEVERE, null, ex);\n    }\n", "idx": 608}
{"project": "cipher", "commit_id": "Snippet36984777_18941.java", "target": 0, "func": "try\n    {\n        String val[];\n        String text=\"\";\n        if(get.contains(\",\"))\n        {\n            val=get.split(\",\");\n            text=val[0];\n        }\n        else\n        {\n            text = get;\n        }\n        pubtxt2.setText(\"\"+text.length());\n        String key=cipkey;\n        Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, aesKey);\n        byte sam[]=hextobin(text);\n        String decrypted = new String(cipher.doFinal(sam));\n        output.setText(decrypted);\n        chk=decrypted;\n        pubtxt3.setText(\"\"+chk.length());\n        a2++;\n    }\n    catch(Exception e)\n    {\n        System.err.println(e);\n    }\n", "idx": 609}
{"project": "cipher", "commit_id": "Snippet9350652_33848.java", "target": 0, "func": "public class MessageEncrypt {\n\npublic String encryptString(String message, String seckey) throws Exception{\n    byte[] encData = encrypt(message, seckey);\n\n    return this.getHexString(encData, \"\");\n}\n\npublic String decryptString(String message, String seckey) throws Exception{\n    return decrypt(this.getBArray(message), seckey);\n}\n\nprivate byte[] encrypt(String message, String seckey) throws Exception {\n    final MessageDigest md = MessageDigest.getInstance(\"md5\");\n    final byte[] digestOfPassword = md.digest(seckey.getBytes(\"utf-8\"));\n    final byte[] keyBytes = acopyof(digestOfPassword, 24);\n    for (int j = 0, k = 16; j < 8;) {\n        keyBytes[k++] = keyBytes[j++];\n    }\n\n    final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n    final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n    final byte[] plainTextBytes = message.getBytes(\"utf-8\");\n    final byte[] cipherText = cipher.doFinal(plainTextBytes);\n    // final String encodedCipherText = new sun.misc.BASE64Encoder()\n    // .encode(cipherText);\n\n    return cipherText;\n}\n\nprivate String decrypt(byte[] message, String seckey) throws Exception {\n    final MessageDigest md = MessageDigest.getInstance(\"md5\");\n    final byte[] digestOfPassword = md.digest(seckey.getBytes(\"utf-8\"));\n    final byte[] keyBytes = acopyof(digestOfPassword, 24);\n    for (int j = 0, k = 16; j < 8;) {\n        keyBytes[k++] = keyBytes[j++];\n    }\n\n    final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n    final Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n    final byte[] plainText = decipher.doFinal(message);\n\n    return new String(plainText, \"UTF-8\");\n}\n\nprivate String getHexString(byte[] barray, String delim) {\n    StringBuffer buffer = new StringBuffer();\n\n\n    for (int i = 0; i < barray.length; i++) {\n        int ii = barray[i] & 0xFF;\n        String bInt = Integer.toHexString(ii);\n        if (ii < 16) {\n            bInt = \"0\" + bInt.toUpperCase();\n        }\n        buffer.append(bInt);\n        if (i < barray.length - 1) {\n            buffer.append(delim);\n        }\n    }\n\n    return buffer.toString().toUpperCase();\n}\n\nprivate byte[] getBArray(String bString) {\n    byte[] retBytes;\n\n    if (bString.length() % 2 != 0) {\n        return new byte[0];\n    }\n    retBytes = new byte[bString.length() / 2];\n\n    for (int i = 0; i < bString.length() / 2; i++) {\n        retBytes[i] = (byte) ((Character.digit(bString.charAt(2 * i), 16) << 4) + Character.digit(bString.charAt(2 * i + 1), 16));\n    }\n    return retBytes;\n}\n\npublic static byte[] acopyof(byte[] orig, int newlength){\n    byte[] copya = new byte[newlength];\n    for(int i=0;i< orig.length;i++){\n        copya[i]=orig[i];\n    }\n    for(int i=orig.length;i<newlength;i++){\n        copya[i]=0x0;\n    }\n    return copya;\n}\n", "idx": 610}
{"project": "cipher", "commit_id": "Snippet28023897_10153.java", "target": 0, "func": "  System.out.print(\"Enter text: \");\n      String text = dataIn.readLine();\n      String key = \"Bar12345Bar12345\"; // 128 bit key\n\n       // Create key and cipher\n     Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n     Cipher cipher = Cipher.getInstance(\"AES\");\n ...\n", "idx": 611}
{"project": "cipher", "commit_id": "Snippet46973733_28965.java", "target": 0, "func": "        btn2.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                String plainTextPassword=editText1.getText().toString();\n                String encrypted = \"\";\n                try{\n                    DESKeySpec keySpec = new DESKeySpec(\"qwertykey\".getBytes());\n                    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n                    SecretKey key = keyFactory.generateSecret(keySpec);\n                    byte[] cleartext = plainTextPassword.getBytes();\n\n                    Cipher cipher = Cipher.getInstance(\"DES/CBC/ZeroBytePadding\", \"BC\");; // cipher is not thread safe\n                    cipher.init(Cipher.DECRYPT_MODE, key);\n                    encrypted = Base64.encodeToString(cipher.doFinal(cleartext),Base64.DEFAULT);\n\n                } catch (NoSuchAlgorithmException e) {\n                    e.printStackTrace();\n                } catch (InvalidKeyException e) {\n                    e.printStackTrace();\n                } catch (NoSuchPaddingException e) {\n                    e.printStackTrace();\n                } catch (BadPaddingException e) {\n                    e.printStackTrace();\n                } catch (InvalidKeySpecException e) {\n                    e.printStackTrace();\n                } catch (IllegalBlockSizeException e) {\n                    e.printStackTrace();\n                } catch (NoSuchProviderException e) {\n                    e.printStackTrace();\n                }\n                textView4.setText(encrypted.toString());\n\n\n            }\n\n        });\n", "idx": 612}
{"project": "cipher", "commit_id": "Snippet26546208_8693.java", "target": 0, "func": "private void codealgo() {\n\n    vers();\n\n    // der zu verschl. Text\n    text1 = input.getText().toString();\n\n\n    // Verschluesseln\n\n    try {\n        cipher = Cipher.getInstance(\"AES\");\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    try {\n        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    try {\n        encrypted = cipher.doFinal(text1.getBytes());\n    } catch (IllegalBlockSizeException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    // bytes zu Base64-String konvertieren (dient der Lesbarkeit)\n    geheim = Base64.encodeToString(encrypted, Base64.NO_WRAP);\n\n\n    // Ergebnis\n    output.setText(geheim);\n\n}\n", "idx": 613}
{"project": "cipher", "commit_id": "Snippet35276820_17182.java", "target": 0, "func": "static RSAPrivateKey decrypt(String keyDataStr, String ivHex, String password)\n            throws GeneralSecurityException, UnsupportedEncodingException\n          {\n            byte[] pw = password.getBytes(StandardCharsets.UTF_8);\n            byte[] iv = h2b(ivHex);\n            SecretKey secret = opensslKDF(pw, iv);\n            Cipher cipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n            cipher.init(Cipher.DECRYPT_MODE, secret, new IvParameterSpec(iv));\n            byte [] keyBytes=Base64.decode(keyDataStr.getBytes(\"UTF-8\"));\n            byte[] pkcs1 = cipher.doFinal(keyBytes);\n            /* See note for definition of \"decodeRSAPrivatePKCS1\" */\n            RSAPrivateCrtKeySpec spec = decodeRSAPrivatePKCS1(pkcs1);\n            KeyFactory rsa = KeyFactory.getInstance(\"RSA\");\n            return (RSAPrivateKey) rsa.generatePrivate(spec);\n          }\n\n          private static SecretKey opensslKDF(byte[] pw, byte[] iv)\n            throws NoSuchAlgorithmException\n          {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(pw);\n            md5.update(iv);\n            byte[] d0 = md5.digest();\n            md5.update(d0);\n            md5.update(pw);\n            md5.update(iv);\n            byte[] d1 = md5.digest();\n            byte[] key = new byte[24];\n            System.arraycopy(d0, 0, key, 0, 16);\n            System.arraycopy(d1, 0, key, 16, 8);\n            return new SecretKeySpec(key, \"DESede\");\n          }\n\n          private static byte[] h2b(CharSequence s)\n          {\n            int len = s.length();\n            byte[] b = new byte[len / 2];\n            for (int src = 0, dst = 0; src < len; ++dst) {\n              int hi = Character.digit(s.charAt(src++), 16);\n              int lo = Character.digit(s.charAt(src++), 16);\n              b[dst] = (byte) (hi << 4 | lo);\n            }\n            return b;\n          }\n          static RSAPrivateCrtKeySpec decodeRSAPrivatePKCS1(byte[] encoded)\n          {\n            ByteBuffer input = ByteBuffer.wrap(encoded);\n            if (der(input, 0x30) != input.remaining())\n              throw new IllegalArgumentException(\"Excess data\");\n            if (!BigInteger.ZERO.equals(derint(input)))\n              throw new IllegalArgumentException(\"Unsupported version\");\n            BigInteger n = derint(input);\n            BigInteger e = derint(input);\n            BigInteger d = derint(input);\n            BigInteger p = derint(input);\n            BigInteger q = derint(input);\n            BigInteger ep = derint(input);\n            BigInteger eq = derint(input);\n            BigInteger c = derint(input);\n            return new RSAPrivateCrtKeySpec(n, e, d, p, q, ep, eq, c);\n          }\n\n          private static BigInteger derint(ByteBuffer input)\n          {\n            byte[] value = new byte[der(input, 0x02)];\n            input.get(value);\n            return new BigInteger(+1, value);\n          }\n\n\n          private static int der(ByteBuffer input, int exp)\n          {\n            int tag = input.get() & 0xFF;\n            if (tag != exp)\n              throw new IllegalArgumentException(\"Unexpected tag\");\n            int n = input.get() & 0xFF;\n            if (n < 128)\n              return n;\n            n &= 0x7F;\n            if ((n < 1) || (n > 2))\n              throw new IllegalArgumentException(\"Invalid length\");\n            int len = 0;\n            while (n-- > 0) {\n              len <<= 8;\n              len |= input.get() & 0xFF;\n            }\n            return len;\n          }\n", "idx": 614}
{"project": "cipher", "commit_id": "Snippet16524484_39348.java", "target": 0, "func": "public void decrypt(File file, String output_file_path) throws FileNotFoundException, IOException, GeneralSecurityException {\n    String hex_enc_key = \"346a23652a46392b4d73257c67317e352e3372482177652c\";\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    SecretKeySpec keySpec = new SecretKeySpec(HexParser.fromHexString(hex_enc_key), \"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, keySpec);\n    CipherOutputStream cos = new CipherOutputStream(new FileOutputStream(new File(output_file_path)), cipher);\n    FileInputStream fis = new FileInputStream(file);\n    doCopy(fis, cos);\n}\n", "idx": 615}
{"project": "cipher", "commit_id": "Snippet22821419_5210.java", "target": 0, "func": "public class TestBlowfish\n{\n    final String KEY = \"92514c2df6e22f079acabedce08f8ac3\";\n    final String PLAIN_TEXT = \"sangasong@song.com\";\n    byte[] keyBytes = DatatypeConverter.parseHexBinary(KEY); \n}\n\npublic static void main(String[] args) throws Exception \n{\n    try \n    {\n        byte[] encrypted = encrypt(keyBytes, PLAIN_TEXT);\n        System.out.println( \"Encrypted hex: \" + Hex.encodeHexString(encrypted));\n\n    }catch (GeneralSecurityException e) \n    {\n        e.printStackTrace();\n    }\n}\n\nprivate static byte[] encrypt(byte[] key, String plainText) throws GeneralSecurityException\n{\n    SecretKey secret_key = new SecretKeySpec(key, \"Blowfish\");\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n    cipher.init(Cipher.ENCRYPT_MODE, secret_key);\n\n    return cipher.doFinal(plainText.getBytes());\n} \n", "idx": 616}
{"project": "cipher", "commit_id": "Snippet16997914_289.java", "target": 0, "func": "   ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"keyfile\"));\n    DESKeySpec ks = new DESKeySpec((byte[]) ois.readObject());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey key = skf.generateSecret(ks);\n\n    Cipher c = Cipher.getInstance(\"DES/CFB8/NoPadding\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n    CipherOutputStream cos = new CipherOutputStream(new FileOutputStream(\"ciphertext\"), c);\n    PrintWriter pw = new PrintWriter(new OutputStreamWriter(cos));\n    pw.println(\"Stand and unfold yourself\");\n    pw.close();\n", "idx": 617}
{"project": "cipher", "commit_id": "Snippet9212749_33753.java", "target": 0, "func": "public void encrypt(String plaintext, String IV, String tripleDesKey){\n\ntry{\n\n     SecretKey keySpec = new SecretKeySpec(tripleDesKey.getBytes(\"US-ASCII\"),\"DESede\");\n\n    IvParameterSpec iv = new IvParameterSpec(IV.getBytes(\"US-ASCII\"));\n\n    Cipher e_cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    e_cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);\n\n    byte [] cipherText = e_cipher.doFinal(plaintext.trim().getBytes(\"US-ASCII\"));\n\n        System.out.println(\"Ciphertext: \" + asHex(cipherText));\n}\ncatch(Exception exc){\n ex.printStackTrace();\n}\n}\n", "idx": 618}
{"project": "cipher", "commit_id": "Snippet30897347_13046.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");", "idx": 619}
{"project": "cipher", "commit_id": "Snippet11920096_35890.java", "target": 0, "func": "static void Encrypt() throws IOException, NoSuchAlgorithmException,\n            NoSuchPaddingException, InvalidKeyException {\n        try {\n\n            FileInputStream fis = new FileInputStream(Environment\n                    .getExternalStorageDirectory().getAbsolutePath()\n                    + \"/logo.png\");\n            FileOutputStream fos = new FileOutputStream(Environment\n                    .getExternalStorageDirectory().getAbsolutePath()\n                    + \"/Encrypted\");\n\n\n            SecretKeySpec aeskeySpec = new SecretKeySpec(\n                    \"12345678901234567890123456789012\".getBytes(), \"AES\");\n\n            tv.setText(aeskeySpec.getEncoded().toString());\n            Cipher cipher = Cipher.getInstance(\"AES\");\n\n            cipher.init(Cipher.ENCRYPT_MODE, aeskeySpec);\n            CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n            int b;\n\n            byte[] d = new byte[8];\n            while ((b = fis.read(d)) != -1) {\n                cos.write(d, 0, b);\n\n            }\n\n            cos.flush();\n            cos.close();\n            fis.close();\n\n        }// try\n        catch (Exception e) {\n            // TODO: handle exception\n            tv.setText(\"Error :\" + e.getMessage()); } }// encrypt\n", "idx": 620}
{"project": "cipher", "commit_id": "Snippet9195616_33743.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.Key;\nimport java.security.InvalidKeyException;\n\npublic class DESede {\n    private static String algorithm = \"DESede\";\n    private static Key key = null;\n    private static SecretKey secretKey = null;\n    private static Cipher cipher = null;\n    private static DESede obj = new DESede();\n\n    private DESede() {\n        try {\n            key = KeyGenerator.getInstance(algorithm).generateKey();\n            KeyGenerator.getInstance(algorithm).getProvider();\n            byte[] keyBytes = key.getEncoded();\n            String keyFormat = key.getFormat();\n            String keyAlgorithm = key.getAlgorithm();\n            String keyString = new String(keyBytes);\n            System.out.println(\"Key Format::\" + keyFormat);\n            System.out.println(\"Key Algorithm::\" + keyAlgorithm);\n            System.out.println(\"Key String::\" + keyString);\n            keyString.getBytes();\n            secretKey = new SecretKeySpec(keyBytes, 0, keyBytes.length, \"DESede\");\n            byte[] secretKeyBytes = key.getEncoded();\n            String secretKeyFormat = key.getFormat();\n            String secretKeyAlgorithm = key.getAlgorithm();\n            String secretKeyString = new String(secretKeyBytes);\n            System.out.println(\"Secret Key Format::\" + secretKeyFormat);\n            System.out.println(\"Secret Key Algorithm::\" + secretKeyAlgorithm);\n            System.out.println(\"Secret Key String::\" + secretKeyString);\n            String keyNewString = \"bX\u0152*\u00ea\u00c2\u00d5\u00ea\u203a\u00e6O\u00c4\u2019\u00ce\u00fd\u2018\u00e3\u00f4|8\u00b6\u00cb1\u00ad\";\n            byte[] keyNewBytes = keyString.getBytes();\n            secretKey = new SecretKeySpec(keyBytes, 0, keyBytes.length, \"DESede\");\n            cipher = Cipher.getInstance(algorithm);\n        } catch (Exception e) {\n        }\n    }\n\n    public static DESede getInstance() {\n        return obj;\n    }\n\n    public static byte[] encrypt(String input) throws InvalidKeyException,\n            BadPaddingException, IllegalBlockSizeException {\n        System.out.println(\"Inside encrypt()\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] inputBytes = input.getBytes();\n        System.out.println(\"Exit encrypt()\");\n        return cipher.doFinal(inputBytes);\n    }\n\n    public static String decrypt(byte[] encryptionBytes)\n            throws InvalidKeyException, BadPaddingException,\n            IllegalBlockSizeException {\n        System.out.println(\"Inside decrypt()\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        byte[] recoveredBytes = cipher.doFinal(encryptionBytes);\n        String recovered = new String(recoveredBytes);\n        System.out.println(\"Exiting decrypt()\");\n        return recovered;\n    }\n\n    public static void main(String args[]) throws InvalidKeyException,\n            BadPaddingException, IllegalBlockSizeException {\n        byte[] encryptedValue = DESede.encrypt(\"plz try encrypt and decrypt me\");\n        System.out.println(\"encryptedValue::\" + encryptedValue);\n        String decryptedValue = DESede.decrypt(encryptedValue);\n        System.out.println(\"decryptedValue::\" + decryptedValue);\n    }\n}\n", "idx": 621}
{"project": "cipher", "commit_id": "Snippet10914842_35175.java", "target": 0, "func": "public static byte[] hexDecode(String hex) {\n    ByteArrayOutputStream bas = new ByteArrayOutputStream();\n    for (int i = 0; i < hex.length(); i+=2) {\n        int b = Integer.parseInt(hex.substring(i, i + 2), 16);\n        bas.write(b);\n    }\n    return bas.toByteArray();\n}\n\nbyte[] key = hexDecode(\"<hex representation of the Ruby key>\");\nbyte[] iv = hexDecode(\"<hex representation of the Ruby IV>\");\n\nDESedeKeySpec desKeySpec = new DESedeKeySpec(key);\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DESede\");\nKey secretKey = keyFactory.generateSecret(desKeySpec);\nIvParameterSpec ivSpec = new IvParameterSpec(iv);\nCipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\ncipher.init(Cipher.DECRYPT_MODE, secretKey, ivSpec);\n... /* do the decryption */\n", "idx": 622}
{"project": "cipher", "commit_id": "Snippet14490575_37774.java", "target": 0, "func": "private static byte[] key = \"12345678\".getBytes();// 64 bit \nprivate static byte[] iv = \"12345678\".getBytes();\n\npublic static String encrypt(String in) {\n    String cypert = in;\n    try {\n        IvParameterSpec ivSpec = new IvParameterSpec(iv);\n        SecretKeySpec k = new SecretKeySpec(key, \"DES\");\n        Cipher c = Cipher.getInstance(\"DES/CBC/PKCS7Padding\");\n        c.init(Cipher.ENCRYPT_MODE, k, ivSpec);\n        byte[] encryptedData = c.doFinal(in.getBytes());\n        cypert = Base64.encodeLines(encryptedData);\n    } catch (Exception e) {\n        Debugger.error(e);\n    }\n    return cypert;\n}\n\n\npublic static String decrypt(String in) throws Exception {\n    String plain=in;\n    try {\n        IvParameterSpec ivSpec = new IvParameterSpec(iv);\n        SecretKeySpec keys = new SecretKeySpec(key, \"DES\");\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS7Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, keys, ivSpec);\n        // decryption pass\n        byte[] cipherText = Base64.decodeLines(in);\n        int ctLength = cipherText.length;\n        byte[] plainText = new byte[cipher.getOutputSize(ctLength)];\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        bos.write(cipher.doFinal(cipherText));\n        plainText = bos.toByteArray();\n        bos.close();\n        plain = new String(plainText, \"UTF8\");\n    } catch (Exception e) {\n        Debugger.error(e);\n    }\n    return plain;\n}\n", "idx": 623}
{"project": "cipher", "commit_id": "Snippet8181040_33113.java", "target": 0, "func": "private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        //SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(raw, \"AES\"), new IvParameterSpec(new byte[cipher.getBlockSize()]));\n        byte[] decrypted = cipher.doFinal(encrypted);\n            return decrypted;\n    }\n", "idx": 624}
{"project": "cipher", "commit_id": "Snippet6676826_32271.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class AESEncrypter {\n    public static void encryptToBinaryFile(String password, byte[] bytes, File file) throws EncrypterException {\n        try {\n            final byte[] rawKey = getRawKey(password.getBytes());\n            final FileOutputStream ostream = new FileOutputStream(file, false);\n\n            ostream.write(encrypt(rawKey, bytes));\n            ostream.flush();\n            ostream.close();\n\n        } catch (IOException e) {\n            throw new EncrypterException(e);\n        }\n    }\n\npublic static byte[] decryptFromBinaryFile(String password, File file) throws EncrypterException {\n    try {\n        final byte[] rawKey = getRawKey(password.getBytes());\n        final FileInputStream istream = new FileInputStream(file);\n        final byte[] buffer = new byte[(int)file.length()];\n\n        istream.read(buffer);\n\n        return decrypt(rawKey, buffer);\n\n    } catch (IOException e) {\n        throw new EncrypterException(e);\n    }\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws EncrypterException {\n    try {\n        final KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        final SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n\n        final SecretKey skey = kgen.generateKey();\n\n        return skey.getEncoded();\n\n    } catch (Exception e) {\n        throw new EncrypterException(e);\n    }\n}\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws EncrypterException {\n    try {\n        final SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        final Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        return cipher.doFinal(clear);\n\n    } catch (Exception e) {\n        throw new EncrypterException(e);\n    }\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws EncrypterException {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    try {\n        final Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        return cipher.doFinal(encrypted);\n\n    } catch (Exception e) {\n        throw new EncrypterException(e);\n    }\n}\n", "idx": 625}
{"project": "cipher", "commit_id": "Snippet20233775_2890.java", "target": 0, "func": "        String strDataToEncrypt = new String();\n        String strCipherText = new String();\n        String strDecryptedText = new String();\n\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        keyGen.init(128);\n        SecretKey secretKey = keyGen.generateKey();\n\n        Cipher aesCipher = Cipher.getInstance(\"AES\");\n        aesCipher.init(Cipher.ENCRYPT_MODE,secretKey);\n\n        strDataToEncrypt = \"any text input\";\n        byte[] byteDataToEncrypt = strDataToEncrypt.getBytes();\n        byte[] byteCipherText = aesCipher.doFinal(byteDataToEncrypt); \n        strCipherText = new BASE64Encoder().encode(byteCipherText);\n        System.out.println(\"cipher text: \" +strCipherText);\n        aesCipher.init(Cipher.DECRYPT_MODE,secretKey,aesCipher.getParameters());\n        byte[] byteDecryptedText = aesCipher.doFinal(new BASE64Decoder().decodeBuffer(strCipherText));\n        strDecryptedText = new String(byteDecryptedText);\n        System.out.println(\"plain text again: \" +strDecryptedText);\n", "idx": 626}
{"project": "cipher", "commit_id": "Snippet29756654_11826.java", "target": 0, "func": "import java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\npublic class RealEchoServer {\n\npublic static void main(String[] args) {\n    int i = 1;\n    try {\n        ServerSocket s = new ServerSocket(9003);\n\n        for (;;) {\n            Socket incoming = s.accept();\n            System.out.println(\"Spawning \" + i);\n            new RealEchoHandler(incoming, i).start();\n            i++;\n        }\n    } catch (Exception e) {\n        System.out.println(e);\n    }\n }\n}\n\nclass RealEchoHandler extends Thread {\n\nDataInputStream in;\nDataOutputStream out;\nprivate Socket incoming;\nprivate int counter;\n\npublic RealEchoHandler(Socket i, int c) {\n    incoming = i;\n    counter = c;\n}\n\npublic void run() {\n    try {\n\n        String key1 = \"1234567812345678\";\n        byte[] key2 = key1.getBytes();\n        SecretKeySpec secret = new SecretKeySpec(key2, \"AES\");\n        String msg = \"Singapore Malaysia Japan India Indonesia HongKong Taiwan China England\";\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secret);\n        byte[] encrypted = cipher.doFinal(msg.getBytes());\n\n        in = new DataInputStream(incoming.getInputStream());\n        out = new DataOutputStream(incoming.getOutputStream());\n\n        boolean done = false;\n        String str = \"\";\n        out.writeUTF(\"Connected!\\n\");\n        out.flush();\n        while (!done) {\n            out.writeUTF(\">\");\n            out.flush();\n            str = in.readUTF();\n            System.out.println(in + \":\" + str);\n            if (str == null) {\n                done = true;\n            } else {\n                System.out.println(\"Sending Ciphertext : \" + new String(encrypted));\n                out.writeUTF(new String(encrypted));\n                out.flush();\n            }\n        }\n        incoming.close();\n    } catch (Exception e) {\n        System.out.println(e);\n    }\n }\n}\n", "idx": 627}
{"project": "cipher", "commit_id": "Snippet14577215_37758.java", "target": 0, "func": "public class KeyEncryptExample {\n\n    public static void main(String[] args) {\n        try {\n            String key = \"mariahussain\"; // needs to be at least 8 characters for DES\n\n            FileInputStream fis = new FileInputStream(\"C:/Users/hussain.a/Desktop/original.txt\");\n            FileOutputStream fos = new FileOutputStream(\"C:/Users/hussain.a/Desktop/encrypted.txt\");\n            encrypt(key, fis, fos);\n\n            FileInputStream fis2 = new FileInputStream(\"C:/Users/hussain.a/Desktop/encrypted.txt\");\n            FileOutputStream fos2 = new FileOutputStream(\"C:/Users/hussain.a/Desktop/decrypted.txt\");\n            decrypt(key, fis2, fos2);\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void encrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.ENCRYPT_MODE, is, os);\n    }\n\n    public static void decrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);\n    }\n\n    public static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n\n        DESKeySpec dks = new DESKeySpec(key.getBytes());\n        SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey desKey = skf.generateSecret(dks);\n        Cipher cipher = Cipher.getInstance(\"DES\"); // DES/ECB/PKCS5Padding for SunJCE\n\n        if (mode == Cipher.ENCRYPT_MODE) {\n            cipher.init(Cipher.ENCRYPT_MODE, desKey);\n            CipherInputStream cis = new CipherInputStream(is, cipher);\n            doCopy(cis, os);\n        } else if (mode == Cipher.DECRYPT_MODE) {\n            cipher.init(Cipher.DECRYPT_MODE, desKey);\n            CipherOutputStream cos = new CipherOutputStream(os, cipher);\n            doCopy(is, cos);\n        }\n    }\n\n    public static void doCopy(InputStream is, OutputStream os) throws IOException {\n        byte[] bytes = new byte[64];\n        int numBytes;\n        while ((numBytes = is.read(bytes)) != -1) {\n            os.write(bytes, 0, numBytes);\n        }\n        os.flush();\n        os.close();\n        is.close();\n    }\n\n}\n", "idx": 628}
{"project": "cipher", "commit_id": "Snippet8543693_33315.java", "target": 0, "func": "static {\n  System.out.println(System.getProperty(\"java.version\"));\n  for (Provider provider : Security.getProviders())\n    System.out.println(provider);\n}\n\npublic static void main(String[] args) throws Exception {\n  KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n  keyGenerator.init(128);\n  SecretKey secretKey = keyGenerator.generateKey();\n  Cipher cipher = Cipher.getInstance(\"AES\");\n  cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n}\n", "idx": 629}
{"project": "cipher", "commit_id": "Snippet39579952_21521.java", "target": 0, "func": "private static final byte[] ENCRYPTION_KEY = Hex.decode(\"448D3F076D8304036A55A3D7E0055A78\");\nprivate static final byte[] PLAINTEXT = Hex.decode(\"1234567890ABCDEFFEDCBA0987654321\");\n\npublic static void main(String[] args) throws Exception {\n    SecretKey desABAKey = createDES_ABAKey(ENCRYPTION_KEY);\n    Cipher desEDE = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n    IvParameterSpec zeroIV = new IvParameterSpec(new byte[desEDE.getBlockSize()]);\n    desEDE.init(Cipher.ENCRYPT_MODE, desABAKey, zeroIV);\n    byte[] ciphertext = desEDE.doFinal(PLAINTEXT);\n    System.out.println(Hex.toHexString(ciphertext));\n}\n", "idx": 630}
{"project": "cipher", "commit_id": "Snippet31623866_13738.java", "target": 0, "func": "import java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AESSecurityUtil {\n\n    private static final String AES = \"AES\";  \n    private static final String CHARSET_NAME = \"utf-8\";  \n\n\n    private static SecretKeySpec getKey(String password) throws NoSuchAlgorithmException{  \n\n        KeyGenerator kgen = KeyGenerator.getInstance(AES);  \n        SecureRandom random=SecureRandom.getInstance(\"SHA1PRNG\");\n        random.setSeed(password.getBytes());\n        kgen.init(128, random);    \n\n        SecretKey secretKey = kgen.generateKey();  \n        byte[] enCodeFormat = secretKey.getEncoded();    \n        SecretKeySpec key = new SecretKeySpec(enCodeFormat, AES);   \n        return key;  \n    }  \n\n\n    public static String encode(String str, String password)  \n    {  \n        byte[] arr = encodeToArr(str, password);  \n        return byteArrToString(arr);  \n    }  \n\n\n    private static byte[] encodeToArr(String str, String password)  \n    {  \n        try\n        {  \n            Cipher cipher = Cipher.getInstance(AES);\n            byte[] byteContent = str.getBytes(CHARSET_NAME);  \n\n            cipher.init(Cipher.ENCRYPT_MODE, getKey(password));\n            byte[] result = cipher.doFinal(byteContent);    \n            return result;  \n        }  \n        catch (Exception e)  \n        {  \n            e.printStackTrace();  \n        }    \n        return null;  \n    }  \n\n\n    public static String decode(String hexStr, String password){  \n        byte[] arr = string2ByteArr(hexStr);  \n        return decode(arr, password);  \n    }  \n\n\n    private static String decode(byte[] arr, String password)  {  \n        try{  \n\n            Cipher cipher = Cipher.getInstance(AES);  \n            cipher.init(Cipher.DECRYPT_MODE, getKey(password));\n\n            byte[] result = cipher.doFinal(arr);  \n            return new String(result, CHARSET_NAME);  \n        }catch (Exception e){  \n            e.printStackTrace();  \n        }  \n        return null;  \n    }  \n\n\n\n    private static String byteArrToString(byte[] arr)  {  \n        StringBuffer sb = new StringBuffer();   \n        for (int i = 0; i <arr.length; i++)  {    \n            String s = Integer.toString(arr[i] + 128, 16);  \n            if (s.length() == 1){  \n                s = \"0\" + s;  \n            }    \n            sb.append(s);  \n        }  \n\n        return sb.toString().toUpperCase();  \n    }  \n\n\n    private static byte[] string2ByteArr(String s)  {  \n        s = s.toUpperCase();  \n        String str = \"0123456789ABCDEF\";    \n        byte[] arr = new byte[s.length() / 2];   \n        for (int i = 0; i <arr.length; i++){  \n            char s1 = s.charAt(i * 2);  \n            char s2 = s.charAt(i * 2 + 1);    \n            int tmp1 = str.indexOf(s1) * 16;  \n            int tmp2 = str.indexOf(s2);    \n            arr[i] = (byte) (tmp1 + tmp2 - 128);  \n        }    \n        return arr;  \n    }  \n\n    public static void main(String[] args) throws Exception  {\n        System.out.println(decode(\"03AB8A3B85AFDD3926850B14C1BFF608\", \"imcc\"));\n        String keyStr = \"UITN25LMUQC436IM\";  \n\n        String plainText = \"this is a string will be AES_Encrypt\";\n\n        String encText = encode(plainText,keyStr);\n        String decString = decode(encText,keyStr); \n\n        System.out.println(encText); \n        System.out.println(decString); \n    }\n}\n", "idx": 631}
{"project": "cipher", "commit_id": "Snippet24213249_6505.java", "target": 0, "func": "String message = \"...\"; //this received from php\nString privateKey = \"...\"; //this key was generated in android\nbyte[] privateKeyBytes = Base64.decode(privateKey);\nPKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privateKeyBytes);\nKeyFactory fact = KeyFactory.getInstance(\"RSA\", \"SC\");\nPrivateKey priv = fact.generatePrivate(keySpec);\nCipher rsaCipher = Cipher.getInstance(\"RSA/None/OAEPWithSHA1AndMGF1Padding\", \"SC\");\nrsaCipher.init(Cipher.DECRYPT_MODE, priv);\nbyte[] messageDecryptBytes = rsaCipher.doFinal(message);\nString messageDecrypt = new String(Base64.encode(messageDecryptBytes));\n", "idx": 632}
{"project": "cipher", "commit_id": "Snippet14371709_37674.java", "target": 0, "func": "public class Cripthografy {\nprivate static String TAG=\"freeliberomail\";\n\n public static String encrypt(String seed, String cleartext){\n   byte[] rawKey;\n   byte[] result=null;\n try {\nrawKey = getRawKey(seed.getBytes());\n\n     result = encrypt(rawKey, cleartext.getBytes());\n  } catch (Exception e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n  }\n   return toHex(result);\n  }\n\n  public static String decrypt(String seed, String encrypted) {\n    byte[] rawKey;\n    byte[] result=null;\n   try {\nrawKey = getRawKey(seed.getBytes());\n\n    byte[] enc = toByte(encrypted);\n    result = decrypt(rawKey, enc);\n    } catch (Exception e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n   }\n    return new String(result);\n   }\n\n\n   private static byte[] getRawKey(byte[] seed) throws Exception {\n      KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n      SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n      sr.setSeed(seed);\n      kgen.init(128, sr); // 192 and 256 bits may not be available\n      SecretKey skey = kgen.generateKey();\n      byte[] raw = skey.getEncoded();\n      return raw;\n    }\n    private static byte[] encrypt(byte[] raw, byte[] clear){\n byte[] encrypted=null;\n      SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n      Cipher cipher;\n     try {\n cipher = Cipher.getInstance(\"AES\");\n     cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n     encrypted = cipher.doFinal(clear);\n     } catch (NoSuchAlgorithmException e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n    } catch (InvalidKeyException e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n    } catch (BadPaddingException e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n    }\n     return encrypted;\n    }\n\n\n     private static byte[] decrypt(byte[] raw, byte[] encrypted) {\n byte[] decrypted = null;\n     SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n     Cipher cipher;\n     try {\n cipher = Cipher.getInstance(\"AES\");\n     cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n     decrypted = cipher.doFinal(encrypted);\n     }catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      } catch (InvalidKeyException e) {\n// TODO Auto-generated catch block\ne.printStackTrace(); \n     } catch (IllegalBlockSizeException e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n   } catch (BadPaddingException e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n   }\n\n    return decrypted;\n   }\n\n\n  public static String toHex(String txt) {\n  return toHex(txt.getBytes());\n  }\n\n public static String fromHex(String hex) {\n return new String(toByte(hex));\n }\n\n public static byte[] toByte(String hexString) {\n  int len = hexString.length()/2;\n  byte[] result = new byte[len];\n  for (int i = 0; i < len; i++)\n  result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n  return result;\n }\n\n\n  public static String toHex(byte[] buf) {\n    if (buf == null)\n    return \"\";\n    StringBuffer result = new StringBuffer(2*buf.length);\n      for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n     return result.toString();\n   }\n  private final static String HEX = \"0123456789ABCDEF\";\n  private static void appendHex(StringBuffer sb, byte b) {\n  sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n  }\n\n}\n", "idx": 633}
{"project": "cipher", "commit_id": "Snippet18266482_1315.java", "target": 0, "func": "//json encoding\nJSONObject obj = new JSONObject();\nobj.put(\"email\", username);\nobj.put(\"password\", password);\nobj.put(\"action\", \"login\");\n\n//function to encode base64\nprivate String getBase64Encoded(String encryptedJsonString)\n{\n    byte[] encoded = Base64.encodeBase64(encryptedJsonString.getBytes());\n\n    String encodedString = new String(encoded);\n\n    return encodedString;\n}\n\n//function to encrypt in RC4\nprivate String getRC4EncryptedString2(String string, String key) throws Exception\n{\n    Cipher cipher = Cipher.getInstance(\"RC4\");\n    SecretKeySpec rc4Key = new SecretKeySpec(key.getBytes(), \"RC4\");\n    cipher.init(Cipher.ENCRYPT_MODE, rc4Key);\n\n    byte[] cipherText = cipher.update(string.getBytes());\n\n    return new String(cipherText);\n}\n", "idx": 634}
{"project": "cipher", "commit_id": "Snippet32513795_14617.java", "target": 0, "func": "private static byte[] passwordDecrypt(char[] password, byte[] ciphertext) {\n    byte[] salt = new byte[8];\n    ByteArrayInputStream bais = new ByteArrayInputStream(ciphertext);\n    bais.read(salt, 0, 8);\n\n    byte[] remainingCiphertext = new byte[ciphertext.length - 8];\n    bais.read(remainingCiphertext, 0, ciphertext.length - 8);\n\n\n    PBEKeySpec keySpec = new PBEKeySpec(password, salt, 1000, 64);\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndTripleDES\");\n    SecretKey key = keyFactory.generateSecret(keySpec);\n    PBEParameterSpec paramSpec = new PBEParameterSpec(salt, ITERATIONS);\n    Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndTripleDES\");\n\n    // Perform decryption.\n    cipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n\n    return cipher.doFinal(remainingCiphertext);\n}\n\nprivate static byte[] passwordEncrypt(char[] password, byte[] plaintext) {\n    byte[] salt = new byte[8];\n    Random random = new Random();\n    random.nextBytes(salt);\n\n    PBEKeySpec keySpec = new PBEKeySpec(password, salt, 1000, 64);\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndTripleDES\");\n    SecretKey key = keyFactory.generateSecret(keySpec);\n    PBEParameterSpec paramSpec = new PBEParameterSpec(salt, ITERATIONS);\n    Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndTripleDES\");\n    cipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n\n    // Encrypt array\n    byte[] ciphertext = cipher.doFinal(plaintext);\n\n    // Write out the salt, then the ciphertext and return it.\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    b.write(salt);\n    b.write(ciphertext);\n    return b.toByteArray();\n}\n", "idx": 635}
{"project": "cipher", "commit_id": "Snippet16844569_185.java", "target": 0, "func": "   public byte[]   getImageFile(String fileName) throws FileNotFoundException\n{\n  byte[] Image_data = null;\n  byte[] inarry = null;\n\n    try {\n        File file = new File(fileName);\n        @SuppressWarnings(\"resource\")\n    FileInputStream  is = new FileInputStream (file); // use recorded file instead of getting file from assets folder.\n        int length = is.available();\n        Image_data = new byte[length];\n\n        int bytesRead;\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        while ((bytesRead = is.read(Image_data)) != -1)\n        {\n            output.write(Image_data, 0, bytesRead);\n        }\n      inarry = output.toByteArray();\n\n    } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\nreturn inarry;\n}\n\n\npublic  byte[] encrypt(String seed, byte[] cleartext) throws Exception {\n\n    byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext);\n      //  return toHex(result);\n        return result;\n}\n\npublic  byte[] decrypt(String seed, byte[] encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = encrypted;\n        byte[] result = decrypt(rawKey, enc);\n\n        return result;\n}\n\n//done\nprivate  byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n    kgen.init(128, sr); \n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n} \n\n\nprivate  byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n}\n\nprivate  byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n}\n", "idx": 636}
{"project": "cipher", "commit_id": "Snippet15926867_38921.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 637}
{"project": "cipher", "commit_id": "Snippet33694505_15744.java", "target": 0, "func": "public static class Upper_fragment extends Fragment {\n\n        private static final String TAG = \"PlayActivity\";\n\n        private Video vid;\n        int mSavedVideoPosition;\n        protected VideoPlayerInterface vidp;\n        private LocalSingleHttpServer mServer;\n\n\n        // to be implemented in concrete activities\n        public Cipher getCipher() throws GeneralSecurityException {\n            final Cipher c = Cipher.getInstance(\"AES\");    // NoSuchAlgorithmException, NoSuchPaddingException\n            c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(\"abcdef1234567890\".getBytes(), \"AES\"));    // InvalidKeyException\n            return c;\n        }\n\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                                 Bundle savedInstanceState) {\n            View upperView = inflater.inflate(R.layout.upper_fragment, container, false);\n\n            vidp = (VideoPlayerInterface) upperView.findViewById(R.id.vid);\n            getRTSPUrl();\n\n            init(getIntent().getSerializableExtra(Const.EXTRA_DATA));\n            return upperView;\n        }\n}\n", "idx": 638}
{"project": "cipher", "commit_id": "Snippet41656186_23590.java", "target": 0, "func": "import java.security.NoSuchAlgorithmException;\nimport java.util.Random;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n// adapted from http://stackoverflow.com/a/1205272/\npublic class Crypt {\n    private static byte[] ivBytes;\n    private static Cipher cipher;\n    private static SecretKeySpec keySpec;\n    private static IvParameterSpec ivSpec;\n    private static Random random;\n    private static long seed;\n\n    private Crypt() {\n    }\n\n    private static byte[] ivBytes() {\n        random.setSeed(seed);\n        byte[] bytes = new byte[7];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n\n    public static String encrypt(String key, String input) {\n        prepare(key);\n        byte[] inputBytes = input.getBytes();\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec);\n            byte[] encrypted = new byte[cipher.getOutputSize(inputBytes.length)];\n            int enc_len = cipher.update(inputBytes, 0, inputBytes.length, encrypted, 0);\n            enc_len += cipher.doFinal(encrypted, enc_len);\n            return new String(encrypted);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            return null;\n        }\n    }\n\n    public static String decrypt(String key, String input) {\n        prepare(key);\n        byte[] inputBytes = input.getBytes();\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);\n            byte[] decrypted = new byte[cipher.getOutputSize(inputBytes.length)];\n            int dec_len = cipher.update(inputBytes, 0, inputBytes.length, decrypted, 0);\n            dec_len += cipher.doFinal(decrypted, dec_len);\n            return new String(decrypted);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            return null;\n        }\n    }\n\n    private static void prepare(String key) {\n        byte[] keyBytes = new byte[7];\n        byte[] bytesFromKey = key.getBytes();\n        int length = keyBytes.length < bytesFromKey.length ? keyBytes.length : bytesFromKey.length;\n        System.arraycopy(bytesFromKey, 0, keyBytes, 0, length);\n        // if the length is smaller then keyBytes length, there are trailing\n        // zeros in the keyBytes. Fill them with the use of the seed;\n        if (length < keyBytes.length) {\n            random.setSeed(seed);\n            byte[] newBytes = new byte[keyBytes.length - length];\n            random.nextBytes(newBytes);\n            System.arraycopy(newBytes, 0, keyBytes, length, newBytes.length);\n        }\n\n        keySpec = new SecretKeySpec(keyBytes, \"DES\");\n        ivSpec = new IvParameterSpec(ivBytes);\n        try {\n            cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void init(String id) {\n        seed = id.hashCode();\n        random = new Random(seed);\n        ivBytes = ivBytes();\n    }\n\n    public static final void main(String[] args) {\n        init(\"123456\");\n        String str = \"ILikeTurtles\";\n        String key = \"KEY123\";\n        String encrypted = encrypt(key, str);\n        System.out.println(encrypted);\n        System.out.println(decrypt(key, encrypted));\n    }\n}\n", "idx": 639}
{"project": "cipher", "commit_id": "Snippet7753438_32907.java", "target": 0, "func": "public class CipherAES implements Cipher {\n\n    private static final Logger logger = Logger.getLogger(CipherAES.class);\n\n    private Key key;\n\n    public CipherAES() {\n        this.key = generateKey();\n    }\n\n    private Key generateKey() {\n        try {\n            KeyGenerator generator;\n            generator = KeyGenerator.getInstance(\"AES\");\n            generator.init(new SecureRandom());\n            return generator.generateKey();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    @Override\n    public void decrypt(InputStream inputStream, OutputStream outputStream) throws IOException {\n        try {\n            javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(\"AES\");\n            cipher.init(javax.crypto.Cipher.DECRYPT_MODE, key);\n            byte[] raw = IOUtil.toByteArray(inputStream);\n            byte[] base64Decoded = Base64.decodeBase64(raw);\n            byte[] decryptedData = cipher.doFinal(base64Decoded);\n            outputStream.write(decryptedData);\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        } finally {\n            inputStream.close();\n            outputStream.close();\n        }\n    }\n\n    @Override\n    public void encrypt(InputStream inputStream, OutputStream outputStream) throws IOException {\n        try {\n            javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(\"AES\");\n            cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, key);\n            byte[] raw = IOUtil.toByteArray(inputStream);\n            byte[] encryptedData = cipher.doFinal(raw);\n            byte[] base64Encoded = Base64.encodeBase64(encryptedData);\n            outputStream.write(base64Encoded);\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        } finally {\n            inputStream.close();\n            outputStream.close();\n        }\n    }\n\n}\n", "idx": 640}
{"project": "cipher", "commit_id": "Snippet30528169_12709.java", "target": 0, "func": "byte[] key = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\".getBytes();\nbyte[] data = \"x\".getBytes();\nbyte[] iv = \"1111111111111111\".getBytes();\nCipher cipher = Cipher.getInstance(\"AES\");\nIvParameterSpec ivspec = new IvParameterSpec(iv);\ncipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, \"AES\"), ivspec);\nbyte[] result = cipher.doFinal(data);\n_print(result);\n", "idx": 641}
{"project": "cipher", "commit_id": "Snippet34959528_16925.java", "target": 0, "func": "try {\n        decrypt(list.image_path);\n    } catch (IOException | NoSuchAlgorithmException | InvalidKeyException | NoSuchPaddingException e) {\n        e.printStackTrace();\n    }\n\n    Picasso.with(context).load(new File(list.image_path)).error(R.drawable.logo).placeholder(R.drawable.logo)\n            .into(holder.lock_image);\n\n public void decrypt(String image) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,\n            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 }; //Choose a key wisely\n    FileInputStream fis = new FileInputStream(image);\n\n    FileOutputStream fos = new FileOutputStream(image);\n    SecretKeySpec sks = new SecretKeySpec(keyBytes, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n\n    fos.flush();\n    fos.close();\n    cis.close();\n}\n", "idx": 642}
{"project": "cipher", "commit_id": "Snippet40736491_22591.java", "target": 0, "func": "public String encrypt(String message) throws Exception {\n\n        final MessageDigest md = MessageDigest.getInstance(\"md5\");\n        final byte[] digestOfPassword = md.digest(\"1234567890123\".getBytes());\n        final byte[] keyBytes = Arrays.copyOf(Arrays.copyOf(digestOfPassword, 12), 24);\n\n        DESedeKeySpec spec = new DESedeKeySpec(keyBytes);\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DESede\");\n        SecretKey theKey = keyFactory.generateSecret(spec);\n        Cipher cipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, theKey);\n        byte[] plaintext = message.getBytes();\n        byte[] encrypted = cipher.doFinal(plaintext);\n\n        final String encodedCipherText = Base64.getEncoder().encodeToString(encrypted);\n\n        return encodedCipherText;\n    }\n", "idx": 643}
{"project": "cipher", "commit_id": "Snippet41699643_23679.java", "target": 0, "func": "import java.nio.file.Files;\nimport java.nio.file.Paths;\n\nimport java.util.Base64;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.SecureRandom;\n\n\npublic class EncryptFile{\n    private static final String FILE_IN = \"./EncryptFile.java\";\n    private static final String FILE_ENCR = \"./EncryptFile_encr.java\";\n    private static final String FILE_DECR = \"./EncryptFile_decr.java\";\n     public static void main(String []args){\n        try\n        {\n            Encryption(\"passwordisnottheactual\", Files.readAllBytes(Paths.get(FILE_IN)));\n            Decryption(\"passwordisnottheactual\");\n\n        }catch(Exception e){\n            System.out.println(e.getMessage());\n        }\n     }\n     private static void Encryption(String Key, byte[] byteArray) throws Exception\n     {\n        // Decode the base64 encoded Key\n        byte[] decodedKey = Base64.getDecoder().decode(Key);\n        // Rebuild the key using SecretKeySpec\n        SecretKey secretKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\"); \n\n        // Cipher gets AES Algorithm instance\n        Cipher AesCipher = Cipher.getInstance(\"AES\");\n\n        //Initialize AesCipher with Encryption Mode, Our Key and A ?SecureRandom?\n        AesCipher.init(Cipher.ENCRYPT_MODE, secretKey, new SecureRandom());\n        byte[] byteCipherText = AesCipher.doFinal(byteArray);\n\n        //Write Bytes To File\n        Files.write(Paths.get(FILE_ENCR), byteCipherText);\n\n\n     }\n     private static void Decryption(String Key) throws Exception\n     {\n        //Ddecode the base64 encoded string\n        byte[] decodedKey = Base64.getDecoder().decode(Key);\n        //Rebuild key using SecretKeySpec\n        SecretKey secretKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\"); \n\n        //Read All The Bytes From The File\n        byte[] cipherText = Files.readAllBytes(Paths.get(FILE_ENCR));\n\n        //Cipher gets AES Algorithm Instance\n        Cipher AesCipher = Cipher.getInstance(\"AES\");\n\n        //Initialize it in Decrypt mode, with our Key, and a ?SecureRandom?\n        AesCipher.init(Cipher.DECRYPT_MODE, secretKey, new SecureRandom());\n\n        byte[] bytePlainText = AesCipher.doFinal(cipherText);\n        Files.write(Paths.get(FILE_DECR), bytePlainText);\n     }\n}\n", "idx": 644}
{"project": "cipher", "commit_id": "Snippet22952981_5336.java", "target": 0, "func": "encryptCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");", "idx": 645}
{"project": "cipher", "commit_id": "Snippet40985052_22894.java", "target": 0, "func": "@Override\n    public boolean sendData(String filename, SealedObject sealed, int len) throws RemoteException {\n        try{\n//            System.out.println(\"Here\" );\n//            System.setProperty(\"java.security.policy\", \"file:./<policy>.policy\");\n//            if (System.getSecurityManager() == null) {\n//                System.setSecurityManager(new SecurityManager());\n//            }\n\n            key = KeyGenerator.getInstance(\"DES\").generateKey();\n            dcipher = Cipher.getInstance(\"DES\");\n            dcipher.init(Cipher.DECRYPT_MODE, key);\n            File f=new File(filename);\n            f.createNewFile();\n            FileOutputStream out=new FileOutputStream(f,true);\n            //byte[] data = (byte[]) sealed.getObject(dcipher);\n            System.out.println(\"Original Object: \" + sealed );\n\n            //out.write(data,0,len);\n            out.flush();\n            out.close();\n            System.out.println(\"Done writing data...\");\n            return true;\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n        return false;\n    }\n", "idx": 646}
{"project": "cipher", "commit_id": "Snippet45208550_27334.java", "target": 0, "func": "public void createDecryptedFile(File decryptedFileDir, File decryptedFile,\n                                File encryptedFile) {\n    try {\n        if (!decryptedFileDir.exists()) {\n            decryptedFileDir.mkdirs();\n        }\n        Cipher decipher;\n        decryptedFile.createNewFile();\n        deleteFile = decryptedFile;\n                        FileInputStream encryptedFileInputstream = new FileInputStream(\n                encryptedFile);\n        FileOutputStream decryptedFileOutputstream = new FileOutputStream(\n                decryptedFile);\n\n        decipher = Cipher.getInstance(\"AES\");\n        Key key = generateKey();\n        decipher.init(Cipher.DECRYPT_MODE, key);\n\n        CipherOutputStream cos = new CipherOutputStream(\n                decryptedFileOutputstream, decipher);\n\n        byte data[] = new byte[10000 * 1024];\n\n        int count;\n        try {\n\n            while ((count = encryptedFileInputstream.read(data)) != -1  && !stopConversion) {\n                Log.d(\"#########\", \"##########\");\n\n                total += count;\n                Log.e(\"convert count\", total + \"\");\n\n                cos.write(data, 0, count);\n\n                final long l = encryptedFile.length();\n\n                runOnUiThread(new Runnable() {\n                    public void run() {\n\n                        // Show percentage \n                        loadingpercent.setText(\"\" + (int) (total * 100 / l) + \"%\");\n                    }\n                });\n\n                Log.d(\"$$$$$$$$\",\"\"+encryptedFileInputstream.read(data));\n\n            }\n", "idx": 647}
{"project": "cipher", "commit_id": "Snippet22449445_4855.java", "target": 0, "func": " File uploadedFile = new File(filePath);\n item.write(uploadedFile);\n\n        //Convert uploaded image to byte[] for encryption\n         bFile = new byte[(int) uploadedFile.length()];\n\n        try {\n         FileInputStream fileInputStream = new FileInputStream(uploadedFile);\n         //convert file into array of bytes\n         fileInputStream.read(bFile);\n         fileInputStream.close();\n        } catch (Exception e) {\n         e.printStackTrace();\n        }\n      //encrypt the byte array\n\n       Cipher cipher=Cipher.getInstance(\"AES\");\n       cipher.init(Cipher.ENCRYPT_MODE, key);\n       enFile=cipher.doFinal(bFile);\n       //save encrypted image to database\n       image.setImage(enFile);\n       //save this row to database\n       UploadService ups=new UploadService();\n       imgid=ups.uploadImage(image);\n\n\n        //Attach bitmap header to the encrypted byte array so that encrypted array can be still recognized as an image and save it to disk\n        BitmapEncoder.encodeToBitmap(enFile, new File(uploadFolder + File.separator +\"encrypted\"+fileName));\n", "idx": 648}
{"project": "cipher", "commit_id": "Snippet8568489_33336.java", "target": 0, "func": "    byte[] raw = key.getEncoded();\n    System.out.println(key.getEncoded().length);\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n    try {\n        ecipher = Cipher.getInstance(\"AES\");\n        dcipher = Cipher.getInstance(\"AES\");\n        ecipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        dcipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n    } catch (javax.crypto.NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (java.security.NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    **} catch (java.security.InvalidKeyException e) {\n        e.printStackTrace();**\n    }\n\n\n\nread:17\n17\njava.security.InvalidKeyException: Invalid AES key length: 17 bytes\nat com.ibm.crypto.provider.AESCipher.engineGetKeySize(Unknown Source)\nat javax.crypto.Cipher.b(Unknown Source)\nat javax.crypto.Cipher.a(Unknown Source)\nat javax.crypto.Cipher.a(Unknown Source)\nat javax.crypto.Cipher.a(Unknown Source)\nat javax.crypto.Cipher.init(Unknown Source)\nat javax.crypto.Cipher.init(Unknown Source)\nat au.edu.uts.itd.encryption.manager.AESEncrypter.<init>(AESEncrypter.java:21)\nat au.edu.uts.itd.encryption.util.Encrypt.main(Encrypt.java:26)\nException in thread \"main\" java.lang.IllegalStateException: Cipher not initialized\nat javax.crypto.Cipher.c(Unknown Source)\nat javax.crypto.Cipher.doFinal(Unknown Source)\nat au.edu.uts.itd.encryption.manager.AESEncrypter.encrypt(AESEncrypter.java:39)\nat au.edu.uts.itd.encryption.util.Encrypt.main(Encrypt.java:27)\n", "idx": 649}
{"project": "cipher", "commit_id": "Snippet30404326_12573.java", "target": 0, "func": "public class Server {\n\n    private static SecretKeySpec AES_Key;\n    private static final String key = \"1234567890ABCDEF\";\n\n    public static void main(String[] args) throws IOException, NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n\n\n        AES_Key = new SecretKeySpec(key.getBytes(), \"AES\");\n\n        System.out.println(AES_Key);\n\n         Cipher AES_Cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"BC\");\n\n        ServerSocket serverSocket = null;\n        try {\n            serverSocket = new ServerSocket(4443);\n        } catch (IOException e) {\n            System.err.println(\"Could not listen on port: 4443.\");\n            System.exit(1);\n        }\n\n        Socket clientSocket = null;\n        try {\n            clientSocket = serverSocket.accept();\n        } catch (IOException e) {\n            System.err.println(\"Accept failed.\");\n            System.exit(1);\n        }\n\n        PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);\n        BufferedReader in = new BufferedReader(\n                new InputStreamReader(\n                clientSocket.getInputStream()));\n\n        BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));\n        String inputLine, outputLine;\n        byte[] input;\n        System.out.println(\"Server run \");\n\n        while ((input = in.readLine().getBytes()) != null) {\n\n            AES_Cipher.init(Cipher.DECRYPT_MODE, AES_Key);\n\n\n            System.out.println(input);\n             byte plaintext_decrypted[] = AES_Cipher.doFinal(input);\n            inputLine= toHexString(plaintext_decrypted);\n            System.out.println(\"Server receive : \"+inputLine);\n            System.out.println(\"type message :\");\n             outputLine = stdIn.readLine();\n             out.println(outputLine);\n        }\n\n        out.close();\n        in.close();\n        clientSocket.close();\n        serverSocket.close();\n    }\n\n\n    private static String toHexString(byte[] block) {\n        StringBuffer buf = new StringBuffer();\n\n        int len = block.length;\n\n        for (int i = 0; i < len; i++) {\n            byte2hex(block[i], buf);\n            if (i < len - 1) {\n                buf.append(\":\");\n            }\n        }\n        return buf.toString();\n    }\n\n    /*\n     * Converts a byte to hex digit and writes to the supplied buffer\n     */\n    private static void byte2hex(byte b, StringBuffer buf) {\n        char[] hexChars = {'0', '1', '2', '3', '4', '5', '6', '7', '8',\n            '9', 'A', 'B', 'C', 'D', 'E', 'F'};\n        int high = ((b & 0xf0) >> 4);\n        int low = (b & 0x0f);\n        buf.append(hexChars[high]);\n        buf.append(hexChars[low]);\n    }\n}\n", "idx": 650}
{"project": "cipher", "commit_id": "Snippet4625301_31190.java", "target": 0, "func": "KeySpec ks = new DESKeySpec(\"hcxilkqbbhczfeultgbskdmaunivmfuo\".getBytes(\"UTF-8\"));\n            SecretKey key = SecretKeyFactory.getInstance(\"DES\").generateSecret(ks);\n\n        String ivString = \"ryojvlzmdalyglrj\";\n        byte[] ivByte = ivString.getBytes(\"UTF-8\");\n        IvParameterSpec iv = new IvParameterSpec(ivByte);\n        //RC5ParameterSpec iv = new RC5ParameterSpec(ivByte);\n\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n        byte[] encoded = cipher.doFinal(Base64.decodeBase64(\"iNtaFme3B/e6DppNSp9QLg==\"));\n\n        Log.d(\"Decoded Password\", encoded.toString());\n", "idx": 651}
{"project": "cipher", "commit_id": "Snippet28704809_10847.java", "target": 0, "func": "import java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.io.Writer;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.NoSuchProviderException;\nimport java.security.Security;\nimport java.util.Arrays;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.ShortBufferException;\nimport javax.crypto.spec.SecretKeySpec;\n\n\n\n@SuppressWarnings(\"unused\")\npublic class AESCTR {\n    static String inputFile = \"plain-in.txt\";\n    static String outputFile = \"cipher-out.txt\";\n    static String cInputFile = \"cipher-in.txt\";\n    static String cOutputFile = \"plain-out.txt\";\n    static String mode;\n    static String IV;\n    static String key;\n    public static void main(String[] args) {\n        if (Security.getProvider(\"BC\") == null){\n            System.out.println(\"Bouncy Castle provider is NOT available\");\n            System.exit(-1);\n        }\n        else{\n            System.out.println(\"Bouncy Castle provider is available\");\n        } \n        Security.addProvider(Security.getProvider(\"BC\")); \n        // TODO Auto-generated method stub\n        if (args.length != 3){\n            System.out.println(\"Invalid number of arguments\\n\");\n            System.exit(-1);\n        }\n        mode = args[0];\n        IV = args[1];\n        key = args[2];\n        if ((!mode.equals(\"enc\")) && (!mode.equals(\"dec\"))){\n            System.out.println(\"Invalid mode\\n\");\n            System.exit(-1);\n        }\n        byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, \n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};\n        System.out.println(keyBytes.length);\n        SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n        System.out.println(\"Mode: \" + mode + \" IV: \" + IV + \" Key: \" + key);\n        if(mode.equals(\"enc\")){\n            int ctLength = 0;\n            byte[] data = null;\n            try {\n                Path path = Paths.get(inputFile);\n                data = Files.readAllBytes(path);\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n                System.out.println(\"Invalid Path\\n\");\n                System.exit(-1);\n             }\n            while((data.length % 16) != 0){ //Padding\n                byte[] dest = new byte[data.length + 1];\n                byte[] pad = new byte[] {0x00};\n                System.arraycopy(data, 0, dest, 0, data.length);\n                System.arraycopy(pad, 0, dest, data.length, pad.length);    \n                data = dest;\n            }\n            System.out.println(data.length);\n            byte[] cipherText = new byte[data.length];\n\n            Cipher cipher = null;\n            try {\n                cipher = Cipher.getInstance(\"AES/ECB/NoPadding\", \"BC\");\n            } catch (NoSuchAlgorithmException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (NoSuchProviderException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (NoSuchPaddingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            System.out.println(\"input text : \" + new String(data));\n\n            try {\n                cipher.init(Cipher.ENCRYPT_MODE, key);\n            } catch (InvalidKeyException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            try {\n                ctLength = cipher.update(data, 0, data.length, cipherText, 0);    \n            } catch (ShortBufferException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            try {\n                ctLength += cipher.doFinal(cipherText, ctLength);\n            } catch (IllegalBlockSizeException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (ShortBufferException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (BadPaddingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            Writer writer = null;\n            try{ writer = new BufferedWriter(new OutputStreamWriter(new     FileOutputStream(cInputFile), \"utf-8\"));\n            writer.write(new String(cipherText));\n            } catch (IOException ex){\n                System.out.println(\"File Write Error\\n\");\n                System.exit(-1);\n            } finally{\n                try{writer.close();}catch (Exception ex){}\n            }\n\n            byte[] c = null;\n            try {\n                Path path = Paths.get(cInputFile);\n                c = Files.readAllBytes(path);\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n                System.out.println(\"Invalid Path\\n\");\n                System.exit(-1);\n            }\n            System.out.println(\"cipher text: \" + new String(c) + \" bytes: \" + ctLength);\n        }\n        else if (mode.equals(\"dec\")){\n            byte[] c = null;\n            try {\n                Path path = Paths.get(cInputFile);\n                c = Files.readAllBytes(path);\n                File f = new File(cInputFile);\n                System.out.println(\"In Bytes: \" + c.length);\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n                System.out.println(\"Invalid Path\\n\");\n                System.exit(-1);\n            }\n            Cipher cipher = null;\n            try {\n                cipher = Cipher.getInstance(\"AES/ECB/NoPadding\", \"BC\");\n            } catch (NoSuchAlgorithmException e1) {\n                // TODO Auto-generated catch block\n                e1.printStackTrace();\n            } catch (NoSuchProviderException e1) {\n                // TODO Auto-generated catch block\n                e1.printStackTrace();\n            } catch (NoSuchPaddingException e1) {\n                // TODO Auto-generated catch block\n                e1.printStackTrace();\n            }\n            byte[] plainText = new byte[c.length];\n            try {\n                cipher.init(Cipher.DECRYPT_MODE, key);\n            } catch (InvalidKeyException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            int ptLength = 0;\n            try {\n                ptLength = cipher.update(c, 0, c.length, plainText, 0);\n                System.out.println(ptLength);\n            } catch (ShortBufferException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            try {\n                ptLength += cipher.doFinal(plainText, ptLength);\n            } catch (IllegalBlockSizeException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (ShortBufferException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (BadPaddingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            System.out.println(\"plain text : \" + new String(plainText) + \" bytes: \" + ptLength);\n        }\n    }\n}\n", "idx": 652}
{"project": "cipher", "commit_id": "Snippet37660429_19621.java", "target": 0, "func": "  public static String decrypt(byte[] cipherText, SecretKey key,String key1)\n  {\n    String plainText = \"\";\n    try{\n        SecretKey myDesKey = key;\n        if(key == null){\n\n        JOptionPane.showMessageDialog(null, \"We were unable to find your decryption key. Please enter your decryption key below: \");\n        JTextArea textBox = new JTextArea(1,15);\n        JOptionPane.showMessageDialog(null, new JScrollPane(textBox),\"Enter your decryption key \",JOptionPane.PLAIN_MESSAGE);\n        //myDesKey = textBox.toSecretKey;\n        }\n\n    Cipher desCipher;\n    desCipher = Cipher.getInstance(\"DES\");\n    desCipher.init(Cipher.DECRYPT_MODE, myDesKey);\n    byte[] textDecrypted = desCipher.doFinal(cipherText);\n    plainText = new String(textDecrypted);\n    JOptionPane.showMessageDialog(null, plainText, \"DECRYPTED MESSAGE\", 0);\n\n    }catch(Exception e)\n    {\n        System.out.println(\"There has been an error decrypting the file\");\n        System.out.println(e);\n    }return plainText;\n  }\n}\n", "idx": 653}
{"project": "cipher", "commit_id": "Snippet21252078_3782.java", "target": 0, "func": " public class AESHelper {\n\n        public static String encrypt(String seed, String cleartext) throws Exception {\n                byte[] rawKey = getRawKey(seed.getBytes());\n                byte[] result = encrypt(rawKey, cleartext.getBytes());\n                return toHex(result);\n        }\n\n        public static String decrypt(String seed, String encrypted) throws Exception {\n                byte[] rawKey = getRawKey(seed.getBytes());\n                byte[] enc = toByte(encrypted);\n                byte[] result = decrypt(rawKey, enc);\n                return new String(result);\n        }\n\n        private static byte[] getRawKey(byte[] seed) throws Exception {\n                KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n                SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n                sr.setSeed(seed);\n            kgen.init(128, sr); // 192 and 256 bits may not be available\n            SecretKey skey = kgen.generateKey();\n            byte[] raw = skey.getEncoded();\n            return raw;\n        }\n\n\n        private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n            byte[] encrypted = cipher.doFinal(clear);\n                return encrypted;\n        }\n\n        private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n            byte[] decrypted = cipher.doFinal(encrypted);\n                return decrypted;\n        }\n\n        public static String toHex(String txt) {\n                return toHex(txt.getBytes());\n        }\n        public static String fromHex(String hex) {\n                return new String(toByte(hex));\n        }\n\n        public static byte[] toByte(String hexString) {\n                int len = hexString.length()/2;\n                byte[] result = new byte[len];\n                for (int i = 0; i < len; i++)\n                        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n                return result;\n        }\n\n        public static String toHex(byte[] buf) {\n                if (buf == null)\n                        return \"\";\n                StringBuffer result = new StringBuffer(2*buf.length);\n                for (int i = 0; i < buf.length; i++) {\n                        appendHex(result, buf[i]);\n                }\n                return result.toString();\n        }\n        private final static String HEX = \"0123456789ABCDEF\";\n        private static void appendHex(StringBuffer sb, byte b) {\n                sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n        }\n\n\n    }\n", "idx": 654}
{"project": "cipher", "commit_id": "Snippet10164989_34502.java", "target": 0, "func": "\n\n    import java.security.InvalidKeyException;\n    import java.security.NoSuchAlgorithmException;\n    import java.security.NoSuchProviderException;\n    import java.security.Security;\n    import javax.crypto.BadPaddingException;\n    import javax.crypto.Cipher;\n    import javax.crypto.IllegalBlockSizeException;\n    import javax.crypto.NoSuchPaddingException;\n    import javax.crypto.SecretKey;\n    import javax.crypto.spec.SecretKeySpec;\n    import org.bouncycastle.jce.provider.BouncyCastleProvider;\n\n\n    /**\n     *\n     * @author Jose Luis Montes de Oca\n     */\n    public class TripleDesCipher {\n       private static String TRIPLE_DES_TRANSFORMATION = \"DESede/ECB/Nopadding\";\n       private static String ALGORITHM = \"DESede\";\n       private static String BOUNCY_CASTLE_PROVIDER = \"BC\";\n       private Cipher encrypter;\n       private Cipher decrypter;\n\n       public TripleDesCipher(byte[] key) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException,\n             InvalidKeyException {\n          Security.addProvider(new BouncyCastleProvider());\n          SecretKey keySpec = new SecretKeySpec(key, ALGORITHM);\n          encrypter = Cipher.getInstance(TRIPLE_DES_TRANSFORMATION, BOUNCY_CASTLE_PROVIDER);\n          encrypter.init(Cipher.ENCRYPT_MODE, keySpec);\n          decrypter = Cipher.getInstance(TRIPLE_DES_TRANSFORMATION, BOUNCY_CASTLE_PROVIDER);\n          decrypter.init(Cipher.DECRYPT_MODE, keySpec);\n       }\n\n       public byte[] encode(byte[] input) throws IllegalBlockSizeException, BadPaddingException {\n          return encrypter.doFinal(input);\n       }\n\n       public byte[] decode(byte[] input) throws IllegalBlockSizeException, BadPaddingException {\n          return decrypter.doFinal(input);\n       }\n    }\n\n", "idx": 655}
{"project": "cipher", "commit_id": "Snippet19195657_2028.java", "target": 0, "func": "private byte[] encrypt(byte[] raw, byte[] clear) throws Exception\n{\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n", "idx": 656}
{"project": "cipher", "commit_id": "Snippet4183909_31032.java", "target": 0, "func": "public static byte[] encrypt(byte encrypt[], byte en_key[]) {\n\n    if(encrypt.length % 8 != 0){ //not a multiple of 8\n        //create a new array with a size which is a multiple of 8\n        byte[] padded = new byte[encrypt.length + 8 - (encrypt.length % 8)];\n\n        //copy the old array into it\n        System.arraycopy(encrypt, 0, padded, 0, encrypt.length);\n        encrypt = padded;\n    }\n\n    try {\n        SecretKeySpec key = new SecretKeySpec(en_key, \"Blowfish\");\n        Cipher cipher = Cipher.getInstance(\"Blowfish/ECB/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        return cipher.doFinal(encrypt);\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n", "idx": 657}
{"project": "cipher", "commit_id": "Snippet25587090_7896.java", "target": 0, "func": "import java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.*;\nimport javax.xml.bind.DatatypeConverter;\nimport org.bouncycastle.util.encoders.Hex;\n\npublic class CipherAES {\n\n    public static void brutToHexa(byte[] t) {\n        byte[] tab = Hex.encode(t);\n        System.out.print(\"secret key : \");\n        for (int i = 0; i < tab.length; i++) {\n            System.out.print((char) tab[i] + \"\");\n        }\n        System.out.println();\n    }\n\n    public static byte[] encrypter(final String message, SecretKey cle)\n            throws NoSuchAlgorithmException, NoSuchPaddingException,\n            InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, cle);\n        byte[] donnees = message.getBytes();\n\n        return cipher.doFinal(donnees);\n    }\n\n    public static String decrypter(final byte[] donnees, SecretKey cle)\n            throws NoSuchAlgorithmException, NoSuchPaddingException,\n            InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, cle);\n\n        return new String(cipher.doFinal(donnees));\n    }\n\n    public static void main(String[] args) {\n\n        final String message = \"Java is the best\";\n\n        KeyGenerator keyGen;\n        try {\n            keyGen = KeyGenerator.getInstance(\"AES\");\n            SecretKey cle = keyGen.generateKey();\n            brutToHexa(cle.getEncoded());\n\n            byte[] enc = encrypter(message, cle);\n            System.out.print(\"encrypted text : \");\n            System.out.println(DatatypeConverter.printBase64Binary(enc));\n\n            String dec = decrypter(enc, cle);\n            System.out.println(\"decrypted text : \" + dec);\n\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException |\n                IllegalBlockSizeException | BadPaddingException e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 658}
{"project": "cipher", "commit_id": "Snippet20824708_3448.java", "target": 0, "func": "   public class EncryptionTest extends Activity {\n\nEditText input, output, outputDecrypt;\nString plain_text;\nbyte[] key, encrypted_bytes,keyStart,byte_char_text,decrpyted_bytes ;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_encryption_test);\n\n    input = (EditText) findViewById(R.id.text_inputText);\n    output = (EditText) findViewById(R.id.text_Result);\n    outputDecrypt = (EditText) findViewById(R.id.text_decrypt_Result);\n    Button encrypt_btn = (Button) findViewById(R.id.btn_encrpyt);\n    Button decrypt_btn = (Button) findViewById(R.id.btn_Decrypt);\n\n    plain_text = input.getText().toString();\n    keyStart = \"Supriyo\".getBytes();\n    byte_char_text = plain_text.getBytes();\n\n    encrypt_btn.setOnClickListener(new OnClickListener() {\n\n        @Override\n        public void onClick(View v) {\n\n\n            try {\n\n            KeyGenerator keygen = KeyGenerator.getInstance(\"AES\");\n            SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n                sr.setSeed(keyStart);\n                keygen.init(128, sr);\n                SecretKey skey = keygen.generateKey();\n                key = skey.getEncoded();\n\n                encrypted_bytes = encrypt(key, byte_char_text);\n                String inputResult = encrypted_bytes.toString();\n                output.setText(inputResult);\n        decrpyted_bytes = decrypt(key, encrypted_bytes);\n                     System.out.println(\"decr\"+Arrays.toString(decrpyted_bytes));                                               \n            String outputResult = new String(decrpyted_bytes,\"UTF-8\");\n                System.out.println(\"-->>>\"+outputResult);\n                outputDecrypt.setText(outputResult);\n\n            } catch (NoSuchAlgorithmException e) {\n\n                e.printStackTrace();\n            } catch (InvalidKeyException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (NoSuchPaddingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (IllegalBlockSizeException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (BadPaddingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (Exception e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n\n        }\n    });\n        }\n\npublic static byte[] decrypt(byte[] raw, byte[] encrypteds)\n        throws Exception          {\n\n    SecretKeySpec skey = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skey);\n    byte[] decrypted = cipher.doFinal(encrypteds);\n    return decrypted;\n}\n\npublic static byte[] encrypt(byte[] raw, byte[] clear)\n        throws Exception{\n\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte encrypted[] = cipher.doFinal(clear);\n\n    return encrypted;\n}\n\n     @Override\n      public boolean onCreateOptionsMenu(Menu menu) {\n    // Inflate the menu; this adds items to the action bar if it is present.\n    getMenuInflater().inflate(R.menu.encryption_test, menu);\n    return true;\n}\n\n    }\n", "idx": 659}
{"project": "cipher", "commit_id": "Snippet34286798_16279.java", "target": 0, "func": "public static void testCipher() throws Exception\n{\n    byte[] KEY =\n            new byte[]{\n                    (byte) 0x0C, (byte) 0x09, (byte) 0x03, (byte) 0x0E,\n                    (byte) 0x05, (byte) 0x0A, (byte) 0x0D, (byte) 0x02,\n                    (byte) 0x03, (byte) 0x0A, (byte) 0x09, (byte) 0x0B,\n                    (byte) 0x06, (byte) 0x10, (byte) 0x04, (byte) 0x10\n            };\n\n    byte[] DATA =\n            new byte[]{\n                    (byte) 0x29, (byte) 0xDA, (byte) 0xC0, (byte) 0xC4,\n                    (byte) 0xB8, (byte) 0x47, (byte) 0x13, (byte) 0xA2};\n\n    byte[] newByte8 = new byte[8]; //Zeroes\n\n    android.util.Log.d(\"TEST\", \"KEY : \" + bin2hex(KEY));\n    android.util.Log.d(\"TEST\", \"DATA: \" + bin2hex(DATA));\n    android.util.Log.d(\"TEST\", \"IVPS: \" + bin2hex(newByte8));\n    android.util.Log.d(\"TEST\", \"----\");\n\n    javax.crypto.Cipher cipher =\n            javax.crypto.Cipher.getInstance(\"DESede/CBC/NoPadding\");\n\n    cipher.init(\n            Cipher.DECRYPT_MODE,\n            new javax.crypto.spec.SecretKeySpec(KEY, \"DESede\"),\n            new javax.crypto.spec.IvParameterSpec(newByte8));\n\n    byte[] result = cipher.doFinal(DATA);\n\n    android.util.Log.d(\"TEST\", \"RSLT: \" + bin2hex(result));\n}\n\npublic static String bin2hex(byte[] data) {\n    return String.format(\"%0\" + (data.length * 2) + \"X\", new java.math.BigInteger(1, data));\n}\n", "idx": 660}
{"project": "cipher", "commit_id": "Snippet20824136_3446.java", "target": 0, "func": "        secret_key = KeyGenerator.getInstance(\"DES\").generateKey();\n        alogrithm_specs = new IvParameterSpec(initialization_vector);\n        // set encryption mode ...\n        encrypt = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        encrypt.init(Cipher.ENCRYPT_MODE, secret_key, alogrithm_specs);\n        //out.print(\"actual secret_key:\"+secret_key);\n\n        String keyString = encoder.encode(secret_key.getEncoded());\n        //out.print(\"keyString:\"+keyString);\n\n        byte[] encodedKey = decoder.decodeBuffer(keyString);\n        //out.print(\"byte[]:\"+encodedKey);\n\n        secret_key= new SecretKeySpec(encodedKey,0,encodedKey.length, \"DES\");\n        //out.print(\"after encode & decode secret_key:\"+secret_key);\n", "idx": 661}
{"project": "cipher", "commit_id": "Snippet33006791_15034.java", "target": 0, "func": "public static byte[] encodeFile(byte[] key, byte[] fileData) throws Exception\n    {\n\n        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encrypted = cipher.doFinal(fileData);\n\n        return encrypted;\n    }\n", "idx": 662}
{"project": "cipher", "commit_id": "Snippet13478097_37015.java", "target": 0, "func": "public class Encryptor {\n\npublic static byte[] encryptData(byte[] credentials, String key){\n\n    Cipher c;\n    SecretKeySpec k;\n    byte[] byteCredentials = null;\n    byte[] encryptedCredentials = null;\n    byte[] byteSharedKey = null;\n\n    try {\n\n        byteCredentials = getBytesFromObject(credentials);\n        byteSharedKey = getByteKey(key);\n\n        c = Cipher.getInstance(\"AES\");\n        k = new SecretKeySpec(byteSharedKey, \"AES\");\n        c.init(Cipher.ENCRYPT_MODE, k);\n        encryptedCredentials = c.doFinal(byteCredentials);\n\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    }\n\n    return encryptedCredentials;\n\n}\n\npublic static byte[] getBytesFromObject(Object credentials) throws IOException{\n\n    //Hmmm.... now I'm thinking I should make generic type for both: Token and ITU_Credentials object, that would have this getBytes and getObject methods.\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    ObjectOutput out = null;\n    byte[] newBytes = null;\n\n    try {\n\n      out = new ObjectOutputStream(bos);   \n      out.writeObject(credentials);\n      newBytes = bos.toByteArray();\n\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n      out.close();\n      bos.close();\n    }\n    return newBytes;\n}\n\nprivate static byte[] getByteKey(String key) throws UnsupportedEncodingException, NoSuchAlgorithmException{\n\n    //Converting key to SHA-1 and trimming to mach maximum lenght of key\n\n    byte[] bkey = key.getBytes(\"UTF-8\");\n    MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n    bkey = sha.digest(bkey);\n    bkey = Arrays.copyOf(bkey, 16);\n\n    return bkey;\n}\n", "idx": 663}
{"project": "cipher", "commit_id": "Snippet38459489_20406.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\n\npublic class DESTest {\n    public static void main(String[] args) {\n        if (args.length < 3) {\n            System.out.println(\"usage: java \" + DESTest.class.getCanonicalName() + \" -e|-d text key\");\n            return;\n        }\n        String mode = args[0].trim();\n        String text = args[1].trim();\n        String key = args[2].trim();\n        try {\n            String s = \"-d\".equalsIgnoreCase(mode) ? dec(text, key) : enc(text, key);\n            System.out.println(\"\\n\" + (\"-d\".equalsIgnoreCase(mode) ? \"decryted as [\" : \"encrypted as [\") + s + \"]\");\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static String enc(String plainText, String key) throws UnsupportedEncodingException {\n        return new String(encHex(des(plainText.getBytes(\"UTF-8\"), key, Cipher.ENCRYPT_MODE)));\n    }\n\n    private static String dec(String encrypted, String key) throws UnsupportedEncodingException {\n        return new String(des(decHex(encrypted), key, Cipher.DECRYPT_MODE), \"UTF-8\");\n    }\n\n    private static byte[] des(byte[] bytes, String key, int cipherMode) {\n        final String encoding = \"UTF-8\";\n        try {\n            DESKeySpec desKey = new DESKeySpec(key.getBytes(encoding));\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n            SecretKey securekey = keyFactory.generateSecret(desKey);\n            // SecretKey securekey = new SecretKeySpec(key.getBytes(encoding), \"DES\");//same result as the 3 lines above\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            SecureRandom random = new SecureRandom();\n            cipher.init(cipherMode, securekey, random);\n            return cipher.doFinal(bytes);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static final char[] HEX_CHARS = \"0123456789abcdef\".toCharArray();\n\n    private static String encHex(byte[] bytes) {\n        final char[] chars = new char[bytes.length * 2];\n        for (int i = 0, j = 0; i < bytes.length; i++) {\n            chars[j++] = HEX_CHARS[(0xF0 & bytes[i]) >>> 4];\n            chars[j++] = HEX_CHARS[0x0F & bytes[i]];\n        }\n        return new String(chars);\n    }\n\n    private static byte[] decHex(String hex) {\n        final int len = hex.length();\n        final byte[] bytes = new byte[len / 2];\n        for (int i = 0, j = 0; j < len; i++) {\n            int f = Character.digit(hex.charAt(j), 16) << 4;\n            j++;\n            f = f | Character.digit(hex.charAt(j), 16);\n            j++;\n            bytes[i] = (byte) (f & 0xFF);\n        }\n        return bytes;\n    }\n}\n", "idx": 664}
{"project": "cipher", "commit_id": "Snippet16262219_39227.java", "target": 0, "func": "public BitSet encrypt(BitSet plaintextBlock, BitSet key)\n{\n    try {\n        Cipher c = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        SecretKeyFactory sf = SecretKeyFactory.getInstance(\"DES\");\n        Key desKey = sf.generateSecret(new DESKeySpec(key.toByteArray()));\n        c.init(Cipher.ENCRYPT_MODE, desKey);\n        byte[] input = plaintextBlock.toByteArray();\n        byte[] encrypted = c.doFinal(input);\n\n        return BitSet.valueOf(encrypted);\n    } catch (Exception e) { /* Exception handling omitted */ }\n}\n", "idx": 665}
{"project": "cipher", "commit_id": "Snippet6813151_32375.java", "target": 0, "func": "    package com.cryptooo.lol;\n\nimport java.io.ByteArrayOutputStream;\nimport java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport android.app.Activity;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.os.Bundle;\n\npublic class SimpleCryptoActivity extends Activity {\n\n    @Override\n    public void onCreate(Bundle savedInstanceState){\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n\n\n        new Thread() {\n            public void run(){\n                Bitmap bm = BitmapFactory.decodeResource(getResources(), R.drawable.shit);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();  \n                bm.compress(Bitmap.CompressFormat.PNG, 100, baos); // bm is the bitmap object   \n                byte[] b = baos.toByteArray();  \n\n                try {\n                byte[] keyStart = \"MARTIN_123_MARTIN_123\".getBytes();\n                KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n                SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n                sr.setSeed(keyStart);\n                kgen.init(128, sr); // 192 and 256 bits may not be available\n                SecretKey skey = kgen.generateKey();\n                byte[] key = skey.getEncoded();    \n\n                // encrypt\n                byte[] encryptedData = encrypt(key,b);\n                // decrypt\n                long start = System.currentTimeMillis()/1000L;\n                byte[] decryptedData = decrypt(key,encryptedData);\n                long end = System.currentTimeMillis()/1000L;\n                android.util.Log.d(\"TEST\",\"Time \"+ String.valueOf(end-start));\n                }\n                catch(Exception e){\n                    e.fillInStackTrace();\n                }\n            }\n\n            private byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n                SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n                byte[] encrypted = cipher.doFinal(clear);\n                return encrypted;\n            }\n\n            private byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n                SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n                        byte[] decrypted = cipher.doFinal(encrypted);\n            return decrypted;\n            }\n        }.start(); \n    } \n\n}\n", "idx": 666}
{"project": "cipher", "commit_id": "Snippet16119028_39062.java", "target": 0, "func": "public class Cli_dec \n{\n    private static Socket s;\n     private static int read;\n    public static void main(String args[]) throws UnknownHostException, IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException\n    {\n\n        s=new Socket(\"127.0.0.1\",2001);\n\n        PrintWriter out=new PrintWriter(s.getOutputStream());\n\n        String fname=JOptionPane.showInputDialog(null);\n\n        out.write(fname+\"\\n\");\n        out.flush();\n\n        int count;\n        byte[] buf=new byte[100000];\n        System.out.println(\"Receiving packets\");\n        File f=new File(\"F:/files/source_files//decryped.mp3\");\n        FileOutputStream to_b_decf=new FileOutputStream(f);\n        BufferedOutputStream bos=new BufferedOutputStream(to_b_decf);\n        InputStream in1=s.getInputStream();\n\n        while((count=in1.read(buf))>0)\n        {\n        bos.write(buf, 0,count);\n        bos.flush();\n        }\n\n        File destfile =new File(\"F:/files/source_files//original.mp3\");\n\n        if(!destfile.exists())\n        destfile.createNewFile();\n\n        Cipher decipher = Cipher.getInstance(\"AES\");//initiate a cipher for decryption\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecretKey skey = kgen.generateKey();//initiate key\n        decipher.init(Cipher.DECRYPT_MODE, skey);//decrypt the file \n\n        FileInputStream decf=new FileInputStream(f);\n\n        System.out.println(\"decrypting\");\n\n        CipherInputStream c_decf=new CipherInputStream(decf,decipher);\n\n        FileOutputStream destf=new FileOutputStream(destfile);\n\n        CipherOutputStream cout=new CipherOutputStream(destf,decipher);\n\n\n        while((read=c_decf.read())!=-1)\n        {\n         cout.write(read);\n         cout.flush();\n         }\n        c_decf.close();\n        destf.close();\n        cout.close();\n        decf.close();\n        s.close();\n}\n\n}\n", "idx": 667}
{"project": "cipher", "commit_id": "Snippet37060729_19000.java", "target": 0, "func": "public void setKey(String myKey){\n        secretKey = new SecretKeySpec(Base64.decodeBase64(myKey), \"AES\");\n    }\n\npublic String generateKey(int len) {\n        final String AB = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n        Random rnd = new Random();\n        StringBuilder sb = new StringBuilder(len);\n        for (int i = 0; i < len; i++) {\n            sb.append(AB.charAt(rnd.nextInt(AB.length())));\n        }\n        return sb.toString();\n    }\n\npublic void encrypt(String strToEncrypt)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/Iso10126Padding\");\n\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n\n            setEncryptedString(Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))));\n\n        }\n        catch (Exception e)\n        {\n\n            System.out.println(\"Error while encrypting: \"+e.toString());\n        }\n    }\n    public void decrypt(String strToDecrypt)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/Iso10126PADDING\");\n\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            setDecryptedString(new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt))));\n\n        }\n        catch (Exception e)\n        {\n\n            System.out.println(\"Error while decrypting: \"+e.toString());\n        }\n    }\n", "idx": 668}
{"project": "cipher", "commit_id": "Snippet3421856_30724.java", "target": 0, "func": "encryptionKey   = \"Omnia Gallia in tres partes divida est\";\nbyte[] newValue = new byte[24];\nSystem.arraycopy(encryptionKey, 0, newValue, 0, 24);\nencryptionKey   = newValue;\n\nKeySpec keySpec             = new DESedeKeySpec(encryptionKey);\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DESEde\");\nCipher cipher               = Cipher.getInstance(\"DESEde\");    \nSecretKey key               = keyFactory.generateSecret(keySpec);\n\ncipher.init(Cipher.ENCRYPT_MODE, key);\n\ncipherBytes = cipher.doFinal(plainBytes);\n", "idx": 669}
{"project": "cipher", "commit_id": "Snippet9174860_33724.java", "target": 0, "func": "public String encrypt(String dataToEncrypt)\n            throws NoSuchAlgorithmException, NoSuchPaddingException,\n            InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n        // I'm using AES encription\n\n        if (!dataToEncrypt.equals(\"\")) {\n            String key = \"rEqrHrhdd9I1sg==\";\n\n            Cipher c = Cipher.getInstance(\"AES\");\n            SecretKeySpec k;\n            try {\n                k = new SecretKeySpec(key.getBytes(), \"AES\");\n                c.init(Cipher.ENCRYPT_MODE, k);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n            return new String(c.doFinal(Base64.decode(dataToEncrypt, 0)));\n        }\n        return \"\";\n    }\n", "idx": 670}
{"project": "cipher", "commit_id": "Snippet20063239_2730.java", "target": 0, "func": "public class SimpleCrypto {\n    public static String encrypt(String seed, String cleartext)\n            throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted)\n            throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted)\n            throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);//this is the line that throws error\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length() / 2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                    16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2 * buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n    }\n\n}\n", "idx": 671}
{"project": "cipher", "commit_id": "Snippet43567009_25727.java", "target": 0, "func": " public static void encrypt(InputStream is, OutputStream os, List<Integer> userids) throws Exception//\n    {\n        byte[] key = MulticastCryptography.createKey();\n        List<Object[]> list = new ArrayList<>();\n        for (Integer userid : userids)\n        {\n            list.add(new Object[]\n            {\n                 userid, DatabaseManager.getUserkey(userid)\n            });\n        }\n        encrypt(is, os, list, key);\n    }\n\npublic static void encrypt(InputStream is, OutputStream os, List<Object[]> list, byte[] key) throws Exception\n{\n     DataOutputStream dos = new DataOutputStream(os);\n     byte[] header = generateHeader(list, key);\n\n     dos.writeInt(header.length);\n     dos.write(header);\n\n     byte[]headerhash=getHash(header);\n     byte []signature=encrypt(headerhash, key);\n     dos.writeInt(signature.length);\n     dos.write(signature);\n\n     SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n     Cipher cipher = Cipher.getInstance(\"AES\");\n     cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n     CipherOutputStream cos = new CipherOutputStream(dos, cipher);\n     byte[] buffer = new byte[10240000];\n     int n;\n     while ((n = is.read(buffer)) != -1)\n     {\n         cos.write(buffer, 0, n);\n     }\n     cos.flush();\n     cos.close();\n}\n\n\n public static byte[] encrypt(byte[] data, byte[] key) throws Exception\n    {\n        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        return cipher.doFinal(data);\n    }\n\npublic static byte[] generateHeader(List<Object[]> list, byte[] key) throws Exception //userid, userkey\n    {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        DataOutputStream dos = new DataOutputStream(baos);\n\n        dos.writeInt(list.size());\n\n        for (Object[] entry : list)\n        {\n            Integer userid = (Integer) entry[0];\n            byte[] userkey = (byte[]) entry[1];\n            byte[] ekey = encrypt(key, userkey);\n\n            dos.writeInt(userid);\n            dos.writeInt(ekey.length);\n            dos.write(ekey);\n        }\n\n        dos.flush();\n        return baos.toByteArray();\n    }\n\npublic static byte [] getHash(byte []data)\n    {\n        try\n        {\n            MessageDigest sha256=MessageDigest.getInstance(\"SHA-256\");\n            return sha256.digest(data);\n        } catch (NoSuchAlgorithmException ex)\n        {\n            Logger.getLogger(MulticastCryptography.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return new byte[0];\n    }\n", "idx": 672}
{"project": "cipher", "commit_id": "Snippet30549165_12750.java", "target": 0, "func": "public static String encryptAES_Java_Node(String content, String key) {\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 byte[] input;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 String query = null;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 try {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 input = content.getBytes(\"utf-8\");\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 MessageDigest md = MessageDigest.getInstance(\"MD5\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 byte[] thedigest = md.digest(key.getBytes(\"UTF-8\"));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 SecretKeySpec skc = new SecretKeySpec(thedigest,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"AES/ECB/PKCS5Padding\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 cipher.init(Cipher.ENCRYPT_MODE, skc);\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 byte[] cipherText = newbyte[cipher.getOutputSize(input.length)];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ctLength += cipher.doFinal(cipherText, ctLength);\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 query = Base64.encodeToString(cipherText, Base64.DEFAULT);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } catch (UnsupportedEncodingException e) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // TODO Auto-generated catch block\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 e.printStackTrace();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } catch (NoSuchAlgorithmException e) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // TODO Auto-generated catch block\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 e.printStackTrace();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } catch (NoSuchPaddingException e) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // TODO Auto-generated catch block\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 e.printStackTrace();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } catch (InvalidKeyException e) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // TODO Auto-generated catch block\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 e.printStackTrace();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } catch (IllegalBlockSizeException e) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // TODO Auto-generated catch block\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 e.printStackTrace();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } catch (ShortBufferException e) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // TODO Auto-generated catch block\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 e.printStackTrace();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } catch (BadPaddingException e) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // TODO Auto-generated catch block\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 e.printStackTrace();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return query;\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n", "idx": 673}
{"project": "cipher", "commit_id": "Snippet36679390_18542.java", "target": 0, "func": "FileInputStream fis = new FileInputStream(\"dataPath/data\");\nSecretKeySpec sks = new SecretKeySpec(\"password\".getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, sks);\nCipherInputStream cis = new CipherInputStream(fis, cipher);\n", "idx": 674}
{"project": "cipher", "commit_id": "Snippet33687050_15740.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\n\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\n/**\n * A utility class that encrypts or decrypts a file.\n * @author www.codejava.net\n *\n */\npublic class CryptoUtils {\n    private static final String ALGORITHM = \"AES\";\n    private static final String TRANSFORMATION = \"AES\";\n\n    public static void encrypt(String key, File inputFile, File outputFile)\n            throws CryptoException {\n        doCrypto(Cipher.ENCRYPT_MODE, key, inputFile, outputFile);\n    }\n\n    public static void decrypt(String key, File inputFile, File outputFile)\n            throws CryptoException {\n        doCrypto(Cipher.DECRYPT_MODE, key, inputFile, outputFile);\n    }\n\n    private static void doCrypto(int cipherMode, String key, File inputFile,\n            File outputFile) throws CryptoException {\n        try {\n            Key secretKey = new SecretKeySpec(key.getBytes(), ALGORITHM);\n            Cipher cipher = Cipher.getInstance(TRANSFORMATION);\n            cipher.init(cipherMode, secretKey);\n\n            FileInputStream inputStream = new FileInputStream(inputFile);\n            byte[] inputBytes = new byte[(int) inputFile.length()];\n            inputStream.read(inputBytes);\n\n            byte[] outputBytes = cipher.doFinal(inputBytes);\n\n            FileOutputStream outputStream = new FileOutputStream(outputFile);\n            outputStream.write(outputBytes);\n\n            inputStream.close();\n            outputStream.close();\n\n        } catch (NoSuchPaddingException | NoSuchAlgorithmException\n                | InvalidKeyException | BadPaddingException\n                | IllegalBlockSizeException | IOException ex) {\n            throw new CryptoException(\"Error encrypting/decrypting file\", ex);\n        }\n    }\n}\n", "idx": 675}
{"project": "cipher", "commit_id": "Snippet34493652_16483.java", "target": 0, "func": " /**\n * Generate the private key using the passed string.\n * \n * @param keyGeneratorString\n *            : The string which is to be used to generate the private key.\n * @return : SecretKey else null.\n */\npublic SecretKey getKey(String keyGeneratorString) {\n    SecretKeyFactory keyFactory = null;\n    DESKeySpec keySpec = null;\n    try {\n        // only the first 8 Bytes of the constructor argument are used\n        // as material for generating the keySpec\n        keySpec = new DESKeySpec(keyGeneratorString.getBytes(\"UTF-8\"));\n        // Get the DES encryption standard instance\n        keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        // Generate and return the key.\n        return keyFactory.generateSecret(keySpec);\n    } catch (UnsupportedEncodingException uee) {\n        logger.error(\"****** Error while generating key : \"\n                + uee.getMessage());\n    } catch (InvalidKeyException ike) {\n        logger.error(\"****** Error while generating key : \"\n                + ike.getMessage());\n    } catch (NoSuchAlgorithmException e) {\n        logger.error(\"****** Error while generating key : \"\n                + e.getMessage());\n    } catch (InvalidKeySpecException e) {\n        logger.error(\"****** Error while generating key : \"\n                + e.getMessage());\n    }\n    // There was error while generating the key hence return null.\n    return null;\n}\n\n/**\n * Encrypt the string using the SecretKey.\n * \n * @param stringToBeEncrypted\n *            : The String to be encrypted.\n * @param key\n *            : The secret key to be used for encryption.\n * @return : Encrypted byte[] or null.\n */\npublic byte[] encrypt(String stringToBeEncrypted, SecretKey key) {\n    Cipher cipherInst;\n    try {\n        cipherInst = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipherInst.init(Cipher.ENCRYPT_MODE, key);// cipher is not thread\n                                                    // safe\n        byte[] encrypted = cipherInst.doFinal(stringToBeEncrypted\n                .getBytes());\n        return encrypted;\n    } catch (NoSuchAlgorithmException e) {\n        logger.error(\"****** Error while encrypting : \"\n                + e.getMessage());\n    } catch (NoSuchPaddingException e) {\n        logger.error(\"****** Error while encrypting : \"\n                + e.getMessage());\n    } catch (InvalidKeyException e) {\n        logger.error(\"****** Error while encrypting : \"\n                + e.getMessage());\n    } catch (IllegalBlockSizeException e) {\n        logger.error(\"****** Error while encrypting : \"\n                + e.getMessage());\n    } catch (BadPaddingException e) {\n        logger.error(\"****** Error while encrypting : \"\n                + e.getMessage());\n    }\n    return null;\n}\n\n/**\n * Decrypt the string using the SecretKey.\n * \n * @param stringToBeDecrypted : byte[] to be decrypted.\n * @param key : The secret key to be used for decryption.\n * @return : Decrypted byte[] or null.\n */\npublic byte[] decrypt(byte[] stringToBeDecrypted, SecretKey key) {\n    Cipher cipherInst;\n    try {\n        cipherInst = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipherInst.init(Cipher.DECRYPT_MODE, key);\n        byte[] original = cipherInst\n                .doFinal(stringToBeDecrypted);\n        return original;\n    } catch (NoSuchAlgorithmException e) {\n        logger.error(\"****** Error while decrypting : \"\n                + e.getMessage());\n    } catch (NoSuchPaddingException e) {\n        logger.error(\"****** Error while decrypting : \"\n                + e.getMessage());\n    } catch (InvalidKeyException e) {\n        logger.error(\"****** Error while decrypting : \"\n                + e.getMessage());\n    } catch (IllegalBlockSizeException e) {\n        logger.error(\"****** Error while decrypting : \"\n                + e.getMessage());\n    } catch (BadPaddingException e) {\n        logger.error(\"****** Error while decrypting : \"\n                + e.getMessage());\n    }\n    return null;\n}\n", "idx": 676}
{"project": "cipher", "commit_id": "Snippet42862368_25000.java", "target": 0, "func": "private static String SK = \"Secret Key in HEX\";\n\n\n//  To Encrupt\n\npublic static String encrypt( String Message ) throws Exception{\n\n    byte[] KeyByte = hexStringToByteArray( SK);\n    SecretKey k = new SecretKeySpec(KeyByte, 0, KeyByte.length, \"DES\");\n\n    Cipher c = Cipher.getInstance(\"DES\",\"SunJCE\");\n    c.init(1, k);\n    byte mes_encrypted[] = cipher.doFinal(Message.getBytes());\n\n    String MessageEncrypted = byteArrayToHexString(mes_encrypted);\n    return MessageEncrypted;\n}\n\n//  To Decrypt\n\npublic static String decrypt( String MessageEncrypted )throws Exception{\n\n    byte[] KeyByte = hexStringToByteArray( SK );\n    SecretKey k = new SecretKeySpec(KeyByte, 0, KeyByte.length, \"DES\");\n\n    Cipher dcr =  Cipher.getInstance(\"DES\",\"SunJCE\");\n    dc.init(Cipher.DECRYPT_MODE, k);\n    byte[] MesByte  = hexStringToByteArray( MessageEncrypted );\n    byte mes_decrypted[] = dcipher.doFinal( MesByte );\n    String MessageDecrypeted = new String(mes_decrypted);\n\n    return MessageDecrypeted;\n}\n\npublic static String byteArrayToHexString(byte bytes[]){\n\n    StringBuffer hexDump = new StringBuffer();\n    for(int i = 0; i < bytes.length; i++){\n    if(bytes[i] < 0)\n    {   \n        hexDump.append(getDoubleHexValue(Integer.toHexString(256 - Math.abs(bytes[i]))).toUpperCase());\n    }else\n    {\n        hexDump.append(getDoubleHexValue(Integer.toHexString(bytes[i])).toUpperCase());\n    }\n    return hexDump.toString();\n\n}\n\n\n\npublic static byte[] hexStringToByteArray(String s) {\n\n    int len = s.length();\n    byte[] data = new byte[len / 2];\n    for (int i = 0; i < len; i += 2)\n    {   \n        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i+1), 16));\n    }\n    return data;\n\n} \n", "idx": 677}
{"project": "cipher", "commit_id": "Snippet12355491_36240.java", "target": 0, "func": "byte[] iv = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00 };\nIvParameterSpec ivParameterSpec = new IvParameterSpec(iv);\nSecretKey s = new SecretKeySpec(key, Algorithm.TEDE.toString());\nCipher cipher = Cipher.getInstance(\"DESede/CBC/NoPadding\", \"BC\");\ncipher.init(Cipher.DECRYPT_MODE, s, ivParameterSpec);\nbyte[] deciphered_data = cipher.doFinal(enciphered_data);\n", "idx": 678}
{"project": "cipher", "commit_id": "Snippet3549161_30753.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, getAES128SecretKey());\nbyte[] encrypted = cipher.doFinal(input);\n", "idx": 679}
{"project": "cipher", "commit_id": "Snippet20480219_3096.java", "target": 0, "func": "RSAPublicKeySpec spec = new RSAPublicKeySpec(new BigInteger(1,hexToByte(rsaJSON.publickey_exp)),new BigInteger(1,hexToByte(rsaJSON.publickey_mod)));\nKeyFactory factory = KeyFactory.getInstance(\"RSA\");\nPublicKey pub = factory.generatePublic(spec); <---\nCipher cipher = cipher = Cipher.getInstance(\"RSA/None/OAEPWithSHA1AndMGF1Padding\", \"BC\");\ncipher.init(Cipher.ENCRYPT_MODE, pub);\n.....\nString HEXES = \"0123456789ABCDEF\";\npublic static String byteToHex( byte [] raw ) {\n    if ( raw == null ) {\n      return null;\n    }\n    final StringBuilder hex = new StringBuilder( 2 * raw.length );\n    for ( final byte b : raw ) {\n      hex.append(HEXES.charAt((b & 0xF0) >> 4))\n         .append(HEXES.charAt((b & 0x0F)));\n    }\n    return hex.toString();\n}\n\npublic static byte[] hexToByte( String hexString){\n    int len = hexString.length();\n    byte[] ba = new byte[len / 2];\n    for (int i = 0; i < len; i += 2) {\n        ba[i/2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4) + Character.digit(hexString.charAt(i+1), 16));\n    }\n    return ba;\n}\n", "idx": 680}
{"project": "cipher", "commit_id": "Snippet34130900_16129.java", "target": 0, "func": "import java.security.*;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\npublic class StrongAES \n{\n\n    public static void main(String[] args) \n    {\n        StrongAES saes = new StrongAES();\n        String encrypt = saes.encrypt(new String(\"Bar12346Bar12346\"),new String(\"1234567812345678\"));\n        System.out.println(encrypt);\n        String decrypt = saes.decrypt(new String(\"Bar12346Bar12346\"), new String(encrypt));\n        System.out.println(decrypt);\n    }\n\n\n    String encrypt(String key, String text) \n    {\n        String encryptedText=\"\";\n        try{\n         // Create key and cipher\n        Key aesKey = new SecretKeySpec(key.getBytes(\"utf-8\"), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        // encrypt the text\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n        byte[] encrypted = cipher.doFinal(text.getBytes(\"utf-8\"));\n        BASE64Encoder encoder = new BASE64Encoder();\n        encryptedText = encoder.encodeBuffer(encrypted);\n        }\n        catch(Exception e) \n        {\n            e.printStackTrace();\n        }\n        return encryptedText;\n\n    }\n\n    String decrypt(String key, String encryptedText)\n    {\n        String decryptedText=\"\";\n        try{\n         // Create key and cipher\n        Key aesKey = new SecretKeySpec(key.getBytes(\"utf-8\"), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        // decrypt the text\n        cipher.init(Cipher.DECRYPT_MODE, aesKey);\n        BASE64Decoder decoder = new BASE64Decoder();\n        decryptedText = new String(cipher.doFinal(decoder.decodeBuffer(encryptedText)));\n        }\n        catch(Exception e) \n        {\n            e.printStackTrace();\n        }\n        return decryptedText;\n\n    }\n\n}\n", "idx": 681}
{"project": "cipher", "commit_id": "Snippet15828517_38789.java", "target": 0, "func": "SecretKeySpec key = new SecretKeySpec(key, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, key);\ncipherIn = new CipherInputStream(new FileInputStream(<decrypted-file>, cipher);\n", "idx": 682}
{"project": "cipher", "commit_id": "Snippet11311247_35456.java", "target": 0, "func": "byte[] bKey = Hex.decode(\"C67DDB0CE47D27FAF6F32ECA5C99E8AF\")\nbyte[] bMsg = Hex.decode(\"ff00\")\n\nbyte[] keyBytes = Arrays.copyOf(sKey.bytes, 24)\nint j = 0, k = 16\nwhile (j < 8) {\n    keyBytes[k++] = keyBytes[j++]\n}\n\nSecretKey key3 = new SecretKeySpec(keyBytes, \"DESede\")\nIvParameterSpec iv3 = new IvParameterSpec(new byte[8])\nCipher cipher3 = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\")\ncipher3.init(Cipher.ENCRYPT_MODE, key3, iv3)\n\nbyte[] bMac = cipher3.doFinal(bMsg)\nprintln new String(Hex.encode(bMac))\n", "idx": 683}
{"project": "cipher", "commit_id": "Snippet29527461_11561.java", "target": 0, "func": "data = EFjTatx2VkAZR3ScS0UadQr8M6zEkIz/kAX0Cl+XH2FNNHVbeJsEd2b+zWlEkvR6;//( it is base64 encoded )\nCipher aescipher = Cipher.getInstance(\"AES/ECB/NoPadding\", \"SunJCE\");\nKey keySpec = new SecretKeySpec(clefAES, \"AES\");                   \nbyte[] encryptedTextByte = decoder.decodeBuffer(data);\naescipher.init(Cipher.DECRYPT_MODE, keySpec);\nbyte[] decryptedByte = aescipher.doFinal(encryptedTextByte);\nString decryptedText = new String(decryptedByte);\n", "idx": 684}
{"project": "cipher", "commit_id": "Snippet40646297_22496.java", "target": 0, "func": "import java.io.*;\nimport java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport sun.misc.BASE64Encoder;\nimport sun.misc.BASE64Decoder;\n\npublic class PHPDESEncrypt {\n    String key;\n    public PHPDESEncrypt() {\n\n    }\n    public PHPDESEncrypt(String key) {\n        this.key = key;\n    }\n\n    public byte[] desEncrypt(byte[] plainText) throws Exception {\n        SecureRandom sr = new SecureRandom();\n        DESKeySpec dks = new DESKeySpec(key.getBytes());\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey key = keyFactory.generateSecret(dks);\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, sr);\n        byte data[] = plainText;\n        byte encryptedData[] = cipher.doFinal(data);\n        return encryptedData;\n    }\n\n    public String encrypt(String input) throws Exception {\n        return base64Encode(desEncrypt(input.getBytes())).replaceAll(\"\\\\s*\", \"\");\n    }\n\n    public String base64Encode(byte[] s) {\n        if (s == null) return null;\n        BASE64Encoder b = new BASE64Encoder();\n        return b.encode(s);\n    }\n\n    public static void main(String args[]) {\n        try {\n            PHPDESEncrypt d = new PHPDESEncrypt(args[0]);\n            String p=d.encrypt(args[1]);\n            System.out.println(p);\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String getKey() {\n        return key;\n    }\n\n    public void setKey(String key) {\n        this.key = key;\n    }\n}\n", "idx": 685}
{"project": "cipher", "commit_id": "Snippet33474151_15518.java", "target": 0, "func": "private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec);\nbyte[] encrypted = cipher.doFinal(clear);\nreturn encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws   \n Exception   {\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, skeySpec);\nbyte[] decrypted = cipher.doFinal(encrypted);\nreturn decrypted;\n}\n", "idx": 686}
{"project": "cipher", "commit_id": "Snippet42155037_23977.java", "target": 0, "func": "  public static String encrypt(String strClearText,String strKey) throws Exception{\n    String strData=\"\";\n\n    try {\n        SecretKeySpec skeyspec=new SecretKeySpec(strKey.getBytes(),\"Blowfish\");\n        Cipher cipher=Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeyspec);\n        byte[] encrypted=cipher.doFinal(strClearText.getBytes());\n        strData=new String(encrypted);\n\n    } catch (Exception e) {\n        e.printStackTrace();\n        throw new Exception(e);\n    }\n    return strData;\n}\n", "idx": 687}
{"project": "cipher", "commit_id": "Snippet42883456_25011.java", "target": 0, "func": "public static byte[] encryptWithAES(byte[] message, Key AESkey) throws Exception {\n    byte[] decryptedMessage = null;\n    try {\n        Cipher encrypt = Cipher.getInstance(\"AES\");\n        encrypt.init(Cipher.ENCRYPT_MODE, AESkey);\n        decryptedMessage = encrypt.doFinal(message);\n    } catch (Exception ex) {\n        System.err.println(ex.getMessage());\n        throw ex;\n    }\n    return decryptedMessage;\n}\n", "idx": 688}
{"project": "cipher", "commit_id": "Snippet28633724_10796.java", "target": 0, "func": " public FunctionClass() {  \n        try {  \n        keyGenerator = KeyGenerator.getInstance(\"Blowfish\");  \n        secretKey = keyGenerator.generateKey();  \n        cipher = Cipher.getInstance(\"Blowfish\");  \n    } catch (NoSuchPaddingException ex) {  \n        System.out.println(ex);  \n    } catch (NoSuchAlgorithmException ex) {  \n        System.out.println(ex);  \n    }  \n}\n\n public void encrypt(String srcPath, String destPath) {  \n    File rawFile = new File(srcPath);  \n    File encryptedFile = new File(destPath);  \n    InputStream inStream = null;  \n    OutputStream outStream = null;  \n    try {  \n        /** \n         * Initialize the cipher for encryption \n         */  \n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);  \n        /** \n         * Initialize input and output streams \n         */  \n        inStream = new FileInputStream(rawFile);  \n        outStream = new FileOutputStream(encryptedFile);  \n        byte[] buffer = new byte[1024];  \n        int len;  \n        while ((len = inStream.read(buffer)) > 0) {  \n            outStream.write(cipher.update(buffer, 0, len));  \n            outStream.flush();  \n        }  \n        outStream.write(cipher.doFinal());  \n        inStream.close();  \n        outStream.close();  \n    } catch (IllegalBlockSizeException ex) {  \n        System.out.println(ex);  \n    } catch (BadPaddingException ex) {  \n        System.out.println(ex);  \n    } catch (InvalidKeyException ex) {  \n        System.out.println(ex);  \n    } catch (FileNotFoundException ex) {  \n        System.out.println(ex);  \n    } catch (IOException ex) {  \n        System.out.println(ex);  \n    }  \n}\n", "idx": 689}
{"project": "cipher", "commit_id": "Snippet22443016_4834.java", "target": 0, "func": "public class StringCryptor \n{\n    private static final String CIPHER_ALGORITHM = \"AES\";\n    private static final String RANDOM_GENERATOR_ALGORITHM = \"SHA1PRNG\";\n    private static final int RANDOM_KEY_SIZE = 128;\n\n    // Encrypts string and encode in Base64\n    public static String encrypt( String password, String data ) throws Exception \n    {\n        byte[] secretKey = generateKey( password.getBytes() );\n        byte[] clear = data.getBytes();\n\n        SecretKeySpec secretKeySpec = new SecretKeySpec( secretKey, CIPHER_ALGORITHM );\n        Cipher cipher = Cipher.getInstance( CIPHER_ALGORITHM );\n        cipher.init( Cipher.ENCRYPT_MODE, secretKeySpec );\n\n        byte[] encrypted = cipher.doFinal( clear );\n        String encryptedString = Base64.encodeToString( encrypted, Base64.DEFAULT );\n\n        return encryptedString;\n    }\n\n    // Decrypts string encoded in Base64\n    public static String decrypt( String password, String encryptedData ) throws Exception \n    {\n        byte[] secretKey = generateKey( password.getBytes() );\n\n        SecretKeySpec secretKeySpec = new SecretKeySpec( secretKey, CIPHER_ALGORITHM );\n        Cipher cipher = Cipher.getInstance( CIPHER_ALGORITHM );\n        cipher.init( Cipher.DECRYPT_MODE, secretKeySpec );\n\n        byte[] encrypted = Base64.decode( encryptedData, Base64.DEFAULT );\n        byte[] decrypted = cipher.doFinal( encrypted );\n\n        return new String( decrypted );\n    }\n\n    public static byte[] generateKey( byte[] seed ) throws Exception\n    {\n        KeyGenerator keyGenerator = KeyGenerator.getInstance( CIPHER_ALGORITHM );\n        SecureRandom secureRandom = SecureRandom.getInstance( RANDOM_GENERATOR_ALGORITHM );\n        secureRandom.setSeed( seed );\n        keyGenerator.init( RANDOM_KEY_SIZE, secureRandom );\n        SecretKey secretKey = keyGenerator.generateKey();\n        return secretKey.getEncoded();\n    }\n}\n", "idx": 690}
{"project": "cipher", "commit_id": "Snippet27123772_9281.java", "target": 0, "func": "String key = enc_key;\n\n// Create key and cipher\nKey aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\n\n// encrypt the text\ncipher.init(Cipher.ENCRYPT_MODE, aesKey);\nbyte[] encrypted = cipher.doFinal(text.getBytes());\nSystem.out.println(new String(encrypted));\n", "idx": 691}
{"project": "cipher", "commit_id": "Snippet30373192_12518.java", "target": 0, "func": "public class ParameterEncryptor {\n\n    private static final String ALGO = \"AES\"; \n    private static Logger log = Logger.getLogger(UrlEncryptedParameterTag.class);\n    private static byte[] keyValue = new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't','S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\n    public static String encrypt(String name, String value) \n    { \n        log.debug(\"Encrypting request parameter: \" + name); \n        Key key = generateKey();\n        Cipher c =null;\n        try {\n            c = Cipher.getInstance(ALGO);\n            c.init(Cipher.ENCRYPT_MODE, key);\n            byte[] encVal = c.doFinal(value.getBytes());\n            value = new BASE64Encoder().encode(encVal);\n        } catch (NoSuchAlgorithmException ex) {\n            log.error(ex.getMessage());\n        } catch (NoSuchPaddingException ex) {\n            log.error(ex.getMessage());\n        } catch (InvalidKeyException ex) {\n          log.error(ex.getMessage());\n        } catch (IllegalBlockSizeException ex) {\n            log.error(ex.getMessage());\n        } catch (BadPaddingException ex) {\n            log.error(ex.getMessage());\n        }\n\n        return value;\n    } \n\n    public static String decrypt(String encryptedData) {\n        String decryptedValue = \"\";\n        try{\n            Key key = generateKey();\n            Cipher c = Cipher.getInstance(ALGO);\n            c.init(Cipher.DECRYPT_MODE, key);\n            byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n            byte[] decValue = c.doFinal(decordedValue);\n            decryptedValue = new String(decValue);\n        } catch (NoSuchAlgorithmException ex) {\n            log.error(ex.getMessage());\n        } catch (NoSuchPaddingException ex) {\n            log.error(ex.getMessage());\n        } catch (InvalidKeyException ex) {\n            log.error(ex.getMessage());\n        } catch (IllegalBlockSizeException ex) {\n            log.error(ex.getMessage());\n        } catch (BadPaddingException ex) {\n            log.error(ex.getMessage());\n        } catch (IOException ex) {\n            log.error(ex.getMessage());\n        }\n        return decryptedValue;\n    }\n\n    private static Key generateKey() {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n    }\n}\n", "idx": 692}
{"project": "cipher", "commit_id": "Snippet43270291_25411.java", "target": 0, "func": "public static void main(String[] args) {\n    ServerSocket welcomeSocket = null;\n\n    // Creates a connectable socket on port 6789\n    try {\n        welcomeSocket = new ServerSocket(6789);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    while(true){\n        try{\n            double k2, B, A;\n            double n = 13;\n            double g = 61;\n            long y = 7;\n            B = (Math.pow(g, y))%n;\n\n            System.out.println(\"Accepting connections\");\n            // Accept an incoming connection on the socket server\n            Socket connectionSocket = welcomeSocket.accept();\n            // Creates a read and write stream for that client\n            DataInputStream inFromClient = new DataInputStream(connectionSocket.getInputStream());\n            DataOutputStream outToClient = new DataOutputStream(connectionSocket.getOutputStream());\n\n            // Sends the double to the client\n            outToClient.writeDouble(B);\n            System.out.println(\"Sent \" + B);\n            // Reads the number sent by the Client\n            A = inFromClient.readDouble();\n            System.out.println(\"Received \" + A);\n\n            // Modifies the number\n            k2 = (Math.pow(A, y))%n;\n            System.out.println(\"DES key seed = \" + k2);\n            byte[] deskeydata = toByteArray(k2);\n\n            // Turns the bytes of the modified number into a DES key spec\n            DESKeySpec deskeyspec = new DESKeySpec(deskeydata);\n\n            // Makes a secret key (DES)\n            SecretKeyFactory keyF = SecretKeyFactory.getInstance(\"DES\");\n            SecretKey keystuff = keyF.generateSecret(deskeyspec);\n            System.out.println(keystuff.toString());\n\n            // Gets an incoming string from the client and turns it into binary\n            byte[] incomingBytes = new byte[128];\n            try{\n                inFromClient.readFully(incomingBytes);\n            } catch(EOFException eof){\n                System.out.println(\"Finished reading\");\n            }\n            System.out.println(new String(incomingBytes));\n            Cipher c = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n            // Decrypts the string using the shared secret key\n            c.init(Cipher.DECRYPT_MODE, keystuff, new IvParameterSpec(new byte[8]));\n            byte[] ct2 = c.doFinal(incomingBytes);\n\n            // Decode it from base 64\n            //byte[] decodedBytes = Base64.getDecoder().decode(ct2);\n\n            // Prints the received string\n            System.out.println(\"Received: \" + new String(ct2));\n\n            inFromClient.close();\n            outToClient.close();\n\n        } catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 693}
{"project": "cipher", "commit_id": "Snippet23032262_5417.java", "target": 0, "func": "package com;\n\nimport java.security.spec.KeySpec;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class DESEncryption {\n\n    private static final String UNICODE_FORMAT = \"UTF8\";\n    public static final String DES_ENCRYPTION_SCHEME = \"DES\";\n    private KeySpec myKeySpec;\n    private SecretKeyFactory mySecretKeyFactory;\n    private Cipher cipher;\n    byte[] keyAsBytes;\n    private String myEncryptionKey;\n    private String myEncryptionScheme;\n    SecretKey key;\n\n    public DESEncryption() throws Exception {\n        myEncryptionKey = \"ThisIsSecretEncryptionKey\";\n        myEncryptionScheme = DES_ENCRYPTION_SCHEME;\n        keyAsBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n        myKeySpec = new DESKeySpec(keyAsBytes);\n        mySecretKeyFactory = SecretKeyFactory.getInstance(myEncryptionScheme);\n        cipher = Cipher.getInstance(myEncryptionScheme);\n        key = mySecretKeyFactory.generateSecret(myKeySpec);\n    }\n\n    /**\n     * Method To Encrypt The String\n     */\n    public String encrypt(String unencryptedString) {\n        String encryptedString = null;\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);\n            byte[] encryptedText = cipher.doFinal(plainText);\n            BASE64Encoder base64encoder = new BASE64Encoder();\n            encryptedString = base64encoder.encode(encryptedText);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return encryptedString;\n    }\n\n    /**\n     * Method To Decrypt An Ecrypted String\n     */\n    public String decrypt(String encryptedString) {\n        String decryptedText = null;\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            BASE64Decoder base64decoder = new BASE64Decoder();\n            byte[] encryptedText = base64decoder.decodeBuffer(encryptedString);\n            byte[] plainText = cipher.doFinal(encryptedText);\n            decryptedText = bytes2String(plainText);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return decryptedText;\n    }\n\n    /**\n     * Returns String From An Array Of Bytes\n     */\n    private static String bytes2String(byte[] bytes) {\n        StringBuffer stringBuffer = new StringBuffer();\n\n        for (int i = 0; i < bytes.length; i++) {\n            stringBuffer.append((char) bytes[i]);\n        }\n        return stringBuffer.toString();\n    }\n\n}\n", "idx": 694}
{"project": "cipher", "commit_id": "Snippet20742528_3332.java", "target": 0, "func": "    byte[] message = new BASE64Decoder().decodeBuffer(encryptedText);\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    byte[] digestOfPassword = md.digest(kEY.getBytes(\"UTF-16LE\"));\n    byte[] keyBytes = new byte[24];\n    System.arraycopy(digestOfPassword, 0, keyBytes, 0, 16);\n    System.arraycopy(digestOfPassword, 0, keyBytes, 16, 8);\n    SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    Cipher decipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    decipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] plainText = decipher.doFinal(message);\n    String decryptedString = new String(plainText, UTF);\n\n}\n", "idx": 695}
{"project": "cipher", "commit_id": "Snippet30114769_12274.java", "target": 0, "func": "package com.test.util;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AesUtil {\n\n    public static String key = \"0000000000000090\";\n\n    /**\n     * hex to byte[] : 16dd\n     * @param hex    hex string\n     * @return\n     */\n    public static byte[] hexToByteArray(String hex) {\n        if (hex == null || hex.length() == 0) {\n            return null;\n        }\n\n        byte[] ba = new byte[hex.length() / 2];\n        for (int i = 0; i < ba.length; i++) {\n            ba[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16);\n        }\n        return ba;\n    }\n\n    /**\n     * byte[] to hex : unsigned byte\n     *\n     * @param ba        byte[]\n     * @return\n     */\n    public static String byteArrayToHex(byte[] ba) {\n        if (ba == null || ba.length == 0) {\n            return null;\n        }\n\n        StringBuffer sb = new StringBuffer(ba.length * 2);\n        String hexNumber;\n        for (int x = 0; x < ba.length; x++) {\n            hexNumber = \"0\" + Integer.toHexString(0xff & ba[x]);\n\n            sb.append(hexNumber.substring(hexNumber.length() - 2));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * AES \n     *\n     * @param message\n     * @return\n     * @throws Exception\n     */\n    public static String encrypt(String message) throws Exception {\n        //KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        //kgen.init(128);\n        // use key coss2\n        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n\n        // Instantiate the cipher\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encrypted = cipher.doFinal(message.getBytes());\n        return byteArrayToHex(encrypted);\n    }\n\n    /**\n     * AES \n     *\n     * @param message\n     * @return\n     * @throws Exception\n     */\n    public static String decrypt(String encrypted) throws Exception {\n        //KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        //kgen.init(128);\n        // use key coss2\n        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] original = cipher.doFinal(hexToByteArray(encrypted));\n        String originalString = new String(original);\n        return originalString;\n    }\n}\n", "idx": 696}
{"project": "cipher", "commit_id": "Snippet31131608_13293.java", "target": 0, "func": "package com.myApp.security;\n\nimport  android.util.Base64;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Security {\n    public static String encrypt(String input, String key){\n      byte[] crypted = null;\n      try{\n        SecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\n          Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n          cipher.init(Cipher.ENCRYPT_MODE, skey);\n          crypted = cipher.doFinal(input.getBytes());\n        }catch(Exception e){\n            System.out.println(e.toString());\n        }\n        return new String(Base64.encode(crypted, Base64.DEFAULT));\n    }\n\n    public static String decrypt(String input, String key){\n        byte[] output = null;\n        try{\n          SecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\n          Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n          cipher.init(Cipher.DECRYPT_MODE, skey);\n          //output = cipher.doFinal(Base64.decodeBase64(input));\n          output = cipher.doFinal(Base64.decode(input, Base64.DEFAULT));\n        }catch(Exception e){\n          System.out.println(e.toString());\n        }\n        return new String(output);\n    }   \n}\n", "idx": 697}
{"project": "cipher", "commit_id": "Snippet10759392_35024.java", "target": 0, "func": "public class Test {\n\npublic String encryptionKey;\n\npublic static void main(String args[]) {\n    Test t = new Test();\n    String encrypt = t.encrypt(\"mypassword\");\n    System.out.println(\"decrypted value:\" + t.decrypt(t.encryptionKey, encrypt));\n}\n\npublic String encrypt(String value) {\n    try {\n        // Get the KeyGenerator\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        kgen.init(256);\n        // Generate the secret key specs.\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        String key = new Base64().encodeAsString(raw);\n        this.encryptionKey = key;\n        System.out.println(\"------------------Key------------------\");\n        System.out.println(key);\n        System.out.println(\"--------------End of Key---------------\");\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        String encrypt = (new Base64()).encodeAsString(cipher.doFinal(value.getBytes()));\n        System.out.println(\"encrypted string:\" + encrypt);\n        return encrypt;\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalBlockSizeException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (BadPaddingException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidKeyException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchPaddingException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    return null;\n}\n\npublic String decrypt(String key, String encrypted) {\n    try {\n        Key k = new SecretKeySpec(Base64.getDecoder().decode(key), \"AES\");\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.DECRYPT_MODE, k);\n        byte[] decodedValue = Base64.getDecoder().decode(encrypted);\n        byte[] decValue = c.doFinal(decodedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    } catch (IllegalBlockSizeException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (BadPaddingException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidKeyException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchPaddingException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    return null;\n}\n", "idx": 698}
{"project": "cipher", "commit_id": "Snippet11914775_35888.java", "target": 0, "func": "byte[] key = //... password converted to an array of bytes\nbyte[] dataToSend = ...\n\nCipher c = Cipher.getInstance(\"AES\");\nSecretKeySpec k =\n  new SecretKeySpec(key, \"AES\");\nc.init(Cipher.ENCRYPT_MODE, k);\nbyte[] encryptedData = c.doFinal(dataToSend);\n", "idx": 699}
{"project": "cipher", "commit_id": "Snippet29488931_11511.java", "target": 0, "func": "PublicKey publicKey = KeyFactory.getInstance(\"RSA\").\n                    generatePublic(new RSAPublicKeySpec(firstKeyInteger, secondKeyInteger));\n// This always results in the public key OpenSSLRSAPublicKey{modulus=2b3b11f044.....58df890,publicExponent=10001}\n\nCipher cipher = Cipher.getInstance(\"RSA/ECB/OAEPWITHSHA1ANDMGF1PADDING\");\nString stringToEncode = \"EncodeThisString\";\nbyte[] bytesToEncode = stringToEncode.getBytes(\"UTF-8\");\ncipher.init(cipher.PUBLIC_KEY, publicKey);\nbyte[] encrypted = cipher.doFinal(plain);\n", "idx": 700}
{"project": "cipher", "commit_id": "Snippet11326716_35470.java", "target": 0, "func": "/**\n *\n * @author MUDASSIR\n */\n\nimport java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\n\npublic class AESencrp2 {\n\n     private static final String ALGO = \"AES\";\n//    private static final byte[] keyValue = \n//        new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't',\n//'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\n     public static String asHex(byte buf[]) {\n        StringBuilder strbuf = new StringBuilder(buf.length * 2);\n        int i;\n\n        for (i = 0; i < buf.length; i++) {\n            if (((int) buf[i] & 0xff) < 0x10) {\n                strbuf.append(\"0\");\n            }\n\n            strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n        }\n\n        return strbuf.toString();\n    }\n\npublic static String encrypt(String Data, byte[] keyValue) throws Exception {\n        Key key = generateKey(keyValue);\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encryptedValue = c.doFinal(Data.getBytes());\n        return asHex(encryptedValue);\n    }\n\n    public static String decrypt(String encryptedData, byte[] keyValue) throws Exception {\n        Key key = generateKey(keyValue);\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decValue = c.doFinal(encryptedData.getBytes());\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n    private static Key generateKey(byte[] keyValue) throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n}\n\n}\n", "idx": 701}
{"project": "cipher", "commit_id": "Snippet29607500_11679.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.spec.InvalidKeySpecException;\nimport javax.crypto.*;\nimport sun.misc.*;\n\npublic class AESencrp {\n\n     private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = \n        new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't',\n'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\npublic static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encVal);\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n}\n\n}\n", "idx": 702}
{"project": "cipher", "commit_id": "Snippet34807380_16809.java", "target": 0, "func": "public class CrytedClass {\n    public static byte[] generateKey(String pass) throws Exception{\n        byte [] start = pass.getBytes(\"UTF-8\");\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n\n        sr.setSeed(start);\n        kgen.init(128,sr);\n        SecretKey skey = kgen.generateKey();\n        return skey.getEncoded();\n    }\n\n    public static byte[] encodedFile(byte[] key, byte[] fileData)throws Exception{\n        SecretKeySpec skeySpec = new SecretKeySpec(key,\"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE,skeySpec);\n        byte [] encrypted = cipher.doFinal(fileData);\n        return encrypted;\n\n    }\n    public static byte[] decodeFile(byte[] key, byte[] fileData) throws Exception{\n        SecretKeySpec skeySpec = new SecretKeySpec(key,\"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE,skeySpec);\n        byte [] decrypted = cipher.doFinal(fileData);\n        return decrypted;\n    }\n\n    public static String generatePass(){\n        return new BigInteger(130, new SecureRandom()).toString(32);\n\n    }\n    public static byte[] createHas(byte[] ficheroEncrip){\n        MessageDigest msd = null;\n        try{\n            msd = MessageDigest.getInstance(\"SHA-1\");\n        }catch (Exception e){\n            return null;\n        }\n        msd.update(ficheroEncrip);\n        return msd.digest();\n    }\n}\n", "idx": 703}
{"project": "cipher", "commit_id": "Snippet11411475_35568.java", "target": 0, "func": "public class DES {\n\n    public static String encode(String str, String key) throws Exception {\n        byte[] rawKey=Base64.decode(key);\n        IvParameterSpec sr=new IvParameterSpec(rawKey);\n        DESKeySpec dks=new DESKeySpec(rawKey);\n        SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(\"DES\");\n        SecretKey secretKey=keyFactory.generateSecret(dks);\n\n        javax.crypto.Cipher cipher=Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey, sr);\n\n        byte data[]=str.getBytes(\"UTF8\");\n        byte encryptedData[]=cipher.doFinal(data);\n        return Base64.encode(encryptedData).trim();\n    }\n\n    public static String decode(String str, String key) throws Exception {\n        byte[] rawKey=Base64.decode(key);\n        IvParameterSpec sr=new IvParameterSpec(rawKey);\n        DESKeySpec dks=new DESKeySpec(rawKey);\n        SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(\"DES\");\n        SecretKey secretKey=keyFactory.generateSecret(dks);\n        Cipher cipher=Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey, sr);\n        byte encryptedData[]=Base64.decode(str);\n        byte decryptedData[]=cipher.doFinal(encryptedData);\n        return new String(decryptedData, \"UTF8\").trim();\n    }\n}\n", "idx": 704}
{"project": "cipher", "commit_id": "Snippet46402717_28520.java", "target": 0, "func": "KeyGenerator kg = KeyGenerator.getInstance(\"AES\");\nkg.init(256);\nSecretKey sk = kg.generateKey();\nCipher aesCipher = Cipher.getInstance(\"AES\");\naesCipher.init(Cipher.ENCRYPT_MODE, sk);\nCredentials cred = new UsernamePasswordCredentials(\"username\", \"password\");//no need for time field?\nString eCred = Base64.encodeBase64String(aesCipher.doFinal(objectToByteArray(cred)));\n\n...\n\nprivate byte[] objectToByteArray(Object obj) {\n    byte[] bytes = null;\n    try (\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(bos);\n    ) {\n        oos.writeObject(obj);\n        oos.flush();\n        bytes = bos.toByteArray();\n    }\n    catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    return bytes;\n}\n", "idx": 705}
{"project": "cipher", "commit_id": "Snippet9496447_33962.java", "target": 0, "func": "public static void encryptToBinaryFile(String password, byte[] bytes, File file) throws EncrypterException {\n    try {\n        final byte[] rawKey = getRawKey(password.getBytes());\n        final FileOutputStream ostream = new FileOutputStream(file, false);\n\n        ostream.write(encrypt(rawKey, bytes));\n        ostream.flush();\n        ostream.close();\n\n    } catch (IOException e) {\n        throw new EncrypterException(e);\n    }\n}\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws EncrypterException {\n    try {\n       final SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n       final Cipher cipher = Cipher.getInstance(\"AES\");\n       cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n       return cipher.doFinal(clear);\n\n    } catch (Exception e) {\n        throw new EncrypterException(e);\n    }\n}\n", "idx": 706}
{"project": "cipher", "commit_id": "Snippet40274762_22170.java", "target": 0, "func": "public static void main(String[] args) throws Exception {\n    // Generate AES Key\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n    SecretKey myAesKey = keyGenerator.generateKey();\n\n    Cipher aesCipher = Cipher.getInstance(\"AES\");\n\n    String text = \"11111110001100110011011111111011011111111101000111000101111111111111111001011110110001011111110111111001110110011100110111011111101111100111101\";\n\n    // ENCRYPT the text\n    aesCipher.init(Cipher.ENCRYPT_MODE, myAesKey);\n    byte[] textEncrypted = aesCipher.doFinal(text.getBytes());\n\n    // Output results\n    System.out.println(\"Text [Byte Format]: \" + text);\n    System.out.println(\"Text : \" + new String(text));\n    System.out.println(\"Text Encrypted: \" + textEncrypted);\n\n    // Write the 'text' to a file\n    File encryptFileResult = new File(\"TestFiles/exampleOrig.txt\");\n    if (!encryptFileResult.exists()) {\n        encryptFileResult.createNewFile();\n    } else {\n        encryptFileResult.delete();\n        encryptFileResult.createNewFile();\n    }\n\n    FileWriter encryptFileWriter = new FileWriter(encryptFileResult.getAbsoluteFile());\n    BufferedWriter bufferedWriter = new BufferedWriter(encryptFileWriter);\n\n    bufferedWriter.write(new String(textEncrypted));\n    bufferedWriter.close();\n\n    // Grab all bytes from the 'exampleOrig.txt' file\n    byte[] encryptedBytes = Files.readAllBytes(encryptFileResult.toPath());\n\n    // DECRYPT the text\n    aesCipher.init(Cipher.DECRYPT_MODE, myAesKey);\n    byte[] textDecrypted = aesCipher.doFinal(encryptedBytes);\n\n    System.out.println(\"Text Decrypted: \" + new String(textDecrypted));\n}\n", "idx": 707}
{"project": "cipher", "commit_id": "Snippet7006975_32517.java", "target": 0, "func": "public class VideoActivity extends Activity \n{\n    VideoView video_view;\n    MediaController m_controller;\n    MediaPlayer mplayer;\n    String[] a = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"};\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) \n    {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n\n\n        try {\n            main(a);\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n\n    }\n\n        public void writeToFile(String filename, Object object) throws Exception \n        {\n            FileOutputStream fos = null;\n            ObjectOutputStream oos = null;\n\n            try \n            {\n                fos = new FileOutputStream(new File(Environment.getExternalStorageDirectory()+\"/corebird1.mp4\"));\n                oos = new ObjectOutputStream(fos);\n                oos.writeObject(object);\n                oos.flush();\n            }\n            catch (Exception e) \n            {\n                e.printStackTrace();\n            }\n            finally \n            {\n                if (oos != null) \n                {\n                    oos.close();\n                }\n                if (fos != null) \n                {\n                    fos.close();\n                }\n            }\n        }\n\n        public void main(String[] args) throws Exception \n        {\n            //\n            // Generating a temporary key and stire it in a file.\n            //\n            SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n            writeToFile(\"secretkey.dat\", key);\n            Log.d(\"#######key\", String.valueOf(key));\n\n            //\n            // Preparing Cipher object for encryption.\n            //\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n\n            //\n            // Here we seal (encrypt) a simple string message (a string object).\n            //\n            SealedObject sealedObject = new SealedObject(\"THIS IS A SECRET MESSAGE!\", cipher);\n\n            //\n            // Write the object out as a binary file.\n            //\n            writeToFile(\"sealed.dat\", sealedObject);\n        } \n}\n", "idx": 708}
{"project": "cipher", "commit_id": "Snippet23186213_5524.java", "target": 0, "func": "            Path pathP = Paths.get(\"../poem_encrypted.txt\");//path provided in code\n\n        byte[] poem = Files.readAllBytes(pathP);\n\n        String codedbyte= poem.toString();\n\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.DECRYPT_MODE, bobDesKey);\n\n\n        byte[] decoder = new BASE64Decoder().decodeBuffer(codedbyte);\n        byte[] msgbyte = c.doFinal(decoder);\n        String message = new String(msgbyte);\n\n\n        System.out.println(\"message1\"+message);\n        Path path_e = Paths.get(\"/poem_decrypted.txt\");\n        FileOutputStream fout;\n\n        fout = new FileOutputStream(\"/poem_decrypted.txt\");\n\n        fout.write(msgbyte);\n        fout.close();\n        System.out.println(\"File coded.\");\n\n\n\n\n            }\n    catch (Exception e)\n    {\n        System.out.println(\"Error\" + e);\n    }\n", "idx": 709}
{"project": "cipher", "commit_id": "Snippet15949817_38934.java", "target": 0, "func": "import java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Main {\n\n  public static void main(String[] args) throws Exception {\n\n    KeyGenerator keygenerator = KeyGenerator.getInstance(\"Blowfish\");\n    SecretKey secretkey = keygenerator.generateKey();\n\n    String plaintextString = \"StackOverflow\";\n    System.out.println(plaintextString + \" \" + bytesToHex(plaintextString.getBytes()) + \" \" + Arrays.toString(plaintextString.getBytes()));\n\n    SecretKeySpec key = new SecretKeySpec(secretkey.getEncoded(), \"Blowfish\");\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encrypted = cipher.doFinal(plaintextString.getBytes());\n    String encryptedString = bytesToHex(encrypted);\n    System.out.println(new String(encrypted) + \" \" + encryptedString + \" \" + Arrays.toString(encrypted));\n\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] decrypted = cipher.doFinal(hexToBytes(encryptedString));\n    String decryptedString = bytesToHex(decrypted);\n    System.out.println(new String(decrypted) + \" \" + decryptedString + \" \" + Arrays.toString(decrypted));\n\n  }\n\n  public static byte[] hexToBytes(String str) {\n    if (str == null) {\n      return null;\n    } else if (str.length() < 2) {\n      return null;\n    } else {\n      int len = str.length() / 2;\n      byte[] buffer = new byte[len];\n      for (int i = 0; i < len; i++) {\n        buffer[i] = (byte) Integer.parseInt(str.substring(i * 2, i * 2 + 2), 16);\n      }\n      return buffer;\n    }\n\n  }\n\n  public static String bytesToHex(byte[] data) {\n    if (data == null) {\n      return null;\n    } else {\n      int len = data.length;\n      String str = \"\";\n      for (int i = 0; i < len; i++) {\n        if ((data[i] & 0xFF) < 16)\n          str = str + \"0\" + java.lang.Integer.toHexString(data[i] & 0xFF);\n        else\n          str = str + java.lang.Integer.toHexString(data[i] & 0xFF);\n      }\n      return str.toUpperCase();\n    }\n  }\n}\n", "idx": 710}
{"project": "cipher", "commit_id": "Snippet43783943_25894.java", "target": 0, "func": "public static Cipher getCipher(boolean encrypt) throws Exception {\n    //https://en.wikipedia.org/wiki/Stream_cipher       \n    byte[] key = (\"sometestkey\").getBytes(\"UTF-8\");\n    MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n    key = sha.digest(key);\n    key = Arrays.copyOf(key, 16); // use only first 128 bit\n\n    Key k = new SecretKeySpec(key,\"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n    if (encrypt) {\n        cipher.init(Cipher.ENCRYPT_MODE, k);\n    } else {\n        cipher.init(Cipher.DECRYPT_MODE, k);\n    }\n    return cipher;\n}\n", "idx": 711}
{"project": "cipher", "commit_id": "Snippet38881778_20791.java", "target": 0, "func": "Cipher.getInstance(\"AES\");", "idx": 712}
{"project": "cipher", "commit_id": "Snippet37907039_19933.java", "target": 0, "func": "public static GPKeySet diversify(GPKeySet keys, byte[] diversification_data, Diversification mode, int scp) throws GPException {\n    try {\n        GPKeySet result = new GPKeySet();\n        Cipher cipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n        for (KeyType v : KeyType.values()) {\n            if (v == KeyType.RMAC)\n                continue;\n            byte [] kv = null;\n            // shift around and fill initialize update data as required.\n            if (mode == Diversification.VISA2) {\n                kv = fillVisa(diversification_data, v);\n            } else if (mode == Diversification.EMV) {\n                kv = fillEmv(diversification_data, v);\n            }\n\n            // Encrypt with current master key\n            cipher.init(Cipher.ENCRYPT_MODE, keys.getKey(v).getKey(Type.DES3));\n\n            byte [] keybytes = cipher.doFinal(kv);\n            // Replace the key, possibly changing type. G&D SCE 6.0 uses EMV 3DES and resulting keys\n            // must be interpreted as AES-128\n            GPKey nk = new GPKey(keybytes, scp == 3 ? Type.AES : Type.DES3);\n            result.setKey(v, nk);\n        }\n        return result;\n    } catch (BadPaddingException |InvalidKeyException | IllegalBlockSizeException e) {\n        throw new GPException(\"Diversification failed.\", e);\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n        throw new RuntimeException(\"Diversification failed.\", e);\n    }\n}\n\npublic static byte[] fillVisa(byte[] init_update_response, KeyType key) {\n    byte[] data = new byte[16];\n    System.arraycopy(init_update_response, 0, data, 0, 2);\n    System.arraycopy(init_update_response, 4, data, 2, 4);\n    data[6] = (byte) 0xF0;\n    data[7] = key.getValue();\n    System.arraycopy(init_update_response, 0, data, 8, 2);\n    System.arraycopy(init_update_response, 4, data, 10, 4);\n    data[14] = (byte) 0x0F;\n    data[15] = key.getValue();\n    return data;\n}\n", "idx": 713}
{"project": "cipher", "commit_id": "Snippet27248644_9396.java", "target": 0, "func": "public static void main(String args[]) throws Exception{\n  String password = \"Secret Passphrase\";\n  String salt = \"4acfedc7dc72a9003a0dd721d7642bde\";\n  String iv = \"69135769514102d0eded589ff874cacd\";\n  String encrypted = \"PU7jfTmkyvD71ZtISKFcUQ==\";\n  byte[] saltBytes = salt.getBytes(); //hexStringToByteArray(salt);\n  byte[] ivBytes = iv.getBytes();//hexStringToByteArray(iv);\n  IvParameterSpec ivParameterSpec = new IvParameterSpec(ivBytes);        \n  SecretKeySpec sKey = (SecretKeySpec) generateKeyFromPassword(password, saltBytes);\n  System.out.println( decrypt( encrypted , sKey ,ivParameterSpec));\n}\n\npublic static SecretKey generateKeyFromPassword(String password, byte[] saltBytes) throws GeneralSecurityException {\n\n  KeySpec keySpec = new PBEKeySpec(password.toCharArray(), saltBytes, 100, 128/32);\n  SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n  SecretKey secretKey = keyFactory.generateSecret(keySpec);\n  return new SecretKeySpec(secretKey.getEncoded(), \"AES\");\n}\n\npublic static String decrypt(String encryptedData, SecretKeySpec sKey, IvParameterSpec ivParameterSpec) throws Exception {\n\n  Cipher c = Cipher.getInstance(\"AES\");\n  c.init(Cipher.DECRYPT_MODE, sKey, ivParameterSpec);\n  byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n  byte[] decValue = c.doFinal(decordedValue);\n  String decryptedValue = new String(decValue);\n  return decryptedValue;\n}\n", "idx": 714}
{"project": "cipher", "commit_id": "Snippet10494764_34814.java", "target": 0, "func": "cipher2 = Cipher.getInstance(\"AES\"); \nsecretKeySpec = new SecretKeySpec(decryptedText, \"AES\");\ncipher2.init(Cipher.ENCRYPT_MODE, secretKeySpec);\nfeedback = \"Your answer is wrong\".getBytes();\ncipher2.doFinal(feedback);\ndos.writeInt(feedback.length);\ndos.write(feedback);\n", "idx": 715}
{"project": "cipher", "commit_id": "Snippet27921093_10069.java", "target": 0, "func": "encrypted = encrypt(\"201412181656005P443m2Q1R9A7f5r3e1z08642\",\"5P443m2Q1R9A7f5r3e1z08642\");\n\npublic class Crypt {\n\n    private final String characterEncoding = \"UTF-8\";\n    private final String cipherTransformation = \"AES/ECB/PKCS5Padding\";\n    private final String aesEncryptionAlgorithm = \"AES\";\n\n    public  byte[] decrypt(byte[] cipherText, byte[] key) throws Exception\n    {\n        Cipher cipher = Cipher.getInstance(cipherTransformation);\n        SecretKeySpec secretKeySpecy = new SecretKeySpec(key, aesEncryptionAlgorithm);\n        cipher.init(Cipher.DECRYPT_MODE, secretKeySpecy);\n        cipherText = cipher.doFinal(cipherText);\n        return cipherText;\n    }\n\n    public byte[] encrypt(byte[] plainText, byte[] key) throws Exception\n    {\n        Cipher cipher = Cipher.getInstance(cipherTransformation);\n        SecretKeySpec secretKeySpec = new SecretKeySpec(key, aesEncryptionAlgorithm);\n        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n        plainText = cipher.doFinal(plainText);\n        return plainText;\n    }\n\n    private byte[] getKeyBytes(String key) throws UnsupportedEncodingException{\n        byte[] keyBytes= new byte[16];\n        byte[] parameterKeyBytes= key.getBytes(characterEncoding);\n        System.arraycopy(parameterKeyBytes, 0, keyBytes, 0, Math.min(parameterKeyBytes.length, keyBytes.length));\n        return keyBytes;\n    }\n\n    @SuppressLint(\"NewApi\")\n    public String encrypt(String plainText, String key) throws Exception {\n        byte[] plainTextbytes = plainText.getBytes(characterEncoding);\n        byte[] keyBytes = getKeyBytes(key);\n        // Log.i(\"iv\", \"\"+keyBytesIV);\n        return Base64.encodeToString(encrypt(plainTextbytes,keyBytes), Base64.DEFAULT);\n    }\n\n    @SuppressLint(\"NewApi\")\n    public String decrypt(String encryptedText, String key) throws Exception {\n        byte[] cipheredBytes = Base64.decode(encryptedText, Base64.DEFAULT);\n        byte[] keyBytes = getKeyBytes(key);\n\n        return new String(decrypt(cipheredBytes, keyBytes), characterEncoding);\n    }\n\n}\n", "idx": 716}
{"project": "cipher", "commit_id": "Snippet26608276_8735.java", "target": 0, "func": "enter code here\n\n\n\n    package com.example.bluetooth2;\n\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AESHelper {\n    public static String encrypt(String seed, String cleartext)\n            throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted)\n            throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\",\"Crypto\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted)\n            throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length() / 2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                    16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2 * buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n    }\n\n}\n\n\nAND WITH THE MAIN ACTIVITY CODE:\n\n    enter code here\n\n     public static String seedValue = \"abcdefghijklmnop\";\n    public static String MESSAGE = \"Benfica\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        try {\n            String encryptedData = AESHelper.encrypt(seedValue, MESSAGE);\n            Log.v(\"EncryptDecrypt\", \"Encoded String \" + encryptedData);\n            String decryptedData = AESHelper.decrypt(seedValue, encryptedData);\n            Log.v(\"Decrypt\", \"Decoded String \" + decryptedData);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    }\n", "idx": 717}
{"project": "cipher", "commit_id": "Snippet34361371_16329.java", "target": 0, "func": "public void encrypt() {\n    doCrypto(Cipher.ENCRYPT_MODE, KEY);\n}\n\npublic void decrypt() {\n    doCrypto(Cipher.DECRYPT_MODE, KEY);\n}\n\nprivate void doCrypto(int cipherMode, String key) {\n    try {\n        Key secretKey = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(cipherMode, secretKey);\n\n        FileInputStream inputStream = new FileInputStream(this);\n        FileOutputStream fileOutputStream = new FileOutputStream(this);\n\n        int read;\n\n        CipherInputStream cis = new CipherInputStream(inputStream, cipher);\n        CipherOutputStream cos = new CipherOutputStream(fileOutputStream, cipher);\n\n        while ((read = cis.read()) != -1) {\n            cos.write(read);\n            cos.flush();\n        }\n        cos.close();\n        cis.close();\n\n        inputStream.close();\n        fileOutputStream.close();\n\n    } catch (NoSuchPaddingException | NoSuchAlgorithmException\n            | InvalidKeyException | IOException ex) {\n        throw new RuntimeException(\"Error encrypting/decrypting file\", ex);\n    }\n}\n", "idx": 718}
{"project": "cipher", "commit_id": "Snippet19462675_2250.java", "target": 0, "func": "//encryption function\npublic static String encryptMsg(byte [] msgBytes, SecretKey myDesKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException\n{\n    Cipher desCipher;\n    // Create the cipher \n    desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n    byte[] textEncrypted = desCipher.doFinal(msgBytes);\n\n// converts to base64 for easier display.\nbyte[] base64Cipher = Base64.encode(textEncrypted);\nreturn new String(base64Cipher);\n} //end encryptMsg\n", "idx": 719}
{"project": "cipher", "commit_id": "Snippet25087094_7431.java", "target": 0, "func": "public class AES {\n    public static String s = \"long string\";\n\n    public byte [] encryptAES(byte[] data, byte[] keyPass) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException {\n\n        Cipher ciph = Cipher.getInstance(\"AES\");\n\n        SecretKeySpec AESkeySpec = new SecretKeySpec(keyPass, \"AES\");\n        ciph.init(ENCRYPT_MODE,AESkeySpec);\n\n        ciph.update(s.getBytes());\n        byte[] encryptedData = ciph.doFinal();\n\n        return encryptedData;\n    }\n}\n", "idx": 720}
{"project": "cipher", "commit_id": "Snippet8723979_33454.java", "target": 0, "func": "    input = new FileInputStream(file);\n    output = new FileOutputStream(newFile);\n\n    Cipher cipher = Cipher.getInstance(\"DES\");\n    cipher.init(Cipher.ENCRYPT_MODE, mySecretKey);\n\n    byte[] buf = new byte[1024];\n\n    count = input.read(buf);\n    while (count >= 0) {\n        output.write(cipher.update(buf, 0, count)); // HERE I WAS DOING doFinal() method\n        count = input.read(buf);\n    }\n    output.write(cipher.doFinal()); // AND I DID NOT HAD THIS LINE BEFORE\n    output.flush();\n", "idx": 721}
{"project": "cipher", "commit_id": "Snippet25308541_7681.java", "target": 0, "func": "public byte[] encryptBytes(byte[] source) {\n        try {\n            byte[] raw = key.getBytes(Charset.forName(\"UTF-8\"));\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n            byte[] encrypted = cipher.doFinal(source);\n\n            return encrypted;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n", "idx": 722}
{"project": "cipher", "commit_id": "Snippet13271184_36820.java", "target": 0, "func": "public byte[] decrypt(Key key,byte[] textCryp){\n    Cipher cipher;\n    byte[] decrypted = null;\n    try {\n        cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        decrypted = cipher.doFinal(textCryp);\n    } catch (Exception e) {         \n        e.printStackTrace();\n    } \n\n    return decrypted;\n}\n", "idx": 723}
{"project": "cipher", "commit_id": "Snippet340820_29648.java", "target": 0, "func": "encrypt = Cipher.getInstance(\"AES\", provider);\nencrypt.init(Cipher.ENCRYPT_MODE, key) ;\nbyte[] encrypted = encrypt.doFinal(plainTxt.getBytes()) ;\n", "idx": 724}
{"project": "cipher", "commit_id": "Snippet16752606_134.java", "target": 0, "func": "public byte[] decrypt(byte[] enc) throws Exception{\n    Cipher c3des = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    SecretKeySpec    myKey = new SecretKeySpec(key, \"DESede\");\n    IvParameterSpec ivspec = new IvParameterSpec(initializationVector);\n    c3des.init(Cipher.DECRYPT_MODE, myKey, ivspec);\n    byte[] cipherText = c3des.doFinal(enc);\n    return cipherText;\n}\n", "idx": 725}
{"project": "cipher", "commit_id": "Snippet10798936_35056.java", "target": 0, "func": "byte[] rawFile;\nFile f = new File(\"./src/wonkybox.stl\");\nFileInputStream fileReader = new FileInputStream(f);\nrawFile = new byte[(int)f.length()];\nfileReader.read(rawFile);\n\n/*****   Encrypt the file (CAN DO THIS ONCE!)  ***********/\n\n//Generate the public/private keys\nKeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"AES\");\nSecureRandom random = SecureRandom.getInstance(\"SHA1PRNG\",\"SUN\");\nkeyGen.initialize(1024, random);\nKeyPair key = keyGen.generateKeyPair();\nPrivateKey privKey = key.getPrivate();\nPublicKey pubKey = key.getPublic();\n\n//Store the keys\nbyte[] pkey = pubKey.getEncoded();\nFileOutputStream keyfos = new FileOutputStream(\"./CloudStore/keys/pubkey\");\nkeyfos.write(pkey);\nkeyfos.close();\n\npkey = privKey.getEncoded();\nkeyfos = new FileOutputStream(\"./CloudStore/keys/privkey\");\nkeyfos.write(pkey);\nkeyfos.close();\n\n\n//Read public/private keys\nKeyFactory keyFactory = KeyFactory.getInstance(\"AES\");\nFileInputStream keyfis = new FileInputStream(\"./CloudStore/keys/pubkey\");\nbyte[] encKey = new byte[keyfis.available()];\nkeyfis.read(encKey);\nkeyfis.close();\n\nX509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(encKey);\nPublicKey pub1Key = keyFactory.generatePublic(pubKeySpec);\n\nkeyfis = new FileInputStream(\"./CloudStore/keys/privkey\");\nencKey = new byte[keyfis.available()];\nkeyfis.read(encKey);\nkeyfis.close();\n\nPKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(encKey);\nPrivateKey priv1key = keyFactory.generatePrivate(privKeySpec);\n\n//Encrypt file using public key\nCipher cipher = Cipher.getInstance(\"AES\");\nSystem.out.println(\"provider= \" + cipher.getProvider());\ncipher.init(Cipher.ENCRYPT_MODE, pub1Key);\n\n\nbyte[] encryptedFile;\nencryptedFile = cipher.doFinal(rawFile);\n\n//Write encrypted file to 'CloudStore' folder\nFileOutputStream fileEncryptOutput = new FileOutputStream(new File(\"./CloudStore/encrypted.txt\"));\nfileEncryptOutput.write(encryptedFile);\nfileEncryptOutput.close();\n", "idx": 726}
{"project": "cipher", "commit_id": "Snippet18754635_1700.java", "target": 0, "func": "        public class MessageEncrypt {\n\n            public String encryptString(String message, String seckey) throws Exception{\n                byte[] encData = encrypt(message, seckey);\n\n                return this.getHexString(encData, \"\");\n            }\n\n            public String decryptString(String message, String seckey) throws Exception{\n                return decrypt(this.getBArray(message), seckey);\n            }\n\n            private byte[] encrypt(String message, String seckey) throws Exception {\n                final MessageDigest md = MessageDigest.getInstance(\"md5\");\n                final byte[] digestOfPassword = md.digest(seckey.getBytes(\"utf-8\"));\n                final byte[] keyBytes = acopyof(digestOfPassword, 24);\n                for (int j = 0, k = 16; j < 8;) {\n                    keyBytes[k++] = keyBytes[j++];\n                }\n\n                final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n                final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n                final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n                cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n                final byte[] plainTextBytes = message.getBytes(\"utf-8\");\n                final byte[] cipherText = cipher.doFinal(plainTextBytes);\n                // final String encodedCipherText = new sun.misc.BASE64Encoder()\n                // .encode(cipherText);\n\n                return cipherText;\n            }\n\n            private String decrypt(byte[] message, String seckey) throws Exception {\n                final MessageDigest md = MessageDigest.getInstance(\"md5\");\n                final byte[] digestOfPassword = md.digest(seckey.getBytes(\"utf-8\"));\n                final byte[] keyBytes = acopyof(digestOfPassword, 24);\n                for (int j = 0, k = 16; j < 8;) {\n                    keyBytes[k++] = keyBytes[j++];\n                }\n\n                final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n                final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n                final Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n                decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n                final byte[] plainText = decipher.doFinal(message);\n\n                return new String(plainText, \"UTF-8\");\n            }\n\n            private String getHexString(byte[] barray, String delim) {\n                StringBuffer buffer = new StringBuffer();\n\n\n                for (int i = 0; i < barray.length; i++) {\n                    int ii = barray[i] & 0xFF;\n                    String bInt = Integer.toHexString(ii);\n                    if (ii < 16) {\n                        bInt = \"0\" + bInt.toUpperCase();\n                    }\n                    buffer.append(bInt);\n                    if (i < barray.length - 1) {\n                        buffer.append(delim);\n                    }\n                }\n\n                return buffer.toString().toUpperCase();\n            }\n\n            private byte[] getBArray(String bString) {\n                byte[] retBytes;\n\n                if (bString.length() % 2 != 0) {\n                    return new byte[0];\n                }\n                retBytes = new byte[bString.length() / 2];\n\n                for (int i = 0; i < bString.length() / 2; i++) {\n                    retBytes[i] = (byte) ((Character.digit(bString.charAt(2 * i), 16) << 4) + Character.digit(bString.charAt(2 * i + 1), 16));\n                }\n                return retBytes;\n            }\n\n            public static byte[] acopyof(byte[] orig, int newlength){\n                byte[] copya = new byte[newlength];\n                for(int i=0;i< orig.length;i++){\n                    copya[i]=orig[i];\n                }\n                for(int i=orig.length;i<newlength;i++){\n                    copya[i]=0x0;\n                }\n                return copya;\n            }\n  }\n", "idx": 727}
{"project": "cipher", "commit_id": "Snippet10986930_35162.java", "target": 0, "func": "public String Decrypt(String strText)\n{\n    try\n    {\n\n        BASE64Decoder decoder = new BASE64Decoder();\n        byte[] test = decoder.decodeBuffer(strText);\n\n        SecretKeySpec objKey = new SecretKeySpec(bytKey, \"AES\");\n        Cipher objCipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n        objCipher.init(Cipher.DECRYPT_MODE, objKey);\n\n        byte[] bytValue = objCipher.doFinal(test);\n\n        return new String(bytValue);\n    }\n    catch (Exception exc)\n    {\n        exc.printStackTrace();\n    }\n\n    return \"\";\n\n}\n", "idx": 728}
{"project": "cipher", "commit_id": "Snippet43578848_25730.java", "target": 0, "func": "    package com.example.encryption;\n\n    import javax.crypto.Cipher;\n    import javax.crypto.SecretKey;\n    import javax.crypto.spec.SecretKeySpec;\n    import java.util.Base64;\n\n    public class AESOwnKey {\n        private Cipher ecipher;\n        private Cipher dcipher;\n\n        AESOwnKey(SecretKey key) {\n            try {\n                ecipher = Cipher.getInstance(\"AES\");\n                dcipher = Cipher.getInstance(\"AES\");\n                ecipher.init(Cipher.ENCRYPT_MODE, key);\n                dcipher.init(Cipher.DECRYPT_MODE, key);\n            } catch (Exception e) {\n                System.out.println(\"Failed in initialization\");\n            }\n        }\n\n        public byte[] encrypt(String str) {\n            try {\n                byte[] utf8 = str.getBytes(\"UTF-8\");\n                byte[] enc = ecipher.doFinal(utf8);\n\n                return Base64.getEncoder().encode(enc);\n            } catch (Exception e) {\n                System.out.println(\"Failed in Encryption\");\n            }\n            return null;\n        }\n\n        public String decrypt(byte[] bytes) {\n            try {\n                byte[] dec = Base64.getDecoder().decode(bytes);\n\n                byte[] utf8 = dcipher.doFinal(dec);\n\n                return new String(utf8, \"UTF-8\");\n            } catch (Exception e) {\n                System.out.println(\"Failed in Decryption\");\n            }\n            return null;\n        }\n\n        public static void main(String[] args) {\n            try {\n                String mykey = \"1234567891234567\";\n                SecretKey key = new SecretKeySpec(mykey.getBytes(), \"AES\");\n                AESOwnKey encrypter = new AESOwnKey(key);\n                String original = \"Testing encryption\";\n                System.out.println(\"Before Encryption   : \" + original);\n                byte[] encrypted = encrypter.encrypt(original);\n                System.out.println(\"After Encryption   : \" + encrypted);\n                String decrypted = encrypter.decrypt(encrypted);\n                System.out.println(\"After Decryption   : \" + decrypted);\n\n            } catch (Exception e) {\n            }\n\n        }\n    }\n", "idx": 729}
{"project": "cipher", "commit_id": "Snippet24848823_7176.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.*;\npublic class PrivateExample \n{\n public static void main (String[] args) throws Exception \n{\n    String text=new String();\n    text=\"This is an encryption test\";\n    byte[] plainText = text.getBytes(\"UTF8\");\n    System.out.println( \"\\nStart generating DES key\" );\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\n    keyGen.init(56);\n    Key key = keyGen.generateKey();\n    System.out.println( \"Finish generating DES key\" );\n\n    // get a DES cipher object and print the provider\n    Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    System.out.println( \"\\n\" + cipher.getProvider().getInfo() );\n    //\n   // encrypt using the key and the plaintext\n    System.out.println( \"\\nStart encryption\" );\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    byte[] cipherText = cipher.doFinal(plainText);\n    System.out.println( \"Finish encryption: \" );\n    System.out.println( new String(cipherText, \"UTF8\") );\n\n   //Now writing to an ouput file the cipherText\n   try{\n       FileOutputStream fs=new FileOutputStream(\"c:/test.txt\");\n      fs.write(cipherText);\n     }catch(Exception e){\n       e.printStackTrace();\n     }\n\n}\n}\n", "idx": 730}
{"project": "cipher", "commit_id": "Snippet29274498_11314.java", "target": 0, "func": "     Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n\n     Cipher cipher = Cipher.getInstance(\"AES\");\n\n\n\n     // encrypt the text\n\n     cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n\n     byte[] encrypted = cipher.doFinal(text.getBytes());\n\n     System.err.println(new String(encrypted)); \n", "idx": 731}
{"project": "cipher", "commit_id": "Snippet3769622_30874.java", "target": 0, "func": "    // Reads password from config file\nString password = ScriptConfig.getString( \"password\" );\n\n// Generate Key\nKeyGenerator kg = KeyGenerator.getInstance(\"DES\");\nKey key = kg.generateKey();\n\n// Create Encryption cipher\nCipher cipher = Cipher.getInstance( \"DES\" );\ncipher.init( Cipher.ENCRYPT_MODE, key );\n\n// Encrypt password\nbyte[] encrypted = cipher.doFinal( password.getBytes() );\n\n// Create decryption cipher\ncipher.init( Cipher.DECRYPT_MODE, key );\nbyte[] decrypted = cipher.doFinal( encrypted );\n\n// Convert byte[] to String\nString decryptedString = new String(decrypted);\n\nSystem.out.println(\"password: \" + password);\nSystem.out.println(\"encrypted: \" + encrypted);\nSystem.out.println(\"decrypted: \" + decryptedString);\n\n// Read encrypted string from config file\nString encryptedPassword = ScriptConfig.getString( \"encryptedPassword\"\n);\n\n// Convert encryptedPassword string into byte[]\nbyte[] encryptedPasswordBytes = new byte[1024];\nencryptedPasswordBytes = encryptedPassword.getBytes();\n\n// Decrypt encrypted password from config file\nbyte[] decryptedPassword = cipher.doFinal( encryptedPasswordBytes );//error here\n\nSystem.out.println(\"encryptedPassword: \" + encryptedPassword);\nSystem.out.println(\"decryptedPassword: \" + decryptedPassword);\n\n\nThe config file has the following variables:\npassword=password\nencryptedPassword=[B@2a4983\n\n\nWhen I run the code, I get the following output:\npassword: passwd\nencrypted: [B@2a4983\ndecrypted: passwd\njavax.crypto.IllegalBlockSizeException: Input length must be multiple\nof 8 when decrypting with padded cipher\nat com.sun.crypto.provider.SunJCE_h.b(DashoA12275)\nat com.sun.crypto.provider.SunJCE_h.b(DashoA12275)\nat com.sun.crypto.provider.DESCipher.engineDoFinal(Da shoA12275)\nat javax.crypto.Cipher.doFinal(DashoA12275)\nat com.sapient.fbi.uid.TestEncryption.main(TestEncryp tion.java:4\n", "idx": 732}
{"project": "cipher", "commit_id": "Snippet38837336_20745.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\ncipher.init(Cipher.DECRYPT_MODE, secretKey);\ndecd = cipher.doFinal(strToDecrypt.getBytes(\"UTF-8\"));\n", "idx": 733}
{"project": "cipher", "commit_id": "Snippet43132393_25259.java", "target": 0, "func": "public String Encrypt(String str, String desKey, String mode) {\n    try {\n        KeySpec keySpec = null;\n        SecretKey key = null;\n        Cipher ecipher = null;\n        if (desKey.length() == 8) {\n            keySpec = new DESKeySpec(desKey.getBytes(\"UTF8\"));\n            key = SecretKeyFactory.getInstance(\"DES\").generateSecret(keySpec);\n            if(mode.equals(ECB)){\n                ecipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n                ecipher.init(Cipher.ENCRYPT_MODE, key);\n            }else if (mode.equals(CBC)){\n                ecipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n                AlgorithmParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n                ecipher.init(Cipher.ENCRYPT_MODE, key,ivSpec);\n            }\n        } else if (desKey.length() == 24) {\n            keySpec = new DESedeKeySpec(desKey.getBytes(\"UTF8\"));\n            key = SecretKeyFactory.getInstance(\"DESede\").generateSecret(keySpec);\n            ecipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n            ecipher.init(Cipher.ENCRYPT_MODE, key);\n        }\n\n        byte[] data = str.getBytes(\"UTF-8\");\n        byte[] crypt = ecipher.doFinal(data);\n\n        return Base64.encodeToString(crypt, 0);\n    } catch (Exception ex) {\n        Log.d(\"ZVM\", ex.getMessage());\n    }\n    return null;\n}\n", "idx": 734}
{"project": "cipher", "commit_id": "Snippet8397465_33203.java", "target": 0, "func": "public class SecureCredentialsCrypto {\n\n            public static String encrypt(String seed, String cleartext) throws Exception {\n                    byte[] rawKey = getRawKey(seed.getBytes());\n                    byte[] result = encrypt(rawKey, cleartext.getBytes());\n                    return toHex(result);\n            }\n\n            public static String decrypt(String seed, String encrypted) throws Exception {\n                    byte[] rawKey = getRawKey(seed.getBytes());\n                    byte[] enc = toByte(encrypted);\n                    byte[] result = decrypt(rawKey, enc);\n                    return new String(result);\n            }\n\n            private static byte[] getRawKey(byte[] seed) throws Exception {\n                    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n                    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n                    sr.setSeed(seed);\n                kgen.init(128, sr); // 192 and 256 bits may not be available\n                SecretKey skey = kgen.generateKey();\n                byte[] raw = skey.getEncoded();\n                return raw;\n            }\n\n\n            private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n                SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n                    Cipher cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n                byte[] encrypted = cipher.doFinal(clear);\n                    return encrypted;\n            }\n\n            private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n                SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n                    Cipher cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n                byte[] decrypted = cipher.doFinal(encrypted);\n                    return decrypted;\n            }\n\n            public static String toHex(String txt) {\n                    return toHex(txt.getBytes());\n            }\n            public static String fromHex(String hex) {\n                    return new String(toByte(hex));\n            }\n\n            public static byte[] toByte(String hexString) {\n                    int len = hexString.length()/2;\n                    byte[] result = new byte[len];\n                    for (int i = 0; i < len; i++)\n                            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n                    return result;\n            }\n\n            public static String toHex(byte[] buf) {\n                    if (buf == null)\n                            return \"\";\n                    StringBuffer result = new StringBuffer(2*buf.length);\n                    for (int i = 0; i < buf.length; i++) {\n                            appendHex(result, buf[i]);\n                    }\n                    return result.toString();\n            }\n            private final static String HEX = \"0123456789ABCDEF\";\n            private static void appendHex(StringBuffer sb, byte b) {\n                    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n            }\n\n    }\n\n//for storing encrypt it\nString crypto_email = SecureCredentialsCrypto.encrypt(\"secure\", email.toString().trim());\n\n//for reading  decrypt it\n//crypto is object name to read \n\n\nString correctEmail=SecureCredentialsCrypto.decrypt(\"secure\", crypto);\n", "idx": 735}
{"project": "cipher", "commit_id": "Snippet17946810_997.java", "target": 0, "func": "  try {\n        byte [] encryptionKeyBytes = md5EncryptionKey.getBytes(\"UTF-8\");\n        Key key = new SecretKeySpec(encryptionKeyBytes, \"AES\");\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decodedValue = new Base64().decode(encryptedData);\n        byte[] decValue = c.doFinal(decodedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    } catch (InvalidKeyException e) {\n        log.error \"[getDecryptedValue] InvalidKeyException: \" + e\n    } catch (IllegalBlockSizeException e) {\n        log.error \"[getDecryptedValue] InvalidKeyException: \" + e\n    } catch (BadPaddingException e) {\n        log.error \"[getDecryptedValue] InvalidKeyException: \" + e\n    } catch (NoSuchAlgorithmException e) {\n        log.error \"[getDecryptedValue] InvalidKeyException: \" + e\n    } catch (NoSuchPaddingException e) {\n        log.error \"[getDecryptedValue] InvalidKeyException: \" + e\n    } catch (Exception e) {\n        log.error \"[getDecryptedValue] InvalidKeyException: \" + e\n    }\n", "idx": 736}
{"project": "cipher", "commit_id": "Snippet31544243_13691.java", "target": 0, "func": "    public class Crypto {\n\n        public void encryptor(String inputFilePath) {\n\n            FileOutputStream fos = null;\n            File file = new File(inputFilePath);\n            String keyString = \"140405PX_0.$88\";\n            String algorithm = \"DESede\";\n            try {\n                FileInputStream fileInputStream = new FileInputStream(file);\n                byte[] fileByteArray = new byte[fileInputStream.available()];\n                fileInputStream.read(fileByteArray);\n                for (byte b : fileByteArray) {\n                    System.out.println(b);\n                }\n                SecretKey secretKey = getKey(keyString);\n                Cipher cipher = Cipher.getInstance(algorithm);\n                cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n                ObjectOutputStream objectOutputStream = new ObjectOutputStream(new CipherOutputStream(new FileOutputStream(\"encrypt.txt\"), cipher));\n                objectOutputStream.writeObject(fileByteArray);\n                objectOutputStream.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\npublic static SecretKey getKey(String message) throws Exception {\n        String messageToUpperCase = message.toUpperCase();\n        byte[] digestOfPassword = messageToUpperCase.getBytes();\n        byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n        return key;\n    }\n", "idx": 737}
{"project": "cipher", "commit_id": "Snippet22620403_5024.java", "target": 0, "func": "public class AppSecurity{\nprivate AppSecurity() {}\n\npublic static byte[] encrypt(byte[] key , byte[] data) {\n    SecretKeySpec keySpec = new SecretKeySpec(key, \"AES\");\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE,keySpec);\n        return cipher.doFinal(data);\n    }\n    catch (NoSuchAlgorithmException e){ }\n    catch (NoSuchPaddingException e){ }\n    catch (InvalidKeyException e){ }\n    catch (BadPaddingException e){ }\n    catch (IllegalBlockSizeException e) {}\n    return null;\n}\n\npublic static byte[] decrypt(byte[] key , byte[] encryptedData) {\n    SecretKeySpec keySpec = new SecretKeySpec(key ,\"AES\");\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, keySpec);\n        return cipher.doFinal(encryptedData);\n    }\n    catch (NoSuchAlgorithmException e) {}\n    catch (NoSuchPaddingException e) { }\n    catch (InvalidKeyException e) { }\n    catch (BadPaddingException e) {}\n    catch (IllegalBlockSizeException e) {}\n    return null;\n}\n\n/**\n * method to generate a secure key. call this when app starts\n * @return\n */\npublic static byte[] generateKey(){\n    try{\n        // create an AES algorithm instance.\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n        SecureRandom secureRandom = SecureRandom.getInstance(\"SHA1PRNG\");\n        keyGenerator.init(128,secureRandom);\n        SecretKey secretKey = keyGenerator.generateKey();\n        return secretKey.getEncoded();\n    }\n    catch (NoSuchAlgorithmException e){\n        return null;\n    }\n  }\n}\n", "idx": 738}
{"project": "cipher", "commit_id": "Snippet7382490_32713.java", "target": 0, "func": "String key = \"some 16 byte key\";\nbyte[] keyBytes = key.getBytes(\"UTF-8\");\nbyte[] plainBytes = plainText.getBytes(\"UTF-8\");\nSecretKeySpec skeySpec = new SecretKeySpec(keyBytes, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec);\nbyte[] encrypted = cipher.doFinal(plainBytes);\nString result = Base64.encodeBytes(encrypted);\nreturn result;\n", "idx": 739}
{"project": "cipher", "commit_id": "Snippet9512480_33968.java", "target": 0, "func": "public void encrypt(InputStream in, OutputStream out) throws Exception {\n    final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    final IvParameterSpec param = new IvParameterSpec(iv);\n    final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, key, param);\n\n    // Read in the cleartext bytes and write to out to encrypt\n    int numRead = 0;\n    while ((numRead = in.read(buf)) >= 0) {\n        byte[] output = cipher.doFinal(buf, 0, numRead);\n        if(output != null) {\n            byte[] enc = Base64.encode(output, 0);\n            out.write(enc);\n        }   \n    }\n    out.close();\n}\n", "idx": 740}
{"project": "cipher", "commit_id": "Snippet29082489_11153.java", "target": 0, "func": "byte[] encoded = String.valueOf(fileIn.nextLine()).getBytes();//Key data\nkey = new SecretKeySpec(encoded, \"AES\");\ndcipher = Cipher.getInstance(\"AES\");\ndcipher.init(Cipher.DECRYPT_MODE, key);\n", "idx": 741}
{"project": "cipher", "commit_id": "Snippet32385387_14462.java", "target": 0, "func": " public String decrypt(String strToDecrypt) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            setDecryptedString(new String(cipher.doFinal(Base64\n                    .decodeBase64(strToDecrypt))));\n        } catch (Exception e) {\n            System.out.println(\"Error while decrypting: \" + e.toString());\n        }\n        return null;\n    }\n", "idx": 742}
{"project": "cipher", "commit_id": "Snippet39498722_21417.java", "target": 0, "func": "    public class AESEncDec {\n\n     private static final String ALGO = \"AES\";\n    private static final byte[] keyValue =  new byte[] { 'T', 'h', 'e', 'B','e', 's', 't','S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\n\npublic static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encVal);\n        System.err.println(\"encVal: \"+encryptedValue.length());\n\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        //byte[] decValue = c.doFinal(encryptedData.getBytes());\n        String decryptedValue = new String(decValue);\n        System.err.println(\"decVal: \"+decryptedValue.length());\n\n        return decryptedValue;\n    }\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n}\n\n}\n", "idx": 743}
{"project": "cipher", "commit_id": "Snippet10360372_34717.java", "target": 0, "func": " public static byte[] encrypt(byte[] key, byte[] data) throws Exception\n\n        {\n\n            SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n            byte[] encrypted = cipher.doFinal(data);\n            return encrypted;\n        }\n\n        /**\n         * DEcrypt byte array with given Key using AES Algorithm\n         * Key can be generated using <Code>getKey()</Code>\n         * @param key  Key that Is used for decrypting data\n         * @param data  Data passed to decrypt\n         * @return decrypted data\n         * */\n\n        public static byte[] decrypt1(byte[] key, byte[] encrypted) throws Exception\n        {\n\n            SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n            byte[] decrypted = cipher.doFinal(encrypted);\n            return decrypted;\n        }\n        /**\n         * get the Key for encryption this can be used for while decrypting and encrypting too.\n         * */\n        public static byte[] getKey() throws Exception\n        {\n            byte[] keyStart = EncrypteDecrypte.encryptionKey.getBytes();\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n            SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n            sr.setSeed(keyStart);\n            kgen.init(128, sr); // 192 and 256 bits may not be available\n            SecretKey skey = kgen.generateKey();\n            byte[] key = skey.getEncoded();\n\n            return key;\n        }\n", "idx": 744}
{"project": "cipher", "commit_id": "Snippet42178544_24142.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, skeySpec);\n", "idx": 745}
{"project": "cipher", "commit_id": "Snippet937054_29570.java", "target": 0, "func": "\nCipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\nSecretKeySpec key = new SecretKeySpec(yourKeyBytes, \"AES\");\naes.init(Cipher.DECRYPT_MODE, key);\nbyte[] cleartext = aes.update(ciphertext, 0, ciphertext.length);\n", "idx": 746}
{"project": "cipher", "commit_id": "Snippet44156092_26224.java", "target": 0, "func": "byte[] encodeData(byte[] key, byte[] data)\n{\n    try {\n        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        return cipher.doFinal(data);\n    } catch(Exception e) {\n        Log.e(\"Cryptography\", e.getMessage());\n    }\n    return new byte[0];\n}\n", "idx": 747}
{"project": "cipher", "commit_id": "Snippet44305966_26361.java", "target": 0, "func": " public static String encrypt(String originalPassword) throws Exception {\n    String methodName = \"encrypt -->\";\n    _logger.debug(methodName + Constants.CALLED);\n    String encryptedString = null;\n    try {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n        encryptedString = base64Encode(pbeCipher.doFinal(originalPassword.getBytes(\"UTF-8\")));\n        _logger.debug(methodName + \"encrypted string \" + encryptedString);\n    }  catch (Exception e) {\n        _logger.error(methodName + \"Encryption failed due to: \" + e.getMessage());\n        throw new Exception(\"Failed to Encrypt String\");\n    }\n    _logger.debug(methodName + Constants.END);\n    return encryptedString;\n}\n\npublic static String decrypt(String encryptedPassword) throws Exception {\n        String methodName = \"decrypt -->\";\n        _logger.debug(methodName + Constants.CALLED);\n        String decryptedString = null;\n        try {\n            _logger.debug(methodName + \" string to decrypt \" + encryptedPassword);\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n            SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n            Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n            pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n            decryptedString = new String(pbeCipher.doFinal(base64Decode(encryptedPassword)), \"UTF-8\");\n        } catch (Exception e) {\n            _logger.error(methodName + \"Decryption failed due to: \" + e.getMessage());\n            throw new Exception(\"Failed to Decrypt String\");\n        }\n        _logger.debug(methodName + Constants.END);\n        return decryptedString;\n    }\n", "idx": 748}
{"project": "cipher", "commit_id": "Snippet44854386_26959.java", "target": 0, "func": "import javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.SecretKey;\nimport javax.crypto.Cipher;\nimport java.security.spec.KeySpec;\nimport javax.crypto.spec.PBEKeySpec;\n\n\n\nclass AESCrypt {\n\n\n// encrypt\ndef encrypt (def plainText, def secret) {\n\ndef cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\")\n\n\n// converty string secret to SecretKeySpec\nbyte[] decodedKey = Base64.getDecoder().decode(secret);\nSecretKeySpec key= new SecretKeySpec(decodedKey , 0, decodedKey.length, \n\"AES\");\n\n\ncipher.init(Cipher.ENCRYPT_MODE, key)\n\nreturn cipher.doFinal(plainText.getBytes(\"UTF-8\")).encodeBase64().toString()  \n\n}\n\n}\n\n//Main\nfor( int i = 0; i < dataContext.getDataCount(); i++ ) {\n  InputStream is = dataContext.getStream(i);\n  Properties props = dataContext.getProperties(i);\n\ndef c = new AESCrypt()\n\ndef secret = \n\"B3FFCA612CD0C3D9050A4DE3588E2830F26BEF6D7E1CEC77DD2F22FAFC038D33\"\n\n//get plaintext of payload\nScanner s = new Scanner(is).useDelimiter(\"\\\\A\");\nString plainPayload = s.hasNext() ? s.next() : \"\";\n\n//encrypt plaintext of payload\ndef encryptedPayload = c.encrypt(plainPayload, secret)\n\nprintln encryptedPayload + \"\\n\"\n\n\n\n}\n", "idx": 749}
{"project": "cipher", "commit_id": "Snippet7615743_32814.java", "target": 0, "func": "SecretKeySpec skeySpec = new SecretKeySpec(getCryptoKeyByteArray(length=16)); // 128 bits\nCipher encryptor = Cipher.getInstance(\"AES\");\nencryptor.init(Cipher.ENCRYPT_MODE, skeySpec);\nbyte[] encrypted = encryptor.doFinal(plain);\n", "idx": 750}
{"project": "cipher", "commit_id": "Snippet45788258_27867.java", "target": 0, "func": "void decrypt(File file1, String nama) throws IOException, NoSuchAlgorithmException,\n        NoSuchPaddingException, InvalidKeyException {\n\n    md5 hash = new md5();\n    String sapi = hash.md5(nama);\n\n    FileInputStream fis = new FileInputStream(file1+ \"/\" + sapi);\n\n    FileOutputStream fos = new FileOutputStream(file1 + \"/decrypted.json\");\n\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(),\n            \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while ((b = cis.read(d)) != -1) {\n        fos.write(d, 0, b);\n    }\n\n    fos.flush();\n    fos.close();\n    cis.close();\n\n}\n", "idx": 751}
{"project": "cipher", "commit_id": "Snippet21056311_3637.java", "target": 0, "func": "public String encrypt(String password, String key, String VecI) throws GeneralSecurityException, UnsupportedEncodingException{\n    byte[] sessionKey = key.getBytes(); \n    byte[] iv = VecI.getBytes() ; \n    byte[] plaintext = password.getBytes();\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(sessionKey, \"DES\"), new IvParameterSpec(iv));\n    byte[] ciphertext = cipher.doFinal(plaintext);\n    String resp = ciphertext.toString();\n    return resp;\n}\n", "idx": 752}
{"project": "cipher", "commit_id": "Snippet45352262_27055.java", "target": 0, "func": "    Cipher cipher = Cipher.getInstance( \"DESede/ECB/PKCS5Padding\" );\n    cipher.init( Cipher.ENCRYPT_MODE, encryptionKey );\n    byte[] returnValue = cipher.doFinal( dataToEncrypt )\n", "idx": 753}
{"project": "cipher", "commit_id": "Snippet11406768_35563.java", "target": 0, "func": "<%@ page import=\"java.sql.*\" %>\n<%@ page import=\"java.io.*\" %>\n<%@ page import=\"java.security.*\" %>\n<%@ page import=\"javax.crypto.*\" %>\n<%@ page import=\"javax.crypto.spec.*\" %>\n<%@ page import=\"java.lang.*\" %>\n\n<HTML>\n<HEAD>\n<TITLE>Simple JSP/Oracle Query Example</TITLE>\n</HEAD>\n<BODY>\n\n<%\n   Class.forName(\"oracle.jdbc.OracleDriver\");\n\n   Connection conn = DriverManager.getConnection(\"jdbc:oracle:thin:@xxx:xxxx:xxxx\",\"xxxxxx\",\"xxxxxx\");\n                        // @//machineName:port:SID,   userid,  password\n\n    Statement st=conn.createStatement();\n\n    ResultSet rs=st.executeQuery(\"Select * from Cxxxxxxx\");\n\n    while(rs.next()){\n        String name=rs.getString(\"user_id\");\n        String p=rs.getString(\"password\");\n        out.println(name+\":\"+p);\n        out.println(\"</br>\");\n\n\n    String algorithm1 = \"DES\";//magical mystery constant\n    String algorithm2 = \"DES/CBC/NoPadding\";//magical mystery constant\n    IvParameterSpec iv = new IvParameterSpec( new byte [] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );//magical mystery constant\n    Cipher cipher;\n    SecretKey key;\n    String k=\"12345abc\";\n    key = new SecretKeySpec( k.getBytes(\"UTF-8\"), algorithm1 );\n    cipher = Cipher.getInstance( algorithm2 );\n\n    String str=\"test4abc\";\n\n    cipher.init( Cipher.ENCRYPT_MODE, key, iv ); //normally you could leave out the IvParameterSpec argument, but not with Oracle\n\n    byte[] bytes=str.getBytes(\"UTF-8\");\n\n    byte[] encrypted = cipher.doFinal( bytes );\n\n    //Problem is in the statement BELOW --->\n    String encoded = new String( Hex.encodeHex( encrypted ) );\n    }\n%>  \n</BODY>\n</HTML>\n", "idx": 754}
{"project": "cipher", "commit_id": "Snippet3743036_30865.java", "target": 0, "func": "import java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.ShortBufferException;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class ObjectCrypter {\n\nprivate Cipher deCipher;\nprivate Cipher enCipher;\nprivate SecretKeySpec key;\nprivate IvParameterSpec ivSpec;\n\n\npublic ObjectCrypter(byte[] keyBytes,   byte[] ivBytes) {\n    // wrap key data in Key/IV specs to pass to cipher\n\n\n     ivSpec = new IvParameterSpec(ivBytes);\n    // create the cipher with the algorithm you choose\n    // see javadoc for Cipher class for more info, e.g.\n    try {\n         DESKeySpec dkey = new  DESKeySpec(keyBytes);\n          key = new SecretKeySpec(dkey.getKey(), \"DES\");\n         deCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n         enCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n}\npublic byte[] encrypt(Object obj) throws InvalidKeyException, InvalidAlgorithmParameterException, IOException, IllegalBlockSizeException, ShortBufferException, BadPaddingException {\n    byte[] input = convertToByteArray(obj);\n    enCipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);\n\n    return enCipher.doFinal(input);\n\n\n\n\n//  cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);\n//  byte[] encypted = new byte[cipher.getOutputSize(input.length)];\n//  int enc_len = cipher.update(input, 0, input.length, encypted, 0);\n//  enc_len += cipher.doFinal(encypted, enc_len);\n//  return encypted;\n\n\n}\npublic Object decrypt( byte[]  encrypted) throws InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, IOException, ClassNotFoundException {\n    deCipher.init(Cipher.DECRYPT_MODE, key, ivSpec);\n\n    return convertFromByteArray(deCipher.doFinal(encrypted));\n\n}\n\n\n\nprivate Object convertFromByteArray(byte[] byteObject) throws IOException,\n        ClassNotFoundException {\n    ByteArrayInputStream bais;\n\n    ObjectInputStream in;\n    bais = new ByteArrayInputStream(byteObject);\n    in = new ObjectInputStream(bais);\n    Object o = in.readObject();\n    in.close();\n    return o;\n\n}\n\n\n\nprivate byte[] convertToByteArray(Object complexObject) throws IOException {\n    ByteArrayOutputStream baos;\n\n    ObjectOutputStream out;\n\n    baos = new ByteArrayOutputStream();\n\n    out = new ObjectOutputStream(baos);\n\n    out.writeObject(complexObject);\n\n    out.close();\n\n    return baos.toByteArray();\n\n}\n\n\n}\n", "idx": 755}
{"project": "cipher", "commit_id": "Snippet14636682_37858.java", "target": 0, "func": "import java.security.*;\nimport java.security.spec.InvalidKeySpecException;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.*;\n\nimport org.apache.commons.codec.binary.Base64;\n\npublic class FrontierCipher\n{\n    private static final String ALGO = \"AES\";\n    private static String keyString = \"00112233445566778899AABBCCDDEEFF0123456789ABCDEF0123456789ABCDEF\";\n\n     private static Key generateKey() throws Exception \n     {\n        Key key = new SecretKeySpec(convertToByteArray(keyString), ALGO);\n        return key;\n    }\n    public static byte[] encryptBytes(byte[] data) throws Exception\n    {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] encVal = c.doFinal(data);\n        byte[] encryptedValue = Base64.encodeBase64(encVal);\n\n        return encryptedValue;\n    }\n\n    public static byte[] decrpytBytes(byte[] encryptedData) throws Exception\n    {   \n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n\n        byte[] decordedValue = Base64.decodeBase64(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n\n        return decValue;\n    }\n\n    public static byte[] convertToByteArray(String key) throws KeySizeException\n    {\n        if(key.length()<64)\n            throw new KeySizeException(\"Key must contain 64 characters\");\n\n        byte[] b = new byte[32];\n\n        for(int i=0, bStepper=0; i<key.length()+2; i+=2)\n            if(i !=0)\n                b[bStepper++]=((byte) Integer.parseInt((key.charAt(i-2)+\"\"+key.charAt(i-1)), 16));\n\n        return b;\n    }\n\n\n    public static void main(String[] args) throws Exception\n    {\n        byte[] password  = {6,75,3};\n        byte[] passwordEnc = encryptBytes(password);\n        byte[] passwordDec = decrpytBytes(passwordEnc);\n\n        System.out.println(\"Plain Text : \" + password[0]+\" \"+ password[1]+\" \"+ password[2]);\n        System.out.println(\"Encrypted Text : \" + passwordEnc[0]+\" \"+ passwordEnc[1]+\" \"+ passwordEnc[2]);\n        System.out.println(\"Decrypted Text : \" + passwordDec[0]+\" \"+passwordDec[1]+\" \"+passwordDec[2]);\n    }\n}\n", "idx": 756}
{"project": "cipher", "commit_id": "Snippet4580982_31195.java", "target": 0, "func": "public String encrypt(String message, SecretKey skey) {\n    byte[] raw = skey.getEncoded();\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n    // Instantiate the cipher\n\n    Cipher cipher;\n    byte[] encrypted = null;\n    try {\n        cipher = Cipher.getInstance(\"AES\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        encrypted = cipher.doFinal(message.getBytes());\n        System.out.println(\"raw is \" + encrypted);\n\n    } catches\n    return asHex(encrypted);\n}\n", "idx": 757}
{"project": "cipher", "commit_id": "Snippet47199662_29197.java", "target": 0, "func": "import javax.crypto.Cipher;\n     import javax.crypto.SecretKey;\n     import javax.crypto.spec.SecretKeySpec;\n\n    public class AESEncryptionDecryption {\n\n    private static final byte[] keyValue =\n            new byte[]{'c', 'o', 'd', 'i', 'n', 'g', 'a', 'f', 'f', 'a', 'i', 'r', 's', 'c', 'o', 'm'};\n\n\n    public static String encrypt(String cleartext)\n            throws Exception {\n        byte[] rawKey = getRawKey();\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String encrypted)\n            throws Exception {\n\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey() throws Exception {\n        SecretKey key = new SecretKeySpec(keyValue, \"AES\");\n        byte[] raw = key.getEncoded();\n        return raw;\n    }\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKey skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] encrypted)\n            throws Exception {\n        SecretKey skeySpec = new SecretKeySpec(keyValue, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length() / 2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                    16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2 * buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n\nprivate final static String HEX = \"0123456789ABCDEF\";\n\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n}\n", "idx": 758}
{"project": "cipher", "commit_id": "Snippet6860915_32419.java", "target": 0, "func": "public Cipher getCipher(byte[] password) {\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n\n    byte keyData[] = createKey(byte[] password, md);\n\n     SecretKey secretKey = \n        SecretKeyFactory.getInstance(\"DESede\").\n        generateSecret(new DESedeKeySpec(keyData[]));\n\n    IVSpec ivspec = createIV(secretKey.getEncoded(), md);\n\n    Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    cipher.init(1, secretKey, ivSpec, md);\n\n    return cipher;\n}\n", "idx": 759}
{"project": "cipher", "commit_id": "Snippet27598524_9700.java", "target": 0, "func": "private final static String keyString = \"123456789012345678901234\";\nprivate final static String ivString = \"abcdefgh\";\n\n\npublic static String encrypt(String data) throws Exception {\n\n\n    KeySpec keySpec = new DESedeKeySpec(keyString.getBytes());\n    SecretKey key = SecretKeyFactory.getInstance(\"DESede\").generateSecret(keySpec);\n    IvParameterSpec iv = new IvParameterSpec(ivString.getBytes());\n    Cipher ecipher = Cipher.getInstance(\"DESede/CFB8/NoPadding\");\n    ecipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n    byte[] valeur = data.getBytes(\"UTF-8\");\n    byte[] enc = ecipher.doFinal(valeur);\n\n    return new String(Base64.encode(enc, Base64.DEFAULT), \"UTF-8\");\n}\n", "idx": 760}
{"project": "cipher", "commit_id": "Snippet37965783_19991.java", "target": 0, "func": "String s_InitKey = \"1612211310164660\";\nString s_IvSpec = \"MySecreteBytes00\";\n\nIvParameterSpec iv = new IvParameterSpec(s_IvSpec.getBytes(\"UTF-8\"));\nSecretKeySpec key = new SecretKeySpec(s_InitKey.getBytes(\"UTF-8\"), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, key, iv);\n", "idx": 761}
{"project": "cipher", "commit_id": "Snippet14666552_37869.java", "target": 0, "func": "    private static final String CIPHER_ALGORITHM = \"AES\";\nprivate static final String RANDOM_GENERATOR_ALGORITHM = \"SHA1PRNG\";\nprivate static final int RANDOM_KEY_SIZE = 128;\n\n// Encrypts string and encode in Base64\npublic static String encrypt( String password, String data ) throws Exception \n{\n    byte[] secretKey = generateKey( password.getBytes() );\n    byte[] clear = data.getBytes();\n\n    SecretKeySpec secretKeySpec = new SecretKeySpec( secretKey, CIPHER_ALGORITHM );\n    Cipher cipher = Cipher.getInstance( CIPHER_ALGORITHM );\n    cipher.init( Cipher.ENCRYPT_MODE, secretKeySpec );\n\n    byte[] encrypted = cipher.doFinal( clear );\n    String encryptedString = Base64.encodeToString( encrypted, Base64.DEFAULT );\n\n    return encryptedString;\n}\n\n// Decrypts string encoded in Base64\npublic static String decrypt( String password, String encryptedData ) throws Exception \n{\n    byte[] secretKey = generateKey( password.getBytes() );\n\n    SecretKeySpec secretKeySpec = new SecretKeySpec( secretKey, CIPHER_ALGORITHM );\n    Cipher cipher = Cipher.getInstance( CIPHER_ALGORITHM );\n    cipher.init( Cipher.DECRYPT_MODE, secretKeySpec );\n\n    byte[] encrypted = Base64.decode( encryptedData, Base64.DEFAULT );\n    byte[] decrypted = cipher.doFinal( encrypted );\n\n    return new String( decrypted );\n}\n\npublic static byte[] generateKey( byte[] seed ) throws Exception\n{\n    KeyGenerator keyGenerator = KeyGenerator.getInstance( CIPHER_ALGORITHM );\n    SecureRandom secureRandom = SecureRandom.getInstance( RANDOM_GENERATOR_ALGORITHM );\n    secureRandom.setSeed( seed );\n    keyGenerator.init( RANDOM_KEY_SIZE, secureRandom );\n    SecretKey secretKey = keyGenerator.generateKey();\n    return secretKey.getEncoded();\n}\n}\n", "idx": 762}
{"project": "cipher", "commit_id": "Snippet18283081_1330.java", "target": 0, "func": "cipher = Cipher.getInstance(\"AES\");\n", "idx": 763}
{"project": "cipher", "commit_id": "Snippet19899078_2573.java", "target": 0, "func": "import java.io.*;\nimport java.net.*;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.*;\n\n\npublic class CipherServer\n{\npublic static void main(String[] args) throws Exception \n{\n    //Start socket server\n    int port = 8001;\n    ServerSocket s = new ServerSocket();\n    s.setReuseAddress(true);\n    s.bind(new InetSocketAddress(port));\n    Socket client = s.accept();\n\n    CipherServer server = new CipherServer();\n    server.decryptMessage(client.getInputStream());\n\n    s.close();\n}\n\n\npublic void decryptMessage(InputStream inStream) throws IOException, NoSuchAlgorithmException\n{\n    try {\n\n        //Create the Data input stream from the socket\n        DataInputStream in = new DataInputStream(inStream);\n\n        //Get the key\n        ObjectInputStream file = new ObjectInputStream(new FileInputStream(\"KeyFile.xx\"));\n        SecretKey key = (SecretKey) file.readObject();\n        System.out.println(\"Key Used: \" + file.toString());\n        file.close();\n\n        //Initiate the cipher\n        //Cipher d = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");                        \n        Cipher d = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        d.init(Cipher.DECRYPT_MODE,key);\n\n        int len = in.readInt();\n        byte[] encryptedMsg = new byte[len];\n        in.readFully(encryptedMsg);         \n\n        System.out.println(\"Server - Msg Length: \" + len);\n        System.out.println(\"Server - Encrypted: \" + asHex(encryptedMsg));\n\n\n        //String demsg = new String(d.doFinal(encryptedMsg), \"UTF-8\");\n        //System.out.println(\"Decrypted Message: \" + demsg);\n        // -Print out the decrypt String to see if it matches the orignal message.\n        byte[] plainText = d.doFinal(encryptedMsg);\n        System.out.println(\"Decrypted Message: \" + new String(plainText, \"UTF-8\"));\n\n\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n\n//Function to make the bytes printable (hex format)\npublic static String asHex(byte buf[]) {\n    StringBuilder strbuf = new StringBuilder(buf.length * 2);\n    int i;\n    for (i = 0; i < buf.length; i++) {\n        if (((int) buf[i] & 0xff) < 0x10) {\n            strbuf.append(\"0\");\n        }\n        strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n    }\n    return strbuf.toString();\n}\n }\n", "idx": 764}
{"project": "cipher", "commit_id": "Snippet3193665_30682.java", "target": 0, "func": "import javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.io.*;\nimport java.util.zip.CRC32;\nimport java.util.zip.Checksum;\nimport java.util.zip.Inflater;\nimport java.util.zip.InflaterInputStream;\n\n public String EncryptData(String data, String skey) throws Exception {      \n    String encryptedData = \"\";        \n\n    try{\n       byte [] bData = data.getBytes();\n       String alg = \"AES/ECB/NoPadding\"; \n       SecretKey key = new SecretKeySpec(skey.getBytes(), alg.replaceFirst(\"/.*\", \"\")); \n       Cipher cipher = Cipher.getInstance(alg);\n       cipher.init(Cipher.ENCRYPT_MODE, key);\n       byte[] encoded = cipher.doFinal(bData);          \n       encryptedData = bytesToHex(encoded);\n    }\n    catch(Exception e){\n        throw e;\n    }\n    return encryptedData;\n}\n\n\n\npublic String DecryptData(String hexString, String skey) throws Exception {\n\n    String decryptedData = \"\";\n    try{\n       byte [] bData =  convToBinary(hexString);\n\n       String alg = \"AES/ECB/NoPadding\";            \n       SecretKey key = new SecretKeySpec(skey.getBytes(), alg.replaceFirst(\"/.*\", \"\"));           \n       Cipher cipher = Cipher.getInstance(alg);\n       cipher.init(Cipher.DECRYPT_MODE, key);\n       byte[] decoded = cipher.doFinal(bData);\n       decryptedData = new String(decoded);\n    }\n    catch(Exception e){\n        throw e;\n    }\n    return decryptedData;\n}\n", "idx": 765}
{"project": "cipher", "commit_id": "Snippet46846464_28898.java", "target": 0, "func": "public static String encrypt(String message, String key) {\n        String cipherText = null;\n\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key.getBytes(), \"AES\"));\n            byte[] bytes = cipher.doFinal(message.getBytes(\"UTF-8\"));\n\n            cipherText = Base64.encodeToString(bytes, Base64.DEFAULT);\n        } catch(Exception ex) {\n            ex.printStackTrace();\n        }\n\n        return cipherText;\n    }\n\n    public static String decrypt(String encoded, String key) {\n        String decryptString = null;\n\n        try {\n            byte[] bytes = Base64.decode(encoded, Base64.DEFAULT);\n\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key.getBytes(), \"AES\"));\n            decryptString = new String(cipher.doFinal(bytes), \"UTF-8\");\n        } catch(Exception ex) {\n            ex.printStackTrace();\n        }\n\n        return decryptString;\n    }\n", "idx": 766}
{"project": "cipher", "commit_id": "Snippet14296815_37637.java", "target": 0, "func": "import java.security.spec.AlgorithmParameterSpec;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.*;\n\npublic class RC2Encrypt\n{\n    public static void main(String args []) throws Exception\n    {\n        Scanner s=new Scanner(System.in);\n        System.out.println(\"Enter PlainTextString:\");\n        String input=s.nextLine();\n\n        System.out.println();\n        System.out.println(\"Enter 16 digit key:\");\n        String strPassword=s.nextLine();\n\n        SecretKeySpec key = new SecretKeySpec(strPassword.getBytes(), \"RC2\");\n        AlgorithmParameterSpec paramSpec = new IvParameterSpec(strPassword.getBytes());\n        Cipher cipher =  Cipher.getInstance(\"RC2\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n\n        byte[] encrypted = cipher.doFinal(input.getBytes());\n\n        String b1 = new String(encrypted);\n        System.out.println(\"Original string: \" + input);\n        System.out.println(\"Encrypted string: \" + b1);\n    }\n}\n", "idx": 767}
{"project": "cipher", "commit_id": "Snippet20417874_3058.java", "target": 0, "func": "// Encryption\npublic  String encrypt(String message) throws Exception\n{\n    String message1=Base64.encodeBytes(message.getBytes(),Base64.NO_OPTIONS);\n    String salt = SharedVariables.globalContext.getString(R.string.EncryptionKey);\n    SecretKeySpec key = new SecretKeySpec(salt.getBytes(), \"AES\");\n    Cipher c = Cipher.getInstance(\"AES\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(message1.getBytes());\n    String encrypted=Base64.encodeToString(encVal, Base64.NO_OPTIONS);\n    return encrypted;\n}\n\n//Decryption    \npublic String decrypt(String message) throws Exception\n{\n    String salt = SharedVariables.globalContext.getString(R.string.EncryptionKey);\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec key = new SecretKeySpec(salt.getBytes(), \"AES\");\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = Base64.decode(message.getBytes(), Base64.NO_OPTIONS);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    String decoded=new String(Base64.decode(decryptedValue, .Base64.NO_OPTIONS));\n    return decoded;\n}\n", "idx": 768}
{"project": "cipher", "commit_id": "Snippet21890805_4312.java", "target": 0, "func": "private static String EncryptBy16( String str, String theKey) throws Exception\n{\n\n    if ( str == null || str.length() > 16)\n    {\n        throw new NullPointerException();\n    }\n    int len = str.length();\n    byte[] pidBytes = str.getBytes();\n    byte[] pidPaddedBytes = new byte[16];\n\n    for ( int x=0; x<16; x++ )\n    {\n        if ( x<len )\n        {\n            pidPaddedBytes[x] = pidBytes[x];\n        }\n        else\n        {\n            pidPaddedBytes[x] = (byte) 0x0;\n        }\n\n    }\n\n    byte[] raw = asBinary( theKey );\n    SecretKeySpec myKeySpec = new SecretKeySpec( raw, \"AES\" );\n    Cipher myCipher = Cipher.getInstance( \"AES/ECB/NoPadding\" );\n    cipher.init( Cipher.ENCRYPT_MODE, myKeySpec );\n    byte[] encrypted = myCipher.doFinal( pidPaddedBytes );\n    return( ByteToString( encrypted ) );\n}\n\npublic static String Encrypt(String stringToEncrypt, String key) throws Exception\n{\n\n    if ( stringToEncrypt == null ){\n        throw new NullPointerException();\n    }\n    String str = stringToEncrypt;\n\n    StringBuffer result = new StringBuffer();\n    do{\n        String s = str;\n        if(s.length() > 16){\n            str = s.substring(16);\n            s = s.substring(0,16);\n        }else {\n            str = null;\n        }\n        result.append(EncryptBy16(s,key));\n    }while(str != null);\n\n    return result.toString();\n}\n", "idx": 769}
{"project": "cipher", "commit_id": "Snippet47553104_29540.java", "target": 0, "func": "    public static String decrypter(final String donnees) throws NoSuchAlgorithmException, NoSuchPaddingException,\n        InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, key);\n\n    return new String(cipher.doFinal(donnees.getBytes()));\n}\n", "idx": 770}
{"project": "cipher", "commit_id": "Snippet43192463_25334.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 771}
{"project": "cipher", "commit_id": "Snippet13343296_36880.java", "target": 0, "func": "static void encrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n// Here you read the cleartext.\nFileInputStream fis = new FileInputStream(Environment.getExternalStorageDirectory()+\"/.myapp/.private\");\n// This stream write the encrypted text. This stream will be wrapped by another stream.\nFileOutputStream fos = new FileOutputStream(Environment.getExternalStorageDirectory()+\"/.myapp/.encyrpted\");\n\n// Length is 16 byte\nSecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n// Create cipher\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, sks);\n// Wrap the output stream\nCipherOutputStream cos = new CipherOutputStream(fos, cipher);\n// Write bytes\nint b;\nbyte[] d = new byte[8];\nwhile((b = fis.read(d)) != -1) {\n    cos.write(d, 0, b);\n}\n// Flush and close streams.\ncos.flush();\ncos.close();\nfis.close();}\n", "idx": 772}
{"project": "cipher", "commit_id": "Snippet33694505_15745.java", "target": 0, "func": "public static class Upper_fragment extends Fragment {\n\n        private static final String TAG = \"PlayActivity\";\n\n        private Video vid;\n        int mSavedVideoPosition;\n        protected VideoPlayerInterface vidp;\n        private LocalSingleHttpServer mServer;\n\n\n        // to be implemented in concrete activities\n        public Cipher getCipher() throws GeneralSecurityException {\n            final Cipher c = Cipher.getInstance(\"AES\");    // NoSuchAlgorithmException, NoSuchPaddingException\n            c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(\"abcdef1234567890\".getBytes(), \"AES\"));    // InvalidKeyException\n            return c;\n        }\n\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                                 Bundle savedInstanceState) {\n            View upperView = inflater.inflate(R.layout.upper_fragment, container, false);\n\n            vidp = (VideoPlayerInterface) upperView.findViewById(R.id.vid);\n            getRTSPUrl();\n            init(getActivity().getIntent().getSerializableExtra(Const.EXTRA_DATA));\n            return upperView;\n        }\n\n\n        public void getRTSPUrl() {\n            final ProgressDialog dia = ProgressDialog\n                    .show(getActivity(), null, \"Loading...\");\n            new Thread(new Runnable() {\n\n                public void run() {\n                    runOnUiThread(new Runnable() {\n\n                        public void run() {\n                            dia.dismiss();\n                            try {\n\n                                mServer = new LocalSingleHttpServer();\n                                final Cipher c = getCipher();\n                                if (c != null) {// null means a clear video ; no need to set a decryption processing\n                                    mServer.setCipher(c);\n                                }\n                                mServer.start();\n                                String path = getPath();\n                                path = mServer.getURL(path);\n                                vidp.setVideoPath(path);\n                                vidp.play();\n\n\n                            } catch (Exception e) {\n                                startActivity(new Intent(getActivity(), MainActivity.class));\n                            }\n                        }\n                    });\n\n                }\n            }).start();\n\n\n }\n", "idx": 773}
{"project": "cipher", "commit_id": "Snippet17690898_814.java", "target": 0, "func": "final Cipher decipher = Cipher.getInstance(\"DESede/CFB/NoPadding\");", "idx": 774}
{"project": "cipher", "commit_id": "Snippet12315043_36201.java", "target": 0, "func": "KeyGenerator keygen = KeyGenerator.getInstance(\"DES\");\n        SecretKey key = keygen.generateKey(); //generate key\n        //encrypt file here first\n        byte[] plainData;\n        byte[] encryptedData;\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        FileInputStream in = new FileInputStream(mFile); //obtains input bytes from a file\n        plainData = new byte[(int)mFile.length()]; \n        in.read(plainData); //Read bytes of data into an array of bytes\n        encryptedData = cipher.doFinal(plainData); //encrypt data               \n        ByteArrayInputStream fis = new ByteArrayInputStream(encryptedData);\n        //save encrypted file to dropbox\n\n        // By creating a request, we get a handle to the putFile operation,\n        // so we can cancel it later if we want to\n      // FileInputStream fis = new FileInputStream(mFile);\n        String path = mPath + mFile.getName();\n        mRequest = mApi.putFileOverwriteRequest(path, fis, mFile.length(),\n                new ProgressListener() {\n", "idx": 775}
{"project": "cipher", "commit_id": "Snippet35318524_17247.java", "target": 0, "func": "   String strkey=\"MY KEY\";\n   SecretKeySpec key = new SecretKeySpec(strkey.getBytes(\"UTF-8\"), \"Blowfish\");\n        Cipher cipher = Cipher.getInstance(\"Blowfish\");\n        if ( cipher == null || key == null) {\n            throw new Exception(\"Invalid key or cypher\");\n        }\n        cipher.init(Cipher.ENCRYPT_MODE, key);\nString encryptedData =new String(cipher.doFinal(to_encrypt.getBytes(\"UTF-8\"));\n", "idx": 776}
{"project": "cipher", "commit_id": "Snippet20214188_2881.java", "target": 0, "func": "        package encript;\n\nimport java.math.BigInteger;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class AESencrp {\n\n    KeyGenerator gen;\n    private static final byte[] keyValue = new byte[16] ;\n\n    public AESencrp() throws NoSuchAlgorithmException {\n        this.gen = KeyGenerator.getInstance(\"AES\");\n        gen.init(128); /* 128-bit AES */\n\n        SecretKey secret = gen.generateKey();\n        byte[] keyValue = secret.getEncoded();\n        String text = String.format(\"%032X\", new BigInteger(+1, keyValue));\n        System.out.println(text);\n    }\n\n    private static final String ALGO = \"AES\";\n    /*private static final byte[] keyValue = new byte[] { 'T', 'h', 'e', 'B',\n            'e', 's', 't', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };*/\n\n    private static String toHex(final byte[] data) {\n        final StringBuilder sb = new StringBuilder(data.length * 2);\n        for (final byte b : data) {\n            sb.append(String.format(\"%02X\", b));\n        }\n        return sb.toString();\n    }\n\n    public static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encVal);\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n    }\n\n}\n", "idx": 777}
{"project": "cipher", "commit_id": "Snippet10782267_35049.java", "target": 0, "func": "SecretKeySpec skeySpec = new SecretKeySpec(y.getBytes(), \"AES\");\n\nFileInputStream fis;\nFileOutputStream fos;\nCipherOutputStream cos;\n// File you are reading from\nfis = new FileInputStream(\"/tmp/a.txt\");\n// File output\nfos = new FileOutputStream(\"/tmp/b.txt\");\n\n// Here the file is encrypted. The cipher1 has to be created.\n// Key Length should be 128, 192 or 256 bit => i.e. 16 byte\nSecretKeySpec skeySpec = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\"); \nCipher cipher1 = Cipher.getInstance(\"AES\");  \ncipher1.init(Cipher.ENCRYPT_MODE, skeySpec);\ncos = new CipherOutputStream(fos, cipher1);\n// Here you read from the file in fis and write to cos.\nbyte[] b = new byte[8];\nint i = fis.read(b);\nwhile (i != -1) {\n    cos.write(b, 0, i);\n    i = fis.read(b);\n}\ncos.flush();\n", "idx": 778}
{"project": "cipher", "commit_id": "Snippet29476049_11483.java", "target": 0, "func": "package com.androidedsoft.aesencryptor;\n\nimport android.support.v7.app.ActionBarActivity;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport android.util.Base64;\n\nimport org.apache.commons.codec.Decoder;\nimport org.apache.commons.codec.Encoder;\n\npublic class MainActivity extends ActionBarActivity {\n    public static SecretKey secretKey;\n    static Cipher cipher;\n\nButton encryptbutton;\nString plainText;\n\npublic static void main(String[] args) throws Exception {\n\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n    keyGenerator.init(128); //key is 128 bit\n    SecretKey secretKey = keyGenerator.generateKey();\n    cipher = Cipher.getInstance(\"AES\"); //sets as AES encryption type\n}\n\npublic void btnClick() {\n    encryptbutton = (Button) findViewById(R.id.encryptbutton);\n    encryptbutton.setOnClickListener(new View.OnClickListener() {\n        public void onClick(View v) {\n", "idx": 779}
{"project": "cipher", "commit_id": "Snippet18440145_1506.java", "target": 0, "func": "import java.security.MessageDigest;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class Crypto {\n    public SecretKeySpec generateSecretKey(String password) throws Exception {\n        MessageDigest shahash = MessageDigest.getInstance(\"SHA-1\");\n        byte[] key = shahash.digest();\n        key = Arrays.copyOf(key,  16);\n        return new SecretKeySpec(key, \"AES\");\n    }\n\n    public byte[] encrypt(String text, SecretKeySpec secretkey) throws Exception {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretkey);\n        return cipher.doFinal(text.getBytes());\n    }\n\n    public byte[] decrypt(byte[] encryptedtext, SecretKeySpec secretkey) throws Exception {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretkey);\n        return cipher.doFinal(encryptedtext);\n    }\n}\n", "idx": 780}
{"project": "cipher", "commit_id": "Snippet41131567_23073.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Base64;\n/**\nAes encryption\n*/\npublic class AES\n{\n\n    private static SecretKeySpec secretKey ;\n    private static byte[] key ;\n\n    private static String decryptedString;\n    private static String encryptedString;\n\n    public static void setKey(String myKey){\n\n\n        MessageDigest sha = null;\n        try {\n            key = myKey.getBytes(\"UTF-8\");\n            System.out.println(key.length);\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n            key = Arrays.copyOf(key, 16); // use only first 128 bit\n            System.out.println(key.length);\n            System.out.println(new String(key,\"UTF-8\"));\n            secretKey = new SecretKeySpec(key, \"AES\");\n\n\n        } catch (NoSuchAlgorithmException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n\n\n    }\n\n    public static String getDecryptedString() {\n        return decryptedString;\n    }\n    public static void setDecryptedString(String decryptedString) {\n        AES.decryptedString = decryptedString;\n    }\n    public static String getEncryptedString() {\n        return encryptedString;\n    }\n    public static void setEncryptedString(String encryptedString) {\n        AES.encryptedString = encryptedString;\n    }\n    public static String encrypt(String strToEncrypt)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n\n            setEncryptedString(Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))));\n\n        }\n        catch (Exception e)\n        {\n\n            System.out.println(\"Error while encrypting: \"+e.toString());\n        }\n        return null;\n    }\n    public static String decrypt(String strToDecrypt)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            setDecryptedString(new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt))));\n\n        }\n        catch (Exception e)\n        {\n\n            System.out.println(\"Error while decrypting: \"+e.toString());\n        }\n        return null;\n    }\n    public static void main(String args[])\n    {\n                final String strToEncrypt = \"My text to encrypt\";\n                final String strPssword = \"C0BAE23DF8B51807B3E17D21925FADF273A70181E1D81B8EDE6C76A5C1F1716E\";\n                AES.setKey(strPssword);\n\n                AES.encrypt(strToEncrypt.trim());\n\n                System.out.println(\"String to Encrypt: \" + strToEncrypt); \n                System.out.println(\"Encrypted: \" + AES.getEncryptedString());\n\n                final String strToDecrypt =  AES.getEncryptedString();\n                AES.decrypt(strToDecrypt.trim());\n\n                System.out.println(\"String To Decrypt : \" + strToDecrypt);\n                System.out.println(\"Decrypted : \" + AES.getDecryptedString());\n\n    }\n\n    }\n", "idx": 781}
{"project": "cipher", "commit_id": "Snippet18390409_1472.java", "target": 0, "func": "try {\n       SecureRandom secureRandom = SecureRandom.getInstance(\"SHA1PRNG\");\n       byte[] salt = new byte[10];\n       secureRandom.nextBytes(salt);\n       byte[] encryptedPassword = //some method to mix salt with plain password\n       Cipher cipher = Cipher.getInstance(\"AES\");\n       SecretKeySpec skeySpec = new SecretKeySpec(secretKey.getEncoded(), \"AES\");\n       cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n       return cipher.doFinal(encryptedPassword);\n\n     } catch (NoSuchAlgorithmException |\n              UnsupportedEncodingException |\n              NoSuchPaddingException |\n              InvalidKeyException |\n              IllegalBlockSizeException |\n              BadPaddingException ex) {\n                 //Logger...\n     }\n", "idx": 782}
{"project": "cipher", "commit_id": "Snippet30166305_12326.java", "target": 0, "func": "public class DES {\n    public static byte[] doDecryptData(byte[] OriginalData,byte[]key , int sizeKey , byte[] iv , int sizeIV)\n    {\n    byte[] masterKeyBytes =new byte[sizeKey];\n    masterKeyBytes = key;\n        byte[] ivBytes = new byte[sizeIV];\n     ivBytes = iv;\n        byte[] encipheredData=new byte[sizeIV];\n\n        try{\n\n            DESKeySpec desKeySpec = new DESKeySpec(masterKeyBytes);  \n            SecretKeyFactory desKeyFact = SecretKeyFactory.getInstance(\"DES\");\n            SecretKey s = desKeyFact.generateSecret(desKeySpec);\n            Cipher aliceCipher = Cipher.getInstance(\"DES/CBC/NoPadding\");\n            aliceCipher.init(Cipher.DECRYPT_MODE, s, new IvParameterSpec(ivBytes));\n\n            encipheredData= aliceCipher.doFinal(OriginalData);\n            return encipheredData;\n        }\n        catch(Exception e)\n            {\n                Log.e(\"error\", \"111\"+e.toString());\n            }\n        return null;\n    }\n", "idx": 783}
{"project": "cipher", "commit_id": "Snippet18886523_1802.java", "target": 0, "func": " // Cryptographic algorithm\n  private final String ALGORITHM = \"AES\";\n  //\n private final byte[] ENCRYPTION_KEY = new byte[]\n {\n        'E', 'r', ';', '|', '<', '@', 'p', 'p', 'l', '1', 'c', '@', 't', '1', '0', 'n'\n };\n\npublic byte[] encryptValue(byte[] valueToEnc) throws EncryptionException\n{\n    try\n    {\n        // Constructs a secret key from the given byte array and algorithm\n        Key key = new SecretKeySpec(ENCRYPTION_KEY, ALGORITHM);\n        // Creating Cipher object by calling getInstance() factory methods and\n        // passing ALGORITHIM VALUE = \"AES\" which is a 128-bit block cipher\n        // supporting keys of 128, 192, and 256 bits.\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        // Initialize a Cipher object with Encryption Mode and generated key\n        c.init(Cipher.ENCRYPT_MODE, key);\n        // To encrypt data in a single step, calling doFinal() methods: If we\n        // want to encrypt data in multiple steps, then need to call update()\n        // methods instead of doFinal()\n        byte[] encValue = c.doFinal(valueToEnc);\n        // Encrypting value using Apache Base64().encode method\n        byte[] encryptedByteValue = new Base64().encode(encValue);\n\n        return encryptedByteValue;\n    }\n    catch (Exception e)\n    {\n        throw new EncryptionException(e.getMessage(), e);\n    }\n}\n", "idx": 784}
{"project": "cipher", "commit_id": "Snippet35182131_17112.java", "target": 0, "func": "import java.io.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\n\npublic class Encrypt {\n\n    public static void main(String[] args) {\n\n        try {\n            SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n\n            FileOutputStream fosKey = new FileOutputStream(\"..\\\\KEY\");\n            SecretKeyFactory keyfac = SecretKeyFactory.getInstance(\"DES\");\n            DESKeySpec keyspec = (DESKeySpec) keyfac.getKeySpec(key, DESKeySpec.class);\n            fosKey.write(keyspec.getKey());\n            fosKey.close();\n\n            Cipher crypt = Cipher.getInstance(\"DES\");\n            crypt.init(Cipher.ENCRYPT_MODE, key);\n\n            FileInputStream fis = new FileInputStream(\"..\\\\File.txt\");\n            FileOutputStream fos = new FileOutputStream(\"..\\\\FileCrypted.txt\");\n            byte[] arrayBytes = new byte[8];\n            int bytesReads;\n            while ((bytesReads = fis.read(arrayBytes)) != -1) {\n                fos.write(crypt.doFinal(arrayBytes), 0, bytesReads);\n            }\n            fis.close();\n            fos.close();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 785}
{"project": "cipher", "commit_id": "Snippet25261167_7632.java", "target": 0, "func": "    private static final String AES = \"AES\";\n\n    private static String encrypt(final String strKey, final String strToEncrypt) {\n        SecretKeySpec secKeySpec = null;\n        Cipher cipher = null;\n        byte[] encrypted = null;\n        try {\n            secKeySpec = new SecretKeySpec(strKey.getBytes(), \"AES\");\n            cipher = Cipher.getInstance(AES);\n            cipher.init(Cipher.ENCRYPT_MODE, secKeySpec);\n            encrypted = cipher.doFinal(strToEncrypt.getBytes());\n\n        } catch (final Exception e) {\n            System.out.println(e);\n        }\n        return Base64.encodeBase64String(encrypted);\n    }\n", "idx": 786}
{"project": "cipher", "commit_id": "Snippet16259213_39225.java", "target": 0, "func": "Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\")", "idx": 787}
{"project": "cipher", "commit_id": "Snippet30601927_12808.java", "target": 0, "func": " package rc4_crc32;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.zip.CRC32;\npublic class RC4_CRC32 {\n    public static void main(String[] args) throws Exception{ \n        byte[] key, ciphertext;\n        CRC32 c = new CRC32();\n        javax.crypto.Cipher r;\n                 r = Cipher.getInstance(\"RC4\");\n                 key = \"1@m@L33tH@x0r!\".getBytes(\"ASCII\");\n                 SecretKeySpec rc4Key = new SecretKeySpec(key, \"RC4\");\n                 r.init(Cipher.ENCRYPT_MODE, rc4Key); \n                 ciphertext = r.update(\"Secret!\".getBytes(\"ASCII\"));                    \n                 c.update(ciphertext);                 \n                 System.out.println(\"Ciphertext = \" + ciphertext + \", and CRC = \" + c.getValue());     \n                 ciphertext[0] = (byte)0x2c;\n                 c.update(ciphertext);\n                 System.out.println(\"Now ciphertext = \" + ciphertext + \", and CRC = \" + c.getValue());\n                 c.update(ciphertext);\n                 System.out.println(\"Now ciphertext = \" + ciphertext + \", and CRC = \" + c.getValue());\n                 c.update(ciphertext);\n                 System.out.println(\"Now ciphertext = \" + ciphertext + \", and CRC = \" + c.getValue());\n                 c.update(ciphertext);\n                 System.out.println(\"Now ciphertext = \" + ciphertext + \", and CRC = \" + c.getValue());\n    }    \n}\n", "idx": 788}
{"project": "cipher", "commit_id": "Snippet41342266_23306.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport java.util.Base64;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class GenerateLogic {\n    private static SecretKeySpec secretKey;\n    private static byte[] key;\n\n    public static void setKey(String myKey) {\n        MessageDigest sha = null;\n        try {\n            key = myKey.getBytes(\"UTF-8\");\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n            key = Arrays.copyOf(key, 16);\n            secretKey = new SecretKeySpec(key, \"AES\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static String encrypt(String strToEncrypt, String secret) {\n        try {\n            setKey(secret);\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\")));\n        } catch (Exception e) {\n            System.out.println(\"Error while encrypting: \" + e.toString());\n        }\n        return null;\n    }\n\n    public static String decrypt(String strToDecrypt) {\n        try {\n            //System.out.println(\"decryptedString methods\");\n            //String secret = \"ssshhhhhhhhhhh!!!!\";\n            String secret = PasswordKey.getEncryptionKey();\n            setKey(secret);\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            //System.out.println(\"testing string values::\" + new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt))));\n            return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));\n        } catch (Exception e) {\n            System.out.println(\"Error while decrypting: \" + e.toString());\n        }\n        return null;\n    }\n\n    public static void main(String[] args) {\n        final String secretKey = \"ssshhhhhhhhhhh!!!!\";\n\n        String originalString = \"changeit\";\n        String encryptedString = GenerateLogic.encrypt(originalString, secretKey);\n        String decryptedString = GenerateLogic.decrypt(encryptedString);\n\n        System.out.println(originalString);\n        System.out.println(encryptedString);\n        System.out.println(decryptedString);\n    }\n\n}\n", "idx": 789}
{"project": "cipher", "commit_id": "Snippet38828593_20738.java", "target": 0, "func": "/**\n * AESTest.java\n * \n * @author liuyincan\n * @Time 2013-12-12 \u4e0b\u53481:25:44\n */\npublic class AES {\n\n\npublic static String generateKey(int len) {\n    try {\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        keyGen.init(len);\n        Key key = keyGen.generateKey();\n\n        return ParserStringUtils.toHexString(key.getEncoded());\n    } catch (Exception e) {\n        return null;\n    }\n}\n\n\n/**\n * \u52a0\u5bc6\n * \n * @param content\n *            \u5f85\u52a0\u5bc6\u5185\u5bb9\n * @param key\n *            \u52a0\u5bc6\u7684\u5bc6\u94a5\n * @return\n */\npublic static String encode(String content, String key) {\n    try {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        kgen.init(128, new SecureRandom(key.getBytes()));\n        SecretKey secretKey = kgen.generateKey();\n        byte[] enCodeFormat = secretKey.getEncoded();\n        SecretKeySpec secretKeySpec = new SecretKeySpec(enCodeFormat, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        byte[] byteContent = content.getBytes(\"utf-8\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n        byte[] byteRresult = cipher.doFinal(byteContent);\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < byteRresult.length; i++) {\n            String hex = Integer.toHexString(byteRresult[i] & 0xFF);\n            if (hex.length() == 1) {\n                hex = '0' + hex;\n            }\n            sb.append(hex.toUpperCase());\n        }\n        return sb.toString();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n\n/**\n * \u89e3\u5bc6\n * \n * @param content\n *            \u5f85\u89e3\u5bc6\u5185\u5bb9\n * @param key\n *            \u89e3\u5bc6\u7684\u5bc6\u94a5\n * @return\n */\npublic static String decode(String content, String key) {\n    if (content.length() < 1)\n        return null;\n    byte[] byteRresult = new byte[content.length() / 2];\n    for (int i = 0; i < content.length() / 2; i++) {\n        int high = Integer.parseInt(content.substring(i * 2, i * 2 + 1), 16);\n        int low = Integer.parseInt(content.substring(i * 2 + 1, i * 2 + 2), 16);\n        byteRresult[i] = (byte) (high * 16 + low);\n    }\n    try {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        kgen.init(128, new SecureRandom(key.getBytes()));\n        SecretKey secretKey = kgen.generateKey();\n        byte[] enCodeFormat = secretKey.getEncoded();\n        SecretKeySpec secretKeySpec = new SecretKeySpec(enCodeFormat, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n        byte[] result = cipher.doFinal(byteRresult);\n        return new String(result);\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 790}
{"project": "cipher", "commit_id": "Snippet6538736_32177.java", "target": 0, "func": "KeyGenerator generator = KeyGenerator.getInstance(\"AES/CTR/PKCS5PADDING\");\ngenerator.init(128);\nSecretKey key = generator.generateKey();\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, key);\n...\n", "idx": 791}
{"project": "cipher", "commit_id": "Snippet42416313_24448.java", "target": 0, "func": "import java.security.MessageDigest;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\npublic class Md5Encryption \n{\n    private static final String ALGORITHM = \"md5\";\n    private static final String DIGEST_STRING = \"HG58YZ3CR9\";\n    private static final String CHARSET_UTF_8 = \"utf-8\";\n    private static final String SECRET_KEY_ALGORITHM = \"DESede\";\n    private static final String TRANSFORMATION_PADDING = \"DESede/CBC/PKCS5Padding\";\n\n    /* Encryption Method */\n    public String encrypt(String message) throws Exception \n    { \n        final MessageDigest md = MessageDigest.getInstance(ALGORITHM); \n        final byte[] digestOfPassword = md.digest(DIGEST_STRING.getBytes(CHARSET_UTF_8)); \n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24); \n        for (int j = 0, k = 16; j < 8;) { \n                keyBytes[k++] = keyBytes[j++]; \n        } \n\n        final SecretKey key = new SecretKeySpec(keyBytes, SECRET_KEY_ALGORITHM); \n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]); \n        final Cipher cipher = Cipher.getInstance(TRANSFORMATION_PADDING); \n        cipher.init(Cipher.ENCRYPT_MODE, key, iv); \n\n        final byte[] plainTextBytes = message.getBytes(CHARSET_UTF_8); \n        final byte[] cipherText = cipher.doFinal(plainTextBytes); \n\n        return new String(cipherText); \n    } \n\n   /* Decryption Method */\n    public String decrypt(String message) throws Exception { \n        final MessageDigest md = MessageDigest.getInstance(ALGORITHM); \n        final byte[] digestOfPassword = md.digest(DIGEST_STRING.getBytes(CHARSET_UTF_8)); \n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24); \n        for (int j = 0, k = 16; j < 8;) { \n                keyBytes[k++] = keyBytes[j++]; \n        } \n\n        final SecretKey key = new SecretKeySpec(keyBytes, SECRET_KEY_ALGORITHM); \n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]); \n        final Cipher decipher = Cipher.getInstance(TRANSFORMATION_PADDING); \n        decipher.init(Cipher.DECRYPT_MODE, key, iv); \n\n        final byte[] plainText = decipher.update(message.getBytes()); \n\n        return new String(plainText, CHARSET_UTF_8); \n    }\n\n    public static void main(String[] args) throws Exception {\n\n\n        String text = \"TEST STRING TO ENCRYPT\";\n        String codedtext = new Md5Encryption().encrypt(text);\n//        String codedtext = \".\u00aa\u00c9\u2026U$L\u00a7U`8\u00cb\u2030\u00ad?\u00a6\u201d\u203a\u00b0\u201e\";\n        String decodedtext = new Md5Encryption().decrypt(codedtext); \n\n        System.out.println(codedtext); // this is a byte array, you'll just see a reference to an array \n        System.out.println(decodedtext); // This correctly shows \"TEST STRING TO ENCRYPT\" \n    } \n\n\n}\n", "idx": 792}
{"project": "cipher", "commit_id": "Snippet10775577_35038.java", "target": 0, "func": "private static final String ALGORITHM = \"Blowfish/CBC/PKCS5Padding\";\n\n/* now returns the IV that was used */\nprivate static byte[] encrypt(SecretKey key, \n                              InputStream is, \n                              OutputStream os) {\n    try {\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        CipherInputStream cis = new CipherInputStream(is, cipher);\n        doCopy(cis, os);\n        return cipher.getIV();\n    } catch (Exception ex) {\n        throw new RuntimeException(ex);\n    }\n}\n\nprivate static void decrypt(SecretKey key, \n                            byte[] iv, \n                            InputStream is, \n                            OutputStream os) \n{\n    try {\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        IvParameterSpec ivSpec = new IvParameterSpec(iv);\n        cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);\n        CipherInputStream cis = new CipherInputStream(is, cipher);\n        doCopy(cis, os);\n    } catch (Exception ex) {\n        throw new RuntimeException(ex);\n    }\n}\n\nprivate static void doCopy(InputStream is, OutputStream os) \nthrows IOException {\n    try {\n        byte[] bytes = new byte[4096];\n        int numBytes;\n        while ((numBytes = is.read(bytes)) != -1) {\n            os.write(bytes, 0, numBytes);\n        }\n    } finally {\n        is.close();\n        os.close();\n    }\n}\n\npublic static void main(String[] args) {\n    try {\n        String plain = \"I am very secret. Help!\";\n\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"Blowfish\");\n        SecretKey key = keyGen.generateKey();\n        byte[] iv;\n\n        InputStream in = new ByteArrayInputStream(plain.getBytes(\"UTF-8\"));\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        iv = encrypt(key, in, out);\n\n        in = new ByteArrayInputStream(out.toByteArray());\n        out = new ByteArrayOutputStream();\n        decrypt(key, iv, in, out);\n\n        String result = new String(out.toByteArray(), \"UTF-8\");\n        System.out.println(result);\n        System.out.println(plain.equals(result)); // => true\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n", "idx": 793}
{"project": "cipher", "commit_id": "Snippet32503500_14597.java", "target": 0, "func": "public String encrypt(String message) throws Exception {\n    String message1 = Base64.encodeToString(message.getBytes(), Base64.DEFAULT);\n    String salt = \"1abcdefgjijklmno\";\n    SecretKeySpec key = new SecretKeySpec(salt.getBytes(), \"AES\");\n    Cipher c = Cipher.getInstance(\"AES\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(message1.getBytes());\n    String encrypted = Base64.encodeToString(encVal, Base64.DEFAULT);\n    return encrypted;\n}\n\n//Decryption\npublic String decrypt(String message) throws Exception {\n\n    String salt = \"1abcdefgjijklmno\";\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec key = new SecretKeySpec(salt.getBytes(), \"AES\");\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = Base64.decode(message.getBytes(), Base64.DEFAULT);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    String decoded = new String(Base64.decode(decryptedValue, Base64.DEFAULT));\n    return decoded;\n}\n", "idx": 794}
{"project": "cipher", "commit_id": "Snippet11208380_35395.java", "target": 0, "func": "public static void main(String[] args) throws Exception {\n    Security.removeProvider(\"SUN\");\n    Sun sun = new Sun();\n    sun.remove(\"MessageDigest.MD5\"); //Comment and it will work !!!\n    Security.addProvider(sun);\n    Cipher ciph = Cipher.getInstance(\"AES\");                \n}   \n", "idx": 795}
{"project": "cipher", "commit_id": "Snippet46861817_28907.java", "target": 0, "func": "private String _decrypt2(String encryptText,String key)\n{\n\n    MessageDigest md = null;\n    byte[] digestOfPassword = null;\n\n    try\n    {\n        byte[] message = Base64.decode(encryptText.getBytes(\"UTF-16LE\"), Base64.DEFAULT);\n\n        /**\n         * make md5\n         */\n        md = MessageDigest.getInstance(\"md5\");\n        digestOfPassword = md.digest(key.getBytes(\"UTF-16LE\"));\n        byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        for (int j = 0, k = 16; j < 8; )\n        {\n            keyBytes[k++] = keyBytes[j++];\n        }\n\n        SecretKey secretKey = new SecretKeySpec(keyBytes, 0, 24, \"DESede\");\n        IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n        Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey, iv);\n        byte[] cipherText = cipher.doFinal(message);\n\n        return new String(cipherText, \"UTF-16LE\");\n    }\n    catch (NoSuchAlgorithmException e)\n    {\n        e.printStackTrace();\n    }\n    catch (UnsupportedEncodingException e)\n    {\n        e.printStackTrace();\n    }\n    catch (InvalidKeyException e)\n    {\n        e.printStackTrace();\n    }\n    catch (InvalidAlgorithmParameterException e)\n    {\n        e.printStackTrace();\n    }\n    catch (NoSuchPaddingException e)\n    {\n        e.printStackTrace();\n    }\n    catch (BadPaddingException e)\n    {\n        e.printStackTrace();\n    }\n    catch (IllegalBlockSizeException e)\n    {\n        e.printStackTrace();\n    }\n    return \"\";\n}\n", "idx": 796}
{"project": "cipher", "commit_id": "Snippet37701616_19672.java", "target": 0, "func": "String text = \"abc\";\nString key = \"Bar12345Bar12345\";\nKey aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, aesKey);\nbyte[] encrypted = cipher.doFinal(text.getBytes());\nBase64.Encoder encoder = Base64.getEncoder();\nString encryptedString = encoder.encodeToString(encrypted);\nSystem.out.println(encryptedString);\n", "idx": 797}
{"project": "cipher", "commit_id": "Snippet9842276_34285.java", "target": 0, "func": "package test;\n\nimport java.io.*;\nimport java.math.*;\nimport java.security.*;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\n\npublic class RCC4 {\n\n    public RCC4() {\n    }\n\n    public static void main(String[] args) throws NoSuchAlgorithmException,\n            NoSuchPaddingException, InvalidKeyException, IOException {\n        String test = \"testisperfect\";\n        System.out.println(RCC4.keyGet());\n        byte b[] = RCC4.keyGet().getBytes();\n        byte plain[] = test.getBytes();\n        byte c[] = RCC4.encrypt(plain, b);\n        byte p[] = RCC4.decrypt(c, b);\n\n        System.out.println(new String(c));\n        System.out.println(new String(p));\n    }\n\n    public static byte[] encrypt(byte[] plaintext, byte[] keyBytes) {\n        byte[] e = null;\n        try {\n            Key key = new SecretKeySpec(keyBytes, \"RC4\");\n            Cipher enCipher = Cipher.getInstance(\"RC4\");\n            enCipher.init(Cipher.ENCRYPT_MODE, key);\n            e = enCipher.doFinal(plaintext);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n        return e;\n    }\n\n    public static byte[] decrypt(byte[] ciphertext, byte[] keyBytes) {\n        byte de[] = null;\n        try {\n            Key key = new SecretKeySpec(keyBytes, \"RC4\");\n            Cipher deCipher = Cipher.getInstance(\"RC4\");\n            deCipher.init(Cipher.DECRYPT_MODE, RCC4.getKey());\n            de = deCipher.doFinal(ciphertext);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return de;\n    }\n\n    public static Key getKey() {\n        Key key = null;\n        try {\n            SecureRandom sr = new SecureRandom();\n            KeyGenerator kg = KeyGenerator.getInstance(\"RC4\");\n            kg.init(128, sr);\n            key = kg.generateKey();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return key;\n    }\n\n    public static String keyGet() {\n        Key k = RCC4.getKey();\n        byte[] b = k.getEncoded();\n        BigInteger big = new BigInteger(b);\n        String s = big.toString();\n        return s;\n    }\n}\n", "idx": 798}
{"project": "cipher", "commit_id": "Snippet42929235_25050.java", "target": 0, "func": "    private static final String Key = \"0123456789abcdef\";\n\npublic static SecretKey generateKey() throws NoSuchAlgorithmException, InvalidKeySpecException, UnsupportedEncodingException {\n    return new SecretKeySpec(Key.getBytes(\"UTF-8\"), \"AES\");\n}\n\npublic static byte[] encryptMsg(String message, SecretKey secret)\n        throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidParameterSpecException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {\n\n    Cipher cipher;\n    cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, secret);\n    return cipher.doFinal(message.getBytes(\"UTF-8\"));\n}\n\npublic static String decryptMsg(byte[] cipherText, SecretKey secret)\n        throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidParameterSpecException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException {\n\n    Cipher cipher;\n    cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, secret);\n    return new String(cipher.doFinal(cipherText), \"UTF-8\");\n}\n", "idx": 799}
{"project": "cipher", "commit_id": "Snippet16833530_171.java", "target": 0, "func": "  public static String encrypt(String plaintext)\n    throws Exception\n  {\n    Cipher c = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(sharedkey, \"DESede\"), new IvParameterSpec(sharedvector));\n    byte[] encrypted = c.doFinal(plaintext.getBytes(\"UTF-8\"));\n    return Base64.encode(encrypted);\n  }\n", "idx": 800}
{"project": "cipher", "commit_id": "Snippet22213483_4605.java", "target": 0, "func": "import java.io.*;\nimport java.security.GeneralSecurityException;\nimport java.security.spec.KeySpec;\nimport java.util.Arrays;\n\n\nimport javax.crypto.*;\nimport javax.crypto.spec.DESKeySpec;\n\npublic class CipherStreamDemo {\nprivate static final byte[] salt={\n    (byte)0xC9, (byte)0xEF, (byte)0x7D, (byte)0xFA,\n    (byte)0xBA, (byte)0xDD, (byte)0x24, (byte)0xA9\n};\nprivate Cipher cipher;\nprivate final SecretKey key;\npublic CipherStreamDemo() throws GeneralSecurityException, IOException{\n    SecretKeyFactory kf=SecretKeyFactory.getInstance(\"DES\");\n    KeySpec spec=new DESKeySpec(salt);\n    key=kf.generateSecret(spec);\n    cipher=Cipher.getInstance(\"DES\");\n}\npublic void encrypt(byte[] buf) throws IOException, GeneralSecurityException{\n    cipher.init(Cipher.ENCRYPT_MODE,key);\n    OutputStream out=new CipherOutputStream(new FileOutputStream(\"crypt.dat\"), cipher);\n    out.write(buf);\n    out.close();\n}\npublic byte[] decrypt() throws IOException, GeneralSecurityException{\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    InputStream in=new CipherInputStream(new FileInputStream(\"crypt.dat\"), cipher);\n    byte[] buf=new byte[300];\n    int bytes=in.read(buf);\n    buf=Arrays.copyOf(buf, bytes);\n    in.close();\n    return buf;\n}\npublic static void main(String[] args) {\n    try{\n        CipherStreamDemo csd=new CipherStreamDemo();\n        String pass=\"thisisasecretpassword\";\n        csd.encrypt(pass.getBytes());\n        System.out.println(new String(csd.decrypt()));\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n}\n}\n//Output: thisisasecretpass\n", "idx": 801}
{"project": "cipher", "commit_id": "Snippet26648469_8763.java", "target": 0, "func": "public class Pgm {\npublic static void main(String[] args) { \ntry {\n            KeyPairGenerator dsa =  KeyPairGenerator.getInstance(\"DSA\");\n            SecureRandom random = new SecureRandom();\n            dsa.initialize(1024, random);\n            KeyPair keypair = dsa.generateKeyPair();\n            PrivateKey privateKey = (PrivateKey) keypair.getPrivate();\n            byte[] key = \"\ufffdu\ufffd\ufffd\ufffd1\u00d9\ufffdiw&a\".getBytes();\n            Key aesKey = new SecretKeySpec(key, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            String currentDir = System.getProperty(\"user.dir\"); \n            // encrypt the text\n            cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            byte[] abc = privateKey.getEncoded();\n\n            byte[] encrypted = cipher.doFinal(abc);\n            // System.out.println(\"len=\"+encrypted.length());\n            File dir=new File(currentDir);\n            File private_file=new File(dir,\"privatekey.txt\");\n            if(!private_file.exists()){\n                private_file.createNewFile();\n            }\n            FileOutputStream fileos = new FileOutputStream(private_file); \n            ObjectOutputStream objectos = new ObjectOutputStream(fileos);\n            objectos.writeObject(encrypted);\n            objectos.close();\n            fileos.close();\n\n            File file_private = new File(dir,\"privatekey.txt\");\n            FileInputStream fileo = new FileInputStream(file_private); \n            ObjectInputStream objos = new ObjectInputStream(fileo);\n            Object obj = objos.readObject();\n            byte[] encrypted1= (byte[] )obj;\n            cipher.init(Cipher.DECRYPT_MODE, aesKey);\n            String decrypted = new String(cipher.doFinal(encrypted1));\n            if (decrypted.equals(new String(abc)))\n               System.out.println(\"true\");\n            else\n               System.out.println(\"false\");\n            Signature tosign = Signature.getInstance(\"DSA\");\n            byte[] val =  decrypted.getBytes();\n            PrivateKey privatekey1 = (PrivateKey)val;\n            tosign.initSign(privatekey1);   \n\n      }\n      catch(Exception e)\n      {\n            e.printStackTrace();\n      }\n  }\n", "idx": 802}
{"project": "cipher", "commit_id": "Snippet19899078_2572.java", "target": 0, "func": "import java.io.*;\nimport java.net.*;\nimport java.security.*;\n\nimport javax.crypto.*;\n\npublic class CipherClient\n{public static void main(String[] args) throws Exception \n{\n    try {\n        //Starts socket\n        String host = \"localhost\";\n        int port = 8001;\n        Socket s = new Socket(host, port);\n\n        //Generate a DES key.\n        KeyGenerator keygen = KeyGenerator.getInstance(\"DES\");\n        keygen.init(56, new SecureRandom());\n        SecretKey key = keygen.generateKey();           \n\n        //Store the key in a file\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"KeyFile.xx\"));\n        oos.writeObject(key);\n        oos.close();\n\n        //Start Cipher Instance and cipher the message\n        //Cipher c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");            \n        Cipher c = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        c.init(Cipher.ENCRYPT_MODE,key);\n\n        //Get string and encrypted version\n        //String message = \"The quick brown fox jumps over the lazy dog.\";\n        String message = \"12345678\";\n        byte[] encryptedMsg = c.doFinal(message.getBytes(\"UTF-8\"));\n\n        System.out.println(\"Client - Message: \" + message);\n        System.out.println(\"Client - Encrypted: \" + CipherServer.asHex(encryptedMsg));\n\n\n        //TEST DECRYPT W/ KEY FILE W/O SERVER (WORKS!)\n        //-------------------------------\n\n        //Read key from file test\n            ObjectInputStream file = new ObjectInputStream(new FileInputStream(\"KeyFile.xx\"));\n            SecretKey key2 = (SecretKey) file.readObject();\n            System.out.println(\"Key Used: \" + file.toString());\n            file.close();\n\n        //Decrypt Test\n            c.init(Cipher.DECRYPT_MODE,key2);\n            byte[] plainText = c.doFinal(encryptedMsg);\n            System.out.println(\"Decrypted Message: \" + new String(plainText));\n\n\n        //Open stream to cipher server\n        DataOutputStream os = new DataOutputStream(s.getOutputStream());\n        os.writeInt(encryptedMsg.length);\n        os.write(encryptedMsg);\n\n        os.flush();\n        os.close();\n\n        //Close socket\n        s.close();\n\n    }catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n }\n", "idx": 803}
{"project": "cipher", "commit_id": "Snippet29030035_11098.java", "target": 0, "func": "Cipher.getInstance(\"AES\");", "idx": 804}
{"project": "cipher", "commit_id": "Snippet29714229_11772.java", "target": 0, "func": "public class SecurityHelper {\n    private static final String DEFAULT_KEY = \"some-key-here\";\n    private SecretKey secretKey;\n    private PBEParameterSpec parameterSpec;\n    private Cipher cipher;\n\n    public SecurityHelper() {\n        try {\n            char[] moduleKeyChars = DEFAULT_KEY.toCharArray();\n            KeySpec keySpec = new PBEKeySpec(moduleKeyChars);\n            secretKey = SecretKeyFactory.getInstance(\n              \"PBEWithMD5AndDES\").generateSecret(keySpec);\n            parameterSpec = new PBEParameterSpec(new byte[8], 1);\n            cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String encrypt(String secret) {\n        String encrypted = null;\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey, parameterSpec);\n            byte[] stateBytes = cipher.doFinal(secret.getBytes(\"UTF-8\"));\n            encrypted = DatatypeConverter.printBase64Binary(stateBytes);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return encrypted;\n    }\n\n    public String decrypt(String encrypted) {\n        String decrypted = null;\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, secretKey, parameterSpec);\n            byte[] stringBinary = DatatypeConverter.parseBase64Binary(encrypted);\n            decrypted = new String(cipher.doFinal(stringBinary));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return decrypted;\n    }\n\n}\n", "idx": 805}
{"project": "cipher", "commit_id": "Snippet44048908_26131.java", "target": 0, "func": "XmlPullParser getXpp(InputStream is, String keyString){\nDESKeySpec ks = new DESKeySpec(keyString.getBytes(\"ASCII\"));\nSecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\nSecretKey key = skf.generateSecret(ks);\n\nCipher c = Cipher.getInstance(\"DES/CBC/PKCS7Padding\");\nc.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(keyString.getBytes(\"ASCII\")));\nCipherInputStream cis = new CipherInputStream(is, c);\n\nBufferedReader r = new BufferedReader(new InputStreamReader(cis, \"UTF-8\"));\nStringBuilder total = new StringBuilder();\nString line;\nwhile ((line = r.readLine()) != null) {\n    total.append(line).append('\\n');\n}\n\nInputStream stream = new ByteArrayInputStream(total.toString().getBytes(\"UTF-8\"));\n\nXmlPullParserFactory factory = XmlPullParserFactory.newInstance();\nfactory.setNamespaceAware(true);\nXmlPullParser xpp = factory.newPullParser();\nxpp.setInput(stream, \"UTF-8\");\nreturn xpp; \n", "idx": 806}
{"project": "cipher", "commit_id": "Snippet26692161_8817.java", "target": 0, "func": "public class JavaApplication8 {\n\n/**\n * @param args the command line arguments\n */\npublic static void main(String[] args) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, FileNotFoundException, ClassNotFoundException {\n    // TODO code application logic here\n\n    cifrarFicheiro();\n    decifrarFicheiro();\n\n}\npublic static void cifrarFicheiro() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{\n    File t1 = new File(\"t1.txt\");\n    FileInputStream Fin= new FileInputStream(t1);\n    byte[] texto= new byte[(int)t1.length()];\n    Fin.read(texto);\n    Fin.close();\n\n    SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n    Cipher cifra = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    cifra.init(Cipher.ENCRYPT_MODE, key);\n    byte[] chave = key.getEncoded();\n    byte[] texto_cifrado = cifra.doFinal(texto);\n\n    FileOutputStream fout = new FileOutputStream(\"t1_t.txt\");\n    ObjectOutputStream obj = new ObjectOutputStream(fout);\n    fout.write(texto_cifrado);\n    obj.writeObject(chave);\n    obj.close();\n    fout.close();\n\n}\npublic static void decifrarFicheiro() throws FileNotFoundException, IOException, ClassNotFoundException{\n    FileInputStream fin = new FileInputStream(\"t1_t.txt\");\n    ObjectInputStream obj = new ObjectInputStream(fin);\n\n    SecretKey chave = (javax.crypto.SecretKey)obj.readObject();\n    byte []keyCifrada = chave.getEncoded();\n    obj.close();\n\n    FileOutputStream fout = new FileOutputStream(\"t1_chave.txt\");\n    ObjectOutputStream obj1 = new ObjectOutputStream(fout);\n    obj1.writeObject(keyCifrada);\n    byte [] text = new byte[fin.available()];\n    fin.read(text);\n\n}\n\n}\n", "idx": 807}
{"project": "cipher", "commit_id": "Snippet42884397_25002.java", "target": 0, "func": "public Encryption(String key2, FileInputStream fileInputStream,\n        FileOutputStream fileOutputStream) {\n    this.key = key2;\n    this.is = fileInputStream;\n    this.os = fileOutputStream;\n}\n\npublic boolean encryption() throws Throwable {\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n      md5.update(key.getBytes());\n\n      SecretKeySpec key = new SecretKeySpec(md5.digest(), \"AES\");\n\n      cipher = Cipher.getInstance(\"AES\");\n      cipher.init(Cipher.ENCRYPT_MODE, key);\n      cipherInputStream = new CipherInputStream(is, cipher);\n\n    byte[] bytes = new byte[64];\n    int numBytes;\n    while ((numBytes = cipherInputStream.read(bytes)) != -1) {\n        os.write(bytes, 0, numBytes);\n    }\n    os.flush();\n    os.close();\n    is.close();\n    cipherInputStream.close();\n    return true;\n}\n", "idx": 808}
{"project": "cipher", "commit_id": "Snippet32615486_14731.java", "target": 0, "func": "package ngProjiect;\nimport java.security.Key;    \nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\npublic class ThreeDes {\n\nstatic IvParameterSpec iv = null;\nprivate static Key key = null;\n\npublic static void main(String[] args) throws Exception {\n            String deco = decode(\"j3YRYsmVWRnM2T2pN83tbQ==\");\n    String enco = encode(\"123456789\");\n     System.out.println(\"--:\" + deco);\n    System.out.println(\":\" + enco);\n\n}\n\npublic static String decode(String encryptText) throws Exception {\n    String v6;\n    CryptoTools();\n    Cipher v0 = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    v0.init(2, key, iv);\n    v6 = new String(v0.doFinal(Base64.decode(encryptText)), \"utf-8\");\n    return v6;\n}\n\npublic static String encode(String plainText) throws Exception {\n    String v7;\n    CryptoTools();\n    Cipher v0 = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    v0.init(1, key, iv);\n    byte[] encryptData = v0.doFinal(plainText.getBytes(\"utf-8\"));\n    v7 = Base64.encode(encryptData);\n    return v7;\n}\n\nprivate static void CryptoTools() throws Exception {\n    byte[] DESkey = { 35, 12, 37, 49, 101, 91, 14, 36 };\n    byte[] DESIV = { 19, 31, 97, 26, 10, 80, 11, 37 };\n    DESKeySpec keySpec = new DESKeySpec(DESkey);// \u8bbe\u7f6e\u5bc6\u94a5\u53c2\u6570\n    iv = new IvParameterSpec(DESIV);// \u8bbe\u7f6e\u5411\u91cf\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");// \u83b7\u5f97\u5bc6\u94a5\u5de5\u5382\n    key = keyFactory.generateSecret(keySpec);// \u5f97\u5230\u5bc6\u94a5\u5bf9\u8c61\n}\n", "idx": 809}
{"project": "cipher", "commit_id": "Snippet5769965_31794.java", "target": 0, "func": " KeyGenerator kg = KeyGenerator.getInstance(\"AES\");\nkg.init(128);\nSecretKey key = kg.generateKey();\n Cipher c = Cipher.getInstance(\"AES\");\nc.init(Cipher.ENCRYPT_MODE, key);\nFileInputStream fis;    FileOutputStream fos;    CipherOutputStream cos;\nfis = new FileInputStream(\"FileTo.encrypt\");\nfos = new FileOutputStream(\"Encrypted.file\");\n\n//write encrypted to file\ncos = new CipherOutputStream(fos, c);\nbyte[] b = new byte[16];\nint i = fis.read(b);\nwhile (i != -1) {\n    cos.write(b, 0, i);\n    i = fis.read(b);\n}\ncos.close();\n\n //write key to file\n byte[] keyEncoded = key.getEncoded();    \n FileOutputStream kos = new FileOutputStream(\"crypt.key\");\n kos.write(keyEncoded);\n kos.close();\n", "idx": 810}
{"project": "cipher", "commit_id": "Snippet39396113_21267.java", "target": 0, "func": "package org.mycompany.commons;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.NoSuchProviderException;\nimport java.util.Base64;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\n//Apache commons IO\nimport org.apache.commons.io.IOUtils;\n\n/**\n * Componente de soporte para codificar y descodificar mensajes\n * \n * @author opentrends\n *\n */\npublic final class EncryptHelper {\n\n    public static final String decrypt(final String encrypted, final String encoding)\n            throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException,\n            BadPaddingException, IOException, InvalidAlgorithmParameterException, NoSuchProviderException {\n        //Mainly UTF-8\n        Charset charset =  Charset.forName(encoding);\n\n        //Decoding binary.\n        byte[] base64CryptedMessageByteArr = Base64.getDecoder().decode(encrypted);\n\n        //Init of descipher\n        Cipher desCipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        AlgorithmParameterSpec ivSpec = new IvParameterSpec(new byte[8]);\n        desCipher.init(Cipher.DECRYPT_MODE, generateSecretKey(charset),ivSpec);\n\n        //Decrypting binary\n        byte[] byteDecryptedTextByteArr = desCipher.doFinal(base64CryptedMessageByteArr);\n        String clearText = new String(byteDecryptedTextByteArr, encoding);\n        return clearText;\n    }\n\n\n\n\nprivate final static Key generateSecretKey(Charset charset) throws IOException{     \n            InputStream secretKeyFile = RACEEncrypter.class.getResourceAsStream(\"/DESedeRACE.key\");\n        InputStreamReader secretKeyReader = new InputStreamReader(secretKeyFile);\n        byte[] scretKeyByteArr = IOUtils.toByteArray(secretKeyReader);\n\n        try {\n            SecretKeyFactory factory = SecretKeyFactory.getInstance(\"DESede\");\n            SecretKey key = factory.generateSecret(new DESedeKeySpec(scretKeyByteArr));\n            return key;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }           \n        }       \n    }\n", "idx": 811}
{"project": "cipher", "commit_id": "Snippet43581720_25734.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport java.util.Base64;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AES {\n\n    private static SecretKeySpec secretKey;\n    private static byte[] key;\n\n    public static void setKey(String myKey) \n    {\n        MessageDigest sha = null;\n        try {\n            key = myKey.getBytes(\"UTF-8\");\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n            key = Arrays.copyOf(key, 16); \n            secretKey = new SecretKeySpec(key, \"AES\");\n        } \n        catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } \n        catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static String encrypt(String strToEncrypt, String secret) \n    {\n        try\n        {\n            setKey(secret);\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\")));\n        } \n        catch (Exception e) \n        {\n            System.out.println(\"Error while encrypting: \" + e.toString());\n        }\n        return null;\n    }\n\n    public static String decrypt(String strToDecrypt, String secret) \n    {\n        try\n        {\n            setKey(secret);\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));\n        } \n        catch (Exception e) \n        {\n            System.out.println(\"Error while decrypting: \" + e.toString());\n        }\n        return null;\n    }\n}\n\n\npublic static void main(String[] args) \n{\n    final String secretKey = \"ssshhhhhhhhhhh!!!!\";\n\n    String originalString = \"howtodoinjava.com\";\n    String encryptedString = AES.encrypt(originalString, secretKey) ;\n    String decryptedString = AES.decrypt(encryptedString, secretKey) ;\n\n    System.out.println(originalString);\n    System.out.println(encryptedString);\n    System.out.println(decryptedString);\n}\n", "idx": 812}
{"project": "cipher", "commit_id": "Snippet13518881_37081.java", "target": 0, "func": "String key = \"test\";\nString in = \"ijzLe/2WgbaP+n3YScQSgQ==\";\n\nSecretKeySpec skeySpec = new SecretKeySpec(md5(key).getBytes(), \"AES\");\n\nCipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\ncipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\nbyte[] encryptedByteArray = Base64.decode(in.getBytes(),0);\nbyte[] decryptedByteArray = cipher.doFinal(encryptedByteArray);\nString decryptedData = new String(Base64.decode(decryptedByteArray, 0));\n\nLog.v(\"NOTE\",\"Data: \"+decryptedData);\n", "idx": 813}
{"project": "cipher", "commit_id": "Snippet22861505_5234.java", "target": 0, "func": "import org.bouncycastle.util.encoders.Hex;\n\npublic class BadBlowfish {\n        private static SecretKey createKey(String theKey) {\n        final byte[] keyData = theKey.getBytes(StandardCharsets.US_ASCII);\n        final byte[] paddedKeyData = halfPadPKCS7(keyData, 8);\n        SecretKey secret = new SecretKeySpec(paddedKeyData, \"Blowfish\");\n        return secret;\n    }\n\n    private static byte[] halfUnpadPKCS7(final byte[] paddedPlaintext, int blocksize) {\n        int b = paddedPlaintext[paddedPlaintext.length - 1] & 0xFF;\n        if (b > 0x07) {\n            return paddedPlaintext.clone();\n        }\n        return Arrays.copyOf(paddedPlaintext, paddedPlaintext.length - b);\n    }\n\n    private static byte[] halfPadPKCS7(final byte[] plaintext, int blocksize) {\n        if (plaintext.length % blocksize == 0) {\n            return plaintext.clone();\n        }\n\n        int newLength = (plaintext.length / blocksize + 1) * blocksize;\n        int paddingLength = newLength - plaintext.length;\n\n        final byte[] paddedPlaintext = Arrays.copyOf(plaintext, newLength);\n        for (int offset = plaintext.length; offset < newLength; offset++) {\n            paddedPlaintext[offset] = (byte) paddingLength;\n        }\n        return paddedPlaintext;\n    }\n\n    public static void main(String[] args) throws Exception {\n        Cipher cipher = Cipher.getInstance(\"Blowfish/ECB/NoPadding\");\n        SecretKey key = createKey(\"123456781234567\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] plaintextData = cipher.doFinal(Hex.decode(\"085585C60B3D23257763E6D8BB0A0891\"));\n        byte[] unpaddedPlaintextData = halfUnpadPKCS7(plaintextData, cipher.getBlockSize());\n\n        String plaintextHex = Hex.toHexString(unpaddedPlaintextData);\n        System.out.println(plaintextHex);\n        String plaintext = new String(unpaddedPlaintextData, StandardCharsets.UTF_8);\n        System.out.println(plaintext);\n    }\n}\n", "idx": 814}
{"project": "cipher", "commit_id": "Snippet27916069_10080.java", "target": 0, "func": "String myKey = \"dfslkskfs\";\nMessageDigest sha = null;\nkey = myKey.getBytes(\"UTF-8\");\nsha = MessageDigest.getInstance(\"SHA-1\");\nkey = sha.digest(key);\nkey = Arrays.copyOf(key, 16); // use only first 128 bit\nsecretKey = new SecretKeySpec(key, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);\nbyte[]   bytesEncoded = Base64.encodeBase64(cipher.doFinal(json\n        .getBytes(\"UTF-8\")));\njsontext =  new String(bytesEncoded );\n", "idx": 815}
{"project": "cipher", "commit_id": "Snippet35845302_17718.java", "target": 0, "func": "String firstTen = data.substring(0, 10);\nbyte[] decodedBytes = Base64.decode(firstTen, Base64.DEFAULT);\nSecretKeySpec key = new SecretKeySpec(decodedBytes, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, key);\nbyte[] original = cipher.doFinal(Message_to_Decrypt, Base64.DEFAULT));\n", "idx": 816}
{"project": "cipher", "commit_id": "Snippet37955890_19986.java", "target": 0, "func": "   SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(),\n    \"AES\");\n   Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n   cipher.init(1, secretKeySpec);\n\n   byte[] aBytes = cipher.doFinal(inputString.getBytes());\n", "idx": 817}
{"project": "cipher", "commit_id": "Snippet23186213_5525.java", "target": 0, "func": "            String poem = \"abcdef ghijkl\";\n           byte[] poem_b = poem.getBytes(\"UTF-8\");\n           Cipher c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n           c.init(Cipher.ENCRYPT_MODE, aliceDesKey);\n           byte[] coded = new byte[16];\n\n\n          coded = c.doFinal(poem_b);\n          String codedbyte= new BASE64Encoder().encodeBuffer(coded);\n\n\n\n\n          Path path_e = Paths.get(\"/poem_encrypted.txt\");\n    PrintWriter fout;\n\n    fout = new PrintWriter(\"C://Users//Ankita//Desktop//poem_encrypted.txt\");\n\n    fout.println(codedbyte);\n    fout.close();\n    System.out.println(\"File coded.\");\n\n    }\n", "idx": 818}
{"project": "cipher", "commit_id": "Snippet43158095_25298.java", "target": 0, "func": "public static byte[] generateKey(String password) throws Exception\n{\n    byte[] keyStart = password.getBytes(\"UTF-8\");\n\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n    sr.setSeed(keyStart);\n    kgen.init(128, sr);\n    SecretKey skey = kgen.generateKey();\n    return skey.getEncoded();\n}\n\n    public static byte[] encodeFile(byte[] key, byte[] fileData) throws Exception\n    {\n\n        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encrypted = cipher.doFinal(fileData);\n\n        return encrypted;\n    }\n\n    public static byte[] decodeFile(byte[] key, byte[] fileData) throws Exception\n    {\n        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        byte[] decrypted = cipher.doFinal(fileData);\n\n        return decrypted;\n    }\n", "idx": 819}
{"project": "cipher", "commit_id": "Snippet18253432_1280.java", "target": 0, "func": "        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"Blowfish\");\n        SecretKey secretKey = keyGenerator.generateKey();\n        Cipher cipher = Cipher.getInstance(\"Blowfish\"); \n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        String input = \"password\";\n        byte encrypted[] = cipher.doFinal(input.getBytes());\n        String s = new String(encrypted);\n        System.out.println(s);\n", "idx": 820}
{"project": "cipher", "commit_id": "Snippet22157056_4565.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport javax.crypto.*;\nimport java.security.*;\nimport java.util.Arrays;\nimport javax.crypto.spec.*;\n\npublic class AESCrypto2 {\n\n    private Cipher AEScipher;\n    private KeyGenerator AESgen;\n    private SecretKeySpec AESkey;\n    private SecretKeySpec decodeKey;\n    private byte[] cipherData;\n    private String msg;\n\n    public static void main(String[] args) {\n        try {\n            AESCrypto2 a = new AESCrypto2();\n            a.encrypt(\"Hello!\");\n            a.decrypt(a.getCipherData(), a.getKey());\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        } catch (NoSuchPaddingException ex) {\n            ex.printStackTrace();\n        } catch (InvalidKeyException ex) {\n            ex.printStackTrace();\n        } catch (UnsupportedEncodingException ex) {\n            ex.printStackTrace();\n        } catch (IllegalBlockSizeException ex) {\n            ex.printStackTrace();\n        } catch (BadPaddingException ex) {\n            ex.printStackTrace();\n        }\n\n    }\n\n    public AESCrypto2() throws NoSuchAlgorithmException,\n            NoSuchPaddingException, UnsupportedEncodingException {\n        AESgen = KeyGenerator.getInstance(\"AES\");\n        AESgen.init(128);\n        AESkey = (SecretKeySpec) AESgen.generateKey();\n        decodeKey = new SecretKeySpec(AESkey.getEncoded(), \"AES\");\n        AEScipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n    }\n\n    public AESCrypto2(String msg) throws NoSuchAlgorithmException,\n            NoSuchPaddingException, InvalidKeyException,\n            UnsupportedEncodingException, IllegalBlockSizeException,\n            BadPaddingException {\n        this();\n        encrypt(msg);\n    }\n\n    public byte[] encrypt(String msg) throws NoSuchAlgorithmException,\n            InvalidKeyException, UnsupportedEncodingException,\n            IllegalBlockSizeException, BadPaddingException,\n            NoSuchPaddingException {\n        AEScipher.init(Cipher.ENCRYPT_MODE, AESkey);\n        cipherData = AEScipher.doFinal(handleString(msg.getBytes(\"UTF-8\")));\n\n        this.msg = msg;\n        return cipherData;\n    }\n\n    public String decrypt(byte[] enocdedData, SecretKeySpec decodeKey)\n            throws InvalidKeyException, IllegalBlockSizeException,\n            BadPaddingException, UnsupportedEncodingException,\n            NoSuchAlgorithmException, NoSuchPaddingException {\n        AEScipher.init(Cipher.DECRYPT_MODE, decodeKey);\n        byte[] decryptedData = AEScipher.doFinal(enocdedData);\n        String result = new String(decryptedData, \"UTF-8\");\n        System.out.println(result);\n        return result;\n    }\n\n    public byte[] getCipherData() {\n        return cipherData;\n    }\n\n    public String getDecryptedMsg() {\n        return msg;\n    }\n\n\n    public SecretKeySpec getKey() {\n        return decodeKey;\n    }\n\n    // AEScipher requires that 16 divides the length of b\n    public static byte[] handleString(byte[] b)\n            throws UnsupportedEncodingException {\n        byte[] temp = b;\n        if (temp.length % 16 != 0) {\n            byte[] byteMsg = Arrays.copyOf(temp, temp.length + 16\n                    - (temp.length % 16));\n            return byteMsg;\n        }\n        return temp;\n    }\n\n    public static String byteToHex(byte[] msg) throws UnsupportedEncodingException {\n        return Hex.encodeHexString(msg);\n    }\n\n    public static byte[] hexToByte(String msg) throws DecoderException {\n        return Hex.decodeHex(msg);\n    }\n\n}\n", "idx": 821}
{"project": "cipher", "commit_id": "Snippet6429246_32123.java", "target": 0, "func": "String getDecodedString(String key,String encodedValue,SupportedEncryptionAlgorithm algoInfo) \n{\n    Cipher cipher = getCipherInstancenew(algoInfo, key,Cipher.DECRYPT_MODE);\n    try\n    {\n        byte[] dec = new sun.misc.BASE64Decoder().decodeBuffer(encodedValue);\n\n        int ctLength = cipher.getOutputSize(dec.length);\n        byte[] plainText = new byte[cipher.getOutputSize(ctLength)];\n\n        int ptLength = cipher.update(dec, 0, ctLength, plainText, 0);\n        ptLength += cipher.doFinal(plainText, ptLength);\n\n        return null; \n    }\n    catch (IllegalBlockSizeException e)\n    {\n        LoggerFactory.getLogger(EncryptionHelper.class).error(\"Security Alert\",e);\n    }\n    catch (BadPaddingException e)\n    {\n        LoggerFactory.getLogger(EncryptionHelper.class).error(\"Security Alert\",e);\n    }\n    return null;\n}\n\npublic static byte[] stringToBytes(String s) {\n    byte[] b2 = new BigInteger(s, 36).toByteArray();\n    return Arrays.copyOfRange(b2, 1, b2.length);\n}\n\npublic static Cipher getCipherInstancenew(SupportedEncryptionAlgorithm algoInfo,String keyString,int mode) throws IOException\n{\n    byte[] decodedBytes;\n    Cipher cipher=null;      \n    try\n    {\n        decodedBytes = getBase64FromHEX(keyString).getBytes();\n        SecretKeySpec skeySpec = new SecretKeySpec(decodedBytes, \"AES\");\n        Security.addProvider(new BouncyCastleProvider());   \n        cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"BC\");\n        cipher.init(mode, skeySpec );\n    }\n    catch (java.security.GeneralSecurityException e)\n    {\n        /*Strictly no logging as it is security class \n         *  There seems to be some issue with the Keys so alert it */\n         //LoggerFactory.getLogger(EncryptionHelper.class).error(\"Security Alert\",e);\n         throw new IOException(\"GetCipherInstance does not exsists\");\n    }\n\n    return cipher;\n\n}\n\npublic static String getBase64FromHEX(String input) {\n\n    byte barr[] = new byte[16];\n    int bcnt = 0;\n    for (int i = 0; i < 32; i += 2) {\n        char c1 = input.charAt(i);\n        char c2 = input.charAt(i + 1);\n        int i1 = intFromChar(c1);\n        int i2 = intFromChar(c2);\n\n        barr[bcnt] = 0;\n        barr[bcnt] |= (byte) ((i1 & 0x0F) << 4);\n        barr[bcnt] |= (byte) (i2 & 0x0F);\n        bcnt++;\n    }\n\n    BASE64Encoder encoder = new BASE64Encoder();\n    return encoder.encode(barr);\n}\n\nprivate static int intFromChar(char c) {\n    char[] carr = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n\n    char clower = Character.toLowerCase(c);\n    for (int i = 0; i < carr.length; i++) {\n        if (clower == carr[i]) {\n            return i;\n        }\n    }\n\n    return 0;\n}\n", "idx": 822}
{"project": "cipher", "commit_id": "Snippet23795537_6101.java", "target": 0, "func": " package com.infovale.cripto;\n\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.math.BigInteger;\n import java.util.Arrays;\n\n import javax.crypto.Cipher;\n import javax.crypto.CipherInputStream;\n import javax.crypto.CipherOutputStream;\n import javax.crypto.KeyGenerator;\n import javax.crypto.SecretKey;\n import javax.crypto.spec.SecretKeySpec;\n\n import android.content.Context;\n\n public class AES extends Cripto {\n\npublic static String encrypt(Context c, String nomeArquivo) {\n    String caminhoArquivoPuro = new _Path().getPathFilePure() + \"/\"\n            + nomeArquivo;\n    String caminhoArquivoCriptografado = new _Path().getPathFileCripto()\n            + \"/\" + nomeArquivo;\n\n    String key = null;\n    ;\n\n    try {\n        FileInputStream fis = new FileInputStream(new File(\n                caminhoArquivoPuro));\n        File outfile = new File(caminhoArquivoCriptografado);\n\n        int read;\n        if (!outfile.exists())\n            outfile.createNewFile();\n\n        FileOutputStream fos = new FileOutputStream(outfile);\n        FileInputStream encfis = new FileInputStream(outfile);\n\n        Cipher encipher = Cipher.getInstance(\"AES\");\n\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecretKey skey = kgen.generateKey();\n        encipher.init(Cipher.ENCRYPT_MODE, skey);\n        CipherInputStream cis = new CipherInputStream(fis, encipher);\n\n        key = bytesToString(skey.getEncoded());\n\n        byte[] b = stringToBytes(key);\n\n        while ((read = cis.read()) != -1) {\n            fos.write((char) read);\n            fos.flush();\n        }\n        fos.close();\n\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        entityFiles file = new entityFiles();\n\n        file.setCaminhoArquivoPuro(caminhoArquivoPuro);\n        file.setCaminhoArquivoCriptografado(caminhoArquivoCriptografado);\n        file.setKeyArquivo(key);\n        file.setNomeArquivo(nomeArquivo);\n\n        ArquivoDataSource datasource = new ArquivoDataSource(c);\n\n        datasource.open();\n\n        file = datasource.createRegistro(file);\n\n        datasource.close();\n    }\n\n    return key;\n}\n\npublic static void decrypt(Context c, String nomeArquivo, String key) {\n\n    String caminhoArquivoPuro = new _Path().getPathFileCripto() + \"/\"\n            + nomeArquivo;\n    String caminhoArquivoCriptografado = new _Path().getPathFileDescripto()\n            + \"/\" + nomeArquivo;\n\n    try {\n        FileInputStream fis = new FileInputStream(new File(\n                caminhoArquivoPuro));\n        File outfile = new File(caminhoArquivoPuro);\n\n        int read;\n        if (!outfile.exists()) {\n            outfile.createNewFile();\n        }\n\n        File decfile = new File(caminhoArquivoCriptografado);\n\n        if (!decfile.exists()) {\n            decfile.createNewFile();\n        }\n\n        FileInputStream encfis = new FileInputStream(outfile);\n        FileOutputStream decfos = new FileOutputStream(decfile);\n\n        Cipher decipher = Cipher.getInstance(\"AES\");            \n\n\n\n        SecretKey originalKey = new SecretKeySpec(stringToBytes(key), 0,\n                stringToBytes(key).length, \"AES\");\n\n\n        decipher.init(Cipher.DECRYPT_MODE, originalKey);\n        CipherOutputStream cos = new CipherOutputStream(decfos, decipher);\n\n        while ((read = encfis.read()) != -1) {\n            cos.write(read);\n            cos.flush();\n        }\n        cos.close();\n\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n\npublic static String bytesToString(byte[] b) {\n    byte[] b2 = new byte[b.length + 1];\n    b2[0] = 1;\n    System.arraycopy(b, 0, b2, 1, b.length);\n    return new BigInteger(b2).toString(36);\n}\n\npublic static byte[] stringToBytes(String s) {\n    byte[] b2 = new BigInteger(s, 36).toByteArray();\n    return Arrays.copyOfRange(b2, 1, b2.length);\n}\n\n }\n", "idx": 823}
{"project": "cipher", "commit_id": "Snippet1624353_29929.java", "target": 0, "func": "Cipher cip = Cipher.getInstance(\"DES\",\"IBMJCE\")\n", "idx": 824}
{"project": "cipher", "commit_id": "Snippet14160507_37520.java", "target": 0, "func": "Cipher.getInstance(\"DESede/CBC/NoPadding\");\n", "idx": 825}
{"project": "cipher", "commit_id": "Snippet8468799_33190.java", "target": 0, "func": "// requires commons-io and commons-codec\npublic void testDecryption() throws Exception {\n    File encryptedFile = new File(\"encrypted.txt\");\n    String password = \"secret\";\n\n    byte[] base64EncryptedBytes = FileUtils.readFileToByteArray(encryptedFile);\n    byte[] encryptedBytes = new Base64().decode(base64EncryptedBytes);\n\n    SecretKeySpec blowfishKey = new SecretKeySpec(password.getBytes(\"ASCII\"), \"Blowfish\");\n    Cipher blowfishCipher = Cipher.getInstance(\"Blowfish/ECB/NoPadding\");\n    blowfishCipher.init(Cipher.DECRYPT_MODE, blowfishKey);\n    byte[] decryptedContent = blowfishCipher.doFinal(encryptedBytes);\n\n    System.out.println(new String(decryptedContent));\n}\n", "idx": 826}
{"project": "cipher", "commit_id": "Snippet25533183_7865.java", "target": 0, "func": "    import java.security.SecureRandom;\n\n    import javax.crypto.Cipher;\n    import javax.crypto.KeyGenerator;\n    import javax.crypto.SecretKey;\n    import javax.crypto.spec.SecretKeySpec;\n\n    import android.util.Base64;\n\n    public class StringCryptor \n    {\n        private static final String CIPHER_ALGORITHM = \"AES\";\n        private static final String RANDOM_GENERATOR_ALGORITHM = \"SHA1PRNG\";\n        private static final int RANDOM_KEY_SIZE = 128;\n\n        // Encrypts string and encode in Base64\n        public static String encrypt( String password, String data ) throws Exception \n        {\n            byte[] secretKey = generateKey( password.getBytes() );\n            byte[] clear = data.getBytes();\n\n            SecretKeySpec secretKeySpec = new SecretKeySpec( secretKey, CIPHER_ALGORITHM );\n            Cipher cipher = Cipher.getInstance( CIPHER_ALGORITHM );\n            cipher.init( Cipher.ENCRYPT_MODE, secretKeySpec );\n\n            byte[] encrypted = cipher.doFinal( clear );\n            String encryptedString = Base64.encodeToString( encrypted, Base64.DEFAULT );\n\n            return encryptedString;\n        }\n\n        // Decrypts string encoded in Base64\n        public static String decrypt( String password, String encryptedData ) throws Exception \n        {\n            byte[] secretKey = generateKey( password.getBytes() );\n\n            SecretKeySpec secretKeySpec = new SecretKeySpec( secretKey, CIPHER_ALGORITHM );\n            Cipher cipher = Cipher.getInstance( CIPHER_ALGORITHM );\n            cipher.init( Cipher.DECRYPT_MODE, secretKeySpec );\n\n            byte[] encrypted = Base64.decode( encryptedData, Base64.DEFAULT );\n            byte[] decrypted = cipher.doFinal( encrypted );\n\n            return new String( decrypted );\n        }\n\n        public static byte[] generateKey( byte[] seed ) throws Exception\n        {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance( CIPHER_ALGORITHM );\n            SecureRandom secureRandom = SecureRandom.getInstance( RANDOM_GENERATOR_ALGORITHM );\n            secureRandom.setSeed( seed );\n            keyGenerator.init( RANDOM_KEY_SIZE, secureRandom );\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        }\n    }\n", "idx": 827}
{"project": "cipher", "commit_id": "Snippet38654022_20586.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\nimport java.security.MessageDigest;\n\npublic class JavaCipher {\n\n    private SecretKeySpec secretKey;\n\n    private JavaCipher(String secret) throws Exception {\n        MessageDigest sha = MessageDigest.getInstance(\"SHA-256\");\n        byte[] digest = sha.digest(secret.getBytes(\"UTF-8\"));\n        secretKey = new SecretKeySpec(digest, \"AES\");\n    }\n\n    private String encrypt(String sSrc) throws Exception {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] encrypted = cipher.doFinal(sSrc.getBytes());\n        return DatatypeConverter.printHexBinary(encrypted).toLowerCase();\n    }\n\n    public static void main(String[] args) throws Exception {  \n        JavaCipher cipher = new JavaCipher(\"some random key\");\n\n        // print d013acccb5d191a00898ac87057383ff\n        System.out.println(cipher.encrypt(\"abcdefg\"));\n    }\n}\n", "idx": 828}
{"project": "cipher", "commit_id": "Snippet44407700_26460.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class TestFileEncryption {\n\n    private static final String ALGORITHM = \"Blowfish\";\n    private static String keyString = \"DesireSecretKey\";\n\n    public static void encrypt(File inputFile, File outputFile)\n            throws Exception {\n        doCrypto(Cipher.ENCRYPT_MODE, inputFile, outputFile);\n        System.out.println(\"File encrypted successfully!\");\n    }\n\n    public static void decrypt(File inputFile, File outputFile)\n            throws Exception {\n        doCrypto(Cipher.DECRYPT_MODE, inputFile, outputFile);\n        System.out.println(\"File decrypted successfully!\");\n    }\n\n    private static void doCrypto(int cipherMode, File inputFile,\n            File outputFile) throws Exception {\n\n        Key secretKey = new SecretKeySpec(keyString.getBytes(), ALGORITHM);\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(cipherMode, secretKey);\n\n        FileInputStream inputStream = new FileInputStream(inputFile);\n        byte[] inputBytes = new byte[(int) inputFile.length()];\n        inputStream.read(inputBytes);\n\n        byte[] outputBytes = cipher.doFinal(inputBytes);\n\n        FileOutputStream outputStream = new FileOutputStream(outputFile);\n        outputStream.write(outputBytes);\n\n        inputStream.close();\n        outputStream.close();\n\n    }\n\n    public static void main(String[] args) {\n\n        File inputFile = new File(\"F:/java/movie.mp4\");\n        File encryptedFile = new File(\"F:/java/file.encrypted\");\n\n        File decryptedFile = new File(\"F:/java/javamovie.mp4\");\n\n        try {\n            TestFileEncryption.encrypt(inputFile, encryptedFile);\n            TestFileEncryption.decrypt(encryptedFile, decryptedFile);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n\n    }\n}\n", "idx": 829}
{"project": "cipher", "commit_id": "Snippet17925572_984.java", "target": 0, "func": "package crypto;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class Crypto {\n    public static byte[] encrypt(String message) throws Exception\n    {\n        String symmetricKey = \"25Ae1f1711%z1 )1\";\n        SecretKeySpec aesKey = new SecretKeySpec(symmetricKey.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        return cipher.doFinal(message.getBytes());\n    }\n    public static String decrypt(byte[] encryptedMessage) throws Exception\n    {\n        String symmetricKey = \"25Ae1f1711%z1 )1\";\n        SecretKeySpec aesKey = new SecretKeySpec(symmetricKey.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        return new String(cipher.doFinal(encryptedMessage));\n    }\n}\n", "idx": 830}
{"project": "cipher", "commit_id": "Snippet37555979_19490.java", "target": 0, "func": "public static String decrypt(String pValor) throws UnsupportedEncodingException {\n\n    byte vBytesDecodificados[] = null;\n\n    try {\n\n        KeySpec vClave = new DESKeySpec(\"MyKey\".getBytes(\"UTF-8\"));\n        SecretKey vClaveSecreta = SecretKeyFactory.getInstance(\"DES\").generateSecret(vClave);\n\n        IvParameterSpec iv = new IvParameterSpec(Hex.decodeHex(\"1234567890ABCDEF\".toCharArray()));\n\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, vClaveSecreta, iv);\n\n        vBytesDecodificados = cipher.doFinal(Base64.decodeBase64(pValor.getBytes()));\n\n    } catch (Exception e) {\n\n    }\n\n    return new String(vBytesDecodificados, \"UTF-8\");\n}\n\npublic static String encrypt(String pValor) throws UnsupportedEncodingException {\n\n    byte vBytesCodificados[] = null;\n\n    try {\n\n        KeySpec vClave = new DESKeySpec(\"MyKey\".getBytes(\"UTF-8\"));\n        SecretKey vClaveSecreta = SecretKeyFactory.getInstance(\"DES\").generateSecret(vClave);\n\n        IvParameterSpec iv = new IvParameterSpec(Hex.decodeHex(\"1234567890ABCDEF\".toCharArray()));\n\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, vClaveSecreta, iv);\n\n        byte[] utf8 = pValor.getBytes(\"UTF8\");\n        byte[] enc = cipher.doFinal(utf8);\n        vBytesCodificados = Base64.encodeBase64(enc);\n\n    } catch (Exception e) {\n\n    }\n\n    return new String(vBytesCodificados, \"UTF-8\");\n}\n", "idx": 831}
{"project": "cipher", "commit_id": "Snippet37621120_19573.java", "target": 0, "func": "final File file = new File(path, fileName);\nKey key = new SecretKeySpec(secret, \"AES\");\nfinal Cipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, key);\ntry (FileInputStream fis = new FileInputStream(file); CipherInputStream cis = new CipherInputStream(fis, cipher); ZipInputStream zis = new ZipInputStream(new BufferedInputStream(cis))) {\n                ZipEntry entry;\n                while ((entry = zis.getNextEntry()) != null) {\n\n                    List<String> lines;\n                    try ( ByteArrayOutputStream output = new ByteArrayOutputStream(2048)) {\n                        int len;\n                        while ((len = zis.read(buffer)) > 0) {\n                            output.write(buffer, 0, len);\n                        }\n                        try (ByteArrayInputStream bais = new ByteArrayInputStream(output.toByteArray()); Reader reader = new InputStreamReader(bais)) {\n                            lines = readFile(reader);\n                        }\n                    }\n                    //Do something with lines of the file...\n\n                }\n\n            }\n", "idx": 832}
{"project": "cipher", "commit_id": "Snippet31152186_13303.java", "target": 0, "func": "public class STokenUtils {\n  private static final String CIPHER_INSTANCE_NAME = \"AES/ECB/PKCS5Padding\";\n\n  public static final String createSToken(String siteSecret) {\n    String sessionId = UUID.randomUUID().toString();\n    String jsonToken = createJsonToken(sessionId);\n    return encryptAes(jsonToken, siteSecret);\n  }\n\n  private static final String createJsonToken(String sessionId) {\n    JsonObject obj = new JsonObject();\n    obj.addProperty(\"session_id\", sessionId);\n    obj.addProperty(\"ts_ms\", System.currentTimeMillis());\n    return new Gson().toJson(obj);\n  }\n\n  private static String encryptAes(String input, String siteSecret) {\n    try {\n      SecretKeySpec secretKey = getKey(siteSecret);\n      Cipher cipher = Cipher.getInstance(CIPHER_INSTANCE_NAME);\n      cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n      return BaseEncoding.base64Url().omitPadding().encode(cipher.doFinal(input.getBytes(\"UTF-8\")));\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return null;\n  }\n\n  private static String decryptAes(String input, String key) throws Exception {\n    SecretKeySpec secretKey = getKey(key);\n    Cipher cipher = Cipher.getInstance(CIPHER_INSTANCE_NAME);\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\n    return new String(cipher.doFinal(\n        BaseEncoding.base64Url().omitPadding().decode(input)), \"UTF-8\");\n  }\n\n  private static SecretKeySpec getKey(String siteSecret){\n    try {\n      byte[] key = siteSecret.getBytes(\"UTF-8\");\n      key = Arrays.copyOf(MessageDigest.getInstance(\"SHA\").digest(key), 16);\n      return new SecretKeySpec(key, \"AES\");\n    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n      e.printStackTrace();\n    }\n    return null;\n  }\n}\n", "idx": 833}
{"project": "cipher", "commit_id": "Snippet35780454_17628.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, \"DESede\"));\nbyte[] ciphertext = c.doFinal(plaintext);\n", "idx": 834}
{"project": "cipher", "commit_id": "Snippet16259118_39217.java", "target": 0, "func": " //encrypt using blowfish algorithm\n    public static byte[] encrypt(String Data)throws Exception{\n\n        SecretKeySpec key = new SecretKeySpec(strkey.getBytes(\"UTF8\"), \"Blowfish\");\n         Cipher cipher = Cipher.getInstance(\"Blowfish\");\n         cipher.init(Cipher.ENCRYPT_MODE, key);\n\n         return (cipher.doFinal(Data.getBytes(\"UTF8\")));\n\n    }\n\n    //decrypt using blow fish algorithm\n    public static String decrypt(byte[] encryptedData)throws Exception{\n         SecretKeySpec key = new SecretKeySpec(strkey.getBytes(\"UTF8\"), \"Blowfish\");\n         Cipher cipher = Cipher.getInstance(\"Blowfish\");\n         cipher.init(Cipher.DECRYPT_MODE, key);\n         byte[] decrypted = cipher.doFinal(encryptedData);\n         return new String(decrypted); \n\n    }\n", "idx": 835}
{"project": "cipher", "commit_id": "Snippet20321302_2956.java", "target": 0, "func": "import java.security.Security;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Base64;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\n\npublic class doThis {\n\n    public static void main(String[] args) {\n        Security.addProvider(new BouncyCastleProvider());\n        String strDataToEncrypt = \"Testing Encryption\";\n        byte[] byteDataToTransmit = strDataToEncrypt.getBytes();\n        //41 6E 6B 61 72 61 6F 20 49 74 74 61 64 69\n        //byte[] byteDataToTransmit = new byte []\n        {\n            0x41,0x6E,0x6B,0x61,0x72,0x61,0x6F,0x20,0x49,0x74,0x74,0x61,0x64,0x69\n        };\n        try {\n\n            byte [] keyBytes= new byte [] {0x21,0x0a,0x03,0x23,0x45,0x29,0x78,0x12,0x35,\n                                           0x45,0x67,0x78,0x21,0x13,0x34,\n\n                                           0x56,0x67,0x45,0x12,0x9,0x38,0x0e,0x20,\n                                           0x15,0x21,0x0a,0x03,0x23,0x45,0x0b,0x15,0x0c\n                                          };\n\n            byte[] encrypted= aesEncrypt(byteDataToTransmit,keyBytes);\n\n            System.out.println(\"\\n AES Encrypted Data is  \"+new String (encrypted));\n\n            byte [] byteDecrypt=aesDecrypt(bytestrEncrypt, keyBytes);\n            System.out.println(\"\\n AES Decrypted Data is\"+byteDecrypt);\n            // byte [] byteDecrypt=aesDecrypt(encrypted , keyBytes);\n\n            //System.out.println(\"\\n AES Decrypted Data is\"+new String(byteDecrypt));\n        }\n        catch(Exception exp)\n        {\n            System.out.println(\" Exception caught \" + exp);\n            exp.printStackTrace();\n        }\n    }\n\n    public static byte[] aesEncrypt(byte[] original, byte[] key)\n    {\n        try\n        {\n            SecretKeySpec keySpec = null;\n            Cipher cipher = null;\n            {\n                keySpec = new SecretKeySpec(key, \"AES/ECB/PKCS7Padding\");\n                cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n                cipher.init(Cipher.ENCRYPT_MODE, keySpec); // encryption\n            }\n            return cipher.doFinal(original);\n        }\n        catch(Exception e)\n        {\n            //  Logger.e(e.toString());\n        }\n        return null;\n    }\n\n    public static byte[] aesDecrypt(byte[] encrypted, byte[] key)\n    {\n        try\n        {\n            SecretKeySpec keySpec = null;\n            Cipher cipher = null;\n\n            {\n                keySpec = new SecretKeySpec(key, \"AES/ECB/PKCS7Padding\");\n\n                cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n                cipher.init(Cipher.DECRYPT_MODE, keySpec);\n            }\n\n            System.out.println(\"In Decryprion \\n\"+ new String (encrypted));\n            return cipher.doFinal(encrypted);\n\n        }\n        catch(Exception e)\n        {\n            //  Logger.e(e.toString());\n        }\n        return null;\n    }\n}\n", "idx": 836}
{"project": "cipher", "commit_id": "Snippet8622367_33376.java", "target": 0, "func": "import java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n/**\n * Usage:\n * <pre>\n * String crypto = SimpleCrypto.encrypt(masterpassword, cleartext)\n * ...\n * String cleartext = SimpleCrypto.decrypt(masterpassword, crypto)\n * </pre>\n * @author ferenc.hechler\n */\npublic class SimpleCrypto {\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2*buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n    private final static String HEX = \"0123456789ABCDEF\";\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n    }\n\n}\n", "idx": 837}
{"project": "cipher", "commit_id": "Snippet20682226_3285.java", "target": 0, "func": "public static void main(String[] args) throws IOException,\n        NoSuchAlgorithmException, NoSuchPaddingException,\n        InvalidKeyException {\n\n    Scanner sc = new Scanner(System.in);\n    String filename = sc.nextLine();\n    sc.close();\n\n    System.out.println(\"The file requested is \" + filename);\n\n    File file = new File(filename);\n\n    if (file.exists())\n        System.out.println(\"File found\");\n\n    File to_b_encf = new File(\"encrypted.txt\");\n\n    if (!to_b_encf.exists())\n        to_b_encf.createNewFile();\n\n    System.out.println(\"encrypting\");\n\n    Cipher encipher = Cipher.getInstance(\"AES\");\n    KeyGenerator keygen = KeyGenerator.getInstance(\"AES\");\n    SecretKey key = keygen.generateKey();\n\n    encipher.init(Cipher.ENCRYPT_MODE, key);\n\n    FileOutputStream output = new FileOutputStream(to_b_encf);\n    FileInputStream input = new FileInputStream(filename);\n    CipherInputStream cis = new CipherInputStream(input, encipher);\n\n    int read;\n\n    while ((read = cis.read()) != -1) {\n        output.write(read);\n        output.flush();\n    }\n\n    input.close();\n    output.close();\n\n    System.out.println(\"done\");\n    System.out.println(\"decrypting\");\n\n    Cipher decipher = Cipher.getInstance(\"AES\");//initiate a cipher for decryption\n    decipher.init(Cipher.DECRYPT_MODE, key);//decrypt the file \n\n    File sourcefile = new File(\"encrypted.txt\");\n    File destfile = new File(\"decrypted.txt\");\n\n    if (!destfile.exists())\n        destfile.createNewFile();\n\n    FileInputStream decf = new FileInputStream(sourcefile);\n    CipherInputStream c_decf = new CipherInputStream(decf,decipher);\n    FileOutputStream destf = new FileOutputStream(destfile);\n\n    cout = new CipherOutputStream(destf,decipher);\n\n    while ((read = c_decf.read()) != -1) {\n        cout.write(read);\n        cout.flush();\n    }\n\n    c_decf.close();\n    destf.close();\n    cout.close();\n    decf.close();\n    System.out.println(\"done\");\n}\n", "idx": 838}
{"project": "cipher", "commit_id": "Snippet6788456_32362.java", "target": 0, "func": "private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n", "idx": 839}
{"project": "cipher", "commit_id": "Snippet21698902_4099.java", "target": 0, "func": "public static final String getAES256(final String text){\n    try{\n        SecretKeySpec specKey = new SecretKeySpec(Hex.decode(MERCHANT_KEY), \"AES\");\n        Cipher aesCipher =  Cipher.getInstance(\"AES/ECB/ZeroBytePadding\");\n        aesCipher.init(Cipher.ENCRYPT_MODE, specKey);\n        byte[] result = aesCipher.doFinal(Hex.decode(text));\n        return convToHex(result);\n    }catch(Exception e){\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 840}
{"project": "cipher", "commit_id": "Snippet35339305_17269.java", "target": 0, "func": "static {\n    Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);\n}\n// ...\n\n// Crypted input data and the key\nString criptedInput = \"vsm1/sLWAUxW7JjKT/Amww==\";\nfinal String KEY = \"jf7746yghndd\";\n\n// Decoding base64\nbyte[] bytesDecoded = Base64.decodeBase64(criptedInput.getBytes());\n\nSecretKeySpec key = new SecretKeySpec(KEY.getBytes(), \"DES\");\n\nCipher cipher = null;\nString result = null;\n\ntry {\n    cipher = Cipher.getInstance(\"DES/ECB/PKCS7Padding\", \"BC\");\n\n    // Initialize the cipher for decryption\n    cipher.init(Cipher.DECRYPT_MODE, key);\n\n    // Decrypt the text\n    byte[] textDecrypted = cipher.doFinal(bytesDecoded);\n\n    result = new String(textDecrypted);\n\n} catch (NoSuchAlgorithmException e) {\n    e.printStackTrace();\n} catch (NoSuchProviderException e) {\n    e.printStackTrace();\n} catch (NoSuchPaddingException e) {\n    e.printStackTrace();\n} catch (IllegalBlockSizeException e) {\n    e.printStackTrace();\n} catch (BadPaddingException e) {\n    e.printStackTrace();\n} catch (InvalidKeyException e) {\n    e.printStackTrace();\n}\n", "idx": 841}
{"project": "cipher", "commit_id": "Snippet24569286_6935.java", "target": 0, "func": "String newPath = sdCardPath + \"/\" + dPdfName;\n                File f1 = new File(newPath);\n                if (!f1.exists())\n                    try {\n                        f1.createNewFile();\n                    } catch (IOException e1) {\n                        // TODO Auto-generated catch block\n                        e1.printStackTrace();\n                    }\n\n                try {\n                    InputStream fis = new FileInputStream(f);\n                    OutputStream fos = new FileOutputStream(f1);\n                    String seed = \"password\";\n                    byte[] rawKey = getRawKey(seed.getBytes());\n                    SecretKeySpec skeySpec = new SecretKeySpec(rawKey,\n                            \"AES\");\n                    Cipher cipher = Cipher.getInstance(\"AES\");\n                    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n                    fis = new CipherInputStream(fis, cipher);\n                    int b;\n                    byte[] data = new byte[4096];\n                    while ((b = fis.read(data)) != -1) {\n                        // fos.write(cipher.doFinal(data), 0, b);\n                        fos.write(data, 0, b);\n                    }\n                    fos.flush();\n                    fos.close();\n                    fis.close();\n\n                } catch (Exception e) {\n                    // TODO: handle exceptionpri\n                    e.printStackTrace();\n                }\n", "idx": 842}
{"project": "cipher", "commit_id": "Snippet34585926_16536.java", "target": 0, "func": "import android.Manifest;\nimport android.content.pm.PackageManager;\nimport android.os.Bundle;\nimport android.support.v4.app.ActivityCompat;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.View;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.app.KeyguardManager;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.hardware.fingerprint.FingerprintManager;\nimport android.security.keystore.KeyGenParameterSpec;\nimport android.security.keystore.KeyPermanentlyInvalidatedException;\nimport android.security.keystore.KeyProperties;\nimport android.util.Base64;\nimport android.util.Log;\nimport android.widget.Button;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\n\nimport java.io.IOException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.NoSuchProviderException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.inject.Inject;\n\n\npublic class MainActivity extends AppCompatActivity {\n\n\n    private static final String TAG = MainActivity.class.getSimpleName();\n\n    private static final String DIALOG_FRAGMENT_TAG = \"myFragment\";\n    private static final String SECRET_MESSAGE = \"Very secret message\";\n    /** Alias for our key in the Android Key Store */\n    private static final String KEY_NAME = \"my_key\";\n\n    @Inject\n    KeyguardManager mKeyguardManager;\n    @Inject\n    FingerprintManager mFingerprintManager;\n    @Inject\n    FingerprintAuthenticationDialogFragment mFragment;\n    @Inject\n    KeyStore mKeyStore;\n    @Inject\n    KeyGenerator mKeyGenerator;\n    @Inject\n    Cipher mCipher;\n    @Inject\n    SharedPreferences mSharedPreferences;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n\n        Button purchaseButton = (Button) findViewById(R.id.purchase_button);\n        mKeyguardManager = (KeyguardManager) getSystemService(KEYGUARD_SERVICE);\n        if (!mKeyguardManager.isKeyguardSecure()) {\n            // Show a message that the user hasn't set up a fingerprint or lock screen.\n            Toast.makeText(this,\n                    \"Secure lock screen hasn't set up.\\n\"\n                            + \"Go to 'Settings -> Security -> Fingerprint' to set up a fingerprint\",\n                    Toast.LENGTH_LONG).show();\n            purchaseButton.setEnabled(false);\n            return;\n        }\n\n        //noinspection ResourceType\n        mFingerprintManager = (FingerprintManager) getSystemService(FINGERPRINT_SERVICE);\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {\n            // TODO: Consider calling\n            //    ActivityCompat#requestPermissions\n            // here to request the missing permissions, and then overriding\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\n            //                                          int[] grantResults)\n            // to handle the case where the user grants the permission. See the documentation\n            // for ActivityCompat#requestPermissions for more details.\n            return;\n        }\n        if (!mFingerprintManager.hasEnrolledFingerprints()) {\n            purchaseButton.setEnabled(false);\n            // This happens when no fingerprints are registered.\n            Toast.makeText(this,\n                    \"Go to 'Settings -> Security -> Fingerprint' and register at least one fingerprint\",\n                    Toast.LENGTH_LONG).show();\n            return;\n        }\n        try {\n            try {\n                createKey();\n            } catch (NoSuchProviderException e) {\n                e.printStackTrace();\n            }\n        } catch (KeyStoreException e) {\n            e.printStackTrace();\n        }\n        purchaseButton.setEnabled(true);\n        purchaseButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                findViewById(R.id.confirmation_message).setVisibility(View.GONE);\n                findViewById(R.id.encrypted_message).setVisibility(View.GONE);\n\n\n\n                // Set up the crypto object for later. The object will be authenticated by use\n                // of the fingerprint.\n                try {\n                    if (initCipher()) {\n\n                        // Show the fingerprint dialog. The user has the option to use the fingerprint with\n                        // crypto, or you can fall back to using a server-side verified password.\n                        mFragment.setCryptoObject(new FingerprintManager.CryptoObject(mCipher));\n                        boolean useFingerprintPreference = mSharedPreferences\n                                .getBoolean(getString(R.string.use_fingerprint_to_authenticate_key),\n                                        true);\n                        if (useFingerprintPreference) {\n                            mFragment.setStage(\n                                    FingerprintAuthenticationDialogFragment.Stage.FINGERPRINT);\n                        } else {\n                            mFragment.setStage(\n                                    FingerprintAuthenticationDialogFragment.Stage.PASSWORD);\n                        }\n                        mFragment.show(getFragmentManager(), DIALOG_FRAGMENT_TAG);\n                    } else {\n                        // This happens if the lock screen has been disabled or or a fingerprint got\n                        // enrolled. Thus show the dialog to authenticate with their password first\n                        // and ask the user if they want to authenticate with fingerprints in the\n                        // future\n                        mFragment.setCryptoObject(new FingerprintManager.CryptoObject(mCipher));\n                        mFragment.setStage(\n                                FingerprintAuthenticationDialogFragment.Stage.NEW_FINGERPRINT_ENROLLED);\n                        mFragment.show(getFragmentManager(), DIALOG_FRAGMENT_TAG);\n                    }\n                } catch (NoSuchPaddingException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Initialize the {@link Cipher} instance with the created key in the {@link #createKey()}\n     * method.\n     *\n     * @return {@code true} if initialization is successful, {@code false} if the lock screen has\n     * been disabled or reset after the key was generated, or if a fingerprint got enrolled after\n     * the key was generated.\n     */\n\n    private boolean initCipher() throws NoSuchPaddingException {\n        try {\n            mKeyStore.load(null);\n            SecretKey key = (SecretKey) mKeyStore.getKey(KEY_NAME, null);\n           // mCipher = Cipher.getInstance(\"DES/CBC\");\n            mCipher.init(Cipher.ENCRYPT_MODE, key);\n            return true;\n        } catch (KeyPermanentlyInvalidatedException e) {\n            return false;\n        } catch (KeyStoreException | CertificateException | UnrecoverableKeyException | IOException\n                | NoSuchAlgorithmException | InvalidKeyException e) {\n            throw new RuntimeException(\"Failed to init Cipher\", e);\n        }\n    }\n\n    public void onPurchased(boolean withFingerprint) {\n        if (withFingerprint) {\n            // If the user has authenticated with fingerprint, verify that using cryptography and\n            // then show the confirmation message.\n            tryEncrypt();\n        } else {\n            // Authentication happened with backup password. Just show the confirmation message.\n            showConfirmation(null);\n        }\n    }\n\n    // Show confirmation, if fingerprint was used show crypto information.\n    private void showConfirmation(byte[] encrypted) {\n        findViewById(R.id.confirmation_message).setVisibility(View.VISIBLE);\n        if (encrypted != null) {\n            TextView v = (TextView) findViewById(R.id.encrypted_message);\n            v.setVisibility(View.VISIBLE);\n            v.setText(Base64.encodeToString(encrypted, 0 /* flags */));\n        }\n    }\n\n    /**\n     * Tries to encrypt some data with the generated key in {@link #createKey} which is\n     * only works if the user has just authenticated via fingerprint.\n     */\n    private void tryEncrypt() {\n        try {\n            byte[] encrypted = mCipher.doFinal(SECRET_MESSAGE.getBytes());\n            showConfirmation(encrypted);\n        } catch (BadPaddingException | IllegalBlockSizeException e) {\n            Toast.makeText(this, \"Failed to encrypt the data with the generated key. \"\n                    + \"Retry the purchase\", Toast.LENGTH_LONG).show();\n            Log.e(TAG, \"Failed to encrypt the data with the generated key.\" + e.getMessage());\n        }\n    }\n\n    /**\n     * Creates a symmetric key in the Android Key Store which can only be used after the user has\n     * authenticated with fingerprint.\n     */\n    public void createKey() throws KeyStoreException, NoSuchProviderException {\n        // The enrolling flow for fingerprint. This is where you ask the user to set up fingerprint\n        // for your flow. Use of keys is necessary if you need to know if the set of\n        // enrolled fingerprints has changed.\n\n      //  mKeyStore=(KeyStore)getSystemService(Context);\n        mKeyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\n        try {\n\n            mKeyStore.load(null);\n            // Set the alias of the entry in Android KeyStore where the key will appear\n            // and the constrains (purposes) in the constructor of the Builder\n             mKeyGenerator = mKeyGenerator.getInstance(\"AES\", \"BC\");\n            mKeyGenerator.init(new KeyGenParameterSpec.Builder(KEY_NAME,\n                    KeyProperties.PURPOSE_ENCRYPT |\n                            KeyProperties.PURPOSE_DECRYPT)\n                    .setBlockModes(KeyProperties.BLOCK_MODE_CBC)\n                    // Require the user to authenticate with a fingerprint to authorize every use\n                    // of the key\n                    .setUserAuthenticationRequired(true)\n                    .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)\n                    .build());\n            mKeyGenerator.generateKey();\n        } catch (NoSuchAlgorithmException | InvalidAlgorithmParameterException\n                | CertificateException | IOException e) {\n\n        }\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        int id = item.getItemId();\n\n        if (id == R.id.action_settings) {\n            Intent intent = new Intent(this, SettingsActivity.class);\n            startActivity(intent);\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n}                                                                                                                         \n", "idx": 843}
{"project": "cipher", "commit_id": "Snippet13766042_37240.java", "target": 0, "func": "\nimport org.apache.commons.codec.binary.Base64;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.NoSuchProviderException;\nimport java.security.SecureRandom;\nimport java.security.spec.InvalidKeySpecException;\nimport java.util.Arrays;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AESTest \n{ \n    public static void main(String [] args)\n    {\n        String enc = AESEncryptToBase64(\"000000\", \"XJ5QJSVMKZGBOQO7HMSIJO5BERW2OYWDVNPM3BH32NLSWUCNJ4FIP3BML7EKUBNO\");\n        System.out.println(enc);\n    }\n\n    /**\n     * \n     * @param secret\n     * @param cleartext\n     * @return encrypted b64 string\n     */\n    public static String AESEncryptToBase64(String secret, String clearText) {\n        byte[] rawKey = new byte[32];\n        java.util.Arrays.fill(rawKey, (byte) 0);\n        byte[] secretBytes = secret.getBytes();\n        for(int i = 0; i < secretBytes.length; i++){\n            rawKey[i] = secretBytes[i];\n        }\n\n        SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\n        try{ \n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n            byte[] encryptedData = cipher.doFinal(clearText.getBytes());\n            if(encryptedData == null) return null;\n            // return \"l\";\n            return Base64.encodeBase64String(encryptedData);\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n        return null;      \n\n    }\n}\n", "idx": 844}
{"project": "cipher", "commit_id": "Snippet27086255_9263.java", "target": 0, "func": "    algorithm=\"DES\";\n    provider=\"GNU-CRYPTO\";\n    generator = KeyGenerator.getInstance(algorithm); <-works\n    generator.init(randGenerator);\n    SecretKey key = generator.generateKey();\n\n    cipherEncryption = Cipher.getInstance(algorithm, provider); <- stops here\n", "idx": 845}
{"project": "cipher", "commit_id": "Snippet20060200_2706.java", "target": 0, "func": "static ReadableByteChannel readChannel = null;\nstatic WritableByteChannel writeChannel = null;\nstatic SecretKey key = makeKeyFromPassword(\"chuj\".getBytes());\n\npublic static SecretKey makeKeyFromPassword(byte[] password) {\n\n    try {\n        key = KeyGenerator.getInstance(\"DES\").generateKey();\n        byte[] encoded = key.getEncoded();\n        return new SecretKeySpec(encoded, \"DES\");\n    } catch (Exception e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    return null;\n}\n\npublic static void run(int mode) throws Exception {\n    ByteBuffer readBuffer = ByteBuffer.allocate(1024);\n    ByteBuffer writeBuffer = ByteBuffer.allocate(1024);\n\n    //initializing cipher...\n    Cipher cipher = javax.crypto.Cipher.getInstance(\"DES\");                                                         \n    cipher.init(mode, key);  \n\n    int read = -1;\n    while((read = readChannel.read(readBuffer)) != -1){\n        readBuffer.flip();\n        cipher.doFinal(readBuffer, writeBuffer);\n        writeChannel.write(writeBuffer);\n        readBuffer.clear();\n        writeBuffer.clear();\n    }\n}\n\npublic static void main(String[] args) {\n    // TODO Auto-generated method stub\\\n    FileOutputStream fos = null;\n    String inFileString = \"C:\\\\test.txt\"; // Valid file pathname\n    String fileString = \"C:\\\\des.txt\"; // Valid file pathname\n    int mode = Cipher.ENCRYPT_MODE;\n    FileSystem fs = FileSystems.getDefault();\n    Path fp = fs.getPath(inFileString);\n\n    try {\n        readChannel = FileChannel.open(fp, EnumSet.of(StandardOpenOption.READ));\n        fos = new FileOutputStream(fileString);\n        writeChannel = Channels.newChannel(fos);\n        run(mode);\n    } catch (Exception e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n}\n", "idx": 846}
{"project": "cipher", "commit_id": "Snippet41220877_23182.java", "target": 0, "func": "FileInputStream fis = new FileInputStream(file);\n  File mediaStorage= new File(\n           Environment.getExternalStorageDirectory(),\n           \"/Sams\");\n\n\n   if (!mediaStorage.exists()) {\n       if (!mediaStorage.mkdirs()) {\n           Log.d(\"App\", \"failed to create directory\");\n       }\n   }\n   FileOutputStream fos = new FileOutputStream(mediaStorage+\"x.mp4\");\n\n\n    SecretKeySpec sks = new SecretKeySpec(pass.getBytes(), \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n    int b;\n    byte[] d = new byte[1024];\n    while((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n\n    cos.flush();\n    cos.close();\n    fis.close();\n\n\n}\n", "idx": 847}
{"project": "cipher", "commit_id": "Snippet22794660_5097.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Base64;\n\npublic abstract class AESDecrypter {\n\n    public static String decrypt(String encryptedString, String key) {\n        try {\n            SecretKeySpec keySpec = null;\n            Cipher decryptCipher = null;\n            //----\n            SecretKeySpec keySpec = null;\n        Cipher decryptCipher = null;\n        //----\n        keySpec = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\n        System.out.println(keySpec.toString());\n        decryptCipher = Cipher.getInstance(\"AES\");\n        decryptCipher.init(Cipher.DECRYPT_MODE, keySpec);\n        System.out.println(\"End decrypt\");\n        return new String(decryptCipher.doFinal(Base64.decodeBase64(encryptedString.getBytes(\"UTF-8\"))), \"UTF-8\");\n    }\n}\n", "idx": 848}
{"project": "cipher", "commit_id": "Snippet36844872_18812.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Hex;\n\nprivate static String encryptString(String value, String key)\n{\n    String encryptedString = \"\";\n    if (value != null)\n    {\n        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), \"Blowfish\");\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"Blowfish/ECB/PKCS#5\");\n            cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n            byte[] encrypted = cipher.doFinal(value.getBytes());\n            encryptedString = new String(Hex.encodeHex(encrypted));\n        }\n        catch (Exception e)\n        {\n            // Show error\n        }\n    }\n    return encryptedString;\n}\n", "idx": 849}
{"project": "cipher", "commit_id": "Snippet24600721_6952.java", "target": 0, "func": "private static Serializable loadFromFile(String fileName, Context ctx) {\n    Cipher cipher = null;\n    Serializable userList = null;\n    try {\n        cipher = Cipher.getInstance(\"DES\");\n\n        // Code to write your object to file\n        SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n        AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);\n\n        cipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n        CipherInputStream cipherInputStream = null;\n\n        FileInputStream fos = ctx.openFileInput(fileName);\n        cipherInputStream = new CipherInputStream(new BufferedInputStream(\n                fos), cipher);\n\n        ObjectInputStream inputStream = null;\n        inputStream = new ObjectInputStream(cipherInputStream);\n        // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        SealedObject sealedObject = null;\n        sealedObject = (SealedObject) inputStream.readObject();\n        userList = (Serializable) sealedObject.getObject(cipher);\n        inputStream.close();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (InvalidAlgorithmParameterException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (StreamCorruptedException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    }\n    return userList;\n}\n", "idx": 850}
{"project": "cipher", "commit_id": "Snippet12313559_36199.java", "target": 0, "func": "DESKeySpec desKeySpec = new DESKeySpec(masterKeyBytes);  \nSecretKeyFactory desKeyFact = SecretKeyFactory.getInstance(\"DES\");\nSecretKey s = desKeyFact.generateSecret(desKeySpec);\ndfCardCipher = Cipher.getInstance(\"DES/CBC/NoPadding\");\ndfCardCipher.init(Cipher.DECRYPT_MODE, s, new IvParameterSpec(ivBytes));\n\nbyte[] decipheredCodeRandomB = dfCardCipher.doFinal(encipheredCodeRandomB);\n", "idx": 851}
{"project": "cipher", "commit_id": "Snippet45033304_27150.java", "target": 0, "func": " final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n\n final Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n\n cipher.init(Cipher.ENCRYPT_MODE, key);\n\n final byte[] cipherText = cipher.doFinal(plainTextBytes);\n", "idx": 852}
{"project": "cipher", "commit_id": "Snippet25399785_7770.java", "target": 0, "func": "package security;\n\nimport java.security.spec.KeySpec;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\n/**\n * This class defines methods for encrypting and decrypting using the Triple DES\n * algorithm and for generating, reading and writing Triple DES keys. It also\n * defines a main() method that allows these methods to be used from the command\n * line.\n */\npublic class TripleDesEncryptionDecryption {\n  /**\n   * The program. The first argument must be -e, -d, or -g to encrypt,\n   * decrypt, or generate a key. The second argument is the name of a file\n   * from which the key is read or to which it is written for -g. The -e and\n   * -d arguments cause the program to read from standard input and encrypt or\n   * decrypt to standard output.\n   */\n    private static final String UNICODE_FORMAT = \"UTF8\";\n    public static final String DESEDE_ENCRYPTION_SCHEME = \"DES/ECB/NoPadding\";\n    private KeySpec myKeySpec;\n    private SecretKeyFactory mySecretKeyFactory;\n    private Cipher cipher;\n    byte[] keyAsBytes;\n    private String myEncryptionKey;\n    private String myEncryptionScheme;\n    SecretKey key;\n    static String stringToEncrypt=\"\";\n\n    public void setKey(String myKey) throws Exception\n    {\n        myEncryptionKey = myKey ;\n        myEncryptionScheme = DESEDE_ENCRYPTION_SCHEME;\n        keyAsBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n        myKeySpec = new DESedeKeySpec(keyAsBytes);\n        mySecretKeyFactory = SecretKeyFactory.getInstance(myEncryptionScheme);\n        cipher = Cipher.getInstance(myEncryptionScheme);\n        key = mySecretKeyFactory.generateSecret(myKeySpec);\n    }\n\n    /**\n     * Method To Encrypt The String\n     */\n    public String encrypt(String unencryptedString) {\n        String encryptedString = null;\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);\n            byte[] encryptedText = cipher.doFinal(plainText);\n            BASE64Encoder base64encoder = new BASE64Encoder();\n            encryptedString = base64encoder.encode(encryptedText);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return encryptedString;\n    }\n    /**\n     * Method To Decrypt An Ecrypted String\n     */\n    public String decrypt(String encryptedString) {\n        String decryptedText=null;\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            BASE64Decoder base64decoder = new BASE64Decoder();\n\n            byte[] encryptedText = base64decoder.decodeBuffer(encryptedString);\n            byte[] plainText = cipher.doFinal(encryptedText);\n            decryptedText= bytes2String(plainText);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return decryptedText;\n    }\n    /**\n     * Returns String From An Array Of Bytes\n     */\n    private static String bytes2String(byte[] bytes) {\n        StringBuffer stringBuffer = new StringBuffer();\n        for (int i = 0; i < bytes.length; i++) {\n            stringBuffer.append((char) bytes[i]);\n        }\n        return stringBuffer.toString();\n    }\n\n    /**\n     * Testing The DESede Encryption And Decryption Technique\n    */\n    public static void main(String args []) throws Exception\n    {\n        TripleDesEncryptionDecryption myEncryptor= new TripleDesEncryptionDecryption();\n\n        String encrypted=myEncryptor.encrypt(stringToEncrypt);\n        String decrypted=myEncryptor.decrypt(encrypted);\n\n        System.out.println(\"String To Encrypt: \"+stringToEncrypt);\n        System.out.println(\"Encrypted Value :\" + encrypted);\n        System.out.println(\"Decrypted Value :\"+decrypted);\n    }\n}\n", "idx": 853}
{"project": "cipher", "commit_id": "Snippet28599549_10753.java", "target": 0, "func": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.KeySpec;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.Environment;\nimport android.widget.TextView;\n\npublic class FileActivity extends Activity {\n\n    private String encryptedFileName = \"sample.pdf.aes\";//\n    private static String algorithm = \"AES\";\n    static SecretKey yourKey = null;\n     TextView text;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_file);\n       // saveFile(\"Hi friends\");\n        try {\n\n            saveFile(  new String(loadFile(Environment.getExternalStorageDirectory()+\"/pdf.pdf\")));\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        text=(TextView)findViewById(R.id.text);\n           text.setText(decodeFile());\n\n    }\n    public static SecretKey generateKey(char[] passphraseOrPin, byte[] salt)\n            throws NoSuchAlgorithmException, InvalidKeySpecException {\n        // Number of PBKDF2 hardening rounds to use. Larger values increase\n        // computation time. You should select a value that causes computation\n        // to take >100ms.\n        final int iterations = 1000;\n\n        // Generate a 256-bit key\n        final int outputKeyLength = 256;\n\n        SecretKeyFactory secretKeyFactory = SecretKeyFactory\n                .getInstance(\"PBKDF2WithHmacSHA1\");\n        KeySpec keySpec = new PBEKeySpec(passphraseOrPin, salt, iterations,\n                outputKeyLength);\n        yourKey = secretKeyFactory.generateSecret(keySpec);\n        return yourKey;\n    }\n\n    public static SecretKey generateSalt() throws NoSuchAlgorithmException {\n        // Generate a 256-bit key\n        final int outputKeyLength = 256;\n\n        SecureRandom secureRandom = new SecureRandom();\n        // Do *not* seed secureRandom! Automatically seeded from system entropy.\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n        keyGenerator.init(outputKeyLength, secureRandom);\n        SecretKey key = keyGenerator.generateKey();\n        return key;\n    }\n\n    public static byte[] encodeFile(SecretKey yourKey, byte[] fileData)\n            throws Exception {\n        byte[] data = yourKey.getEncoded();\n        SecretKeySpec skeySpec = new SecretKeySpec(data, 0, data.length,\n                algorithm);\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encrypted = cipher.doFinal(fileData);\n\n        return encrypted;\n    }\n\n    public static byte[] decodeFile(SecretKey yourKey, byte[] fileData)\n            throws Exception {\n        byte[] data = yourKey.getEncoded();\n        SecretKeySpec skeySpec = new SecretKeySpec(data, 0, data.length,\n                algorithm);\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        byte[] decrypted = cipher.doFinal(fileData);\n\n        return decrypted;\n    }\n\n    void saveFile(String stringToSave) {\n        try {\n            File file = new File(Environment.getExternalStorageDirectory()\n                    + File.separator, encryptedFileName);\n            BufferedOutputStream bos = new BufferedOutputStream(\n                    new FileOutputStream(file));\n            char[] p = { 'p', 'a', 's', 's' };\n            SecretKey yourKey = generateKey(p, generateSalt().toString()\n                    .getBytes());\n            byte[] filesBytes = encodeFile(yourKey, stringToSave.getBytes());\n            bos.write(filesBytes);\n            bos.flush();\n            bos.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    public static byte[] loadFile(String sourcePath) throws IOException\n    {\n        InputStream inputStream = null;\n        try \n        {\n            inputStream = new FileInputStream(sourcePath);\n            return readFully(inputStream);\n        } \n        finally\n        {\n            if (inputStream != null)\n            {\n                inputStream.close();\n            }\n        }\n    }\n    public static byte[] readFully(InputStream stream) throws IOException\n    {\n        byte[] buffer = new byte[8192];\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n        int bytesRead;\n        while ((bytesRead = stream.read(buffer)) != -1)\n        {\n            baos.write(buffer, 0, bytesRead);\n        }\n        return baos.toByteArray();\n    }\n    String decodeFile() {\n        String str = null;\n        try {\n            byte[] decodedData = decodeFile(yourKey,loadFile(Environment.getExternalStorageDirectory()+\"/sample.pdf.aes\"));\n             str = new String(decodedData);\n            System.out.println(\"DECODED FILE CONTENTS : \" + str);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return str;\n    }\n }\n", "idx": 854}
{"project": "cipher", "commit_id": "Snippet20949437_3545.java", "target": 0, "func": "public static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\npublic static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static byte[] getRaw(String password_) throws Exception {\n\n    byte[] keyStart = password_.getBytes();\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n    sr.setSeed(keyStart);\n    kgen.init(128, sr); \n    SecretKey skey = kgen.generateKey();\n    byte[] key = skey.getEncoded();  \n\n    return key;\n}\n", "idx": 855}
{"project": "cipher", "commit_id": "Snippet26401076_8551.java", "target": 0, "func": "package test;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.security.AlgorithmParameters;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.InvalidParameterSpecException;\nimport java.util.Base64;\n\n\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.EncryptedPrivateKeyInfo;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\n\npublic class ByteArrayClass {\n\n    private static byte[] ivBytes;\n    public static byte[] keyValue = new byte[32];\n    public static String cryptText = \"\"; \n    public static String encryptText = \"\"; \n\n    public static void main(String[] args){\n        //\n        System.out.println(\"Start\");\n        String str = \"MySuperSecretKey\"; //AES allows 128, 192 or 256 bit key length. That is 16, 24 or 32 byte\n        try {\n            keyValue = str.getBytes(\"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        String clearText = \"123456789012345623\";\n        cryptText = encrypt(clearText);\n        encryptText = decrypt(cryptText);\n        System.out.println(\"Clear text: \" + clearText);\n        System.out.println(\"Crypted text: \" + cryptText);\n        System.out.println(\"Encrypted text: \" + encryptText);\n        System.out.println(\"Finish\");\n    }\n\n     public static String encrypt(String plainText){   \n\n            System.out.println(\"plainText :\" + plainText + \" : \" + plainText.length());\n            Key key=null;;\n            try {\n                key = generateKey();\n            } catch (Exception e1) {\n                // TODO Auto-generated catch block\n                System.out.println(\"key = generateKey()\");\n                e1.printStackTrace();\n            }\n            Cipher cipher=null;\n            try {\n                cipher = Cipher.getInstance(\"AES\");\n            } catch (NoSuchAlgorithmException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (NoSuchPaddingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            try {\n                cipher.init(Cipher.ENCRYPT_MODE, key);\n            } catch (InvalidKeyException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n\n            byte[] clearTextBytes = new byte[32];\n            try {\n                clearTextBytes = plainText.getBytes(\"UTF-8\");\n            } catch (UnsupportedEncodingException e1) {\n                // TODO Auto-generated catch block\n                e1.printStackTrace();\n            }\n            System.out.println(\"clearTextBytes : \" + clearTextBytes + \" : \" + clearTextBytes.length);\n            clearTextBytes = checkTextLenght(clearTextBytes);\n            System.out.println(\"checkTextLenght.clearTextBytes : \" + clearTextBytes.length);\n            byte[] encryptedTextBytes;\n            try {\n                encryptedTextBytes = cipher.doFinal();\n            } catch (IllegalBlockSizeException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n                encryptedTextBytes=null;\n            } catch (BadPaddingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n                encryptedTextBytes=null;\n            }\n            //@Override\n            String encryptedValue = new BASE64Encoder().encode(encryptedTextBytes);\n            System.out.println(\"encryptedValue : \" + encryptedValue.toString() + \" : \" + encryptedValue.toString().length());\n            System.out.println(\"encryptedTextBytes : \" + encryptedTextBytes.toString() + \" : \" + encryptedTextBytes.length);\n            return encryptedValue.toString();\n        }\n\n     public static String decrypt(String encryptedValue){ \n        System.out.println(\"DECRYPT\");\n        System.out.println(\"encryptedValue : \" + encryptedValue + \" : \" + encryptedValue.length());\n        Key key=null;;\n        try {\n            key = generateKey();\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            System.out.println(\"key = generateKey()\");\n            e.printStackTrace();\n        } \n        Cipher c=null;;\n        try {\n            c = Cipher.getInstance(\"AES\");\n        } catch (NoSuchAlgorithmException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } \n        try {\n            //c.init(Cipher.DECRYPT_MODE, key,ivspec);\n            c.init(Cipher.DECRYPT_MODE,key);\n        } catch (InvalidKeyException e) {\n            // TODO Auto-generated catch block\n            System.out.println(\"c.init(Cipher.DECRYPT_MODE, key);\");\n            e.printStackTrace();\n        } \n\n        String decordedValue;\n        byte[] byteDecod;\n        byte[] inBytes;\n        try {\n            BASE64Decoder decoder = new BASE64Decoder();\n            inBytes = decoder.decodeBuffer(encryptedValue);\n            System.out.println(\"inBytes (decode from BASE64) : \" + inBytes + \" : size : \" + inBytes.length);\n        } catch (Exception e1) {\n            // TODO Auto-generated catch block\n            decordedValue=null;\n            inBytes=null;\n            e1.printStackTrace();\n        } \n        byte[] decValue;\n        byte[] decryptByte;\n        String returnString;\n\n        try {\n            decValue = c.doFinal(inBytes);\n            System.out.println(\"---------------------------------\");\n            System.out.println(decValue + \" : size : \" + decValue.length);\n            System.out.println(\"---------------------------------\");\n            System.out.println(decValue.toString() + \" : convert to string : \" + new String(decValue, Charset.forName(\"UTF-8\")) + \" |\");\n            System.out.println(\"---------------------------------\");\n            int i=0;\n\n        } catch (IllegalBlockSizeException e) {\n            // TODO Auto-generated catch block\n            decValue=null;\n            returnString=\"\";\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            // TODO Auto-generated catch block\n            decValue=null;\n            returnString=\"\";\n            e.printStackTrace();\n        }\n         String decryptedValue = new String(decValue); \n         return decryptedValue; \n         }\n\n     public static String generateSalt() {\n            SecureRandom random = new SecureRandom();\n            byte bytes[] = new byte[26];\n            random.nextBytes(bytes);\n            String s = new String(bytes);\n            return s;\n        }\n\n     private static Key generateKey() throws Exception \n     {\n             Key key = new SecretKeySpec(keyValue, \"AES\");\n             return key;\n     }\n\n     private static byte[] checkTextLenght (byte[] clearTextBytes){\n         //\n         int size = (clearTextBytes.length / 16 ) + ( (clearTextBytes.length % 16 == 0) ? 0 : 1 ) ;\n            int newLength = size * 16;\n            int lengthOfPad = newLength - clearTextBytes.length;\n\n            // set the pad character according to PKCS5Padding algorithm\n            byte padByte = 0;\n            switch (lengthOfPad) {\n                case 16 : padByte = (byte) 0x10; break;\n                case 15 : padByte = (byte) 0x0f; break;\n                case 14 : padByte = (byte) 0x0e; break;\n                case 13 : padByte = (byte) 0x0d; break;\n                case 12 : padByte = (byte) 0x0c; break;\n                case 11 : padByte = (byte) 0x0b; break;\n                case 10 : padByte = (byte) 0x0a; break;\n                case 9 : padByte = (byte) 0x09; break;\n                case 8 : padByte = (byte) 0x08; break;\n                case 7 : padByte = (byte) 0x07; break;\n                case 6 : padByte = (byte) 0x06; break;\n                case 5 : padByte = (byte) 0x05; break;\n                case 4 : padByte = (byte) 0x04; break;         \n                case 3 : padByte = (byte) 0x03; break;        \n                case 2 : padByte = (byte) 0x02; break;      \n                case 1 : padByte = (byte) 0x01; break;               \n            }\n            ByteBuffer byteBuffer = ByteBuffer.allocate(newLength);\n            byteBuffer.put(clearTextBytes);\n            byte[] paddedUp = new byte[size * 16];\n\n            for (int j=0;j<clearTextBytes.length;j++) {\n                paddedUp[j]=byteBuffer.get(j);\n            }\n            for (int k=clearTextBytes.length;k<paddedUp.length;k++) {\n                paddedUp[k]=padByte;\n            }        \n            //return paddedUp;\n         return paddedUp;\n     }\n\n}\n", "idx": 856}
{"project": "cipher", "commit_id": "Snippet9555023_34010.java", "target": 0, "func": "KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\nint keySize = 128;\nkgen.init(keySize);\nSecretKey key = kgen.generateKey();\nbyte[] aesKey = key.getEncoded();\nSecretKeySpec aesKeySpec = new SecretKeySpec(aesKey, \"AES\");\nCipher aesCipher = Cipher.getInstance(\"AES\");\naesCipher.init(Cipher.ENCRYPT_MODE, aesKeySpec);\nbyte[] encryptedContent = aesCipher.doFinal(content);\n", "idx": 857}
{"project": "cipher", "commit_id": "Snippet27962481_10126.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\n\npublic class HelloWorld{\n    public static void main(String[] args) {\n\n        try{\n            KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n            SecretKey myDesKey = keygenerator.generateKey();\n\n            Cipher desCipher;\n            desCipher = Cipher.getInstance(\"DES\");\n\n\n            byte[] text = \"No body can see me.\".getBytes(\"UTF8\");\n\n\n            desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n            byte[] textEncrypted = desCipher.doFinal(text);\n\n            String s = new String(textEncrypted);\n            System.out.println(s);\n\n            desCipher.init(Cipher.DECRYPT_MODE, myDesKey);\n            byte[] textDecrypted = desCipher.doFinal(textEncrypted);\n\n            s = new String(textDecrypted);\n            System.out.println(s);\n        }catch(Exception e)\n        {\n            System.out.println(\"Exception\");\n        }\n    }\n}\n", "idx": 858}
{"project": "cipher", "commit_id": "Snippet29029410_11092.java", "target": 0, "func": "public class Main {\n\n\n\n//output file name after decryption\nprivate static String decryptedFileName;\n//input encrypted file\nprivate static String fileSource;\n//a prefix tag for output file name\nprivate static String outputFilePrefix = \"decrypted_\";\n//My key for decryption, its the same as in the encrypter program.\nstatic byte[] key = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6 };\n\n//Decrypting function\npublic static void decrypt(byte[] key, File inputFile, File outputFile) throws Exception {\n    try {\n\n        Key secretKey = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n        FileInputStream inputStream = new FileInputStream(inputFile);\n        byte[] inputBytes = new byte[(int) inputFile.length()];\n        inputStream.read(inputBytes);\n\n        byte[] outputBytes = cipher.doFinal(inputBytes);\n\n        FileOutputStream outputStream = new FileOutputStream(outputFile, true);\n        outputStream.write(outputBytes);\n\n        inputStream.close();\n        outputStream.close();\n\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n}\n\n//first argument is the intput file source\npublic static void main(String[] args) {\n\n    if (args.length != 1) {\n        System.out.println(\"Add log file name as a parameter.\");\n\n    } else {\n        fileSource = args[0];\n\n        try {\n            File sourceFile = new File(fileSource);\n            if (sourceFile.exists()) {\n\n                //Decrption\n                decryptedFileName = outputFilePrefix + sourceFile.getName();\n                File decryptedFile = new File(decryptedFileName);\n                decrypt(key, sourceFile, decryptedFile);\n            } else {\n                System.out.println(\"Log file not found: \" + fileSource);\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"Decryption done, output file: \" + decryptedFileName);\n    }\n\n}\n\n}\n", "idx": 859}
{"project": "cipher", "commit_id": "Snippet12374690_36252.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.xml.bind.DatatypeConverter;\n\npublic class MACTest {\n\n  public static void main(String[] args) throws Exception {\n\n    final byte[] keyBytes = new byte[24];\n    final byte[] paddedPlaintext = \n        hexStringToByteArray(\"11223344556677889900112200000000\");\n    final byte[] iv = new byte[8];\n    final byte[] sessionKeyBytes = hexStringToByteArray(\"2923be84b1495461\");\n\n    final byte[] derivedKeyBytes = new byte[24];\n    for (int i = 0; i < sessionKeyBytes.length; i++) {\n      derivedKeyBytes[i] = (byte) (keyBytes[i] ^ sessionKeyBytes[i]);\n    }\n\n    System.out.println(toHexString(derivedKeyBytes));\n    SecretKeyFactory factory = SecretKeyFactory.getInstance(\"DESede\");\n    SecretKey derivedKey = factory.generateSecret(new DESedeKeySpec(\n        derivedKeyBytes));\n\n    Cipher c = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n    c.init(Cipher.ENCRYPT_MODE, derivedKey, new IvParameterSpec(iv));\n    byte[] result = c.doFinal(paddedPlaintext);\n    System.out.println(toHexString(result));\n  }\n\n  public static String toHexString(byte[] array) {\n    return DatatypeConverter.printHexBinary(array);\n  }\n\n  public static byte[] hexStringToByteArray(String s) {\n    return DatatypeConverter.parseHexBinary(s);\n  }\n}\n", "idx": 860}
{"project": "cipher", "commit_id": "Snippet10282566_34642.java", "target": 0, "func": "final Key key = new SecretKeySpec(seed.getBytes(), \"DES\");\nfinal Cipher c = Cipher.getInstance(\"DES\");\nc.init(Cipher.ENCRYPT_MODE, key);\nfinal byte[] encVal = c.doFinal(s.getBytes());\nreturn new BASE64Encoder().encode(encVal);\n", "idx": 861}
{"project": "cipher", "commit_id": "Snippet34906218_16856.java", "target": 0, "func": " @SafeVarargs\n@Override\nprotected final File doInBackground(HashMap<String, Object>... params) {\n    String path = (String) params[0].get(FILE_PATH);\n    String fileName = String.valueOf(params[0].get(FILE_NAME));\n    boolean encrypted = (boolean) params[0].get(ENCRYPTED);\n\n    File root = android.os.Environment.getExternalStorageDirectory();\n    File dir = new File(root.getAbsolutePath() + File.separator + path + File.separator);\n    File file;\n\n    if (!encrypted) {\n        file = new File(dir + File.separator + fileName);\n        return file;\n    }\n\n    file = new File(dir + File.separator + Cypher.md5(fileName));\n    File tempMp3 = null;\n    try {\n        tempMp3 = File.createTempFile(TEMP, MP3, context.getCacheDir());\n        tempMp3.deleteOnExit();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    try {\n        FileInputStream fis = new FileInputStream(file);\n        byte[] key = (DownloadManager.salt + DownloadManager.cryptPassword).getBytes(\"UTF-8\");\n        MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n        key = sha.digest(key);\n        key = Arrays.copyOf(key, 8);\n        SecretKeySpec sks = new SecretKeySpec(key, \"DES\");\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE, sks);\n        CipherInputStream cis = new CipherInputStream(fis, cipher);\n\n        FileOutputStream fos = new FileOutputStream(tempMp3);\n\n        int b;\n        byte[] d = new byte[80192];\n        while ((b = cis.read(d)) != -1) {\n            fos.write(d, 0, b);\n        }\n\n        fos.flush();\n        fos.close();\n        cis.close();\n\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    }\n\n    return tempMp3;\n}\n", "idx": 862}
{"project": "cipher", "commit_id": "Snippet12957022_36582.java", "target": 0, "func": "public String encrypt(SecretKey key, String stringIn){\n\n    String outString = \"\";      \n\n    if (stringIn.isEmpty() || stringIn.toUpperCase().equals(\"NULL\")){\n        return \"\";\n    }\n\n    try {   \n\n        if (key == null)\n            key = this.key;\n\n\n        InputStream in = new ByteArrayInputStream(stringIn.getBytes(\"UTF-8\"));\n\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n\n        // Create and initialize the encryption engine\n        Cipher cipher = Cipher.getInstance(\"DESede\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        // Create a special output stream to do the work for us\n        CipherOutputStream cos = new CipherOutputStream(out, cipher);\n\n        // Read from the input and write to the encrypting output stream\n        byte[] buffer = new byte[2048];\n\n        int bytesRead;\n\n        while ((bytesRead = in.read(buffer)) != -1) {\n            cos.write(buffer, 0, bytesRead);\n        }\n\n        cos.close();\n\n        // For extra security, don't leave any plaintext hanging around memory.\n        java.util.Arrays.fill(buffer, (byte) 0);\n\n        outString = out.toString();\n\n    } catch (UnsupportedEncodingException e) {\n\n        e.printStackTrace();\n\n    } catch (NoSuchAlgorithmException e) {\n\n        e.printStackTrace();\n\n    } catch (NoSuchPaddingException e) {\n\n        e.printStackTrace();\n\n    } catch (InvalidKeyException e) {\n\n        e.printStackTrace();\n\n    } catch (IOException e) {\n\n        e.printStackTrace();\n\n    } finally {\n\n        return outString;\n    }\n\n}\n", "idx": 863}
{"project": "cipher", "commit_id": "Snippet44497375_26567.java", "target": 0, "func": "private static byte[] Key = new byte[] {\n        0x42, 0x45, 0x49, 0x30, 0x12, 0x22, 0x35, 0x48, 0x33, 0x24, 0x28, 0x51,\n        0x48, 0x24, 0x30, 0x21, 0x44, 0x31, 0x14, 0x19, 0x45, 0x34, 0x47, 0x25 };\n\nCipher c;\n\npublic EncryptionHelper() throws Exception {\n    // byte[] key_hash = (Key).toString().getBytes(\"UTF-8\");\n    // key_hash = Arrays.copyOf(key_hash, 32);\n    SecretKey key = new SecretKeySpec(Key, 0, Key.length, \"DESede\");\n    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n}\n\npublic String Encrypt(String S) throws Exception {\n    byte[] base64EncryptedText = S.getBytes(\"UTF-8\");\n    byte EncryptedText[] = c.doFinal(base64EncryptedText, 0, base64EncryptedText.length);\n    return new String(EncryptedText);\n}\n\npublic String Decrypt(String S) throws Exception {\n    Cipher c2 = null;\n    // byte[] key_hash = (Key).toString().getBytes(\"UTF-8\");\n    // key_hash = Arrays.copyOf(key_hash, 24);\n    SecretKey key = new SecretKeySpec(Key,0, Key.length, \"DESede\");\n    c2 = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    c2.init(Cipher.DECRYPT_MODE, key);\n    byte[] base64EncryptedText = Base64.getEncoder().encode(S.getBytes());\n    byte[] textDecrypted = c2.doFinal(base64EncryptedText, 0, base64EncryptedText.length);\n    return new String(textDecrypted, \"UTF-8\");\n}\n", "idx": 864}
{"project": "cipher", "commit_id": "Snippet27179685_9312.java", "target": 0, "func": "<code>\npublic static String decrypt(String keyText,String encryptedText) \n{\n// generate key \nKey key = new SecretKeySpec(keyText.getBytes(), \"AES\");\nCipher chiper = Cipher.getInstance(\"AES\");\nchiper.init(Cipher.DECRYPT_MODE, key);\nbyte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedText);\nbyte[] decValue = chiper.doFinal(decordedValue);\nString decryptedValue = new String(decValue);\nreturn decryptedValue;\n}  \n</code>\n", "idx": 865}
{"project": "cipher", "commit_id": "Snippet11920096_35891.java", "target": 0, "func": "static void Decrypt() throws IOException, InvalidKeyException,\n            NoSuchAlgorithmException, NoSuchPaddingException,\n            IllegalBlockSizeException, BadPaddingException {\n\n        File file = new File(Environment.getExternalStorageDirectory()\n                .getAbsolutePath() + \"/Encrypted\");\n        FileInputStream fis = new FileInputStream(file);\n        long length = file.length();\n\n        if (length > Integer.MAX_VALUE) {\n            // File is too large\n        }\n\n        byte[] bytes = new byte[(int) length];\n\n        int offset = 0;\n        int numRead = 0;\n\n        bytes = IOUtils.toByteArray(fis);\n\n        byte[] N = new byte[(int) length - offset];\n\n        int g, s = 0;\n\n        for (g = offset; g < length; g++) {\n            N[s++] = bytes[g];\n        }\n\n        FileOutputStream fos = new FileOutputStream(Environment\n                .getExternalStorageDirectory().getAbsolutePath()\n                + \"/Decrypted\");\n\n        SecretKeySpec sks = new SecretKeySpec(\n                \"12345678901234567890123456789012\".getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, sks);\n\n        byte[] b = cipher.update(N);\n\n\n        int j = 0;\n        while (j < b.length) {\n\n            fos.write(b[j]);\n            j++;\n        }\n\n        fos.flush();\n        fos.close();\n\n    }\n", "idx": 866}
{"project": "cipher", "commit_id": "Snippet34495446_16489.java", "target": 0, "func": "public static String encrypter(String value) {   \n        try {   \n            SecretKeySpec key = new SecretKeySpec(\"My_Secret_Key\".getBytes(), \"Blowfish\");\n            Cipher cipher = Cipher.getInstance(\"Blowfish\");   \n            cipher.init(Cipher.ENCRYPT_MODE, key);   \n            byte[] plainTxtBytes = value.getBytes(\"UTF-8\");   \n            byte[] encBytes = cipher.doFinal(plainTxtBytes);   \n            return new sun.misc.BASE64Encoder().encode(encBytes);   \n        } catch (Exception ex) {   \n            return value;   \n        }   \n    }   \n\n    public static String decrypter(String value) {   \n        try {   \n            SecretKeySpec key = new SecretKeySpec(\"My_Secret_Key\".getBytes(), \"Blowfish\");\n            Cipher cipher = Cipher.getInstance(\"Blowfish\");   \n            cipher.init(Cipher.DECRYPT_MODE, key);   \n            byte[] encBytes = new sun.misc.BASE64Decoder().decodeBuffer(value);   \n            byte[] plainTxtBytes = cipher.doFinal(encBytes);   \n            return new String(plainTxtBytes);   \n        } catch (Exception ex) {   \n            return value;   \n        }   \n  }\n", "idx": 867}
{"project": "cipher", "commit_id": "Snippet9209964_33745.java", "target": 0, "func": " public static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n\n\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        return cipher.doFinal(encrypted);\n    }\n", "idx": 868}
{"project": "cipher", "commit_id": "Snippet21989588_4416.java", "target": 0, "func": "try {\n  Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n  SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n\n  // Here you need to accurately and correctly read your file into a byte\n  // array. Either Google for a decent solution (there are many out there)\n  // or use an existing implementation, such as Apache Commons commons-io.\n  // Your existing effort is buggy and doesn't close its resources.      \n  byte[] cipherText = FileUtils.readFileToByteArray(new File(savedScoresFileName));\n\n\n  cipher.init(Cipher.DECRYPT_MODE, key);\n\n  // Just one call to doFinal\n  byte[] plainText = cipher.doFinal(cipherText);\n\n  // Note: don't do this. If you create a string from a byte array,\n  // PLEASE pass a charset otherwise your result is platform dependent.\n  return new String(plainText);\n} catch (Exception e) {\n  e.printStackTrace();\n}\n", "idx": 869}
{"project": "cipher", "commit_id": "Snippet13271184_36819.java", "target": 0, "func": "public byte[] cryptograph(Key key, byte[] content){\n    Cipher cipher;\n    byte[] cryptograph = null;\n    try {\n        cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        cryptograph = cipher.doFinal(content);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return cryptograph;\n\n}\n", "idx": 870}
{"project": "cipher", "commit_id": "Snippet45410285_27460.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DESede\");  \n", "idx": 871}
{"project": "cipher", "commit_id": "Snippet14055243_37454.java", "target": 0, "func": "import java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.KeySpec;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport org.apache.log4j.Logger;\nimport com.test.exceptions.EncryptionException;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic final class StringEncrypter {\n\n  private KeySpec keySpec;\n  private SecretKeyFactory keyFactory;\n  private Cipher cipher;\n\n  private static final Logger LOGGER = Logger.getLogger(\"com.test.util.StringEncrypter\");\n\n\n  public StringEncrypter(String anEncryptionKey) throws EncryptionException {\n\n    if (anEncryptionKey == null) {\n      throw new EncryptionException(new InvalidKeyException(\"encryption key was null\"));\n    }\n    else if (anEncryptionKey.trim().length() < 24) {\n      throw new EncryptionException(new InvalidKeyException(\"encryption key was less than 24 characters\"));\n    }\n    else {\n\n      try {\n\n        byte[] keyAsBytes = anEncryptionKey.getBytes(\"UTF-8\");\n\n        keySpec = new DESKeySpec(keyAsBytes);\n\n        keyFactory = SecretKeyFactory.getInstance(\"DES\");\n\n        cipher = Cipher.getInstance(\"DES\");\n\n      }\n      catch (InvalidKeyException ike) {\n        throw new EncryptionException(ike);\n      }\n      catch (UnsupportedEncodingException uee) {\n        throw new EncryptionException(uee);\n      }\n      catch (NoSuchAlgorithmException nsae) {\n        throw new EncryptionException(nsae);\n      }\n      catch (NoSuchPaddingException nspee) {\n        throw new EncryptionException(nspee);\n      }\n    }\n  }\n\n\n  public String encrypt(String anUnencryptedString) throws EncryptionException {\n    if (anUnencryptedString == null || anUnencryptedString.trim().length() == 0) {\n      throw new EncryptionException(new InvalidKeyException(\"unencrypted string was null or empty\"));\n    }\n    else {\n      try {\n        SecretKey secretKey = keyFactory.generateSecret(keySpec);\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] cleartext = anUnencryptedString.getBytes(\"UTF-8\");\n\n\n        byte[] ciphertext = cipher.doFinal(cleartext);\n\n        BASE64Encoder base64encoder = new BASE64Encoder();\n        return base64encoder.encode(ciphertext);\n      }\n      catch (InvalidKeySpecException ikse) {\n        throw new EncryptionException(ikse);\n      }\n      catch (InvalidKeyException ike) {\n        throw new EncryptionException(ike);\n      }\n      catch (UnsupportedEncodingException uee) {\n        throw new EncryptionException(uee);\n      }\n      catch (IllegalBlockSizeException ibse) {\n        throw new EncryptionException(ibse);\n      }\n      catch (BadPaddingException bpee) {\n        throw new EncryptionException(bpee);\n      }\n    }\n  }\n\n\n  public String decrypt(String anEncryptedString) throws EncryptionException {\n    if (anEncryptedString == null || anEncryptedString.trim().length() <= 0) {\n      throw new EncryptionException(new InvalidKeyException(\"encrypted string was null or empty\"));\n    }\n    else {\n      try {\n        SecretKey secretKey = keyFactory.generateSecret(keySpec);\n\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n        BASE64Decoder base64decoder = new BASE64Decoder();\n\n        byte[] cleartext = base64decoder.decodeBuffer(anEncryptedString);\n\n        byte[] ciphertext = cipher.doFinal(cleartext);\n\n        return bytesToString(ciphertext);\n      }\n      catch (InvalidKeySpecException ikse) {\n        throw new EncryptionException(ikse);\n      }\n      catch (InvalidKeyException ike) {\n        throw new EncryptionException(ike);\n      }\n      catch (IllegalBlockSizeException ibse) {\n        throw new EncryptionException(ibse);\n      }\n      catch (BadPaddingException bpee) {\n          bpee.printStackTrace();\n        throw new EncryptionException(bpee);\n      }\n      catch (IOException ioe) {\n        throw new EncryptionException(ioe);\n      }\n    }\n  }\n\n  private static String bytesToString(byte[] someBytes) {\n    StringBuffer stringBuffer = new StringBuffer();\n    for (int i = 0; i < someBytes.length; i++) {\n      stringBuffer.append((char) someBytes[i]);\n    }\n    return stringBuffer.toString();\n  }\n}\n", "idx": 872}
{"project": "cipher", "commit_id": "Snippet823853_29765.java", "target": 0, "func": "Cipher desCipher = Cipher.getInstance(\"RC5\");\n***java.security.NoSuchAlgorithmException: Cannot find any provider supporting RC5***\n", "idx": 873}
{"project": "cipher", "commit_id": "Snippet1624353_30006.java", "target": 0, "func": "Cipher cip = Cipher.getInstance(\"DES\",\"SunJCE\")\n", "idx": 874}
{"project": "cipher", "commit_id": "Snippet8396018_33193.java", "target": 0, "func": "    FileOutputStream fos = null ;  \n     CipherInputStream cis; \n\n     byte key[] = \"abcdEFGH\".getBytes();   \n     SecretKeySpec secretKey = new SecretKeySpec(key,\"DES\"); \n\n     Cipher encrypt =  Cipher.getInstance(\"DES/ECB/PKCS5Padding\");  \n     encrypt.init(Cipher.ENCRYPT_MODE, secretKey);  \n\n     InputStream fis = new ByteArrayInputStream(fileData);//Here I am getting file data as byte array. You can convert your file data to InputStream  by other way too.\n\n    File dataFile = new File(dataDir,fileName); //dataDir is location where my file is stored\n    if(!dataFile.exists()){\n        cis = new CipherInputStream(fis,encrypt);  \n        try {\n            fos = new FileOutputStream(dataFile);  \n              byte[] b = new byte[8];  \n              int i;\n              while ((i=cis.read(b)) != -1) {  \n                  fos.write(b, 0, i);  \n             }                \n            return fileName;\n        } finally{\n            try {\n                if(fos != null)\n                {\n                 fos.flush();  \n                 fos.close();  \n                }\n                 cis.close();  \n                 fis.close(); \n            } catch (IOException e) {\n                //IOException\n            }\n        }\n    }              \n    return \"\";\n", "idx": 875}
{"project": "cipher", "commit_id": "Snippet40065436_21983.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"DES/ECB/NoPadding\");\n", "idx": 876}
{"project": "cipher", "commit_id": "Snippet15299980_38367.java", "target": 0, "func": "public class StringCryptor \n{\n    private static final String CIPHER_ALGORITHM = \"AES\";\n    private static final String RANDOM_GENERATOR_ALGORITHM = \"SHA1PRNG\";\n    private static final int RANDOM_KEY_SIZE = 128;\n    // Private key already generated with generatekey()\n    static String PKEY= \"15577737BBD910E794A6B3C250678DAF\";\n    // Convert PKEY to byte[]\n    static byte[] secretKey = toByte(PKEY);\n\n    // Encrypts string and encode in Base64\n    public static String encrypt( String password, String data ) throws Exception \n    {\n         byte[] clear = data.getBytes();\n         SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, CIPHER_ALGORITHM );\n         Cipher cipher = Cipher.getInstance( CIPHER_ALGORITHM );\n         cipher.init( Cipher.ENCRYPT_MODE, secretKeySpec );\n         byte[] encrypted = cipher.doFinal( clear );\n         String encryptedString = Base64.encodeToString( encrypted, Base64.DEFAULT );\n         return encryptedString;\n    }\n\n    // Decrypts string encoded in Base64\n    public static String decrypt( String password, String encryptedData ) throws Exception \n    {\n         SecretKeySpec secretKeySpec = new SecretKeySpec( secretKey, CIPHER_ALGORITHM );\n         Cipher cipher = Cipher.getInstance( CIPHER_ALGORITHM );\n         cipher.init( Cipher.DECRYPT_MODE, secretKeySpec );\n         byte[] encrypted = Base64.decode( encryptedData, Base64.DEFAULT );\n         byte[] decrypted = cipher.doFinal( encrypted );\n         return new String( decrypted );\n    }\n\n\n    // Convert String To Hexa\n    public static String toHex(byte[] buf) { \n        if (buf == null)  \n            return \"\";    \n        StringBuffer result = new StringBuffer(2*buf.length);  \n        for (int i = 0; i < buf.length; i++) {\n           appendHex(result, buf[i]);       \n        }        \n       return result.toString();\n    }\n  // Convert hex To byte\n  public static byte[] toByte(String hexString) { \n        int len = hexString.length()/2;      \n        byte[] result = new byte[len];        \n        for (int i = 0; i < len; i++)               \n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();   \n        return result;\n  }\n\n  private final static String HEX = \"0123456789ABCDEF\";\n  private static void appendHex(StringBuffer sb, byte b) {\n      sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n  }\n\n//public static byte[] generateKey( byte[] seed ) throws Exception\n    //{\n    //KeyGenerator keyGenerator = KeyGenerator.getInstance( CIPHER_ALGORITHM );\n        //SecureRandom secureRandom = SecureRandom.getInstance( RANDOM_GENERATOR_ALGORITHM );\n        //secureRandom.setSeed( seed );\n        //keyGenerator.init( RANDOM_KEY_SIZE, secureRandom );\n        //SecretKey secretKey = keyGenerator.generateKey();\n        //return secretKey.getEncoded();\n    //}\n}\n", "idx": 877}
{"project": "cipher", "commit_id": "Snippet14750629_37898.java", "target": 0, "func": "public class utils {\n\npublic static String encrypt(String message,String secretPhrase){\n    try{\n        MessageDigest mdig=MessageDigest.getInstance(\"MD5\");\n        byte[] digestedBytes=mdig.digest(secretPhrase.getBytes(\"UTF-8\"));\n        SecretKeySpec keySpec=new SecretKeySpec(digestedBytes,\"AES\");\n\n        Cipher cipher=Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n        byte[] encryptedBytes=cipher.doFinal(message.getBytes(\"UTF-8\"));\n\n        return new String(encryptedBytes,\"UTF-8\");\n    }catch(Exception exc){\n        return null;\n    }\n}\n\npublic static String decrypt(String message,String secretPhrase){\n    try{\n        MessageDigest mdig=MessageDigest.getInstance(\"MD5\");\n        byte[] digestedBytes=mdig.digest(secretPhrase.getBytes(\"UTF-8\"));\n        SecretKeySpec keySpec=new SecretKeySpec(digestedBytes,\"AES\");\n\n        Cipher cipher=Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, keySpec);\n        byte[] encryptedBytes=cipher.doFinal(message.getBytes(\"UTF-8\"));\n\n        return new String(encryptedBytes,\"UTF-8\");\n    }catch(Exception exc){\n        return null;\n    }\n}\n", "idx": 878}
{"project": "cipher", "commit_id": "Snippet25324304_7713.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\npublic class MyArcFour\n{\n\n  public static void main(String args[])throws Exception\n    {\n\n\n      byte [] key = \"AAAAA\".getBytes(\"ASCII\");\n\n      String clearText = \"66\";\n\n\n      Cipher rc4 = Cipher.getInstance(\"RC4\");\n      SecretKeySpec rc4Key = new SecretKeySpec(key, \"RC4\");\n      rc4.init(Cipher.ENCRYPT_MODE, rc4Key);\n\n      byte [] cipherText = rc4.update(clearText.getBytes(\"ASCII\"));\n\n      System.out.println(\"clear (ascii)        \" + clearText);\n      System.out.println(\"clear (hex)          \" + DatatypeConverter.printHexBinary(clearText.getBytes(\"ASCII\")));\n      System.out.println(\"cipher (hex) is      \" + DatatypeConverter.printHexBinary(cipherText));\n\n\n      Cipher rc4Decrypt = Cipher.getInstance(\"RC4\");\n      rc4Decrypt.init(Cipher.DECRYPT_MODE, rc4Key);\n      byte [] clearText2 = rc4Decrypt.update(cipherText);\n\n      System.out.println(\"decrypted (clear) is \" + new String(clearText2, \"ASCII\"));\n   }\n}\n", "idx": 879}
{"project": "cipher", "commit_id": "Snippet36821285_18785.java", "target": 0, "func": "try{\n    FileInputStream fis = new FileInputStream(new File(c.getString(c.getColumnIndex(DownloadManager.COLUMN_LOCAL_FILENAME))));\n    File outfile = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + \"/appvideo/1.mp4\");\n\n    int read;\n    if(!outfile.exists())\n        outfile.createNewFile();\n\n    File decfile = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + \"/appvideo/2.mp4\");\n    if(!decfile.exists())\n        decfile.createNewFile();\n\n    FileOutputStream fos = new FileOutputStream(outfile);\n    FileInputStream encfis = new FileInputStream(outfile);\n    FileOutputStream decfos = new FileOutputStream(decfile);\n\n    Cipher encipher = Cipher.getInstance(\"AES\");\n    Cipher decipher = Cipher.getInstance(\"AES\");\n\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecretKey skey = kgen.generateKey();\n    encipher.init(Cipher.ENCRYPT_MODE, skey);\n    CipherInputStream cis = new CipherInputStream(fis, encipher);\n    decipher.init(Cipher.DECRYPT_MODE, skey);\n    CipherOutputStream cos = new CipherOutputStream(decfos,decipher);\n\n    while((read = cis.read())!=-1)\n    {\n        fos.write((char)read);\n        fos.flush();\n    }\n    fos.close();\n    while((read=encfis.read())!=-1)\n    {\n        cos.write(read);\n        cos.flush();\n    }\n    cos.close();\n\n}catch (Exception e) {\n    // TODO: handle exceptione\n    e.printStackTrace();\n}\n", "idx": 880}
{"project": "cipher", "commit_id": "Snippet17738393_853.java", "target": 0, "func": "    public void EncryptDemo(){\n    try {\n        FileInputStream keyfis = new FileInputStream(\"mainkey.key\");\n        byte[] encodedKey = new byte[keyfis.available()];\n        keyfis.read(encodedKey);\n        keyfis.close();\n        Key KeyFromFile = new SecretKeySpec(encodedKey, \"DES\");\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        String text=txtToEncryptData.getText(), output;\n        cipher.init(Cipher.ENCRYPT_MODE, KeyFromFile);\n        DataDemo = cipher.doFinal(text.getBytes());\n        InsertIntoDataBase();\n        //I store it as varbinary in database\n    } catch (FileNotFoundException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IOException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchPaddingException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidKeyException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalBlockSizeException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (BadPaddingException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    }\n}\n\n    public void DecryptDemo(){\n    try {\n        FileInputStream keyfis = new FileInputStream(\"mainkey.key\");\n        byte[] encodedKey = new byte[keyfis.available()];\n        keyfis.read(encodedKey);\n        keyfis.close();\n        Key KeyFromFile = new SecretKeySpec(encodedKey, \"DES\");\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, KeyFromFile);\n        String sql = \"{call SelectAll}\";\n        CallableStatement call = conn.prepareCall(sql);\n        call.execute();\n        ResultSet result = call.getResultSet();\n        DefaultListModel model = new DefaultListModel();\n        while(result.next()){\n            DataDemo = result.getBytes(\"TestData\");\n            byte[] plainText = cipher.doFinal(DataDemo);\n            String after = new String(plainText);\n            model.addElement(after);\n        }\n        lstDecryptResult.setModel(model);\n    } catch (SQLException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (FileNotFoundException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IOException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchPaddingException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidKeyException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalBlockSizeException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (BadPaddingException ex) {\n        Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);\n    }\n}\n", "idx": 881}
{"project": "cipher", "commit_id": "Snippet6972705_32487.java", "target": 0, "func": "    Cipher cipher = null;\n    try {\n        cipher = Cipher.getInstance(\"DES\");\n    } catch (Exception ex) {\n        System.out.println(ex.toString());\n        //   return;\n    }\n\n    byte[] keyData = keyString.getBytes();\n    SecretKeySpec key = new SecretKeySpec(keyData, 0, keyData.length, \"DES\");\n\n    try {\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n    } catch (Exception ex) {\n        System.out.println(ex.toString());\n        //  return;\n    }\n\n    int cypheredBytes = 0;\n\n    byte[] inputBytes = null;\n    try {\n        inputBytes = textToEnrypt.getBytes(\"UTF-8\");\n        inputBytes = textToEnrypt.getBytes();\n    } catch (Exception ex) {\n        System.out.println(ex.toString());\n        //return;\n    }\n\n    byte[] outputBytes = new byte[100];\n\n    try {\n        cypheredBytes = cipher.doFinal(inputBytes, 0, inputBytes.length,\n                outputBytes, 0);\n    } catch (Exception ex) {\n        System.out.println(ex.toString());\n        //return;\n    }\n    /*\n    String str = new String(outputBytes, 0, cypheredBytes);\n    buffer = str;\n    System.out.println(\"Encrypted string = \" + str);\n     * */\n\n    newResponse = new byte[cypheredBytes];\n\n    for (int i = 0; i < cypheredBytes; i++) {\n\n        newResponse[i] = outputBytes[i];\n\n    }\n\n    buffer=new String(newResponse);\n    System.out.println(\"Encripted text is:\"+buffer);\n    return newResponse;\n}\n\npublic void decrypt(String textToDecrypt, String keyString) {\n    Cipher cipher;\n    try {\n        cipher = Cipher.getInstance(\"DES\");\n    } catch (Exception ex) {\n        System.out.println(ex.toString());\n        return;\n    }\n\n    byte[] keyData = keyString.getBytes();\n    SecretKeySpec key = new SecretKeySpec(keyData, 0, keyData.length, \"DES\");\n\n    try {\n        cipher.init(Cipher.DECRYPT_MODE, key);\n    } catch (Exception ex) {\n        System.out.println(\"2. \" + ex.toString());\n        return;\n    }\n\n    int cypheredBytes = 0;\n\n    byte[] inputBytes;\n    try {\n        inputBytes =textToDecrypt.getBytes(\"UTF-8\");\n       inputBytes = textToDecrypt.getBytes();\n    } catch (Exception ex) {\n        System.out.println(\"3. \" + ex.toString());\n        return;\n    }\n\n    byte[] outputBytes = new byte[100];\n\n    try {\n        cypheredBytes = cipher.doFinal(inputBytes, 0, inputBytes.length,\n                outputBytes, 0);\n    } catch (Exception ex) {\n        System.out.println(\"4. \" + ex.toString());\n        return;\n    }\n\n    String str = new String(outputBytes, 0, cypheredBytes);\n    System.out.println(\"Decrypted string = \" + str);\n}\n", "idx": 882}
{"project": "cipher", "commit_id": "Snippet24908826_7251.java", "target": 0, "func": "public class AESHelper {\n\npublic static String encrypt(String seed, String cleartext)\n        throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes(\"UTF-8\"));\n    byte[] result = encrypt(rawKey, cleartext.getBytes(\"UTF-8\"));\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted)\n        throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes(\"UTF-8\"));\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted)\n        throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    Log.d(\"DEC\", \"Decrypted: \" + decrypted);\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\n\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length() / 2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2 * buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\n\nprivate final static String HEX = \"0123456789ABCDEF\";\n\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n}\n", "idx": 883}
{"project": "cipher", "commit_id": "Snippet14154096_37505.java", "target": 0, "func": "public  byte[] encrypt(String seed, byte[] cleartext) throws Exception {\n\n    byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext);\n      //  return toHex(result);\n        return result;\n}\n\npublic  byte[] decrypt(String seed, byte[] encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = encrypted;\n        byte[] result = decrypt(rawKey, enc);\n\n        return result;\n}\n\n//done\nprivate  byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n    kgen.init(128, sr); \n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n} \n\n\nprivate  byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n}\n\nprivate  byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n}\n", "idx": 884}
{"project": "cipher", "commit_id": "Snippet6578160_32204.java", "target": 0, "func": "KeySpec ks = new DESKeySpec(\"MY KEY HERE\".getBytes(\"UTF-8\"));\nSecretKey key = SecretKeyFactory.getInstance(\"DES\").generateSecret(ks);\nIvParameterSpec iv = new IvParameterSpec(Hex.decodeHex(\"1234567890ABCDEF\".toCharArray()));\nCipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\ncipher.init(Cipher.DECRYPT_MODE, key, iv);\n\nbyte[] decoded = cipher.doFinal(Base64.decodeBase64(\"MY ENCRYPTED STRING HERE\"));\n\nLog.e(TAG, \"DECODED->\" + new String(decoded, \"UTF-8\"));\n", "idx": 885}
{"project": "cipher", "commit_id": "Snippet9537605_33989.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\n\nimport org.bouncycastle.util.encoders.Base64;\n\n\npublic class KeyGen {\n    private SecretKey key;\n    private Cipher ecipher;\n    private Cipher dcipher;\n    private static KeyGen keyGen;\n\n    private KeyGen() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException{\n        key = KeyGenerator.getInstance(\"DES\").generateKey();\n        ecipher = Cipher.getInstance(\"DES\");\n        dcipher = Cipher.getInstance(\"DES\");\n        ecipher.init(Cipher.ENCRYPT_MODE, key);\n        dcipher.init(Cipher.DECRYPT_MODE, key);\n    }\n\n    public static KeyGen getInstance() throws NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException {\n        if(keyGen == null) {\n            keyGen = new KeyGen();\n        }\n        return keyGen;\n    }\n\n    public String encrypt(String str) throws UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException {\n        byte[] utf8 = str.getBytes(\"UTF8\");\n        byte[] enc = ecipher.doFinal(utf8);\n        return new String(Base64.encode(enc));\n    }\n\n    public String decrypt(String str) throws IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {\n        byte[] dec = Base64.decode(str);\n        byte[] utf8 = dcipher.doFinal(dec);\n        return new String(utf8, \"UTF8\");\n    }\n\n    public static void main(String[] args) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException {\n        KeyGen keyGen = KeyGen.getInstance();\n        String string = \"JOYMAA\";\n        String enc = keyGen.encrypt(string);\n        System.out.println(enc);\n        String dec = keyGen.decrypt(enc);\n        System.out.println(dec);\n    }\n}\n", "idx": 886}
{"project": "cipher", "commit_id": "Snippet29683048_10818.java", "target": 0, "func": "desCipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n", "idx": 887}
{"project": "cipher", "commit_id": "Snippet36461989_18266.java", "target": 0, "func": "public class CryptoUtils {\n\n    private  final String TRANSFORMATION = \"AES\";\n    private  final String encodekey = \"1234543444555666\";\n    public  String encrypt(String inputFile)\n            throws CryptoException {\n        return doEncrypt(encodekey, inputFile);\n    }\n\n\n    public  String decrypt(String input)\n            throws CryptoException {\n    // return  doCrypto(Cipher.DECRYPT_MODE, key, inputFile);\n    return doDecrypt(encodekey,input);\n    }\n\n    private  String doEncrypt(String encodekey, String inputStr)   throws CryptoException {\n        try {\n\n            Cipher cipher = Cipher.getInstance(TRANSFORMATION);\n\n            byte[] key = encodekey.getBytes(\"UTF-8\");\n            MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n            key = Arrays.copyOf(key, 16); // use only first 128 bit\n\n            SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n\n            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n\n            byte[] inputBytes = inputStr.getBytes();     \n            byte[] outputBytes = cipher.doFinal(inputBytes);\n\n            return Base64Utils.encodeToString(outputBytes);\n\n        } catch (NoSuchPaddingException | NoSuchAlgorithmException\n                | InvalidKeyException | BadPaddingException\n                | IllegalBlockSizeException | IOException ex) {\n            throw new CryptoException(\"Error encrypting/decrypting file\", ex);\n       }\n     }\n\n\n    public  String doDecrypt(String encodekey,String encrptedStr) { \n          try {     \n\n              Cipher dcipher = Cipher.getInstance(TRANSFORMATION);\n              dcipher = Cipher.getInstance(\"AES\");\n              byte[] key = encodekey.getBytes(\"UTF-8\");\n              MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n              key = sha.digest(key);\n              key = Arrays.copyOf(key, 16); // use only first 128 bit\n\n              SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n\n              dcipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n            // decode with base64 to get bytes\n\n              byte[] dec = Base64Utils.decode(encrptedStr.getBytes());  \n              byte[] utf8 = dcipher.doFinal(dec);\n\n              // create new string based on the specified charset\n              return new String(utf8, \"UTF8\");\n\n          } catch (Exception e) {\n\n            e.printStackTrace();\n\n          }\n      return null;\n      }\n }\n", "idx": 888}
{"project": "cipher", "commit_id": "Snippet42380670_24390.java", "target": 0, "func": "        KeyGenerator keygen = KeyGenerator.getInstance(\"DES\");\n        SecretKey key = keygen.generateKey();\n        cWrp.init(Cipher.WRAP_MODE, theirKey);\n        byte[] m4 = cWrp.wrap(key);\n        datOut.write(m4);\n        ks = key;\n        try{\n            Cipher desCipher = Cipher.getInstance(\"DES\");\n            desCipher.init(Cipher.DECRYPT_MODE, ks);\n        }\n        catch(NoSuchPaddingException|InvalidKeyException e){\n            System.out.println(\"Error: \" + e);\n        }\n", "idx": 889}
{"project": "cipher", "commit_id": "Snippet33089705_15137.java", "target": 0, "func": "public static String encrypt(String plainText, Character fileType) {\n    String encryptedString = \"\";\n    if (!isValidFile(fileType))\n        throw new IllegalArgumentException(\"Invalid fileType.\");\n    else \n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");  \n            SecretKeySpec secretKey = new SecretKeySpec(keys.get(fileType), \"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            encryptedString = Base64.encode(cipher.doFinal((plainText).getBytes()));\n\n        }   catch (Exception e) {\n            e.printStackTrace();\n        }\n    return encryptedString;\n}\n\nprivate static boolean isValidFile(Character type) {\n    return (type == CAMPAIGN || type == EVENT || type == TRANSACTION || type == ACCOUNT || type == EXEC || type == PASSWORD);\n}\n\npublic static String decrypt(String cipherText, Character fileType) {\n    String decryptedString = \"\";\n\n    if (!isValidFile(fileType))\n        throw new IllegalArgumentException(\"Invalid fileType.\");\n    else \n        try {\n            com.sun.org.apache.xml.internal.security.Init.init();\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n            SecretKeySpec secretKey = new SecretKeySpec(keys.get(fileType), \"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            decryptedString = new String(cipher.doFinal(Base64.decode(cipherText)));\n\n        }   catch (Exception e) {\n            e.printStackTrace();\n        }\n    return decryptedString;\n}\n", "idx": 890}
{"project": "cipher", "commit_id": "Snippet41820513_23809.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\npublic class Trial {\n\n    public static byte[] getFile() {\n\n        File f = new File(\"/home/bridgeit/Desktop/Olympics.jpg\");\n        InputStream is = null;\n        try {\n            is = new FileInputStream(f);\n        } catch (FileNotFoundException e2) {\n            // TODO Auto-generated catch block\n            e2.printStackTrace();\n        }\n        byte[] content = null;\n        try {\n            content = new byte[is.available()];\n        } catch (IOException e1) {\n            // TODO Auto-generated catch block\n            e1.printStackTrace();\n        }\n        try {\n            is.read(content);\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        return content;\n    }\n\n    public static byte[] encryptPdfFile(SecretKey secretKey, byte[] content) {\n        Cipher cipher;\n        byte[] encrypted = null;\n        try {\n            cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n            encrypted = Base64.encodeBase64(cipher.doFinal(content));\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error while encrypting: \" + e.toString());\n        }\n        return encrypted;\n\n    }\n\n    public static byte[] decryptPdfFile(SecretKey secretKey, byte[] textCryp) {\n        Cipher cipher;\n        byte[] decrypted = null;\n        try {\n            cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            decrypted = cipher.doFinal(Base64.decodeBase64(textCryp));\n\n        } catch (Exception e) {\n\n            System.out.println(\"Error while decrypting: \" + e.toString());\n        }\n        return decrypted;\n    }\n\n    public static void saveFile(byte[] bytes) throws IOException {\n\n        FileOutputStream fos = new FileOutputStream(\"/home/bridgeit/Desktop/Olympics-new.jpg\");\n        fos.write(bytes);\n        fos.close();\n\n    }\n\n    public static void main(String args[])\n            throws NoSuchAlgorithmException, InstantiationException, IllegalAccessException, IOException {\n\n        SecretKeySpec secretKey;\n        byte[] key;\n        String myKey = \"ThisIsAStrongPasswordForEncryptionAndDecryption\";\n\n        MessageDigest sha = null;\n        key = myKey.getBytes(\"UTF-8\");\n        System.out.println(key.length);\n        sha = MessageDigest.getInstance(\"SHA-1\");\n        key = sha.digest(key);\n        key = Arrays.copyOf(key, 16); // use only first 128 bit\n        System.out.println(key.length);\n        System.out.println(new String(key, \"UTF-8\"));\n        secretKey = new SecretKeySpec(key, \"AES\");\n\n        byte[] content = getFile();\n        System.out.println(content);\n\n        byte[] encrypted = encryptPdfFile(secretKey, content);\n        System.out.println(encrypted);\n\n        byte[] decrypted = decryptPdfFile(secretKey, encrypted);\n        System.out.println(decrypted);\n\n        saveFile(decrypted);\n        System.out.println(\"Done\");\n\n    }\n\n}\n", "idx": 891}
{"project": "cipher", "commit_id": "Snippet28396404_10566.java", "target": 0, "func": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage tbn;\n\nimport java.awt.Graphics2D;\nimport java.awt.Point;\nimport java.awt.Transparency;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ColorModel;\nimport java.awt.image.ComponentColorModel;\nimport java.awt.image.DataBuffer;\nimport java.awt.image.DataBufferByte;\nimport java.awt.image.Raster;\nimport java.awt.image.WritableRaster;\nimport java.io.File;\nimport java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.imageio.ImageIO;\n\n/**\n *\n * @author user\n */\npublic class DbtClass {\n\n    public static void main(String[] args) {\n        try {\n            BufferedImage orgnlimage = ImageIO.read(new File(\"parrruuuuu.png\"));\n            orgnlimage = user_space(orgnlimage);\n            byte[] orgnlimagebytes = get_byte_data(orgnlimage);\n            byte[] encryptedbytes = encrypt(orgnlimagebytes, \"abc\");\n            BufferedImage encryptedimage = toImage(encryptedbytes, orgnlimage.getWidth(), orgnlimage.getHeight());\n            ImageIO.write(encryptedimage, \"png\", new File(\"encrypted.png\"));\n\n            /////////////////////////////////////////////////////////////////////\n            /////////////////////////////////////////////////////////////////////\n\n            byte[] encryptedbytes2 = get_byte_data(encryptedimage);\n            System.out.println(\"encryptedbytes before writing: \"+encryptedbytes2.length);\n\n            BufferedImage encryptedimage3 = ImageIO.read(new File(\"encrypted.png\"));\n            byte[] encryptedbyte3 = get_byte_data(encryptedimage3);\n            System.out.println(\"encryptedbytes after writing: \"+encryptedbyte3.length);\n\n\n        } catch (IOException ex) {\n            Logger.getLogger(DbtClass.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n\n    public static BufferedImage user_space(BufferedImage image) {\n        //create new_img with the attributes of image\n        BufferedImage new_img = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_3BYTE_BGR);\n        Graphics2D graphics = new_img.createGraphics();\n        graphics.drawRenderedImage(image, null);\n        graphics.dispose(); //release all allocated memory for this image\n        return new_img;\n    }\n\n    public static byte[] get_byte_data(BufferedImage image) {\n        WritableRaster raster = image.getRaster();\n        DataBufferByte buffer = (DataBufferByte) raster.getDataBuffer();\n        return buffer.getData();\n    }\n\n    public static byte[] encrypt(byte[] orgnlbytes, String key) {\n        byte[] encbytes = null;\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n            SecureRandom random = SecureRandom.getInstance(\"SHA1PRNG\");\n            // cryptograph. secure random \n            random.setSeed(key.getBytes());\n\n            keyGen.init(128, random);\n            // for example\n            SecretKey secretKey = keyGen.generateKey();\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            encbytes = cipher.doFinal(orgnlbytes);\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(DbtClass.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (NoSuchPaddingException ex) {\n            Logger.getLogger(DbtClass.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (InvalidKeyException ex) {\n            Logger.getLogger(DbtClass.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (IllegalBlockSizeException ex) {\n            Logger.getLogger(DbtClass.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (BadPaddingException ex) {\n            Logger.getLogger(DbtClass.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return encbytes;\n    }\n\n    public static BufferedImage toImage(byte[] imagebytes, int width, int height) {\n        DataBuffer buffer = new DataBufferByte(imagebytes, imagebytes.length);\n        WritableRaster raster = Raster.createInterleavedRaster(buffer, width, height, 3 * width, 3, new int[]{2, 1, 0}, (Point) null);\n        ColorModel cm = new ComponentColorModel(ColorModel.getRGBdefault().getColorSpace(), false, true, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);\n        return new BufferedImage(cm, raster, true, null);\n    }\n}\n", "idx": 892}
{"project": "cipher", "commit_id": "Snippet3632392_30773.java", "target": 0, "func": "class SimpleProtector\n{    \n   private final String ALGORITHM = \"AES\";    \n   private final byte[] keyValue = new byte[] { 'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };     \n   public String encrypt(String valueToEnc) throws Exception\n   {        \n      Key key = generateKey();        \n      Cipher c = Cipher.getInstance(ALGORITHM);        \n      c.init(Cipher.ENCRYPT_MODE, key);        \n      byte[] encValue = c.doFinal(valueToEnc.getBytes());        \n      String encryptedValue = new BASE64Encoder().encode(encValue);        \n      return encryptedValue;\n   }    \n\n   public String decrypt(String encryptedValue) throws Exception\n   {        \n      Key key = generateKey();        \n      Cipher c = Cipher.getInstance(ALGORITHM);        \n      c.init(Cipher.DECRYPT_MODE, key);        \n      byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);       \n      byte[] decValue = c.doFinal(decordedValue);        \n      String decryptedValue = new String(decValue);        \n      return decryptedValue;    \n   }    \n\n   private Key generateKey() throws Exception\n   {        \n      Key key = new SecretKeySpec(keyValue, ALGORITHM);        \n      return key;    \n   }\n}\n", "idx": 893}
{"project": "cipher", "commit_id": "Snippet32073995_14137.java", "target": 0, "func": "Cipher.getInstance(\"DES/ECB/PKCS5Padding\");", "idx": 894}
{"project": "cipher", "commit_id": "Snippet18825602_1741.java", "target": 0, "func": "    public static String encryptParameters(byte plainText[], String sKey)\n        throws RCPCipherException\n    {\n      Cipher cipher;\n      DESedeKeySpec dks = new DESedeKeySpec(_getKeyBytes(sKey));\n      java.security.Key secretKey = SecretKeyFactory.getInstance(\"DESede\").generateSecret(dks);\n      cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n      cipher.init(1, secretKey);\n      return Base64.encodeBase64URLSafeString(cipher.doFinal(plainText));\n    }\n", "idx": 895}
{"project": "cipher", "commit_id": "Snippet11780441_35787.java", "target": 0, "func": "public class AesCipher {\n    public static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(256,sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        try{\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n            byte[] decrypted = cipher.doFinal(encrypted);\n            return decrypted;\n        }\n        catch (Exception e) {return encrypted;}\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2*buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n    private final static String HEX = \"0123456789ABCDEF\";\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n    }\n}\n", "idx": 896}
{"project": "cipher", "commit_id": "Snippet25995052_8219.java", "target": 0, "func": "        static byte a[] = { ..... };\n\n        SecretKeySpec key;\n\n        if (key == null)\n        {\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n            bos.write(a);\n            bos.write(abyte1);\n            key = new SecretKeySpec(bos.toByteArray(), \"AES\");\n            bos.close();\n        }\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(2, key);\n        CipherInputStream cipherinputstream = new CipherInputStream(inputstream, cipher);\n", "idx": 897}
{"project": "cipher", "commit_id": "Snippet26629738_8749.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n...\n\nprivate static byte[] key = {\n        0x74, 0x68, 0x69, 0x73, 0x49, 0x73, 0x41, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79\n    };  // \"ThisIsASecretKey\";\n\n    public static String encrypt(String stringToEncrypt) throws Exception {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        final String encryptedString = Base64.encodeBase64String(cipher.doFinal(stringToEncrypt.getBytes()));\n        return encryptedString;\n    }\n\n    public static String decrypt(String stringToDecrypt) throws Exception {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        final String decryptedString = new String(cipher.doFinal(Base64.decodeBase64(stringToDecrypt)));\n        return decryptedString;\n    }\n", "idx": 898}
{"project": "cipher", "commit_id": "Snippet29092603_11170.java", "target": 0, "func": "import java.security.*;\nimport java.security.spec.InvalidKeySpecException;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.*;\n\npublic class AESencrp {\n\n     private static final String ALGO = \"AES\";\n    private static final byte[] keyValue =\n        new byte[] { 'W', 'e', 'l', 'c', 'o', 'm', 'e','t', 'o', 'e', 'n','c', 'r', 'y', 'p', 't' };\n\n\npublic static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encVal);\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n}\n    public static void main(String[] args) throws Exception {\n\n       // String password = \"1\";\n       // String passwordEnc = AESencrp.encrypt(password);\n        String passwordDec = AESencrp.decrypt(\"1\");\n\n      //  System.out.println(\"Plain Text : \" + password);\n       // System.out.println(\"Encrypted Text : \" + passwordEnc);\n        System.out.println(\"Decrypted Text : \" + passwordDec);\n    }\n}\n", "idx": 899}
{"project": "cipher", "commit_id": "Snippet8482258_33279.java", "target": 0, "func": "public static String decrypt(byte[] b) throws Exception{\n\n    byte[] key = \"12345678\".getBytes(\"UTF-16\");\n    byte[] iv =\"0443\".getBytes(\"UTF-16\");\n    System.out.println(\"Length of iv\" + iv.length + \"key length..\" + key.length);\n    SecretKey secretKey = new SecretKeySpec(key, \"RC2\");\n    System.out.println(\"Key size\" + secretKey.getEncoded().length);\n    Cipher cipher = Cipher.getInstance(\"RC2/CBC/NoPadding\");\n    IvParameterSpec initialisationVector = new IvParameterSpec(iv);\n    cipher.init(Cipher.DECRYPT_MODE, secretKey, initialisationVector);\n     byte[] cipherText = cipher.doFinal(b);\n        String plainText = new String(cipherText, \"UTF-8\");\n        System.out.println(\"Decrypted Text :: \" + plainText);\n\n    return \"\";\n}\n", "idx": 900}
{"project": "cipher", "commit_id": "Snippet36776120_18705.java", "target": 0, "func": "import javax.crypto.Cipher\nimport javax.crypto.spec.SecretKeySpec\nimport javax.xml.bind.DatatypeConverter\n\nimport play.api.inject.guice._\nimport play.api.{ApplicationLoader, Configuration}\n\nclass ApplicationLoaderConfig extends GuiceApplicationLoader() {\n\n  override def builder(context: ApplicationLoader.Context): GuiceApplicationBuilder = {\n\n    // Decrypt secrets\n    val decryptedConfig = context.initialConfiguration ++\n      Configuration(\"config.to.descrypt.1\" -> decryptDES(context.initialConfiguration.getString(\"config.to.descrypt.1\").get)) ++\n      Configuration(\"config.to.descrypt.2\" -> decryptDES(context.initialConfiguration.getString(\"config.to.descrypt.2\").get))\n\n    initialBuilder\n      .in(context.environment)\n      .loadConfig(decryptedConfig)\n      .overrides(overrides(context): _*)\n  }\n\n  private def decryptDES(secret: String): String = {\n    val key = \"12345678\"\n    val skeySpec = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"DES\")\n\n    val cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\")\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec)\n\n    new String(cipher.doFinal(DatatypeConverter.parseBase64Binary(secret)))\n  }\n}\n", "idx": 901}
{"project": "cipher", "commit_id": "Snippet992167_29826.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, skey);\nbyte[] encrypted = cipher.doFinal(plainText.getBytes());\n", "idx": 902}
{"project": "cipher", "commit_id": "Snippet38116176_20099.java", "target": 0, "func": " public static String deskripsi(String chiperText, String key) {\n   try {\n     SecretKeySpec KS = new SecretKeySpec(key.getBytes(), \"Blowfish\");\n     Cipher cipher = Cipher.getInstance(\"Blowfish\");\n     cipher.init(Cipher.DECRYPT_MODE, KS);\n     byte[] decrypted = cipher.doFinal(Base64.decode(chiperText, Base64.NO_PADDING));\n     return new String(decrypted);\n   } catch (Exception e) {\n     return \"ERROR\";\n   }\n }\n", "idx": 903}
{"project": "cipher", "commit_id": "Snippet3451670_30739.java", "target": 0, "func": "public static void main(String[] args) throws Exception {\n    String username = \"bob@google.org\";\n    String password = \"Password1\";\n    String secretID = \"BlahBlahBlah\";\n    String SALT2 = \"deliciously salty\";\n\n    // Get the Key\n    byte[] key = (SALT2 + username + password).getBytes();\n    System.out.println((SALT2 + username + password).getBytes().length);\n\n    // Need to pad key for AES\n    // TODO: Best way?\n\n    // Generate the secret key specs.\n    SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n\n    // Instantiate the cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n\n    byte[] encrypted = cipher.doFinal((secrectID).getBytes());\n    System.out.println(\"encrypted string: \" + asHex(encrypted));\n\n    cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n    byte[] original = cipher.doFinal(encrypted);\n    String originalString = new String(original);\n    System.out.println(\"Original string: \" + originalString + \"\\nOriginal string (Hex): \" + asHex(original));\n}\n", "idx": 904}
{"project": "cipher", "commit_id": "Snippet36456581_18284.java", "target": 0, "func": "package trytry;\n\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.spec.AlgorithmParameterSpec;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.KeySpec;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.print.DocFlavor.STRING;\n\nimport org.apache.commons.codec.binary.Base64;\n\n\n\npublic class AES\n{\n\n\n    private static SecretKeySpec secretKey ;\n    private static byte[] key ;\n\n    private static String decryptedString;\n    private static String encryptedString;\n\n\n    public static void setKey(String myKey){\n\n\n        MessageDigest sha = null;\n        try {\n            key = myKey.getBytes(\"UTF-8\");\n            System.out.println(key.length);\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n            key = Arrays.copyOf(key, 16); // use only first 128 bit\n            System.out.println(key.length);\n            System.out.println(new String(key,\"UTF-8\"));\n            secretKey = new SecretKeySpec(key, \"AES\");\n\n\n        } catch (NoSuchAlgorithmException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n\n\n\n    }\n\n    public static String getDecryptedString() {\n        return decryptedString;\n    }\n\n    public static void setDecryptedString(String decryptedString) {\n        AES.decryptedString = decryptedString;\n    }\n\n    public static String getEncryptedString() {\n        return encryptedString;\n    }\n\n    public static void setEncryptedString(String encryptedString) {\n        AES.encryptedString = encryptedString;\n    }\n\n    public static String encrypt(String strToEncrypt)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n\n            setEncryptedString(Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))));\n\n        }\n        catch (Exception e)\n        {\n\n            System.out.println(\"Error while encrypting: \"+e.toString());\n        }\n        return null;\n\n    }\n\n    public static String decrypt(String strToDecrypt)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            setDecryptedString(new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt))));\n\n        }\n        catch (Exception e)\n        {\n\n            System.out.println(\"Error while decrypting: \"+e.toString());\n\n        }\n        return null;\n    }\n\n\n    public static void main(String args[])\n    {\n\n                final String strToEncrypt = \"My text to encrypt\";\n                final String strPssword = \"encryptor key\";\n                AES.setKey(strPssword);\n\n                AES.encrypt(strToEncrypt.trim());\n\n                System.out.println(\"String to Encrypt: \" + strToEncrypt); \n                System.out.println(\"Encrypted: \" + AES.getEncryptedString());\n\n                final String strToDecrypt =  AES.getEncryptedString();\n                AES.decrypt(strToDecrypt.trim());\n\n                System.out.println(\"String To Decrypt : \" + strToDecrypt);\n                System.out.println(\"Decrypted : \" + AES.getDecryptedString());\n\n    }\n\n}\n", "idx": 905}
{"project": "cipher", "commit_id": "Snippet42774977_24825.java", "target": 0, "func": "InetAddress inetAddress = InetAddress.getLocalHost();\nKeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\nSecretKey myDesKey = keygenerator.generateKey();\nCipher desCipher;\n\n// Create the cipher\ndesCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\n// Initialize the cipher for encryption\ndesCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nObjectOutputStream oos = new ObjectOutputStream(baos);\noos.writeObject((Object) myDesKey);\noos.flush();\nfinal byte[] bytes = baos.toByteArray();\n\nDatagramPacket sendPacket = new DatagramPacket(bytes, bytes.length, inetAddress, 999);\nsocket.send(sendPacket);\n", "idx": 906}
{"project": "cipher", "commit_id": "Snippet9801748_34229.java", "target": 0, "func": "public static String encryptTest() {\n  String cleartext = \"test1234test1234\";\n  String key = \"TESTKEYTESTKEY12\";\n    byte[] raw = key.getBytes();\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted;\n        encrypted = cipher.doFinal(cleartext.getBytes());\n    return new String(Base64.encode(encrypted,Base64.DEFAULT));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 907}
{"project": "cipher", "commit_id": "Snippet8895123_33578.java", "target": 0, "func": "public static byte[] encrypt(String property) throws GeneralSecurityException, UnsupportedEncodingException {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(password));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(salt, 20));\n        return pbeCipher.doFinal(property.getBytes(\"UTF-8\"));\n    }\n\n    public static String decrypt(byte[] property) throws GeneralSecurityException, IOException {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(password));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(salt, 20));\n        return new String(pbeCipher.doFinal(property));\n    }\n", "idx": 908}
{"project": "cipher", "commit_id": "Snippet15952618_38940.java", "target": 0, "func": "byte[] key = null;\n            try {\n                key = \"1428324560542678\".getBytes(\"UTF-8\");\n            } catch (UnsupportedEncodingException e2) {\n                // TODO Auto-generated catch block\n                e2.printStackTrace();\n            }\n\n            Cipher c = null;\n            try {\n                c = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n            } catch (NoSuchAlgorithmException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (NoSuchPaddingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n\n            SecretKeySpec k =  new SecretKeySpec(key, \"AES\");\n            try {\n                c.init(Cipher.ENCRYPT_MODE, k);\n            } catch (InvalidKeyException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n\n            try {\n                EditText tv1passwordText = (EditText) findViewById(R.id.password);\n\n                byte[] password = tv1passwordText.getText().toString().getBytes(\"UTF-8\");\n\n                byte[] encryptedData = c.doFinal(password);\n", "idx": 909}
{"project": "cipher", "commit_id": "Snippet41036477_22984.java", "target": 0, "func": "    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    outputStream = new CipherOutputStream(new FileOutputStream(encryptedFile), cipher);\n", "idx": 910}
{"project": "cipher", "commit_id": "Snippet3180878_30645.java", "target": 0, "func": "public class AES \n\n{\n\npublic byte[] encrypted;\n\n public byte[] original;\n\n public String originalString;\n\npublic static String asHex (byte buf[]) \n\n{ \n\nStringBuffer strbuf = new StringBuffer(buf.length * 2);\n\n int i; for (i = 0; i < buf.length; i++) \n\n{\n\n if (((int) buf[i] & 0xff) < 0x10) strbuf.append(\"0\"); \n\nstrbuf.append(Long.toString((int) buf[i] & 0xff, 16)); \n\n}\n\n return strbuf.toString();\n\n }\n\n public String AESencryptalgo(byte[] text)\n\n { \n\nString newtext=\"\"; \n\n// Get the KeyGenerator\n\n try\n\n {\n\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n\n    kgen.init(128); // 192 and 256 bits may not be available\n\n // Generate the secret key specs. \n\nSecretKey skey = kgen.generateKey();\n\n byte[] raw = skey.getEncoded();\n\n SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n // Instantiate the cipher Cipher cipher = Cipher.getInstance(\"AES\"); \n\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec); encrypted = cipher.doFinal(text); \n\nSystem.out.println(\"encrypted string: \" + asHex(encrypted)); \n\ncipher.init(Cipher.DECRYPT_MODE, skeySpec); original = cipher.doFinal(encrypted); \n\noriginalString = new String(original); System.out.println(\"Original string: \" + originalString + \" \" + asHex(original));\n\n } \n\ncatch(Exception e)\n\n { } \n\nfinally \n\n{\n\n newtext=new String(encrypted);\n\n System.out.println(\"ENCRYPTED \"+newtext);\n\n//AESdecryptalgo(newtext.getBytes()); \n\nreturn newtext;\n\n }\n\n } \n\npublic String AESdecryptalgo(byte[] text)\n\n { \n\n// Get the KeyGenerator\n\n try\n\n {\n\n KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n\n kgen.init(128); // 192 and 256 bits may not be available \n\n// Generate the secret key specs. \n\nSecretKey skey = kgen.generateKey();\n\n byte[] raw = skey.getEncoded(); \n\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\"); \n\n// Instantiate the cipher\n\n Cipher cipher = Cipher.getInstance(\"AES\"); \n\ncipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n original = cipher.doFinal(text); //Exception occurs here\n\n originalString = new String(original);\n\n System.out.println(\"Original string: \" + originalString + \" \" + asHex(original)); \n\n}\n\n catch(Exception e)\n\n {\n\n System.out.println(\"exception\"); \n\n}\n\n finally\n\n{ \n\nSystem.out.println(\"DECRYPTED \"+originalString);\n\n return originalString;\n\n } \n\n} \n\npublic static void main(String[] args)\n\n{\n\nAES a=new AES();\n\na.AESencryptalgo(\"hello\".getBytes());\n\nSystem.out.println(); \n\n}} \n`\n", "idx": 911}
{"project": "cipher", "commit_id": "Snippet23444400_5805.java", "target": 0, "func": " String key = \"Bar12345Bar12345\"; // 128 bit key\n // Create key and cipher\n Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n Cipher cipher = Cipher.getInstance(\"AES\");\n", "idx": 912}
{"project": "cipher", "commit_id": "Snippet45523058_27597.java", "target": 0, "func": "public static String encrypt(String key, String value) {\n    try {\n        byte[] keyArr = new byte[32];\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] hash = md.digest(key.getBytes(\"US-ASCII\"));//in md5 function 1st line\n        keyArr = arrayCopy(0, hash, 0, keyArr, 16);//in md5 function 1st for loop\n        keyArr = arrayCopy(0, hash, 15, keyArr, 16);//in md5 function 2nd for loop\n        SecretKeySpec skeySpec = new SecretKeySpec(keyArr, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(value.getBytes());\n        String encryptedB64 = new String(Base64.encode(encrypted, Base64.DEFAULT));\n        return encryptedB64;\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n    return null;\n}\nprivate static byte[] arrayCopy(int sourceIndex,byte[] source,int targetIndex,byte[] target,int transferSize){\n    if(!(transferSize >0))\n        return null;\n    if(sourceIndex>=0 && sourceIndex < source.length){\n        int transferCnt=0;\n        int i=sourceIndex;\n        for(int j=targetIndex;;j++,i++){\n            if(targetIndex>=target.length || sourceIndex>=source.length || (++transferCnt>transferSize)){\n                break;\n            }\n            target[j] = source[i];\n        }\n    }else{\n        return null;\n    }\n    return target;\n}\n", "idx": 913}
{"project": "cipher", "commit_id": "Snippet35620681_17527.java", "target": 0, "func": "public class CryptoUtils {\n\n    private static final String ALGORITHM = \"AES\";\n    private static final String TRANSFORMATION = \"AES\";\n\n    public User encrypt(String key, File inputFile, File outputFile)\n            throws CryptoException {\n        User user = doCrypto(Cipher.ENCRYPT_MODE, key, inputFile, outputFile);\n        return user;\n    }\n\n    private User doCrypto(int cipherMode, String key, File inputFile,\n            File outputFile) throws CryptoException {\n        try {\n            Key secretKey = new SecretKeySpec(key.getBytes(), ALGORITHM);\n            Cipher cipher = Cipher.getInstance(TRANSFORMATION);\n            cipher.init(cipherMode, secretKey);\n\n            FileInputStream inputStream = new FileInputStream(inputFile);\n            byte[] inputBytes = new byte[(int) inputFile.length()];\n            inputStream.read(inputBytes);\n\n            byte[] outputBytes = cipher.doFinal(inputBytes);\n\n            FileOutputStream outputStream = new FileOutputStream(outputFile);\n            outputStream.write(outputBytes);\n\n            //Added\n            String eidData = null;\n            String randomKey = null;\n            User user = new User();\n            try{\n             DataInputStream dis = new DataInputStream (new FileInputStream (outputFile));\n\n             byte[] datainBytes = new byte[dis.available()];\n             dis.readFully(datainBytes);\n             dis.close();\n\n             eidData = new String(datainBytes, 0, datainBytes.length);\n             randomKey =  UUID.randomUUID().toString();  \n\n             user.setEiddata(eidData);\n             user.setRandomkey(randomKey);\n\n            }catch(Exception ex){\n                ex.printStackTrace();\n            }\n            //End\n\n            inputStream.close();\n            outputStream.close();\n            return user;\n\n        } catch (Exception ex) {\n            throw new CryptoException(\"Error encrypting/decrypting file\", ex);\n        }\n    }\n}\n\nException Trace:\n-----------------\nFeb 25, 2016 12:40:39 PM org.apache.catalina.core.ApplicationDispatcher invoke\nSEVERE: Servlet.service() for servlet mvc-dispatcher threw exception\njava.lang.IllegalArgumentException: [?] is not a hexadecimal digit\n    at org.apache.catalina.util.RequestUtil.convertHexDigit(RequestUtil.java:316)\n    at org.apache.catalina.util.RequestUtil.parseParameters(RequestUtil.java:400)\n    at org.apache.catalina.util.RequestUtil.parseParameters(RequestUtil.java:153)\n    at org.apache.catalina.core.ApplicationHttpRequest.mergeParameters(ApplicationHttpRequest.java:894)\n    at org.apache.catalina.core.ApplicationHttpRequest.parseParameters(ApplicationHttpRequest.java:756)\n    at org.apache.catalina.core.ApplicationHttpRequest.getParameterValues(ApplicationHttpRequest.java:416)\n    at org.springframework.web.context.request.ServletWebRequest.getParameterValues(ServletWebRequest.java:121)\n    at org.springframework.web.method.annotation.RequestParamMethodArgumentResolver.resolveName(RequestParamMethodArgumentResolver.java:171)\n    at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:82)\n    at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:74)\n    at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:155)\n    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:117)\n    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:96)\n    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:617)\n    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:578)\n    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)\n    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:900)\n    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)\n    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)\n    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n    at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:749)\n    at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:487)\n    at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:412)\n    at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:339)\n    at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)\n    at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)\n    at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)\n    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)\n    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)\n    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)\n    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)\n    at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:947)\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)\n    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1009)\n    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)\n    at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1852)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n    at java.lang.Thread.run(Unknown Source)\n", "idx": 914}
{"project": "cipher", "commit_id": "Snippet17925215_983.java", "target": 0, "func": "public class DES {\n\n  private static byte[] iv = {1,2,3,4,5,6,7,8};\n\n  public static String encryptDES(String encryptString, String encryptKey) throws Exception {\n    IvParameterSpec zeroIv = new IvParameterSpec(iv);\n    SecretKeySpec key = new SecretKeySpec(encryptKey.getBytes(), \"DES\");\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, key, zeroIv);\n    byte[] encryptedData = cipher.doFinal(encryptString.getBytes());\n\n    return Base64.encode(encryptedData);\n  }\n\n  public static String decryptDES(String decryptString, String decryptKey) throws Exception {\n    byte[] byteMi = new Base64().decode(decryptString);\n    IvParameterSpec zeroIv = new IvParameterSpec(iv);\n    SecretKeySpec key = new SecretKeySpec(decryptKey.getBytes(), \"DES\");\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, key, zeroIv);\n    byte decryptedData[] = cipher.doFinal(byteMi);\n\n    return new String(decryptedData);\n  }\n}\n", "idx": 915}
{"project": "cipher", "commit_id": "Snippet1760785_30070.java", "target": 0, "func": "package org.temp2.cod1;\nimport java.security.*;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.io.*;\n\npublic class Code1 {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {\n    String s = \"9882623867\";\n    byte[] plaintext = s.getBytes(\"UTF-16\");\n    String s2 = \"supernova\";\n    byte[] key = s2.getBytes(\"UTF-16\");\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec k =  new SecretKeySpec(key, \"AES\");\n    c.init(Cipher.ENCRYPT_MODE, k);\n    byte[] encryptedData = c.doFinal(plaintext);\n    System.out.println(encryptedData);\n}\n}\n", "idx": 916}
{"project": "cipher", "commit_id": "Snippet10696814_34992.java", "target": 0, "func": "private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n", "idx": 917}
{"project": "cipher", "commit_id": "Snippet15472192_38525.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport sun.misc.BASE64Encoder;\nimport sun.misc.BASE64Decoder;\n\npublic class AESExample\n{\n    public static void main(String[] args)\n    {\n        try\n        {\n            String plainData = \"my name is laksahan\", cipherText, decryptedText;\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n            keyGen.init(128);\n            SecretKey secretKey = keyGen.generateKey();\n            cipherText = encrypt(plainData, secretKey);\n            System.out.println(cipherText);\n            decryptedText = decrypt(cipherText, secretKey);\n            System.out.println(decryptedText);\n        } catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n\n    }\n\n    public static String encrypt(String plainData, SecretKey secretKey) throws Exception\n    {\n        Cipher aesCipher = Cipher.getInstance(\"AES\");\n        aesCipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] byteDataToEncrypt = plainData.getBytes();\n        byte[] byteCipherText = aesCipher.doFinal(byteDataToEncrypt);\n        return new BASE64Encoder().encode(byteCipherText);\n    }\n\n    public static String decrypt(String cipherData, SecretKey secretKey) throws Exception\n    {\n        byte[] data = new BASE64Decoder().decodeBuffer(cipherData);\n        Cipher aesCipher = Cipher.getInstance(\"AES\");\n        aesCipher.init(Cipher.DECRYPT_MODE, secretKey);\n        byte[] plainData = aesCipher.doFinal(data);\n        return new String(plainData);\n    }\n\n}\n", "idx": 918}
{"project": "cipher", "commit_id": "Snippet14452489_37719.java", "target": 0, "func": "public class MainClass {\n     public static void main(String[] args) throws Exception {\n            Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());        \n            byte[] input = \" www.java2s.com \".getBytes();\n            byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,\n                0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };\n\n\n            SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\", \"BC\");\n            System.out.println(\"input text : \" + new String(input));\n\n            // encryption pass\n\n            byte[] cipherText = new byte[input.length];\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n            ctLength += cipher.doFinal(cipherText, ctLength);\n            System.out.println(\"cipher text: \" + new String(cipherText) + \" bytes: \" + ctLength);\n\n            // decryption pass\n\n            byte[] plainText = new byte[ctLength];\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);\n            ptLength += cipher.doFinal(plainText, ptLength);\n            System.out.println(\"plain text : \" + new String(plainText) + \" bytes: \" + ptLength);\n          }\n}\n", "idx": 919}
{"project": "cipher", "commit_id": "Snippet41005341_22914.java", "target": 0, "func": "String hexCipherText = \"539b333b39706d149028cfe1d9d4a407\";\nString hexSecretKey =  \"80000000000000000000000000000000\" +\n                       \"00000000000000000000000000000001\";\n\nbyte[] secretKey = DatatypeConverter.parseHexBinary (hexSecretKey);\nbyte[] cipherText = DatatypeConverter.parseHexBinary (hexCipherText);\n\nCipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\nSecretKeySpec secretKeySpec = new SecretKeySpec(secretKey,\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n\nbyte[] plainText = cipher.doFinal(cipherText);\nString hexPlainText = DatatypeConverter.printHexBinary(plainText);\n", "idx": 920}
{"project": "cipher", "commit_id": "Snippet20976375_3565.java", "target": 0, "func": "    String key1 = \"1234567812345678\";\n    byte[] key2 = key1.getBytes();\n    SecretKeySpec secret = new SecretKeySpec(key2, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secret);\n    byte[] encrypted = cipher.doFinal(msg.getBytes());\n    System.out.println(\"Encrypted info: \" + encrypted);\n\n    String send = encrypted.toString();\n    bytebuf = ByteBuffer.allocate(48);\n    bytebuf.clear();\n    bytebuf.put(send.getBytes());\n\n    bytebuf.flip();\n\n    while(bytebuf.hasRemaining()) {\n        nBytes += client.write(bytebuf);\n    }\n", "idx": 921}
{"project": "cipher", "commit_id": "Snippet23361841_5706.java", "target": 0, "func": "private final static String algorithm = \"PBKDF2WithHmacSHA1\";\n\nprivate final static String HEX = \"0123456789ABCDEF\";\n\nprivate static final String CP_ALGORITH = \"AES\";\nprivate static final String CP_KEY = \"PUTsomeKEYinHere\";\n\npublic static String cipher(String cipherKey, String data) throws NoSuchAlgorithmException, \n                    InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, \n                    IllegalBlockSizeException, BadPaddingException {\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(algorithm);\n    KeySpec spec = new PBEKeySpec(cipherKey.toCharArray(), cipherKey.getBytes(), 128, 256);\n    SecretKey tmp = skf.generateSecret(spec);\n    SecretKey key = new SecretKeySpec(tmp.getEncoded(), CP_ALGORITH);\n    Cipher cipher = Cipher.getInstance(CP_ALGORITH);\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    return toHex(cipher.doFinal(data.getBytes()));\n}\n\npublic static String decipher(String cipherKey, String data) throws NoSuchAlgorithmException, \n                        InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, \n                        IllegalBlockSizeException, BadPaddingException {\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(algorithm);\n    KeySpec spec = new PBEKeySpec(cipherKey.toCharArray(), cipherKey.getBytes(), 128, 256);\n    SecretKey tmp = skf.generateSecret(spec);\n    SecretKey key = new SecretKeySpec(tmp.getEncoded(), CP_ALGORITH);\n    Cipher cipher = Cipher.getInstance(CP_ALGORITH);\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    return new String(cipher.doFinal(toByte(data)));\n}\n\nprivate static byte[] toByte(String data) throws NullPointerException{\n    int len = data.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(data.substring(2*i, 2*i+2), 16).byteValue();\n    return result;\n}\n\nprivate static String toHex(byte[] doFinal) {\n    StringBuffer result = new StringBuffer(2*doFinal.length);\n    for (int i = 0; i < doFinal.length; i++) {\n        result.append(HEX.charAt((doFinal[i]>>4)&0x0f)).append(HEX.charAt(doFinal[i]&0x0f));\n    }\n    return result.toString();\n}\n", "idx": 922}
{"project": "cipher", "commit_id": "Snippet858476_29768.java", "target": 0, "func": "public void mytestSimple(long code, String password) throws Exception {\n    SecretKey key = new SecretKeySpec(password.getBytes(), \"DES\");\n    Cipher ecipher = Cipher.getInstance(\"DES\");\n    ecipher.init(Cipher.ENCRYPT_MODE, key);\n    System.out.println(ecipher.getOutputSize(8));\n\n    byte[] encrypted = ecipher.doFinal(numberToBytes(code));\n    System.out.println(encrypted + \"--\" + encrypted.length);\n\n    Cipher dcipher = Cipher.getInstance(\"DES\");\n    dcipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] decrypted = dcipher.doFinal(encrypted);\n    System.out.println(bytesToNumber(decrypted) + \"--\" + decrypted.length);\n}\n\npublic void testSimple() throws Exception {\n    mytestSimple(981762654986L, \"password\");\n}\n", "idx": 923}
{"project": "cipher", "commit_id": "Snippet45285345_27408.java", "target": 0, "func": "@Override\npublic byte[] encrypt(byte[] input) throws Exception {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/\" + getPadding(), \"BC\");\n    cipher.init(Cipher.ENCRYPT_MODE, getKey());\n    byte[] output = getBytesForCipher(cipher, input);\n    int ctLength = cipher.update(input, 0, input.length, output, 0);\n    updateHash(input);\n    cipher.doFinal(getDigest(), 0, getDigest().length, output, ctLength);\n    return output;\n}\n\nprotected byte[] getBytesForCipher(Cipher cipher, byte[] input) {\n    return new byte[cipher.getOutputSize(input.length + hash.getDigestLength())];\n}\n\nprotected void updateHash(byte[] input) {\n    hash.update(input);\n}\n\n\npublic byte[] decrypt(byte[] input) throws Exception {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/\" + getPadding(), \"BC\");\n    cipher.init(Cipher.DECRYPT_MODE, getKey());\n    byte[] output = new byte[cipher.getOutputSize(input.length)];\n    int ctLength = cipher.update(input, 0, input.length, output, 0);\n    cipher.doFinal(output, ctLength);\n    return removeHash(output);\n}\n\nprotected byte[] removeHash(byte[] output) {\n    int messageLength = output.length - hash.getDigestLength();\n    hash.update(output, 0, output.length - hash.getDigestLength());;\n    byte[] realOutput = new byte[messageLength];\n    System.arraycopy(output, 0, realOutput, 0, messageLength);\n    messageValid = isValid(output);\n    return realOutput;\n}\n\nprivate boolean isValid(byte[] output) {\n    int messageLength = output.length - hash.getDigestLength();\n    byte[] messageHash = new byte[hash.getDigestLength()];\n    System.arraycopy(output, messageLength, messageHash, 0, messageHash.length);\n    return MessageDigest.isEqual(hash.digest(), messageHash);\n}\n", "idx": 924}
{"project": "cipher", "commit_id": "Snippet44239884_26294.java", "target": 0, "func": "import com.sun.org.apache.xml.internal.security.utils.Base64;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.Key;\n\npublic class MyClass {\n\n    public static void main(String[] args) {\n        String data = \"Arnab C\";\n        final String enc = DarKnight.getEncrypted(data);\n        System.out.println(\"Encrypted : \" + enc);\n        System.out.println(\"Decrypted : \" + DarKnight.getDecrypted(enc));\n    }\n\n    static class DarKnight {\n\n        private static final String ALGORITHM = \"AES\";\n\n        private static final byte[] SALT = \"tHeApAcHe6410111\".getBytes();// THE KEY MUST BE SAME\n        private static final String X = DarKnight.class.getSimpleName();\n\n        static String getEncrypted(String plainText) {\n\n            if (plainText == null) {\n                return null;\n            }\n\n            Key salt = getSalt();\n\n            try {\n                Cipher cipher = Cipher.getInstance(ALGORITHM);\n                cipher.init(Cipher.ENCRYPT_MODE, salt);\n                byte[] encodedValue = cipher.doFinal(plainText.getBytes());\n                return Base64.encode(encodedValue);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n            throw new IllegalArgumentException(\"Failed to encrypt data\");\n        }\n\n        public static String getDecrypted(String encodedText) {\n\n            if (encodedText == null) {\n                return null;\n            }\n\n            Key salt = getSalt();\n            try {\n                Cipher cipher = Cipher.getInstance(ALGORITHM);\n                cipher.init(Cipher.DECRYPT_MODE, salt);\n                byte[] decodedValue = Base64.decode(encodedText);\n                byte[] decValue = cipher.doFinal(decodedValue);\n                return new String(decValue);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return null;\n        }\n\n        static Key getSalt() {\n            return new SecretKeySpec(SALT, ALGORITHM);\n        }\n\n    }\n}\n", "idx": 925}
{"project": "cipher", "commit_id": "Snippet28680888_10833.java", "target": 0, "func": "private void encrypt() {\n    if (this.sks == null){\n        // make toast and tell user to generate the key\n    } else {\n        try {\n            Cipher c = Cipher.getInstance(\"AES\");\n            // use the class key spec to encrypt\n            c.init(Cipher.ENCRYPT_MODE, this.sks);\n            encodedBytes = c.doFinal(getData_str.getBytes());\n            String encoded = Base64\n                    .encodeToString(encodedBytes, Base64.DEFAULT);\n            System.out.println(\" \" + encoded);\n        } catch (Exception e) {\n            Log.e(TAG, \"AES encryption error\");\n        }\n    }\n}\n", "idx": 926}
{"project": "cipher", "commit_id": "Snippet15472192_38526.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Encoder;\nimport sun.misc.BASE64Decoder;\n\npublic class AESExample\n{\n\n    public static void main(String[] args)\n    {\n        try\n        {\n            byte[]key={-4, -14, 106, -75, -9, 65, -95, 77, -52, 73, -87, -101, 80, 94, -59, -66};\n            String plainData = \"my name is laksahan\", cipherText, decryptedText;\n            System.out.println(key.length);\n            cipherText = encrypt(plainData, key);\n            System.out.println(cipherText);\n            decryptedText = decrypt(cipherText, key);\n            System.out.println(decryptedText);\n        } catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n    public static String encrypt(String plainData, byte[] key) throws Exception\n    {\n        Cipher aesCipher = Cipher.getInstance(\"AES\");\n        SecretKeySpec keySpec = new SecretKeySpec(key, \"AES\");\n        aesCipher.init(Cipher.ENCRYPT_MODE, keySpec);\n        byte[] byteDataToEncrypt = plainData.getBytes();\n        byte[] byteCipherText = aesCipher.doFinal(byteDataToEncrypt);\n        return new BASE64Encoder().encode(byteCipherText);\n    }\n\n    public static String decrypt(String cipherData, byte[] key) throws Exception\n    {\n        byte[] data = new BASE64Decoder().decodeBuffer(cipherData);\n        SecretKeySpec keySpec = new SecretKeySpec(key, \"AES\");\n        Cipher aesCipher = Cipher.getInstance(\"AES\");\n        aesCipher.init(Cipher.DECRYPT_MODE, keySpec);\n        byte[] plainData = aesCipher.doFinal(data);\n        return new String(plainData);\n    }\n\n}\n", "idx": 927}
{"project": "cipher", "commit_id": "Snippet13409628_36928.java", "target": 0, "func": "    package au.gov.dhsJobSeeker.main.readwriteprefssettings.util;\n\n    import java.security.SecureRandom;\n\n    import javax.crypto.Cipher;\n    import javax.crypto.KeyGenerator;\n    import javax.crypto.SecretKey;\n    import javax.crypto.spec.SecretKeySpec;\n\n    import android.util.Base64;\n\n    public class EncodeDecodeAES {\n\nprivate final static String HEX = \"0123456789ABCDEF\";\nprivate final static int JELLY_BEAN_4_2 = 17;\nprivate final static byte[] key = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n\n\n// static {\n// Security.addProvider(new BouncyCastleProvider());\n// }\n\npublic static String encrypt(String seed, String cleartext) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    String fromHex = toHex(result);\n    String base64 = new String(Base64.encodeToString(fromHex.getBytes(), 0));\n    return base64;\n}\n\n\npublic static String decrypt(String seed, String encrypted) throws Exception {\n    byte[] seedByte = seed.getBytes();\n    System.arraycopy(seedByte, 0, key, 0, ((seedByte.length < 16) ? seedByte.length : 16));\n    String base64 = new String(Base64.decode(encrypted, 0));\n    byte[] rawKey = getRawKey(seedByte);\n    byte[] enc = toByte(base64);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\n\npublic static byte[] encryptBytes(String seed, byte[] cleartext) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext);\n    return result;\n}\n\n\npublic static byte[] decryptBytes(String seed, byte[] encrypted) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = decrypt(rawKey, encrypted);\n    return result;\n}\n\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\"); // , \"SC\");\n    SecureRandom sr = null;\n    if (android.os.Build.VERSION.SDK_INT >= JELLY_BEAN_4_2) {\n        sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n    } else {\n        sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    }\n    sr.setSeed(seed);\n    try {\n        kgen.init(256, sr);\n        // kgen.init(128, sr);\n    } catch (Exception e) {\n        // Log.w(LOG, \"This device doesn't suppor 256bits, trying 192bits.\");\n        try {\n            kgen.init(192, sr);\n        } catch (Exception e1) {\n            // Log.w(LOG, \"This device doesn't suppor 192bits, trying 128bits.\");\n            kgen.init(128, sr);\n        }\n    }\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\"); // /ECB/PKCS7Padding\", \"SC\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\"); // /ECB/PKCS7Padding\", \"SC\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\n\n\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length() / 2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2), 16).byteValue();\n    return result;\n}\n\n\npublic static String toHex(byte[] buf) {\n    if (buf == null) return \"\";\n    StringBuffer result = new StringBuffer(2 * buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\n\n\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n}\n\n    }\n", "idx": 928}
{"project": "cipher", "commit_id": "Snippet11601201_35453.java", "target": 0, "func": "   Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(Hex.decodeHex(encryptionKey.toCharArray()), \"AES\"));\n    decrypted = new String(cipher.doFinal(Hex.decodeHex(enc.toCharArray())));\n", "idx": 929}
{"project": "cipher", "commit_id": "Snippet10825894_35099.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\nimport org.bouncycastle.util.encoders.Hex;\n\n/**\n *\n * @author aealvarenga\n */\npublic class TripleDesCipherFromDES {\n\n    public byte[] desEncryptionECBCipher(String key, String text) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException {\n        Security.addProvider(new BouncyCastleProvider());        \n        SecretKey keySpec = new SecretKeySpec(this.hexStringToByteArray(key), \"DES\");\n        final Cipher encrypter = Cipher.getInstance(\"DES/ECB/ZeroBytePadding\", \"BC\");\n        encrypter.init(Cipher.ENCRYPT_MODE, keySpec);\n        final byte[] plainTextBytes = text.getBytes(\"utf-8\");\n        final byte[] cipherText = encrypter.doFinal(plainTextBytes);\n        return cipherText;\n    }\n\n    public String desDecriptionECBCipher(String key, byte[] cipherText) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, UnsupportedEncodingException, BadPaddingException {\n        Security.addProvider(new BouncyCastleProvider());\n        SecretKey keySpec = new SecretKeySpec(this.hexStringToByteArray(key), \"DES\");\n        final Cipher decrypter = Cipher.getInstance(\"DES/ECB/ZeroBytePadding\", \"BC\");        \n        decrypter.init(Cipher.DECRYPT_MODE, keySpec);\n        final byte[] plainText = decrypter.doFinal(cipherText);\n        return new String(plainText, \"UTF-8\");\n    }\n\n    public byte[] desEncryptionCBCCipher(String key, String text) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, InvalidAlgorithmParameterException {\n        Security.addProvider(new BouncyCastleProvider());\n        byte[] iv = new byte[]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};\n        IvParameterSpec ivSpec = new IvParameterSpec(iv);\n\n\n        SecretKey keySpec = new SecretKeySpec(this.hexStringToByteArray(key), \"DES\");\n        final Cipher encrypter = Cipher.getInstance(\"DES/CBC/ZeroBytePadding\", \"BC\");\n        encrypter.init(Cipher.ENCRYPT_MODE, keySpec,ivSpec);\n        final byte[] plainTextBytes = text.getBytes(\"utf-8\");\n        final byte[] cipherText = encrypter.doFinal(plainTextBytes);\n        return cipherText;\n    }    \n\n    public String desDecriptionCBCCipher(String key, byte[] cipherText) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, UnsupportedEncodingException, BadPaddingException, InvalidAlgorithmParameterException {\n        Security.addProvider(new BouncyCastleProvider());\n        byte[] iv = new byte[]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};\n        IvParameterSpec ivSpec = new IvParameterSpec(iv);        \n        SecretKey keySpec = new SecretKeySpec(this.hexStringToByteArray(key), \"DES\");\n        final Cipher decrypter = Cipher.getInstance(\"DES/CBC/ZeroBytePadding\", \"BC\");        \n        decrypter.init(Cipher.DECRYPT_MODE, keySpec,ivSpec);\n        final byte[] plainText = decrypter.doFinal(cipherText);\n        return new String(plainText, \"UTF-8\");\n    }\n\n    public String asciiToHex(String ascii) {\n        StringBuilder hex = new StringBuilder();\n        for (int i = 0; i < ascii.length(); i++) {\n            hex.append(Integer.toHexString(ascii.charAt(i)));\n        }\n        return hex.toString();\n    }\n\n    public byte[] hexStringToByteArray(String hexstring) {\n        int i = 0;\n        if (hexstring == null || hexstring.length() <= 0) {\n            return null;\n        }\n        String stringvector = \"0123456789ABCDEF\";\n        byte[] bytevector = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};\n        byte[] out = new byte[hexstring.length() / 2];\n        while (i < hexstring.length() - 1) {\n            byte ch = 0x00;\n            //Convert high nibble charater to a hex byte\n            ch = (byte) (ch | bytevector[stringvector.indexOf(hexstring.charAt(i))]);\n            ch = (byte) (ch << 4); //move this to the high bit\n\n            //Convert the low nibble to a hexbyte\n            ch = (byte) (ch | bytevector[stringvector.indexOf(hexstring.charAt(i + 1))]); //next hex value\n            out[i / 2] = ch;\n            i++;\n            i++;\n        }\n        return out;\n    }    \n\n    public String tdesedeECBCipher(String text, String doubleLenghtKey) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException {\n        //key definition\n        String key1 = doubleLenghtKey.substring(0, 16);\n        String key2 = doubleLenghtKey.substring(16, 32);\n        String key3 = key1;\n\n        byte[] codedText = new TripleDesCipherFromDES().desEncryptionECBCipher(key1, text);\n        String decodedText = new TripleDesCipherFromDES().desDecriptionECBCipher(key2, codedText);\n        byte[] codedTextFinal = new TripleDesCipherFromDES().desEncryptionECBCipher(key3, decodedText);\n\n      return new String(Hex.encode(codedTextFinal));\n    }\n\n    public String tdesedeCBCCipher(String text, String doubleLenghtKey) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, InvalidAlgorithmParameterException {\n        //key definition\n        String key1 = doubleLenghtKey.substring(0, 16);\n        String key2 = doubleLenghtKey.substring(16, 32);\n        String key3 = key1;\n\n        byte[] codedText = new TripleDesCipherFromDES().desEncryptionCBCCipher(key1, text);\n        String decodedText = new TripleDesCipherFromDES().desDecriptionCBCCipher(key2, codedText);\n        byte[] codedTextFinal = new TripleDesCipherFromDES().desEncryptionCBCCipher(key3, decodedText);\n\n       return new String(Hex.encode(codedTextFinal));\n    }    \n\n    public static void main(String[] args) throws Exception {\n        String text = \"FFFF9876543210E0\";        \n        String key =  \"0123456789ABCDEFFEDCBA9876543210\";\n\n        System.out.println(new TripleDesCipherFromDES().tdesedeECBCipher(text,key));\n        System.out.println(new TripleDesCipherFromDES().tdesedeCBCCipher(text,key));\n    }\n}\n", "idx": 930}
{"project": "cipher", "commit_id": "Snippet39839224_21726.java", "target": 0, "func": "private static void stackOverflow15554296()\n    throws\n        NoSuchAlgorithmException, NoSuchPaddingException,        \n        InvalidKeyException, IllegalBlockSizeException,\n        BadPaddingException\n{\n\n    // prepare key\n    KeyGenerator keygen = KeyGenerator.getInstance(\"AES\");\n    SecretKey aesKey = keygen.generateKey();\n    String aesKeyForFutureUse = Base64.getEncoder().encodeToString(\n            aesKey.getEncoded()\n    );\n\n    // cipher engine\n    Cipher aesCipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n    // cipher input\n    aesCipher.init(Cipher.ENCRYPT_MODE, aesKey);\n    byte[] clearTextBuff = \"Text to encode\".getBytes();\n    byte[] cipherTextBuff = aesCipher.doFinal(clearTextBuff);\n\n    // recreate key\n    byte[] aesKeyBuff = Base64.getDecoder().decode(aesKeyForFutureUse);\n    SecretKey aesDecryptKey = new SecretKeySpec(aesKeyBuff, \"AES\");\n\n    // decipher input\n    aesCipher.init(Cipher.DECRYPT_MODE, aesDecryptKey);\n    byte[] decipheredBuff = aesCipher.doFinal(cipherTextBuff);\n    System.out.println(new String(decipheredBuff));\n}\n", "idx": 931}
{"project": "cipher", "commit_id": "Snippet16978578_272.java", "target": 0, "func": "import java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.security.GeneralSecurityException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class ProtectedConfigFile {\n\nprivate static final char[] PASSWORD = \"enfldsgbnlsngdlksdsgm\".toCharArray();\nprivate static final byte[] SALT = {\n    (byte) 0xde, (byte) 0x33, (byte) 0x10, (byte) 0x12,\n    (byte) 0xde, (byte) 0x33, (byte) 0x10, (byte) 0x12,\n};\n\npublic static void main(String[] args) throws Exception {\n    String originalPassword = \"secret\";\n    System.out.println(\"Original password: \" + originalPassword);\n    String encryptedPassword = encrypt(originalPassword);\n    System.out.println(\"Encrypted password: \" + encryptedPassword);\n    String decryptedPassword = decrypt(encryptedPassword);\n    System.out.println(\"Decrypted password: \" + decryptedPassword);\n}\n\nprivate static String encrypt(String property) \nthrows GeneralSecurityException, UnsupportedEncodingException {\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n    Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n    return base64Encode(pbeCipher.doFinal(property.getBytes(\"UTF-8\")));\n}\n\nprivate static String base64Encode(byte[] bytes) {\n    // NB: This class is internal, and you probably should use another impl\n    return new BASE64Encoder().encode(bytes);\n}\n\nprivate static String decrypt(String property) \nthrows GeneralSecurityException,       IOException {\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n    Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n    return new String(pbeCipher.doFinal(base64Decode(property)), \"UTF-8\");\n}\n\nprivate static byte[] base64Decode(String property) throws IOException {\n    // NB: This class is internal, and you probably should use another impl\n    return new BASE64Decoder().decodeBuffer(property);\n}\n\n}\n", "idx": 932}
{"project": "cipher", "commit_id": "Snippet37098928_19047.java", "target": 0, "func": "        private static final String ALGORITHM = \"AES\";\n\n        private static final String TRANSFORMATION = \"AES\";\n\n        public static  void encrypt(String key, File inputFile, File outputFile)\n                throws ExtendedException {\n            doCrypto(Cipher.ENCRYPT_MODE, key, inputFile, outputFile);\n        }\n\n        public static  void decrypt(String key, File inputFile, File outputFile)\n                throws ExtendedException {\n            doCrypto(Cipher.DECRYPT_MODE, key, inputFile, outputFile);\n        }\n\n        private static void doCrypto(int cipherMode, String key, File inputFile,\n                File outputFile) throws ExtendedException {\n            try {\n                Key secretKey = new SecretKeySpec(key.getBytes(), ALGORITHM);\n                Cipher cipher = Cipher.getInstance(TRANSFORMATION);\n                cipher.init(cipherMode, secretKey);\n\n                FileInputStream inputStream = new FileInputStream(inputFile);\n\n\n                CipherOutputStream out = new CipherOutputStream(new FileOutputStream(outputFile), cipher);\n                byte[] buffer = new byte[8192];\n                byte[] outputBytes = null;\n                FileOutputStream outputStream = new FileOutputStream(outputFile);\n                int count;\n                while ((count = inputStream.read(buffer)) > 0)\n                {\n                    out.write(buffer, 0, count);\n                    outputBytes = cipher.doFinal(buffer);\n\n                }\n\n\n                inputStream.close();\n                outputStream.close();\n\n            } catch (NoSuchPaddingException | NoSuchAlgorithmException\n                    | InvalidKeyException | BadPaddingException\n                    | IllegalBlockSizeException | IOException ex) {\n                throw new ExtendedException(\"Error encrypting/decrypting file\", ex);\n            }\n        }\n", "idx": 933}
{"project": "cipher", "commit_id": "Snippet35853757_17727.java", "target": 0, "func": "public class Password1 {\n\n    private static final String ALGO = \"AES\";\n    private static byte[] keyValue = new byte[]{'t','h','y','u','e','f','z','s','y','k','f','l','d','a','b','m'};\n\n    public static void main(String[] args) {\n        //Password1 p = new Password1();\n        Scanner sc = new Scanner(System.in);\n        String i = sc.nextLine();\n        System.out.println(\"Password = \"+i);\n\n        try {\n            String en = encrypt(i);\n            System.out.println(en);\n            String dec = decrypt(en);\n\n            System.out.println(\"Encrypted = \" + en);\n            System.out.println(\"Decrypted = \" + dec);\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    public static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes(\"UTF-8\"));\n        String encrypted = new BASE64Encoder().encode(encVal);\n\n        return encrypted;\n    }\n\n    public static String decrypt(String encrypted) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        //Byte bencrypted = Byte.valueOf(encrypted);\n        byte[] decoded = new BASE64Decoder().decodeBuffer(encrypted);\n\n        byte[] decValue = c.doFinal(decoded);\n        String decrypted = new String(decValue);\n        return decrypted;\n    }\n\n    private static Key generateKey() throws Exception {\n        MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n        keyValue = sha.digest(keyValue);\n        keyValue = Arrays.copyOf(keyValue, 16);\n        SecretKeySpec key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n    }\n\n}\n", "idx": 934}
{"project": "cipher", "commit_id": "Snippet31297917_13423.java", "target": 0, "func": "package com.test.demo;\n\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.log4j.Logger;\n\npublic class StringEncryptor {\n\n    private static final Logger LOGGER = Logger.getLogger(StringEncryptor.class);\n\n    public static String getEncryptedString(String input){\n\n        if(input == null){\n            return null;\n        }\n\n        String keyString = \"C0BAE23DF8B51807B3E17D21925FADF2\";//32 byte string\n        byte[] keyValue = DatatypeConverter.parseHexBinary(keyString);\n        Key key = new SecretKeySpec(keyValue, \"AES\");\n        Cipher c1 = null;\n        try {\n            c1 = Cipher.getInstance(\"AES\");\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n            LOGGER.error(\"error getting cypher\", e);\n            return null;\n        }\n        try {\n            c1.init(Cipher.ENCRYPT_MODE, key);\n        } catch (InvalidKeyException e) {\n            LOGGER.error(\"error initalising cypher\", e);\n            return null;\n        }\n\n        byte[] encVal = null;\n        try {\n            encVal = c1.doFinal(input.getBytes());\n        } catch (IllegalBlockSizeException | BadPaddingException e) {\n            LOGGER.error(\"error performing encryption\", e);\n            return null;\n        }\n        String encryptedValue = Base64.encodeBase64String(encVal);\n\n        return encryptedValue;\n    }\n}\n", "idx": 935}
{"project": "cipher", "commit_id": "Snippet29419826_11436.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AdvancedEncryptionStandard\n{\n    private byte[] key;\n\n    private static final String ALGORITHM = \"AES\";\n\n    public AdvancedEncryptionStandard(byte[] key)\n    {\n        this.key = key;\n    }\n\n    /**\n     * Encrypts the given plain text\n     *\n     * @param plainText The plain text to encrypt\n     */\n    public byte[] encrypt(byte[] plainText) throws Exception\n    {\n        SecretKeySpec secretKey = new SecretKeySpec(key, ALGORITHM);\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n        return cipher.doFinal(plainText);\n    }\n\n    /**\n     * Decrypts the given byte array\n     *\n     * @param cipherText The data to decrypt\n     */\n    public byte[] decrypt(byte[] cipherText) throws Exception\n    {\n        SecretKeySpec secretKey = new SecretKeySpec(key, ALGORITHM);\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n        return cipher.doFinal(cipherText);\n    }\n}\n", "idx": 936}
{"project": "cipher", "commit_id": "Snippet12861325_36516.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"Blowfish/NCFB/NoPadding\");\n", "idx": 937}
{"project": "cipher", "commit_id": "Snippet37188683_19114.java", "target": 0, "func": "private static SecretKeySpec createKeyFromString(String plainKey) {\n\n    MessageDigest sha = null;\n    byte[] key;\n    SecretKeySpec secretKey = null;\n\n    try {\n\n        key = plainKey.getBytes(\"UTF-8\");\n        sha = MessageDigest.getInstance(\"SHA-1\");\n        key = sha.digest(key);\n        key = Arrays.copyOf(key, 16);\n\n        secretKey = new SecretKeySpec(key, \"AES\");\n\n    } catch(NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch(UnsupportedEncodingException e) {\n        e.printStackTrace();\n    }\n\n    return secretKey;\n\n}\n\nprivate static String AESCrypt(String password, SecretKeySpec secretKey) {\n    try {\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        return Base64.getEncoder().encodeToString(cipher.doFinal(password.getBytes(\"UTF-8\")));\n\n    } catch (Exception e) {\n        System.out.println(e.toString());\n    }\n    return null;\n}\n\n\npublic static void main(String[] args) {\n\n    System.out.println(Pay.AESCrypt(\"password\", Pay.createKeyFromString(\"key\")));\n\n}\n", "idx": 938}
{"project": "cipher", "commit_id": "Snippet40237242_22155.java", "target": 0, "func": "protected String decrypt(String value){\n    try {\n        final byte[] bytes = value!=null ? Base64.decode(value,Base64.DEFAULT) : new byte[0];\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec( Secure.getString(context.getContentResolver(), Secure.ANDROID_ID).getBytes(UTF8), 20));\n        return new String(pbeCipher.doFinal(bytes),UTF8);\n\n    } catch( Exception e) {\n        throw new RuntimeException(e);\n    }\n}\n", "idx": 939}
{"project": "cipher", "commit_id": "Snippet42227491_24193.java", "target": 0, "func": "Cipher.getInstance(\"DES/ECB/NoPadding\")", "idx": 940}
{"project": "cipher", "commit_id": "Snippet44531094_26649.java", "target": 0, "func": "public void aliceEncrypt(byte[] plaintext, byte[] sharedSecret, Socket socket) {\n\n    try {\n        Cipher cipher = Cipher.getInstance(\"RC4/ECB/NoPadding\");\n        Key sk = new SecretKeySpec(sharedSecret, \"RC4\");\n        cipher.init(Cipher.ENCRYPT_MODE, sk);\n        CipherOutputStream cos = new CipherOutputStream(socket.getOutputStream(), cipher);\n        ObjectOutputStream oos = new ObjectOutputStream(cos);\n        oos.writeObject(plaintext);\n        oos.close();\n\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n\n\npublic byte[] bobDecrypt( byte[] sharedSecret, Socket socket) {\n\n\n    try {\n        Cipher cipher = Cipher.getInstance(\"RC4/ECB/NoPadding\");\n        Key sk = new SecretKeySpec(sharedSecret, \"RC4\");\n        cipher.init(Cipher.DECRYPT_MODE, sk);\n        CipherInputStream cis = new CipherInputStream(socket.getInputStream(), cipher);\n        ObjectInputStream ois = new ObjectInputStream(cis);\n        byte[] bytes = (byte[]) ois.readObject();\n        return bytes;\n\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n", "idx": 941}
{"project": "cipher", "commit_id": "Snippet27246756_9377.java", "target": 0, "func": "import java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\nimport security.SHA256Algo;\nimport shradhafinalwiddesign.UpdateFile;\nimport shradhafinalwiddesign.UserRegistration;\n\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\n/**\n * Simple TripleDES Encrypt/Decrypt Test \n * sha1, utf-8, no padding\n *\n * uses commons-codec-1.6 \n * javac -cp :commons-codec-1.6.jar TripleDESTest.java\n * java -cp :commons-codec-1.6.jar TripleDESTest \n */\n\npublic class TripleDesDemo {\n\n\n    public static void main(String[] args) throws Exception {\n\n        String text = \"textToEncrypt\";\n        UserRegistration user = new UserRegistration() ;\n        user.setlUsername(\"tarunv\") ;\n        user.setAnswer(\"tommysdsfdsfsd\") ;\n        user.setLastaccess(\"pets namesdfsfds\") ;\n        user.setLpassword(\"computersdfdsfd\") ;\n\n        String h1 = SHA256Algo.createHash(user.getlUsername()) ;\n        String h2 = SHA256Algo.createHash(user.getLpassword()) ;\n        String h3 = SHA256Algo.createHash(user.getAnswer()) ;\n\n        String hash1 = UpdateFile.modifyHashValue(h1).substring(0, 24) ;\n        String hash2 = UpdateFile.modifyHashValue(h2) ;\n        String hash3 = UpdateFile.modifyHashValue(h3) ;\n\n        System.out.println(\"    key1 : \"+hash1.length()+\"    key2 : \"+hash2.length()+\"   key3 : \"+hash3.length());\n        byte[] arr = toByteArray(user) ;\n\n        byte[] codedtext = TripleDesDemo._encrypt(arr,\"tarunvermacdac@gmail.com\");\n        byte[] codedtext1 = TripleDesDemo._encrypt(codedtext,\"tarun.spicyabc@gmail.com\");\n        byte[] codedtext2 = TripleDesDemo._encrypt(codedtext1,\"direct_tarun@yahoo.co.in\");\n\n        writeSmallBinaryFile(codedtext2, \"tarun.bat\") ;\n        byte[] texttoDecrypt = readSmallBinaryFile(\"tarun.bat\");\n\n        byte[] decodedtext = TripleDesDemo._decrypt(texttoDecrypt,\"direct_tarun@yahoo.co.in\");\n        byte[] decodedtext1 = TripleDesDemo._decrypt(decodedtext,\"tarun.spicyabc@gmail.com\");\n        byte[] decodedtext2 = TripleDesDemo._decrypt(decodedtext1,\"tarunvermacdac@gmail.com\");\n\n        System.out.println(codedtext + \" ---> \" + toObject(decodedtext2));\n\n      }\n\n\n    public static byte[] _encrypt(byte[] plainTextBytes, String secretKey) throws Exception {\n\n        byte[] keyBytes = secretKey.getBytes();\n\n        SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n        Cipher cipher = Cipher.getInstance(\"DESede\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        //byte[] plainTextBytes = message.getBytes(\"utf-8\");\n        byte[] buf = cipher.doFinal(plainTextBytes);\n        byte [] base64Bytes = Base64.encodeBase64(buf);\n        //String base64EncryptedString = new String(base64Bytes);\n\n        return base64Bytes ;\n    }\n\n    public static byte[] _decrypt(byte[] encryptedText, String secretKey) throws Exception {\n\n        //byte[] message = Base64.decodeBase64(encryptedText);\n        byte[] message = Base64.decodeBase64(encryptedText);\n        byte[] keyBytes = secretKey.getBytes();\n        SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n\n        Cipher decipher = Cipher.getInstance(\"DESede\");\n        decipher.init(Cipher.DECRYPT_MODE, key);\n\n        byte[] plainText = decipher.doFinal(message);\n        return plainText ;\n        //return toObject(plainText);\n    }\n\n    public static byte[] toByteArray(UserRegistration obj) throws IOException {\n        byte[] bytes = null;\n        ByteArrayOutputStream bos = null;\n        ObjectOutputStream oos = null;\n        try {\n            bos = new ByteArrayOutputStream();\n            oos = new ObjectOutputStream(bos);\n            oos.writeObject(obj);\n            oos.flush();\n            bytes = bos.toByteArray();\n        } finally {\n            if (oos != null) {\n                oos.close();\n            }\n            if (bos != null) {\n                bos.close();\n            }\n        }\n        return bytes;\n    }\n\n    public static UserRegistration toObject(byte[] bytes) throws IOException, ClassNotFoundException {\n        UserRegistration obj = null;\n        ByteArrayInputStream bis = null;\n        ObjectInputStream ois = null;\n        try {\n            bis = new ByteArrayInputStream(bytes);\n            ois = new ObjectInputStream(bis);\n            obj = (UserRegistration) ois.readObject();\n        } finally {\n            if (bis != null) {\n                bis.close();\n            }\n            if (ois != null) {\n                ois.close();\n            }\n        }\n        return obj;\n    }\n\n    public static byte[] readSmallBinaryFile(String aFileName) throws IOException {\n        Path path = Paths.get(aFileName);\n        return Files.readAllBytes(path);\n    }\n\n    public static void writeSmallBinaryFile(byte[] aBytes, String aFileName) throws IOException {\n        Path path = Paths.get(aFileName);\n        Files.write(path, aBytes); //creates, overwrites\n    }\n}\n", "idx": 942}
{"project": "cipher", "commit_id": "Snippet26867840_9007.java", "target": 0, "func": "import java.security.spec.EncodedKeySpec;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.security.Security;\nimport java.io.File;\nimport java.security.KeyFactory;\nimport java.security.PrivateKey;\nimport java.security.Signature;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.io.*;\nimport java.security.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Pgm {\n    public static void main(String[] args) {\n        try {\n            KeyPairGenerator dsa = KeyPairGenerator.getInstance(\"DSA\");\n            SecureRandom random = new SecureRandom();\n            dsa.initialize(1024, random);\n            KeyPair keypair = dsa.generateKeyPair();\n            PrivateKey privateKey = (PrivateKey) keypair.getPrivate();\n            byte[] key = \"\ufffdu\ufffd\ufffd\ufffd1\u00d9\ufffdiw&a\".getBytes();\n            Key aesKey = new SecretKeySpec(key, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            String currentDir = System.getProperty(\"user.dir\");\n            // encrypt the text\n            cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            byte[] abc = privateKey.getEncoded();\n\n            byte[] encrypted = cipher.doFinal(abc);\n            // System.out.println(\"len=\"+encrypted.length());\n            File dir = new File(currentDir);\n            File private_file = new File(dir, \"privatekey.txt\");\n            if (!private_file.exists()) {\n                private_file.createNewFile();\n            }\n            FileOutputStream fileos = new FileOutputStream(private_file);\n            ObjectOutputStream objectos = new ObjectOutputStream(fileos);\n            objectos.writeObject(encrypted);\n            objectos.close();\n            fileos.close();\n\n            File file_private = new File(dir, \"privatekey.txt\");\n            FileInputStream fileo = new FileInputStream(file_private);\n            ObjectInputStream objos = new ObjectInputStream(fileo);\n            Object obj = objos.readObject();\n            byte[] encrypted1 = (byte[]) obj;\n            cipher.init(Cipher.DECRYPT_MODE, aesKey);\n            String decrypted = new String(cipher.doFinal(encrypted1));\n            if (decrypted.equals(new String(abc)))\n                System.out.println(\"true\");\n            else\n                System.out.println(\"false\");\n            Signature tosign = Signature.getInstance(\"DSA\");\n            byte[] val = decrypted.getBytes();\n\n            KeyFactory generator = KeyFactory.getInstance(\"DSA\");\n            EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(val);\n            PrivateKey privatekey1 = generator.generatePrivate(privateKeySpec);\n            tosign.initSign(privatekey1);\n\n        } catch (Exception e) {\n            System.out.println(\"failed\");\n            e.printStackTrace();\n\n        }\n\n    }\n}\n", "idx": 943}
{"project": "cipher", "commit_id": "Snippet34152169_16171.java", "target": 0, "func": "byte key[] = dbMediator.getPasswordCypher(username);\n    SecretKey key64 = new SecretKeySpec(key, \"Blowfish\");\n    Cipher cipheren = Cipher.getInstance(\"Blowfish\");\n    cipheren.init(Cipher.ENCRYPT_MODE, key64);\n    Cipher cipherde = Cipher.getInstance(\"Blowfish\");\n    cipheren.init(Cipher.DECRYPT_MODE, key64);\n    out = new ObjectOutputStream(new CipherOutputStream(socket.getOutputStream(), cipheren));\n    out.reset();\n    out.flush();\n    out.writeObject(\"switch\");\n    in = new ObjectInputStream(new CipherInputStream(socket.getInputStream(), cipherde));\n", "idx": 944}
{"project": "cipher", "commit_id": "Snippet4889038_31361.java", "target": 0, "func": "public static String aes_encrypt(String password, String strKey) {\n    try {\n        byte[] keyBytes = Arrays.copyOf(strKey.getBytes(\"ASCII\"), 16);\n\n        SecretKey key = new SecretKeySpec(keyBytes, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] cleartext = password.getBytes(\"UTF-8\");\n        byte[] ciphertextBytes = cipher.doFinal(cleartext);\n\n        return new String(Hex.encodeHex(ciphertextBytes));\n\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } return null;\n}\n", "idx": 945}
{"project": "cipher", "commit_id": "Snippet21483272_3979.java", "target": 0, "func": "public class Mcrypt {\n\nprivate SecretKeySpec keyspec;\nprivate Cipher cipher;\n\nprivate String SecretKey = \"M02cnQ51Ji97vwT4\";\n\npublic Mcrypt() {\n    keyspec = new SecretKeySpec(SecretKey.getBytes(), \"AES\");\n    try {\n        cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    }\n}\n\npublic String encrypt(String text) throws Exception {\n    if (text == null || text.length() == 0)\n        throw new Exception(\"Empty string\");\n    byte[] encrypted = null;\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, keyspec );\n            encrypted = cipher.doFinal(padString(text).getBytes());\n        } catch (Exception e) {\n            throw new Exception(\"[encrypt] \" + e.getMessage());\n        }\n    return Base64.encodeBase64String(encrypted);\n}\n\npublic byte[] decrypt(String code) throws Exception {\n    if (code == null || code.length() == 0)\n        throw new Exception(\"Empty string\");\n    byte[] decrypted = null;\n\n    try {\n        cipher.init(Cipher.DECRYPT_MODE, keyspec );\n        decrypted = cipher.doFinal(new Base64().decode(code.getBytes()));\n    } catch (Exception e) {\n        throw new Exception(\"[decrypt] \" + e.getMessage());\n    }\n    return decrypted;\n}\n\nprivate static String padString(String source) {\n    char paddingChar = ' ';\n    int size = 16;\n    int x = source.length() % size;\n    int padLength = size - x;\n    for (int i = 0; i < padLength; i++) {\n        source += paddingChar;\n    }\n    return source;\n}\n}\n", "idx": 946}
{"project": "cipher", "commit_id": "Snippet41688965_23644.java", "target": 0, "func": "c = Cipher.getInstance(\"AES\");", "idx": 947}
{"project": "cipher", "commit_id": "Snippet9496626_33965.java", "target": 0, "func": "FileInputStream fis = new FileInputStream(new File(\"D:/Shashank/inputVideo.avi\"));\n        File outfile = new File(\"D:/Shashank/encVideo.avi\");\n        int read;\n        if(!outfile.exists())\n            outfile.createNewFile();\n        File decfile = new File(\"D:/Shashank/decVideo.avi\");\n        if(!decfile.exists())\n            decfile.createNewFile();\n        FileOutputStream fos = new FileOutputStream(outfile);\n        FileInputStream encfis = new FileInputStream(outfile);\n        FileOutputStream decfos = new FileOutputStream(decfile);\n        Cipher encipher = Cipher.getInstance(\"AES\");\n        Cipher decipher = Cipher.getInstance(\"AES\");\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        //byte key[] = {0x00,0x32,0x22,0x11,0x00,0x00,0x00,0x00,0x00,0x23,0x00,0x00,0x00,0x00,0x00,0x00,0x00};\n        SecretKey skey = kgen.generateKey();\n        //Lgo\n        encipher.init(Cipher.ENCRYPT_MODE, skey);\n        CipherInputStream cis = new CipherInputStream(fis, encipher);\n        decipher.init(Cipher.DECRYPT_MODE, skey);\n        CipherOutputStream cos = new CipherOutputStream(decfos,decipher);\n        while((read = cis.read())!=-1)\n                {\n                    fos.write((char)read);\n                    fos.flush();\n                }   \n        fos.close();\n        while((read=encfis.read())!=-1)\n        {\n            cos.write(read);\n            cos.flush();\n        }\n    cos.close(); \n", "idx": 948}
{"project": "cipher", "commit_id": "Snippet16183525_39134.java", "target": 0, "func": "String key = \"qwer1234qwetr123wqw\";\n        String x = \"sadgsagd:%%^%ghsagdh\";\n        byte[] keyBytes = new byte[1024];\n        byte[] plaintext = x.getBytes();\n        byte[] tdesKeyData = key.getBytes();\n\n    Cipher c3des = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    SecretKeySpec myKey = new SecretKeySpec(tdesKeyData, \"DESede\");\n    IvParameterSpec ivspec = new IvParameterSpec(keyBytes);\n\n    c3des.init(Cipher.ENCRYPT_MODE, myKey, ivspec);\n    byte[] cipherText = c3des.doFinal(plaintext);\n    int hash = Base64.encode(cipherText).hashCode();\n\n    return Base64.encode(cipherText);`\n", "idx": 949}
{"project": "cipher", "commit_id": "Snippet28115035_10272.java", "target": 0, "func": "public static void encryptfile(String path,String Pass) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    FileInputStream fis = new FileInputStream(path);\n    FileOutputStream fos = new FileOutputStream(path.concat(\".crypt\"));\n    byte[] key = (salt + Pass).getBytes(\"UTF-8\");\n    MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n    key = sha.digest(key);\n    key = Arrays.copyOf(key,16);\n    SecretKeySpec sks = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    cos.flush();\n    cos.close();\n    fis.close();\n}\n\npublic static void decrypt(String path,String Pass) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    FileInputStream fis = new FileInputStream(path);\n    FileOutputStream fos = new FileOutputStream(path.replace(\".crypt\",\"\"));\n    byte[] key = (salt + Pass).getBytes(\"UTF-8\");\n    MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n    key = sha.digest(key);\n    key = Arrays.copyOf(key,16);\n    SecretKeySpec sks = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while((b = cis.read(d)) != -1) {\n        fos.write(d, 0, b);\n    }\n    fos.flush();\n    fos.close();\n    cis.close();\n}\n", "idx": 950}
{"project": "cipher", "commit_id": "Snippet4398874_31101.java", "target": 0, "func": " public static String encrypt(byte[] key, String cleartext, boolean base64) throws Exception\n {\n  byte[] rawKey   = key;\n  byte[] result   = encrypt(rawKey, cleartext.getBytes());\n\n  // Base 64\n  if (base64)\n   return toBase64(result);\n\n  // Hex\n  return toHex(result);\n }\n\n public static String decrypt(byte[] key, String encrypted)\n   throws Exception\n {\n  byte[] rawKey = key;\n  byte[] enc    = toByte(encrypted);\n  byte[] result = decrypt(rawKey, enc);\n\n  return new String(result);\n }\n\n private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception\n {\n  SecretKeySpec skeySpec          = new SecretKeySpec(raw, \"AES\");\n  Cipher cipher                   = Cipher.getInstance(\"AES/ECB/NoPadding\");\n\n  cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n  byte[] encrypted = cipher.doFinal(clear);\n\n  return encrypted;\n }\n", "idx": 951}
{"project": "cipher", "commit_id": "Snippet8445760_33228.java", "target": 0, "func": "public class ED {\n\n\n    private  String Key;\n\n        public ED() {\n            Key = \"abc12\";   // Assigning default key.\n        }\n\n        public ED(String key) {\n            // TODO Auto-generated constructor stub\n            Key = key;\n\n        }\n\n\n\n        public String encrypt(String toEncrypt) throws Exception {\n            byte[] rawKey = getRawKey(Key.getBytes(\"UTF-8\"));\n            byte[] result = encrypt(rawKey, toEncrypt.getBytes(\"UTF-8\"));\n            return toHex(result);\n        }\n\n\n\n        public  byte[] encrypt(byte[] key, byte[] toEncodeString) throws Exception {\n\n            SecretKeySpec sKeySpec = new SecretKeySpec(key, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, sKeySpec);\n\n            byte[] encrypted = cipher.doFinal(toEncodeString);\n\n            return encrypted;\n        }\n\n        private  byte[] getRawKey(byte[] key) throws Exception {\n\n            KeyGenerator kGen = KeyGenerator.getInstance(\"AES\");\n            SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n            sr.setSeed(key);\n            kGen.init(128, sr);\n            SecretKey sKey = kGen.generateKey();\n            byte[] raw = sKey.getEncoded();\n            return raw;\n\n        } \n\n    /************************************* Decription *********************************************/\n\n            public String decrypt(String encryptedString) throws Exception {\n\n                byte[] rawKey = getRawKey(Key.getBytes(\"UTF-8\"));\n                System.out.println(\"Decrypted Key in bytes : \"+rawKey);\n\n\n                System.out.println(\"Key in decryption :\"+rawKey);\n\n\n                SecretKeySpec sKeySpec = new SecretKeySpec(rawKey, \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.DECRYPT_MODE, sKeySpec);\n                byte[] decrypted = cipher.doFinal(toByte(encryptedString));\n                System.out.println(\"Decrypted mess in bytes---------->\" +decrypted);\n                return new String(decrypted);\n            }\n\n\n\n\n\n\n            public String toHex(byte[] buf) {\n                if (buf == null)\n                    return \"\";\n                StringBuffer result = new StringBuffer(2*buf.length);\n                for (int i = 0; i < buf.length; i++) {\n                    appendHex(result, buf[i]);\n                }\n                return result.toString();\n            }\n            private final String HEX = \"0123456789ABCDEF\";\n            private void appendHex(StringBuffer sb, byte b) {\n                sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n            }\n\n            public byte[] toByte(String hexString) {\n                int len = hexString.length()/2;\n                byte[] result = new byte[len];\n                for (int i = 0; i < len; i++)\n                    result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n                return result;\n            }\n\n    }\n", "idx": 952}
{"project": "cipher", "commit_id": "Snippet33654118_15711.java", "target": 0, "func": "            KeyAgreement keyAgreement = this.getSecretKeyAgreement(publicOtherUserKey, privateOwnKey);\n            SecretKey secretKey = new SecretKeySpec(keyAgreement.generateSecret(), \"AES\");\n            Cipher aesCipher = null;\n            aesCipher = Cipher.getInstance(\"AES\");\n            aesCipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            byte[] byteDataToEncrypt = text.getBytes();\n            byte[] byteCipherText = aesCipher.doFinal(byteDataToEncrypt);\n            byte[] encodedBytes = Base64.encodeBase64(byteCipherText);\n            textEncrypted = new String(encodedBytes);\n", "idx": 953}
{"project": "cipher", "commit_id": "Snippet4537099_31165.java", "target": 0, "func": "public static String crypt(String input, String key){\n    byte[] crypted = null;\n    try{\n        SecretKeySpec skey = new SecretKeySpec(Base64.decodeBase64(key), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, skey);\n        crypted = cipher.doFinal(input.getBytes());\n    }catch(Exception e){\n    }\n    return Base64.encodeBase64String(crypted);\n}\n\npublic static String decrypt(String input, String key){\n    byte[] output = null;\n    try{\n        SecretKeySpec skey = new SecretKeySpec(Base64.decodeBase64(key), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, skey);\n        output = cipher.doFinal(Base64.decodeBase64(input));\n    }catch(Exception e){\n    }\n    return new String(output);\n}\n", "idx": 954}
{"project": "cipher", "commit_id": "Snippet39563663_21475.java", "target": 0, "func": "enter code here public class AESEncryption {\n\npublic static String algo = \"AES\";\npublic static String transformation = \"AES/ECB/NoPadding\";\npublic static String key = \"2b7e151628aed2a6abf7158809cf4f3c\";\npublic static String path = \"AESencrypt_1.jpg\";\n\npublic static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, IOException {\n    //encrypt();\n    decrypt();\n    bytes();\n}\n\n    private static void encrypt() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException{\n   Cipher aesCipher = Cipher.getInstance(transformation);\n   byte[] b = key.getBytes();\n   SecretKeySpec key = new SecretKeySpec(b,\"AES\");\n           aesCipher.init(Cipher.ENCRYPT_MODE, key);\n\n    FileInputStream is = new FileInputStream(path);\n    CipherOutputStream os = new CipherOutputStream(new FileOutputStream(\"ecrypted.jpg\"), aesCipher);\n\n    copy(is, os);\n    os.close();\n", "idx": 955}
{"project": "cipher", "commit_id": "Snippet23388773_5757.java", "target": 0, "func": "static void encrypt() throws IOException, NoSuchAlgorithmException,\n               NoSuchPaddingException, InvalidKeyException {\n        // Here you read the cleartext.\n        String file_en_path = Environment.getExternalStorageDirectory().getAbsolutePath() +\"/Decrypted\";\n        File extStore = new File(file_en_path,\"text.epub\");\n        FileInputStream fis = new FileInputStream(extStore);\n        // This stream write the encrypted text. This stream will be wrapped by\n        // another stream.\n        File extStore_enc = new File(file_en_path,\"text_enc.epub\");\n        FileOutputStream fos = new FileOutputStream(extStore_enc);\n        Log.d(\"encrypt--fis------------->>>>>>\",\"\"+fis);\n        Log.d(\"encrypt--fos------------->>>>>>\",\"\"+fos);\n        // Length is 16 byte\n        SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(),\"AES\");\n        // Create cipher\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, sks);\n        // Wrap the output stream\n        CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n        // Write bytes\n        int b;\n        byte[] d = new byte[8];\n        while ((b = fis.read(d)) != -1) {\n               cos.write(d, 0, b);\n        }\n        // Flush and close streams.\n        cos.flush();\n        cos.close();\n        fis.close();\n }\n\nstatic void decrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n\n     String file_de_path = Environment.getExternalStorageDirectory().getAbsolutePath() +\"/Decrypted\";\n     File extStore = new File(file_de_path,\"text_enc.epub\");\n        //File extStore = Environment.getExternalStorageDirectory();\n       FileInputStream fis = new FileInputStream(extStore);\n       File extStore_dec = new File(file_de_path,\"text_dec.epub\");\n       FileOutputStream fos = new FileOutputStream(extStore_dec);\n        //FileOutputStream fos = context.openFileOutput(\"fontsize_dec.txt\",Context.MODE_PRIVATE);\n\n        Log.d(\"decrypt--fis------------->>>>>>\",\"\"+fis);\n        Log.d(\"decrypt--fos------------->>>>>>\",\"\"+fos);\n\n        SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(),\"AES\");\n        IvParameterSpec ivSpec = new IvParameterSpec(\"MyDifficultPassw\".getBytes());\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, sks, ivSpec);\n        } catch (InvalidAlgorithmParameterException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        CipherInputStream cis = new CipherInputStream(fis, cipher);\n        int b;\n        byte[] d = new byte[8];\n\n        StringBuilder sb = new StringBuilder();\n        String line;\n        BufferedReader reader = new BufferedReader(new InputStreamReader(cis, \"UTF-8\"));\n        /*line = reader.readLine();\n        sb.append(line);\n        Log.d(\"sb.append(line)--------------------------->\",\"\"+sb.append(line));*/\n        while ((line = reader.readLine()) != null) {\n            sb.append(line);\n           // Log.d(\"sb.append(line)--------------------------->\",\"\"+sb.append(line));\n           // Log.d(\"Line--------------------------->\",\"\"+line);\n        }\n        Log.d(\"sb.toSting-------------------->\",\"\"+sb.toString());\n        while ((b = cis.read(d)) != -1) {\n            //Log.d(\"cis.read(d)------------------------>>>>>>>\",\"\"+cis.read(d));\n               fos.write(d, 0, b);\n        }\n        fos.flush();\n        fos.close();\n        cis.close();\n }\n", "idx": 956}
{"project": "cipher", "commit_id": "Snippet35563302_17456.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 957}
{"project": "cipher", "commit_id": "Snippet29438602_11448.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\n class DESEncryption {\n\n    private static final String UNICODE_FORMAT = \"UTF8\";\n    public static final String DES_ENCRYPTION_SCHEME = \"DES\";\n    private KeySpec myKeySpec;\n    private SecretKeyFactory mySecretKeyFactory;\n    private Cipher cipher;\n    byte[] keyAsBytes;\n    private String myEncryptionKey;\n    private String myEncryptionScheme;\n    SecretKey key;\n\n    public DESEncryption() throws Exception\n    {\n        myEncryptionKey = \"ThisIsSecretEncryptionKey\";\n        myEncryptionScheme = DES_ENCRYPTION_SCHEME;\n        keyAsBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n        myKeySpec = new DESKeySpec(keyAsBytes);\n        mySecretKeyFactory = SecretKeyFactory.getInstance(myEncryptionScheme);\n        cipher = Cipher.getInstance(myEncryptionScheme);\n        key = mySecretKeyFactory.generateSecret(myKeySpec);\n    }\n\n    /**\n     * Method To Encrypt The String\n     */\n    public String encrypt(String unencryptedString) {\n        String encryptedString = null;\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);\n            byte[] encryptedText = cipher.doFinal(plainText);\n            BASE64Encoder base64encoder = new BASE64Encoder();\n            encryptedString = base64encoder.encode(encryptedText);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n    /**\n     * Method To Decrypt An Ecrypted String\n     */\n    public String decrypt(String encryptedString) {\n        String decryptedText=null;\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            BASE64Decoder base64decoder = new BASE64Decoder();\n            byte[] encryptedText = base64decoder.decodeBuffer(encryptedString);\n            byte[] plainText = cipher.doFinal(encryptedText);\n            decryptedText= bytes2String(plainText);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return decryptedText;\n    }\n\n\n    private static String bytes2String(byte[] bytes) {\n        StringBuffer stringBuffer = new StringBuffer();\n        for (int i = 0; i &lt; bytes.length; i++) {\n            stringBuffer.append((char) bytes[i]);\n        }\n        return stringBuffer.toString();\n    }\n\n    /**\n     * Testing the DES Encryption And Decryption Technique\n     */\n    public static void main(String args []) throws Exception\n    {\n        DESEncryption myEncryptor= new DESEncryption();\n\n        String stringToEncrypt=\"Sanjaal.com\";\n        String encrypted=myEncryptor.encrypt(stringToEncrypt);\n        String decrypted=myEncryptor.decrypt(encrypted);\n\n        System.out.println(\"String To Encrypt: \"+stringToEncrypt);\n        System.out.println(\"Encrypted Value :\" + encrypted);\n        System.out.println(\"Decrypted Value :\"+decrypted);\n\n    }  \n\n}\n", "idx": 958}
{"project": "cipher", "commit_id": "Snippet15390479_38430.java", "target": 0, "func": "    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(plainText.getBytes(\"UTF-8\"));\n", "idx": 959}
{"project": "cipher", "commit_id": "Snippet23830650_6136.java", "target": 0, "func": "public static CipherOutputStream encryptedStream(OutputStream out) {\n    try {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n        return new CipherOutputStream(out, pbeCipher);\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(CryptoHandler.class.getName()).log(Level.SEVERE, null, ex);\n    }//Much more catches here...\n}\npublic static ObjectInputStream decryptedObjectStream(InputStream in) {\n    try {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n        return new ObjectInputStream(new CipherInputStream(in, pbeCipher));\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(CryptoHandler.class.getName()).log(Level.SEVERE, null, ex);\n    } //Much more catches here...\n}\n", "idx": 960}
{"project": "cipher", "commit_id": "Snippet36721800_18621.java", "target": 0, "func": "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.security.Key;\n\nimport javax.crypto.*;\nimport java.util.*;\n\npublic class Encryptor {\n\n    public static void main(String[] args) throws Exception {\n        String FileName = \"encryptedtext.txt\";\n        String FileName2 = \"decryptedtext.txt\";\n\n        Scanner input = new Scanner(System.in);\n\n       System.out.println(\"Enter your 16 character key here:\");\n       String EncryptionKey = input.next();\n\n\n\n        KeyGenerator KeyGen = KeyGenerator.getInstance(\"AES\");\n        KeyGen.init(128);\n\n        Cipher AesCipher = Cipher.getInstance(\"AES\");\n\n        System.out.println(\"Enter text to encrypt or decrypt:\");\n        String Text = input.next();\n\n        System.out.println(\"Do you want to encrypt or decrypt (e/d)\");\n        String answer = input.next();\n        if (answer.equalsIgnoreCase(\"e\")){\n\n            byte[] byteKey = (EncryptionKey.getBytes());\n            byte[] byteText = (Text).getBytes();\n\n            AesCipher.init(Cipher.ENCRYPT_MODE, byteKey); // ERROR LINE\n            byte[] byteCipherText = AesCipher.doFinal(byteText);\n            Files.write(Paths.get(FileName), byteCipherText);\n\n\n              }\n        else if (answer.equalsIgnoreCase(\"d\")){\n\n            byte[] byteKey = (EncryptionKey.getBytes());\n            byte[] byteText = (Text).getBytes();\n            byte[] cipherText = Files.readAllBytes(Paths.get(FileName));\n\n            AesCipher.init(Cipher.DECRYPT_MODE, byteKey); // ERROR LINE\n            byte[] bytePlainText = AesCipher.doFinal(cipherText);\n            Files.write(Paths.get(FileName2), bytePlainText);\n        }\n}\n\n}\n", "idx": 961}
{"project": "cipher", "commit_id": "Snippet34152169_16172.java", "target": 0, "func": "//Generate key\n        byte[] key = new byte[8];\n        for (int i = 0; i < 8; i++) {\n            if (password.length() > i) {\n                key[i] = password.getBytes()[i];\n            } else {\n                key[i] = (byte) i;\n            }\n        }\n        //Setup cipher streams\n        SecretKey key64 = new SecretKeySpec(key, \"Blowfish\");\n        Cipher cipheren = Cipher.getInstance(\"Blowfish\");\n        cipheren.init(Cipher.ENCRYPT_MODE, key64);\n        Cipher cipherde = Cipher.getInstance(\"Blowfish\");\n        cipheren.init(Cipher.DECRYPT_MODE, key64);\n        out = new ObjectOutputStream(new CipherOutputStream(socket.getOutputStream(), cipheren));\n        out.reset();\n        out.flush();\n        out.writeObject(\"switch\");\n        in = new ObjectInputStream(new CipherInputStream(socket.getInputStream(), cipherde));\n", "idx": 962}
{"project": "cipher", "commit_id": "Snippet10634065_34947.java", "target": 0, "func": "byte[] keyValue = new byte[]{(byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x16,(byte) 0x05, (byte) 0x12};\nmyKeySpec = new DESKeySpec(keyValue);\nmySecretKeyFactory = SecretKeyFactory.getInstance(\"DES\");\nkey = mySecretKeyFactory.generateSecret(myKeySpec);\n\n\nCipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\nIvParameterSpec iv2 = new IvParameterSpec(new byte[8]);\ncipher.init(Cipher.ENCRYPT_MODE, key, iv2);\nbyte[] plainText = function.HexStringToByteArray(payloadRecv);\nbyte[] encryptedText = cipher.doFinal(plainText);\n", "idx": 963}
{"project": "cipher", "commit_id": "Snippet39175419_21043.java", "target": 0, "func": "import java.security.Key;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\n\n private static final String ALGORITHM = \"AES\";\nprivate static final String KEY = \"1Hbfh667adfDEJ78\";\n\n String encryptedPassword = null;  String encryptname = null;\n              try {\n                  encryptedPassword = encrypt(getpassword);\n                  encryptname = encrypt(ppword);\n              } catch (Exception ex) {\n                  Logger.getLogger(Tester.class.getName()).log(Level.SEVERE, null, ex);\n              }\n\npublic  String encrypt(String value) throws Exception\n{\nKey key = generateKey();\nCipher cipher = Cipher.getInstance(ALGORITHM);\ncipher.init(Cipher.ENCRYPT_MODE, key);\nbyte [] encryptedByteValue = cipher.doFinal(value.getBytes(\"utf-8\"));\nString encryptedValue64 = new BASE64Encoder().encode(encryptedByteValue);\nreturn encryptedValue64;\n}\n\nprivate  Key generateKey() throws Exception\n{\nKey key = new SecretKeySpec(KEY.getBytes(),ALGORITHM);\nreturn key;\n}\n", "idx": 964}
{"project": "cipher", "commit_id": "Snippet27898008_10047.java", "target": 0, "func": "class Endecryption {\n   private static Cipher encrypt;\n\nprivate static Cipher decrypt;\n\n\n\nprivate static final byte[] initialization_vector = { 22, 33, 11, 44, 55, 99, 66, 77 };\n\n\n public static void main(String[] args) {\n    // TODO code application logic here\n    String normalFile = \"D:/ashok/ashk.txt\";\n    String encryptedFile=\"D:/ashok/aso.txt\";\n\n\n    try {\n\n\n\n        SecretKey secret_key = KeyGenerator.getInstance(\"DES\")\n\n                .generateKey();\n\n        AlgorithmParameterSpec alogrithm_specs = new IvParameterSpec(\n\n                initialization_vector);\n  // set encryption mode ...\n\n        encrypt = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        encrypt.init(Cipher.ENCRYPT_MODE, secret_key, alogrithm_specs);\n\n\n\n        // set decryption mode\n\n       // encrypt file\n\n        encrypt(new FileInputStream(normalFile), new FileOutputStream(\n\n                encryptedFile));\n\n     System.out.println(\"End of Encryption/Decryption procedure!\");\n\n\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException\n\n            | InvalidKeyException | InvalidAlgorithmParameterException\n\n            | IOException e) {\n\n        e.printStackTrace();\n\n    }\n\n}\n\n private static void encrypt(InputStream input, OutputStream output)\n\n        throws IOException {\n\n\n\n    output = new CipherOutputStream(output, encrypt);\n\n    writeBytes(input, output);\n\n}\n\n\nprivate static void writeBytes(InputStream input, OutputStream output)\n\n        throws IOException {\n\n    byte[] writeBuffer = new byte[512];\n\n   int readBytes = 0;\n\n\n\n    while ((readBytes = input.read(writeBuffer)) >= 0) {\n\n        output.write(writeBuffer, 0, readBytes);\n\n    }\n\n\n\n    output.close();\n\n    input.close();\n\n}\n", "idx": 965}
{"project": "cipher", "commit_id": "Snippet33331985_15402.java", "target": 0, "func": "private static final String CIPHER_INSTANCE_NAME = \"AES/ECB/PKCS5Padding\";\n\nprivate static String encryptAes(String input, String siteSecret) {\n    try {\n      SecretKeySpec secretKey = getKey(siteSecret);\n      Cipher cipher = Cipher.getInstance(CIPHER_INSTANCE_NAME);\n      cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n      return BaseEncoding.base64Url().omitPadding().encode(cipher.doFinal(input.getBytes(\"UTF-8\")));\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return null;\n  }\n\nprivate static SecretKeySpec getKey(String siteSecret){\n    try {\n      byte[] key = siteSecret.getBytes(\"UTF-8\");\n      key = Arrays.copyOf(MessageDigest.getInstance(\"SHA\").digest(key), 16);\n      return new SecretKeySpec(key, \"AES\");\n    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n      e.printStackTrace();\n    }\n    return null;\n  }\n\npublic static void main(String [] args) throws Exception {\n    //Hard coded the following to get a repeatable result\n    String siteSecret = \"12345678\";\n    String jsonToken = \"{'session_id':'abf52ca5-9d87-4061-b109-334abb7e637a','ts_ms':1445705791480}\";\n    System.out.println(\" json token: \" + jsonToken);\n    System.out.println(\" siteSecret: \" + siteSecret);\n    System.out.println(\" Encrypted stoken: \" + encryptAes(jsonToken, siteSecret));\n", "idx": 966}
{"project": "cipher", "commit_id": "Snippet11899159_35880.java", "target": 0, "func": "public static byte[] encryptFile(String pFilePath, byte[] pKey) throws GeneralSecurityException, IOException\n{\n    File file = new File(pFilePath);\n    long length = file.length();\n    InputStream is = new FileInputStream(file);\n\n    // You cannot create an array using a long type.\n    // It needs to be an int type.\n    // Before converting to an int type, check\n    // to ensure that file is not larger than Integer.MAX_VALUE.\n    if (length > Integer.MAX_VALUE) {\n        // File is too large\n    }\n\n    // Create the byte array to hold the data\n    byte[] bytes = new byte[(int)length];\n\n    // Read in the bytes\n    int offset = 0;\n    int numRead = 0;\n    while (offset < bytes.length\n           && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {\n        offset += numRead;\n    }\n\n    // Close the input stream and return bytes\n    is.close();\n\n    // Ensure all the bytes have been read in\n    if (offset < bytes.length) {\n\n        throw new IOException(\"Could not completely read file \"+file.getName());\n    }\n\n    SecretKeyFactory lDESedeKeyFactory = SecretKeyFactory.getInstance(\"DESede\");\n    SecretKey kA = lDESedeKeyFactory.generateSecret(new DESedeKeySpec(pKey));\n\n    IvParameterSpec lIVSpec = new IvParameterSpec(new byte[8]);\n    Cipher desedeCBCCipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n\n    desedeCBCCipher.init(Cipher.ENCRYPT_MODE, kA, lIVSpec);\n    byte[] encrypted = desedeCBCCipher.doFinal(bytes);\n\n    return encrypted;\n}\n", "idx": 967}
{"project": "cipher", "commit_id": "Snippet5245184_31518.java", "target": 0, "func": "String Key = \"Something\";\nbyte[] KeyData = Key.getBytes();\nSecretKeySpec KS = new SecretKeySpec(KeyData, \"Blowfish\");\nCipher cipher = Cipher.getInstance(\"Blowfish\");\ncipher.init(Cipher.ENCRYPT_MODE, KS);\n", "idx": 968}
{"project": "cipher", "commit_id": "Snippet40799781_22684.java", "target": 0, "func": "package com.example.encryptographytest;\n\nimport java.security.Security;\nimport java.security.spec.KeySpec;    \nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport android.support.v7.app.ActionBarActivity;\nimport android.os.Bundle;\nimport android.util.Base64;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class MainActivity extends ActionBarActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        String key = \"1234567891234567\";\n      String data = \"example\";\n     Log.d(\"CRYPTO-TEST\", \"\"+ decrypt(encrypt(data, key), key));\n      Log.d(\"CRYPTO-TEST\", \"\"+encrypt(data, key));  \n    }\n\n    public static String encrypt(String input, String key){\n      byte[] crypted = null;\n      try{\n        SecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\n          Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n          cipher.init(Cipher.ENCRYPT_MODE, skey);\n          crypted = cipher.doFinal(input.getBytes());\n        }catch(Exception e){\n            System.out.println(e.toString());\n        }\n     return new String(Base64.encode(crypted, Base64.DEFAULT));    \n\n       // return new String(Base64.encodeBase64(crypted));\n    }\n\n    public static String decrypt(String input, String key){\n        byte[] output = null;\n        try{\n          SecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\n          Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n          cipher.init(Cipher.DECRYPT_MODE, skey);\n          output = cipher.doFinal( Base64.decode(input, Base64.DEFAULT));\n        }catch(Exception e){\n          System.out.println(e.toString());\n        }\n        return new String(output);\n    }     \n}\n", "idx": 969}
{"project": "cipher", "commit_id": "Snippet9475944_33955.java", "target": 0, "func": "import java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\n\n\npublic class Cryption {\n    public static void cryption(String[] args, String message) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, InvalidAlgorithmParameterException {\n        byte[] encodedKey = \"ADBSJHJS12547896\".getBytes();\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        Key aesKey = keyGen.generateKey();\n\n        System.out.println(\"CheckType: \"+ Global.checkType);\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n        byte[] input = Global.message.getBytes();\n\n        // Check if clicked Encrypted\n        if(Global.checkType==true) {\n            // Encrypt\n            byte[] messageEncrypted = cipher.doFinal(input);\n            System.out.println(\"Encrypted Text: \" + messageEncrypted);\n            Global.encValue = messageEncrypted.toString();\n        }\n\n        // Check if clicked Decrypted\n        if(Global.checkType==false) {\n            //String mes = message;\n            System.out.println(Global.message);\n            System.out.println(\"Char lenght \" + Global.message.length());\n            byte[] mesByte = Global.message.getBytes();\n\n\n            // Decrypt\n            cipher.init(Cipher.DECRYPT_MODE, aesKey);\n            byte[] messageDecrypted = cipher.doFinal(mesByte);\n            System.out.println(\"Text Decrypted: \" + new String(messageDecrypted));\n        }\n    }\n\n}\n", "idx": 970}
{"project": "cipher", "commit_id": "Snippet36820290_18783.java", "target": 0, "func": "KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");      \nSecureRandom random = SecureRandom.getInstance(\"IBMSecureRandom\", \"IBMJCE\");        \nrandom.setSeed(longToBytes(System.currentTimeMillis()));\nkeyGen.initialize(512, random);\n\nKeyPair pairTytus = keyGen.generateKeyPair();\nKeyPair pairRomek = keyGen.generateKeyPair();\nKeyPair pairAtomek = keyGen.generateKeyPair();\n\n// Making a wrap-key for private keys; based on password.\nbyte[] key = (\"password\").getBytes(\"UTF-8\");\nMessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\nkey = sha.digest(key);\nkey = Arrays.copyOf(key, 16); // use only first 128 bit\n\nSecretKeySpec secretKeySpec = new SecretKeySpec(key, \"MARS\");\n\nCipher c1 = Cipher.getInstance(\"MARS/ECB/NoPadding\");\nc1.init(Cipher.WRAP_MODE, secretKeySpec);\n\nc1.wrap(pairTytus.getPrivate());\n", "idx": 971}
{"project": "cipher", "commit_id": "Snippet20976375_3566.java", "target": 0, "func": "    // Server receives data and decrypts\n\n    SocketChannel socket = (SocketChannel) key.channel();\n    ByteBuffer buf = ByteBuffer.allocate(1024);\n    nBytes = socket.read(buf);\n    String data = new String(buf.array()).trim();\n    String key1 = \"1234567812345678\";\n    byte[] key2 = key1.getBytes();\n    SecretKeySpec secret = new SecretKeySpec(key2, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\n    cipher.init(Cipher.DECRYPT_MODE, secret);\n    byte[] decrypted = cipher.doFinal(data.getBytes());\n    System.out.println(\"Decrypted Info: \" + new String(decrypted));\n", "idx": 972}
{"project": "cipher", "commit_id": "Snippet29815743_11883.java", "target": 0, "func": "String s= EnumerationsQms.ReturnStatus.SUCCESS.getreturnstatus();\nint read;\n\nFTPConfig objFTP = (FTPConfig)getHibernateTemplate().find(\" from FTPConfig where sstatus='A'\").get(3);\n\nFTPClient ftpclient = new FTPClient();\n\nftpclient.connect(objFTP.getshost(),objFTP.getNport());\n\nlogger.info(\"objFTP.getsip()\"+objFTP.getsip());\n\n\nboolean strue = ftpclient.login(objFTP.getsusername(),objFTP.getspassword());\n\nlogger.info(\"objFTP.getsusername()\"+objFTP.getsusername());\n\nlogger.info(\"objFTP.getspassword()\"+objFTP.getspassword());\nftpclient.enterLocalPassiveMode();\n\nftpclient.setFileType(FTP.BINARY_FILE_TYPE);\n\nif(strue)\n{\n    String st =  GeneralFunctionDAOImpl.getAbsolutePath() + objDbFileStorage.getsFileName();\n\n    logger.info(\"File Name--->\"+st);\n\n    File firstLocalFile = new File(st);           \n    String uniquefilename =objDbFileStorage.getnFileImageId() + objDbFileStorage.getsFileName();\n    logger.info(\"uniquefilename\"+uniquefilename);\n\n    InputStream inputStream = new FileInputStream(st);\n    logger.info(\"st\"+st);\n\n    OutputStream outputStream = ftpclient.storeFileStream(uniquefilename);\n\n    String password = \"javapapers\";\n       PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n       SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndTripleDES\");\n       SecretKey passwordKey = keyFactory.generateSecret(keySpec);\n\n    byte[] salt = new byte[8];\n    Random rnd = new Random();\n    rnd.nextBytes(salt);\n    int iterations = 100;\n\n    PBEParameterSpec parameterSpec = new PBEParameterSpec(salt, iterations);\n\n    Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndTripleDES\");\n    cipher.init(Cipher.ENCRYPT_MODE, passwordKey, parameterSpec);\n    outputStream.write(salt);\n\n    byte[] input = new byte[64];\n\n    while ((read = inputStream.read(input)) != -1)\n\n    {                   \n        byte[] output = cipher.update(input, 0, read);\n        if (output != null)\n            outputStream.write(output); \n\n    }   \n\n    byte[] output = cipher.doFinal();\n    if (output != null)\n        outputStream.write(output);\n\n    inputStream.close();\n    outputStream.flush();\n    outputStream.close();\n\n    if(ftpclient.isConnected()){\n        ftpclient.logout();\n        ftpclient.disconnect();\n    }\n}\nreturn s;\n", "idx": 973}
{"project": "cipher", "commit_id": "Snippet20855327_3459.java", "target": 0, "func": "class AESEncryption {\n\n    byte[] keyBytes;\n    Cipher cipher;\n    SecretKeySpec key;\n\n    public AESEncryption() {\n\n        try {\n            cipher = Cipher.getInstance(\"AES/ECB/NoPadding\", \"BC\");\n        } catch (NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public void createKey(byte[] keyBytes) {\n        this.keyBytes = keyBytes;\n        key = new SecretKeySpec(keyBytes, \"AES\");\n    }\n\n    public byte[] encrypt(byte[] plainText) {\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            return cipher.doFinal(plainText);\n        } catch (InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {\n            System.out.println(e.getMessage());\n            return null;\n        }\n    }\n}\n", "idx": 974}
{"project": "cipher", "commit_id": "Snippet35037543_16991.java", "target": 0, "func": "package blabla.fileencrypter;\n\nimport lots;\n\n/**\n * The FileEncoder class provides an interface to allow for easy encrypting and decrypting of files. To use this class, first call both {@link #setSalts(String, String)} and {@link #setFolders(String, String)}.\n * @author Dani\u00ebl van den Berg\n * @since Nov 26, 2015\n *\n */\npublic class FileEncrypter {\n    private static String encryptedFolder = \"\";\n    private static String decryptedFolder = \"\";\n    private static byte[] salt = null;\n    private static String encryptedPostfix = \"\";\n    private static final HashMap<Integer, HashMap<String,Cipher>> ciphers = new HashMap<Integer, HashMap<String, Cipher>>();\n\n    /**\n     * Sets the folders the documents have to be placed in.\n     * @param encryptedFolder The folder encrypted files have to be placed in.\n     * @param decryptedFolder The folder decrypted files have to be placed in.\n     */\n    public static void setFolders(String encryptedFolder, String decryptedFolder){\n        FileEncrypter.encryptedFolder = encryptedFolder;\n        FileEncrypter.decryptedFolder = decryptedFolder;\n    }\n\n    /**\n     * A postfix to give to encrypted files. Can be \"\" for no postfix.\n     * @param extension The postfix to append to encrypted files.\n     */\n    public static void setEncryptedPostfix(String extension){\n        if (extension != null){\n            FileEncrypter.encryptedPostfix = extension;\n        }else{\n            FileEncrypter.encryptedPostfix = \"\";\n        }\n    }\n\n    /**\n     * The salts to use when encrypting/decrypting files.\n     * @param salt The salt to use.\n     * @param ivParameterSpec The buffer with the IV.\n     * @throws FileEncryptingException When the ivParameterSpec is smaller than 16 bytes.\n     */\n    public static void setSalts(String salt) throws FileEncryptingException{\n        FileEncrypter.salt = salt.getBytes();\n    }\n\n    /**\n     * Encode the given inputFile with the given key.\n     * @param inputFile The file to encrypt.\n     * @param key The key to use for encrypting the file.\n     * @return The encrypted file.\n     * @throws FileEncryptingException\n     * @throws NoSuchAlgorithmException\n     * @throws NoSuchPaddingException\n     * @throws InvalidKeyException\n     * @throws IOException\n     * @throws InvalidKeySpecException\n     * @throws InvalidAlgorithmParameterException\n     */\n    public static File encrypt(File inputFile, String key) throws FileEncryptingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, InvalidKeySpecException, InvalidAlgorithmParameterException{\n        if (isEncrypted(inputFile)){\n            throw new FileEncryptingException(\"File not decrypted: \"+inputFile.getAbsolutePath());\n        }\n\n        FileInputStream inputStream = new FileInputStream(inputFile);\n        BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream);\n\n        File outputFile = new File(inputFile.getAbsolutePath().replace(decryptedFolder,encryptedFolder) + encryptedPostfix);\n        outputFile.getParentFile().mkdirs();\n        FileOutputStream outputStream = new FileOutputStream(outputFile);\n        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(outputStream);\n        processStream(Cipher.ENCRYPT_MODE,key,bufferedInputStream,bufferedOutputStream);\n        inputStream.close();\n        outputStream.close();\n        bufferedInputStream.close();\n        bufferedOutputStream.close();\n        return outputFile;\n    }\n\n    /**\n     * Decrypt the given inputFile with the given key.\n     * @param inputFile The file to decrypt.\n     * @param key The key to use for decrypting the file.\n     * @return The decrypted file.\n     * @throws FileEncryptingException\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws NoSuchPaddingException\n     * @throws InvalidKeyException\n     * @throws InvalidKeySpecException\n     * @throws InvalidAlgorithmParameterException\n     */\n    public static File decrypt(File inputFile, String key) throws FileEncryptingException, IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidKeySpecException, InvalidAlgorithmParameterException{\n        if (!isEncrypted(inputFile)){\n            throw new FileEncryptingException(\"File not encrypted: \"+inputFile.getAbsolutePath());\n        }\n\n        if (!inputFile.exists() && !inputFile.getAbsolutePath().contains(encryptedPostfix)){\n            inputFile = new File(inputFile.getAbsolutePath()+encryptedPostfix);\n        }\n\n        FileInputStream inputStream = new FileInputStream(inputFile);\n        BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream);\n\n        File outputFile = new File(inputFile.getAbsolutePath().replace(encryptedPostfix, \"\").replace(encryptedFolder,decryptedFolder));\n        outputFile.getParentFile().mkdirs();\n        FileOutputStream outputStream = new FileOutputStream(outputFile);\n        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(outputStream);\n        processStream(Cipher.DECRYPT_MODE,key,bufferedInputStream,bufferedOutputStream);\n        inputStream.close();\n        outputStream.close();\n        bufferedInputStream.close();\n        bufferedOutputStream.close();\n        return outputFile;\n    }\n\n    /**\n     * Used for generating a cipher.\n     * @param cipherMode The cipher mode to use. Either <code>Cipher.DECRYPT_MODE</code> or <code>Cipher.ENCRYPT_MODE</code>\n     * @param key The key to generate the cipher with.\n     * @return The generated cipher.\n     * @throws NoSuchAlgorithmException\n     * @throws InvalidKeySpecException\n     * @throws NoSuchPaddingException\n     * @throws InvalidKeyException\n     * @throws InvalidAlgorithmParameterException\n     */\n    private static Cipher getCipher(int cipherMode, String key) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n        if (!ciphers.containsKey(cipherMode)){\n            synchronized (ciphers){\n                if (!ciphers.containsKey(cipherMode)){\n                    ciphers.put(cipherMode, new HashMap<String,Cipher>());\n                }\n            }\n        }\n        HashMap<String, Cipher> hashMap = ciphers.get(cipherMode);\n        if (!hashMap.containsKey(key)){\n            synchronized (hashMap) {\n                if (!hashMap.containsKey(key)){\n                    SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n                    KeySpec spec = new PBEKeySpec(key.toCharArray(), salt, 65536, 128);\n                    SecretKey tmp = factory.generateSecret(spec);\n                    SecretKey secret = new SecretKeySpec(tmp.getEncoded(), \"RC4\");\n\n                    Cipher c = Cipher.getInstance(\"RC4\");\n                    c.init(cipherMode, secret);\n                    hashMap.put(key, c);\n                }\n            }\n        }\n        return hashMap.get(key);\n    }\n\n    /**\n     * Process a stream. This will encrypt or decrypt the stream, depending on the given cipherMode. The output will be available in the given {@link OutputStream}.\n     * @param cipherMode The cipher mode to use. Either <code>Cipher.DECRYPT_MODE</code> or <code>Cipher.ENCRYPT_MODE</code>\n     * @param key The key to use for decryption/encryption.\n     * @param inputStream The stream to read from.\n     * @param outputStream The stream to write the encrypted/decrypted result to.\n     * @throws InvalidKeyException\n     * @throws NoSuchAlgorithmException\n     * @throws InvalidKeySpecException\n     * @throws NoSuchPaddingException\n     * @throws InvalidAlgorithmParameterException\n     * @throws IOException\n     */\n    public static void processStream(int cipherMode, String key, InputStream inputStream, OutputStream outputStream) throws InvalidKeyException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidAlgorithmParameterException, IOException{\n        Cipher c = getCipher(cipherMode,key);\n        CipherOutputStream cipherOutputStream = new CipherOutputStream(outputStream, c);\n        int b = 0;\n        while ((b = inputStream.read()) !=-1){\n            cipherOutputStream.write(b);\n        }\n        cipherOutputStream.close();\n    }\n\n    /**\n     * Returns a file, no matter whether it's encrypted or not. See {@link #isEncrypted(File)} to detect if the file is encrypted.\n     * @param filenameDecrypted The filename the decrypted file would have.\n     * @return The file that corresponds with the given filename.\n     */\n    public static File getFile(String filenameDecrypted){\n        if (!filenameDecrypted.contains(decryptedFolder) && !filenameDecrypted.contains(encryptedFolder)){\n            filenameDecrypted = decryptedFolder + filenameDecrypted;\n        }\n        File file = new File(filenameDecrypted);\n        if (!file.exists()){\n            file = new File(filenameDecrypted.replace(decryptedFolder, encryptedFolder)+encryptedPostfix);\n        }\n        return file;\n    }\n\n    /**\n     * Checks if the file is encrypted or not.\n     * @param file The file to check.\n     * @return True if the file is encrypted, false otherwise.\n     */\n    public static boolean isEncrypted(File file){\n        return file.getAbsolutePath().contains(encryptedFolder) || (!encryptedPostfix.isEmpty() && file.getAbsolutePath().contains(encryptedPostfix));\n    }\n}\n", "idx": 975}
{"project": "cipher", "commit_id": "Snippet22326843_4716.java", "target": 0, "func": "private Cipher encryptCipher = null;\nprivate Cipher decryptCipher = null;\n\nstatic {\n    Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);\n}\n\npublic void initialize(SecretKey key) throws Exception {\n    try {\n        encryptCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\", \"SC\");\n        decryptCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\", \"SC\");\n    } catch (Exception e) {\n    }\n\n    encryptCipher.init(Cipher.ENCRYPT_MODE, key);\n    decryptCipher.init(Cipher.DECRYPT_MODE, key);\n}\n\npublic String encryptBase64(String unencryptedString) throws Exception {\n    byte[] unencryptedByteArray = unencryptedString.getBytes(\"UTF-8\");\n    byte[] encryptedBytes = encryptCipher.doFinal(unencryptedByteArray);\n    return new String(Base64.encodeBase64(encryptedBytes), \"UTF-8\");\n}\n\npublic String decryptBase64(String encryptedString) throws Exception {\n    try {\n        byte[] unencryptedByteArray = decryptCipher.doFinal(Base64.decodeBase64(encryptedString.getBytes(\"UTF-8\")));\n        String message = new String(unencryptedByteArray, \"UTF-8\");\n        return message;\n    } catch (Exception e) {\n    }\n\n    return null;\n}\n", "idx": 976}
{"project": "cipher", "commit_id": "Snippet25763592_8070.java", "target": 0, "func": "package encryption;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Receiver {\n    private Cipher decoder;\n    private SecretKeySpec myKey;\n    public Receiver()throws Exception{\n\n        decoder=Cipher.getInstance(\"AES\");\n    }\n    public void setKey(byte[] key) throws Exception{\n\n        myKey= new SecretKeySpec(key ,\"AES\");\n        decoder.init(Cipher.DECRYPT_MODE, myKey);\n    }\n    public byte[] receive(byte[] message) throws Exception{\n        return decoder.doFinal(message);\n    }\n}\n", "idx": 977}
{"project": "cipher", "commit_id": "Snippet17835726_932.java", "target": 0, "func": "private static final String KEY = \"57238004e784498bbc2f8bf984565090\";\n\npublic static String encrypt(final String plaintext) throws GeneralSecurityException {\n    SecretKeySpec sks = new SecretKeySpec(hexStringToByteArray(KEY), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks, cipher.getParameters());\n    byte[] encrypted = cipher.doFinal(plaintext.getBytes());\n    return byteArrayToHexString(encrypted);\n}\n\npublic static byte[] hexStringToByteArray(String s) {\n    byte[] b = new byte[s.length() / 2];\n    for (int i = 0; i < b.length; i++) {\n        int index = i * 2;\n        int v = Integer.parseInt(s.substring(index, index + 2), 16);\n        b[i] = (byte) v;\n    }\n    return b;\n}\n\npublic static String byteArrayToHexString(byte[] b) {\n    StringBuilder sb = new StringBuilder(b.length * 2);\n    for (int i = 0; i < b.length; i++) {\n        int v = b[i] & 0xff;\n        if (v < 16) {\n            sb.append('0');\n        }\n        sb.append(Integer.toHexString(v));\n    }\n    return sb.toString().toUpperCase();\n}\n", "idx": 978}
{"project": "cipher", "commit_id": "Snippet4599298_31208.java", "target": 0, "func": "public static final Logger LOG = Logger.getLogger(CryptoUtil.class);\n\nprivate Cipher cipher = null;\n\nprivate SecretKey key = null;\n\n// This variable holds a string based on which a unique key will be generated\nprivate static final String SECRET_PHRASE = \"SECRET PHRASE GOES HERE\";\n\n// Charset will be used to convert between String and ByteArray\nprivate static final String CHARSET = \"UTF8\";\n\n // The algorithm to be used for encryption/decryption DES(Data Encryption Standard)\nprivate static final String ALGORITHM = \"DES\";\n\npublic CryptoUtil() throws DDICryptoException {\n    try {\n        // generate a key from SecretKeyFactory\n        DESKeySpec keySpec = new DESKeySpec(SECRET_PHRASE.getBytes(CHARSET));\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(ALGORITHM);\n        key = keyFactory.generateSecret(keySpec);\n        cipher = Cipher.getInstance(ALGORITHM);\n    } catch (Exception e) {\n        LOG.error(e);\n        throw new DDICryptoException(e);\n    }\n}\n\n\n/**\n * This method takes a plain text string and returns encrypted string using DES algorithm\n * @param plainText\n * @return String\n * @throws DDICryptoException\n */\npublic String encrypt(String plainText) throws DDICryptoException {\n    String encryptedString = null;\n    try {\n        // initializes the cipher with a key.\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] plainTextAsUTF8 = plainText.getBytes(CHARSET);\n\n        // decrypts data in a single-part or multi-part operation\n        byte[] encryptedBytes = cipher.doFinal(plainTextAsUTF8);\n\n        encryptedString = new sun.misc.BASE64Encoder().encode(encryptedBytes);\n    } catch (Exception e) {\n        LOG.error(e);\n        throw new DDICryptoException(e);\n\n    }\n    return encryptedString;\n\n}\n\n/**\n * This method takes a plain text string and returns encrypted string using DES algorithm\n * @param encryptedString\n * @return\n * @throws DDICryptoException\n */\npublic String decrypt(String encryptedString) throws DDICryptoException {    \n    String decryptedString = null;\n    try {\n        byte[] decodedString = new sun.misc.BASE64Decoder().decodeBuffer(encryptedString);\n\n        // initializes the cipher with a key.\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n        // decrypts data in a single-part or multi-part operation\n        byte[] decryptedBytes = cipher.doFinal(decodedString);\n        decryptedString = new String(decryptedBytes, CHARSET);\n    } catch (Exception e) {\n        LOG.error(e);\n        throw new DDICryptoException(e);\n    }\n    return decryptedString;\n}\n", "idx": 979}
{"project": "cipher", "commit_id": "Snippet45130444_27272.java", "target": 0, "func": "import javax.crypto.*;\nimport javax.swing.*;\nimport javax.swing.filechooser.FileNameExtensionFilter;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\npublic class App {\n    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException {\n        JFrame.setDefaultLookAndFeelDecorated(true);\n        JDialog.setDefaultLookAndFeelDecorated(true);\n\n        JFrame frame = new JFrame(\"Test\");\n        frame.getContentPane().setLayout(new FlowLayout());\n        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n\n        JButton button = new JButton(\"Encrypt\");\n        button.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent ae) {\n                JFileChooser fileChooser = new JFileChooser();\n                FileNameExtensionFilter filter = new FileNameExtensionFilter(\"TEXT FILES\", \"txt\", \"text\");\n                fileChooser.setFileFilter(filter);\n                int returnValue = fileChooser.showOpenDialog(null);\n                if (returnValue == JFileChooser.APPROVE_OPTION) {\n                    File selectedFile = fileChooser.getSelectedFile();\n                    System.out.println(selectedFile.getAbsolutePath());\n                    String filepath = selectedFile.getAbsolutePath();\n                    try {\n                        encrypt(filepath);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n\n            public void encrypt(String path) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException {\n                KeyGenerator keygenerator = KeyGenerator.getInstance(\"AES\");\n                SecretKey myDesKey = keygenerator.generateKey();\n                Cipher desalgCipher;\n                desalgCipher = Cipher.getInstance(\"AES\");\n                desalgCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n\n                try (InputStream is = Files.newInputStream(Paths.get(path));\n                     CipherInputStream cipherIS = new CipherInputStream(is, desalgCipher);\n                     BufferedReader reader = new BufferedReader(new InputStreamReader(cipherIS));) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        System.out.println(line);\n                    }\n                }\n            }\n        });\n\n        frame.getContentPane().add(button);\n        frame.setSize(300, 400);\n        frame.setVisible(true);\n    }\n}\n", "idx": 980}
{"project": "cipher", "commit_id": "Snippet37034493_18986.java", "target": 0, "func": "//Arbitrarily selected 8-byte salt sequence:\nprivate static final byte[] salt = {\n    (byte) 0x43, (byte) 0x76, (byte) 0x95, (byte) 0xc7,\n    (byte) 0x5b, (byte) 0xd7, (byte) 0x45, (byte) 0x17 \n};\n\npublic static Cipher makeCipher(String pass, Boolean decryptMode) throws GeneralSecurityException{\n\n    //Use a KeyFactory to derive the corresponding key from the passphrase:\n    PBEKeySpec keySpec = new PBEKeySpec(pass.toCharArray());\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");//PBKDF2WithHmacSHA256\n    SecretKey key = keyFactory.generateSecret(keySpec);\n\n    //Create parameters from the salt and an arbitrary number of iterations:\n    PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, 42);\n\n    //Set up the cipher:\n    Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n\n    //Set the cipher mode to decryption or encryption:\n    if(decryptMode){\n        cipher.init(Cipher.ENCRYPT_MODE, key, pbeParamSpec);\n    } else {\n        cipher.init(Cipher.DECRYPT_MODE, key, pbeParamSpec);\n    }\n\n    return cipher;\n}\n\n\n/**Encrypts one file to a second file using a key derived from a passphrase:**/\npublic static void encryptFile(String fileName, String pass){\n    try{\n        byte[] decData;\n        byte[] encData;\n        File inFile = new File(fileName);\n        //Generate the cipher using pass:\n        Cipher cipher = Main.makeCipher(pass, true);\n\n        //Read in the file:\n        FileInputStream inStream = new FileInputStream(inFile);\n\n        int blockSize = 8;\n        //Figure out how many bytes are padded\n        int paddedCount = blockSize - ((int)inFile.length()  % blockSize );\n\n        //Figure out full size including padding\n        int padded = (int)inFile.length() + paddedCount;\n\n        decData = new byte[padded];\n\n\n        inStream.read(decData);\n\n        inStream.close();\n\n        //Write out padding bytes as per PKCS5 algorithm\n        for( int i = (int)inFile.length(); i < padded; ++i ) {\n            decData[i] = (byte)paddedCount;\n        }\n\n        //Encrypt the file data:\n        encData = cipher.doFinal(decData);\n\n        writeToFile(fileName, encData);\n\n    } catch(Exception e){\n        e.printStackTrace();\n    }\n}\n\nprivate static void writeToFile(String path, byte[] data) {\n    try {\n        File file = new File(path);\n\n        //Write the encrypted data to a new file:\n        FileOutputStream outStream = new FileOutputStream(file);\n        outStream.write(data);\n        outStream.close();\n    } catch(Exception e){\n        e.printStackTrace();\n    }\n}\n", "idx": 981}
{"project": "cipher", "commit_id": "Snippet17797582_912.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\ncipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, \"AES\"));\n\nXprev = java.util.Arrays.copyOfRange(IV, 0, BlockSize);\nYprev = java.util.Arrays.copyOfRange(IV, BlockSize, IV.length);\n\nDecripted = new byte[0];\n\nfor (int i = 0; i < Message.length; i += BlockSize) { \n    Y = java.util.Arrays.copyOfRange(Message, i, i+BlockSize); \n    X = XOR(cipher.doFinal(XOR(Y,Xprev)), Yprev);\n    Xprev = X;\n    Yprev = Y;\n\n    Decripted = sumBytes(Decripted, X);\n}\n", "idx": 982}
{"project": "cipher", "commit_id": "Snippet35034350_16988.java", "target": 0, "func": "package blabla.fileencrypter;\n\nimport alotofclasses;\n\n/**\n * The FileEncoder class provides an interface to allow for easy encrypting and decrypting of files. To use this class, first call both {@link #setSalts(String, String)} and {@link #setFolders(String, String)}.\n * @author Dani\u00ebl van den Berg\n * @since Nov 26, 2015\n *\n */\npublic class FileEncrypter {\n    private static String encryptedFolder = \"\";\n    private static String decryptedFolder = \"\";\n    private static byte[] salt = null;\n    private static IvParameterSpec iv = null;\n    private static String encryptedPostfix = \"\";\n\n    /**\n     * Sets the folders the documents have to be placed in.\n     * @param encryptedFolder The folder encrypted files have to be placed in.\n     * @param decryptedFolder The folder decrypted files have to be placed in.\n     */\n    public static void setFolders(String encryptedFolder, String decryptedFolder){\n        FileEncrypter.encryptedFolder = encryptedFolder;\n        FileEncrypter.decryptedFolder = decryptedFolder;\n    }\n\n    /**\n     * A postfix to give to encrypted files. Can be \"\" for no postfix.\n     * @param extension The postfix to append to encrypted files.\n     */\n    public static void setEncryptedPostfix(String extension){\n        if (extension != null){\n            FileEncrypter.encryptedPostfix = extension;\n        }else{\n            FileEncrypter.encryptedPostfix = \"\";\n        }\n    }\n\n    /**\n     * The salts to use when encrypting/decrypting files.\n     * @param salt The salt to use.\n     * @param ivParameterSpec The buffer with the IV.\n     * @throws FileEncryptingException When the ivParameterSpec is smaller than 16 bytes.\n     */\n    public static void setSalts(String salt, String ivParameterSpec) throws FileEncryptingException{\n        FileEncrypter.salt = salt.getBytes();\n        if (ivParameterSpec.length() < 16){\n            throw new FileEncryptingException(\"ivParameterSpec not long enough. Should be at least 16 bytes.\");\n        }\n        FileEncrypter.iv = new IvParameterSpec(ivParameterSpec.getBytes(),0,16);\n    }\n\n    /**\n     * Encode the given inputFile with the given key.\n     * @param inputFile The file to encrypt.\n     * @param key The key to use for encrypting the file.\n     * @return The encrypted file.\n     * @throws FileEncryptingException\n     * @throws NoSuchAlgorithmException\n     * @throws NoSuchPaddingException\n     * @throws InvalidKeyException\n     * @throws IOException\n     * @throws InvalidKeySpecException\n     * @throws InvalidAlgorithmParameterException\n     */\n    public static File encrypt(File inputFile, String key) throws FileEncryptingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, InvalidKeySpecException, InvalidAlgorithmParameterException{\n        if (isEncrypted(inputFile)){\n            throw new FileEncryptingException(\"File not decrypted: \"+inputFile.getAbsolutePath());\n        }\n\n        FileInputStream inputStream = new FileInputStream(inputFile);\n\n        File outputFile = new File(inputFile.getAbsolutePath().replace(decryptedFolder,encryptedFolder) + encryptedPostfix);\n        outputFile.getParentFile().mkdirs();\n        FileOutputStream outputStream = new FileOutputStream(outputFile);\n        processStream(Cipher.ENCRYPT_MODE,key,inputStream,outputStream);\n        inputStream.close();\n        outputStream.close();\n        return outputFile;\n    }\n\n    /**\n     * Decrypt the given inputFile with the given key.\n     * @param inputFile The file to decrypt.\n     * @param key The key to use for decrypting the file.\n     * @return The decrypted file.\n     * @throws FileEncryptingException\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws NoSuchPaddingException\n     * @throws InvalidKeyException\n     * @throws InvalidKeySpecException\n     * @throws InvalidAlgorithmParameterException\n     */\n    public static File decrypt(File inputFile, String key) throws FileEncryptingException, IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidKeySpecException, InvalidAlgorithmParameterException{\n        if (!isEncrypted(inputFile)){\n            throw new FileEncryptingException(\"File not encrypted: \"+inputFile.getAbsolutePath());\n        }\n\n        if (!inputFile.exists() && !inputFile.getAbsolutePath().contains(encryptedPostfix)){\n            inputFile = new File(inputFile.getAbsolutePath()+encryptedPostfix);\n        }\n\n        FileInputStream inputStream = new FileInputStream(inputFile);\n\n        File outputFile = new File(inputFile.getAbsolutePath().replace(encryptedPostfix, \"\").replace(encryptedFolder,decryptedFolder));\n        outputFile.getParentFile().mkdirs();\n        FileOutputStream outputStream = new FileOutputStream(outputFile);\n        processStream(Cipher.DECRYPT_MODE,key,inputStream,outputStream);\n        inputStream.close();\n        outputStream.close();\n        return outputFile;\n    }\n\n    /**\n     * Used for generating a cipher.\n     * @param cipherMode The cipher mode to use. Either <code>Cipher.DECRYPT_MODE</code> or <code>Cipher.ENCRYPT_MODE</code>\n     * @param key The key to generate the cipher with.\n     * @return The generated cipher.\n     * @throws NoSuchAlgorithmException\n     * @throws InvalidKeySpecException\n     * @throws NoSuchPaddingException\n     * @throws InvalidKeyException\n     * @throws InvalidAlgorithmParameterException\n     */\n    private static Cipher getCipher(int cipherMode, String key) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"DES\");\n        KeySpec spec;\n        try {\n            spec = new DESKeySpec((key+salt).getBytes(\"UTF8\"));\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n            return null;\n        }\n        SecretKey secret = factory.generateSecret(spec);\n\n        Cipher c = Cipher.getInstance(\"DES\");\n        c.init(cipherMode, secret,iv);\n        return c;\n    }\n\n    /**\n     * Process a stream. This will encrypt or decrypt the stream, depending on the given cipherMode. The output will be available in the given {@link OutputStream}.\n     * @param cipherMode The cipher mode to use. Either <code>Cipher.DECRYPT_MODE</code> or <code>Cipher.ENCRYPT_MODE</code>\n     * @param key The key to use for decryption/encryption.\n     * @param inputStream The stream to read from.\n     * @param outputStream The stream to write the encrypted/decrypted result to.\n     * @throws InvalidKeyException\n     * @throws NoSuchAlgorithmException\n     * @throws InvalidKeySpecException\n     * @throws NoSuchPaddingException\n     * @throws InvalidAlgorithmParameterException\n     * @throws IOException\n     */\n    public static void processStream(int cipherMode, String key, InputStream inputStream, OutputStream outputStream) throws InvalidKeyException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidAlgorithmParameterException, IOException{\n        Cipher c = getCipher(cipherMode,key);\n        CipherOutputStream cipherOutputStream = new CipherOutputStream(outputStream, c);\n        int b = 0;\n        while ((b = inputStream.read()) !=-1){\n            cipherOutputStream.write(b);\n        }\n        cipherOutputStream.close();\n    }\n\n    /**\n     * Returns a file, no matter whether it's encrypted or not. See {@link #isEncrypted(File)} to detect if the file is encrypted.\n     * @param filenameDecrypted The filename the decrypted file would have.\n     * @return The file that corresponds with the given filename.\n     */\n    public static File getFile(String filenameDecrypted){\n        if (!filenameDecrypted.contains(decryptedFolder) && !filenameDecrypted.contains(encryptedFolder)){\n            filenameDecrypted = decryptedFolder + filenameDecrypted;\n        }\n        File file = new File(filenameDecrypted);\n        if (!file.exists()){\n            file = new File(filenameDecrypted.replace(decryptedFolder, encryptedFolder)+encryptedPostfix);\n        }\n        return file;\n    }\n\n    /**\n     * Checks if the file is encrypted or not.\n     * @param file The file to check.\n     * @return True if the file is encrypted, false otherwise.\n     */\n    public static boolean isEncrypted(File file){\n        return file.getAbsolutePath().contains(encryptedFolder) || (!encryptedPostfix.isEmpty() && file.getAbsolutePath().contains(encryptedPostfix));\n    }\n}\n", "idx": 983}
{"project": "cipher", "commit_id": "Snippet47110464_29118.java", "target": 0, "func": "public static String encryptText(String plainText, String key) throws Exception {\n    char[] password = key.toCharArray();\n    byte[] salt = getNextSalt();\n    SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n    KeySpec spec = new PBEKeySpec(password, salt, 65536, 256);\n    SecretKey tmp = factory.generateSecret(spec);\n    SecretKey secret = new SecretKeySpec(tmp.getEncoded(), \"AES\");\n\n    Cipher aesCipher = Cipher.getInstance(\"AES\");\n    aesCipher.init(Cipher.ENCRYPT_MODE, secret);\n    byte[] byteCipherText = aesCipher.doFinal(plainText.getBytes());\n    return Base64.getEncoder().encodeToString(byteCipherText);\n\n}\n\npublic static String decryptText(String encryptString, String key) throws Exception {\n    char[] password = key.toCharArray();\n    byte[] salt = getNextSalt();\n    SecretKeyFactory factory1 = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n    KeySpec spec = new PBEKeySpec(password, salt, 65536, 256);\n    SecretKey tmp = factory1.generateSecret(spec);\n    SecretKey secret = new SecretKeySpec(tmp.getEncoded(), \"AES\");\n    byte[] byteCipherText = Base64.getDecoder().decode(encryptString);\n    Cipher aesCipher = Cipher.getInstance(\"AES\");\n    aesCipher.init(Cipher.DECRYPT_MODE, secret);\n    byte[] bytePlainText = aesCipher.doFinal(byteCipherText);\n    return new String(bytePlainText);\n}\n\nprivate static byte[] getNextSalt() {\n    return \"abcdefgh\".getBytes();\n}\n", "idx": 984}
{"project": "cipher", "commit_id": "Snippet40028702_21976.java", "target": 0, "func": "public byte [] encrypt_3DES(final String claveHex, final String datos) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException {\n    byte [] ciphertext = null;\n    // Crea la clave\n    DESedeKeySpec desKeySpec = new DESedeKeySpec(toByteArray(claveHex));\n    SecretKey desKey = new SecretKeySpec(desKeySpec.getKey(), \"DESede\");\n    // Crea un cifrador\n    Cipher desCipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n\n    // Inicializa el cifrador para encriptar\n    desCipher.init(Cipher.ENCRYPT_MODE, desKey, new IvParameterSpec(IV));\n\n    // Se a\u00f1aden los 0 en bytes necesarios para que sea un m\u00faltiplo de 8\n    int numeroCerosNecesarios = 8 - (datos.length() % 8);\n    if (numeroCerosNecesarios == 8) {\n        numeroCerosNecesarios = 0;\n    }\n    ByteArrayOutputStream array = new ByteArrayOutputStream();\n    array.write(datos.getBytes(\"UTF-8\"), 0, datos.length());\n    for (int i = 0; i < numeroCerosNecesarios; i++) {\n        array.write(0);\n    }\n    byte [] cleartext = array.toByteArray();\n    // Encripta el texto\n    ciphertext = desCipher.doFinal(cleartext);\n    return ciphertext;\n}\n", "idx": 985}
{"project": "cipher", "commit_id": "Snippet21075369_3664.java", "target": 0, "func": "Cipher.getInstance(\"AES\");", "idx": 986}
{"project": "cipher", "commit_id": "Snippet26400446_8547.java", "target": 0, "func": "Cipher.getInstance(\"Blowfish\")", "idx": 987}
{"project": "cipher", "commit_id": "Snippet26482686_8623.java", "target": 0, "func": "import java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\n\nclass Ideone\n{\n    public static void main(String[] args) throws Exception {\n    blowfishEncrypt(\"plaintextfile\", \"ciphertextfile\");\n  }\n\n  public static void blowfishEncrypt(String f1, String f2) throws Exception {\n    String keytext = \"mykey\";\n    SecretKey secret_key = new SecretKeySpec(keytext.getBytes(), \"Blowfish\");\n    Cipher cipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, secret_key);\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f1));\n    CipherOutputStream out = new CipherOutputStream(new BufferedOutputStream(new FileOutputStream(\n        f2)), cipher);\n    int i;\n    do {\n      i = in.read();\n      if (i != -1)\n        out.write(i);\n    } while (i != -1);\n    in.close();\n    out.close();\n  }\n}\n", "idx": 988}
{"project": "cipher", "commit_id": "Snippet38323283_20278.java", "target": 0, "func": "public static String encrypt(String input, String key) {\n    try {\n        SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n\n        return new String(Base64.encode(cipher.doFinal(input.getBytes()),Base64.DEFAULT));\n    } catch (Exception e) {\n\n    }\n    return null;\n}\n", "idx": 989}
{"project": "cipher", "commit_id": "Snippet41748656_23716.java", "target": 0, "func": "public void decode() {\n    byte[] KeyData = {0x2f, 0x18, (byte) 0xf5, (byte) 0x96, (byte) 0xa2, 0x17, 0x18, 0x29};\n    byte[] IV = {0x01, 0x3d, (byte) 0xcf, (byte) 0xe2, (byte) 0xe3, (byte) 0xf9, (byte) 0xdd, (byte) 0x81};\n    SecretKeySpec KS = new SecretKeySpec(KeyData, \"Blowfish\");\n    Cipher cipher = null;\n    try {\n        cipher = Cipher.getInstance(\"Blowfish/CFB/NoPadding\");\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    }\n\n    byte[] ciphertext = hexToBytes(\"424749c1d3b497\");\n\n    // Decrypt\n    try {\n        cipher.init(Cipher.DECRYPT_MODE, KS, new javax.crypto.spec.IvParameterSpec(IV));\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (InvalidAlgorithmParameterException e) {\n        e.printStackTrace();\n    }\n    byte[] message = new byte[0];\n    try {\n        message = cipher.doFinal(ciphertext);\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    }\n\n    System.out.println(\"-- Decrypted -----------\");\n    System.out.println(\"HEX:\\t \" + bytesToHex(message));\n    System.out.println(\"PLAIN:\\t \" + new String(message));\n\n}\n\npublic byte[] hexToBytes(String str) {\n    if (str == null) {\n        return null;\n    } else if (str.length() < 2) {\n        return null;\n    } else {\n        int len = str.length() / 2;\n        byte[] buffer = new byte[len];\n        for (int i = 0; i < len; i++) {\n            buffer[i] = (byte) Integer.parseInt(str.substring(i * 2, i * 2 + 2), 16);\n        }\n        return buffer;\n    }\n\n}\n\npublic  String bytesToHex(byte[] bytes) {\n\n    char[] hexChars = new char[bytes.length * 2];\n    for ( int j = 0; j < bytes.length; j++ ) {\n        int v = bytes[j] & 0xFF;\n        hexChars[j * 2] = hexArray[v >>> 4];\n        hexChars[j * 2 + 1] = hexArray[v & 0x0F];\n    }\n    return new String(hexChars);\n}\n", "idx": 990}
{"project": "cipher", "commit_id": "Snippet13057587_36687.java", "target": 0, "func": "try {\n    Cipher en = Cipher.getInstance(\"AES/ECB/NOPADDING\");\n    //use the cipher\n    //...\n} catch (NoSuchAlgorithmException e) {\n    //handle exception\n    // ex: e.printStackTrace(); System.exit(1);\n} catch (NoSuchPaddingException e) {\n    //handle exception\n} finally {\n    //optional, use this block if necessary\n}\n", "idx": 991}
{"project": "cipher", "commit_id": "Snippet38760993_20697.java", "target": 0, "func": "public class TrippleDESEncryption {\n   private static final String UNICODE_FORMAT = \"UTF8\";\n   public static final String DESEDE_ENCRYPTION_SCHEME = \"DESede\";\n   private KeySpec keySpec;\n   private SecretKeyFactory secretKeyFactory;\n   private Cipher cipher;\n   byte[] keyAsBytes;\n   private String encryptionKey;\n   private String encryptionScheme;\n   SecretKey key;\n\n   public TrippleDESEncryption() throws Exception {\n          encryptionKey = \"234342343423434234342343\";\n          encryptionScheme = DESEDE_ENCRYPTION_SCHEME;\n          keyAsBytes = encryptionKey.getBytes(UNICODE_FORMAT);\n          keySpec = new DESedeKeySpec(keyAsBytes);\n          secretKeyFactory = SecretKeyFactory.getInstance(encryptionScheme);\n          cipher = Cipher.getInstance(encryptionScheme);\n          key = secretKeyFactory.generateSecret(keySpec);\n\n   }\n\n   /**\n   * Method To Encrypt The String\n   */\n   public String encrypt(String unencryptedString) {\n          String encryptedString = null;\n          try {\n                 cipher.init(Cipher.ENCRYPT_MODE, key);\n                 byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);\n                 byte[] encryptedText = cipher.doFinal(plainText);\n                 BASE64Encoder base64encoder = new BASE64Encoder();\n                 encryptedString = base64encoder.encode(encryptedText);\n          } catch (Exception e) {\n                 e.printStackTrace();\n          }\n          return encryptedString;\n    }\n}\n", "idx": 992}
{"project": "cipher", "commit_id": "Snippet35120843_17059.java", "target": 0, "func": "public static void encrypt(String path, String password) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    FileInputStream fis = new FileInputStream(path);\n    FileOutputStream fos = new FileOutputStream(path.concat(\".scrypt\"));\n    byte[] key = md5(password).getBytes(\"UTF-8\");\n    MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n    key = sha.digest(key);\n    key = Arrays.copyOf(key,16);\n    SecretKeySpec sks = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    cos.flush();\n    cos.close();\n    fis.close();\n}\n\npublic static void decrypt(String path, String password) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    FileInputStream fis = new FileInputStream(path);\n    FileOutputStream fos = new FileOutputStream(path.replace(\".scrypt\", \"\"));\n    byte[] key = md5(password).getBytes(\"UTF-8\");\n    MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n    key = sha.digest(key);\n    key = Arrays.copyOf(key,16);\n    SecretKeySpec sks = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while((b = cis.read(d)) != -1) {\n        fos.write(d, 0, b);\n    }\n    fos.flush();\n    fos.close();\n    cis.close();\n}\n", "idx": 993}
{"project": "cipher", "commit_id": "Snippet34349662_16325.java", "target": 0, "func": "private static void myCryptography(){\n\nSecurity.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\nbyte[] input = \"Hitesh Dhamshaniya\".getBytes();\nbyte[] keyBytes = \"ABCD657865BHNKKK\".getBytes();\nSecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n// encryption pass\n\ncipher.init(Cipher.ENCRYPT_MODE, key);\nbyte[] cipherText = new byte[cipher.getOutputSize(input.length)];\nint ctLength = cipher.update(input, 0, input.length, cipherText, 0);\nctLength += cipher.doFinal(cipherText, ctLength);\nLog.e(\"==> \", \" == > Encode \" + Base64.encodeToString(cipherText, Base64.DEFAULT));\nString encodedStr = Base64.encodeToString(cipherText, Base64.DEFAULT);\n// decryption pass\n\ncipherText = Base64.decode(encodedStr, Base64.DEFAULT);\ncipher.init(Cipher.DECRYPT_MODE, key);\nbyte[] plainText = new byte[cipher.getOutputSize(ctLength)];\nint ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);\nptLength += cipher.doFinal(plainText, ptLength);\nLog.e(\"==> \", \" == > Decoded \" + new String(plainText, \"UTF-8\"));\n\n}\n", "idx": 994}
{"project": "cipher", "commit_id": "Snippet24792511_7127.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport android.os.Build;\nimport android.util.Base64;\nimport android.util.Log;\n\npublic class Encrypt {\n\nprivate String charsetName = \"UTF8\";\nprivate String algorithm = \"DES\";\nprivate int base64Mode = Base64.DEFAULT;\n\npublic String getCharsetName() {\n    return charsetName;\n}\n\npublic void setCharsetName(String charsetName) {\n    this.charsetName = charsetName;\n}\n\npublic String getAlgorithm() {\n    return algorithm;\n}\n\npublic void setAlgorithm(String algorithm) {\n    this.algorithm = algorithm;\n}\n\npublic int getBase64Mode() {\n    return base64Mode;\n}\n\npublic void setBase64Mode(int base64Mode) {\n    this.base64Mode = base64Mode;\n}\n\npublic String encrypt(String key, String data) {\n    if (key == null || data == null)\n        return null;\n    try {\n        Log.d(\"encrypt: \", \"notnull\");\n        DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(charsetName));\n        Log.d(\"encrypt\", \"1\");\n        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithm);\n        Log.d(\"encrypt\", \"2\");\n        SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);\n        Log.d(\"encrypt\", \"3\");\n        byte[] dataBytes = data.getBytes(charsetName);\n        Log.d(\"encrypt\", \"4\");\n        Cipher cipher = Cipher.getInstance(algorithm);\n        Log.d(\"encrypt\", \"5\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        Log.d(\"encrypt\", \"6\");\n        return Base64.encodeToString(cipher.doFinal(dataBytes), base64Mode);\n    } catch (Exception e) {\n        return null;\n    }\n}\n\npublic String decrypt(String key, String data) {\n    if (key == null || data == null)\n        return null;\n    try {\n        byte[] dataBytes = Base64.decode(data, base64Mode);\n        DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(charsetName));\n        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithm);\n        SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        byte[] dataBytesDecrypted = (cipher.doFinal(dataBytes));\n        return new String(dataBytesDecrypted);\n    } catch (Exception e) {\n        return null;\n        }\n    }\n}\n", "idx": 995}
{"project": "cipher", "commit_id": "Snippet25754714_8048.java", "target": 0, "func": "public void crypt() throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, IOException{\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    // Encrypt\n\n    byte [] data = {90, 52, 50, 52, 48, 54, 54, 51, 52, 51, 50, 51, 49, 51, 54, 51};\n    System.out.println(Arrays.toString(data));\n    SecretKey originalKey = new SecretKeySpec(data, 0, data.length, \"AES\");\n    System.out.println(Arrays.toString(originalKey.getEncoded())+data);\n    cipher.init(Cipher.ENCRYPT_MODE, originalKey);\n    System.out.println(Arrays.toString(originalKey.getEncoded())+data);\n    String cleartextFile = this.lien;\n    String ciphertextFile = this.lien;\n\n    FileInputStream fis = new FileInputStream(cleartextFile);\n    FileOutputStream fos = new FileOutputStream(ciphertextFile);\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n    int i;\n    while ((i = fis.read()) != -1) {\n        cos.write(i);\n    }\n    cos.close();\n}\n\n    // Decrypt\npublic void decrypt() throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, IOException{\n\n        //csetCodeCrypt(result.getBytes(6));\n        byte [] data = {90, 52, 50, 52, 48, 54, 54, 51, 52, 51, 50, 51, 49, 51, 54, 51};\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    SecretKey originalKey = new SecretKeySpec(data, 0, data.length, \"AES\");\n    System.out.println(Arrays.toString(originalKey.getEncoded()));\n    cipher.init(Cipher.DECRYPT_MODE, originalKey);\n    System.out.println(Arrays.toString(originalKey.getEncoded()));\n    String cleartextFile = this.lien;\n    String ciphertextFile = this.lien;\n\n    FileInputStream fis = new FileInputStream(ciphertextFile);\n    FileOutputStream fos = new FileOutputStream(cleartextFile);\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n    int i;\n    while ((i = fis.read()) != -1) {\n        cos.write(i);\n    }\n    cos.close();\n}\n\n}\n", "idx": 996}
{"project": "cipher", "commit_id": "Snippet16752606_136.java", "target": 0, "func": "jbyteArray Java_MainActivity_decrypt(JNIEnv* env, jobject context,jbyteArray key, jbyteArray iv, jbyteArray enc) {\n\n\n   //Cipher c3des = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n   jclass cl = (*env)->FindClass(env,\"javax/crypto/Cipher\");\n   jmethodID MID = (*env)->GetStaticMethodID(env,cl, \"getInstance\", \"(Ljava/lang/String;)Ljavax/crypto/Cipher;\");\n   jstring s = (*env)->NewStringUTF(env,\"DESede/CBC/PKCS5Padding\");\n   jobject c3des = (*env)->CallStaticObjectMethod(env,cl, MID, s);\n\n   //SecretKeySpec    myKey = new SecretKeySpec(key, \"DESede\");\n   jclass cl1 = (*env)->FindClass(env, \"javax/crypto/spec/SecretKeySpec\");\n   jclass constructor1 = (*env)->GetMethodID(env, cl1, \"<init>\", \"([BLjava/lang/String;)V\");\n   jstring s1 = (*env)->NewStringUTF(env,\"DESede\");\n   jobject myKey = (*env)->NewObject(env, cl1, constructor1, key, s1);\n\n   //IvParameterSpec ivspec = new IvParameterSpec(initializationVector);\n   jclass cl2 = (*env)->FindClass(env, \"javax/crypto/spec/IvParameterSpec\");\n   jclass constructor2 = (*env)->GetMethodID(env, cl2, \"<init>\", \"([B)V\");\n   jobject ivspec = (*env)->NewObject(env, cl2, constructor2, iv);\n\n   //c3des.init(Cipher.DECRYPT_MODE, myKey, ivspec);\n   jmethodID mid_int = (*env)->GetMethodID(env, cl, \"init\",\"(ILjava/security/Key;Ljava/security/AlgorithmParameters;)V\");\n   jfieldID field_dec_id = (*env)->GetStaticFieldID(env, cl, \"DECRYPT_MODE\",\"I\");\n   jint field_dec = (*env)->GetStaticIntField(env, cl, field_dec_id);\n   (*env)->CallVoidMethod(env,c3des,mid_int,field_dec,myKey,ivspec); //<--app crash at this line\n\n   return;\n}\n", "idx": 997}
{"project": "cipher", "commit_id": "Snippet6052429_31907.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\ncipher.init(Cipher.ENCRYPT_MODE, publicKey);\nCipherOutputStream cipherOut = new CipherOutputStream(outToClient, cipher);\nbyte[] fileBuffer = new byte[BUFFER_SIZE];\nInputStream fileReader = new BufferedInputStream(new FileInputStream(aFile));\nint bytesRead;\nwhile((bytesRead = fileReader.read(fileBuffer)) != EOF){\n    cipherOut.write(fileBuffer, 0, bytesRead);\n}\ncipherOut.flush();\n", "idx": 998}
{"project": "cipher", "commit_id": "Snippet39335750_21252.java", "target": 0, "func": "import java.security.NoSuchAlgorithmException;\nimport java.util.Scanner;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\n\n\n\nclass Q5 { //Queue/Buffer   \n    byte[] shipmentConfirmation;//will include the actual message content been delivered\n    boolean valueSet = false;\n    synchronized byte[] get() \n    {       \n        while(!valueSet) \n        try \n        {\n            wait();\n        } \n        catch(InterruptedException e) \n        {\n            System.out.println(\"InterruptedException caught\");\n        }\n        //System.out.println(\"Got: \" + n);\n        valueSet = false;\n        notify();\n        return shipmentConfirmation;\n    }\n    synchronized void put(byte[] shipmentCinfirm) \n    {\n        while(valueSet)\n        try \n        {\n            wait();\n        } \n        catch(InterruptedException e) \n        {\n            System.out.println(\"InterruptedException caught\");\n        }\n        this.shipmentConfirmation = shipmentCinfirm;\n        valueSet = true;\n        //System.out.println(\"Put: \" + n);\n        notify();\n    }\n}\n\nclass Global5{\n    public static int sendcouter = 0;\n    public static SecretKey secret_Key;\n    public static Cipher desCipher;\n}\n\n\n//<<security pattern>> SymmetricEncryptionEncryptor\nclass SecurityEncryptor//<<security>> Encryptor\n{\n    static byte[] Encryptor(byte shipmentConfirmation[],Cipher c) throws Exception //Encryptor\n    {       \n        byte[] ciphertext = SecurityEncryptionAlgorithm.EncryptionAlgorithm(shipmentConfirmation,c,Global5.secret_Key);\n        return ciphertext;\n    }   \n}\nclass SecurityEncryptionAlgorithm//<<security>> EncryptionAlgorithm\n{\n    static byte[] EncryptionAlgorithm(byte shipmentConfirmation[],Cipher c,SecretKey sk) throws Exception \n    {\n        byte[] iv = {0, 0, 0, 0, 0, 0, 0, 0};\n        IvParameterSpec ivspec = new IvParameterSpec(iv);\n        c.init(Cipher.ENCRYPT_MODE, sk, ivspec);\n        return c.doFinal(shipmentConfirmation);\n    }\n}\n\n\n\n//<<security pattern>> aSecureAsynchronousMCReceiverConnector\nclass SecurityDecryptor//<<Security>> Decryptor\n{\n    static byte[] Decryptor(byte EncryptedShipmentConfirmation[],Cipher c,SecretKey sk) throws Exception //Decryptor\n    {\n        byte[] ct = SecurityDecryptionAlgorithm.DecryptionAlgorithm(EncryptedShipmentConfirmation,c,sk);\n        return ct;\n    }   \n}\nclass SecurityDecryptionAlgorithm//<<Security>> DecryptionAlgorithm\n{\n    static byte[] DecryptionAlgorithm(byte EncryptedShipmentConfirmation[],Cipher c,SecretKey sk) throws Exception \n    {\n        byte[] iv = {0, 0, 0, 0, 0, 0, 0, 0};\n        IvParameterSpec ivspec = new IvParameterSpec(iv);\n        c.init(Cipher.DECRYPT_MODE, sk, ivspec);\n        return c.doFinal(EncryptedShipmentConfirmation);\n    }\n}\n\n\n\npublic class testFigure1 { //Main\n       public static void main(String args[]) throws Exception {          \n            Q5 q1 = new Q5();//creating buffer/queue\n            Q5 q2 = new Q5();\n\n            System.out.println(\"How many messages to send: \");\n            Scanner in = new Scanner(System.in);\n            int input = in.nextInt();//Get input from the supplier          \n            in.close();\n\n            aSupplierInterface Supplier = new aSupplierInterface(q1, input);    \n            aSecuritySenderCoordinator SenderCoordinator = new aSecuritySenderCoordinator(q1, input, q2);           \n            aSecurityReceiverCoordinator receive = new aSecurityReceiverCoordinator(q2, input);   \n            Supplier.t_pro.join();\n            SenderCoordinator.t_coordinator5.join();\n            receive.t_SecurityReceiverCoordinator5.join();\n            System.out.println(\"End of Program!\");\n       }   \n}\n\nclass aSupplierInterface  implements Runnable //<<application Component>> aSupplierInterface\n{\n    Q5 q;   \n    int supinput;\n    Thread t_pro;//pro to represent producer or suppler\n    aSupplierInterface(Q5 qq, int input)\n    {\n        supinput = input;\n        this.q = qq;\n        t_pro = new Thread(this, \"Producer\");\n        t_pro.start();\n    }\n    public void run() \n    {\n        int i = 0;\n        String shipment;\n        byte[] shipmentConfirmation;\n        while(i<supinput)\n        {\n            i++;\n            shipment = \"This is the Delivery Number: \"+ i;\n            shipmentConfirmation = shipment.getBytes();\n\n            q.put(shipmentConfirmation);//Putting supplier's goods in a queue/buffer            \n        }   \n    }       \n}\n\nclass aSecuritySenderCoordinator implements Runnable //<<security coordinator>> aSecuritySenderCoordinator\n{\n    Q5 q;\n    Q5 q2;\n    Thread t_coordinator5;\n    int supinput;\n\n    public aSecuritySenderCoordinator(Q5 qq, int input, Q5 q2) throws Exception\n    {       \n        supinput=input;\n        this.q = qq;    \n        this.q2=q2;\n        t_coordinator5 = new Thread(this, \"coordinator5\");\n        t_coordinator5.start();\n    }\n\n    public void run() \n    {\n        byte[] pkShipmentConfirmation;\n        byte[] shipmentConfirmation;\n        int i = 0;\n        while(i<supinput) \n        {               \n            i++;\n\n                //Getting goods that supplier has put in the queue previously\n            pkShipmentConfirmation=q.get();//This will contain content of the message/delivery you are sending\n            KeyGenerator keygen;\n            try {\n            keygen = KeyGenerator.getInstance(\"DES\");\n            Global5.sendcouter++;//To Create the key once\n            if(Global5.sendcouter==1)//Create once\n            {\n                Global5.secret_Key = keygen.generateKey();\n                Global5.desCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n            }           \n            //String st1 = new String(pkShipmentConfirmation);//just to print a message\n            //System.out.println(\"*ORIGINAL MESSAGE:\"+st1);    \n            shipmentConfirmation = SecurityEncryptor.Encryptor(pkShipmentConfirmation,Cipher.getInstance(\"DES/CBC/PKCS5Padding\"));//Encrypting \n\n\n            new anAsynchronousMCReceiver(q2, shipmentConfirmation);     \n\n            } catch (NoSuchAlgorithmException e) {\n                e.printStackTrace();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n\n\n\nclass anAsynchronousMCReceiver \n{ //<<communication pattern>> anAsynchronousMCReceiver\n       Q5 q;\n\n       anAsynchronousMCReceiver( Q5 q2, byte[] shipmentConfirm) throws Exception\n       {\n           this.q = q2;\n           q.put(shipmentConfirm);  //Entering received data in to the Queue/Buffer \n       }\n}\n\n\n\nclass aSecurityReceiverCoordinator implements Runnable//<<security coordinator>> aSecurityReceiverCoordinator\n{       \n    Thread t_SecurityReceiverCoordinator5;  \n    Q5 q;\n    int supinput;\n    byte[]encryptedShipmentConfirmation;\n    public aSecurityReceiverCoordinator(Q5 q2, int input) throws Exception\n    {  \n        this.q = q2;    \n        supinput = input;\n        t_SecurityReceiverCoordinator5 = new Thread(this, \"SecurityReceiverCoordinator5\");\n        t_SecurityReceiverCoordinator5.start();\n\n    }\n    public void run() \n    {\n        try {\n            int i = 0;\n            while(i<supinput) \n            {           \n                i++;\n                encryptedShipmentConfirmation = q.get();                \n                byte[] confirmation = SecurityDecryptor.Decryptor(encryptedShipmentConfirmation,Cipher.getInstance(\"DES/CBC/PKCS5Padding\"),Global5.secret_Key);//ERROR HAPPENS HERE              \n                String shipConfirmation = new String(confirmation);\n\n                System.out.println(\"AT DelivertyOrder: \" +  shipConfirmation);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 999}
{"project": "cipher", "commit_id": "Snippet12509363_36300.java", "target": 0, "func": "import java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class SecurityKey {\n    private static Key key = null;\n    private static String encode = \"UTF-8\";\n    private static String cipherKey = \"DES/ECB/PKCS5Padding\";\n\n    static  {\n        try {\n            KeyGenerator generator = KeyGenerator.getInstance(\"DES\");\n            String seedStr = \"test\";\n            generator.init(new SecureRandom(seedStr.getBytes()));\n            key = generator.generateKey();\n        } catch(Exception e) {\n        }\n    }\n\n    // SecurityKey.decodeKey(\"password\")\n    public static String decodeKey(String str) throws Exception  {\n        if(str == null)\n            return str;\n\n        Cipher cipher = null;\n        byte[] raw = null;\n        BASE64Decoder decoder = new BASE64Decoder();\n        String result = null;\n        cipher = Cipher.getInstance(cipherKey);\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        raw = decoder.decodeBuffer(str);\n        byte[] stringBytes = null;\n        stringBytes = cipher.doFinal(raw); // Exception!!!!\n        result = new String(stringBytes, encode);\n\n        return result;\n    }\n}\n", "idx": 1000}
{"project": "cipher", "commit_id": "Snippet19531921_2285.java", "target": 0, "func": "private static final String key = \"v@!#1SF5~6A5XZE3\";\n\n   public static void encrypt(InputStream is, OutputStream os) throws Throwable {\n    encryptOrDecrypt(key, Cipher.ENCRYPT_MODE, is, os);\n}\n\npublic static void decrypt(InputStream is, OutputStream os) throws Throwable {\n    encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);\n}\n\npublic static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n\n    DESKeySpec dks = new DESKeySpec(key.getBytes());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey desKey = skf.generateSecret(dks);\n    Cipher cipher = Cipher.getInstance(\"DES\"); \n\n    if (mode == Cipher.ENCRYPT_MODE) {\n        cipher.init(Cipher.ENCRYPT_MODE, desKey);\n        CipherInputStream cis = new CipherInputStream(is, cipher);\n        doCopy(cis, os);\n    } else if (mode == Cipher.DECRYPT_MODE) {\n        cipher.init(Cipher.DECRYPT_MODE, desKey);\n        CipherOutputStream cos = new CipherOutputStream(os, cipher);\n        doCopy(is, cos);\n    }\n}\n\n       public static void doCopy(InputStream is, OutputStream os) throws IOException {\nbyte[] bytes = new byte[8192];\nint numBytes;\nwhile ((numBytes = is.read(bytes)) != -1) {\n    os.write(bytes, 0, numBytes);\n}\nos.flush();\nos.close();\nis.close();\n", "idx": 1001}
{"project": "cipher", "commit_id": "Snippet47083486_29082.java", "target": 0, "func": "SecretKeySpec skeySpec = new SecretKeySpec(keyText.getBytes(), \"DES\");\nCipher des = Cipher.getInstance(\"DES/CBC/ZeroBytePadding\", \"BC\");\ndes.init(Cipher.DECRYPT_MODE, skeySpec, new IvParameterSpec(new byte[8]));\nbyte[] tokenData = des.doFinal(Base64.decodeBase64(token));\n", "idx": 1002}
{"project": "cipher", "commit_id": "Snippet6486121_32163.java", "target": 0, "func": "package net.sf.andhsli.hotspotlogin;\n\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n/**\n * Usage:\n * <pre>\n * String crypto = SimpleCrypto.encrypt(masterpassword, cleartext)\n * ...\n * String cleartext = SimpleCrypto.decrypt(masterpassword, crypto)\n * </pre>\n * @author ferenc.hechler\n */\npublic class SimpleCrypto {\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2*buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n    private final static String HEX = \"0123456789ABCDEF\";\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n    }\n\n}\n", "idx": 1003}
{"project": "cipher", "commit_id": "Snippet36733132_18636.java", "target": 0, "func": "public class AESEncryptUtil {\n\n    private static AESEncryptUtil instance = new AESEncryptUtil();\n    private String password = \"123456\";\n    private Key key;\n    private Cipher cipher;\n\n    public AESEncryptUtil(){\n        try {\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n            kgen.init(128, new SecureRandom(password.getBytes()));\n            SecretKey secretKey = kgen.generateKey();\n            byte[] enCodeFormat = secretKey.getEncoded();\n            key = new SecretKeySpec(enCodeFormat, \"AES\");\n            cipher = Cipher.getInstance(\"AES\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    public static byte[] encrypt(String content) throws Exception {\n        byte[] byteContent = content.getBytes(\"utf-8\");\n        instance.cipher.init(Cipher.ENCRYPT_MODE, instance.key);\n        byte[] result = instance.cipher.doFinal(byteContent);\n        return result;\n    }\n    public static byte[] decrypt(byte[] content) throws Exception {\n        instance.cipher.init(Cipher.DECRYPT_MODE, instance.key);\n        byte[] result = instance.cipher.doFinal(content);\n        return result;\n    }\n    public static String parseByte2HexStr(byte buf[]) {\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < buf.length; i++) {\n            String hex = Integer.toHexString(buf[i] & 0xFF);\n            if (hex.length() == 1) {\n                hex = '0' + hex;\n            }\n            sb.append(hex.toUpperCase());\n        }\n        return sb.toString();\n    }\n    public static byte[] parseHexStr2Byte(String hexStr) {\n        if (hexStr.length() < 1)\n            return null;\n        byte[] result = new byte[hexStr.length() / 2];\n        for (int i = 0; i < hexStr.length() / 2; i++) {\n            int high = Integer.parseInt(hexStr.substring(i * 2, i * 2 + 1), 16);\n            int low = Integer.parseInt(hexStr.substring(i * 2 + 1, i * 2 + 2),\n                    16);\n            result[i] = (byte) (high * 16 + low);\n        }\n        return result;\n    }\n    public static String getNonce() {\n        String base = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        Random random = new Random();\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < 16; i++) {\n            int number = random.nextInt(base.length());\n            sb.append(base.charAt(number));\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) throws Exception {\n        String content = \"test\";  \n        System.out.println(\"content: \" + content);  \n        byte[] encryptResult = encrypt(content);  \n        String encryptResultStr = parseByte2HexStr(encryptResult);  \n        System.out.println(\"encryptResultStr: \" + encryptResultStr);  \n        byte[] decryptFrom = parseHexStr2Byte(encryptResultStr);  \n        byte[] decryptResult = decrypt(decryptFrom);  \n        System.out.println(\"decryptResult: \" + new String(decryptResult));  \n    }\n} \n", "idx": 1004}
{"project": "cipher", "commit_id": "Snippet19723454_2437.java", "target": 0, "func": "/// C# Error Fixed Version - CipherMode.ECB\npublic static string keyStr = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\n\nprivate static string Encrypt(string PlainText)\n{\n    RijndaelManaged aes = new RijndaelManaged();\n    aes.BlockSize = 128;\n    aes.KeySize = 256;\n\n    /// In Java, Same with below code\n    /// Cipher _Cipher = Cipher.getInstance(\"AES\");  // Java Code\n    aes.Mode = CipherMode.ECB; \n\n    byte[] keyArr = Convert.FromBase64String(keyStr);\n    byte[] KeyArrBytes32Value = new byte[32];\n    Array.Copy(keyArr, KeyArrBytes32Value, 32);\n\n    aes.Key = KeyArrBytes32Value;\n\n    ICryptoTransform encrypto = aes.CreateEncryptor();\n\n    byte[] plainTextByte = ASCIIEncoding.UTF8.GetBytes(PlainText);\n    byte[] CipherText = encrypto.TransformFinalBlock(plainTextByte, 0, plainTextByte.Length);\n    return Convert.ToBase64String(CipherText);\n}\n\nprivate static string Decrypt(string CipherText)\n{  \n    RijndaelManaged aes = new RijndaelManaged();\n    aes.BlockSize = 128;\n    aes.KeySize = 256;\n\n    /// In Java, Same with below code\n    /// Cipher _Cipher = Cipher.getInstance(\"AES\");  // Java Code\n    aes.Mode = CipherMode.ECB;\n\n    byte[] keyArr = Convert.FromBase64String(keyStr);\n    byte[] KeyArrBytes32Value = new byte[32];\n    Array.Copy(keyArr, KeyArrBytes32Value, 32);\n\n    aes.Key = KeyArrBytes32Value;\n\n    ICryptoTransform decrypto = aes.CreateDecryptor();\n\n    byte[] encryptedBytes = Convert.FromBase64CharArray(CipherText.ToCharArray(), 0, CipherText.Length);\n    byte[] decryptedData = decrypto.TransformFinalBlock(encryptedBytes, 0, encryptedBytes.Length);\n    return ASCIIEncoding.UTF8.GetString(decryptedData);\n}\n", "idx": 1005}
{"project": "cipher", "commit_id": "Snippet11708231_35721.java", "target": 0, "func": "    private static boolean initialised;\n    private static void init() {\n      if (initialised)\n        return;\n      Security.addProvider(new BouncyCastleProvider());\n      initialised = true;\n    }\n    public static String makeKey() {\n        init();\n        KeyGenerator generator = KeyGenerator.getInstance(algorithm, provider);\n        generator.init(keySize);\n        Key key = generator.generateKey();\n        byte[] encoded = key.getEncoded();\n        return Strings.toHex(encoded);\n}\n\npublic static String aesDecrypt(String hexKey, String hexCoded) {\n        init();\n        SecretKeySpec key = new SecretKeySpec(Strings.fromHex(hexKey), algorithm);\n        Cipher cipher = Cipher.getInstance(algorithm + \"/ECB/PKCS5Padding\", provider);\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] codedBytes = Strings.fromHex(hexCoded);\n        CipherInputStream inputStream = new CipherInputStream(new ByteArrayInputStream(codedBytes), cipher);\n        byte[] bytes = getBytes(inputStream, 256);\n        String result = new String(bytes, \"UTF-8\");\n        return result;\n}\n\npublic static String aesEncrypt(String hexKey, String input) {\n        init();\n        SecretKeySpec key = new SecretKeySpec(Strings.fromHex(hexKey), algorithm);\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"BC\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(input.length());\n        CipherOutputStream outputStream = new CipherOutputStream(byteArrayOutputStream, cipher);\n        setText(outputStream, input);\n        byte[] outputBytes = byteArrayOutputStream.toByteArray();\n        String output = new String(Strings.toHex(outputBytes));\n        return output;\n}\npublic static void setText(OutputStream outputStream, String text, String encoding) {\n    try {\n        outputStream.write(text.getBytes(encoding));\n        outputStream.flush();\n    } finally {\n            outputStream.close();\n    }\n}\npublic static byte[] getBytes(InputStream inputStream, int bufferSize) {\n    try {\n        List<ByteArrayAndLength> list = Lists.newList();\n        while (true) {\n            byte[] buffer = new byte[bufferSize];\n            int count = inputStream.read(buffer);\n            if (count == -1) {\n                byte[] result = new byte[ByteArrayAndLength.length(list)];\n                int index = 0;\n                for (ByteArrayAndLength byteArrayAndLength : list) {\n                    System.arraycopy(byteArrayAndLength.bytes, 0, result, index, byteArrayAndLength.length);\n                    index += byteArrayAndLength.length;\n                }\n                assert index == result.length;\n                return result;\n            }\n            list.add(new ByteArrayAndLength(buffer, count));\n        }\n    } finally {\n            inputStream.close();\n    }\n}\n    static class ByteArrayAndLength {\n    byte[] bytes;\n    int length;\n\n    public ByteArrayAndLength(byte[] bytes, int length) {\n        super();\n        this.bytes = bytes;\n        this.length = length;\n    }\n\n    static int length(List<ByteArrayAndLength> list) {\n        int result = 0;\n        for (ByteArrayAndLength byteArrayAndLength : list) {\n            result += byteArrayAndLength.length;\n        }\n        return result;\n    }\n}\n", "idx": 1006}
{"project": "cipher", "commit_id": "Snippet31293837_13414.java", "target": 0, "func": "public static byte[] encryptAES(byte[] key, byte[] inputValue)\n        throws NoSuchPaddingException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, InvalidKeyException {\n    SecretKeySpec sKeyS = new SecretKeySpec(key, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, sKeyS);\n\n    return cipher.doFinal(inputValue);\n}\n\npublic static byte[] decryptAES(byte[] key, byte[] encryptedData)\n        throws NoSuchPaddingException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, InvalidKeyException {\n    SecretKeySpec sKeyS = new SecretKeySpec(key, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, sKeyS);\n\n    return cipher.doFinal(encryptedData);\n}\n", "idx": 1007}
{"project": "cipher", "commit_id": "Snippet31853486_13920.java", "target": 0, "func": "private void encrypt_btnActionPerformed(java.awt.event.ActionEvent evt) {                                            \n  try{\n      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n      input = entered_txt.getText().getBytes();\n      SecretKeySpec key = new SecretKeySpec(keyBytes, \"DES\");\n      IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n      cipher = Cipher.getInstance(\"DES/CTR/NoPadding\",\"BC\");\n\n      cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);\n      cipherText = new byte[cipher.getOutputSize(input.length)];\n\n      ctLength+=cipher.update(input, 0, input.length, cipherText, 0);\n\n      ctLength+= cipher.doFinal(cipherText, ctLength);\n      encrypted_txt.setText(new  String(cipherText));\n\n  }catch(NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException | ShortBufferException | IllegalBlockSizeException | BadPaddingException e){\n      JOptionPane.showMessageDialog(null, e);\n      e.printStackTrace();\n  }\n}\n", "idx": 1008}
{"project": "cipher", "commit_id": "Snippet30447979_12604.java", "target": 0, "func": "private byte[] K;\npublic void setK(){\n    KeyGenerator KeyGen=KeyGenerator.getInstance(\"AES\");\n    KeyGen.init(128);\n    SecretKey key=KeyGen.generateKey();\n    K = key.getEncoded();\n}\npublic String encrypt(byte[] input){\n    try {\n        IvParameterSpec iv = new IvParameterSpec(Base64.decode(\"Hola\".getBytes(), Base64.DEFAULT));\n        SecretKeySpec key = new SecretKeySpec(K, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n        int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n        ctLength += cipher.doFinal(cipherText, ctLength);\n        return Base64.encodeToString(cipherText, Base64.DEFAULT);\n    } catch (Exception e) {\n        Log.e(JUAN, \"failed to encrypt \", e);\n    }\n    return null;\n}\n\npublic String decrypt(byte[] input){\n    try {\n        IvParameterSpec iv = new IvParameterSpec(Base64.decode(\"Hola\".getBytes(), Base64.DEFAULT));\n        SecretKeySpec key = new SecretKeySpec(K, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] plainText = new byte[cipher.getOutputSize(input.length)];\n        int ctLength = cipher.update(input, 0, input.length, plainText, 0);\n        ctLength += cipher.doFinal(plainText, ctLength);\n        return Base64.encodeToString(plainText, Base64.DEFAULT);\n    } catch (Exception e) {\n        Log.e(JUAN, \"failed to decrypt \", e);\n    }\n    return null;\n}\n", "idx": 1009}
{"project": "cipher", "commit_id": "Snippet11279903_35433.java", "target": 0, "func": "private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    ...\n", "idx": 1010}
{"project": "cipher", "commit_id": "Snippet34121787_16150.java", "target": 0, "func": "    SecretKeySpec keySpec = new SecretKeySpec(decryptedKeySpec, \"AES\");\n    Cipher decoder = Cipher.getInstance(\"AES\");\n    decoder.init(Cipher.DECRYPT_MODE, keyspec);\n    byte[] original = descipher.doFinal(message);\n", "idx": 1011}
{"project": "cipher", "commit_id": "Snippet16613819_25.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"AES\");", "idx": 1012}
{"project": "cipher", "commit_id": "Snippet11838389_35821.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n", "idx": 1013}
{"project": "cipher", "commit_id": "Snippet7344117_32697.java", "target": 0, "func": "SecretKeySpec spec = getKeySpec();\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, spec);\nBASE64Encoder enc = new BASE64Encoder();\nString hexString = stringToHex(text);\n>return enc.encode(cipher.doFinal(hex2byte(hexString)));\n", "idx": 1014}
{"project": "cipher", "commit_id": "Snippet36955124_18914.java", "target": 0, "func": " //AESAlgorithm Class\n\npackage com.example.pr1;\n\nimport java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AESalgorithm {\npublic static String encryptedText;\nprivate static String algorithm = \"AES\";\nprivate static byte[] keyValue =\nnew byte[] { 'A', 'S', 'e', 'c', 'u', 'r', 'e','S', 'e', 'c', 'r', 'e',   't', 'K', 'e', 'y' };\n\n// Performs Encryption\npublic static String encrypt(String plainText) throws Exception {\nKey key = generateKey();\nCipher chiper = Cipher.getInstance(algorithm);\nchiper.init(Cipher.ENCRYPT_MODE, key);\nbyte[] encVal = chiper.doFinal(plainText.getBytes());\nString encryptedValue = encode(encVal);\nreturn encryptedValue;\n}\n\n// Performs decryption\n public static String decrypt(String encryptedText) throws Exception {\n // generate key\nKey key = generateKey();\nCipher chiper = Cipher.getInstance(algorithm);\nchiper.init(Cipher.DECRYPT_MODE, key);\nbyte[] decordedValue = decode(encryptedText);\nbyte[] decValue = chiper.doFinal(decordedValue);\nString decryptedValue = new String(decValue);\nreturn decryptedValue;\n}\n\n// generateKey() is used to generate a secret key for AES algorithm\nprivate static Key generateKey() throws Exception {\nKey key = new SecretKeySpec(keyValue, algorithm);\nreturn key;\n}\n\n// performs encryption & decryption\npublic static void main(String[] args) throws Exception {\n\nString  plainText = \"This \";\n\n//This is the variable i am passing to MainActivity\nencryptedText = AESalgorithm.encrypt(plainText);\nString decryptedText = AESalgorithm.decrypt(encryptedText);\n\n\n }\n\n private static String encode(byte[] byteArray) {\n StringBuilder buf = new StringBuilder();\n  int intVal = 0;\n String frag = \"\";\n\n for (byte b : byteArray) {\n  intVal = (int) (0xff & b);\n frag = Integer.toHexString(intVal);\n if (1 == frag.length()) {\n frag = \"0\" + frag;\n  }\n buf.append(frag);\n}\n return buf.toString();\n}\n\nprivate static byte[] decode(String textString) {\nbyte[] byteArray = new byte[(textString.length() / 2)];\nint intVal = 0;\nString frag = \"\";\n int c1 = 0;\n for (int i = 0; i < byteArray.length; i++) {\nc1 = (i * 2);\nfrag = textString.substring(c1, (c1 + 2));\n intVal = Integer.parseInt(frag, 16);\nbyteArray[i] = (byte) (0xff & intVal);\n}\nreturn byteArray;\n }\n }\n", "idx": 1015}
{"project": "cipher", "commit_id": "Snippet30641415_12840.java", "target": 0, "func": "   private static final String UNICODE_FORMAT = \"UTF8\";\n            public static final String DESEDE_ENCRYPTION_SCHEME = \"DESede\"; //\"DESede/ECB/NoPadding\";\n            private KeySpec ks;\n            private SecretKeyFactory skf;\n            private Cipher cipher;\n            byte[] arrayBytes;\n            private String myEncryptionKey;\n            private String myEncryptionScheme;\n            SecretKey key;\n\n            public PasswordEncryption_TrippleDES() throws Exception {\n                myEncryptionKey =  \"ThisIsSpartaThisIsanilku\";\n                myEncryptionScheme = DESEDE_ENCRYPTION_SCHEME;\n                arrayBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n                ks = new DESedeKeySpec(arrayBytes);\n                skf = SecretKeyFactory.getInstance(myEncryptionScheme);\n                cipher = Cipher.getInstance(myEncryptionScheme);\n                key = skf.generateSecret(ks);\n            }\n\n\n            public String encrypt(String unencryptedString) {\n                String encryptedString = null;\n                try {\n                    cipher.init(Cipher.ENCRYPT_MODE, key);\n                    byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);\n                    byte[] encryptedText = cipher.doFinal(plainText);\n                    encryptedString = new String(Base64.encodeBase64(encryptedText));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                return encryptedString;\n            }\n\n\n            public String decrypt(String encryptedString) {\n                String decryptedText=null;\n                try {\n                    cipher.init(Cipher.DECRYPT_MODE, key);\n                    byte[] encryptedText = Base64.decodeBase64(encryptedString);\n                    byte[] plainText = cipher.doFinal(encryptedText);\n                    decryptedText= new String(plainText);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                return decryptedText;\n            }\n public static void main(String args []) throws Exception\n        {\n            PasswordEncryption_TrippleDES td= new PasswordEncryption_TrippleDES();\n\n            String target=\"data for encyption\";\n            String encrypted=td.encrypt(target);\n            String decrypted=td.decrypt(encrypted);\n\n            System.out.println(\"String To Encrypt: \"+ target);\n            System.out.println(\"Encrypted String:\" + encrypted);\n            System.out.println(\"Decrypted String:\" + decrypted);\n\n        }\n", "idx": 1016}
{"project": "cipher", "commit_id": "Snippet27530102_9637.java", "target": 0, "func": "public class StrongAES {\n\n    byte[] input;\n    byte[] cipher_Text;\n    SecretKeySpec Key;\n    int ctLength;\n\n    public byte[] encrypt_Data(String data){\n        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n        byte[] input = data.getBytes();\n        this.input = input;\n        byte[] keyBytes = new byte[] {'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'};\n\n        SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n        this.Key = key;\n        byte[] cipherText = null;\n        Cipher cipher;\n        try {\n            cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            cipherText = new byte[cipher.getOutputSize(input.length)];\n            int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n            ctLength += cipher.doFinal(cipherText, ctLength);\n            this.cipher_Text = cipherText;\n            this.ctLength = ctLength;\n        ....    \n        ....\n        return cipherText;\n    }\n    public int count_Cipher(){\n        return this.ctLength;   \n    }\n", "idx": 1017}
{"project": "cipher", "commit_id": "Snippet34386901_16372.java", "target": 0, "func": "public static void savePrivateKeyToDisk(PrivateKey privateKey, String passord){\n\n    try {\n        // unencrypted PKCS#8 private key\n        byte[] encodedPrivateKey = privateKey.getEncoded();\n\n        String MYPBEALG = \"PBEWithSHA1AndDESede\";\n\n        int count = 20;\n        SecureRandom random = new SecureRandom();\n        byte[] salt = new byte[8];\n        random.nextBytes(salt);\n\n        // Create PBE parameter set\n        PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, count);\n        PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());\n        SecretKeyFactory keyFac = SecretKeyFactory.getInstance(MYPBEALG);\n        SecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n\n        Cipher pbeCipher = Cipher.getInstance(MYPBEALG);\n\n        // Initialize PBE Cipher with key and parameters\n        pbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n\n        // Encrypt the encoded Private Key with the PBE key\n        byte[] cipherText = pbeCipher.doFinal(encodedPrivateKey);\n\n        // Now construct  PKCS #8 EncryptedPrivateKeyInfo object\n        AlgorithmParameters algparms = AlgorithmParameters.getInstance(MYPBEALG);\n        algparms.init(pbeParamSpec);\n        EncryptedPrivateKeyInfo encinfo = new EncryptedPrivateKeyInfo(algparms, cipherText);\n\n        // DER encoded PKCS#8 encrypted key\n        byte[] encryptedPkcs8 = encinfo.getEncoded();\n\n\n        File encryptedPrivate = new File(PRIVATE_KEY_FILE);\n\n        if (encryptedPrivate.getParentFile() != null) {\n            encryptedPrivate.getParentFile().mkdirs();\n        }\n        encryptedPrivate.createNewFile();\n\n        ObjectOutputStream publicKeyOS = new ObjectOutputStream(\n                new FileOutputStream(encryptedPrivate));\n        publicKeyOS.writeObject(encryptedPkcs8);\n        publicKeyOS.close();\n\n    }\n    catch (Exception e){\n        e.printStackTrace();\n    }\n}\n", "idx": 1018}
{"project": "cipher", "commit_id": "Snippet29815743_11884.java", "target": 0, "func": "String stQuery=\"from FTPConfig where sstatus='\"+Enumerations.MasterStatus_Add+\"'\";\nList<FTPConfig> lstftp=getHibernateTemplate().find(stQuery);\n\nFTPClient ftp=new FTPClient();\n\nftp.connect(lstftp.get(3).getshost(),lstftp.get(3).getNport());\nboolean ftpFile=ftp.login(lstftp.get(3).getsusername(), lstftp.get(3).getspassword());\n\nftp.setFileType(FTP.BINARY_FILE_TYPE);\nftp.enterLocalPassiveMode();\n\n\nif(lstDBfile.size()>0)\n{\n    String filename =nFileImageID+lstDBfile.get(0).getsFileName(); \n\n    String absolutePath1 = new File(\"\").getAbsolutePath() + Enumerations.UPLOAD_PATH;\n    String uniquefilename =  lstDBfile.get(0).getsFileName();\n    String st1 = absolutePath1 + uniquefilename;\n    String st2 = absolutePath1 + filename;\n\n    logger.info(\"**********FTP Storage st1*************\"+st1);\n\n    logger.info(\"**********FTP Storage filename *************\"+filename);\n\n\n    stResult = uniquefilename;\n    File file = new File(st1);\n\n    String password = \"javapapers\";\n    PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());\n    SecretKeyFactory secretKeyFactory = SecretKeyFactory\n            .getInstance(\"PBEWithMD5AndTripleDES\");\n    SecretKey secretKey = secretKeyFactory.generateSecret(pbeKeySpec);\n\n    InputStream inputStream = ftp.retrieveFileStream(filename);\n\n    OutputStream oufil= new FileOutputStream(st2);\n    int c=0;\n    while((c=inputStream.read())!=-1)\n    {\n        oufil.write(c);\n    }\n    oufil.close();\n    ByteArrayInputStream filein = new ByteArrayInputStream(oufil.toString().getBytes());\n\n\n    byte[] salt = new byte[8];\n    filein.read(salt);\n\n    PBEParameterSpec pbeParameterSpec = new PBEParameterSpec(salt, 100);\n\n    Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndTripleDES\");\n\n\n    cipher.init(Cipher.DECRYPT_MODE, secretKey, pbeParameterSpec);\n\n    OutputStream outputStream2 = new FileOutputStream(file);\n    long start = System.currentTimeMillis();\n\n    byte[] bytesArray = new byte[64];\n    int bytesRead = -1;\n    while ((bytesRead = filein.read(bytesArray)) != -1) {\n\n        byte[] output = cipher.update(bytesArray, 0, bytesRead);\n        if (output != null)\n            outputStream2.write(output);\n        outputStream2.write(output);\n    }\n    byte[] output = cipher.doFinal(); \n\n    if (output != null)\n        outputStream2.write(output);\n\n\n\n\n    boolean download  = ftp.completePendingCommand();\n    if (download)\n    {  \n        System.out.println(\"File downloaded successfully !\");  \n        logger.info(\"file downloaded successfully with \"\n                + (System.currentTimeMillis() - start) + \"ms\");\n    } \n    else \n    {  \n        System.out.println(\"Error in downloading file !\");  \n    }  \n    outputStream2.flush();\n    outputStream2.close();\n    inputStream.close();\n", "idx": 1019}
{"project": "cipher", "commit_id": "Snippet46416541_28532.java", "target": 0, "func": " public String kryptaa (String[] args) throws Exception {\n    //\n    // Check args and get plaintext\n    if (args.length !=1) {\n        System.err.println(\"Usage: java PrivateExample text\");\n        System.exit(1);\n    }\n    byte[] plainText = args[0].getBytes(\"UTF8\");\n    //\n    // Get a DES private key\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\n\n    // If you do not initialize the KeyGenerator, each provider supply a default initialization.\n    keyGen.init(56);\n    Key key = keyGen.generateKey();\n    //\n    // Creates the DES Cipher object (specifying the algorithm, mode, and padding).\n    Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    // Print the provider information       \n    //\n    // Initializes the Cipher object.\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    // Encrypt the plaintext using the public key\n    byte[] cipherText = cipher.doFinal(plainText);\n    String kryptattu = Base64.getEncoder().encodeToString(cipherText);\n    String erikryptattu = ( new String(cipherText, \"UTF8\") );\n    return kryptattu;\n}\n", "idx": 1020}
{"project": "cipher", "commit_id": "Snippet36339011_18186.java", "target": 0, "func": "public InputStream encryptInputStream(InputStream inputStream) throws Exception{\n      KeyCipher keyCiper = new KeyCipher();\n      String streamContent = CharStreams.toString(new InputStreamReader(inputStream, \"UTF-8\"));\n      Cipher cipher = Cipher.getInstance(\"Blowfish\");\n      cipher.init(ENCRYPT_MODE, keyCipher.getSecretSpecKey(), keyCipher.getIvParameterSpec());\n\n     InputStream encryptedStream = new ByteArrayInputStream(encodeToString(cipher.doFinal(streamContent.getBytes(\"UTF-8\")), DEFAULT).getBytes());\n    return encryptedStream;\n}\n", "idx": 1021}
{"project": "cipher", "commit_id": "Snippet18452882_1510.java", "target": 0, "func": "public class ExecuteEncryptDecryptSample {\n        private static String method=\"SHA1\"; \n        public static SecretKeySpec getKeySpec() throws IOException, NoSuchAlgorithmException {\n            byte[] bytes = new byte[16];\n            File f = new File(\"sample_aes_key\");\n        SecretKey key = null;\n        SecretKeySpec spec = null;\n        if (f.exists()) {\n            new FileInputStream(f).read(bytes);\n        } else {\n            //KeyGenerator kgen = KeyGenerator.getInstance(\"SHA1\");//PBKDF2WithHmacSHA1\n            KeyGenerator kgen = KeyGenerator.getInstance(method);\n            kgen.init(256);\n            key = kgen.generateKey();\n            bytes = key.getEncoded();\n            new FileOutputStream(f).write(bytes);\n\n        }\n        spec = new SecretKeySpec(bytes,method);\n        return spec;\n    }\n    public static void encrypt(String text) throws Exception {\n        SecretKeySpec spec = getKeySpec();\n        Cipher cipher = Cipher.getInstance(method);\n        cipher.init(Cipher.ENCRYPT_MODE, spec);\n        BASE64Encoder enc = new BASE64Encoder();\n        System.out.println(enc.encode(cipher.doFinal(text.getBytes())));\n    }\n\n    public static void main(String[] args) throws Exception {\n        String text = \"1234000156237828282873773\";\n        //Security security;\n        //security.getProviders();\n        System.out.println();\n        encrypt(text);\n    }\n}\n", "idx": 1022}
{"project": "cipher", "commit_id": "Snippet12785061_36451.java", "target": 0, "func": " public void onClick(View arg0) {\n    user=rName.getText().toString().trim();\n    pass=rPwd.getText().toString().trim();\n\n    if(arg0==regBttn){     \n       if((user.length()!=0))\n        {\n         if((pass.length()!=0))\n            {\n\n        sp=getSharedPreferences(\"AccessApp\",MODE_WORLD_WRITEABLE);\n        Editor myEditor=sp.edit();\n\n        try {\n            myEditor.putString(\"USERNAME_KEY\", user);\n            byte[ ] superSecretKeyBytes = Base64.decode(user);\n            byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6 };\n            for (int i = 0; i < pass.length(); i++) {\n                key[i] = superSecretKeyBytes[i];\n            }\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }   \n        try {\n            myEditor.putString(\"PASSWORD_KEY\", pass);\n            byte[ ] superSecretKeyBytes = Base64.decode(pass);\n            byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6 };\n            for (int i = 0; i < pass.length(); i++) {\n                key[i] = superSecretKeyBytes[i];\n            }\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        myEditor.commit();\n        Toast.makeText(this, \"Registration is successfull\",10000).show();\n        i=new Intent(this,AccessApp.class);\n        startActivity(i);\n        }\n        else\n         {\n          Toast.makeText(this, \"Please Enter password\", 10000).show();  \n         }\n         }\n        else{\n            Toast.makeText(this,\"Please Enter Username\",10000).show();\n         }\n        }\n\n    else if(arg0==rtnBttn){\n        AlertDialog.Builder builder=new AlertDialog.Builder(this);\n         builder.setTitle(\"Exit\");\n         builder.setMessage(\"Do you want to exit\");\n         builder.setCancelable(false);\n         builder.setPositiveButton(\"Yes\",new DialogInterface.OnClickListener() {\n\n  public void onClick(DialogInterface dialog, int which) {\n  // TODO Auto-generated method stub\n  finish();\n  }\n  });\n    builder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\n\n            public void onClick(DialogInterface arg0, int arg1) {\n               arg0.cancel();\n            }\n        });\n    AlertDialog alert=builder.create();\n    alert.show();\n\n    }\n}\npublic String encrypt(String toencrypt, byte key[]) throws Exception {\n    SecretKeySpec secret = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secret);\n    byte[] encryptedbytes = cipher.doFinal(toencrypt.getBytes());\n    String encrypted = Base64.encodeBytes(encryptedbytes);\n    return encrypted;\n\n}\n}\n", "idx": 1023}
{"project": "cipher", "commit_id": "Snippet3181250_30633.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n", "idx": 1024}
{"project": "cipher", "commit_id": "Snippet13946724_37380.java", "target": 0, "func": "public static String encryptToString(String content,String password) throws IOException {\n    return parseByte2HexStr(encrypt(content, password));\n}\nprivate static byte[] encrypt(String content, String password) {\n    try {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom secureRandom = SecureRandom.getInstance(\"SHA1PRNG\");\n        secureRandom.setSeed(password.getBytes());\n        kgen.init(128, secureRandom);\n        SecretKey secretKey = kgen.generateKey();\n        byte[] enCodeFormat = secretKey.getEncoded();\n        SecretKeySpec key = new SecretKeySpec(enCodeFormat, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        byte[] byteContent = content.getBytes(\"utf-8\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] result = cipher.doFinal(byteContent);\n        return result;\n    } catch (Exception e) {\n        log.error(e.getMessage(),e);\n    }\n    return null;\n}\npublic static String parseByte2HexStr(byte buf[]) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < buf.length; i++) {\n        String hex = Integer.toHexString(buf[i] & 0xFF);\n        if (hex.length() == 1) {\n            hex = '0' + hex;\n        }\n        sb.append(hex.toUpperCase());\n    }\n    return sb.toString();\n}\n", "idx": 1025}
{"project": "cipher", "commit_id": "Snippet28445792_10592.java", "target": 0, "func": "import java.util.Scanner;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKey;\n/**\n\n */\npublic class ENCRY\n{\n    public static void main(String[] args) \n    {\n\n        try{\n            do{\n                Scanner input = new Scanner(System.in);\n                System.out.println(\"Please select an Option\");\n                System.out.println(\"Encrypt the Sentence\");\n                int File =input.nextInt();\n                System.out.println(\"--------------------\");\n                System.out.print(\"Enter the sentence:\");\n                String s = input.next();\n\n                KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n                SecretKey myDesKey = keygenerator.generateKey();\n                Cipher desCipher;\n                desCipher = Cipher.getInstance(\"DES\");\n                desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n                byte[] text = s.getBytes();\n                System.out.println(\"\" + new String(text));\n\n\n                byte[] textEncrypted = desCipher.doFinal(text);\n                System.out.println(\"sentence Encryted : \" + textEncrypted);\n                desCipher.init(Cipher.DECRYPT_MODE, myDesKey);\n\n                byte[] textDecrypted = desCipher.doFinal(textEncrypted);\n                System.out.println(\"sentence Decryted : \" +  new String(textDecrypted));\n\n\n\nwhile()\n\n\n\n        }catch(NoSuchAlgorithmException S)\n        {\n            S.printStackTrace();\n        }catch(NoSuchPaddingException S)\n        {\n            S.printStackTrace();\n        }catch(InvalidKeyException S)\n        {\n            S.printStackTrace();\n        }catch(IllegalBlockSizeException S)\n        {\n            S.printStackTrace();\n        }catch(BadPaddingException S)\n        {\n            S.printStackTrace();\n        } \n\n    }\n}\n", "idx": 1026}
{"project": "cipher", "commit_id": "Snippet10759392_35022.java", "target": 0, "func": "public static void main(String args[]) {\n    Test t = new Test();\n    String encrypt = new String(t.encrypt(\"mypassword\"));\n    System.out.println(\"decrypted value:\" + t.decrypt(\"ThisIsASecretKey\", encrypt));\n}\n\npublic String encrypt(String value) {\n    try {\n        byte[] raw = new byte[]{'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'};\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(value.getBytes());\n        System.out.println(\"encrypted string:\" + (new String(encrypted)));\n        return new String(skeySpec.getEncoded());\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalBlockSizeException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (BadPaddingException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidKeyException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchPaddingException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    return null;\n}\n\npublic String decrypt(String key, String encrypted) {\n    try {\n        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(skeySpec.getEncoded(), \"AES\"));\n        //getting error here\n        byte[] original = cipher.doFinal(encrypted.getBytes());\n        return new String(original);\n    } catch (IllegalBlockSizeException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (BadPaddingException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidKeyException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchPaddingException ex) {\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    return null;\n}  \n", "idx": 1027}
{"project": "cipher", "commit_id": "Snippet41974679_23964.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n", "idx": 1028}
{"project": "cipher", "commit_id": "Snippet17567996_730.java", "target": 0, "func": "public static String symmetricEncrypt(String text, String secretKey) {\n    BASE64Decoder decoder = new BASE64Decoder();\n    byte[] raw;\n    String encryptedString;\n    SecretKeySpec skeySpec;\n    BASE64Encoder bASE64Encoder = new BASE64Encoder();\n    byte[] encryptText = text.getBytes();\n    Cipher cipher;\n    try {\n        raw = decoder.decodeBuffer(secretKey);\n        skeySpec = new SecretKeySpec(raw, \"AES\");\n        cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        encryptedString = bASE64Encoder.encode(cipher.doFinal(encryptText));\n    } \n    catch (Exception e) {\n        e.printStackTrace();\n        return \"Error\";\n    }\n    return encryptedString;\n}\n", "idx": 1029}
{"project": "cipher", "commit_id": "Snippet11138696_35351.java", "target": 0, "func": "package com.aujas.html.viewer.content;\npublic class LocalFileContentProvider extends ContentProvider {\n\nprivate static final String URI_PREFIX = \"content://com.aujas.html.viewer.localfile.dec/\";\npublic static File file;\npublic String filename;\npublic ParcelFileDescriptor[] parcels;\n\npublic static String constructUri(String url) {\n    String editString = url.replaceAll(\"%20\", \" \");\n    int n = editString.length();\n    String uri = editString.substring(5, n - 1);\n    Log.d(\"URI\", uri);\n    return URI_PREFIX + uri + \"\\\"\";\n}\n\npublic ParcelFileDescriptor openFile(Uri uri, String mode) {\n\n    Log.d(\"OPEN\", uri.getPath());\n    return parcels[0];\n\n}\n\n@Override\npublic boolean onCreate() {\n    return true;\n}\n\n@Override\npublic int delete(Uri uri, String s, String[] as) {\n    throw new UnsupportedOperationException(\n            \"Not supported by this provider\");\n}\n\n@Override\npublic String getType(Uri uri) {\n    throw new UnsupportedOperationException(\n            \"Not supported by this provider\");\n}\n\n@Override\npublic Uri insert(Uri uri, ContentValues contentvalues) {\n    throw new UnsupportedOperationException(\n            \"Not supported by this provider\");\n}\n\n@Override\npublic Cursor query(Uri uri, String[] as, String s, String[] as1, String s1) {\n    throw new UnsupportedOperationException(\n            \"Not supported by this provider\");\n}\n\n@Override\npublic int update(Uri uri, ContentValues contentvalues, String s,\n        String[] as) {\n    throw new UnsupportedOperationException(\n            \"Not supported by this provider\");\n}\n\nclass DecryptAsync extends AsyncTask<String, Integer, String> {\n\n    @Override\n    protected String doInBackground(String... paramArrayOfParams) {\n        // TODO Auto-generated method stub\n        try {\n            file = new File(paramArrayOfParams[0]);\n            Log.d(\"DecrypOpened\", file.toString());\n            parcels = ParcelFileDescriptor.createPipe();\n            Log.d(\"filebeindec\", LocalFileContentProvider.file.toString());\n            FileInputStream fis = new FileInputStream(LocalFileContentProvider.file);\n\n            android.os.ParcelFileDescriptor.AutoCloseOutputStream out = new android.os.ParcelFileDescriptor.AutoCloseOutputStream(parcels[1]);\n            Cipher ecipher;\n            Cipher dcipher;\n            SecretKey key;\n            String input = \"768f8a949de079da\";\n            byte[] encoded = new BigInteger(input, 16).toByteArray();\n            key = new SecretKeySpec(encoded, \"DES\");\n            byte[] iv = new byte[] { (byte) 0x8E, 0x12, 0x39, (byte) 0x9C,\n                    0x07, 0x72, 0x6F, 0x5A };\n            AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);\n            ecipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n            dcipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n            ecipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n            dcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n            byte[] buf = new byte[1024];\n            InputStream in = new CipherInputStream(fis, dcipher);\n            int numRead = 0;\n            int n = 1;\n            while ((numRead = in.read(buf)) >= 0) {\n                n++;\n                out.write(buf, 0, numRead);\n                Log.d(\"Error\", \"SD\");\n                if (n == 64) {\n                    out.flush();\n                    out.flush();\n                    n = 0;\n                }\n            }\n\n            Log.d(\"Decypt Done\", out.toString());\n        } catch (Exception e) {\n            Log.d(\"AsyncError\", e.toString());\n        }\n        return null;\n    }\n\n    @Override\n    protected void onPostExecute(String result) {\n        // TODO Auto-generated method stub\n        super.onPostExecute(result);\n    }\n\n}\n", "idx": 1030}
{"project": "cipher", "commit_id": "Snippet47586994_29606.java", "target": 0, "func": "    desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\n        // Initialize the cipher for encryption\n        desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n\n        //sensitive information\n        byte[] text = \"This is sample text for encryption\".getBytes();\n\n        System.out.println(\"Text [Byte Format] : \" + text);\n        System.out.println(\"Text : \" + new String(text));\n\n        // Encrypt the text\n        byte[] textEncrypted = desCipher.doFinal(text);\n", "idx": 1031}
{"project": "cipher", "commit_id": "Snippet26529950_8678.java", "target": 0, "func": "public class AES {\n\n    public String getEncrypt(String pass){\n        String password = encrypt(pass);\n        return password;\n    }\n\n    public String getDecrypt(String pass){\n        String key = \"AesSEcREtkeyABCD\";\n        byte[] passwordByte = decrypt(key,pass);\n        String password = new String(passwordByte);\n        return password;\n    }\n\n    private byte[] decrypt(String key, String encrypted) {\n        try {\n            SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(skeySpec.getEncoded(), \"AES\"));\n            //getting error here\n            byte[] original = cipher.doFinal(encrypted.getBytes());\n            return original;\n        } catch (IllegalBlockSizeException ex) {\n            ex.printStackTrace();\n        } catch (BadPaddingException ex) {\n            ex.printStackTrace();\n        } catch (InvalidKeyException ex) {\n            ex.printStackTrace();\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        } catch (NoSuchPaddingException ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    } \n\n    private String encrypt(String value) {\n        try {\n            byte[] raw = new byte[]{'A', 'e', 's', 'S', 'E', 'c', 'R', 'E', 't', 'k', 'e', 'y','A','B','C','D'};\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n            byte[] encrypted = cipher.doFinal(value.getBytes());\n            System.out.println(\"encrypted string:\" + (new String(encrypted)));\n            return new String(encrypted);\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        } catch (IllegalBlockSizeException ex) {\n            ex.printStackTrace();       \n        } catch (BadPaddingException ex) {\n            ex.printStackTrace();\n        } catch (InvalidKeyException ex) {\n            ex.printStackTrace();\n        } catch (NoSuchPaddingException ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }\n", "idx": 1032}
{"project": "cipher", "commit_id": "Snippet25763592_7919.java", "target": 0, "func": "package encryption;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Sender {\n\n    private Cipher encoder;\n    private SecretKeySpec myKey;\n\n    public Sender() throws Exception {\n       encoder = Cipher.getInstance(\"AES\");\n    }\n\n    public void setKey(byte[] key) throws Exception {\n      myKey = new SecretKeySpec(key, \"AES\");\n        encoder.init(Cipher.ENCRYPT_MODE, myKey);\n    }\n\n    public byte[] send(byte[] message) throws Exception {\n        return encoder.doFinal(message);\n    }\n}\n", "idx": 1033}
{"project": "cipher", "commit_id": "Snippet20597001_3199.java", "target": 0, "func": "try {\n    m_encrypt = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n    m_encrypt.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keys.getEncryptKey().getBytes(), \"Blowfish\"));\n    m_decrypt = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n    m_decrypt.init(Cipher.DECRYPT_MODE, new SecretKeySpec(keys.getDecryptKey().getBytes(), \"Blowfish\"));\n} catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n    e.printStackTrace();\n} catch (InvalidKeyException e) {\n    e.printStackTrace();\n}\n", "idx": 1034}
{"project": "cipher", "commit_id": "Snippet45103983_27227.java", "target": 0, "func": "String base64;\nchar[] password = \"password\".toCharArray();\nString randomString = new BigInteger(130, new SecureRandom()).toString(32);\ntry {\n    //Encrypt Client Side\n    SecretKey key = new SecretKeySpec(SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA512\").generateSecret(new PBEKeySpec(password)).getEncoded(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    base64 = Base64.getEncoder().encodeToString(cipher.doFinal(randomString.getBytes(StandardCharsets.UTF_8)));\n} catch (GeneralSecurityException e) {\n    throw new IllegalStateException(e);\n}\ntry {\n    //Decrypt Server Side\n    SecretKey key = new SecretKeySpec(SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA512\").generateSecret(new PBEKeySpec(password)).getEncoded(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    //Check if both strings match\n    System.out.println(Arrays.equals(cipher.doFinal(Base64.getDecoder().decode(base64)), randomString.getBytes(StandardCharsets.UTF_8)));\n} catch (GeneralSecurityException e) {\n    throw new IllegalStateException(e);\n}\n", "idx": 1035}
{"project": "cipher", "commit_id": "Snippet41672352_23606.java", "target": 0, "func": "package client;\nimport java.io.InputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport my.web.services.KeysGeneration;\n\npublic class TestClient {\n    private static String keypass = \"KHU12345KHU12345\";\n    public static void callPostService()\n    {\n        try{\n            URL url = new URL(\"http://localhost:8080/RestWebService/MM\");\n            HttpURLConnection conn =(HttpURLConnection)url.openConnection();\n            // Allow Inputs\n            conn.setDoInput(true);\n\n            // Allow Outputs\n            conn.setDoOutput(true);\n\n            // Don't use a cached copy.\n            conn.setUseCaches(false);\n            conn.setRequestMethod(\"POST\");\n            String text;\n            OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());\n            String email=\"sabah@gmail.com\";\n\n//          //**********AES Encryption\n\n\n//           // Create key and cipher\n            SecretKey aesKey = KeysGeneration.getKeys(keypass);\n\n                Cipher cipher = Cipher.getInstance(\"AES\");\n//              // encrypt the text\n                cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n                byte[] encrypted = cipher.doFinal(email.getBytes());\n                System.out.println(\"checking encryption \"+new String(encrypted));\n               writer.write(\"&email=\"+(encrypted));\n\n//               //**********AES Encryption \n\n////                //**********AES Decryption\n//\n////                // decrypt the text\n                cipher.init(Cipher.DECRYPT_MODE, aesKey);\n                String decrypted= new String(cipher.doFinal(encrypted));\n                System.out.println(\"checking dencryption \"+decrypted);\n////\n//////                   //**********AES Decryption\n\n            writer.flush();\n            writer.close();\n            InputStream stream = conn.getInputStream();\n            byte[] b = new byte[1024];\n            int len = 0;\n            while((len=stream.read(b, 0,1024))>0)\n            {\n                System.out.println(new String(b,0,len));\n            }\n            stream.close();\n\n        }\n        catch(Exception ex)\n        {\n            ex.printStackTrace();\n        }\n    }\n\n    public static void callGETService()\n    {\n        try{\n            URL url = new URL(\"http://localhost:8080/RestWebService/MM?email=sabah@khu.ac.kr&pwd=1985\");\n            HttpURLConnection conn =(HttpURLConnection)url.openConnection();\n            // Allow Inputs\n            conn.setDoInput(true);\n\n            // Allow Outputs\n            conn.setDoOutput(false);\n\n            // Don't use a cached copy.\n            conn.setUseCaches(false);\n            conn.setRequestMethod(\"GET\");\n            InputStream stream = conn.getInputStream();\n            byte[] b = new byte[1024];\n            int len = 0;\n            while((len=stream.read(b, 0,1024))>0)\n            {\n                System.out.println(new String(b,0,len));\n            }\n\n            stream.close();\n        }\n        catch(Exception ex)\n        {\n            ex.printStackTrace();\n        }\n\n    }\n\n    public static void main(String[] args) {\n        // open your connection\n        TestClient.callGETService();\n        TestClient.callPostService();\n    }\n\n}\n\n//webService\n\npackage my.web.services;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.ws.rs.FormParam;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.QueryParam;\n\n@Path(\"/MM\")\npublic class WebService {\n\n    private String keypass = \"KHU12345KHU12345\";\n\n    //********GET Method*************\n\n    @GET\n    //GET method provides read only access to resources\n    public String validateUserGETMethod(@QueryParam(\"email\")String email, @QueryParam(\"pwd\")String pwd)\n\n    {\n        return \"Using GET method \\n Email address: \"+email+ \" and password:\" +pwd;\n    }\n\n\n    //********POST Method*************\n\n    //POST method is used to create or update a new resources\n    //To generate encryption of email parameter\n\n    @POST\n    @Path(\"/encryptEmail\")\n    public String validateUserPOSTMethodEncryption(@FormParam(\"email\")String email)throws Exception\n\n    {\n        // Create key and cipher\n        SecretKey aesKey = KeysGeneration.getKeys(keypass);\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        // encrypt the text\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n        byte[] encrypted = cipher.doFinal(email.getBytes());\n        System.err.println(new String(encrypted));\n\n        return \"Using POST method \\n Email address (encrypted): \"+new String(encrypted);\n\n    }\n\n\n    //POST method is used to create or update a new resources\n    //To  generate decryption of email parameter\n    @POST\n    @Path(\"/decryptEmail\")\n    public String validateUserPOSTMethodDecryption(@FormParam(\"email\")String email)throws Exception\n\n    {\n        //SecretKey aesKey = KeysGeneration.getKeys(keypass);\n        SecretKey secKey = KeysGeneration.getKeys(keypass);//generator.generateKey();\n\n        // Create key and cipher\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n\n        // decrypt the text\n        cipher.init(Cipher.DECRYPT_MODE, secKey);\n        String decrypted= new String(cipher.doFinal(email.getBytes()));\n\n        return \"Using POST method \\n Email address (decrypted): \"+decrypted;\n    }\n\n}\n", "idx": 1036}
{"project": "cipher", "commit_id": "Snippet20552487_3141.java", "target": 0, "func": "SecretKeySpec localSecretKeySpec = new SecretKeySpec(arrayOfByte, \"AES\");\nCipher localCipher = Cipher.getInstance(\"AES\");\n", "idx": 1037}
{"project": "cipher", "commit_id": "Snippet19065020_1939.java", "target": 0, "func": "Cipher cipher=Cipher.getInstance(\"AES/ECB/NoPadding\");\ncipher.init(Cipher.ENCRYPT_MODE, encryptionKey);\nbyte[] encryptedData=cipher.doFinal(plaintext);  // will be 16 bytes\n", "idx": 1038}
{"project": "cipher", "commit_id": "Snippet10748798_35018.java", "target": 0, "func": "    protected String encrypt(String token) throws Exception {\n            // Instantiate the cipher\n            final SecretKeySpec key = new SecretKeySpec(\"oldhouse\".getBytes(\"ISO-8859-1\"), \"DES\");\n            AlgorithmParameterSpec paramSpec = new IvParameterSpec(\"houseold\".getBytes());\n\n    //function used to encrypt\n    protected String encrypt(String token) throws Exception {\n            // Instantiate the cipher\n            final SecretKeySpec key = new SecretKeySpec(\"oldhouse\".getBytes(\"ISO-8859-1\"), \"DES\");\n            AlgorithmParameterSpec paramSpec = new IvParameterSpec(\"houseold\".getBytes());\n\n            Cipher cipher = Cipher.getInstance(\"DES/CFB8/NoPadding\");\n            cipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n            byte[] binaryData = cipher.doFinal(token.getBytes(\"ISO-8859-1\"));\n\n            return new String(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData), \"ISO-8859-1\");\n\n        }\n", "idx": 1039}
{"project": "cipher", "commit_id": "Snippet20682913_3288.java", "target": 0, "func": "public class EncDec {\n\n    public static void main(String[] args) throws IOException\n            , InvalidKeyException, NoSuchAlgorithmException\n            , NoSuchPaddingException {\n\n        final String MESSAGE = \"I'm a secret message\";\n        final Charset CHARSET = Charset.defaultCharset();\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        SecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        // Encrypt the message\n        InputStream plainIn = new ByteArrayInputStream(\n                MESSAGE.getBytes(CHARSET));\n        ByteArrayOutputStream encryptedOut = new ByteArrayOutputStream();\n        copy(plainIn, new CipherOutputStream(encryptedOut, cipher));\n\n        // Decrypt the message\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        InputStream encryptedIn = new CipherInputStream(\n                new ByteArrayInputStream(encryptedOut.toByteArray()), cipher);\n        ByteArrayOutputStream plainOut = new ByteArrayOutputStream();\n        copy(encryptedIn, plainOut);\n\n        System.out.println(new String(plainOut.toByteArray(), CHARSET));\n    }\n\n    private static void copy(InputStream in, OutputStream out)\n            throws IOException {\n        byte[] buffer = new byte[4096];\n        while ( in.read(buffer) > -1) {\n            out.write(buffer);\n        }\n        out.flush();\n    }\n}\n", "idx": 1040}
{"project": "cipher", "commit_id": "Snippet5613948_31719.java", "target": 0, "func": "    //Work out MD5 of the HashMap result (convert it to bytes with objectOutputStream, and MD5 the bytes)\n    MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n    ByteArrayOutputStream bos = new ByteArrayOutputStream() ;\n    ObjectOutputStream out = new ObjectOutputStream(bos) ;\n    out.writeObject(result);\n    out.close();\n    byte[] md5 = messageDigest.digest(bos.toByteArray();\n\n    //Encrypt the httpURLConnection response stream, and send the HashMap result and the md5 over the stream\n    Cipher symmetricCipher = Cipher.getInstance(\"DES\");\n    symmetricCipher.init(Cipher.ENCRYPT_MODE, symmetricKey);\n    CipherOutputStream cipherOutput = new CipherOutputStream(response.getOutputStream(), symmetricCipher);\n    BufferedOutputStream bufferedOutput = new BufferedOutputStream(cipherOutput);\n    ObjectOutputStream objectOutput = new ObjectOutputStream(out);\n    objectOutput.writeObject(result);\n    objectOutput.writeObject(md5);\n    objectOutput.flush();\n", "idx": 1041}
{"project": "cipher", "commit_id": "Snippet30404326_12578.java", "target": 0, "func": "public class Client {\n\nprivate static SecretKeySpec AES_Key;\nprivate static final String key = \"1234567890ABCDEF\";\n\npublic static void main(String[] args) throws IOException, NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n\n    Socket mySocket = null;\n    PrintWriter out = null;\n    BufferedReader in = null;\n\n\n\n    AES_Key = new SecretKeySpec(key.getBytes(), \"AES\");\n\n    System.out.println(AES_Key);\n     Cipher AES_Cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"BC\");\n\n    try {\n        mySocket = new Socket(\"localhost\", 4443);\n        out = new PrintWriter(mySocket.getOutputStream(), true);\n        in = new BufferedReader(new InputStreamReader(mySocket.getInputStream()));\n    } catch (UnknownHostException e) {\n        System.err.println(\"Don't know about host\");\n        System.exit(1);\n    } catch (IOException e) {\n        System.err.println(\"Couldn't get I/O for the connection to: localhost.\");\n        System.exit(1);\n    }\n\n    BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));\n    String fromServer;\n    String fromUser;\n\n    System.out.println(\"Client run \");\n\n    while (true) {\n        System.out.println(\"type message :\");\n         AES_Cipher.init(Cipher.ENCRYPT_MODE, AES_Key);\n        fromUser = stdIn.readLine();\n\n        byte plaintext[] = fromUser.getBytes();\n        byte final_plaintext[] = AES_Cipher.doFinal(plaintext);\n       // fromUser=toHexString(final_plaintext);\n       String msg = new String(final_plaintext, \"ASCII\");\n\n        System.out.println(final_plaintext);\n    if (fromUser != null) {\n            out.println(msg);\n    }\n         else{ break; }\n\n        fromServer = in.readLine();\n        if(fromServer!=null){\n            System.out.println(\"Client receive :\" + fromServer);\n        }\n        else{  break; }\n    }\n\n    out.close();\n    in.close();\n    stdIn.close();\n    mySocket.close();\n}\nprivate static String toHexString(byte[] block) {\n    StringBuffer buf = new StringBuffer();\n\n    int len = block.length;\n\n    for (int i = 0; i < len; i++) {\n        byte2hex(block[i], buf);\n        if (i < len - 1) {\n            buf.append(\":\");\n        }\n    }\n    return buf.toString();\n}\n\n/*\n * Converts a byte to hex digit and writes to the supplied buffer\n */\nprivate static void byte2hex(byte b, StringBuffer buf) {\n    char[] hexChars = {'0', '1', '2', '3', '4', '5', '6', '7', '8',\n        '9', 'A', 'B', 'C', 'D', 'E', 'F'};\n    int high = ((b & 0xf0) >> 4);\n    int low = (b & 0x0f);\n    buf.append(hexChars[high]);\n    buf.append(hexChars[low]);\n}\n}\n", "idx": 1042}
{"project": "cipher", "commit_id": "Snippet40459616_22327.java", "target": 0, "func": "public class AESencrp {\n\n\n\n\nprivate static final String ALGO = \"AES\";\nprivate static final byte[] keyValue =\n        new byte[] { '0', '1', '2', '3', '4', '5', '6',\n\n                '7', '8', '9', '0','1', '2', '3', '4', '5' };\n\n\npublic static String encrypt(String Data) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(Data.getBytes());\n    //String encryptedValue = com.example.xpertech.aesencryption.Base64.encodeToString(encVal, com.example.xpertech.aesencryption.Base64.DEFAULT);\n //   String encryptedValue = new BASE64Encoder().encode(encVal);\n    String encryptedValue = Base64.encodeToString(encVal, Base64.NO_WRAP);\n    return encryptedValue;\n}\n\npublic static String decrypt(String encryptedData) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.DECRYPT_MODE, key);\n\n   // byte[] decordedValue = new  com.example.xpertech.aesencryption.Base64.Decoder(encryptedData, com.example.xpertech.aesencryption.Base64.NO_WRAP);\n    byte[] decordedValue = Base64.decode(encryptedData, Base64.DEFAULT);\n\n   // byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    return decryptedValue;\n}\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, ALGO);\n    return key;\n}\n", "idx": 1043}
{"project": "cipher", "commit_id": "Snippet29347142_11378.java", "target": 0, "func": "public class SEncryption {\n\nprivate static final String ALGO = \"AES\";\nprivate static final byte[] keyValue = new byte[] { 'O', 'u', 'r', 'B',\n'e', 's', 't','S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };\n\npublic static String encrypt(String Data) throws Exception {\nKey key = generateKey();\nCipher c = Cipher.getInstance(ALGO);\nc.init(Cipher.ENCRYPT_MODE, key);\nbyte[] encVal = c.doFinal(Data.getBytes());\nBase64 ob=new Base64();\nString encryptedValue = Base64.encodeBytes(encVal);\nreturn encryptedValue;\n}\n\npublic static String decrypt(String encryptedData) throws Exception {\nKey key = generateKey();\nCipher c = Cipher.getInstance(ALGO);\nc.init(Cipher.DECRYPT_MODE, key);\nbyte[] decordedValue = Base64.decode(encryptedData);\nbyte[] decValue = c.doFinal(decordedValue);\nString decryptedValue = new String(decValue);\nreturn decryptedValue;\n}\n\nprivate static Key generateKey() throws Exception {\nKey key = new SecretKeySpec(keyValue, ALGO);\nreturn key;\n}\npublic static void main(String[] args) throws Exception {\n\n        String password = \"346333\";\n        String passwordEnc = encrypt(password);\n        String passwordDec = decrypt(passwordEnc);\n\n        System.out.println(\"Plain Text : \" + password);\n        System.out.println(\"Encrypted Text : \" + passwordEnc);\n        System.out.println(\"Decrypted Text : \" + passwordDec);\n    }\n\n}\n", "idx": 1044}
{"project": "cipher", "commit_id": "Snippet35556534_17450.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 1045}
{"project": "cipher", "commit_id": "Snippet34965976_16934.java", "target": 0, "func": "public class AESCryptt {\n    private static final String TAG = \"AESCrypt\";\n    private static final String AES_MODE = \"AES/ECB/ZeroBytePadding\";\n    private static final String CHARSET = \"UTF-8\";//\n    public static boolean DEBUG_LOG_ENABLED = false;\n\n\n    private static SecretKeySpec generateKey(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        byte[] key = new byte[]{your key in byte here (byte) a, (byte) f , ..... };\n        SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n        return secretKeySpec;\n    }\n\n\n    /**\n     * Encrypt and encode message using 256-bit AES with key generated from password.\n     *\n     *\n     * @param password used to generated key\n     * @param message the thing you want to encrypt assumed String UTF-8\n     * @return Base64 encoded CipherText\n     * @throws GeneralSecurityException if problems occur during encryption\n     */\n    public static String encrypt(final String password, String message)\n            throws GeneralSecurityException {\n        try {\n            final SecretKeySpec key = generateKey(password);\n            log(\"message\", message);\n            byte[] cipherText = encrypt(key, ivBytes, message.getBytes(CHARSET));\n            //NO_WRAP is important as was getting \\n at the end\n            String encoded = String.valueOf(Base64.encodeToString(cipherText, Base64.NO_PADDING ));\n            log(\"Base64.NO_WRAP\", encoded);\n            return encoded;\n        } catch (UnsupportedEncodingException e) {\n            if (DEBUG_LOG_ENABLED)\n                Log.e(TAG, \"UnsupportedEncodingException \", e);\n            throw new GeneralSecurityException(e);\n        }\n    }\n\n\n    /**\n     * More flexible AES encrypt that doesn't encode\n     * @param key AES key typically 128, 192 or 256 bit\n     * @param iv Initiation Vector\n     * @param message in bytes (assumed it's already been decoded)\n     * @return Encrypted cipher text (not encoded)\n     * @throws GeneralSecurityException if something goes wrong during encryption\n     */\n    public static byte[] encrypt(final SecretKeySpec key, final byte[] iv, final byte[] message)\n            throws GeneralSecurityException {\n        final Cipher cipher = Cipher.getInstance(AES_MODE);\n        IvParameterSpec ivSpec = new IvParameterSpec(iv);\n        cipher.init(Cipher.ENCRYPT_MODE, key);//, ivSpec\n        byte[] cipherText = cipher.doFinal(message);\n        log(\"cipherText\", cipherText);\n        return cipherText;\n    }\n\n\n    /**\n     * Decrypt and decode ciphertext using 256-bit AES with key generated from password\n     *\n     * @param password used to generated key\n     * @param base64EncodedCipherText the encrpyted message encoded with base64\n     * @return message in Plain text (String UTF-8)\n     * @throws GeneralSecurityException if there's an issue decrypting\n     */\n    public static String decrypt(final String password, String base64EncodedCipherText)\n            throws GeneralSecurityException {\n\n        try {\n            final SecretKeySpec key = generateKey(password);\n            log(\"base64EncodedCipherText\", base64EncodedCipherText);\n            byte[] decodedCipherText = Base64.decode(base64EncodedCipherText, Base64.DEFAULT);\n            log(\"decodedCipherText\", decodedCipherText);\n            byte[] decryptedBytes = decrypt(key, ivBytes, decodedCipherText);\n            log(\"decryptedBytes\", decryptedBytes);\n            String message = new String(decryptedBytes, CHARSET);\n            log(\"message\", message);\n            return message;\n        } catch (UnsupportedEncodingException e) {\n            if (DEBUG_LOG_ENABLED)\n                Log.e(TAG, \"UnsupportedEncodingException \", e);\n            throw new GeneralSecurityException(e);\n        }\n    }\n\n\n    /**\n     * More flexible AES decrypt that doesn't encode\n     *\n     * @param key AES key typically 128, 192 or 256 bit\n     * @param iv Initiation Vector\n     * @param decodedCipherText in bytes (assumed it's already been decoded)\n     * @return Decrypted message cipher text (not encoded)\n     * @throws GeneralSecurityException if something goes wrong during encryption\n     */\n    public static byte[] decrypt(final SecretKeySpec key, final byte[] iv, final byte[] decodedCipherText)\n            throws GeneralSecurityException {\n        final Cipher cipher = Cipher.getInstance(AES_MODE );\n        IvParameterSpec ivSpec = new IvParameterSpec(iv);\n        cipher.init(Cipher.DECRYPT_MODE, key);//, ivSpec\n        byte[] decryptedBytes = cipher.doFinal(decodedCipherText);\n        log(\"decryptedBytes\", decryptedBytes);\n        return decryptedBytes;\n    }\n\n\n\n\n    private static void log(String what, byte[] bytes) {\n        if (DEBUG_LOG_ENABLED)\n            Log.d(TAG, what + \"[\" + bytes.length + \"] [\" + bytesToHex(bytes) + \"]\");\n    }\n\n    private static void log(String what, String value) {\n        if (DEBUG_LOG_ENABLED)\n            Log.d(TAG, what + \"[\" + value.length() + \"] [\" + value + \"]\");\n    }\n\n\n    /**\n     * Converts byte array to hexidecimal useful for logging and fault finding\n     * @param bytes\n     * @return\n     */\n    private static String bytesToHex(byte[] bytes) {\n        final char[] hexArray = {'0', '1', '2', '3', '4', '5', '6', '7', '8',\n                '9', 'A', 'B', 'C', 'D', 'E', 'F'};\n        char[] hexChars = new char[bytes.length * 2];\n        int v;\n        for (int j = 0; j < bytes.length; j++) {\n            v = bytes[j] & 0xFF;\n            hexChars[j * 2] = hexArray[v >>> 4];\n            hexChars[j * 2 + 1] = hexArray[v & 0x0F];\n        }\n        return new String(hexChars);\n    }\n\n    private AESCryptt() {\n    }\n}\n", "idx": 1046}
{"project": "cipher", "commit_id": "Snippet31611212_13730.java", "target": 0, "func": "package com.example.dell_pc.myapplication;\n\nimport android.content.Context;\nimport android.content.ContextWrapper;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.net.Uri;\nimport android.os.Environment;\nimport android.provider.MediaStore;\nimport android.support.v7.app.ActionBarActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ImageView;\n\nimport java.io.BufferedReader;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Random;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class MainActivity extends ActionBarActivity {\n    Intent intent;\n    int CAPTURE_IMAGE = 100;\n    String path = Environment.getExternalStorageDirectory().getAbsolutePath();\n    Uri capturedImageUri;\n    public String TAG = \"Tag\";\n    Bitmap bitmap = null;\n    public String imagename = \"\";\n    File directory, directory1;\n    int value, value1, value2 = 0;\n    Random rand;\n    String final_string = \"\";\n    String final_string1 = \"\";\n    String final_string2 = \"\";\n    SharedPreferencesClass spc;\n    String var = \"\", serverstr = \"\";\n    String st = \"\";\n    File sub;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        spc = new SharedPreferencesClass(getApplicationContext());\n        //spc.clearsharedpreference();\n        var = spc.getdata();\n\n        rand = new Random();\n        if (var == null) {\n            generatekey();\n            spc.putdata(final_string);\n        }\n    //System.out.println(\"is rooted : \" + isRooted());\n        createdirectory_internalmemory(\"subdirectory\");\n        ////createfile_internalmemory(\"myfirstfile1.txt\");\n        ////create_writefile_internalmemory(\"myfirstfile1.txt\");\n        ////readtextfile_internalmemory(\"myfirstfile1.txt\");\n\n        setContentView(R.layout.activity_main);\n    }\n\n    /**\n     * *method to create directory in internal storage**\n     */\n    public void createdirectory_internalmemory(String directory_name) {\n\n        sub = new File(getFilesDir(), directory_name);\n        if (!sub.exists())\n            sub.mkdirs();\n    }\n\n    /**\n     * *method to simply create an empty file in internal storage***\n     */\n    public void createfile_internalmemory(String filename) {\n        //File f = new File(sub.getAbsolutePath() + \"/myfirstfile1.txt\");\n        File f = new File(sub.getAbsolutePath(),  \"/myfirstfile1.txt\");\n        try {\n            if (!f.exists())\n                f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * *method to create as well as write in a file in internal storage***\n     */\n    public void create_writefile_internalmemory(String filename) {\n        File f = new File(sub.getAbsolutePath() + filename);\n        FileOutputStream outputStream = null;\n        try {\n            outputStream = new FileOutputStream(f.getAbsolutePath());\n            outputStream.write(\"Hello There My Name is Rahul12345\".getBytes());\n            outputStream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * *method to read a text file from internal memory***\n     */\n    public void readtextfile_internalmemory(String filename) {\n        File f = new File(sub.getAbsolutePath() + filename);\n        StringBuilder text = new StringBuilder();\n\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(f));\n            String line;\n\n            while ((line = br.readLine()) != null) {\n                text.append(line);\n                text.append('\\n');\n            }\n            System.out.println(\"text is: \" + text);\n            br.close();\n        } catch (IOException e) {\n            //You'll need to add proper error handling here\n        }\n    }   \n\n\n    public void opencamera(View v) {\n        switch (v.getId()) {\n            case R.id.opencamera_button:\n                Calendar cal = Calendar.getInstance();\n                imagename = cal.getTimeInMillis() + \".jpg\";\n                declareimagepath();\n                takepicture();\n                break;\n\n            case R.id.showimages_button:\n                showallimages();\n                break;\n        }\n    }\n\n    public void declareimagepath() {\n\n        File file = new File(path, imagename);\n\n        if (!file.exists()) {\n            try {\n                file.createNewFile();\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        } else {\n            file.delete();\n            try {\n                file.createNewFile();\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n        capturedImageUri = Uri.fromFile(file);\n\n    }\n\n    public void takepicture() {\n\n        Intent i = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);\n        i.putExtra(MediaStore.EXTRA_OUTPUT, capturedImageUri);\n        startActivityForResult(i, CAPTURE_IMAGE);\n    }\n\n    public void compressandsave() {\n        OutputStream output;\n        try {\n            File file = new File(sub, imagename);\n\n            output = new FileOutputStream(file);\n            // Compress into png format image from 0% - 100%\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 40, output);\n            output.flush();\n            output.close();\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    public void deletefile() {\n        String filenames[] = directory.list();\n\n        if (filenames.length == 0) {\n            directory.delete();\n        } else {\n            for (int i = 0; i < filenames.length; i++) {\n                if (filenames[i].equals(imagename)) {\n                    new File(directory, filenames[i]).delete();\n                }\n            }\n        }\n    }\n\n    public void encrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n\n        File file = new File(directory,imagename);\n        // Here you read the cleartext.\n\n        FileInputStream fis = new FileInputStream(directory.getAbsolutePath() + \"/\" + imagename);\n\n        // This stream write the encrypted text. This stream will be wrapped by another stream.\n                FileOutputStream fos = new FileOutputStream(directory.getAbsolutePath() + \"/enc_\"+imagename);\n\n        // Length is 16 byte\n        // Careful when taking user input!!! http://stackoverflow.com/a/3452620/1188357\n        SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n\n        // Create cipher\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, sks);\n\n        // Wrap the output stream\n        CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n        // Write bytes\n        int b;\n\n        byte[] d = new byte[8];\n        while ((b = fis.read(d)) != -1) {\n            cos.write(d, 0, b);\n        }\n        // Flush and close streams.\n        cos.flush();\n        cos.close();\n        fis.close();\n    }\n\n    public void showallimages() {\n        intent = new Intent(this, ImageActivity.class);\n        intent.putExtra(\"directorypath\",sub.getAbsolutePath());\n        startActivity(intent);\n    }\n\n    public static boolean isRooted() {\n\n        // get from build info\n        String buildTags = android.os.Build.TAGS;\n        if (buildTags != null && buildTags.contains(\"test-keys\")) {\n            return true;\n        }\n\n        // check if /system/app/Superuser.apk is present\n        try {\n            File file = new File(\"/system/app/Superuser.apk\");\n            if (file.exists()) {\n                return true;\n            }\n        } catch (Exception e1) {\n            // ignore\n        }\n\n        // try executing commands\n        return canExecuteCommand(\"/system/xbin/which su\")\n                || canExecuteCommand(\"/system/bin/which su\") || canExecuteCommand(\"which su\");\n    }\n\n    // executes a command on the system\n    private static boolean canExecuteCommand(String command) {\n        boolean executedSuccesfully;\n        try {\n            Runtime.getRuntime().exec(command);\n            executedSuccesfully = true;\n        } catch (Exception e) {\n            executedSuccesfully = false;\n        }\n\n        return executedSuccesfully;\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        System.out.println(\"running safe in activityResult : \"+requestCode+\"  \"+CAPTURE_IMAGE);\n        if (requestCode == CAPTURE_IMAGE) {\n\n            try {\n\n                bitmap = MediaStore.Images.Media.getBitmap(getApplicationContext().getContentResolver(), capturedImageUri);\n\n                //imageView.setImageBitmap(bitmap);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"running safe : \"+resultCode+\"  \"+RESULT_OK);\n            if (resultCode == RESULT_OK) {\n\n                //compressandsave();\n                String p = saveToInternalSorage(bitmap);\n                new File(capturedImageUri.getPath()).delete();\n\n\n                try {\n                    encrypt();                    \n                    new File(directory, imagename).delete();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                } catch (NoSuchAlgorithmException e) {\n                    e.printStackTrace();\n                } catch (NoSuchPaddingException e) {\n                    e.printStackTrace();\n                } catch (InvalidKeyException e) {\n                    e.printStackTrace();\n                }\n                loadImageFromStorage(p);\n\n            }\n        }\n    }\n\n    private String saveToInternalSorage(Bitmap bitmapImage){\n\n        ContextWrapper cw = new ContextWrapper(getApplicationContext());\n        // path to /data/data/yourapp/app_data/imageDir\n        directory = cw.getDir(\"imageDir\", Context.MODE_PRIVATE);\n        // Create imageDir\n        File mypath=new File(directory,imagename);\n\n        FileOutputStream fos = null;\n        try {\n\n            fos = new FileOutputStream(mypath);           \n            // Use the compress method on the BitMap object to write image to the OutputStream\n            bitmapImage.compress(Bitmap.CompressFormat.JPEG, 100, fos);\n            fos.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return directory.getAbsolutePath();\n    }\n\n    private void loadImageFromStorage(String path)\n    {\n\n        try {            \n            File f=new File(path, \"dec_\"+imagename);\n            FileInputStream fis = new FileInputStream(path+\"/enc_\"+imagename);\n\n            FileOutputStream fos = new FileOutputStream(f);\n\n            SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n\n            Cipher cipher = Cipher.getInstance(\"AES\");\n\n            cipher.init(Cipher.DECRYPT_MODE, sks);\n\n            CipherInputStream cis = new CipherInputStream(fis, cipher);\n\n            int b;\n            byte[] d = new byte[8];\n            while((b = cis.read(d)) != -1) {\n                fos.write(d, 0, b);\n            }\n\n            fos.flush();\n            fos.close();\n            cis.close();\n\n\n            //Bitmap bit = BitmapFactory.decodeByteArray(d,0,d.length);\n            //Bitmap b = BitmapFactory.decodeStream(new FileInputStream(f));\n\n            Bitmap bitm = BitmapFactory.decodeStream(new FileInputStream(f));\n\n            ImageView img=(ImageView)findViewById(R.id.myimage);\n\n            img.setImageBitmap(bitm);\n\n        }\n        catch (FileNotFoundException e)\n        {\n            e.printStackTrace();\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n}\n", "idx": 1047}
{"project": "cipher", "commit_id": "Snippet36670498_18526.java", "target": 0, "func": "import java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Scanner;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Encoder;\nimport sun.misc.BASE64Decoder;\n\npublic class Application\n{\n    public static void main(String[] args)\n    {\n        Scanner input = new Scanner(System.in);\n        String textToEncrypt = \"Hello World\";\n        String textToDecrypt;\n        String textToDecryptAscii;\n        String result;\n        int operation;\n        Cipher cipher = null;\n        try {\n            cipher = Cipher.getInstance(\"AES\");\n        } catch (NoSuchAlgorithmException e1) {\n            // TODO Auto-generated catch block\n            e1.printStackTrace();\n        } catch (NoSuchPaddingException e1) {\n            // TODO Auto-generated catch block\n            e1.printStackTrace();\n        }\n        String key = \"Baw12345Baw12345\"; // 128 bit key\n\n        BASE64Encoder asciiEncoder = new BASE64Encoder();\n        BASE64Decoder asciiDecoder = new BASE64Decoder();\n\n        System.out.printf(\"Enter:\\n1 for encryption\\n2 for decryption\\n\\nChoice: \");\n        operation = input.nextInt();\n        input.nextLine();\n\n        if (operation == 1)\n        {\n            try \n            {\n                System.out.printf(\"\\n---------\\n\\nText to encrypt: \");\n                textToEncrypt = input.nextLine();\n\n                //Create key and cipher\n                Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n                //Cipher cipher = Cipher.getInstance(\"AES\");\n\n                //encrypt the text\n                cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n                byte[] encrypted = cipher.doFinal(textToEncrypt.getBytes());\n\n                StringBuilder sb = new StringBuilder();\n                for (byte b: encrypted)\n                {\n                    sb.append((char)b);\n                }\n\n                // the encrypted String\n                String enc = sb.toString();\n                //System.out.println(\"encrypted:\" + enc);\n\n                String asciiEncodedEncryptedResult = asciiEncoder.encodeBuffer(enc.getBytes());\n                System.out.println(\"Encrypted text: \" + asciiEncodedEncryptedResult);\n                //System.out.printf(\"\\n------------------------------\\nDecrypted text: \" + asciiEncodedEncryptedResult + \"\\n------------------------------\\n\\n\\n\");\n\n            }\n            catch(Exception e) \n            {\n                e.printStackTrace();\n            }\n        }\n        else if (operation == 2)\n        {\n            System.out.printf(\"\\n---------\\n\\nText to decrypt: \");\n            textToDecryptAscii = input.nextLine();\n\n            byte[] decodedBytes = null;\n            try\n            {\n                decodedBytes = asciiDecoder.decodeBuffer(textToDecryptAscii);\n            } catch (IOException e1) {\n                // TODO Auto-generated catch block\n                e1.printStackTrace();\n            }\n            //System.out.println(\"decodedBytes \" + new String(decodedBytes));\n\n            textToDecrypt = new String(decodedBytes);\n\n            //Convert the string to byte array\n            //for decryption\n            byte[] bb = new byte[textToDecrypt.length()];\n            for (int i=0; i<textToDecrypt.length(); i++)\n            {\n                bb[i] = (byte) textToDecrypt.charAt(i);\n            }\n\n            //decrypt the text\n            Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n            try\n            {\n                cipher.init(Cipher.DECRYPT_MODE, aesKey);\n            }\n            catch (InvalidKeyException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            String decrypted = null;\n            try\n            {\n                decrypted = new String(cipher.doFinal(bb));\n            }\n            catch (IllegalBlockSizeException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            catch (BadPaddingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            System.out.printf(\"\\n------------------------------\\nDecrypted text: \" + decrypted + \"\\n------------------------------\\n\\n\\n\");\n        }\n    }\n}\n", "idx": 1048}
{"project": "cipher", "commit_id": "Snippet43581720_25735.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.MessageDigest;\nimport java.util.Arrays;\nimport java.util.Base64;\n\npublic class AES {\n\n\n    public static SecretKeySpec secretKeySpec;\n    private static byte[] key;\n\n\n    public static String setKey(String myKey) throws Exception {\n\n\n        MessageDigest sha=null;\n\n        key =myKey.getBytes(\"UTF-8\");\n        sha=MessageDigest.getInstance(\"SHA-1\");\n        key=sha.digest(key);\n        key= Arrays.copyOf(key,16);\n\n        secretKeySpec=new SecretKeySpec(key,\"AES\");\n        return myKey;\n    }\n\n    public static String encrypt(String strToencrypt, String secret) throws Exception {\n\n        String s=  setKey(secret);\n        System.out.println(s);\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE,secretKeySpec);\n        return Base64.getEncoder().encodeToString(cipher.doFinal(strToencrypt.getBytes(\"UTF-8\")));\n    }\n\n\n    public static  String decryt(String strToDec , String secret) throws Exception {\n        setKey(secret);\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE,secretKeySpec);\n        return  new String(cipher.doFinal(Base64.getDecoder().decode(strToDec)));\n    }\n\n}\n", "idx": 1049}
{"project": "cipher", "commit_id": "Snippet37959381_19989.java", "target": 0, "func": "public class AESencrp {\n\n    private static final String ALGO = \"AES\";\n    private static byte[] keyValue = {};\n\n    public static String encrypt(String Data, Key key) throws Exception {\n        System.out.println(\"Key Encryp =============\"\n                + new String(key.getEncoded()));\n        System.out.println(\"\\n\\n key in Enc ==========>\" + key.getEncoded());\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        byte encryptedValue[] = new Base64().encode(encVal);\n        return new String(encryptedValue);\n    }\n\n    public static String decrypt(String encryptedData, Key key)\n            throws Exception {\n        System.out.println(\"Key Decryp =============\"\n                + new String(key.getEncoded()));\n        System.out.println(\"\\n\\n key in Dec ==========>\" + key.getEncoded());\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new Base64().decode(encryptedData.getBytes());\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n\n    public static void main(String[] args) throws Exception {\n\n        try {\n            String sPrivateKey = \"privateKey\";\n            keyValue = sPrivateKey.getBytes();\n            MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n            keyValue = sha.digest(keyValue);\n            keyValue = Arrays.copyOf(keyValue, 16); // use only first 128 bit\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        System.out.println(\"\\n\\n key in GK ==========>\" + key.getEncoded());\n        System.out.println(\"\\n\\n key in GK ==========>\"\n                + new String(key.getEncoded()));\n        String password = \"mypassword\";\n        String passwordEnc = encrypt(password, key);\n        String passwordDec = decrypt(passwordEnc, key);\n\n        System.out.println(\"Plain Text : \" + password);\n        System.out.println(\"Encrypted Text : \" + passwordEnc);\n        System.out.println(\"Decrypted Text : \" + passwordDec);\n    }\n\n}\n", "idx": 1050}
{"project": "cipher", "commit_id": "Snippet15240134_38333.java", "target": 0, "func": "package com.my.package;\n\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n// TODO Incomplete class\npublic class Encryption {\n\n    private static final byte[] salt = { (byte) 0xA4, (byte) 0x0B, (byte) 0xC8,\n            (byte) 0x34, (byte) 0xD6, (byte) 0x95, (byte) 0xF3, (byte) 0x13 };\n\n    private static int BLOCKS = 128;\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted)\n            throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    private static byte[] getKey() throws Exception {\n        byte[] keyStart = \"this is a key\".getBytes();\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(keyStart);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] key = skey.getEncoded();\n        return key;\n    }\n\n    public static void test() {\n        String test = \"My Name Is Dragon Warrior\";\n\n        byte[] e = null;\n        try {\n            e = encrypt(getKey(), test.getBytes());\n        } catch (Exception e1) {\n            // TODO Auto-generated catch block\n            e1.printStackTrace();\n        }\n        byte[] d = null;\n        try {\n            d = decrypt(getKey(), e);\n        } catch (Exception e1) {\n            // TODO Auto-generated catch block\n            e1.printStackTrace();\n        }\n        System.out.println(new String(d));\n    }\n}\n", "idx": 1051}
{"project": "cipher", "commit_id": "Snippet41328904_23295.java", "target": 0, "func": "public void encrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    // Here you read your file.\n    FileInputStream fis = new FileInputStream(\"Path Of your file\");\n    // This stream write the encrypted text. This stream will be wrapped by another stream.\n    FileOutputStream fos = new FileOutputStream(\"Path Of your file\");\n\n   // Length is 16 byte\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    // Create cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    // Wrap the output stream\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    // Write bytes\n    int b;\n    byte[] d = new byte[8];\n    while((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    cos.flush();\n    cos.close();\n    fis.close();\n}\n", "idx": 1052}
{"project": "cipher", "commit_id": "Snippet11019829_35250.java", "target": 0, "func": "package encryptionpackage;\n\nimport java.security.*;\nimport java.security.spec.InvalidKeySpecException;\nimport javax.crypto.Cipher; \nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\n\npublic class encryption \n{\n    // Note: The full CF default is \"AES/ECB/PKCS5Padding\"\n    private static final String ALGORITHM = \"AES\";\n    // The 24 character key from my CF app (base64 encoded)\n    // typically generated with:  generateSecretKey(\"AES\") \n    private static final String passKey = \"***********************\"; \n\n     public static String encrypt(String valueToEnc) throws Exception \n     {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encValue = c.doFinal(valueToEnc.getBytes());\n        String encryptedValue = bytesToHex(encValue);\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedValue) throws Exception \n    {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = hexStringToByteArray(encryptedValue);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n\n    private static Key generateKey() throws Exception \n    {\n          byte[] keyValue;\n          keyValue = new BASE64Decoder().decodeBuffer(passKey);\n        Key key = new SecretKeySpec(keyValue, ALGORITHM);\n\n        return key;\n    }\n\n    public static String bytesToHex(byte[] bytes) \n    { \n        final char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}; \n        char[] hexChars = new char[bytes.length * 2]; \n        int v; \n        for ( int j = 0; j < bytes.length; j++ ) \n        { \n            v = bytes[j] & 0xFF; \n            hexChars[j * 2] = hexArray[v >>> 4]; \n            hexChars[j * 2 + 1] = hexArray[v & 0x0F]; \n        } \n        return new String(hexChars); \n    } \n\n    public static byte[] hexStringToByteArray(String s) \n    { \n        int len = s.length(); \n        byte[] data = new byte[len / 2]; \n        for (int i = 0; i < len; i += 2) \n        { \n            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) \n                                 + Character.digit(s.charAt(i+1), 16)); \n        } \n        return data; \n    } \n\n}\n", "idx": 1053}
{"project": "cipher", "commit_id": "Snippet42192585_24169.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n", "idx": 1054}
{"project": "cipher", "commit_id": "Snippet42788457_24847.java", "target": 0, "func": "cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\"); // use this for descrypt full plain text without lost.\n", "idx": 1055}
{"project": "cipher", "commit_id": "Snippet42417725_24461.java", "target": 0, "func": "import java.security.MessageDigest;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\npublic class Md5Encryption \n{\n    private static final String ALGORITHM = \"md5\";\n    private static final String DIGEST_STRING = \"HG58YZ3CR9\";\n    private static final String CHARSET_UTF_8 = \"utf-8\";\n    private static final String SECRET_KEY_ALGORITHM = \"DESede\";\n    private static final String TRANSFORMATION_PADDING = \"DESede/CBC/PKCS5Padding\";\n\n    /* Encryption Method */\n    public byte[] encrypt(String message) throws Exception \n    { \n        final MessageDigest md = MessageDigest.getInstance(ALGORITHM); \n        final byte[] digestOfPassword = md.digest(DIGEST_STRING.getBytes(CHARSET_UTF_8)); \n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24); \n        for (int j = 0, k = 16; j < 8;) { \n                keyBytes[k++] = keyBytes[j++]; \n        } \n\n        final SecretKey key = new SecretKeySpec(keyBytes, SECRET_KEY_ALGORITHM); \n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]); \n        final Cipher cipher = Cipher.getInstance(TRANSFORMATION_PADDING); \n        cipher.init(Cipher.ENCRYPT_MODE, key, iv); \n\n        final byte[] plainTextBytes = message.getBytes(CHARSET_UTF_8); \n        final byte[] cipherText = cipher.doFinal(plainTextBytes); \n\n        return cipherText; \n    } \n\n   /* Decryption Method */\n    public String decrypt(byte[]  message) throws Exception { \n        final MessageDigest md = MessageDigest.getInstance(ALGORITHM); \n        final byte[] digestOfPassword = md.digest(DIGEST_STRING.getBytes(CHARSET_UTF_8)); \n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24); \n        for (int j = 0, k = 16; j < 8;) { \n                keyBytes[k++] = keyBytes[j++]; \n        } \n\n        final SecretKey key = new SecretKeySpec(keyBytes, SECRET_KEY_ALGORITHM); \n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]); \n        final Cipher decipher = Cipher.getInstance(TRANSFORMATION_PADDING); \n        decipher.init(Cipher.DECRYPT_MODE, key, iv); \n\n        final byte[] plainText = decipher.doFinal(message); \n\n        return new String(plainText, CHARSET_UTF_8); \n    }\n\n    public static void main(String[] args) throws Exception {\n\n\n        String text = \"TEST STRING TO ENCRYPT\";\n        byte[] codedtext = new Md5Encryption().encrypt(text);\n//        String codedtext = \".\u00aa\u00c9\u2026U$L\u00a7U`8\u00cb\u2030\u00ad?\u00a6\u201d\u203a\u00b0\u201e\";\n        String decodedtext = new Md5Encryption().decrypt(codedtext); \n\n        System.out.println(codedtext); // this is a byte array, you'll just see a reference to an array \n        System.out.println(decodedtext); // This correctly shows \"TEST STRING TO ENCRYPT\" \n    } \n\n\n}\n", "idx": 1056}
{"project": "cipher", "commit_id": "Snippet16552199_39482.java", "target": 0, "func": "    import javax.crypto.Cipher;\n    import javax.crypto.SecretKey;\n    import javax.crypto.spec.SecretKeySpec;\n\n    import org.apache.commons.codec.binary.Base64;\n\n    public class CipherUtil {\n\n        private static Base64 coder;\n        // linebreak\n        private static byte[] linebreak = {}; // Remove Base64 encoder default\n        private static String secret = \"qhebp92ihc13g741\"; // secret key length must\n        // be 16\n        private static SecretKey key;\n        private static Cipher cipher;\n\n        static {\n            try {\n                key = new SecretKeySpec(secret.getBytes(), \"AES\");\n                cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n                coder = new Base64(32, linebreak, true);\n            } catch (Throwable t) {\n                t.printStackTrace();\n            }\n        }\n\n        public static synchronized String encrypt(String plainText) throws Exception {\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] cipherText = cipher.doFinal(plainText.getBytes());\n            return new String(coder.encode(cipherText));\n        }\n\n        public static synchronized String decrypt(String codedText) throws Exception {\n            byte[] encypted = coder.decode(codedText.getBytes());\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] decrypted = cipher.doFinal(encypted);\n            return new String(decrypted);\n        }\n    }\n\n\n  [1]: http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n", "idx": 1057}
{"project": "cipher", "commit_id": "Snippet19753352_2470.java", "target": 0, "func": "package com.example.secretpictures;\nimport java.io.File; \nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\n\nimport javax.crypto.NoSuchPaddingException;\n\nimport javax.crypto.spec.SecretKeySpec;\n\nimport android.annotation.SuppressLint;\nimport android.app.Service;\nimport android.content.Intent;\nimport android.os.Environment;\nimport android.os.IBinder;\nimport android.util.Log;\n\npublic class EncryptService extends Service {\nprivate static final String TAG = EncryptService.class.getSimpleName();\n@Override\npublic IBinder onBind(Intent intent) {\n    return null;\n\n\n\n}\n@Override\npublic void onCreate() {\n    // TODO Auto-generated method stub\n    super.onCreate();\n\nLog.d(TAG, \"OnCreate\");\n}\n\n\n@SuppressLint(\"SdCardPath\")\n@Override\npublic void onStart(Intent intent, int startId) {\n    // TODO Auto-generated method stub\n    super.onStart(intent, startId);\n\nLog.d(TAG, \"OnStart\");\n\nFile file[] = Environment.getExternalStorageDirectory().listFiles();\nrecursiveFileFind(file);\n\n\ntry {\n\nFileInputStream fis = new FileInputStream(\"/mnt/sdcard/secretpictures/yolo.png\");\n// This stream write the encrypted text. This stream will be wrapped by another stream.\nFileOutputStream fos = new FileOutputStream(\"/mnt/sdcard/secretpictures/yolo2.enc\");\n\n// Length is 16 byte\nSecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n// Create cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    // Wrap the output stream\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    // Write bytes\n    int b;\n    byte[] d = new byte[8];\n    while((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    cos.flush();\n    cos.close();\n    fis.close();\n\n\n} catch (IOException  e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n}\n\n@Override\npublic void onDestroy() {\n    // TODO Auto-generated method stub\n    super.onDestroy();\n\nLog.d(TAG, \"OnDestroy\");\n}\n\n\n\npublic void recursiveFileFind(File[] file1){\nint i = 0;\nString filePath=\"\";\n if(file1!=null){\nwhile(i!=file1.length){\n    filePath = file1[i].getAbsolutePath();\n        if(file1[i].isDirectory()){\n                File file[] = file1[i].listFiles();\n            recursiveFileFind(file);\n            }\n        i++;\n        Log.d(i+\"\", filePath);\n\n}\n}\n}   \n}\n", "idx": 1058}
{"project": "cipher", "commit_id": "Snippet27428643_9583.java", "target": 0, "func": "            file = new File(\"/sdcard/test.txt\");\n            SecretKey key64 = new SecretKeySpec( new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 }, \"Blowfish\" );\n            Cipher cipher = Cipher.getInstance( \"Blowfish\" );\n\n            //Code to write your object to file\n\n            cipher.init( Cipher.ENCRYPT_MODE, key64 );\n\n            SealedObject sealedObject = new SealedObject( (Serializable) \"TEST\", cipher);\n            CipherOutputStream cipherOutputStream = new CipherOutputStream( new BufferedOutputStream( new FileOutputStream( file ) ), cipher );\n            ObjectOutputStream outputStream = new ObjectOutputStream( cipherOutputStream );\n            outputStream.writeObject( sealedObject );\n            outputStream.flush();\n            outputStream.close();\n\n            //now try to read it again\n\n            CipherInputStream cipherInputStream = new CipherInputStream( new BufferedInputStream( new FileInputStream( file ) ), cipher );\n\n            ObjectInputStream inputStream = new ObjectInputStream( cipherInputStream ); //<== this line crashes with StreamCorruptedExecution\n", "idx": 1059}
{"project": "cipher", "commit_id": "Snippet992119_29823.java", "target": 0, "func": "SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, key);\nbyte[] encryptedBytes = cipher.doFinal(clearText.getBytes());\n", "idx": 1060}
{"project": "cipher", "commit_id": "Snippet10266078_34618.java", "target": 0, "func": "public class Decrpytion {\n\npublic static void  Decrypt(String FileInName, String FileOutName ) throws  IOException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException\n{\n\n    FileOutName = FileOutName+\"/D.txt\";\n    String password = JOptionPane.showInputDialog(\"Enter The Password\"); //Un comment this line if u are usng either 1st or 2nd method of password for encryption\n\n    FileInputStream fileIn = new FileInputStream(FileInName);\n    FileOutputStream fileOut = new FileOutputStream(FileOutName);\n\n\n    PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey passwordKey = keyFactory.generateSecret(keySpec);\n\n    byte[] salt = new byte[8];\n    fileIn.read(salt);\n    int iterations = 100;\n\n    PBEParameterSpec parameterSpec = new PBEParameterSpec(salt, iterations);\n\n    Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    cipher.init(Cipher.DECRYPT_MODE, passwordKey, parameterSpec);\n\n    byte[] input = new byte[128];\n\n    int bytesRead;\n\n        while((bytesRead = fileIn.read(input)) != -1)\n        {\n\n            byte[] output = cipher.update(input, 0, bytesRead);\n\n                if (output != null)\n                    fileOut.write(output);\n        }\n\n    byte[] output = cipher.doFinal();\n\n        if (output != null)\n            fileOut.write(output);\n\n    fileIn.close();\n    fileOut.flush();\n    fileOut.close();\n\n\n}\n", "idx": 1061}
{"project": "cipher", "commit_id": "Snippet10322343_34683.java", "target": 0, "func": "public static String aes_encrypt (String text, String key) \n{\n    SecretKey skey = new SecretKeySpec(key.getBytes(), \"AES\"); \n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n    cipher.init(Cipher.ENCRYPT_MODE, skey);\n\n    return new String((cipher.doFinal(text.getBytes())));\n\n}\n", "idx": 1062}
{"project": "cipher", "commit_id": "Snippet43322310_25453.java", "target": 0, "func": "public static String encryptMaster(String message, String mykey) {\n\n          String encrypted = \"\";\n            String messageVal = message;\n            String mykeyVal = mykey;\n\n            SecretKey key = new SecretKeySpec(mykeyVal.getBytes(), \"AES\");\n//          Utilities.showLogE(\"key\", \"\" + key.toString());\n            try {\n                Cipher ecipher = Cipher.getInstance(\"AES\");\n                ecipher.init(Cipher.ENCRYPT_MODE, key);  \n                byte[] utf8 = messageVal.getBytes(\"UTF-8\");\n                byte[] enc = ecipher.doFinal(utf8);\n                //encrypted = Utilities.encodeBase64String(enc);\n                encrypted = new BASE64Encoder().encode(enc);\n//              Utilities.showLogE(\"encrypted\", \"\" + encrypted);\n            } catch (Exception e) {\n//              Log.d(Constants.LOGKEY, \"Exception\");\n                e.printStackTrace();\n            }\n\n            return encrypted;\n    }\n", "idx": 1063}
{"project": "cipher", "commit_id": "Snippet22129488_4540.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport java.util.Base64;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AES256 {\n\n    private SecretKeySpec secretKey;\n    private byte[] key;\n\n    public void setKey(String key) {    \n        MessageDigest sha = null;\n        try {\n            this.key = key.getBytes(\"UTF-8\");\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            this.key = sha.digest(this.key);\n            this.key = Arrays.copyOf(this.key, 16);\n            secretKey = new SecretKeySpec(this.key, \"AES\");\n        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String getSecretKey() {\n        return secretKey.toString();\n    }\n\n    public String getKey() {\n        return new String(key);\n    }\n\n    public String encrypt(String string) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            return Base64.getMimeEncoder().encodeToString(string.getBytes());\n        } catch (InvalidKeyException | NoSuchAlgorithmException | NoSuchPaddingException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public String decrypt(String string) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            return new String(cipher.doFinal(Base64.getMimeDecoder().decode(string.getBytes())));\n        } catch (InvalidKeyException | NoSuchAlgorithmException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n}\n", "idx": 1064}
{"project": "cipher", "commit_id": "Snippet13673634_37188.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.security.GeneralSecurityException;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\n\npublic class FileEncryptor {\n\n    public static void main( String[] args ) {\n\n        try {\n            encryptFile( \"C:\\\\test.txt\", \"password\" );\n            decryptFile( \"C:\\\\test.txt\", \"password\" );\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (GeneralSecurityException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    //Arbitrarily selected 8-byte salt sequence:\n    private static final byte[] salt = {\n        (byte) 0x43, (byte) 0x76, (byte) 0x95, (byte) 0xc7,\n        (byte) 0x5b, (byte) 0xd7, (byte) 0x45, (byte) 0x17 \n    };\n\n    private static Cipher makeCipher(String pass, Boolean decryptMode) throws GeneralSecurityException{\n\n        //Use a KeyFactory to derive the corresponding key from the passphrase:\n        PBEKeySpec keySpec = new PBEKeySpec(pass.toCharArray());\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(keySpec);\n\n        //Create parameters from the salt and an arbitrary number of iterations:\n        PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, 42);\n\n        /*Dump the key to a file for testing: */\n        FileEncryptor.keyToFile(key);\n\n        //Set up the cipher:\n        Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n\n        //Set the cipher mode to decryption or encryption:\n        if(decryptMode){\n            cipher.init(Cipher.ENCRYPT_MODE, key, pbeParamSpec);\n        } else {\n            cipher.init(Cipher.DECRYPT_MODE, key, pbeParamSpec);\n        }\n\n        return cipher;\n    }\n\n\n    /**Encrypts one file to a second file using a key derived from a passphrase:**/\n    public static void encryptFile(String fileName, String pass)\n                                throws IOException, GeneralSecurityException{\n        byte[] decData;\n        byte[] encData;\n        File inFile = new File(fileName);\n        //Generate the cipher using pass:\n        Cipher cipher = FileEncryptor.makeCipher(pass, true);\n\n        //Read in the file:\n        FileInputStream inStream = new FileInputStream(inFile);\n\n        int blockSize = 8;\n        //Figure out how many bytes are padded\n        int paddedCount = blockSize - ((int)inFile.length()  % blockSize );\n\n        //Figure out full size including padding\n        int padded = (int)inFile.length() + paddedCount;\n\n        decData = new byte[padded];\n\n\n        inStream.read(decData);\n\n        inStream.close();\n\n        //Write out padding bytes as per PKCS5 algorithm\n        for( int i = (int)inFile.length(); i < padded; ++i ) {\n            decData[i] = (byte)paddedCount;\n        }\n\n        //Encrypt the file data:\n        encData = cipher.doFinal(decData);\n\n\n        //Write the encrypted data to a new file:\n        FileOutputStream outStream = new FileOutputStream(new File(fileName + \".encrypted\"));\n        outStream.write(encData);\n        outStream.close();\n    }\n\n\n    /**Decrypts one file to a second file using a key derived from a passphrase:**/\n    public static void decryptFile(String fileName, String pass)\n                            throws GeneralSecurityException, IOException{\n        byte[] encData;\n        byte[] decData;\n        File inFile = new File(fileName+ \".encrypted\");\n\n        //Generate the cipher using pass:\n        Cipher cipher = FileEncryptor.makeCipher(pass, false);\n\n        //Read in the file:\n        FileInputStream inStream = new FileInputStream(inFile );\n        encData = new byte[(int)inFile.length()];\n        inStream.read(encData);\n        inStream.close();\n        //Decrypt the file data:\n        decData = cipher.doFinal(encData);\n\n        //Figure out how much padding to remove\n\n        int padCount = (int)decData[decData.length - 1];\n\n        //Naive check, will fail if plaintext file actually contained\n        //this at the end\n        //For robust check, check that padCount bytes at the end have same value\n        if( padCount >= 1 && padCount <= 8 ) {\n            decData = Arrays.copyOfRange( decData , 0, decData.length - padCount);\n        }\n\n        //Write the decrypted data to a new file:\n\n\n\n        FileOutputStream target = new FileOutputStream(new File(fileName + \".decrypted.txt\"));\n        target.write(decData);\n        target.close();\n    }\n\n    /**Record the key to a text file for testing:**/\n    private static void keyToFile(SecretKey key){\n        try {\n            File keyFile = new File(\"C:\\\\keyfile.txt\");\n            FileWriter keyStream = new FileWriter(keyFile);\n            String encodedKey = \"\\n\" + \"Encoded version of key:  \" + key.getEncoded().toString();\n            keyStream.write(key.toString());\n            keyStream.write(encodedKey);\n            keyStream.close();\n        } catch (IOException e) {\n            System.err.println(\"Failure writing key to file\");\n            e.printStackTrace();\n        }\n\n    }\n}\n", "idx": 1065}
{"project": "cipher", "commit_id": "Snippet18081254_1121.java", "target": 0, "func": "public static void main(String[] args) throws DecoderException, InvalidKeyException,\n        NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException,\n        IllegalBlockSizeException, BadPaddingException {\n    //Hex encoding/decoding done with Apache Codec\n    byte[] key = \"abcdefghabcdefgh\".getBytes();\n    String text = \"Password12345678\";\n\n    byte[] encrypted = encrypt(key, text.getBytes());\n    byte[] decrypted = decrypt(key, encrypted);\n\n    System.out.println(\"Text: \" + text);\n    System.out.println(\"Encrypted: \" + Hex.encodeHexString(encrypted));\n    System.out.println(\"Decrypted: \" + new String(decrypted));\n}\n\npublic static byte[] encrypt(byte[] key, byte[] unencrypted) throws NoSuchAlgorithmException,\n        NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException,\n        IllegalBlockSizeException, BadPaddingException{\n    //Set up the cipher and encrypt\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n    cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, \"AES\"));\n    byte[] encrypted = cipher.doFinal(unencrypted);\n\n    return encrypted;\n    }\n\npublic static byte[] decrypt(byte[] key, byte[] encrypted) throws NoSuchAlgorithmException,\n        NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException,\n        IllegalBlockSizeException, BadPaddingException{\n    //Decrypt the encrypted text\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n    cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, \"AES\"));\n    byte[] decrypted = cipher.doFinal(encrypted);\n\n    return decrypted;\n}\n", "idx": 1066}
{"project": "cipher", "commit_id": "Snippet18253655_1282.java", "target": 0, "func": "    KeyGenerator keyGenerator = KeyGenerator.getInstance(\"Blowfish\");\n    SecretKey secretKey = keyGenerator.generateKey();\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n    String input = \"password\";\n    byte encrypted[] = cipher.doFinal(input.getBytes());\n    System.out.println(new String(Base64.encodeBase64(encrypted)));\n", "idx": 1067}
{"project": "cipher", "commit_id": "Snippet15637267_38623.java", "target": 0, "func": "import java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\npublic class AESEncryptor {\n    private static final String ALGO = \"AES\";\n    private final static byte[] keyValue =new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't','S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\n    public static String encrypt(String Data) throws Exception {\n            Key key = generateKey();\n            Cipher c = Cipher.getInstance(ALGO);\n            c.init(Cipher.ENCRYPT_MODE, key);\n            byte[] encVal = c.doFinal(Data.getBytes());\n            byte[] encryptedValue = Base64.encodeBase64(encVal);\n            String encryptedPass = new String (encryptedValue);\n            return encryptedPass;\n        }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        Base64.decodeBase64(encryptedData);\n        byte[] decordedValue =  Base64.decodeBase64(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n    }\n\n}\n\n\n1st run :\nargument passed to encrypt : somepassword|1364311519852\nencrypted string : 5pQ1kIC+8d81AD7zbLOZA==(encrypted string)\ndecrypted string : somepassword|1364311519852\n\n2nd run : \nargument passed to encrypt : somepassword|1364311695048\nencrypted string : 5pQ1kIC+8d81AD7zbLOZA==(same encrypted string as before)\ndecrypted string : somepassword|1364311695048\n", "idx": 1068}
{"project": "cipher", "commit_id": "Snippet34787792_16801.java", "target": 0, "func": "  String token = \"1345BCHCNB\";\n  Cipher ecipher = Cipher.getInstance(\"AES\");\n  String mykey = \"1234567891234567\";\n  SecretKey key = new SecretKeySpec(mykey.getBytes(), \"AES\");\n  ecipher.init(Cipher.ENCRYPT_MODE, key);\n  byte[] utf8 = token.getBytes(\"UTF-8\");\n  byte[] enc = ecipher.doFinal(utf8);\n  String enctoken = Base64.encodeBase64(enc).toString());\n", "idx": 1069}
{"project": "cipher", "commit_id": "Snippet32745324_14859.java", "target": 0, "func": "public class MainActivity extends AppCompatActivity {\n\nstatic byte[] salt = {  (byte)0xc7, (byte)0x73, (byte)0x21, (byte)0x8c,\n                                (byte)0x7e, (byte)0xc8, (byte)0xee, (byte)0x99 };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        decryptZipFile();\n    }\n\n\n    private byte[] getKey() {\n        try {\n            //Create the key for the encryption/decryption\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n            SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n            sr.setSeed(salt);\n            kgen.init(128, sr); // 192 and 256 bits may not be available\n            SecretKey skey = kgen.generateKey();\n            byte[] key = skey.getEncoded();\n            return key;\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n\n    private static byte[] decrypt(byte[] key, byte[] encryptedData) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(key,\"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encryptedData);\n        return decrypted;\n    }\n\n\n    public void decryptZipFile() {\n        // First decrypt the zip file\n        try {\n            InputStream is = getResources().getAssets().open(\"pics.zip.encrypted\");\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            byte[] buffer = new byte[1024];\n            int count;\n            while ((count = is.read(buffer)) != -1)\n                baos.write(buffer, 0, count);\n            byte[] encryptedData = baos.toByteArray();\n\n            byte[] decryptedData = decrypt(getKey(), encryptedData);\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "idx": 1070}
{"project": "cipher", "commit_id": "Snippet17610366_757.java", "target": 0, "func": "// myDoc is my Document object;\nbyte[] docBytes = serialize(myDoc);\nbyte[] key = (\"sample-16chr-key\").getBytes(\"UTF-8\");\nIvParameterSpec iv = new IvParameterSpec(key);\n\nCipher c = Cipher.getInstance(\"AES\");\nSecretKeySpec k = new SecretKeySpec(key, \"AES\");\nc.init(Cipher.DECRYPT_MODE, k, iv);\n\n// IllegalBlockSizeException Occurred\nbyte[] decryptedDocBytes = c.doFinal(docBytes);\n\nDocument decryptedDoc = (Document)deserialize(decryptedDocBytes);\n", "idx": 1071}
{"project": "cipher", "commit_id": "Snippet43458411_25574.java", "target": 0, "func": "    package package1;\n\n    import java.io.UnsupportedEncodingException;\n    import java.security.MessageDigest;\n    import java.security.NoSuchAlgorithmException;\n    import java.util.*;\n    import javax.crypto.Cipher;\n    import javax.crypto.spec.SecretKeySpec;\n    import org.apache.commons.codec.binary.Base64;\n\n    public class AesOne{\n\n\n    private static SecretKeySpec secretKey;\n    private static byte[] key;\n\n\n    private static String decryptedString;\n    private static String encryptedString;\n\npublic static void setKey(String myKey){\n\n\n    MessageDigest sha = null;\n    try {\n        key = myKey.getBytes(\"UTF-8\");\n        System.out.println(key.length);\n        sha = MessageDigest.getInstance(\"SHA-1\");\n        key = sha.digest(key);\n        key = Arrays.copyOf(key, 16);\n        System.out.println(key.length);\n        System.out.println(new String(key,\"UTF-8\"));\n        secretKey = new SecretKeySpec(key, \"AES\");\n\n\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (UnsupportedEncodingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n\n\n}\n\npublic static String getDecryptedString() {\n    return decryptedString;\n}\npublic static void setDecryptedString(String decryptedString) {\n    AesOne.decryptedString = decryptedString;\n}\npublic static String getEncryptedString() {\n    return encryptedString;\n}\npublic static void setEncryptedString(String encryptedString) {\n    AesOne.encryptedString = encryptedString;\n}\npublic static String encrypt(String strToEncrypt)\n{\n    try\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n\n        setEncryptedString(Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))));\n\n    }\n    catch (Exception e)\n    {\n\n        System.out.println(\"Error while encrypting: \"+e.toString());\n    }\n    return null;\n}\npublic static String decrypt(String strToDecrypt)\n{\n    try\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        setDecryptedString(new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt))));\n\n    }\n    catch (Exception e)\n    {\n\n        System.out.println(\"Error while decrypting: \"+e.toString());\n    }\n    return null;\n}\npublic static void main(String args[])\n{\n\n\n\n            System.out.println(\"What would you like to encrypt?\");\n\n            Scanner encrypt = new Scanner(System.in);\n            String toEncrypt = encrypt.toString();\n\n            final String strToEncrypt = toEncrypt;\n            final String strPssword = \"encryptor key\";\n            AesOne.setKey(strPssword);\n\n            AesOne.encrypt(strToEncrypt.trim());\n\n            System.out.println(\"String to Encrypt: \" + strToEncrypt); \n            System.out.println(\"Encrypted: \" + AesOne.getEncryptedString());\n\n            final String strToDecrypt =  AesOne.getEncryptedString();\n            AesOne.decrypt(strToDecrypt.trim());\n\n            System.out.println(\"String To Decrypt : \" + strToDecrypt);\n            System.out.println(\"Decrypted : \" + AesOne.getDecryptedString());\n\n}\n\n}\n", "idx": 1072}
{"project": "cipher", "commit_id": "Snippet16192140_39148.java", "target": 0, "func": "Cipher aes = Cipher.getInstance(\"AES\");\naes.init(Cipher.DECRYPT_MODE, generateKey());\nbyte[] ciphertext = aes.doFinal(rawPassword.getBytes());\n", "idx": 1073}
{"project": "cipher", "commit_id": "Snippet15296650_38365.java", "target": 0, "func": "public encrypt(String text) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidKeySpecException {\n    SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n    KeySpec spec = new PBEKeySpec(passPhrase.toCharArray(), SALT, ITERATION_COUNT, KEY_LENGTH); //256 bit\n    SecretKey tmp = factory.generateSecret(spec);\n    SecretKey secret = new SecretKeySpec(tmp.getEncoded(), \"AES\");\n    this.ecipher = Cipher.getInstance(\"AES\");\n    this.ecipher.init(Cipher.ENCRYPT_MODE, secret);\n    byte[] bytes = encrypt.getBytes(\"UTF-8\");\n    byte[] encrypted = this.ecipher.doFinal(bytes);\n    return Base64.encodeBase64String(encrypted);\n}\n", "idx": 1074}
{"project": "cipher", "commit_id": "Snippet34121883_16152.java", "target": 0, "func": "import java.util.Base64;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\n\npublic class EncryptionDecryptionAES {\n    static Cipher cipher;\n\n    public static void main(String[] args) throws Exception {\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n        keyGenerator.init(128);\n        SecretKey secretKey = keyGenerator.generateKey();\n        cipher = Cipher.getInstance(\"AES\");\n\n        String plainText = \"AES Symmetric Encryption Decryption\";\n        System.out.println(\"Plain Text Before Encryption: \" + plainText);\n\n        String encryptedText = encrypt(plainText, secretKey);\n        System.out.println(\"Encrypted Text After Encryption: \" + encryptedText);\n\n        String decryptedText = decrypt(encryptedText, secretKey);\n        System.out.println(\"Decrypted Text After Decryption: \" + decryptedText);\n    }\n\n    public static String encrypt(String plainText, SecretKey secretKey)\n            throws Exception {\n        byte[] plainTextByte = plainText.getBytes();\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] encryptedByte = cipher.doFinal(plainTextByte);\n        Base64.Encoder encoder = Base64.getEncoder();\n        String encryptedText = encoder.encodeToString(encryptedByte);\n        return encryptedText;\n    }\n\n    public static String decrypt(String encryptedText, SecretKey secretKey)\n            throws Exception {\n        Base64.Decoder decoder = Base64.getDecoder();\n        byte[] encryptedTextByte = decoder.decode(encryptedText);\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        byte[] decryptedByte = cipher.doFinal(encryptedTextByte);\n        String decryptedText = new String(decryptedByte);\n        return decryptedText;\n    }\n}\n", "idx": 1075}
{"project": "cipher", "commit_id": "Snippet14486814_37772.java", "target": 0, "func": "// Passphrase\nprivate static final byte[] pass = new byte[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0','1', '2', '3', '4', '5' };\n\n\npublic static String encrypt(String Data) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(Data.getBytes());\n    String encryptedValue = new BASE64Encoder().encode(encVal);\n    return encryptedValue;\n}\n\npublic static String decrypt(String encryptedData) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    return decryptedValue;\n}\n\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(pass, \"AES\");\n    return key;\n}\n", "idx": 1076}
{"project": "cipher", "commit_id": "Snippet44047862_26113.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\n\npublic class Gen_DESAES_key{\n\n\nbyte[] message = \"Hello World\".getBytes();\n\nKeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\nSecretKey desKey = keygenerator.generateKey();\n\nCipher desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\ndesCipher.init(Cipher.ENCRYPT_MODE,deskey);\n\nbyte[] encryptedMessage = desCipher.doFinal(message);\n}\n", "idx": 1077}
{"project": "cipher", "commit_id": "Snippet36139259_17991.java", "target": 0, "func": "String initializer = \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n\nbyte[] initializer2 = new BigInteger(initializer, 2).toByteArray();\n\nString encrypt = encrypt(binary_string_firsthalf, initializer2);\n\npublic static String encrypt(String plainText, byte[] key) {\n    try {\n        SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] cipherText = cipher.doFinal(plainText.getBytes(\"UTF8\"));\n        String encryptedString = new String(Base64.encode(cipherText));\n        return encryptedString;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 1078}
{"project": "cipher", "commit_id": "Snippet4551263_31176.java", "target": 0, "func": " static public String encrypt(String message , String key , int keyLength) throws Exception {\n     // Get the KeyGenerator\n   KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    kgen.init(keyLength); // 192 and 256 bits may not be available\n    // Generate the secret key specs.\n     SecretKey skey = key; //here is the error\n   byte[] raw = skey.getEncoded();\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    // Instantiate the cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    System.out.println(\"msg is\" + message + \"\\n raw is\" + raw);\n    byte[] encrypted = cipher.doFinal(message.getBytes());\n    String cryptedValue = new String(encrypted);\n    System.out.println(\"encrypted string: \" + cryptedValue);\n    return cryptedValue;\n}\n", "idx": 1079}
{"project": "cipher", "commit_id": "Snippet9842161_34284.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.*;\n\npublic class RCC4 {\n\n    public static void main(String[] args) throws Exception {\n        String plain = \"testisperfect\";\n        Key key = RCC4.getKey();\n        String encrypted = RCC4.encrypt(plain, key);\n        String decrypted = RCC4.decrypt(encrypted, key);\n        System.out.println(encrypted);\n        System.out.println(decrypted);\n    }\n\n    private static String rc4(String plaintext, int mode, Key key) throws Exception {\n        Cipher cipher = Cipher.getInstance(\"RC4\");\n        cipher.init(mode, key);\n        return new String(cipher.doFinal(plaintext.getBytes()));\n    }\n\n    public static String encrypt(String plaintext, Key key) throws Exception {\n        return rc4(plaintext, Cipher.ENCRYPT_MODE, key);\n    }\n\n    public static String decrypt(String ciphertext, Key key) throws Exception {\n        return rc4(ciphertext, Cipher.DECRYPT_MODE, key);\n    }\n\n    public static Key getKey() throws Exception {\n        KeyGenerator kg = KeyGenerator.getInstance(\"RC4\");\n        SecureRandom sr = new SecureRandom();\n        kg.init(128, sr);\n        return kg.generateKey();\n    }\n\n}\n", "idx": 1080}
{"project": "cipher", "commit_id": "Snippet28735759_10885.java", "target": 0, "func": "try {\n    File root_sd = Environment.getExternalStorageDirectory();\n\n    //original is a folder to encrypt       \n    file = new File(root_sd + \"/myfile/original\");  \n    String filename = file.getAbsolutePath();\n    System.out.println(\"name of file for encryption ===>\"+file.toString());\n    fis = new FileInputStream(filename);    \n\n    //encrypted folder should be in filename.des                      \n    fos = new FileOutputStream(\"/mnt/sdcard/myfile/filename\" + \".des\");   \n\n  } catch (IOException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n    Log.i(\"Encrypt ACtivity\", \"file io exception\");\n }\n\n // Use PBEKeySpec to create a key based on a password.\n // The password is passed as a character array\n\n  PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n  SecretKeyFactory keyFactory;\n\n  try {\n    keyFactory = SecretKeyFactory\n            .getInstance(\"PBEWithMD5AndDES\");\n\n    SecretKey passwordKey = keyFactory.generateSecret(keySpec);\n\n            // PBE = hashing + symmetric encryption. A 64 bit random\n            // number (the salt) is added to the password and hashed\n            // using a Message Digest Algorithm (MD5 in this example.).\n            // The number of times the password is hashed is determined\n            // by the interation count. Adding a random number and\n            // hashing multiple times enlarges the key space.\n\n    byte[] salt = new byte[8];\n    Random rnd = new Random();\n    rnd.nextBytes(salt);\n    int iterations = 100;\n\n    // Create the parameter spec for this salt and interation\n    // count\n\n    PBEParameterSpec parameterSpec = new PBEParameterSpec(salt,iterations);\n\n    // Create the cipher and initialize it for encryption.\n\n    Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    cipher.init(Cipher.ENCRYPT_MODE, passwordKey, parameterSpec);\n\n    // Need to write the salt to the (encrypted) file. The\n    // salt is needed when reconstructing the key for\n    // decryption.\n\n    fos.write(salt);\n\n    // Read the file and encrypt its bytes.\n\n    byte[] input = new byte[64];\n    int bytesRead;\n    while ((bytesRead = fis.read(input)) != -1) {\n        byte[] output = cipher.update(input, 0, bytesRead);\n            if (output != null)\n                fos.write(output);\n        }\n\n    byte[] output = cipher.doFinal();\n            if (output != null)\n                fos.write(output);\n\n    fis.close();\n    fos.flush();\n", "idx": 1081}
{"project": "cipher", "commit_id": "Snippet29092603_11171.java", "target": 0, "func": "import java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport android.util.Base64;\n\npublic class EncodeDecodeAES {\n\n    private final static String HEX = \"0123456789ABCDEF\";\n    private final static int JELLY_BEAN_4_2 = 17;\n    private final static byte[] key = { 'W', 'e', 'l', 'c', 'o', 'm', 'e','t', 'o', 'e', 'n','c', 'r', 'y', 'p', 't' };\n\n\n    // static {\n    // Security.addProvider(new BouncyCastleProvider());\n    // }\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        String fromHex = toHex(result);\n        String base64 = new String(Base64.encodeToString(fromHex.getBytes(), 0));\n        return base64;\n    }\n\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] seedByte = seed.getBytes();\n        System.arraycopy(seedByte, 0, key, 0, ((seedByte.length < 16) ? seedByte.length : 16));\n        String base64 = new String(Base64.decode(encrypted, 0));\n        byte[] rawKey = getRawKey(seedByte);\n        byte[] enc = toByte(base64);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n\n    public static byte[] encryptBytes(String seed, byte[] cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext);\n        return result;\n    }\n\n\n    public static byte[] decryptBytes(String seed, byte[] encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = decrypt(rawKey, encrypted);\n        return result;\n    }\n\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\"); // , \"SC\");\n        SecureRandom sr = null;\n        if (android.os.Build.VERSION.SDK_INT >= JELLY_BEAN_4_2) {\n            sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n        } else {\n            sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        }\n        sr.setSeed(seed);\n        try {\n            kgen.init(256, sr);\n            // kgen.init(128, sr);\n        } catch (Exception e) {\n            // Log.w(LOG, \"This device doesn't suppor 256bits, trying 192bits.\");\n            try {\n                kgen.init(192, sr);\n            } catch (Exception e1) {\n                // Log.w(LOG, \"This device doesn't suppor 192bits, trying 128bits.\");\n                kgen.init(128, sr);\n            }\n        }\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\"); // /ECB/PKCS7Padding\", \"SC\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\"); // /ECB/PKCS7Padding\", \"SC\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n\n\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length() / 2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2), 16).byteValue();\n        return result;\n    }\n\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2 * buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n\n\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n    }\n\n}\n", "idx": 1082}
{"project": "cipher", "commit_id": "Snippet20045235_2690.java", "target": 0, "func": "String key = \"someData\";\n\n    SecretKeySpec sks = null;\n    try {\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(\"exSeed\".getBytes());\n        KeyGenerator kg = KeyGenerator.getInstance(\"AES\");\n        kg.init(128, sr);\n        sks = new SecretKeySpec((kg.generateKey()).getEncoded(), \"AES\");\n    } catch (Exception e) {\n    }\n\n    byte[] encodedBytes = null;\n    try {\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.ENCRYPT_MODE, sks);\n        encodedBytes = c.doFinal(key.getBytes());\n    } catch (Exception e) {\n    }\n    jTextField5.setText(Base64.encode(encodedBytes));\n", "idx": 1083}
{"project": "cipher", "commit_id": "Snippet21331620_3870.java", "target": 0, "func": "String result = null;\nCipher cipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\nSecretKeySpec ks = new SecretKeySpec(key, \"Blowfish\");\ncipher.init(Cipher.DECRYPT_MODE, ks);\nif (reader != null)\n{\n    InputStream is = getInputStream(reader);\n    StringBuilder builder = new StringBuilder();\n\n    byte[] bytes = new byte[8];\n    int off = 0;\n\n    while (is.read(bytes, 0, 8) != -1)\n    {\n        builder.append(new String(cipher.update(bytes, off, 8), \"UTF-8\"));\n    }\n    result = builder.toString();\n}\n", "idx": 1084}
{"project": "cipher", "commit_id": "Snippet27334372_9508.java", "target": 0, "func": "public boolean clientValidate(SealedObject sealedClientReply, String loggedInKey) throws Exception{ \n\n    String encryptionKey = loggedInKey;\n    SecretKeySpec key = new SecretKeySpec(encryptionKey.getBytes(\"UTF-8\"), \"AES\");\n\n    Cipher dcipher = Cipher.getInstance(\"AES\");\n    dcipher.init(Cipher.DECRYPT_MODE, key);\n\n    sealedClientReply.getObject(dcipher); // Server decrypts object\n    System.out.println(\"I received this from the client: \"+sealedClientReply);\n    String decryptedClientReply= (String) sealedClientReply.getObject(dcipher);\n    System.out.println(\"This is what I received decrypted: \"+decryptedClientReply);\n\n\n    //if(decryptedClientReply.equals(randString)){\n    //  return true;\n    //}else{\n    //  return false;\n    //}\n    return true;\n}\n", "idx": 1085}
{"project": "cipher", "commit_id": "Snippet17540208_710.java", "target": 0, "func": "private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}  \n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(KEY_SIZE, sr);\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}  \n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length() / 2;\n    byte[] result = new byte[len];\n\n    for (int i = 0; i < len; i++) {\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2), END_POSITION).byteValue();\n    }\n\n    return result;\n}\n\npublic static void generateKey() {\n    try {\n        byte[] seed = SEED_STRING.getBytes(\"UTF-8\");\n        byte[] rawKey = getRawKey(seed);           \n        byte[] toDecrypt = toByte(Constants.ENCRYPTED);\n\n        mKey = new String(decrypt(rawKey, toDecrypt), \"UTF-8\");      \n\n    } catch (Exception e) {\n        if (BuildConfig.DEBUG) {\n            Log.e(TAG, \"encryption: \", e);\n        }\n    }   \n}\n", "idx": 1086}
{"project": "cipher", "commit_id": "Snippet35608233_17507.java", "target": 0, "func": "    public static void main(String[] args) throws Exception {\n    // TODO Auto-generated method stub\n    generateKey(clef);\n\n    //CryptingWithSave(Cipher.ENCRYPT_MODE,\"db/db.csv\",publicKey,\"db/db.csv_encrypted\");\n    decrypt_file(\"db/db.csv_encrypted\",publicKey);\n    System.out.println(tab);\n}\n\n\n    public static void generateKey (String clef) throws NoSuchAlgorithmException{\n     final KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n     keyGen.init(128);\n     final SecretKey key = keyGen.generateKey();\n\n    publicKey= new SecretKeySpec(key.getEncoded(),\"AES\");\n}\n\n    public static void CryptingWithSave (int Crypting_METHOD,String inputFile, SecretKeySpec clef, String outputFile) throws NoSuchAlgorithmException, NoSuchPaddingException, BadPaddingException, Exception{\n   Cipher cipher = Cipher.getInstance(\"AES\");\n   cipher.init(Crypting_METHOD, clef);\n\n        FileInputStream fis = new FileInputStream(inputFile);\n        FileOutputStream fos = new FileOutputStream(outputFile);\n\n        byte[] input = new byte[64];\n        int bytesRead;\n\n        while ((bytesRead = fis.read(input)) != -1) {\n            byte[] output = cipher.update(input, 0, bytesRead);\n            if (output != null)\n                fos.write(output);\n        }\n\n        byte[] output = cipher.doFinal();\n        if (output != null)\n            fos.write(output);\n\n        fis.close();\n        fos.flush();\n        fos.close();\n}\n\npublic static void decrypt_file (String inputFile, SecretKeySpec clef) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException{\n    Cipher cipher2 = Cipher.getInstance(\"AES\");\n       cipher2.init(Cipher.DECRYPT_MODE, clef);\n        FileInputStream fis = new FileInputStream(inputFile);\n        byte[] input = new byte[64];\n        int bytesRead;\n\n        while ((bytesRead = fis.read(input)) != -1) {\n            byte[] output = cipher2.update(input, 0, bytesRead);\n            if (output != null)\n                tab=tab.concat(new String(output));\n        }\n\n        byte[] output = cipher2.doFinal();\n        if (output != null)\n            tab=tab.concat(new String(output));\n        fis.close();\n}\n", "idx": 1087}
{"project": "cipher", "commit_id": "Snippet34307500_16263.java", "target": 0, "func": " javax.crypto.Cipher cipher =\n            javax.crypto.Cipher.getInstance(\"DESede/CBC/NoPadding\",\"BC\");\n", "idx": 1088}
{"project": "cipher", "commit_id": "Snippet26561767_8710.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 1089}
{"project": "cipher", "commit_id": "Snippet32073995_14136.java", "target": 0, "func": "Cipher.getInstance(\"DES\");", "idx": 1090}
{"project": "cipher", "commit_id": "Snippet36798967_18738.java", "target": 0, "func": "package crypto;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class MyCrypto\n{\n    SecretKeySpec key;\n    Cipher cipher;\n    byte[] iv = {0,0,0,0,0,0,0,0};\n    IvParameterSpec ivspec = new IvParameterSpec(iv);\n\n    MyCrypto() throws NoSuchAlgorithmException, NoSuchPaddingException, UnsupportedEncodingException\n    {\n        key =new SecretKeySpec(\"22042016\".getBytes(), \"DES\");\n        cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    }\n\n    public void encrypt(File file) throws InvalidKeyException, IOException\n    {\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        FileInputStream fis = new FileInputStream(file);\n        FileOutputStream fos = new FileOutputStream(file);\n        CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n         byte[] block = new byte[8];\n         int i;\n         while ((i = fis.read(block)) != -1) {\n         cos.write(block, 0, i);\n         }\n     cos.close();\n     fis.close();\n    }\n\n    public void decrypt(File file) throws IOException, InvalidKeyException, InvalidAlgorithmParameterException\n    {\n        cipher.init(Cipher.DECRYPT_MODE, key, ivspec);\n        FileInputStream fis = new FileInputStream(file);\n        CipherInputStream cis = new CipherInputStream(fis, cipher);\n        FileOutputStream fos = new FileOutputStream(file);\n\n        byte[] block = new byte[8];\n         int i;\n        while ((i = cis.read(block)) != -1) {\n        fos.write(block, 0, i);\n        }\n        cis.close();\n        fos.close();\n\n\n    }\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, InvalidAlgorithmParameterException\n    {\n        MyCrypto crypto = new MyCrypto();\n        File cryptoFile = new File(\".../crypto.txt\");\n        crypto.encrypt(cryptoFile);\n        crypto.decrypt(cryptoFile);\n    }\n}\n", "idx": 1091}
{"project": "cipher", "commit_id": "Snippet24182385_6470.java", "target": 0, "func": "package com.commonsware.android.syssvc.alarm;\n\nimport java.security.SecureRandom;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class SimpleCrypto\n{\n\n    public SimpleCrypto()\n    {\n    }\n\n    private static void appendHex(StringBuffer stringbuffer, byte byte0)\n    {\n        stringbuffer.append(\"0123456789ABCDEF\".charAt(0xf & byte0 >> 4)).append(\"0123456789ABCDEF\".charAt(byte0 & 0xf));\n    }\n\n    public static String decrypt(String s, String s1)\n        throws Exception\n    {\n        return new String(decrypt(getRawKey(s.getBytes()), toByte(s1)));\n    }\n\n    private static byte[] decrypt(byte abyte0[], byte abyte1[])\n        throws Exception\n    {\n        SecretKeySpec secretkeyspec = new SecretKeySpec(abyte0, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(2, secretkeyspec);\n        return cipher.doFinal(abyte1);\n    }\n\n    public static String encrypt(String s, String s1)\n        throws Exception\n    {\n        return toHex(encrypt(getRawKey(s.getBytes()), s1.getBytes()));\n    }\n\n    private static byte[] encrypt(byte abyte0[], byte abyte1[])\n        throws Exception\n    {\n        SecretKeySpec secretkeyspec = new SecretKeySpec(abyte0, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(1, secretkeyspec);\n        return cipher.doFinal(abyte1);\n    }\n\n    public static String fromHex(String s)\n    {\n        return new String(toByte(s));\n    }\n\n    private static byte[] getRawKey(byte abyte0[])\n        throws Exception\n    {\n        KeyGenerator keygenerator = KeyGenerator.getInstance(\"AES\");\n        SecureRandom securerandom = SecureRandom.getInstance(\"SHA1PRNG\",\"Crypto\");\n        securerandom.setSeed(abyte0);\n        keygenerator.init(128, securerandom);\n        return keygenerator.generateKey().getEncoded();\n    }\n\n    public static byte[] toByte(String s)\n    {\n        int i = s.length() / 2;\n        byte abyte0[] = new byte[i];\n        int j = 0;\n        do\n        {\n            if(j >= i)\n                return abyte0;\n            abyte0[j] = Integer.valueOf(s.substring(j * 2, 2 + j * 2), 16).byteValue();\n            j++;\n        } while(true);\n    }\n\n    public static String toHex(String s)\n    {\n        return toHex(s.getBytes());\n    }\n\n    public static String toHex(byte abyte0[])\n    {\n        if(abyte0 == null)\n            return \"\";\n        StringBuffer stringbuffer = new StringBuffer(2 * abyte0.length);\n        int i = 0;\n        do\n        {\n            if(i >= abyte0.length)\n                return stringbuffer.toString();\n            appendHex(stringbuffer, abyte0[i]);\n            i++;\n        } while(true);\n    }\n\n    private static final String HEX = \"0123456789ABCDEF\";\n}\n", "idx": 1092}
{"project": "cipher", "commit_id": "Snippet21518678_3740.java", "target": 0, "func": "String keyString = \"C0BAE23DF8B51807B3E17D21925FADF273A70181E1D81B8EDE6C76A5C1F1716E\";\nbyte[] keyValue = DatatypeConverter.parseHexBinary(keyString);\nKey key = new SecretKeySpec(keyValue, \"AES\");\nCipher c1 = Cipher.getInstance(\"AES\");\nc1.init(Cipher.ENCRYPT_MODE, key);\n\nString data = \"Some data to encrypt\";\nbyte[] encVal = c1.doFinal(data.getBytes());\nString encryptedValue = Base64.encodeBase64String(encVal);\n", "idx": 1093}
{"project": "cipher", "commit_id": "Snippet18306474_1356.java", "target": 0, "func": "import java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\n\nimport javax.swing.JFrame;\nimport javax.swing.JOptionPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.text.*;\n\nimport java.security.*;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\n\nimport java.net.InetAddress;\n\n/*\n * Known Bugs:\n * Message size is limited to 47 characters\n */\n\npublic class ChatClient {\n\n    BufferedReader in;\n    PrintWriter out;\n    JFrame frame = new JFrame(\"ELECTRON Chatroom\");\n    JTextField textField = new JTextField(32);\n    JTextArea messageArea = new JTextArea(8, 40);\n    byte[] keyValue = new byte[]{'5', '7', '3', '4', '5', '6', '3', '4', '9', '8', '5', '6', 'l', '9', '3', '4'};\n    final String ALGO = \"AES\";\n    String name;\n    String myName;\n    InetAddress ip = null;\n    String errorType;\n\n    /*\n     * Constructs the client by laying out the GUI and registering a listener\n     * with the textfield so that pressing Return in the listener sends the\n     * textfield contents to the server. Note however that the textfield is\n     * initially NOT editable, and only becomes editable AFTER the client\n     * receives the NAMEACCEPTED message from the server.\n     */\npublic class JTextFieldLimit extends PlainDocument {\n    private int limit;\n    // optional uppercase conversion\n    private boolean toUppercase = false;\n\n    JTextFieldLimit(int limit) {\n        super();\n        this.limit = limit;\n    }\n\n    JTextFieldLimit(int limit, boolean upper) {\n        super();\n        this.limit = limit;\n        toUppercase = upper;\n    }\n\n    public void insertString\n            (int offset, String  str, AttributeSet attr)\n            throws BadLocationException {\n        if (str == null) return;\n\n        if ((getLength() + str.length()) <= limit) {\n            if (toUppercase) str = str.toUpperCase();\n            super.insertString(offset, str, attr);\n        }\n    }\n}\n    public ChatClient() {\n\n        // Layout GUI\n        textField.setEditable(false);\n        messageArea.setEditable(false);\n        messageArea.setWrapStyleWord(true);\n        messageArea.setLineWrap(true);\n        frame.getContentPane().add(textField, \"North\");\n        frame.getContentPane().add(new JScrollPane(messageArea), \"Center\");\n        frame.pack();\n\n        // Add Listeners\n        textField.addActionListener(new ActionListener() {\n            /**\n             * Responds to pressing the enter key in the textfield by sending\n             * the contents of the text field to the server. Then clear the text\n             * area in preparation for the next message.\n             */\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    if ((textField.getText()).startsWith(\"/\")) {\n                        if (\"Electron\".equals(myName)) {\n                            String command = (textField.getText());\n                            out.println(command);\n                            textField.setText(\"\");\n                        }\n                    } else {\n                        //ENCRYPTION                        \n                        String encrypt = textField.getText();\n                        Key key = generateKey();\n                        Cipher c = Cipher.getInstance(ALGO);\n                        c.init(Cipher.ENCRYPT_MODE, key);\n                        byte[] encVal = c.doFinal(encrypt.getBytes());\n                        String input = new BASE64Encoder().encode(encVal);\n                        out.println(input);\n                        textField.setText(\"\");\n                    }\n                } catch (Exception ex) {\n                    Logger.getLogger(ChatClient.class.getName()).log(Level.SEVERE, null, ex);\n                }\n            }\n        });\n    }\n\n    /**\n     * Prompt for and return the address of the server.\n     */\n    private String getServerAddress() {\n        return JOptionPane.showInputDialog(\n                frame,\n                \"Enter IP Address of the Server:\",\n                \"ELECTRON Chatroom\",\n                JOptionPane.QUESTION_MESSAGE);\n\n    }\n\n    /**\n     * Prompt for and return the desired screen name.\n     */\n    private String getName() {\n        return JOptionPane.showInputDialog(\n                frame,\n                \"Choose a screen name:\",\n                \"Screen name selection\",\n                JOptionPane.PLAIN_MESSAGE);\n    }\n    /**\n     * Connects to the server then enters the processing loop.\n     */\n    private void run() throws IOException {\n\n        // Make connection and initialize streams\n        String serverAddress = getServerAddress();\n        Socket socket = new Socket(serverAddress, 9001);\n        in = new BufferedReader(new InputStreamReader(\n                socket.getInputStream()));\n        out = new PrintWriter(socket.getOutputStream(), true);\n        // Process all messages from server, according to the protocol.\n        while (true) {\n            String line = in.readLine();\n            if (line.startsWith(\"SUBMITNAME\")) {\n                if (line.length() == 18) {\n                    line = line.substring(11);\n                    System.out.println(line);\n                    switch (line) {\n                        case \"ERROR 1\":\n                            errorType = \"[ERROR: Name cannot be blank]\";\n                            JOptionPane.showMessageDialog(frame, errorType);\n                            System.exit(0);\n                            break;\n                        case \"ERROR 2\":\n                            errorType = \"[ERROR: Your names 'Admin'? Seems legit...]\";\n                            JOptionPane.showMessageDialog(frame, errorType);\n                            System.exit(0);\n                            break;\n                        case \"ERROR 3\":\n                            errorType = \"[ERROR: You have been banned]\";\n                            JOptionPane.showMessageDialog(frame, errorType);\n                            System.exit(0);\n                            break;\n                    }\n                } else if (line.length() == 10) {\n                    out.println(getName());\n                }\n\n            } else if (line.startsWith(\"NAMEACCEPTED\")) {\n                myName = line.substring(13);\n                if (myName == \"Admin\") {\n                    errorType = \"[ERROR: Your names 'Admin'? Seems legit...]\";\n                    JOptionPane.showMessageDialog(frame, errorType);\n                    System.exit(0);\n                } else if (myName == \"ADMIN\") {\n                    errorType = \"[ERROR: Your names 'Admin'? Seems legit...]\";\n                    JOptionPane.showMessageDialog(frame, errorType);\n                    System.exit(0);\n                } else if (myName == \"admin\") {\n                    errorType = \"[ERROR: Your names 'Admin'? Seems legit...]\";\n                    JOptionPane.showMessageDialog(frame, errorType);\n                    System.exit(0);\n                }\n                JOptionPane.showMessageDialog(frame, \"Welcome \" + myName + \"  (\" + ip + \")\");\n                ip = InetAddress.getLocalHost();\n                textField.setEditable(true);\n                //Limits message length to 47 characters (Disabled for debugging purposes)\n                //textField.setDocument(new JTextFieldLimit(47));\n                out.println(ip);\n            } else if (line.startsWith(\"SERVERMESSAGE\")) {\n                line = line.substring(14);\n                messageArea.append(line + \"\\n\");\n                messageArea.setCaretPosition(messageArea.getDocument().getLength());\n            } else if (line.startsWith(\"SERVERCOMMAND\")) {\n                line = line.substring(14);\n                if (line.startsWith(\"kick \" + ip)) {\n                    System.exit(0);\n                }\n            } else if (line.startsWith(\"FINGERPRINT\")) {\n                ip = InetAddress.getLocalHost();\n                out.println(ip);\n            } else if (line.startsWith(\"NAME\")) {\n                name = line.substring(5);\n            } else if (line.startsWith(\"MESSAGE\")) {\n                try {\n                    //DECRYPTION\n                    System.out.println(line);\n                    line = line.substring(8);\n                    String encryptedData = line;\n                    System.out.println(line.length());\n                    Key key = generateKey();\n                    Cipher c = Cipher.getInstance(ALGO);\n                    c.init(Cipher.DECRYPT_MODE, key);\n                    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n                    byte[] decValue = c.doFinal(decordedValue);\n                    String decryptedValue = new String(decValue);\n                    messageArea.append(name + \": \" + decryptedValue + \"\\n\");\n                    messageArea.setCaretPosition(messageArea.getDocument().getLength());\n                } catch (Exception ex) {\n                    Logger.getLogger(ChatClient.class.getName()).log(Level.SEVERE, null, ex);\n                }\n            }\n        }\n    }\n\n    private Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n    }\n\n    /**\n     * Runs the client as an application with a closeable frame.\n     */\n    public static void main(String[] args) throws Exception {\n        ChatClient client = new ChatClient();\n        client.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        client.frame.setVisible(true);\n        client.run();\n    }\n}\n", "idx": 1094}
{"project": "cipher", "commit_id": "Snippet7870603_32979.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DES\"); \n", "idx": 1095}
{"project": "cipher", "commit_id": "Snippet22339860_4719.java", "target": 0, "func": "public static void main(String[] args) throws Exception {\n    // got this example from http://www.java2s.com/Tutorial/Java/0490__Security/UsingCipherInputStream.htm\n    write();\n    read();\n}\n\npublic static void write() throws Exception {\n    KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n    kg.init(new SecureRandom());\n    SecretKey key = kg.generateKey();\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    Class spec = Class.forName(\"javax.crypto.spec.DESKeySpec\");\n    DESKeySpec ks = (DESKeySpec) skf.getKeySpec(key, spec);\n    ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"keyfile\"));\n    oos.writeObject(ks.getKey());\n\n    Cipher c = Cipher.getInstance(\"DES/CFB8/NoPadding\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n    CipherOutputStream cos = new CipherOutputStream(new FileOutputStream(\"ciphertext\"), c);\n    PrintWriter pw = new PrintWriter(new OutputStreamWriter(cos));\n    pw.println(\"Stand and unfold yourself\");\n    pw.flush();\n    pw.close();\n    oos.writeObject(c.getIV());\n    oos.close();\n}\n\npublic static void read() throws Exception {\n    ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"keyfile\"));\n    DESKeySpec ks = new DESKeySpec((byte[]) ois.readObject());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey key = skf.generateSecret(ks);\n\n    Cipher c = Cipher.getInstance(\"DES/CFB8/NoPadding\");\n    c.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec((byte[]) ois.readObject()));\n    CipherInputStream cis = new CipherInputStream(new FileInputStream(\"ciphertext\"), c);\n    BufferedReader br = new BufferedReader(new InputStreamReader(cis));\n    System.out.println(br.readLine());\n}\n", "idx": 1096}
{"project": "cipher", "commit_id": "Snippet10615752_34928.java", "target": 0, "func": "    public void main(String[] args) throws Exception\n      {\n\n         // File to decrypt.\n      filename = \"/file.enc\";\n\n      String password = \"codecodecode\";\n\n      inFile = new FileInputStream(new File(Environment.getExternalStorageDirectory()+ filename));\n      outFile = new FileOutputStream(new File(Environment.getExternalStorageDirectory()+ filename + \".txt\"));\n\n      PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n      SecretKeyFactory keyFactory =\n          SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n      SecretKey passwordKey = keyFactory.generateSecret(keySpec);\n\n      // Read in the previouly stored salt and set the iteration count.\n\n      byte[] salt = new byte[8];\n      inFile.read(salt);\n      int iterations = 100;\n\n      PBEParameterSpec parameterSpec = new PBEParameterSpec(salt, iterations);\n\n      // Create the cipher and initialize it for decryption.\n\n      Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n      cipher.init(Cipher.DECRYPT_MODE, passwordKey, parameterSpec);\n\n\n      byte[] input = new byte[64];\n      int bytesRead;\n      while ((bytesRead = inFile.read(input)) != -1)\n      {\n         byte[] output = cipher.update(input, 0, bytesRead);\n         if (output != null)\n            outFile.write(output);\n      }\n\n      byte[] output = cipher.doFinal();\n      if (output != null)\n         outFile.write(output);\n\n      inFile.close();\n      outFile.flush();\n      outFile.close();\n  }\n", "idx": 1097}
{"project": "cipher", "commit_id": "Snippet15952803_38941.java", "target": 0, "func": "String encryptedString = \u2026 ;\nString decryptedString = null;\nSecretKeySpec key = new SecretKeySpec(myKey.getBytes(CHARSET_ISO_8859_1), \"Blowfish\");\nCipher cipher;\ntry {\n    cipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] decrypted = cipher.doFinal(encryptedString.getBytes(CHARSET_ISO_8859_1));\n    decryptedString = new String(decrypted, CHARSET_ISO_8859_1);\n} [ catch Exceptions \u2026 ]\n", "idx": 1098}
{"project": "cipher", "commit_id": "Snippet19061658_1934.java", "target": 0, "func": "byte [] PRFkey = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\nbyte [] plaintext = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n\nSecretKeySpec encryptionKey=new SecretKeySpec(PRFkey, \"AES\");\nCipher cipher=Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, encryptionKey);\nbyte[] encryptedData=cipher.doFinal(plaintext);\n", "idx": 1099}
{"project": "cipher", "commit_id": "Snippet32756563_14864.java", "target": 0, "func": "byte[] digest = MessageDigest.getInstance(\"SHA-1\").digest(password);\nSecretKey secretKey = new SecretKeySpec(Arrays.copyOf(digest, 16), \"AES\");\n\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\nreturn cipher.doFinal(serializeLicense(data));\n", "idx": 1100}
{"project": "cipher", "commit_id": "Snippet25392173_7762.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\ncipher.init(Cipher.ENCRYPT_MODE, MY_SECRET_KEY);\n", "idx": 1101}
{"project": "cipher", "commit_id": "Snippet27659493_9847.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.nio.ByteBuffer;\n\nimport java.security.*;\nimport java.security.cert.CertificateException;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\npublic class Main\n{   \n    public static void main(String[] args) throws IOException, UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, NoSuchPaddingException, CertificateException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, SignatureException{\n        //open the file containing keys\n        File file = new File(\"keys/ks_file.jks\");\n        //cipher object that will hold the information\n        Cipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        //create keystore object from stored keys inside the file\n        KeyStore keystore = loadKeyStore(file, \"sergey\", \"JKS\");\n        //messageDigest instance\n        MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n        //singanture instance\n        Signature dsa = Signature.getInstance(\"SHA1withDSA\"); \n\n        //params for getting keys\n        String allias = \"enc_key\", password = \"sergey\";\n        SecureRandom s_random = SecureRandom.getInstance(\"SHA1PRNG\");\n        //create random bytes for semtric key\n        byte key_bytes[] = new byte[16];\n        s_random.setSeed(711);\n        s_random.nextBytes(key_bytes);\n\n        Key key = new SecretKeySpec(key_bytes, \"AES\");\n\n        Key key_enc = keystore.getKey(allias, password.toCharArray());\n        KeyPair enc_key = null;\n\n        if (key_enc instanceof PrivateKey) {\n            // Get certificate of public key\n            java.security.cert.Certificate cert = keystore.getCertificate(allias);\n            // Get public key\n            PublicKey publicKey = cert.getPublicKey();\n            enc_key = new KeyPair(publicKey, (PrivateKey) key_enc);\n        }\n        //cipher the file\n        aes.init(Cipher.ENCRYPT_MODE, key);\n        FileInputStream fis; \n        FileOutputStream fos; \n        CipherInputStream cis; \n        fis = new FileInputStream(\"tmp/a.txt\"); \n        cis = new CipherInputStream(fis, aes);\n        fos = new FileOutputStream(\"tmp/b.txt\"); \n        byte[] b = new byte[8]; \n        int i = cis.read(b); \n        byte[] bytes = ByteBuffer.allocate(4).putInt(i).array();\n        //update message digest for signature\n        md.update(bytes);\n        while (i != -1) { \n            fos.write(b, 0, i); \n            i = cis.read(b);\n            bytes = ByteBuffer.allocate(4).putInt(i).array();\n            md.update(bytes);\n        } \n        fis.close();\n        cis.close();\n        fos.close();\n\n        //encode the secret key\n        /****************   ERROR HAPPENS IN NEXT LINE - LINE 87    *******************/\n        aes.init(Cipher.ENCRYPT_MODE, (Key)enc_key.getPublic());\n        byte[] cipherKey = aes.doFinal(key.toString().getBytes());\n\n        //we save the final digest\n        byte[] hash = md.digest();\n        //init singature with private key\n        dsa.initSign(enc_key.getPrivate());\n        //update the signature with the hash aster digest\n        dsa.update(hash); \n        //final signature\n        byte[] sig = dsa.sign();\n\n        //creating config xml\n        try {\n\n            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n\n            // root elements\n            Document doc = docBuilder.newDocument();\n            Element rootElement = doc.createElement(\"config\");\n            doc.appendChild(rootElement);\n\n            // signature elements\n            Element sig_xml = doc.createElement(\"sig\");\n            rootElement.appendChild(sig_xml);\n            sig_xml.setAttribute(\"value\", sig.toString());\n\n            // key element\n            Element key_xml = doc.createElement(\"key\");\n            rootElement.appendChild(key_xml);\n            key_xml.setAttribute(\"value\", cipherKey.toString());\n\n            // write the content into xml file\n            TransformerFactory transformerFactory = TransformerFactory.newInstance();\n            Transformer transformer = transformerFactory.newTransformer();\n            DOMSource source = new DOMSource(doc);\n            StreamResult result = new StreamResult(new File(\"./config.xml\"));\n\n            transformer.transform(source, result);\n\n            System.out.println(\"File saved!\");\n\n          } catch (ParserConfigurationException pce) {\n            pce.printStackTrace();\n          } catch (TransformerException tfe) {\n            tfe.printStackTrace();\n          }\n        }\n\n    /**\n     * Reads a Java keystore from a file.\n     * \n     * @param keystoreFile\n     *          keystore file to read\n     * @param password\n     *          password for the keystore file\n     * @param keyStoreType\n     *          type of keystore, e.g., JKS or PKCS12\n     * @return the keystore object\n     * @throws KeyStoreException\n     *           if the type of KeyStore could not be created\n     * @throws IOException\n     *           if the keystore could not be loaded\n     * @throws NoSuchAlgorithmException\n     *           if the algorithm used to check the integrity of the keystore\n     *           cannot be found\n     * @throws CertificateException\n     *           if any of the certificates in the keystore could not be loaded\n     */\n    public static KeyStore loadKeyStore(final File keystoreFile,\n        final String password, final String keyStoreType)\n        throws KeyStoreException, IOException, NoSuchAlgorithmException,\n        CertificateException {\n      if (null == keystoreFile) {\n        throw new IllegalArgumentException(\"Keystore url may not be null\");\n      }\n      final URI keystoreUri = keystoreFile.toURI();\n      final URL keystoreUrl = keystoreUri.toURL();\n      final KeyStore keystore = KeyStore.getInstance(keyStoreType);\n      InputStream is = null;\n      try {\n        is = keystoreUrl.openStream();\n        keystore.load(is, null == password ? null : password.toCharArray());\n      } finally {\n        if (null != is) {\n          is.close();\n        }\n      }\n      return keystore;\n    }\n\n}\n", "idx": 1102}
{"project": "cipher", "commit_id": "Snippet10623964_34934.java", "target": 0, "func": "class TripleDES\n{\n\n  private final String key;\n\n  public static void main(String... args)\n    throws Exception\n  {\n    TripleDES td = new TripleDES(\"1032FD2CD64A9D7FA4D061F76B04BFEA\");\n    String decrypted = td.decrypt(\"AC9C5A46A63FC9EA\");\n    System.out.println(\"expecting: 04286EDDFDEA6BD7\");\n    System.out.println(\"found: \" + decrypted);\n  }\n\n  TripleDES(String key)\n  {\n    this.key = key;\n  }\n\n  public String decrypt(String input)\n    throws Exception\n  {\n    byte[] tmp = h2b(this.key);\n    byte[] key = new byte[24];\n    System.arraycopy(tmp, 0, key, 0, 16);\n    System.arraycopy(tmp, 0, key, 16, 8);\n    Cipher cipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n    cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, \"DESede\"));\n    byte[] plaintext = cipher.doFinal(h2b(input));\n    return b2h(plaintext);\n  }\n\n  private static byte[] h2b(String hex)\n  {\n    if ((hex.length() & 0x01) == 0x01)\n      throw new IllegalArgumentException();\n    byte[] bytes = new byte[hex.length() / 2];\n    for (int idx = 0; idx < bytes.length; ++idx) {\n      int hi = Character.digit((int) hex.charAt(idx * 2), 16);\n      int lo = Character.digit((int) hex.charAt(idx * 2 + 1), 16);\n      if ((hi < 0) || (lo < 0))\n        throw new IllegalArgumentException();\n      bytes[idx] = (byte) ((hi << 4) | lo);\n    }\n    return bytes;\n  }\n\n  private static String b2h(byte[] bytes)\n  {\n    char[] hex = new char[bytes.length * 2];\n    for (int idx = 0; idx < bytes.length; ++idx) {\n      int hi = (bytes[idx] & 0xF0) >>> 4;\n      int lo = (bytes[idx] & 0x0F);\n      hex[idx * 2] = (char) (hi < 10 ? '0' + hi : 'A' - 10 + hi);\n      hex[idx * 2 + 1] = (char) (lo < 10 ? '0' + lo : 'A' - 10 + lo);\n    }\n    return new String(hex);\n  }\n\n}\n", "idx": 1103}
{"project": "cipher", "commit_id": "Snippet15926867_38919.java", "target": 0, "func": "Security.addProvider(new BouncyCastleProvider());\nCipher cipher = Cipher.getInstance(\"AES\", \"BC\");\n", "idx": 1104}
{"project": "cipher", "commit_id": "Snippet15471750_38521.java", "target": 0, "func": "try{\n    String plainData=\"my name is laksahan\",cipherText,decryptedText;\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n    keyGen.init(128);\n    SecretKey secretKey = keyGen.generateKey();\n    Cipher aesCipher = Cipher.getInstance(\"AES\");\n    aesCipher.init(Cipher.ENCRYPT_MODE,secretKey);\n    byte[] byteDataToEncrypt = plainData.getBytes();\n    byte[] byteCipherText = aesCipher.doFinal(byteDataToEncrypt);\n    cipherText = new BASE64Encoder().encode(byteCipherText);\nSystem.out.println(cipherText);\n}catch(Exception e){\n\n}\n", "idx": 1105}
{"project": "cipher", "commit_id": "Snippet13772805_37258.java", "target": 0, "func": "package com.jeffterrace.appenginetest;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.nio.channels.Channels;\nimport java.security.InvalidKeyException;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport java.util.zip.ZipOutputStream;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport com.google.appengine.api.files.AppEngineFile;\nimport com.google.appengine.api.files.FileReadChannel;\nimport com.google.appengine.api.files.FileService;\nimport com.google.appengine.api.files.FileServiceFactory;\nimport com.google.appengine.api.files.FileWriteChannel;\nimport com.google.appengine.api.files.GSFileOptions.GSFileOptionsBuilder;\n\n/**\n * Sample AppEngine Java class that reads and writes an encrypted, zipped file.\n */\npublic class CloudStorageZipCrypto extends HttpServlet {\n\n  // Google Cloud Storage bucket name.\n  private final String bucket = \"jefftest1\";\n  // File name within the bucket.\n  private final String filename = \"test1.zip\";\n  // Text file within the zip file.\n  private final String textFilename = \"test1.txt.crypt\";\n  // The full Cloud Storage path for accessing the file from App Engine.\n  private final String gsPath = \"/gs/\" + bucket + \"/\" + filename;\n\n  // App Engine file service instance.\n  private FileService fileService = FileServiceFactory.getFileService();\n\n  // Secret key for DES encryption (only first 8 bytes are used).\n  private final String secretKey = \"thereisnospoon\";\n\n  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    resp.setContentType(\"text/plain\");\n    resp.getWriter().println(\"CloudStorageZipCrypto GET starting.\");\n\n    resp.getWriter().println(\"Creating file...\");\n\n    // Create the GCS file and open it for writing.\n    GSFileOptionsBuilder optionsBuilder = new GSFileOptionsBuilder()\n      .setBucket(this.bucket)\n      .setKey(this.filename)\n      .setAcl(\"public-read\");\n    AppEngineFile gcsFile = this.fileService.createNewGSFile(optionsBuilder.build());\n\n    resp.getWriter().println(\"File created.\");\n\n    resp.getWriter().println(\"Writing to file: \" + gcsFile.getFullPath());\n\n    // Open a write channel to the GCS object.\n    FileWriteChannel writeChannel = this.fileService.openWriteChannel(gcsFile, true);\n\n    // Initialize what we need for encryption.\n    DESKeySpec dks;\n    SecretKeyFactory skf;\n    SecretKey desKey;\n    Cipher cipher;\n    try {\n      dks = new DESKeySpec(this.secretKey.getBytes());\n      skf = SecretKeyFactory.getInstance(\"DES\");\n      desKey = skf.generateSecret(dks);\n      cipher = Cipher.getInstance(\"DES\");\n      cipher.init(Cipher.ENCRYPT_MODE, desKey);\n    } catch (Exception e) {\n      resp.getWriter().println(\"Error initializing crypto: \" + e);\n      return;\n    }\n\n    // Create a zip file output stream and add a text file to it.\n    ZipOutputStream zos = new ZipOutputStream(Channels.newOutputStream(writeChannel));\n    zos.putNextEntry(new ZipEntry(textFilename));\n\n    // Write some text to the file, through a cipher output stream so it gets encrypted.\n    CipherOutputStream cos = new CipherOutputStream(zos, cipher);\n    PrintWriter out = new PrintWriter(cos);\n    out.println(\"The woods are lovely and deep.\");\n    out.println(\"But I have promises too keep.\");\n\n    // Close all the things\n    out.close();\n    cos.close();\n    zos.close();\n    writeChannel.closeFinally();\n\n    resp.getWriter().println(\"Wrote to, closed, and finalized the file.\");\n\n    // Open the zip file back up from GCS\n    gcsFile = new AppEngineFile(this.gsPath);\n    FileReadChannel readChannel = fileService.openReadChannel(gcsFile, false);\n    ZipInputStream zis = new ZipInputStream(Channels.newInputStream(readChannel));\n\n    // Read in the first file as UTF-8.\n    zis.getNextEntry();\n    try {\n      cipher.init(Cipher.DECRYPT_MODE, desKey);\n    } catch (InvalidKeyException e) {\n      resp.getWriter().println(\"Error initializing crypto: \" + e);\n      return;\n    }\n    CipherInputStream cis = new CipherInputStream(zis, cipher);\n    BufferedReader reader = new BufferedReader(new InputStreamReader(cis, \"UTF-8\"));\n    resp.getWriter().println(\"Reading file contents...\");\n    String line;\n    while ((line = reader.readLine()) != null) {\n      resp.getWriter().println(\"READ: \" + line);\n    }\n\n    // Close all the things.\n    reader.close();\n    cis.close();\n    zis.close();\n    readChannel.close();\n  }\n}\n", "idx": 1106}
{"project": "cipher", "commit_id": "Snippet42548673_24593.java", "target": 0, "func": " KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n             SecretKey myDesKey = keygenerator.generateKey();\n             Cipher desCipher;\n             desCipher = Cipher.getInstance(\"DES\");\n\n        /*  **String uname=request.getParameter(\"uname\");\n            System.out.println(\"username from link\" +uname); */**\n\n            byte[] ci=uname.getBytes();\n            System.out.println(\"byte[] ci\"+ci);\n            desCipher.init(Cipher.DECRYPT_MODE, myDesKey);\n             byte[] textDecrypted = desCipher.doFinal(ci);\n             System.out.println(\"Text Decryted : \" + new String(textDecrypted));\n", "idx": 1107}
{"project": "cipher", "commit_id": "Snippet10772978_35026.java", "target": 0, "func": "public static void encrypt(String key, InputStream is, OutputStream os) throws Throwable {\n    encryptOrDecrypt(key, Cipher.ENCRYPT_MODE, is, os);\n}\n\npublic static void decrypt(String key, InputStream is, OutputStream os) throws Throwable {\n    encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);\n}\n\nprivate static byte[] getBytes(String toGet)\n{\n    try\n    {\n        byte[] retVal = new byte[toGet.length()];\n        for (int i = 0; i < toGet.length(); i++)\n        {\n            char anychar = toGet.charAt(i);\n            retVal[i] = (byte)anychar;\n        }\n        return retVal;\n    }catch(Exception e)\n    {\n        String errorMsg = \"ERROR: getBytes :\" + e;\n        return null;\n    }\n}\n\npublic static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n\n\n   String iv = \"12345678\";\n   byte[] IVBytes = getBytes(iv);\n   IvParameterSpec IV = new IvParameterSpec(IVBytes);\n\n\n    byte[] KeyData = key.getBytes(); \n    SecretKeySpec blowKey = new SecretKeySpec(KeyData, \"Blowfish\"); \n    //Cipher cipher = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\");\n    Cipher cipher = Cipher.getInstance(\"Blowfish/CBC/NoPadding\");\n\n    if (mode == Cipher.ENCRYPT_MODE) {\n        cipher.init(Cipher.ENCRYPT_MODE, blowKey, IV);\n        CipherInputStream cis = new CipherInputStream(is, cipher);\n        doCopy(cis, os);\n    } else if (mode == Cipher.DECRYPT_MODE) {\n        cipher.init(Cipher.DECRYPT_MODE, blowKey, IV);\n        CipherOutputStream cos = new CipherOutputStream(os, cipher);\n        doCopy(is, cos);\n    }\n}\n\npublic static void doCopy(InputStream is, OutputStream os) throws IOException {\n    byte[] bytes = new byte[4096];\n    //byte[] bytes = new byte[64];\n    int numBytes;\n    while ((numBytes = is.read(bytes)) != -1) {\n        os.write(bytes, 0, numBytes);\n    }\n    os.flush();\n    os.close();\n    is.close();\n}   \n\npublic static void main(String[] args) {\n\n\n    //Encrypt the reports\n    try {\n        String key = \"squirrel123\";\n\n        FileInputStream fis = new FileInputStream(\"war_and_peace.txt\");\n        FileOutputStream fos = new FileOutputStream(\"encrypted.txt\");\n        encrypt(key, fis, fos);\n\n        FileInputStream fis2 = new FileInputStream(\"encrypted.txt\");\n        FileOutputStream fos2 = new FileOutputStream(\"decrypted.txt\");\n        decrypt(key, fis2, fos2);\n    } catch (Throwable e) {\n        e.printStackTrace();\n    }\n}\n", "idx": 1108}
{"project": "cipher", "commit_id": "Snippet20325132_2970.java", "target": 0, "func": "private static Cipher getCipher(String key, int mode) throws Exception{\n     byte[] rawKey = getRawKey(key.getBytes(\"UTF-8\"));\n     SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\n     Key key2 = skeySpec;\n     Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n     cipher.init(mode, key2);\n     return cipher;\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n/*  BEFORE:\n     KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n     SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n     sr.setSeed(seed);\n     kgen.init(128, sr); // 192 and 256 bits may not be available\n     SecretKey skey = kgen.generateKey();\n     byte[] raw = skey.getEncoded();\n*/\n     byte[] raw = MD5Util.getMD5HashRaw(seed);\n     return raw;\n}\n", "idx": 1109}
{"project": "cipher", "commit_id": "Snippet15664011_38657.java", "target": 0, "func": "private static final String AES_SECRET = \"PreDefinedKey\";\n\n/**\n * Method for AES encryption\n * @param raw\n * @param plain\n * @return\n * @throws Exception\n */\nprivate static byte[] encrypt(byte[] raw, byte[] plain) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES/ECB/PKCS7Padding\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(plain);\n    return encrypted;\n}\n\n\n\n/**\n * AES decryption\n * @param encryptMsg\n * @return\n * @throws Exception\n */\npublic static String AESDecrypt(String encryptMsg)\n        throws Exception {          \n    byte[] rawKey = getRawKey(AES_SECRET.getBytes());\n    //byte[] enc = toByte(encryptMsg);\n    byte[] enc = Base64.decode(encryptMsg, 0);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n\n}\n\n/**\n * Method for AES decryption\n * @param raw\n * @param encrypted\n * @return\n * @throws Exception\n */\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec keySpec = new SecretKeySpec(raw, \"AES/ECB/PKCS7Padding\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, keySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n\n}\n\npublic static byte[] getRawKey(byte[] seed) throws Exception {\n\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    //Init for 256bit AES key\n    kgen.init(256);\n    SecretKey secret = kgen.generateKey();\n    //Get secret raw key\n    byte[] raw = secret.getEncoded();\n\n    return seed;\n\n}\n", "idx": 1110}
{"project": "cipher", "commit_id": "Snippet22951606_5326.java", "target": 0, "func": "    import java.security.InvalidKeyException;\n    import java.security.NoSuchAlgorithmException;\n    import java.security.spec.InvalidKeySpecException;\n\n    import javax.crypto.BadPaddingException;\n    import javax.crypto.Cipher;\n    import javax.crypto.IllegalBlockSizeException;\n    import javax.crypto.SecretKeyFactory;\n    import javax.crypto.NoSuchPaddingException;\n    import javax.crypto.SecretKey;\n    import javax.crypto.spec.DESedeKeySpec;\n    import javax.xml.bind.DatatypeConverter;\n\n    public class DESede {\n\n     private static Cipher encryptCipher;\n     private static Cipher decryptCipher;\n\n     public static void main(String[] args) throws InvalidKeySpecException {\n      try {\n\n\n       String desKey = \"0123456789abcdef0123456789abcdef0123456789abcdef\"; // value from user\n       byte[] keyBytes = DatatypeConverter.parseHexBinary(desKey);\n       System.out.println((int)keyBytes.length);\n\n       SecretKeyFactory factory = SecretKeyFactory.getInstance(\"DESede\");\n       SecretKey key = factory.generateSecret(new DESedeKeySpec(keyBytes));\n\n       encryptCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n       encryptCipher.init(Cipher.ENCRYPT_MODE, key); //throwing Exception\n       byte[] encryptedData = encryptData(\"Confidential data\");\n\n       decryptCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n       decryptCipher.init(Cipher.DECRYPT_MODE, key);\n       decryptData(encryptedData);\n\n      } catch (NoSuchAlgorithmException e) {\n       e.printStackTrace();\n      } catch (NoSuchPaddingException e) {\n       e.printStackTrace();\n      } catch (InvalidKeyException e) {\n       e.printStackTrace();\n      } catch (IllegalBlockSizeException e) {\n       e.printStackTrace();\n      } catch (BadPaddingException e) {\n       e.printStackTrace();\n      }\n\n     }\n", "idx": 1111}
{"project": "cipher", "commit_id": "Snippet29583775_11620.java", "target": 0, "func": "static Cipher cipher;\n\nstatic final int[] ENC_MODE = {Cipher.ENCRYPT_MODE, Cipher.DECRYPT_MODE, Cipher.ENCRYPT_MODE};\n\npublic static void main(String[] args) throws Exception {\n\n    String text = \"this is my text\";\n    cipher = Cipher.getInstance(\"DES\");\n    SecretKey key1 = KeyGenerator.getInstance(\"DES\").generateKey();\n    SecretKey key2 = KeyGenerator.getInstance(\"DES\").generateKey();\n\n    String cipherText = enc(text, key1, key2);\n\n\n\n}\n\nprivate static String enc(String plainText, SecretKey key1, SecretKey key2) throws Exception{\n    byte[] textBytes = null;\n    String encText = plainText;\n\n    for(int i=0; i<3; i++){ \n        if (ENC_MODE[i] == Cipher.ENCRYPT_MODE){\n            cipher.init(ENC_MODE[i], key1);\n            textBytes = encText.getBytes(\"UTF8\");\n            textBytes = cipher.doFinal(textBytes);\n            encText = Base64.getEncoder().encodeToString(textBytes);\n\n        }else if(ENC_MODE[i] == Cipher.DECRYPT_MODE){\n            cipher.init(ENC_MODE[i], key2);\n            textBytes = cipher.doFinal(textBytes);  //Error Line\n            encText = new String(textBytes, \"UTF8\");\n        }\n\n        System.out.println(\"loop= \" + i +\" \"+encText);\n    }\n    return encText;\n}\n", "idx": 1112}
{"project": "cipher", "commit_id": "Snippet20952757_3550.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 1113}
{"project": "cipher", "commit_id": "Snippet42380670_24389.java", "target": 0, "func": "        byte[] m4 = new byte[256];\n        datIn.read(m4);\n        cUwp.init(Cipher.UNWRAP_MODE, myKey);\n        ks = (SecretKey)cUwp.unwrap(m4, \"DES\", Cipher.SECRET_KEY);\n        System.out.println(\"Recieved key:\\n\" + ks);\n        try{\n            Cipher desCipher = Cipher.getInstance(\"DES\");\n            desCipher.init(Cipher.DECRYPT_MODE, ks);\n        }\n        catch(NoSuchPaddingException|InvalidKeyException e){\n            System.out.println(\"Error: \" + e);\n        }\n", "idx": 1114}
{"project": "cipher", "commit_id": "Snippet7181532_32630.java", "target": 0, "func": "public class SimpleCrypto {\n\npublic static String encrypt(String seed, String cleartext) throws Exception {\n\n    byte[] rawKey = getRawKey(seed.getBytes());\n\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted) throws Exception {\n\n    byte[] rawKey = getRawKey(seed.getBytes());\n\n    byte[] enc = toByte(encrypted);\n\n    byte[] result = decrypt(rawKey, enc);\n\n    return new String(result);\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n\n    sr.setSeed(seed);\n\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n\n    SecretKey skey = kgen.generateKey();\n\n    byte[] raw = skey.getEncoded();\n\n    return raw;\n}\n\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n    byte[] encrypted = cipher.doFinal(clear);\n\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n    byte[] decrypted = cipher.doFinal(encrypted);\n\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n\n    return toHex(txt.getBytes());\n}\npublic static String fromHex(String hex) {\n\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n\n    int len = hexString.length()/2;\n\n    byte[] result = new byte[len];\n\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n\n    if (buf == null)\n        return \"\";\n\n    StringBuffer result = new StringBuffer(2*buf.length);\n\n    for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n    }\n\n    return result.toString();\n}\n\nprivate final static String HEX = \"0123456789ABCDEF\";\n\nprivate static void appendHex(StringBuffer sb, byte b) {\n\n    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n}\n\n}\n", "idx": 1115}
{"project": "cipher", "commit_id": "Snippet4413023_31109.java", "target": 0, "func": "KeyAgreement keyAgree = KeyAgreement.getInstance(\"DH\", \"BC\");\nkeyAgree.init(this.smartphonePrivKey);\nkeyAgree.doPhase(serverPubKey, true);\nSecretKey key = keyAgree.generateSecret(\"AES\");\nSystem.out.println(\"Key Length: \" + key.getEncoded().length);\nSystem.out.println(\"Key Algorithm: \"+ key.getAlgorithm());\nSystem.out.println(\"Key Format: \"+ key.getFormat());\n\nbyte[] encrypted = null;\n  Cipher cipher;\n  try {\n   cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n   System.out.println(\"Allowed Key Length: \"\n     + cipher.getMaxAllowedKeyLength(\"AES\"));\n   cipher.init(Cipher.ENCRYPT_MODE, key);\n   encrypted = cipher.doFinal(\"YEAH\".getBytes(\"UTF8\"));\n  } catch (NoSuchAlgorithmException e) {\n   e.printStackTrace();\n  } catch (NoSuchPaddingException e) {\n   e.printStackTrace();\n  } catch (InvalidKeyException e) {\n   e.printStackTrace();\n  } catch (IllegalBlockSizeException e) {\n   e.printStackTrace();\n  } catch (BadPaddingException e) {\n   e.printStackTrace();\n  } catch (UnsupportedEncodingException e) {\n   e.printStackTrace();\n  }\n", "idx": 1116}
{"project": "cipher", "commit_id": "Snippet40507531_22360.java", "target": 0, "func": " protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n         e1 = (EditText)findViewById(R.id.editText1);\n        e2 = (EditText)findViewById(R.id.editText2);\n        e3 = (EditText)findViewById(R.id.editText3);\n        e4 = (EditText)findViewById(R.id.editText4);\n        e5 = (EditText)findViewById(R.id.editText5);\n        final JSONObject obj = new JSONObject();\n        sub = (Button)findViewById(R.id.button);\n        final File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), \"Outer_Folder\");\n        file.mkdir();            // store and fetch file from storage...\n        f1  = new File(file,\"null\"+\".txt\");\n        f2  = new File(fileD,\"null\"+\".txt\");\n        try {\n            SecureRandom srm = SecureRandom.getInstance(\"SHA1PRNG\");\n            srm.setSeed(\"no one can read\".getBytes());\n            KeyGenerator kg = KeyGenerator.getInstance(\"AES\");\n            kg.init(128,srm);\n            sec = kg.generateKey();\n           bb1 = sec.getEncoded();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        if (f1.exists()){\n            File file3 = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), \"Outer_Folder\");\n            f4  = new File(file3,\"null\"+\".txt\");\n            int size = (int)f4.length();\n            contents = new byte[size];\n            try {\n                 bufferedInputStream = new BufferedInputStream(new FileInputStream(f4));\n                try {\n                    bufferedInputStream.read(contents);\n                    bufferedInputStream.close();\n                    String dd = new String(contents);\n                    SecretKeySpec sdf = new SecretKeySpec(bb1,\"AES\");\n                    Cipher cv = Cipher.getInstance(\"AES\");\n                    cv.init(Cipher.DECRYPT_MODE,sdf);\n                    decodefile = cv.doFinal(dd.getBytes());         // aes decryption not working \n                    String ggg = new String(decodefile);\n                    Toast.makeText(getApplicationContext(),ggg,Toast.LENGTH_SHORT).show();\n                    JSONObject jsonObj = new JSONObject(ggg);\n                    v1=jsonObj.getString(\"one\");\n                    v2=jsonObj.getString(\"two\");                 // when enter the activity json filled by decryped file\n                    v3=jsonObj.getString(\"three\");\n                    v4=jsonObj.getString(\"four\");\n                    v5=jsonObj.getString(\"five\");\n                    e1.setText(v1);\n                    e2.setText(v2);\n                    e3.setText(v3);\n                    e4.setText(v4);\n                    e5.setText(v5);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                } catch (NoSuchAlgorithmException e) {\n                    e.printStackTrace();\n                } catch (InvalidKeyException e) {\n                    e.printStackTrace();\n                } catch (NoSuchPaddingException e) {\n                    e.printStackTrace();\n                } catch (JSONException e) {\n                    e.printStackTrace();\n                }\n                 catch (BadPaddingException e) {\n                    e.printStackTrace();\n                } catch (IllegalBlockSizeException e) {\n                    e.printStackTrace();\n                }\n\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            } }else {\n            Toast.makeText(getApplicationContext(),\"con't read\",Toast.LENGTH_LONG).show();\n        } sub.setOnClickListener(new View.OnClickListener() {\n            @TargetApi(Build.VERSION_CODES.KITKAT)\n            @Override\n            public void onClick(View v) {\n                s1=e1.getText().toString();\n                s2=e2.getText().toString();\n                s3=e3.getText().toString();\n                s4=e4.getText().toString();\n                s5=e5.getText().toString();\n                try {\n                    obj.put(\"one\", s1);\n                    obj.put(\"two\", s2);\n                    obj.put(\"three\", s3);          //converting json \n                    obj.put(\"four\", s4);\n                    obj.put(\"five\", s5);\n                    if (f1.exists()){ //\n                        f1.delete();\n                    }\n                     vv = obj.toString();\n                    new execute();\n\n                    try {\n                        SecretKeySpec sksep = new SecretKeySpec(bb1,\"AES\");\n                        Cipher cp = Cipher.getInstance(\"AES\");\n                        cp.init(Cipher.ENCRYPT_MODE,sksep);\n                        encobyte = cp.doFinal(vv.getBytes());  // aes encryption  - working\n                        FileOutputStream uu = null;\n                        uu = new FileOutputStream(f1);\n                        uu.write(encobyte);\n                        oo = new String(encobyte);\n                        Toast.makeText(getApplicationContext(),oo,Toast.LENGTH_LONG).show();\n                    } catch (NoSuchAlgorithmException e) {\n                        e.printStackTrace();\n                    } catch (NoSuchPaddingException e) {\n                        e.printStackTrace();\n                    } catch (InvalidKeyException e) {    //\n                        e.printStackTrace();\n                    } catch (BadPaddingException e) {\n                        e.printStackTrace();            //\n                    } catch (IllegalBlockSizeException e) {\n                        e.printStackTrace();\n                    }\n\n                } catch (IOException e) {\n                    e.printStackTrace();\n                } catch (JSONException e) {\n                    e.printStackTrace();\n                }\n", "idx": 1117}
{"project": "cipher", "commit_id": "Snippet15497578_38540.java", "target": 0, "func": "BASE64Decoder decoder = new BASE64Decoder();\nBASE64Encoder encoder = new BASE64Encoder();\n\npublic String encryptValueWithBlowfish(String data, String secretKey) {\n\n    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n    try {\n        SecretKeySpec key = new SecretKeySpec(decoder.decodeBuffer(secretKey), \"Blowfish\");\n        Cipher cipher = Cipher.getInstance(\"Blowfish/CBC/NoPadding\", \"BC\");\n        String iv = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n        IvParameterSpec ivs = new IvParameterSpec(iv.getBytes());\n        cipher.init(Cipher.ENCRYPT_MODE, key, ivs);\n        MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n        return encoder.encode(sha.digest(cipher.doFinal(decoder.decodeBuffer(data))));\n    } catch (Exception e) {\n        lg.info(\"Failed to encryptValueWithBlowfish: \" + e.getMessage());\n        return \"\";\n    }\n}\n", "idx": 1118}
{"project": "cipher", "commit_id": "Snippet17561767_724.java", "target": 0, "func": "  SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES/CBC/PKCS5Padding\");\n  Cipher cipher = Cipher.getInstance(\"AES\")\n  cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n", "idx": 1119}
{"project": "cipher", "commit_id": "Snippet10981021_35214.java", "target": 0, "func": "public class App \n{\n    static byte[] seckey=null;\n    static\n    {\n        try\n        {\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n              kgen.init(128); \n\n                        // Generate the secret key specs.             \n                        // SecretKey skey = kgen.generateKey();\n                        // seckey = skey.getEncoded();\n                        // above won't work as can't generate new secret key for decrypt. Have to use same key for encrypt and decrypt\n\n                        // seckey = new byte[]{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};\n                        seckey = new byte[]{(byte)172,(byte)236,(byte)125,(byte)222,(byte)188,(byte)33,(byte)210,(byte)4,(byte)202,(byte)31,(byte)188,(byte)152,(byte)220,(byte)104,(byte)62,(byte)64};\n\n\n        } catch (NoSuchAlgorithmException e)\n        {           \n            e.printStackTrace();\n        }\n\n\n    }\n    public static void main( String[] args )\n    {   \n\n        String password = encrypt(\"A123456\"); //working\n        System.out.println(password);\n        System.out.println(decrypt(password));\n\n        String password = encrypt(\"A*501717\"); //NOT working\n        System.out.println(password);\n        System.out.println(decrypt(password));\n\n    }    \n    public static String encrypt(String passwd)\n    {\n        SecretKeySpec key = new SecretKeySpec(seckey, \"AES\");\n        byte[] output;\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES\");\n\n            // encryption pass\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            output = cipher.doFinal(passwd.getBytes());\n        } catch (Exception e)\n        {\n            System.out.println(\"Unable to encrypt password.\");\n            output = \"\".getBytes();\n        }\n\n        return new String(output);\n\n    }\n\n    public static String decrypt(String passwd)\n    {\n        if (!StringUtils.isNotBlank(passwd))\n            return \"\";\n\n            SecretKeySpec key = new SecretKeySpec(seckey, \"AES\");\n\n        byte[] output;\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            // decryption pass\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            output = cipher.doFinal(passwd.getBytes());\n        } catch (Exception e)\n        {\n            System.out.println(\"Unable to decrypt password\");\n            output = \"\".getBytes();\n        }\n\n        return new String(output);\n\n    }\n   }\n", "idx": 1120}
{"project": "cipher", "commit_id": "Snippet41760496_23726.java", "target": 0, "func": "def decode (string: String ): String = {\n\n    val keyBytes: Array[Char] = Array[Char](0xEF, 0x3A, 0xB2, 0x9C, 0xD1, 0x9F, 0x0C, 0xAC, 0x57, 0x59, 0xC7, 0xAB, 0xD1, 0x2C, 0xC9, 0x2B,0xA3, 0xFE, 0x0A, 0xFE, 0xBF, 0x96, 0x0D, 0x63,0xFE, 0xBD, 0x0F, 0x45)\n\n    val cipher: Cipher = Cipher.getInstance(\"Blowfish/ECB/NoPadding\")\n    cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(new String (keyBytes).getBytes, \"Blowfish\"))\n\n    new String(cipher.doFinal(string.getBytes.reverse))\n}\n", "idx": 1121}
{"project": "cipher", "commit_id": "Snippet44017850_26083.java", "target": 0, "func": "String text = \"Hello World\";\nString key = \"Bar12345Bar12345\"; // 128 bit key\n // Create key and cipher\n Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n Cipher cipher = Cipher.getInstance(\"AES\");\n // encrypt the text\n cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n byte[] encrypted = cipher.doFinal(text.getBytes());\n System.err.println(new String(encrypted));\n// decrypt the text\ncipher.init(Cipher.DECRYPT_MODE, aesKey); String decrypted = new String(cipher.doFinal(encrypted));\nSystem.err.println(decrypted);\n", "idx": 1122}
{"project": "cipher", "commit_id": "Snippet37405829_19312.java", "target": 0, "func": "private static String getPassphraseSize16(String key) {\n    if (TextUtils.isEmpty(key)) {\n        return null;\n    }\n    char controlChar = '\\u0014';\n    String key16 = key + controlChar;\n    if (key16.length() < 16) {\n        while (key16.length() < 16) {\n            key16 += key + controlChar;\n        }\n    }\n    if (key16.length() > 16) {\n        key16 = key16.substring(key16.length() - 16, key16.length());\n    }\n    return key16;\n}\n\n\npublic static byte[] encodeAES(byte[] message, String passphrase) {\n    String passphrase16 = getPassphraseSize16(passphrase);\n    SecretKeySpec secretKey = new SecretKeySpec(passphrase16.getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n    byte[] encodedText = cipher.doFinal(message);\n\n    return encodedText;\n}\n\n\npublic static byte[] decodeAES(byte[] encodedMessage, String key) {\n    String passphrase16 = getPassphraseSize16(key);\n    SecretKeySpec secretKey = new SecretKeySpec(passphrase16.getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\n    byte[] decodedText = cipher.doFinal(encodedMessage);\n\n    return decodedText;\n}\n", "idx": 1123}
{"project": "cipher", "commit_id": "Snippet11073088_35293.java", "target": 0, "func": "package code.finalwork;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.util.Base64;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n\npublic class FinalWorkActivity extends Activity {\n    private String pref_file = \"pref.xml\";\n\n    TextView pass;\n    TextView pass_cnf;\n    TextView err_msg;\n    Button done;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n        pass = (TextView) findViewById(R.id.pass);\n        pass_cnf = (TextView) findViewById(R.id.pass_cnf);\n        err_msg = (TextView) findViewById(R.id.error_pass);\n        done = (Button) findViewById(R.id.btn_done);\n\n        SharedPreferences pref = getSharedPreferences(pref_file,\n                Context.MODE_PRIVATE);\n        Boolean val = pref.getBoolean(\"firstuse\", true);\n        if (val) {\n            SharedPreferences.Editor mod = pref.edit();\n            mod.putBoolean(\"firstuse\", false);\n            mod.commit();\n\n        }\n    }\n\n    // ///////////////////////////////////////////////////////////////////////\n    public void onclick(View view) {\n        switch (view.getId()) {\n        case R.id.btn_done:\n            String usrpass = pass.getText().toString();\n            String cnfrmpass = pass_cnf.getText().toString();\n            if (usrpass.equals(cnfrmpass)) {\n                byte[] password = Base64.decode(usrpass, 0);\n                byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5,\n                        6 };\n                for (int i = 0; i < usrpass.length(); i++) {\n                    key[i] = password[i];\n                }\n                try {\n                    String passtostore = encrypt(usrpass, key);\n                } catch (Exception e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n                err_msg.setText(\"Password added\");\n                err_msg.setVisibility(View.VISIBLE);\n            } else {\n                err_msg.setText(\"Password Must Match\");\n                err_msg.setVisibility(View.VISIBLE);\n            }\n            break;\n        }\n    }\n\n    // //////////////////////////////////////////////////////////////////////\n\n    public String encrypt(String toencrypt, byte key[]) throws Exception {\n        SecretKeySpec secret = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secret);\n        byte[] encryptedbytes = cipher.doFinal(toencrypt.getBytes());\n        String encrypted = Base64.encodeToString(encryptedbytes, 0);\n        return encrypted;\n\n    }\n}  \n", "idx": 1124}
{"project": "cipher", "commit_id": "Snippet26832481_8990.java", "target": 0, "func": "public class TripleDES {\n\n    private static sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();\n    private static sun.misc.BASE64Encoder encoder = new sun.misc.BASE64Encoder();\n\n    public static void main(String[] args) {\n\n        try {\n            try {\n                Cipher c = Cipher.getInstance(\"DESede\");\n            } catch (Exception e) {\n                System.err.println(\"Installing SunJCE provider.\");\n                Provider sunjce = new com.sun.crypto.provider.SunJCE();\n                Security.addProvider(sunjce);\n            }\n\n            File keyFile = new File(\"D:/3DES/keygen.txt\");\n\n            /*\n             * writeKey(generateKey(),keyFile);\n             * System.out.println(\"After writing to file\");\n             */\n\n            SecretKey rKey = readKey(keyFile);\n            System.out.println(\"Secret key :\" + rKey);\n            String encryptedMssg = encrypt(rKey, \"afda\");\n            System.out.println(\"Encrypted mssg :\" + encryptedMssg);\n\n            String decryptedMssg = decrypt(rKey, encryptedMssg);\n            System.out.println(\"Decrypted mssg :\" + decryptedMssg);\n\n        } catch (Exception e) {\n            System.err.println(e);\n            System.err.println(\"Usage: java \" + TripleDES.class.getName()\n                    + \" -d|-e|-g <keyfile>\");\n        }\n    }\n\n    public static SecretKey generateKey() throws NoSuchAlgorithmException {\n        KeyGenerator keygen = KeyGenerator.getInstance(\"DESede\");\n        System.out.println(keygen.generateKey());\n        return keygen.generateKey();\n    }\n\n    public static void writeKey(SecretKey key, File f) throws IOException,\n            NoSuchAlgorithmException, InvalidKeySpecException {\n        SecretKeyFactory keyfactory = SecretKeyFactory.getInstance(\"DESede\");\n        DESedeKeySpec keyspec = (DESedeKeySpec) keyfactory.getKeySpec(key,\n                DESedeKeySpec.class);\n        byte[] rawkey = keyspec.getKey();\n        FileOutputStream out = new FileOutputStream(f);\n        out.write(rawkey);\n        out.close();\n    }\n\n    public static SecretKey readKey(File f) throws IOException,\n            NoSuchAlgorithmException, InvalidKeyException,\n            InvalidKeySpecException {\n        DataInputStream in = new DataInputStream(new FileInputStream(f));\n        byte[] rawkey = new byte[(int) f.length()];\n        in.readFully(rawkey);\n        in.close();\n        DESedeKeySpec keyspec = new DESedeKeySpec(rawkey);\n        SecretKeyFactory keyfactory = SecretKeyFactory.getInstance(\"DESede\");\n        SecretKey key = keyfactory.generateSecret(keyspec);\n\n        return key;\n    }\n\n    public static SecretKey readKey(byte[] rawkey) throws IOException,\n            NoSuchAlgorithmException, InvalidKeyException,\n            InvalidKeySpecException {\n        // DataInputStream in = new DataInputStream(new FileInputStream(f));\n        // byte[] rawkey = new byte[(int)f.length()];\n        // in.readFully(rawkey);\n        // in.close();\n        DESedeKeySpec keyspec = new DESedeKeySpec(rawkey);\n        SecretKeyFactory keyfactory = SecretKeyFactory.getInstance(\"DESede\");\n        SecretKey key = keyfactory.generateSecret(keyspec);\n\n        return key;\n    }\n\n    public static String encrypt(SecretKey key, String clearData)\n            throws NoSuchAlgorithmException, InvalidKeyException,\n            NoSuchPaddingException, IOException, Exception {\n        System.out.println(\"inside encrypt\");\n        System.out.println(\"KEYYYYY::\" + key);\n        Cipher cipher = Cipher.getInstance(\"DESede\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] cleartext = clearData.getBytes(\"ASCII\");\n        byte[] ciphertext = cipher.doFinal(cleartext);\n\n        return encoder.encode(ciphertext);\n    }\n\n    public static String decrypt(SecretKey key, String encryptedData)\n            throws NoSuchAlgorithmException, InvalidKeyException, IOException,\n            IllegalBlockSizeException, NoSuchPaddingException,\n            BadPaddingException, Exception {\n        Cipher cipher = Cipher.getInstance(\"DESede\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] dec = decoder.decodeBuffer(encryptedData);\n        byte[] clearbytes = cipher.doFinal(dec);\n\n        return new String(clearbytes, \"ASCII\");\n    }\n\n\n}\n", "idx": 1125}
{"project": "cipher", "commit_id": "Snippet16336294_39295.java", "target": 0, "func": "    import javax.crypto.Cipher;\n    import javax.crypto.spec.IvParameterSpec;\n    import javax.crypto.spec.SecretKeySpec;\n\n    import android.util.Base64;\n    //string encryption\n    public class EncryptionHelper {\n\n\n\n        // Encrypts string and encode in Base64\n        public static String encryptText(String plainText) throws Exception {\n            // ---- Use specified 3DES key and IV from other source --------------\n            byte[] plaintext = plainText.getBytes();//input\n            byte[] tdesKeyData = Constants.getKey().getBytes();// your encryption key\n\n            byte[] myIV = Constants.getInitializationVector().getBytes();// initialization vector\n\n            Cipher c3des = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n            SecretKeySpec myKey = new SecretKeySpec(tdesKeyData, \"DESede\");\n            IvParameterSpec ivspec = new IvParameterSpec(myIV);\n\n            c3des.init(Cipher.ENCRYPT_MODE, myKey, ivspec);\n            byte[] cipherText = c3des.doFinal(plaintext);\n            String encryptedString = Base64.encodeToString(cipherText,\n                    Base64.DEFAULT);\n            // return Base64Coder.encodeString(new String(cipherText));\n            return encryptedString;\n        }\n\n    private class Constants \n{\nprivate static final String KEY=\"QsdPasd45FaSdnLjf\";\n    private static final String INITIALIZATION_VECTOR=\"l9yhTaWY\";\npublic static String getKey() \n    {\n        return KEY;\n    }\n\n\n    public static String getInitializationVector() \n    {\n        return INITIALIZATION_VECTOR;\n    }\n }   \n    }\n", "idx": 1126}
{"project": "cipher", "commit_id": "Snippet35339687_17273.java", "target": 0, "func": "Cipher.getInstance(\"DES/ECB/ZeroBytePadding\", \"BC\");\n", "idx": 1127}
{"project": "cipher", "commit_id": "Snippet13308957_36854.java", "target": 0, "func": "public class Crypto {\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    public static String encrypt(String seed, String cleartext)\n            throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted)\n            throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"CBC\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted)\n            throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length() / 2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                    16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n\n        StringBuffer result = new StringBuffer(2 * buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n\n        return result.toString();\n    }\n\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n    }\n}\n", "idx": 1128}
{"project": "cipher", "commit_id": "Snippet12190435_36112.java", "target": 0, "func": "public static String encrypt(String seed, String cleartext) throws Exception \n{\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n\n    byte[] rawKey = skey.getEncoded();\n    SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(cleartext.getBytes());\n    return toHex(encrypted);\n}\n", "idx": 1129}
{"project": "cipher", "commit_id": "Snippet42537827_24579.java", "target": 0, "func": "private OutputStream getEncryptedStream(OutputStream ouputStream) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException{\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, this.key);\n    CipherOutputStream output = new CipherOutputStream(ouputStream, cipher);\n\n    return output;\n}\n", "idx": 1130}
{"project": "cipher", "commit_id": "Snippet7804481_32930.java", "target": 0, "func": "String key = \"my_own_key_which_should_be_quite_long\";\nbyte[] keyData = key.getBytes();\nSecretKeySpec myKey = new SecretKeySpec(keyData, \"Blowfish\");\nCipher cipher = Cipher.getInstance(\"Blowfish\");\ncipher.init(Cipher.ENCRYPT_MODE, myKey);\nString input = \"string to encrypt\";\ntry {\n    byte[] encrypted = cipher.doFinal(input.getBytes());\n    System.out.println(new String(encrypted));\n} catch (Exception ex) {\n    ex.printStackTrace();\n}\n", "idx": 1131}
{"project": "cipher", "commit_id": "Snippet9675115_34142.java", "target": 0, "func": "public class NewCipher {\n\n    private static final String password = \"somestatickey\";\n    private Cipher desCipher;\n    private SecretKey secretKey;\n    private Context ctx;\n\n    public NewCipher(Context ctx) throws Exception {\n\n        this.ctx = ctx;\n        // Create Key\n        byte key[] = password.getBytes();\n        DESKeySpec desKeySpec = new DESKeySpec(key);\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        secretKey = keyFactory.generateSecret(desKeySpec);\n\n        // Create Cipher\n        desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\n    }\n", "idx": 1132}
{"project": "cipher", "commit_id": "Snippet34389584_16388.java", "target": 0, "func": "        List<String> list = new ArrayList<String>();\n        list.add(\"Hello\");\n        list.add(\" World!!\");\n\n        System.out.println(list);\n\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(bos);\n        oos.writeObject(list);\n        byte[] text = bos.toByteArray();\n\n        KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n        SecretKey myDesKey = keygenerator.generateKey();\n        Cipher desCipher;\n        desCipher = Cipher.getInstance(\"DES\");\n\n        desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n        byte[] textEncrypted = desCipher.doFinal(text);\n\n        desCipher.init(Cipher.DECRYPT_MODE, myDesKey);\n        byte[] textDecrypted = desCipher.doFinal(textEncrypted);\n\n        ByteArrayInputStream bis = new ByteArrayInputStream(textDecrypted);\n        ObjectInputStream ois = new ObjectInputStream(bis);\n        List<String> result = (List<String>) ois.readObject();\n\n        System.out.println(result);\n", "idx": 1133}
{"project": "cipher", "commit_id": "Snippet39366563_21271.java", "target": 0, "func": "public static String encryptMethod(String seedBase64, byte[] key) {\n    try {\n        byte[] seed = Base64.decode(seedBase64, 0);\n        SecretKeySpec keySpec = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n        cipher.init(1, keySpec);\n        return Base64.encodeToString(cipher.doFinal(seed), 0);\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n", "idx": 1134}
{"project": "cipher", "commit_id": "Snippet31792400_13867.java", "target": 0, "func": "import java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Scope(\"singleton\")\npublic class Encryptor {\n\n    @Value(\"${aeskey}\")\n    private String keyStr;\n\n    private Key aesKey = null;\n    private Cipher cipher = null;\n\n    synchronized private void init() throws Exception {\n        if (keyStr == null || keyStr.length() != 16) {\n            throw new Exception(\"bad aes key configured\");\n        }\n        if (aesKey == null) {\n            aesKey = new SecretKeySpec(keyStr.getBytes(), \"AES\");\n            cipher = Cipher.getInstance(\"AES\");\n        }\n    }\n\n    synchronized public String encrypt(String text) throws Exception {\n        init();\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n        return toHexString(cipher.doFinal(text.getBytes()));\n    }\n\n    synchronized public String decrypt(String text) throws Exception {\n        init();\n        cipher.init(Cipher.DECRYPT_MODE, aesKey);\n        return new String(cipher.doFinal(toByteArray(text)));\n    }\n\n    public static String toHexString(byte[] array) {\n        return DatatypeConverter.printHexBinary(array);\n    }\n\n    public static byte[] toByteArray(String s) {\n        return DatatypeConverter.parseHexBinary(s);\n    }\n\n    /*\n     * DO NOT DELETE\n     * \n     * Use this commented code if you don't like using DatatypeConverter dependency\n     */\n    // public static String toHexStringOld(byte[] bytes) {\n    // StringBuilder sb = new StringBuilder();\n    // for (byte b : bytes) {\n    // sb.append(String.format(\"%02X\", b));\n    // }\n    // return sb.toString();\n    // }\n    //\n    // public static byte[] toByteArrayOld(String s) {\n    // int len = s.length();\n    // byte[] data = new byte[len / 2];\n    // for (int i = 0; i < len; i += 2) {\n    // data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i +\n    // 1), 16));\n    // }\n    // return data;\n    // }\n}\n", "idx": 1135}
{"project": "cipher", "commit_id": "Snippet12628315_36378.java", "target": 0, "func": "Cipher eciesDecrypter = Cipher.getInstance(\"ECIESwithXOR/SHA1/HMACSHA1\", \"JsafeJCE\");\n", "idx": 1136}
{"project": "cipher", "commit_id": "Snippet32120547_14194.java", "target": 0, "func": "import java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class CryptoUtils {\n    private static final String AES = \"AES\";\n//  private static byte[] keyValue = new byte[]     // OK \n//          { 'T', 'h', 'e', 'B', 'e', 's', 't', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };\n    private static byte[] keyValue = new byte[]     // FAILS !!! WTF!\n            { 'T', 'h', 'e', 'B', 'e', 's', 't', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'z' };\n\n    public static String encrypt(String Data) throws Exception {\n        Key key = new SecretKeySpec(keyValue, AES);\n        Cipher c = Cipher.getInstance(AES);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        return new BASE64Encoder().encode(encVal);\n    }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = new SecretKeySpec(keyValue, AES);\n        Cipher c = Cipher.getInstance(AES);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        return new String(decValue);\n    }\n\n    public static void main(String[] args) throws Exception {\n        System.out.println(CryptoUtils.encrypt(\"<PASSWORD>\"));\n        System.out.println(CryptoUtils.decrypt(\"Z4i3ywGXil2QCfM6R8S5qw==\"));\n    }\n}\n", "idx": 1137}
{"project": "cipher", "commit_id": "Snippet42211257_24183.java", "target": 0, "func": "ObservableList<Access> access = FXCollections.observableArrayList();\n\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, key128);\n\nCipherInputStream cipherIn = new CipherInputStream(\n        new BufferedInputStream(new FileInputStream(\"./resources/saves\" + username)), cipher);\nObjectInputStream in = new ObjectInputStream(cipherIn);\nSealedObject sealed;\nwhile ((sealed = (SealedObject) in.readObject()) != null) {\n    access.add((Access) sealed.getObject(cipher));\n}\n", "idx": 1138}
{"project": "cipher", "commit_id": "Snippet14793355_37923.java", "target": 0, "func": "public static void decrypt(){\n    Cipher cipher;\n    SecretKeySpec key;\n    byte [] keyBytes;\n    byte [] pt;\n    byte [] ct;\n    String plaintxt;\n\n    keyBytes = new byte [] {(byte)0xFE, (byte)0xDC, (byte)0xBA, (byte)0x98, (byte)0x76, (byte)0x54, (byte)0x32, (byte)0x10};\n    key = new SecretKeySpec(keyBytes, \"DES\");\n    ct = new byte [] {(byte) 0x2C, (byte) 0xE6, (byte) 0xDD, (byte) 0xA4, (byte) 0x98, (byte) 0xCA, (byte) 0xBA, (byte) 0xB9};\n\n    try{\n        cipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        pt = cipher.doFinal(ct);\n        printByteArray(pt);\n        plaintxt = byteToHex(pt);\n        hexToAscii(plaintxt);\n    }\n    catch(Exception e){\n        e.printStackTrace();\n    }\n\n}\n", "idx": 1139}
{"project": "cipher", "commit_id": "Snippet13478097_37016.java", "target": 0, "func": "public class Decryptor {\n\n\npublic static byte[] decryptData(byte[] encryptedCredentials, String key){\n\n    Cipher c;\n    SecretKeySpec k;\n    byte[] byteSharedKey = null;\n    byte[] byteObject = null;\n\n\n    try {\n\n        byteSharedKey = getByteKey(key);\n\n        c = Cipher.getInstance(\"AES\");\n        k = new SecretKeySpec(byteSharedKey, \"AES\");\n        c.init(Cipher.DECRYPT_MODE, k);\n        byteObject = c.doFinal(encryptedCredentials);\n\n\n\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    }\n\n    return byteObject;\n\n}\n\npublic static Object getObjectFromBytes(byte[] credentials) throws IOException, ClassNotFoundException{\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(credentials);\n    ObjectInput in = null;\n    ITU_Credentials credentialsObj = null;\n\n    try {\n\n        in = new ObjectInputStream(bis);\n        credentialsObj = (ITU_Credentials)in.readObject(); \n\n    } finally {\n      bis.close();\n      in.close();\n    }\n    return credentialsObj;\n}\n\n\nprivate static byte[] getByteKey(String key) throws UnsupportedEncodingException, NoSuchAlgorithmException{\n\n    //Converting key to SHA-1 and trimming to mach maximum lenght of key\n\n    byte[] bkey = key.getBytes(\"UTF-8\");\n    MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n    bkey = sha.digest(bkey);\n    bkey = Arrays.copyOf(bkey, 16);\n\n    return bkey;\n}\n\npublic static void main(String[] args) {\n    new Encryptor();\n}\n", "idx": 1140}
{"project": "cipher", "commit_id": "Snippet19518447_2234.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, keySpec); \nbyte[] encryptedTextBytes = cipher.doFinal(message .getBytes(\"UTF-8\")); \nString k = new String(encryptedTextBytes); \nSystem.out.println(\"KKKKK\"+k);\n", "idx": 1141}
{"project": "cipher", "commit_id": "Snippet34192629_16206.java", "target": 0, "func": "String  epsKey =\"12345678\";\n    String  str =\"hcs\";\nDESKeySpec desKeySpec = new DESKeySpec(epsKey.getBytes());\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\nSecretKey key = keyFactory.generateSecret(desKeySpec);\nCipher ecipher = Cipher.getInstance(\"DES\");\n//ecipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\necipher.init(Cipher.ENCRYPT_MODE, key);\nbyte[] enc = ecipher.doFinal(str.getBytes(\"UTF8\"));\nString encryptedString = new BASE64Encoder().encode(enc);\n\nSystem.out.println(encryptedString);\n", "idx": 1142}
{"project": "cipher", "commit_id": "Snippet19765994_2486.java", "target": 0, "func": "static String decrypt(String strInput) throws IOException,\n    NoSuchAlgorithmException, NoSuchPaddingException,\n    InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n\n    FileInputStream fis = new FileInputStream(strInput);\n\n    int endFile = strInput.length() - 4;\n    String strOut = strInput.substring(0, endFile) + \"xx.txt\"; \n\n    FileOutputStream fos = new FileOutputStream(strOut);\n\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n\n    int b;\n    byte[] d = new byte[8];\n    while ((b = fis.read(d)) != -1) {\n        fos.write(cipher.update(d));\n    }\n    fos.write(cipher.doFinal());\n\n    fos.flush();\n    fos.close();\n    fis.close();\n    return strOut;\n}\n", "idx": 1143}
{"project": "cipher", "commit_id": "Snippet7507370_32756.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\"); \nSecretKey key = new SecretKeySpec(new byte[64], \"AES\"); // 256 bit key for AES      \ncipher.init(Cipher.ENCRYPT_MODE, key); \n", "idx": 1144}
{"project": "cipher", "commit_id": "Snippet47373510_29350.java", "target": 0, "func": "public static void main(String[] args) throws Exception {\nSystem.out.println( \"128-bit hex key example: ffffffffffffffffffffffffffffffff\" );\n\ntry(BufferedReader br = new BufferedReader(new FileReader(\"E:\\\\TESTS\\\\tests.txt\"))) {\n    StringBuilder sb = new StringBuilder();\n    String line = br.readLine();\n\n    while (line != null) {\n        sb.append(line);\n        sb.append(System.lineSeparator());\n        line = br.readLine();\n    }\n    String everything = sb.toString();\n\n\nScanner scanner = new Scanner( System.in );\n System.out.println( \"Enter 128-bit hex key: \" );\n final String keyHex = scanner.nextLine();\n\n final String plaintextHex = \"aaaaaaaaaabbbbbbbbbbccccccccccff\";\n\nSecretKey key = new SecretKeySpec(DatatypeConverter\n    .parseHexBinary(keyHex), \"AES\");\nSystem.out.println(everything);\nCipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\ncipher.init(Cipher.ENCRYPT_MODE, key);\n\nbyte[] result = cipher.doFinal(DatatypeConverter\n    .parseHexBinary(everything));\n\nSystem.out.println(DatatypeConverter.printHexBinary(result));\n\nCipher cipherd = Cipher.getInstance(\"AES/ECB/NoPadding\");\ncipherd.init(Cipher.DECRYPT_MODE, key);\n\nbyte[] result2 = cipherd.doFinal(result);\nSystem.out.println(DatatypeConverter.printHexBinary(result2));\n\n}}\n", "idx": 1145}
{"project": "cipher", "commit_id": "Snippet20639575_3229.java", "target": 0, "func": "cipherAlgorythm = \"PBEWithMD5AndDES\";                           \ncipherTransformation = \"PBEWithMD5AndDES/CBC/PKCS5Padding\";     \nPBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec(salt, iterations);\nSecretKeyFactory kf = SecretKeyFactory.getInstance(cipherAlgorythm);\nSecretKey key = kf.generateSecret(new javax.crypto.spec.PBEKeySpec(password.toCharArray()));\nCipher encryptCipher = Cipher.getInstance(cipherTransformation);   \nencryptCipher.init(Cipher.ENCRYPT_MODE, key, ps);\nbyte[] output = encryptCipher.doFinal(\"This is a test string\".getBytes(\"UTF-8\"));\n", "idx": 1146}
{"project": "cipher", "commit_id": "Snippet39711122_21612.java", "target": 0, "func": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.Base64;\n\n//create public class encrypt\npublic class encrypt {\n    //algorithm AES 128 with a secret key\n    private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = \n        new byte[] { 'H', 't', 'v', 'b', 'a', 'w', 'e',\n'i', 'n', 'v', 'a','l', 't', 'k', 'y', 'e' };\n    private static BufferedReader reader;\n\n    public static void main(String[] args) throws Exception {\n        //Filereader letter to read from a file letter.txt\n        FileReader letter = new FileReader(\"/Users/Shiv/Eclipse/CPS3498_HW/src/letter.txt\");\n        reader = new BufferedReader(letter);\n        //string text blank, data that stres reader contents.\n        String text = \"\";\n        String data = reader.readLine();\n        //while loop to see if data is not blank\n        while (data != null){\n            text += data;\n            data = reader.readLine();\n        }\n        String textEnc = encrypt(text);\n        //        \n        File secret = new File(\"/Users/Shiv/Eclipse/CPS3498_HW/src/secret.txt\");\n            try\n            {\n                secret.createNewFile();\n            }\n            catch(Exception e)\n            {\n                e.printStackTrace();\n            }           \n            try {\n                FileWriter secretFile = new FileWriter(secret);\n                BufferedWriter secretBuff = new BufferedWriter(secretFile);\n                secretBuff.write(textEnc);\n                secretBuff.close();\n            } \n            catch (Exception e) \n            {\n                e.printStackTrace();\n            }\n        }\n//encrypt method\npublic static String encrypt(String Data) throws Exception {\n        Key pass = generateKey();\n        // cipher class to provide the encryption and intialize\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, pass);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        String encryptedValue = Base64.getEncoder().encodeToString(encVal);\n        return encryptedValue;     \n    }\n//generateKey method to generate a secret key\nprivate static Key generateKey() throws Exception {\n    Key pass = new SecretKeySpec(keyValue, ALGO);\n    return pass;\n}\n}\n", "idx": 1147}
{"project": "cipher", "commit_id": "Snippet27785369_9952.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\",\"BC\");\n", "idx": 1148}
{"project": "cipher", "commit_id": "Snippet20466270_3086.java", "target": 0, "func": "import java.security.NoSuchAlgorithmException;\nimport javax.crypto.Cipher;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class AESEncoder {\n\n    private SecretKeySpec keyspec;\n    private Cipher cipher;\n    private String secretkey;\n\n    public AESEncoder(String secretkey) {\n        this.secretkey = secretkey;\n        keyspec = new SecretKeySpec(secretkey.getBytes(), 0, 16, \"AES\");\n\n//      keyspec=new SecretKeySpec(key, offset, len, secretkey);\n\n        try {\n            cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        }\n    }\n     public byte[] encrypt(String text) throws Exception {\n        if (text == null || text.length() == 0) {\n            throw new Exception(\"Empty string\");\n        }\n\n        int encrypted = 0;\n\n        byte[] bytenc = null;//new byte[32];\n        byte[] input = null;\n\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, keyspec);\n//            byte empty[]=padString(text).getBytes();\n//            encrypted = cipher.doFinal(padString(text).getBytes());\n//            encrypted=cipher.doFinal(padString(text).getBytes(), 0, 0, padString(text).getBytes(), 0);\n\n            input = padString(text).getBytes();\n            bytenc = new byte[input.length];\n            encrypted = cipher.doFinal(input, 0, input.length, bytenc, 0);\n\n            String str = new String(bytenc, 0, encrypted);\n//            encrypted=cipher.update(padString(text).getBytes(), 0, 0, 0, 0);\n//            System.out.println(\"Encrypted is:>>\" + str);\n//            bytenc=hexToBytes(String.valueOf(encrypted));\n        } catch (Exception e) {\n            throw new Exception(\"[encrypt] \" + e.getMessage());\n        }\n        return bytenc;\n    }\n\n\n    public String encrypt_hsm(String text) throws Exception {\n        if (text == null || text.length() == 0) {\n            throw new Exception(\"Empty string\");\n        }\n        String base64=null;\n        int encrypted = 0;\n\n        byte[] bytenc = null;//new byte[32];\n        byte[] input = null;\n\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, keyspec);\n//            byte empty[]=padString(text).getBytes();\n//            encrypted = cipher.doFinal(padString(text).getBytes());\n//            encrypted=cipher.doFinal(padString(text).getBytes(), 0, 0, padString(text).getBytes(), 0);\n\n            input = padString(text).getBytes();\n            bytenc = new byte[input.length];\n            encrypted = cipher.doFinal(input, 0, input.length, bytenc, 0);\n\n            String str = new String(bytenc, 0, encrypted);\n\n            base64 = Base64.encode(bytenc);\n\n//            encrypted=cipher.update(padString(text).getBytes(), 0, 0, 0, 0);\n//            System.out.println(\"Encrypted is:>>\" + str);\n//            bytenc=hexToBytes(String.valueOf(encrypted));\n\n\n        } catch (Exception e) {\n            throw new Exception(\"[encrypt] \" + e.getMessage());\n        }\n        return base64;\n    }\n\n    public byte[] decrypt(String code) throws Exception {\n        if (code == null || code.length() == 0) {\n            throw new Exception(\"Empty string\");\n        }\n        int decrypted = 0;\n\n        byte[] bytedec = null;\n        byte[] input = null;\n\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, keyspec);\n\n//          input=hexToBytes(code);\n            input = Base64ToBytes(code);\n            bytedec = new byte[input.length];\n            decrypted = cipher.doFinal(input, 0, input.length, bytedec, 0);\n\n            String str = new String(bytedec, 0, decrypted);\n//            System.out.println(\"Decrypted is:>>\" + str);\n\n        } catch (Exception e) {\n            throw new Exception(\"[decrypt] \" + e.getMessage());\n        }\n        return bytedec;\n    }\n\n    public static String bytesToHex(byte[] bsData) {\n        int nDataLen = bsData.length;\n        String sHex = \"\";\n        for (int nIter = 0; nIter < nDataLen; nIter++) {\n            int nValue = (bsData[nIter] + 256) % 256;\n            int nIndex1 = nValue >> 4;\n            sHex += Integer.toHexString(nIndex1);\n            int nIndex2 = nValue & 0x0f;\n            sHex += Integer.toHexString(nIndex2);\n        }\n        return sHex;\n    }\n\n    public static byte[] hexToBytes(String str) {\n        if (str == null) {\n            return null;\n        } else if (str.length() < 2) {\n            return null;\n        } else {\n            int len = str.length() / 2;\n            byte[] buffer = new byte[len];\n            for (int i = 0; i < len; i++) {\n                buffer[i] = (byte) Integer.parseInt(str.substring(i * 2, i * 2 + 2), 16);\n            }\n            return buffer;\n        }\n    }\n\n    private static String padString(String source) {\n        char paddingChar = ' ';\n        int size = 32;\n        int x = source.length() % size;\n        int padLength = size - x;\n\n        for (int i = 0; i < padLength; i++) {\n            source += paddingChar;\n        }\n\n//        System.out.println(\"====>Pad String:\" + source);\n        return source;\n    }\n\n    public void startApp() {\n    }\n\n    public void pauseApp() {\n    }\n\n    public void destroyApp(boolean unconditional) {\n    }\n\n    private byte[] Base64ToBytes(String code) {\n        code = code.replace('-', '+');\n        code = code.replace('_', '/');\n        code = code.replace(',', '=');\n        System.out.println(\"Final Base 64:\"+code);\n\n        byte[] aesString = Base64.decode(code);\n//        System.out.println(\"Base64 after decoding:\"+new String(aesString));\n        return aesString;\n    }\n}\n", "idx": 1149}
{"project": "cipher", "commit_id": "Snippet22561689_4917.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n", "idx": 1150}
{"project": "cipher", "commit_id": "Snippet34098587_16138.java", "target": 0, "func": "import java.util.Base64;    \nimport javax.crypto.Cipher;  \nimport javax.crypto.KeyGenerator;   \nimport javax.crypto.SecretKey;  \npublic class EncryptionDecryptionAES {  \n    static Cipher cipher;  \n\n    public static void main(String[] args) throws Exception {\n        /* \n         create key \n         If we need to generate a new key use a KeyGenerator\n         If we have existing plaintext key use a SecretKeyFactory\n        */ \n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n        keyGenerator.init(128); // block size is 128bits\n        SecretKey secretKey = keyGenerator.generateKey();\n\n        /*\n          Cipher Info\n          Algorithm : for the encryption of electronic data\n          mode of operation : to avoid repeated blocks encrypt to the same values.\n          padding: ensuring messages are the proper length necessary for certain ciphers \n          mode/padding are not used with stream cyphers.  \n         */\n        cipher = Cipher.getInstance(\"AES\"); //SunJCE provider AES algorithm, mode(optional) and padding schema(optional)  \n\n        String plainText = \"AES Symmetric Encryption Decryption\";\n        System.out.println(\"Plain Text Before Encryption: \" + plainText);\n\n        String encryptedText = encrypt(plainText, secretKey);\n        System.out.println(\"Encrypted Text After Encryption: \" + encryptedText);\n\n        String decryptedText = decrypt(encryptedText, secretKey);\n        System.out.println(\"Decrypted Text After Decryption: \" + decryptedText);\n    }\n\n    public static String encrypt(String plainText, SecretKey secretKey)\n            throws Exception {\n        byte[] plainTextByte = plainText.getBytes();\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] encryptedByte = cipher.doFinal(plainTextByte);\n        Base64.Encoder encoder = Base64.getEncoder();\n        String encryptedText = encoder.encodeToString(encryptedByte);\n        return encryptedText;\n    }\n\n    public static String decrypt(String encryptedText, SecretKey secretKey)\n            throws Exception {\n        Base64.Decoder decoder = Base64.getDecoder();\n        byte[] encryptedTextByte = decoder.decode(encryptedText);\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        byte[] decryptedByte = cipher.doFinal(encryptedTextByte);\n        String decryptedText = new String(decryptedByte);\n        return decryptedText;\n    }\n}\n", "idx": 1151}
{"project": "cipher", "commit_id": "Snippet46416541_28533.java", "target": 0, "func": " public String tulkkaa (String[] args) throws Exception {\n    //\n    // Check args and get plaintext\n    if (args.length !=1) {\n        System.err.println(\"Usage: java PrivateExample text\");\n        System.exit(1);\n    }\n    byte[] krypted = args[0].getBytes(\"UTF8\");\n    //\n    // Get a DES private key\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\n\n    // If you do not initialize the KeyGenerator, each provider supply a default initialization.\n    keyGen.init(56);\n    Key key = keyGen.generateKey();\n    //\n    // Creates the DES Cipher object (specifying the algorithm, mode, and padding).\n    Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    // Initializes the Cipher object.\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    // Decrypt the ciphertext using the same key\n    byte[] newPlainText = cipher.doFinal(krypted);\n", "idx": 1152}
{"project": "cipher", "commit_id": "Snippet15432917_38485.java", "target": 0, "func": "    Cipher cipher;\n    byte[] bytes = null;\n\n    try\n    {\n        cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, generateAESKey128b(key));\n        bytes = cipher.doFinal(input.getBytes(\"UTF-8\"));\n    }\n    catch (NoSuchAlgorithmException e)\n    {\n        e.printStackTrace();\n    }\n    catch (NoSuchPaddingException e)\n    {\n        e.printStackTrace();\n    }\n    catch (InvalidKeyException e)\n    {\n        e.printStackTrace();\n    }\n    catch (UnsupportedEncodingException e)\n    {\n        e.printStackTrace();\n    }\n    catch (IllegalBlockSizeException e)\n    {\n        e.printStackTrace();\n    }\n    catch (BadPaddingException e)\n    {\n        e.printStackTrace();\n    }\n", "idx": 1153}
{"project": "cipher", "commit_id": "Snippet19957052_2614.java", "target": 0, "func": "    private String decrypt (String encryptedText) {\n        byte[] clearText = null;\n        try {\n            SecretKeySpec ks = new SecretKeySpec(getKey(), \"AES\");\n            Cipher c = Cipher.getInstance(\"AES\");\n            c.init(Cipher.DECRYPT_MODE, ks);\n            clearText = c.doFinal(Base64.decode(encryptedText, Base64.DEFAULT));\n            return new String(clearText, \"UTF-8\");\n        } catch (Exception e) {\n            return null;\n        }\n    }\n", "idx": 1154}
{"project": "cipher", "commit_id": "Snippet32018895_14067.java", "target": 0, "func": "Cipher.getInstance(\"AES\");", "idx": 1155}
{"project": "cipher", "commit_id": "Snippet19378137_2195.java", "target": 0, "func": "Cipher cipher =  Cipher.getInstance(\"AES\", \"BC\");\n", "idx": 1156}
{"project": "cipher", "commit_id": "Snippet45503824_27571.java", "target": 0, "func": "public class CipherClient\n{\n    public static void main(String[] args) throws Exception \n    {\n        // -Generate a DES key.\n        KeyGenerator generator = KeyGenerator.getInstance(\"DES\");\n        generator.init(new SecureRandom());\n        Key key = generator.generateKey();\n\n        // -Store it in a file.\n        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\"KeyFile.xx\"));\n        out.writeObject(key);\n        out.close();\n\n        String message = \"The quick brown fox jumps over the lazy dog.\";\n        System.out.println(\"Message converted from Bytes = \" + new String(message.getBytes()));\n        System.out.println(\"Length = \" + message.getBytes().length);\n\n        String host = \"localhost\";\n        int port = 7999;\n        Socket s = new Socket(host, port);\n\n        // -Use the key to encrypt the message above and send it over socket s to the server.   \n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        CipherOutputStream cipherOut = new CipherOutputStream(s.getOutputStream(), cipher);\n        cipherOut.write(message.getBytes());\n        cipherOut.close();\n        s.close();\n    }\n}\n", "idx": 1157}
{"project": "cipher", "commit_id": "Snippet22561689_4893.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\n", "idx": 1158}
{"project": "cipher", "commit_id": "Snippet20227_29652.java", "target": 0, "func": "public class TripleDESTest {\n\n    public static void main(String[] args) {\n\n        String text = \"kyle boon\";\n\n        byte[] codedtext = new TripleDESTest().encrypt(text);\n        String decodedtext  = new TripleDESTest().decrypt(codedtext);\n\n        System.out.println(codedtext);\n        System.out.println(decodedtext);\n    }\n\n    public byte[] encrypt(String message) {\n        try {\n            final MessageDigest md = MessageDigest.getInstance(\"md5\");\n            final byte[] digestOfPassword = md.digest(\"HG58YZ3CR9\".getBytes(\"utf-8\"));\n            final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n            for (int j = 0,  k = 16; j < 8;)\n            {\n                keyBytes[k++] = keyBytes[j++];\n            }\n\n            final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n            final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n            final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n            final byte[] plainTextBytes = message.getBytes(\"utf-8\");\n            final byte[] cipherText = cipher.doFinal(plainTextBytes);\n            final String encodedCipherText = new sun.misc.BASE64Encoder().encode(cipherText);\n\n            return cipherText;    \n        }\n        catch (java.security.InvalidAlgorithmParameterException e) { System.out.println(\"Invalid Algorithm\"); }\n        catch (javax.crypto.NoSuchPaddingException e) { System.out.println(\"No Such Padding\"); }\n        catch (java.security.NoSuchAlgorithmException e) { System.out.println(\"No Such Algorithm\"); }\n        catch (java.security.InvalidKeyException e) { System.out.println(\"Invalid Key\"); }\n        catch (BadPaddingException e) { System.out.println(\"Invalid Key\");}\n        catch (IllegalBlockSizeException e) { System.out.println(\"Invalid Key\");}\n        catch (UnsupportedEncodingException e) { System.out.println(\"Invalid Key\");}\n\n        return null;\n    }\n\n    public String decrypt(byte[] message) {\n        try\n        {\n            final MessageDigest md = MessageDigest.getInstance(\"md5\");\n            final byte[] digestOfPassword = md.digest(\"HG58YZ3CR9\".getBytes(\"utf-8\"));\n            final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n            for (int j = 0,  k = 16; j < 8;)\n            {\n                keyBytes[k++] = keyBytes[j++];\n            }\n\n            final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n            final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n            final Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n            decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n            //final byte[] encData = new sun.misc.BASE64Decoder().decodeBuffer(message);\n            final byte[] plainText = decipher.doFinal(message);\n\n            return plainText.toString();            \n        }\n        catch (java.security.InvalidAlgorithmParameterException e) { System.out.println(\"Invalid Algorithm\"); }\n        catch (javax.crypto.NoSuchPaddingException e) { System.out.println(\"No Such Padding\"); }\n        catch (java.security.NoSuchAlgorithmException e) { System.out.println(\"No Such Algorithm\"); }\n        catch (java.security.InvalidKeyException e) { System.out.println(\"Invalid Key\"); }\n        catch (BadPaddingException e) { System.out.println(\"Invalid Key\");}\n        catch (IllegalBlockSizeException e) { System.out.println(\"Invalid Key\");}\n        catch (UnsupportedEncodingException e) { System.out.println(\"Invalid Key\");}     \n        catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n}\n", "idx": 1159}
{"project": "cipher", "commit_id": "Snippet27260435_9423.java", "target": 0, "func": "public String encrypt(String data) {\n\n    try {\n\n        SecretKeySpec KS = new SecretKeySpec(mKeyData, \"Blowfish\");\n\n        Cipher cipher = Cipher.getInstance(\"Blowfish/CBC/ZeroBytePadding\"); // PKCS5Padding\n        cipher.init(Cipher.ENCRYPT_MODE, KS, new IvParameterSpec(mIv));\n        return bytesToHex(cipher.doFinal(data.getBytes()));       \n\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidAlgorithmParameterException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 1160}
{"project": "cipher", "commit_id": "Snippet45054924_27178.java", "target": 0, "func": "public class Crypt {\n\n    public static void main(String[] args) {\n\n        try{\n            KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n            SecretKey myDesKey = keygenerator.generateKey();\n\n            Cipher desalgCipher;\n            desalgCipher = Cipher.getInstance(\"DES\");\n\n\n            byte[] text = \"test\".getBytes(\"UTF8\");\n\n\n            desalgCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n            byte[] textEncrypted = desalgCipher.doFinal(text);\n\n            String s = new String(textEncrypted);\n            System.out.println(s);\n\n            desalgCipher.init(Cipher.DECRYPT_MODE, myDesKey);\n            byte[] textDecrypted = desalgCipher.doFinal(textEncrypted);\n\n            s = new String(textDecrypted);\n            System.out.println(s);\n        }\n\n            catch(Exception e)\n            {\n                System.out.println(\"Error\");\n            }\n    }\n\n}\n", "idx": 1161}
{"project": "cipher", "commit_id": "Snippet43336577_25459.java", "target": 0, "func": "public static String decrypt(String strToDecrypt)\n{\n    char[] ch=strToDecrypt.toCharArray();\n\n    System.out.println(\"Test: \" + ch);\n    try\n    {\n\n        Cipher cipher2 = Cipher.getInstance(\"AES/ECB/NoPadding\");\n\n        cipher2.init(Cipher.DECRYPT_MODE, secretKey);\n\n        setDecryptedString(new String(cipher2.doFinal(Hex.decodeHex(ch))));            // Output as String eg: testingone\n\n\n    }\n    catch (Exception e)\n    {\n\n        System.out.println(\"Error while decrypting: \"+e.toString());\n    }\n    return null;\n}\n", "idx": 1162}
{"project": "cipher", "commit_id": "Snippet31533080_13676.java", "target": 0, "func": "final String strPassPhrase = \"EB7CB21AA6FB33D3B1FF14BBE7DB4962\"; //min 24 chars\n\n    SecretKeyFactory factory = SecretKeyFactory.getInstance(\"DESede\");\n    SecretKey key = factory.generateSecret(new DESedeKeySpec(strPassPhrase.getBytes()));\n    Cipher cipher = Cipher.getInstance(\"DESede\");\n\n    cipher.init(Cipher.DECRYPT_MODE, key);\n\n    String encrypted = \"3764b8140ae470bda73f7ebed3c33b0895f70c3497c85f39043345128a4bc3b3\";\n    String decrypted = new String(cipher.doFinal(DatatypeConverter.parseBase64Binary(encrypted)));\n    System.out.println(\"Text Decryted : \" + decrypted);\n", "idx": 1163}
{"project": "cipher", "commit_id": "Snippet12087288_36033.java", "target": 0, "func": "public static String crypt(String input, String key){\n            byte[] crypted = null;\n            try{\n                SecretKeySpec skey = new SecretKeySpec(org.apache.commons.codec.binary.Base64.decodeBase64(key), \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n                cipher.init(Cipher.ENCRYPT_MODE, skey);\n                crypted = cipher.doFinal(input.getBytes());\n            }catch(Exception e){\n            }\n           return org.apache.commons.codec.binary.Base64.encodeBase64String(crypted);\n        }\n", "idx": 1164}
{"project": "cipher", "commit_id": "Snippet19286076_2112.java", "target": 0, "func": "public static byte[] encryptAES(String message) throws Exception\n{\n    String secretKey = \"JohnIsAwesome!1!\";\n    SecretKeySpec key = new SecretKeySpec(secretKey.getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    return cipher.doFinal(message.getBytes());\n}\n", "idx": 1165}
{"project": "cipher", "commit_id": "Snippet41594726_23526.java", "target": 0, "func": "public String doDESEncryption(String key, String text) {\n        String encryptedInfo = \"\";\n        try {\n            byte[] theCph = null;\n            byte[] theKey = null;\n            byte[] theMsg = null;\n            theKey = hexToBytes(key);\n            theMsg = hexToBytes(text);\n            DESKeySpec ks = new DESKeySpec(theKey);\n            SecretKeyFactory kf = SecretKeyFactory.getInstance(\"DES\");\n            SecretKey ky = kf.generateSecret(ks);\n            Cipher cf = Cipher.getInstance(\"DES/ECB/NoPadding\");\n            cf.init(Cipher.ENCRYPT_MODE, ky);\n            theCph = cf.doFinal(theMsg);\n            encryptedInfo = bytesToHex(theCph);\n            System.out.println(\"Just the ePINBLOCK\"+encryptedInfo);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return encryptedInfo;\n    }\n", "idx": 1166}
{"project": "cipher", "commit_id": "Snippet38836798_20743.java", "target": 0, "func": "import android.util.Base64;\nimport android.util.Log;\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class AES {\n\n    static final String TAG = \"SymmetricAlgorithmAES\";\n\n    private SecretKeySpec secretKey;\n    private byte[] key;\n\n    private String decryptedString;\n    private String encryptedString;\n\n    //Sets the value of the key\n    public void setKey(String myKey) {\n\n        MessageDigest sha = null;\n        try {\n            key = myKey.getBytes(\"UTF-8\");\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n\n            key = Arrays.copyOf(key, 16);\n            secretKey = new SecretKeySpec(key, \"AES\");\n        } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            Log.e(TAG, \"Error in setting the key\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public SecretKeySpec getKey(){\n        return secretKey;\n    }\n\n    public String getDecryptedString() {\n        return decryptedString;\n    }\n\n    public void setDecryptedString(String decryptedString) {\n        this.decryptedString = decryptedString;\n    }\n\n    public String getEncryptedString() {\n        return encryptedString;\n    }\n\n    public void setEncryptedString(String encryptedString) {\n        this.encryptedString = encryptedString;\n    }\n\n    //Method for Encryption\n    public void encrypt(String strToEncrypt) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            byte[] encd = cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"));\n            byte[] cc =Base64.encode(encd,Base64.DEFAULT);\n            setEncryptedString(new String(cc));           \n        } catch (Exception e) {\n            Log.e(TAG, \"Error in Encryption\");\n        }\n    }\n\n    //Method for Decryption\n    public void decrypt(String strToDecrypt) {\n        byte[] decd = null;\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            decd = cipher.doFinal(strToDecrypt.getBytes(\"UTF-8\"));\n\n        } catch (Exception e) {\n            Log.e(TAG, \"Error in Decryption\" + decd);\n        }\n        setDecryptedString(decd.toString());\n    }\n}\n", "idx": 1167}
{"project": "cipher", "commit_id": "Snippet3831942_30896.java", "target": 0, "func": "public Cipher getCipher(int opMode) throws IOException {\n    Cipher cipher = null;\n\n    try {\n        cipher = Cipher.getInstance(\"AES\");\n    } catch (NoSuchAlgorithmException e) {\n        throw new MdmFatalInternalErrorException(\"Getting instance of cipher failed. Should never happen. BUG \", e);\n    } catch (NoSuchPaddingException e) {\n        throw new MdmFatalInternalErrorException(\"Getting instance of cipher failed. Should never happen. BUG \", e);\n    }\n    try {\n        cipher.init(opMode, readKey());\n    } catch (InvalidKeyException e) {\n        throw new MdmInvalidKeyException();\n    } catch (ClassNotFoundException e) {\n        throw new MdmInvalidKeyException();\n    } catch (NumberFormatException e) {\n        throw new MdmInvalidKeyException();\n    }\n    return cipher;\n}\n", "idx": 1168}
{"project": "cipher", "commit_id": "Snippet21994023_4420.java", "target": 0, "func": "Cipher.getInstance(\"DESede\");\n", "idx": 1169}
{"project": "cipher", "commit_id": "Snippet47428360_29404.java", "target": 0, "func": "public static String getDecryptedDataKey(String instr, String type) throws Exception {\n        String enc_key = ENC_KEY;   \n        if (type.equalsIgnoreCase(\"KEYDEC\")) {\n            instr = prop.getProperty(\"Key\");\n            enc_key = VTransactConstant.DATA_KEY_ENC_KEY;\n        }\n        try {\n            SecretKeySpec skeySpec = new SecretKeySpec(HexfromString(enc_key), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(2, skeySpec);\n            if (instr != null && !instr.equals(\"\")) {\n                byte encstr[] = cipher.doFinal(HexfromString(instr));\n                return new String(encstr);\n            } else {\n                return \"\";\n            }\n        } catch (BadPaddingException nse) {\n            log.doLog(LOGC.LTI, \"SecurityUtil\", \"getDecryptedString\", \"Exception  :\" + VTransactUti.getStackTrace(nse),\n                    \"\", \"\", \"\");\n            return \"\";\n        }\n    }\n", "idx": 1170}
{"project": "cipher", "commit_id": "Snippet16911632_220.java", "target": 0, "func": "public static void main(String[] args) throws NoSuchAlgorithmException, FileNotFoundException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {\n\n    // \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u043a\u043b\u044e\u0447\u0435\u0439\n    KeyGenerator keyGenS = KeyGenerator.getInstance(\"AES\");\n    keyGenS.init(128);\n    SecretKey sKey1 = keyGenS.generateKey();\n    SecretKey sKey2 = keyGenS.generateKey();\n    // \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u043a\u043b\u044e\u0447\u0435\u0439 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0444\u0430\u0439\u043b\n    String key1 = SecretKeyToString(sKey1);\n    String key2 = SecretKeyToString(sKey2);\n\n    spreader.write(fileName1, key1);\n    spreader.write(fileName2, key2);\n    spreader.write(fileNameS1, key1);\n    spreader.write(fileNameS2, key2);\n\n\n    // \u0427\u0442\u0435\u043d\u0438\u0435 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u043a\u043b\u044e\u0447\u0435\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0438 \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 \u0442\u0438\u043f SecretKey\n    key1 = spreader.read(fileName1);\n    System.out.println(\"\u0421\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 1\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \" +key1);\n\n\n    SecretKey seansKey1=getKeyInstance(key1);\n\n    key2 = spreader.read(fileName2);\n    System.out.println(\"\u0421\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 2\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \" +key2);\n\n    SecretKey seansKey2=getKeyInstance(key2);\n\n\n    //\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0445\n    Cipher aesCipher = Cipher.getInstance(\"AES\");\n    aesCipher.init(Cipher.ENCRYPT_MODE,seansKey1);\n\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n    keyGen.init(128);\n    SecretKey secretKey = keyGen.generateKey();\n\n    String stringsecretKey = SecretKeyToString(secretKey);\n    byte[] byteKey = stringsecretKey.getBytes();\n    byte[] byteCipherKey1 = aesCipher.doFinal(byteKey); \n    String encryptedKey = new BASE64Encoder().encode(byteCipherKey1);\n    System.out.println(\"\u0417\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u043a\u043b\u044e\u0447 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 1: \" +encryptedKey);\n\n\n\n\n\n    aesCipher = Cipher.getInstance(\"AES\");\n    aesCipher.init(Cipher.ENCRYPT_MODE,SeansKey2);\n\n\n     byteKey = etringsecretKey.getBytes();\n     byte[] byteCipherKey2 = aesCipher.doFinal(byteKey); \n     encryptedKey = new BASE64Encoder().encode(byteCipherKey2);\n    System.out.println(\"\u0417\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u043a\u043b\u044e\u0447 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 2: \" +encryptedKey);\n    spreader.write(fileNameEK2, encryptedKey);\n\n    //\u0427\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430\n    String text =spreader.read(fileName);\n    System.out.println(text);\n\n    // \u0417\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\n            aesCipher.init(Cipher.ENCRYPT_MODE,secretKey); // \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\n\n            byte[] byteText = text.getBytes();\n            byte[] byteCipherText = aesCipher.doFinal(byteText); \n            encryptedText = new BASE64Encoder().encode(byteCipherText);\n            System.out.println(\"\u0417\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442: \" +encryptedText);\n\n            spreader.write(fileNameOK, encryptedText);\n\n\n\n\n\n}\n", "idx": 1171}
{"project": "cipher", "commit_id": "Snippet22201511_4598.java", "target": 0, "func": "public void clckBtn(View v) {\n        try {\n            SecretKeySpec skeySpec = new SecretKeySpec(\n                    \"MyDifficultPassw\".getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n            byte[] encrypted = cipher.doFinal(\"tryToEncrypt\".getBytes());\n            System.out.println(toHex(encrypted));\n\n        } catch (Exception e) {\n            System.out.println(e.toString());\n        }\n\n    }\n\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2 * buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n    }\n", "idx": 1172}
{"project": "cipher", "commit_id": "Snippet31540927_13682.java", "target": 0, "func": "import java.io.BufferedReader;\nimport java.io.StringReader;\nimport java.security.KeyPair;\nimport java.security.PublicKey;\nimport java.security.Security;\nimport javax.crypto.Cipher;\nimport org.bouncycastle.openssl.PEMReader;\nimport android.util.Base64;\nimport android.util.Log;\n\npublic class RsaEncryption {\n\nprivate String publicKey;\n\npublic RsaEncryption(String publicKey)\n{\n    this.publicKey = publicKey;\n\n}\n\n\n/*\n * Function to encrypt the data.\n *\n */\n\npublic String encrypt( String data ) throws Exception\n{\n\n\n\n    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n    Cipher cipher = Cipher.getInstance(\"RSA/None/OAEPWithSHA1AndMGF1Padding\", \"BC\");\n\n\n    byte[] keyBytes =   Base64.decode( this.publicKey, 0 );\n\n    PublicKey publickey       = strToPublicKey(new String(keyBytes));\n    cipher.init( Cipher.ENCRYPT_MODE , publickey );\n\n    // Base 64 encode the encrypted data\n    byte[] encryptedBytes = Base64.encode( cipher.doFinal(data.getBytes()), 0 );\n\n    return new String(encryptedBytes);\n\n\n}\n\n\npublic static PublicKey strToPublicKey(String s)\n{\n\n    PublicKey pbKey = null;\n    try {\n\n        BufferedReader br   = new BufferedReader( new StringReader(s) );\n        PEMReader pr        = new PEMReader(br);\n        Object obj = pr.readObject();\n\n        if( obj instanceof PublicKey )\n        {\n            pbKey = (PublicKey) pr.readObject();\n        }\n        else if( obj instanceof KeyPair )\n        {\n            KeyPair kp = (KeyPair) pr.readObject();\n            pbKey = kp.getPublic();\n        }\n        pr.close();\n\n    }\n    catch( Exception e )\n    {\n        Log.d(\"CIPHER\", e.getMessage() );\n    }\n\n    return pbKey;\n}\n\n}\n", "idx": 1173}
{"project": "cipher", "commit_id": "Snippet37995801_20027.java", "target": 0, "func": "package cipher;\n\nimport java.io.*;\nimport java.util.Base64;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Ciphera\n{\n    private SecretKey key;\n    private Cipher enc;\n    private Cipher dec;\n    public void initialize()\n    {\n        try\n        {\n            File keyf = new File(\"key.key\");\n            FileInputStream fread = new FileInputStream(keyf);\n            byte[] enckey = new byte[(int)keyf.length()];\n            fread.read(enckey);\n            fread.close();\n            key = new SecretKeySpec(enckey, \"AES\");\n\n\n            enc = Cipher.getInstance(\"AES\");\n            enc.init(Cipher.ENCRYPT_MODE, key);\n            dec = Cipher.getInstance(\"AES\");\n            dec.init(Cipher.DECRYPT_MODE, key);\n        }\n        catch (Exception e)\n        {\n        }\n    }\n\n    //Encoder\n    public String encode(String str)\n    {\n        String decr = \"\";\n        try\n        {\n            byte[] encr = enc.doFinal(str.getBytes());\n            decr = Base64.getEncoder().encodeToString(encr);\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n        return decr;\n    }\n\n    //Decoder\n    public String decode(String str)\n    {\n        String decr = \"\";\n        try\n        {\n            byte[] temp = Base64.getDecoder().decode(str);\n            temp = dec.doFinal(temp);\n            for(int i = 0; i < temp.length; i++)\n            {\n                decr += (char)temp[i];\n            }\n        }\n        catch(Exception e)\n        {\n            e.printStackTrace();\n        }\n        return decr;\n    }\n}\n", "idx": 1174}
{"project": "cipher", "commit_id": "Snippet38828807_19698.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/PKCS5Padding\");", "idx": 1175}
{"project": "cipher", "commit_id": "Snippet5344534_31602.java", "target": 0, "func": "    public static void encryptFile(String path, byte[] key) throws Exception {\n\n    Cipher c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    SecretKeySpec k = new SecretKeySpec(key, \"AES\");\n    c.init(Cipher.ENCRYPT_MODE, k);\n    RandomAccessFile raf = new RandomAccessFile(path, \"rw\");\n\n    byte[] buf = new byte[128];\n    int bytesRead = 0;\n    int totalBytes = 0;\n    byte[] output;\n    while ((bytesRead = raf.read(buf)) >= 0) {\n        output = c.update(buf, 0, bytesRead);\n        raf.seek(totalBytes);\n        raf.write(output);\n        totalBytes += output.length;\n        raf.seek(totalBytes+16);\n    }\n    output = c.doFinal();\n    raf.seek(totalBytes);\n    raf.write(output);\n    raf.getFD().sync();\n    raf.close();\n\n}\n", "idx": 1176}
{"project": "cipher", "commit_id": "Snippet27898008_10050.java", "target": 0, "func": " public class decryption {\n   private static Cipher encrypt;\n\nprivate static Cipher decrypt;\n\n\nprivate static final byte[] initialization_vector = { 22, 33, 11, 44, 55, 99, 66, 77 };\n\n\n\n\n/**\n * @param args the command line arguments\n */\npublic static void main(String[] args) {\n    // TODO code application logic here\n\n\n    String encryptedFile = \"D:/ashok/aso.txt\";\n\n    String decryptedFile = \"D:/ashok/amii.txt\";\n\n    try {\n\n\n\n        SecretKey secret_key = KeyGenerator.getInstance(\"DES\")\n\n                .generateKey();\n\n        AlgorithmParameterSpec alogrithm_specs = new IvParameterSpec(\n\n                initialization_vector);\n          // set encryption mode ...\n\n        // set decryption mode\n\n        decrypt = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        decrypt.init(Cipher.DECRYPT_MODE, secret_key, alogrithm_specs);\n\n        // encrypt file\n\n    // decrypt file\n\n      decrypt(new FileInputStream(encryptedFile), new FileOutputStream(\n\n                decryptedFile));\n\n        System.out.println(\"End of Encryption/Decryption procedure!\");\n\n\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException\n\n            | InvalidKeyException | InvalidAlgorithmParameterException\n\n            | IOException e) {\n\n        e.printStackTrace();\n\n    }\n\n}\n\n\n\nprivate static void decrypt(InputStream input, OutputStream output)\n\n        throws IOException {\n\n\n\n    input = new CipherInputStream(input, decrypt);\n\n    writeBytes(input, output);\n\n}\n\n\n\nprivate static void writeBytes(InputStream input, OutputStream output)\n\n        throws IOException {\n\n    byte[] writeBuffer = new byte[512];\n\n   int readBytes = 0;\n\n\n\n    while ((readBytes = input.read(writeBuffer)) >= 0) {\n\n        output.write(writeBuffer, 0, readBytes);\n\n     }\n\n\n\n     output.close();\n\n     input.close();\n\n   }\n\n }\n", "idx": 1177}
{"project": "cipher", "commit_id": "Snippet35726198_17589.java", "target": 0, "func": "import java.security.MessageDigest;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Base64;\n\npublic class AESEncryption {\n\n    public static void main(String[] args) {\n        try {\n            String key = \"AsKUMDPsr7dfuk6fxgpfRdwm6de+MArf4SdAds9aq\";\n            byte[] hashedKey = MessageDigest.getInstance(\"SHA1\").digest(key.getBytes(\"UTF-8\"));\n            SecretKeySpec keySpec = new SecretKeySpec(hashedKey, 2, 16, \"AES\"); // don't know how to port this to nodejs\n\n            String plainText = \"test123\";\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher1.init(1, keySpec);\n            System.out.println(Base64.encodeBase64String(cipher.doFinal(plainText.getBytes(\"UTF-8\"))));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 1178}
{"project": "cipher", "commit_id": "Snippet28944165_11023.java", "target": 0, "func": "package cat.copernic.simetriccd;\n\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\n\nclass symetric{\n\n    public static String byteArrayToHexString(byte[] b){ \n        return DatatypeConverter.printHexBinary(b);\n    }   \n\n    public static byte[] hexToByteArray(String b){\n        return DatatypeConverter.parseHexBinary(b);\n    }\n\n    static SecretKey genKey(String text) {    \n        SecretKey sKey = null;  \n        int keySize = 256;      \n        try {\n            byte[] data = text.getBytes(\"UTF-8\");\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = md.digest(data);\n            byte[] key = Arrays.copyOf(hash, keySize/8);\n            sKey = new SecretKeySpec(key, \"AES\"); \n        } catch (Exception ex) {\n            System.err.println(\"Error generant la clau\");  \n        }\n\n        return sKey;   \n    }\n\n    static String encryptData(String password, String data) {\n        byte[] encryptedData = null;    \n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, genKey(password));\n            encryptedData =  cipher.doFinal(data.getBytes());\n        } catch (Exception  ex) {  \n            System.err.println(\"Error xifrant les dades\");          \n        } \n\n        return byteArrayToHexString(encryptedData);\n    }\n\n    static String decryptData(String password, String data) throws UnsupportedEncodingException {\n        byte[] decryptedData = null;    \n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, genKey(password));\n            decryptedData =  cipher.doFinal(hexToByteArray(data));\n        } catch (Exception  ex) {  \n            System.err.println(\"Error desxifrant les dades\");          \n        } \n\n        return new String(decryptedData, \"UTF-8\");\n    }\n\n}\n\npublic class Main { \n\n    public static void main(String[] args) throws UnsupportedEncodingException {\n\n        //controlar numero de parametros que se pasan\n        if(args.length <= 1 || args.length > 3 || args.length == 2){\n            System.out.println(\"java Main -mode=encrypt|decrypt <message> <key>\");\n            return;\n        }\n\n        try {\n\n            //sacamos los valores de los argumentos\n            String mode = args[0].split(\"=\")[1].toLowerCase();\n            String mensage = args[1];\n            String key = args[2];\n\n            if(mode.equals(\"encrypt\") || mode.equals(\"decrypt\")){\n                switch (mode) {\n                case \"encrypt\":\n                    //System.out.println(\"encrypt\");\n                    System.out.println(\"mensaje encriptado= \" + symetric.encryptData(key, mensage));\n                    break;\n\n                case \"decrypt\":\n                    //System.out.println(\"decrypt\");\n                    System.out.println(\"mensaje desencriptado= \" + symetric.decryptData(key, mensage));\n                    break;\n\n                default:\n                    break;\n                }\n            }else {\n                System.out.println(\"Solo coje valores encrypt/ENCRYPT o decrypt/DECRYPT\");\n            }\n\n        } catch (Exception e) {\n            System.out.println(\"Error en la definicion de los atributos\");\n        }\n    }\n}\n", "idx": 1179}
{"project": "cipher", "commit_id": "Snippet5596994_31711.java", "target": 0, "func": "     public static void main(String[] args) throws Exception {\n        //Encryption\n        AES encr = new AES();   \n        encr.setKey(\"KEY\");\n        encr.setSalt(\"SALT\");\n        encr.setup();\n        String message = \"This is just an example\";\n        System.out.println(\"Message : \" + message);\n\n\n\n        byte[] code = encr.encrypt(message);\n        System.out.println(\"Encrypted Strinng : \"+ new String(code, \"UTF-8\"));\n\n        //Decryption\n        AES dec = new AES();\n        dec.setKey(\"INCORRECT\"); //<--- incorrect \n        dec.setSalt(\"SALT\");\n        dec.setup();\n\n        System.out.println(dec.decryptString(code));\n    }\n\n\n\n\n        public synchronized  void setKey(String key) throws UnsupportedEncodingException {\n        this.key = key.getBytes(\"UTF-8\");\n        isPasswordAlreadySet = true;\n    }\n\n\n    public synchronized  void setSalt(String salt) throws UnsupportedEncodingException {\n        this.salt = salt.getBytes(\"UTF-8\");\n    }\n\n    public synchronized  void setup() throws Exception {\n    MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n    digest.update(key);\n    digest.update(salt);\n    byte[] raw = digest.digest();\n\n    skeySpec = new SecretKeySpec(raw, \"AES\");\n    cipher = Cipher.getInstance(\"AES\");\n    }  \n\npublic synchronized byte[] encrypt(byte[] klartext) throws Exception {\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n    byte[] encrypted = cipher.doFinal(klartext);\n\n    return encrypted;\n    }\n\n    public synchronized byte[] encrypt(String klartext) throws Exception{\n    return encrypt(klartext.getBytes(\"UTF-8\")); \n    }\n\n\n\n\n\n\n     public synchronized byte[] decrypt(byte[] code) throws Exception {\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] original = cipher.doFinal(code);\n    return original;\n    }\n\n    public synchronized double decryptDouble(byte[] code) throws Exception {\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] original = cipher.doFinal(code);\n    return doubleFromBytes( original);\n    }\n", "idx": 1180}
{"project": "cipher", "commit_id": "Snippet27916829_10084.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\nKeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\nSecretKey secKey = (SecretKey) keyGen.generateKey();\nSecretKey secKey1 = (SecretKey) keyGen1.generateKey();\n\nbyte[] stringKey=secKey.getEncoded();\n\ncipher.init(Cipher.ENCRYPT_MODE, secKey1);\nbyte[] DykeyBytes = cipher.doFinal(stringKey);\n\nStringBuffer sbselect2=new StringBuffer();\nsbselect2.append(\"SELECT keylock FROM \");\nsbselect2.append(UserConstants.USER_DETAILS_TABLE_NAME1);\nsbselect2.append(\" where Username='\" + un + \"'\");\nps2=conn.prepareStatement(sbselect2.toString());\nResultSet rs1 =ps2.executeQuery();\nrs1.next();\nString Enkey = rs1.getString(\"keylock\");\n\nSystem.out.println(\"Encrypted+Encoded key from current user \"+Enkey);\nrs1.close();\n\n//decrypting the DB stored Key\nCipher cipher2 = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\ncipher2.init(Cipher.DECRYPT_MODE, singlekey );\nbyte[] dynamicKey = Enkey.getBytes(\"UTF8\");\n// below is where the error points  to at user.dao.UserDao.isRegisteredUser(UserDao.java:313)\nbyte[] decryptedBytes = cipher2.doFinal(dynamicKey);\n\nObject DeKey = new String(decryptedBytes);//under check\nSecretKeySpec key = new SecretKeySpec(decryptedBytes, \"AES\");\n", "idx": 1181}
{"project": "cipher", "commit_id": "Snippet20431842_3074.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.Cipher; \nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\npublic class Encrypt_Decrypt {\nprivate static final String ALGORITHM = \"AES\";\nprivate static final byte[] keyValue = \n    new byte[] { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G' };\nprivate static final String UNICODE_FORMAT  = \"UTF8\";\n\npublic static String encrypt(String valueToEnc) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGORITHM);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encValue = c.doFinal(valueToEnc.getBytes(UNICODE_FORMAT));\n    String encryptedValue = new BASE64Encoder().encode(encValue);\n    return encryptedValue;\n}\n\nprivate static Key generateKey() throws Exception {\n    byte[] keyAsBytes;\n    //keyAsBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n    Key key = new SecretKeySpec(keyValue, ALGORITHM);\n    return key;\n}\n\npublic static String decrypt(String encryptedValue) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGORITHM);\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue,\"UTF8\");\n    return decryptedValue;\n}\n}\n", "idx": 1182}
{"project": "cipher", "commit_id": "Snippet7389420_32714.java", "target": 0, "func": "        key = KeyGenerator.getInstance(algorithm).generateKey();\n        cipher = Cipher.getInstance(\"DESede\");\n        messageSource.getMessage(\"encryption.algorithm\",null,localeUtil.getLocale());\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] outputBytes = cipher.doFinal(input.getBytes());\n", "idx": 1183}
{"project": "cipher", "commit_id": "Snippet22607402_5001.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DES\");\n", "idx": 1184}
{"project": "cipher", "commit_id": "Snippet27260567_9429.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"Blowfish/CBC/ZeroBytePadding\");\n", "idx": 1185}
{"project": "cipher", "commit_id": "Snippet4580982_31194.java", "target": 0, "func": " public String decrypt(String message, SecretKey skey) {\n\n    byte[] raw = skey.getEncoded();\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    // Instantiate the cipher\n    Cipher cipher;\n\n    byte[] original = null;\n    try {\n        cipher = Cipher.getInstance(\"AES\");\n\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        System.out.println(\"Original string: \"\n                + message);\n        original = cipher.doFinal(message.trim().getBytes());  //here where I got the exception\n        String originalString = new String(original);\n       }\n //catches\n", "idx": 1186}
{"project": "cipher", "commit_id": "Snippet40065197_21973.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\npublic class MainClass {\n\n    public static void main(String[] args) {\n\n        String l = \"0e329232ea6d0d73\";\n\n        byte[] a = DatatypeConverter.parseHexBinary(l);\n\n        try{\n            DESKeySpec dks = new DESKeySpec(a);\n            SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n            SecretKey sk = skf.generateSecret(dks);\n        Cipher c = Cipher.getInstance(\"DES\");\n        c.init(Cipher.ENCRYPT_MODE, sk);\n        String M = \"8787878787878787\";\n        byte[] b = c.doFinal(M.getBytes());\n\n        System.out.println(new String(b));\n        c.init(Cipher.DECRYPT_MODE, sk);\n        System.out.println(new String(c.doFinal(b)));\n        }\n        catch(Exception e)\n\n        {\n            System.out.println(e.getMessage());\n        }   \n    }\n\n}\n", "idx": 1187}
{"project": "cipher", "commit_id": "Snippet2816218_30507.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.InvalidParameterSpecException;\nimport java.security.spec.KeySpec;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class Main \n{\n    public static void main(String[] args)\n    {\n        String pass = \"this is the pass\";\n        char[] pw = new char[pass.length()];\n        for(int k=0; k<pass.length();++k)\n        {\n            pw[k] = pass.charAt(k); \n        }\n        try {\n            byte[] q = encrypt(pw,\"asdf\".getBytes(),\"der text\");\n            System.out.println(new String(q));\n        } catch (InvalidKeyException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (InvalidKeySpecException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (InvalidParameterSpecException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    }\n\n    public static SecretKey getSecretKey(char[] password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException{\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        // NOTE: last argument is the key length, and it is 256\n        KeySpec spec = new PBEKeySpec(password, salt, 1024, 256);\n        SecretKey tmp = factory.generateSecret(spec);\n        SecretKey secret = new SecretKeySpec(tmp.getEncoded(), \"AES\");\n        return(secret);\n    }\n\n\n    public static byte[] encrypt(char[] password, byte[] salt, String text) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidParameterSpecException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException{\n        SecretKey secret = getSecretKey(password, salt);\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        // NOTE: This is where the Exception is being thrown\n        cipher.init(Cipher.ENCRYPT_MODE, secret);\n        byte[] ciphertext = cipher.doFinal(text.getBytes(\"UTF-8\"));\n        return(ciphertext);\n    }\n}\n", "idx": 1188}
{"project": "cipher", "commit_id": "Snippet1962852_30171.java", "target": 0, "func": "import java.io.*;\nimport java.security.*;\nimport java.util.ArrayList;\nimport javax.crypto.*;\n\npublic class Checker {\n    private ArrayList<String> usersList = new ArrayList<String>();\n    private ArrayList<String> passwordList = new ArrayList<String>();\n    private Cipher cipher = null;\n    private KeyGenerator keyGen = null;\n    private Key key = null;\n    private PrintStream output = System.out;\n    private FileOutputStream fos = null;\n    Checker() {\n        try {\n            cipher = Cipher.getInstance(\"AES\");\n            keyGen = KeyGenerator.getInstance(\"AES\");\n            key = keyGen.generateKey();\n            output = new PrintStream(new FileOutputStream(\"data.txt\"), true);\n            fos = new FileOutputStream(new File(\"data.txt\"));\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void check() {\n        try {\n            CipherInputStream cipherIn = new CipherInputStream(new FileInputStream(new File(\"data.txt\")), cipher);\n            cipher.init(Cipher.DECRYPT_MODE, key);\n\n            int i; \n            while((i = cipherIn.read()) != -1){\n                fos.write(i);\n            }\n            output.close();\n        } catch (FileNotFoundException e) {\n            System.err.println(\"filepath not found!\");\n        } catch (IOException e) {\n            System.err.println(\"IOException: \" + e);\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public void add(String user, String password) {\n        if ( !(usersList.contains(user) || passwordList.contains(password))) {\n            if(usersList.isEmpty() || passwordList.isEmpty()) {\n                usersList.clear();\n                passwordList.clear();\n                usersList.add(user);\n                passwordList.add(password);\n            } else {\n                usersList.add(usersList.size(), user);\n                passwordList.add(usersList.size() - 1, password);\n            }\n        }\n    }\n\n    public void display() {\n        System.out.println(usersList);\n        System.out.println(passwordList);\n    }\n\n    public void save() {\n        try {\n            for (int x = 0; x < usersList.size(); x++) {\n                output.print(usersList.get(x));\n                output.print(\"|\");\n                output.println(passwordList.get(x));\n            }\n            CipherInputStream cipherIn = new CipherInputStream(new FileInputStream(new File(\"data.txt\")), cipher);\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            int i; \n            while ((i = cipherIn.read()) != -1) {\n                fos.write(i);\n            }\n\n            output.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\npublic class CheckerTest {\n    public static void main(String[] args) {\n        Checker checker = new Checker();\n        checker.add(\"peter\", \"12345\");\n        checker.add(\"mike\", \"67890\");\n        checker.display();\n        checker.save();\n        checker.check();\n    }\n}\n", "idx": 1189}
{"project": "cipher", "commit_id": "Snippet4560461_31182.java", "target": 0, "func": "public String Encrypt(String strPlainText) throws Exception, NoSuchProviderException,\n        NoSuchPaddingException {\n    byte[] input = strPlainText.getBytes();\n    byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,\n            0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };\n\n    SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n    // encryption pass\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n\n    byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n    int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n    ctLength += cipher.doFinal(cipherText, ctLength);\n\n    return new String(cipherText, \"US-ASCII\");\n}\n\npublic String Decrypt(String strCipherText) throws Exception,\n        NoSuchProviderException, NoSuchPaddingException {\n    byte[] cipherText = strCipherText.getBytes(\"US-ASCII\");\n    int ctLength = cipherText.length;\n    byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,\n            0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };\n\n    SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n    // decryption pass\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] plainText = new byte[cipher.getOutputSize(ctLength)];\n    int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);\n    ptLength += cipher.doFinal(plainText, ptLength);\n\n    return new String(plainText);\n}\n", "idx": 1190}
{"project": "cipher", "commit_id": "Snippet43276850_25413.java", "target": 0, "func": " public String _encrypt(String message) throws Exception {\n MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n byte[] digestOfPassword = md.digest(secretKey.getBytes(\"utf-8\"));\n byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n System.out.println(bytesToHex(keyBytes));\n\n SecretKey key = new SecretKeySpec(keyBytes, \"TripleDES\");\n Cipher cipher = Cipher.getInstance(\"TripleDES\");\n cipher.init(Cipher.ENCRYPT_MODE,key);\n byte[] plainTextBytes = message.getBytes(\"utf-8\");\n byte[] buf = cipher.doFinal(plainTextBytes);\n\n System.out.println(bytesToHex(buf));\n\n\n\n byte [] base64Bytes = Base64.encodeBase64(buf);\n String base64EncryptedString = new String(base64Bytes);\n\n return base64EncryptedString;\n}\n\n public static String bytesToHex(byte[] in) {\n final StringBuilder builder = new StringBuilder();\n for(byte b : in) {\n     builder.append(String.format(\"%02x\", b));\n }\n return builder.toString();\n }\n\n\n public String _decrypt(String encryptedText) throws Exception {\n\n byte[] message = Base64.decodeBase64(encryptedText.getBytes(\"utf-8\"));\n\nMessageDigest md = MessageDigest.getInstance(\"SHA-1\");\nbyte[] digestOfPassword = md.digest(secretKey.getBytes(\"utf-8\"));\nbyte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\nSecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n\nCipher decipher = Cipher.getInstance(\"DESede\");\ndecipher.init(Cipher.DECRYPT_MODE, key);\n\nbyte[] plainText = decipher.doFinal(message);\n\nreturn new String(plainText, \"UTF-8\");\n}\n", "idx": 1191}
{"project": "cipher", "commit_id": "Snippet30389842_12545.java", "target": 0, "func": " public static String encrypt(String value) {\n\n    if(value == null){\n        return value;\n    }\n    // SALT is your secret key\n    Key key = new SecretKeySpec(SALT.getBytes(), \"AES\");\n    try {\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        return Base64.encodeBase64String(cipher.doFinal(value.getBytes()));\n    } catch (Exception exception) {\n        throw new RuntimeException(exception);\n    }\n}\n\n   public static String decrypt(String value) {\n\n    if(value == null){\n        return value;\n    }\n    // SALT is your secret key\n    Key key = new SecretKeySpec(SALT.getBytes(), \"AES\");\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        return new String(cipher.doFinal(Base64.decodeBase64(value)));\n    } catch (Exception exception) {\n        throw new RuntimeException(exception);\n    }\n}\n", "idx": 1192}
{"project": "cipher", "commit_id": "Snippet21105156_3689.java", "target": 0, "func": "public class myDesCbc2 {\n\n    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException, IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n\nJFrame frame = null;\nJFileChooser fChoose = new JFileChooser(System.getProperty(\"user.home\"));\nint returnVal = fChoose.showOpenDialog(frame);\nFile myFile = fChoose.getSelectedFile();\n\n//Read file and store to String line\nFileInputStream fis = new FileInputStream(myFile);\nBufferedReader stream = new BufferedReader(new InputStreamReader(fis, \"ISO-8859-1\"));\nString file;\nwhile ((file = stream.readLine()) != null) {\n\n    JOptionPane.showOptionDialog(\n            null, \"Generating a 56-bit DES key...\", \"Processing...\", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{}, null);\n    // Create an 8-byte initialization vector\n    SecureRandom sr = new SecureRandom();\n    byte[] iv = new byte[8];\n    sr.nextBytes(iv);\n    IvParameterSpec IV = new IvParameterSpec(iv);\n\n    // Create a 56-bit DES key\n    KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n\n    // Initialize with keysize\n    kg.init(56);\n    Key mykey = kg.generateKey();\n\n    JOptionPane.showOptionDialog(\n            null, \"Your key has been generated!\", \"Processing...\", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{}, null);\n\n    // Create a cipher object and use the generated key to initialize it\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n    cipher.init(Cipher.ENCRYPT_MODE, mykey, IV);\n\n    byte[] plaintext = file.getBytes(\"UTF8\");\n\n    // Encrypt the text\n    byte[] ciphertext = cipher.doFinal(plaintext);\n\n   JOptionPane.showMessageDialog(null,\"\\n\\nCiphertext: \");\n    for (int i = 0; i < ciphertext.length; i++) {\n\n        if (chkEight(i)) {\n            System.out.print(\"\\n\");\n        }\n        JOptionPane.showMessageDialog(null,ciphertext[i] + \" \");\n    }\n}\n}\n}\n", "idx": 1193}
{"project": "cipher", "commit_id": "Snippet34007611_16078.java", "target": 0, "func": "public class KeywordsCipher {\n\nprivate static final String PADDING = \"DESede/ECB/NoPadding\";\nprivate static final String UTF_F8 = \"UTF-8\";\nprivate static final String DE_SEDE = \"DESede\";\nprivate String secretKey;\n\n{...}\n\npublic String encrypt(String message, String secretKey) {\n\n    byte[] cipherText = null;\n\n    try {\n        final byte[] secretBase64Key = Base64.decodeBase64(secretKey);\n        final SecretKey key = new SecretKeySpec(secretBase64Key, DE_SEDE);\n        final Cipher cipher = Cipher.getInstance(PADDING);\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        final byte[] plainTextBytes = message.getBytes();\n        cipherText = cipher.doFinal(plainTextBytes);\n    } catch (NoSuchAlgorithmException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException | NoSuchPaddingException e) {\n        throw new CipherException(\"Problem with encryption occured\");\n    }\n\n    return Hex.encodeHexString(cipherText);\n}\n\npublic CipherKeywordModel decrypt(String keyToDecrypt, String secretKey) {\n\n    try {\n        byte[] message = DatatypeConverter.parseHexBinary(keyToDecrypt);\n        final byte[] secretBase64Key = Base64.decodeBase64(secretKey);\n        final SecretKey key = new SecretKeySpec(secretBase64Key, DE_SEDE);\n        final Cipher decipher = Cipher.getInstance(PADDING);\n        decipher.init(Cipher.DECRYPT_MODE, key);\n        final byte[] plainText = decipher.doFinal(message);\n        String decryptedText = new String(plainText, UTF_F8);\n    } catch (UnsupportedEncodingException | NoSuchAlgorithmException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException | NoSuchPaddingException e) {\n        throw new CipherException(\"Problem with encryption occured\");\n    }\n    return decryptedText;\n}\n", "idx": 1194}
{"project": "cipher", "commit_id": "Snippet44907380_27017.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\n", "idx": 1195}
{"project": "cipher", "commit_id": "Snippet44431294_26482.java", "target": 0, "func": "byte[] key = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\nSecretKey keySpec = new SecretKeySpec(key, \"Blowfish\");\nCipher cipher = Cipher.getInstance(\"Blowfish\");\ncipher.init(Cipher.ENCRYPT_MODE, keySpec);\n", "idx": 1196}
{"project": "cipher", "commit_id": "Snippet45057077_27184.java", "target": 0, "func": "public static void encrypt(Path inputFile, OutputStream output) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException {\n    // init cipher\n    KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n    SecretKey myDesKey = keygenerator.generateKey();\n    Cipher desalgCipher;\n    desalgCipher = Cipher.getInstance(\"DES\");\n    desalgCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n\n\n    try(InputStream is = Files.newInputStream(inputFile);        // get an IS on your file\n    CipherInputStream cipherIS = new CipherInputStream(is, desalgCipher)){   // wraps input Stream with cipher\n        copyStreams(cipherIS, output);  // copyStream is let to the implementer's choice.\n    }\n}\n", "idx": 1197}
{"project": "cipher", "commit_id": "Snippet27799626_9976.java", "target": 0, "func": "public static void encrypt(String key, InputStream is, OutputStream os) throws Exception {\n    encryptOrDecrypt(key, Cipher.ENCRYPT_MODE, is, os);\n}\n\npublic static void decrypt(String key, InputStream is, OutputStream os) throws Exception {\n    encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);\n}\n\npublic static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Exception {\n\n    DESKeySpec dks = new DESKeySpec(key.getBytes());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey desKey = skf.generateSecret(dks);\n    Cipher cipher = Cipher.getInstance(\"DES\"); \n\n    if (mode == Cipher.ENCRYPT_MODE) {\n        cipher.init(Cipher.ENCRYPT_MODE, desKey);\n        CipherInputStream cis = new CipherInputStream(is, cipher);\n        makeFile(cis, os);\n    } else if (mode == Cipher.DECRYPT_MODE) {\n        cipher.init(Cipher.DECRYPT_MODE, desKey);\n        CipherOutputStream cos = new CipherOutputStream(os, cipher);\n        makeFile(is, cos);\n    }\n}\n\npublic static void makeFile(InputStream is, OutputStream os) throws IOException {\n    byte[] bytes = new byte[64];\n    int numBytes;\n    while ((numBytes = is.read(bytes)) != -1) {\n        os.write(bytes, 0, numBytes);\n    }\n    os.flush();\n    os.close();\n    is.close();\n}\n", "idx": 1198}
{"project": "cipher", "commit_id": "Snippet34726830_16728.java", "target": 0, "func": "public class Encryptor {\n  File file;\n  SecretKeySpec secretKeySpec;\n  public void setFile(String filePath) throws Exception {\n    this.file = new File(filePath);\n    if(!file.isFile()){\n      throw new Exception(\"The file you choosed is not valid\");\n    }\n  }\n  public void setKey(String keyword){\n    try {\n      MessageDigest sha = MessageDigest.getInstance(\"SHA-256\");\n      sha.update(keyword.getBytes(\"UTF-8\"));\n      byte[] key = sha.digest();\n      secretKeySpec = new SecretKeySpec(key, \"AES\");\n    } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {\n      e.printStackTrace();\n    }\n  }\n  public void encrypt(){\n    byte[] bFile = new byte[(int) file.length()];\n    try {\n      //adding portocol bytes to the file bytes\n      //String portcol = \"encryptor portocol\";\n      //byte[] decPortocol = portcol.getBytes();\n\n      //convert file into array of bytes\n      BufferedInputStream bufferedInputStream = new BufferedInputStream(new FileInputStream(file));\n      bufferedInputStream.read(bFile);\n      bufferedInputStream.close();\n\n      ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n      //outputStream.write(decPortocol);\n      outputStream.write(bFile);\n\n      byte[] cryptedFileBytes = outputStream.toByteArray();\n      //Cipher and encrypting\n      Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n      cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n      byte[] encryptedBytes = cipher.doFinal(cryptedFileBytes);\n\n      //Write Encrypted File\n      BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file,false));\n      bufferedOutputStream.write(encryptedBytes);\n      bufferedOutputStream.flush();\n      bufferedOutputStream.close();\n    }catch (Exception e){\n      e.printStackTrace();\n    }\n  }\n\n}\n", "idx": 1199}
{"project": "cipher", "commit_id": "Snippet23644230_5957.java", "target": 0, "func": "public class DESUtil\n{\n    private static final String Algorithm = \"DESede/ECB/PKCS5Padding\";// DESede/ECB/PKCS5Padding;DESede\n\n    private static final String DESede = \"DESede\";\n\n    public static byte[] encrypt(byte[] keybyte, byte[] src)\n    throws NoSuchAlgorithmException, NoSuchPaddingException, Exception\n    {\n        SecretKey deskey = new SecretKeySpec(keybyte, DESede);\n        Cipher c1 = Cipher.getInstance(Algorithm);\n        c1.init(Cipher.ENCRYPT_MODE, deskey);\n        return c1.doFinal(src);\n    }\n\n    public static byte[] decrypt(byte[] keybyte, byte[] src)\n        throws NoSuchAlgorithmException, NoSuchPaddingException, Exception\n    {\n        SecretKey deskey = new SecretKeySpec(keybyte, DESede);\n        Cipher c1 = Cipher.getInstance(Algorithm);\n        c1.init(Cipher.DECRYPT_MODE, deskey);\n        return c1.doFinal(src);\n    }\n\n    public static String byte2hex(byte[] b)\n    {\n        StringBuffer hs = new StringBuffer();\n        String stmp = \"\";\n        for (int n = 0; n <b.length; n++)\n        {\n            stmp = (java.lang.Integer.toHexString(b[n] & 0XFF));\n            if (stmp.length() == 1)\n                hs.append(\"0\").append(stmp);\n            else\n                hs.append(stmp);\n        }\n        return hs.toString().toUpperCase(Locale.getDefault());\n    }\n\n    public static byte[] hex2byte(String hexStr)\n    {\n        if (hexStr.length() % 2 != 0)\n        {\n            AppLogger.error(\"hex2bytes's hexStr length is not even.\");\n            return null;\n        }\n\n        byte[] toBytes = new byte[hexStr.length() / 2];\n        for (int i = 0, j = 0; i <hexStr.length(); j++, i = i + 2)\n        {\n            int tmpa = Integer.decode(\n                \"0X\" + hexStr.charAt(i) + hexStr.charAt(i + 1)).intValue();\n            toBytes[j] = (byte) (tmpa & 0XFF);\n        }\n        return toBytes;\n    }\n\n\n    public static void main(String[] args)\n    {\n        Security.addProvider(new com.sun.crypto.provider.SunJCE());\n        final byte[] rawKey = \"db90e7eb\".getBytes();\n        final byte[] keyBytes = new byte[24];\n\n        for (int i = 0; i <rawKey.length; i++)\n        {\n            keyBytes[i] = rawKey[i];\n        }\n\n        for (int i = rawKey.length; i <keyBytes.length; i++)\n        {\n            keyBytes[i] = (byte)0;\n        }\n\n        String szSrc = \"20926330$AD75B1697FB5EB6345B2D412124030D2$10086$10086$10.164.111$ABCDEFGH$Reserved$CTC\";\n        System.out.println(\"string before encrypt:\" + szSrc);\n        byte[] encoded = null;\n\n        try\n        {\n            encoded = encrypt(keyBytes, szSrc.getBytes());\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n        System.out.println(\"string after encrypt::\" + byte2hex(encoded));\n\n        byte[] srcBytes = null;\n\n        try\n        {\n            srcBytes = decrypt(keyBytes, encoded);\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n        System.out.println(\"string before decode: :\" + (new String(srcBytes)));\n    }\n}\n", "idx": 1200}
{"project": "cipher", "commit_id": "Snippet15782110_38763.java", "target": 0, "func": "WServiceSoap ws = new WService().getWServiceSoap();\nMessageDigest md = MessageDigest.getInstance(\"md5\");\n\nbyte[] digestOfPassword = md.digest(\"12345678\".getBytes(\"utf-8\"));\n\nfinal byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\nfor (int j = 0, k = 16; j < 8;) {\n  keyBytes[k++] = keyBytes[j++];\n}\n\nSecretKey opKey = new SecretKeySpec(keyBytes, \"DESede\");        \nbyte[] opIV = { 0, 0, 0, 1, 2, 3, 4, 5 };       \nCipher c = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n\nc.init(Cipher.ENCRYPT_MODE, opKey, new IvParameterSpec(opIV));\n\nbyte[] encrypted = c.doFinal(\n    ClientDirectOperacionCTMS.DATOS_OPERACION.getBytes(\"UTF-8\"));\n\nString encryptedDatosOperacion= Base64.encodeBase64String(encrypted);\nString result= ws.operacionCTMS(encryptedDatosOperacion);\nSystem.out.println(result);\n", "idx": 1201}
{"project": "cipher", "commit_id": "Snippet3970552_30965.java", "target": 0, "func": "import java.math.BigInteger;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.KeyFactory;\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.PrivateKey;\nimport java.security.PublicKey;\nimport java.security.spec.InvalidKeySpecException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Random;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyAgreement;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.interfaces.DHPrivateKey;\nimport javax.crypto.interfaces.DHPublicKey;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.crypto.spec.DESedeKeySpec;\nimport javax.crypto.spec.DHParameterSpec;\nimport javax.crypto.spec.DHPrivateKeySpec;\nimport javax.crypto.spec.DHPublicKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\n\nimport org.ofbiz.base.util.Debug;\nimport org.ofbiz.base.util.StringUtil;\n\npublic class diffHel {\n\n    public static final String module = \"diffHel\";\n\n    //were in props\n    public String publicValue = \"6B0276780D3E07911D744F545833005E8C2F755E0FE59A8660527F7B7E070A45EEB853DA70C6EFE2B8BF278F0B4A334A49DF0985635745A3DAD2E85A9C0EEFAE657CC382A0B3EAE9C3F85B0A2305282612CFD2857801131EC9FE313DB9DADFB914A30EE077E8A97E5574CE5BD56661B021C39116913710947FAA38FFCB4FC045\";\n    public String format = \"ddMMyyyyHHmmss\";\n    public String primeHex = \"e516e43e5457b2f66f6ca367b335ead8319939fa4df6c1b7f86e73e922a6d19393255e419096668174e35c818a66117f799e8666c8050ee436f9801351606c55d45faba03f39e2923ba926a9cd75d4bdbca9de78b62a9b847a781c692c063eaacb43a396f01d121d042755d0b7c0b2dfa8b498a57e4d90c30ca049a7ac2b7f73\";\n    public String genString = \"05\";\n\n    //were generic values\n    public String exchangeKey;\n    public String privateKey = \"\"; \n\n    protected SecretKey kek = null;\n    protected SecretKey mwk = null;\n    protected String merchantId = null;\n    protected String terminalId = null;\n    protected Long mwkIndex = null;\n    protected boolean debug = false;\n\n    public StringBuffer buf = new StringBuffer();\n\n    public diffHel() {}\n\n    /**\n     * Output the creation of public/private keys + KEK to the console for manual database update\n     */\n    public StringBuffer outputKeyCreation(boolean kekOnly, String kekTest) {\n        return this.outputKeyCreation(0, kekOnly, kekTest);\n    }\n\n    private StringBuffer outputKeyCreation(int loop, boolean kekOnly, String kekTest) {\n        //StringBuffer buf = new StringBuffer();\n        loop++;\n\n        if (loop > 100) {\n            // only loop 100 times; then throw an exception\n            throw new IllegalStateException(\"Unable to create 128 byte keys in 100 tries\");\n        }\n\n        // place holder for the keys\n        DHPrivateKey privateKey = null;\n        DHPublicKey publicKey = null;\n\n        if (!kekOnly) {\n            KeyPair keyPair = null;\n            try {\n                keyPair = this.createKeys();\n            } catch (NoSuchAlgorithmException e) {\n                Debug.logError(e, module);\n            } catch (InvalidAlgorithmParameterException e) {\n                Debug.logError(e, module);\n            } catch (InvalidKeySpecException e) {\n                Debug.logError(e, module);\n            }\n\n            if (keyPair != null) {\n                publicKey = (DHPublicKey) keyPair.getPublic();\n                privateKey = (DHPrivateKey) keyPair.getPrivate();\n\n               buf.append(\"privateKeyLenth=\" + privateKey.getX().toByteArray().length);\n\n\n                if (publicKey == null || publicKey.getY().toByteArray().length != 128) {\n                    // run again until we get a 128 byte public key for VL\n                    return this.outputKeyCreation(loop, kekOnly, kekTest);\n                }\n            } else {\n                Debug.log(\"Returned a null KeyPair\", module);\n                return this.outputKeyCreation(loop, kekOnly, kekTest);\n            }\n        } else {\n            // use our existing private key to generate a KEK\n            try {\n                privateKey = (DHPrivateKey) this.getPrivateKey();\n            } catch (Exception e) {\n                Debug.logError(e, module);\n            }\n        }\n\n        // the KEK\n        byte[] kekBytes = null;\n        try {\n            kekBytes = this.generateKek(privateKey);\n        } catch (NoSuchAlgorithmException e) {\n            Debug.logError(e, module);\n        } catch (InvalidKeySpecException e) {\n            Debug.logError(e, module);\n        } catch (InvalidKeyException e) {\n            Debug.logError(e, module);\n        }\n\n        // the 3DES KEK value\n        SecretKey loadedKek = this.getDesEdeKey(kekBytes);\n        byte[] loadKekBytes = loadedKek.getEncoded();\n\n\n        // test the KEK\n        //Cipher cipher = this.getCipher(this.getKekKey(), Cipher.ENCRYPT_MODE);\n        Cipher cipher = this.getCipher(loadedKek, Cipher.ENCRYPT_MODE);\n        byte[] kekTestB = { 0, 0, 0, 0, 0, 0, 0, 0 };\n        byte[] kekTestC = new byte[0];\n        if (kekTest != null) {\n            kekTestB = StringUtil.fromHexString(kekTest);\n        }\n\n        // encrypt the test bytes\n        try {\n            kekTestC = cipher.doFinal(kekTestB);\n        } catch (Exception e) {\n            Debug.logError(e, module);\n        }\n\n        kek = loadedKek;\n\n        byte[] newMwk = generateMwk(loadedKek);\n\n        byte[] decyptedMwk = decryptViaKek(newMwk);\n\n        if (!kekOnly) {\n            // public key (just Y)\n            BigInteger y = publicKey.getY();\n            byte[] yBytes = y.toByteArray();\n            String yHex = StringUtil.toHexString(yBytes);\n            buf.append(\"======== Begin Public Key (Y @ \" + yBytes.length + \" / \" + yHex.length() + \") ========\\n\");\n            buf.append(yHex + \"\\n\");\n            buf.append(\"======== End Public Key ========\\n\\n\");\n\n            // private key (just X)\n            BigInteger x = privateKey.getX();\n            byte[] xBytes = x.toByteArray();\n            String xHex = StringUtil.toHexString(xBytes);\n            buf.append(\"======== Begin Private Key (X @ \" + xBytes.length + \" / \" + xHex.length() + \") ========\\n\");\n            buf.append(xHex + \"\\n\");\n            buf.append(\"======== End Private Key ========\\n\\n\");\n\n            // private key (full)\n            byte[] privateBytes = privateKey.getEncoded();\n            String privateHex = StringUtil.toHexString(privateBytes);\n            buf.append(\"======== Begin Private Key (Full @ \" + privateBytes.length + \" / \" + privateHex.length() + \") ========\\n\");\n            buf.append(privateHex + \"\\n\");\n            buf.append(\"======== End Private Key ========\\n\\n\");\n        }\n\n        if (kekBytes != null) {\n            buf.append(\"======== Begin KEK aka decrypted MWK (\" + kekBytes.length + \") ========\\n\");\n            buf.append(StringUtil.toHexString(kekBytes) + \"\\n\");\n            buf.append(\"======== End KEK ========\\n\\n\");\n\n            buf.append(\"======== Begin KEK (DES) (\" + loadKekBytes.length + \") ========\\n\");\n            buf.append(StringUtil.toHexString(loadKekBytes) + \"\\n\");\n            buf.append(\"======== End KEK (DES) ========\\n\\n\");\n\n            buf.append(\"======== Begin KEK Test (\" + kekTestC.length + \") ========\\n\");\n            buf.append(StringUtil.toHexString(kekTestC) + \"\\n\");\n            buf.append(\"======== End KEK Test ========\\n\\n\");\n        } else {\n            Debug.logError(\"KEK came back empty\", module);\n        }\n        if (newMwk != null) {\n            buf.append(\"======== Begin MWK (\" + newMwk.length + \") ========\\n\");\n            buf.append(StringUtil.toHexString(newMwk) + \"\\n\");\n            buf.append(\"======== End MWK ========\\n\\n\");\n        }\n        if (decyptedMwk != null) {\n            buf.append(\"======== Begin Decrypted MWK (\" + decyptedMwk.length + \") ========\\n\");\n            buf.append(StringUtil.toHexString(decyptedMwk) + \"\\n\");\n            buf.append(\"======== End Decrypted MWK ========\\n\\n\");\n        }\n\n        return buf;\n    }\n\n    /**\n     * Create a set of public/private keys using ValueLinks defined parameters\n     * @return KeyPair object containing both public and private keys\n     * @throws NoSuchAlgorithmException\n     * @throws InvalidAlgorithmParameterException\n     */\n    public KeyPair createKeys() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeySpecException {\n        // initialize the parameter spec\n        DHPublicKey publicKey = (DHPublicKey) this.getValueLinkPublicKey();\n        DHParameterSpec dhParamSpec = publicKey.getParams();\n        //Debug.log(dhParamSpec.getP().toString() + \" / \" + dhParamSpec.getG().toString(), module);\n\n        // create the public/private key pair using parameters defined by valuelink\n        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"DH\");\n        keyGen.initialize(dhParamSpec);\n        KeyPair keyPair = keyGen.generateKeyPair();\n\n        return keyPair;\n    }\n\n    /**\n     * Generate a key exchange key for use in encrypting the mwk\n     * @param privateKey The private key for the merchant\n     * @return byte array containing the kek\n     * @throws NoSuchAlgorithmException\n     * @throws InvalidKeySpecException\n     * @throws InvalidKeyException\n     */\n    public byte[] generateKek(PrivateKey privateKey) throws NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException {\n        // get the ValueLink public key\n        PublicKey vlPublic = this.getValueLinkPublicKey();\n\n        // generate shared secret key\n        KeyAgreement ka = KeyAgreement.getInstance(\"DH\");\n        ka.init(privateKey);\n        ka.doPhase(vlPublic, true);\n\n        byte[] secretKey = ka.generateSecret();\n\n\n\n\n        buf.append(\"======== Secret Key (\" + secretKey.length + \") ========\\n\");\n        buf.append(StringUtil.toHexString(secretKey) + \"\\n\");\n        buf.append(\"======== End Secret Key ========\\n\\n\");\n\n\n        if (debug) {\n            Debug.log(\"Secret Key : \" + StringUtil.toHexString(secretKey) + \" / \" + secretKey.length,  module);\n        }\n\n        // generate 3DES from secret key using VL algorithm (KEK)\n        MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n        byte[] digest = md.digest(secretKey);\n        byte[] des2 = getByteRange(digest, 0, 16);\n        byte[] first8 = getByteRange(des2, 0, 8);\n        byte[] kek = copyBytes(des2, first8, 0);\n\n        if (debug) {\n            Debug.log(\"Generated KEK : \" + StringUtil.toHexString(kek) + \" / \" + kek.length, module);\n        }\n\n\n        return kek;\n\n\n    }\n\n    /**\n     * Get a public key object for the ValueLink supplied public key\n     * @return PublicKey object of ValueLinks's public key\n     * @throws NoSuchAlgorithmException\n     * @throws InvalidKeySpecException\n     */\n    public PublicKey getValueLinkPublicKey() throws NoSuchAlgorithmException, InvalidKeySpecException {\n        // read the valuelink public key\n        //String publicValue = (String) props.get(\"payment.valuelink.publicValue\");\n        byte[] publicKeyBytes = StringUtil.fromHexString(publicValue);\n\n        // initialize the parameter spec\n        DHParameterSpec dhParamSpec = this.getDHParameterSpec();\n\n        // load the valuelink public key\n        KeyFactory keyFactory = KeyFactory.getInstance(\"DH\");\n        BigInteger publicKeyInt = new BigInteger(publicKeyBytes);\n        DHPublicKeySpec dhPublicSpec = new DHPublicKeySpec(publicKeyInt, dhParamSpec.getP(), dhParamSpec.getG());\n        PublicKey vlPublic = keyFactory.generatePublic(dhPublicSpec);\n\n        return vlPublic;\n    }\n\n    /**\n     * Get merchant Private Key\n     * @return PrivateKey object for the merchant\n     */\n    public PrivateKey getPrivateKey() throws InvalidKeySpecException, NoSuchAlgorithmException {\n        byte[] privateKeyBytes = this.getPrivateKeyBytes();\n\n        // initialize the parameter spec\n        DHParameterSpec dhParamSpec = this.getDHParameterSpec();\n\n        // load the private key\n        KeyFactory keyFactory = KeyFactory.getInstance(\"DH\");\n        BigInteger privateKeyInt = new BigInteger(privateKeyBytes);\n        DHPrivateKeySpec dhPrivateSpec = new DHPrivateKeySpec(privateKeyInt, dhParamSpec.getP(), dhParamSpec.getG());\n        PrivateKey privateKey = keyFactory.generatePrivate(dhPrivateSpec);\n\n        return privateKey;\n    }\n\n    /**\n     * Generate a new MWK\n     * @return Hex String of the new encrypted MWK ready for transmission to ValueLink\n     */\n    public byte[] generateMwk() {\n        KeyGenerator keyGen = null;\n        try {\n            keyGen = KeyGenerator.getInstance(\"DES\");\n        } catch (NoSuchAlgorithmException e) {\n            Debug.logError(e, module);\n\n        }\n\n        // generate the DES key 1\n        SecretKey des1 = keyGen.generateKey();\n        SecretKey des2 = keyGen.generateKey();\n\n        if (des1 != null && des2 != null) {\n            byte[] desByte1 = des1.getEncoded();\n            byte[] desByte2 = des2.getEncoded();\n            byte[] desByte3 = des1.getEncoded();\n\n            // check for weak keys\n            try {\n                if (DESKeySpec.isWeak(des1.getEncoded(), 0) || DESKeySpec.isWeak(des2.getEncoded(), 0)) {\n                    return generateMwk();\n                }\n            } catch (Exception e) {\n                Debug.logError(e, module);\n            }\n\n            byte[] des3 = copyBytes(desByte1, copyBytes(desByte2, desByte3, 0), 0);\n            return generateMwk(des3);\n        } else {\n            Debug.log(\"Null DES keys returned\", module);\n        }\n\n        return null;\n    }\n\n    /**\n     * Generate a new MWK\n     * @param desBytes byte array of the DES key (24 bytes)\n     * @return Hex String of the new encrypted MWK ready for transmission to ValueLink\n     */\n    public byte[] generateMwk(byte[] desBytes) {\n        if (debug) {\n            Debug.log(\"DES Key : \" + StringUtil.toHexString(desBytes) + \" / \" + desBytes.length, module);\n        }\n        SecretKeyFactory skf1 = null;\n        SecretKey mwk = null;\n        try {\n            skf1 = SecretKeyFactory.getInstance(\"DESede\");\n        } catch (NoSuchAlgorithmException e) {\n            Debug.logError(e, module);\n        }\n        DESedeKeySpec desedeSpec2 = null;\n        try {\n            desedeSpec2 = new DESedeKeySpec(desBytes);\n        } catch (InvalidKeyException e) {\n            Debug.logError(e, module);\n        }\n        if (skf1 != null && desedeSpec2 != null) {\n            try {\n                mwk = skf1.generateSecret(desedeSpec2);\n            } catch (InvalidKeySpecException e) {\n                Debug.logError(e, module);\n            }\n        }\n        if (mwk != null) {\n            return generateMwk(mwk);\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Generate a new MWK\n     * @param mwkdes3 pre-generated DES3 SecretKey\n     * @return Hex String of the new encrypted MWK ready for transmission to ValueLink\n     */\n    public byte[] generateMwk(SecretKey mwkdes3) {\n        // zeros for checksum\n        byte[] zeros = { 0, 0, 0, 0, 0, 0, 0, 0 };\n\n        // 8 bytes random data\n        byte[] random = new byte[8];\n        Random ran = new Random();\n        ran.nextBytes(random);\n\n\n        // open a cipher using the new mwk\n        Cipher cipher = this.getCipher(mwkdes3, Cipher.ENCRYPT_MODE);\n\n        // make the checksum - encrypted 8 bytes of 0's\n        byte[] encryptedZeros = new byte[0];\n        try {\n            encryptedZeros = cipher.doFinal(zeros);\n        } catch (IllegalStateException e) {\n            Debug.logError(e, module);\n        } catch (IllegalBlockSizeException e) {\n            Debug.logError(e, module);\n        } catch (BadPaddingException e) {\n            Debug.logError(e, module);\n        }\n\n        // make the 40 byte MWK - random 8 bytes + key + checksum\n        byte[] newMwk = copyBytes(mwkdes3.getEncoded(), encryptedZeros, 0);\n        newMwk = copyBytes(random, newMwk, 0);\n\n        if (debug) {\n            Debug.log(\"Random 8 byte : \" + StringUtil.toHexString(random), module);\n            Debug.log(\"Encrypted 0's : \" + StringUtil.toHexString(encryptedZeros), module);\n            Debug.log(\"Decrypted MWK : \" + StringUtil.toHexString(mwkdes3.getEncoded()) + \" / \" + mwkdes3.getEncoded().length, module);\n            Debug.log(\"Encrypted MWK : \" + StringUtil.toHexString(newMwk) + \" / \" + newMwk.length, module);\n        }\n\n        return newMwk;\n    }\n\n    /**\n     * Use the KEK to encrypt a value usually the MWK\n     * @param content byte array to encrypt\n     * @return encrypted byte array\n     */\n    public byte[] encryptViaKek(byte[] content) {\n        return cryptoViaKek(content, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * Ue the KEK to decrypt a value\n     * @param content byte array to decrypt\n     * @return decrypted byte array\n     */\n    public byte[] decryptViaKek(byte[] content) {\n        return cryptoViaKek(content, Cipher.DECRYPT_MODE);\n    }\n\n    /**\n     * Returns a date string formatted as directed by ValueLink\n     * @return ValueLink formatted date String\n     */\n    public String getDateString() {\n        //String format = (String) props.get(\"payment.valuelink.timestamp\");\n        SimpleDateFormat sdf = new SimpleDateFormat(format);\n        return sdf.format(new Date());\n    }\n\n // using the prime and generator provided by valuelink; create a parameter object\n    protected DHParameterSpec getDHParameterSpec() {\n        //String primeHex = (String) props.get(\"payment.valuelink.prime\");\n        //String genString = (String) props.get(\"payment.valuelink.generator\");\n\n        // convert the p/g hex values\n        byte[] primeByte = StringUtil.fromHexString(this.primeHex);\n        BigInteger prime = new BigInteger(1, primeByte); // force positive (unsigned)\n        BigInteger generator = new BigInteger(this.genString);\n\n        // initialize the parameter spec\n        DHParameterSpec dhParamSpec = new DHParameterSpec(prime, generator, 1024);\n\n        return dhParamSpec;\n    }\n\n    // actual kek encryption/decryption code\n    protected byte[] cryptoViaKek(byte[] content, int mode) {\n        // open a cipher using the kek for transport\n        Cipher cipher = this.getCipher(this.getKekKey(), mode);\n        byte[] dec = new byte[0];\n        try {\n            dec = cipher.doFinal(content);\n        } catch (IllegalStateException e) {\n            Debug.logError(e, module);\n        } catch (IllegalBlockSizeException e) {\n            Debug.logError(e, module);\n        } catch (BadPaddingException e) {\n            Debug.logError(e, module);\n        }\n        return dec;\n    }\n\n // return a cipher for a key - DESede/CBC/NoPadding IV = 0\n    protected Cipher getCipher(SecretKey key, int mode) {\n        byte[] zeros = { 0, 0, 0, 0, 0, 0, 0, 0 };\n        IvParameterSpec iv = new IvParameterSpec(zeros);\n\n        // create the Cipher - DESede/CBC/NoPadding\n        Cipher mwkCipher = null;\n        try {\n            mwkCipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n        } catch (NoSuchAlgorithmException e) {\n            Debug.logError(e, module);\n            return null;\n        } catch (NoSuchPaddingException e) {\n            Debug.logError(e, module);\n        }\n        try {\n            mwkCipher.init(mode, key, iv);\n        } catch (InvalidKeyException e) {\n            Debug.logError(e, \"Invalid key\", module);\n        } catch (InvalidAlgorithmParameterException e) {\n            Debug.logError(e, module);\n        }\n        return mwkCipher;\n    }\n\n    protected SecretKey getKekKey() {\n        if (kek == null) {\n            kek = this.getDesEdeKey(getKek());\n        }\n\n        if (debug) {\n            Debug.log(\"Raw KEK : \" + StringUtil.toHexString(getKek()), module);\n            Debug.log(\"KEK : \" + StringUtil.toHexString(kek.getEncoded()), module);\n        }\n\n        return kek;\n    }\n\n    protected SecretKey getDesEdeKey(byte[] rawKey) {\n        SecretKeyFactory skf = null;\n        try {\n            skf = SecretKeyFactory.getInstance(\"DESede\");\n        } catch (NoSuchAlgorithmException e) {\n            // should never happen since DESede is a standard algorithm\n            Debug.logError(e, module);\n            return null;\n        }\n\n        // load the raw key\n        if (rawKey.length > 0) {\n            DESedeKeySpec desedeSpec1 = null;\n            try {\n                desedeSpec1 = new DESedeKeySpec(rawKey);\n            } catch (InvalidKeyException e) {\n                Debug.logError(e, \"Not a valid DESede key\", module);\n                return null;\n            }\n\n            // create the SecretKey Object\n            SecretKey key = null;\n            try {\n                key = skf.generateSecret(desedeSpec1);\n            } catch (InvalidKeySpecException e) {\n                Debug.logError(e, module);\n            }\n            return key;\n        } else {\n            throw new RuntimeException(\"No valid DESede key available\");\n        }\n    }\n\n    protected byte[] getKek() {\n        //return StringUtil.fromHexString(this.getGenericValue().getString(\"exchangeKey\"));\n        return StringUtil.fromHexString(this.exchangeKey);\n    }\n\n    protected byte[] getPrivateKeyBytes() {\n        //return StringUtil.fromHexString(this.getGenericValue().getString(\"privateKey\"));\n        return StringUtil.fromHexString(this.privateKey);\n    }\n\n    /**\n     * Returns a new byte[] from the offset of the defined byte[] with a specific number of bytes\n     * @param bytes The byte[] to extract from\n     * @param offset The starting postition\n     * @param length The number of bytes to copy\n     * @return a new byte[]\n     */\n    public static byte[] getByteRange(byte[] bytes, int offset, int length) {\n        byte[] newBytes = new byte[length];\n        for (int i = 0; i < length; i++) {\n            newBytes[i] = bytes[offset + i];\n        }\n        return newBytes;\n    }\n\n    /**\n     * Copies a byte[] into another byte[] starting at a specific position\n     * @param source byte[] to copy from\n     * @param target byte[] coping into\n     * @param position the position on target where source will be copied to\n     * @return a new byte[]\n     */\n    public static byte[] copyBytes(byte[] source, byte[] target, int position) {\n        byte[] newBytes = new byte[target.length + source.length];\n        for (int i = 0, n = 0, x = 0; i < newBytes.length; i++) {\n            if (i < position || i > (position + source.length - 2)) {\n                newBytes[i] = target[n];\n                n++;\n            } else {\n                for (; x < source.length; x++) {\n                    newBytes[i] = source[x];\n                    if (source.length - 1 > x) {\n                        i++;\n                    }\n                }\n            }\n        }\n        return newBytes;\n    }\n\n\n}\n", "idx": 1202}
{"project": "cipher", "commit_id": "Snippet19434698_2224.java", "target": 0, "func": "public class MainActivity extends Activity implements OnClickListener {\n\nEditText ed1, ed2, ed3;\nprivate final char[] PASSWORD = \"abcdefghijklmnop\".toCharArray();\nprivate byte[] SALT;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n   //Setting the SALT to android_id\n    SALT = Secure.getString(getContentResolver(), Secure.ANDROID_ID).getBytes();\n    Button btn = (Button) findViewById(R.id.button1);\n    btn.setOnClickListener(this);\n    ed1 = (EditText) findViewById(R.id.editText1);\n    ed2 = (EditText) findViewById(R.id.editText2);\n    ed3 = (EditText) findViewById(R.id.editText3);\n}\n\npublic void onClick(View v)\n{\n\n    String encrypted, decrypted, userpass = ed1.getText().toString().trim();\n    encrypted = encrypt(userpass);\n    ed2.setText(encrypted);\n    decrypted = decrypt(encrypted);\n    ed3.setText(decrypted);\n}\n\npublic String encrypt(String original)\n{\n\n    SecretKeyFactory secretKey = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey key = secretKey.generateSecret(new PBEKeySpec(PASSWORD));\n    Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    cipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT,20));\n    String encrypted = cipher.doFinal(original.getBytes(\"UTF-8\")).toString();\n    return encrypted;\n}\n\npublic String decrypt(String original)\n{\n\n    SecretKeyFactory secretKey = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey key = secretKey.generateSecret(new PBEKeySpec(PASSWORD));\n    Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    cipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(SALT,10));\n    String decrypted = cipher.doFinal(original.getBytes(\"UTF-8\")).toString();\n    return decrypted;\n  }\n}\n", "idx": 1203}
{"project": "cipher", "commit_id": "Snippet18441050_1456.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 1204}
{"project": "cipher", "commit_id": "Snippet41113804_23051.java", "target": 0, "func": "import com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException;\nimport com.sun.org.apache.xml.internal.security.utils.Base64;\n\n...\n\npublic static String encrypt(String content, String password) {  \n    try {             \n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n            kgen.init(128, new SecureRandom(password.getBytes()));\n\n            SecretKey secretKey = kgen.generateKey();\n            byte[] enCodeFormat = secretKey.getEncoded();\n            SecretKeySpec key = new SecretKeySpec(enCodeFormat, \"AES\");\n\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, key); \n            byte[] byteContent = content.getBytes(\"utf-8\"); \n            byte[] result = cipher.doFinal(byteContent);                   \n            return Base64.encode(result);  \n    } catch (NoSuchAlgorithmException e) {  \n            e.printStackTrace();  \n    } catch (NoSuchPaddingException e) {  \n            e.printStackTrace();  \n    } catch (InvalidKeyException e) {  \n            e.printStackTrace();  \n    } catch (UnsupportedEncodingException e) {  \n            e.printStackTrace();  \n    } catch (IllegalBlockSizeException e) {  \n            e.printStackTrace();  \n    } catch (BadPaddingException e) {  \n            e.printStackTrace();  \n    }\n    return null;  \n}\n", "idx": 1205}
{"project": "cipher", "commit_id": "Snippet44525943_26631.java", "target": 0, "func": "public byte[] bobDecrypt( byte[] sharedSecret) {\n\n\n    Cipher cipher = null;\n    byte[] bytes = null;\n    byte[] decrypted = null;\n    try {\n        cipher = Cipher.getInstance(\"RC4\");\n        Key sk = new SecretKeySpec(sharedSecret, \"RC4\");\n        cipher.init(Cipher.DECRYPT_MODE, sk);\n        CipherInputStream cis = new CipherInputStream(socket.getInputStream(), cipher);\n        ObjectInputStream ois = new ObjectInputStream(cis);\n        bytes =  (byte[])ois.readObject();\n        decrypted = cipher.doFinal(bytes);\n\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException | IOException | InvalidKeyException | ClassNotFoundException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    }\n    return decrypted;\n}\n", "idx": 1206}
{"project": "cipher", "commit_id": "Snippet4533289_31161.java", "target": 0, "func": "public byte[] deriveKey(String password, byte[] salt, int keyLen) {\n    SecretKeyFactory kf = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n    KeySpec specs = new PBEKeySpec(password.toCharArray(), salt, 1024, keyLen);\n    SecretKey key = kf.generateSecret(specs);\n    return key.getEncoded();\n}\n\npublic byte[] encrypt(String password, byte[] plaintext) {\n    byte[] salt = new byte[64];\n    Random rnd = new Random();\n    rnd.nextByte(salt);\n    byte[] data = deriveKey(password, salt, 192);\n    SecretKey desKey = SecretKeyFactory.getInstance(\"DESede\").generateSecret(new DESedeKeySpec(data));\n    Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, desKey);\n    return cipher.doFinal(plaintext);\n}\n", "idx": 1207}
{"project": "cipher", "commit_id": "Snippet42010078_23979.java", "target": 0, "func": "  Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n        SecretKeySpec key = new SecretKeySpec(\"testPass\".getBytes(), \"Blowfish\");\nCipher cipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, key);\n", "idx": 1208}
{"project": "cipher", "commit_id": "Snippet6803035_32373.java", "target": 0, "func": "package com.ack.security.jce;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.swing.JOptionPane;\n\n/**\n * This program demonstrates how to encrypt/decrypt input\n * using the Blowfish Cipher with the Java Cryptograhpy.\n *\n */\npublic class BlowfishCipher {\n\n  public static void main(String[] args) throws Exception {\n\n    // create a key generator based upon the Blowfish cipher\n    KeyGenerator keygenerator = KeyGenerator.getInstance(\"Blowfish\");\n\n    // create a key\n    SecretKey secretkey = keygenerator.generateKey();\n\n    // create a cipher based upon Blowfish\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n\n    // initialise cipher to with secret key\n    cipher.init(Cipher.ENCRYPT_MODE, secretkey);\n\n    // get the text to encrypt\n    String inputText = JOptionPane.showInputDialog(\"Input your message: \");\n\n    // encrypt message\n    byte[] encrypted = cipher.doFinal(inputText.getBytes());\n\n    // re-initialise the cipher to be in decrypt mode\n    cipher.init(Cipher.DECRYPT_MODE, secretkey);\n\n    // decrypt message\n    byte[] decrypted = cipher.doFinal(encrypted);\n\n    // and display the results\n    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),\n                                  \"encrypted text: \" + new String(encrypted) + \"\\n\" +\n                                  \"decrypted text: \" + new String(decrypted));\n\n    // end example\n    System.exit(0);\n  }\n}\n", "idx": 1209}
{"project": "cipher", "commit_id": "Snippet47083699_29083.java", "target": 0, "func": "byte[] key = java.util.Base64.getDecoder().decode(keyText.getBytes());\nSecretKeySpec skeySpec = new SecretKeySpec(key, \"DES\");\nCipher des = Cipher.getInstance(\"DES/CBC/ZeroBytePadding\", \"BC\");\ndes.init(Cipher.DECRYPT_MODE, skeySpec, new IvParameterSpec(new byte[8]));\nbyte[] tokenData = des.doFinal(Base64.decodeBase64(token));\n", "idx": 1210}
{"project": "cipher", "commit_id": "Snippet39974198_21886.java", "target": 0, "func": "import java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.security.GeneralSecurityException;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class ProtectedConfigFile {\n\n    private static final char[] PASSWORD = \"enfldsgbnlsngdlksdsgm\".toCharArray();\n    private static final byte[] SALT = { (byte) 0xde, (byte) 0x33, (byte) 0x10, (byte) 0x12, (byte) 0xde, (byte) 0x33,\n            (byte) 0x10, (byte) 0x12, };\n\n    public static void main(String[] args) throws Exception {\n        String originalPassword = \"Aman\";\n        System.out.println(\"Original password: \" + originalPassword);\n        String encryptedPassword = encrypt(originalPassword);\n        System.out.println(\"Encrypted password: \" + encryptedPassword);\n        String decryptedPassword = decrypt(encryptedPassword);\n        System.out.println(\"Decrypted password: \" + decryptedPassword);\n    }\n\n    private static String encrypt(String property) throws GeneralSecurityException, UnsupportedEncodingException {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n        return base64Encode(pbeCipher.doFinal(property.getBytes(\"UTF-8\")));\n    }\n\n    private static String base64Encode(byte[] bytes) {\n        // NB: This class is internal, and you probably should use another impl\n        return new BASE64Encoder().encode(bytes);\n    }\n\n    private static String decrypt(String property) throws GeneralSecurityException, IOException {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n        return new String(pbeCipher.doFinal(base64Decode(property)), \"UTF-8\");\n    }\n\n    private static byte[] base64Decode(String property) throws IOException {\n        // NB: This class is internal, and you probably should use another impl\n        return new BASE64Decoder().decodeBuffer(property);\n    }\n\n}\n", "idx": 1211}
{"project": "cipher", "commit_id": "Snippet34299835_16289.java", "target": 0, "func": "private static char[] base64Encode(byte[] bytes) \n{   \n    return Base64.encode(bytes);\n}\n\nprivate static String encrypt(String encrypt_this) throws GeneralSecurityException, UnsupportedEncodingException \n{\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD));\n    Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n\n     //THIS FAILED when attempting to decrypt the password\n    //return base64Encode(pbeCipher.doFinal(encrypt_this.getBytes(\"UTF-8\"))).toString(); \n\n    //THIS WORKED\n    return String.valueOf(base64Encode(pbeCipher.doFinal(encrypt_this.getBytes(\"UTF-8\"))));\n}//end of encrypt()\n", "idx": 1212}
{"project": "cipher", "commit_id": "Snippet45469754_27533.java", "target": 0, "func": "public static PublicKey getPublicKey(final BigInteger modulus, final BigInteger exponent) {\n    try {\n      final KeyFactory factory = KeyFactory.getInstance(\"RSA\");\n      final PublicKey publicKey = factory.generatePublic(new RSAPublicKeySpec(modulus, exponent));\n      return publicKey;\n    } catch (GeneralSecurityException e) {\n      throw new BaseException(e);\n    }\n}\npublic static String encryptPAN(final String prefix, final String pan, PublicKey publicKey) {\n   byte[] input = String.format(\"%s%s\", prefix, pan).getBytes();\n   try {\n     Cipher cipher = Cipher.getInstance(\"RSA/None/OAEPWithSHA1AndMGF1Padding\", \"BC\");\n     cipher.init(Cipher.ENCRYPT_MODE, publicKey, RANDOM);\n     byte[] cipherText = cipher.doFinal(input);\n     return DatatypeConverter.printBase64Binary(cipherText);\n   } catch (GeneralSecurityException ignore) {\n     return null;\n   }\n }\n", "idx": 1213}
{"project": "cipher", "commit_id": "Snippet8795302_33520.java", "target": 0, "func": "public class Foo {\n\n    public static void main(String[] args) {\n        try {\n            String cipherSpec = \"DES/ECB/NoPadding\";\n            Cipher cipher = Cipher.getInstance(cipherSpec);\n            int blockSize = cipher.getBlockSize();\n\n            String keyText = \"happy\";\n            Key key = new SecretKeySpec(padRight(keyText, blockSize).getBytes(\"UTF-8\"), \"DES\");\n\n            String input = \"http://google.com\";\n                   input = padRight(input, input.length() + blockSize - (input.length() % blockSize));\n\n            // encrypt\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] cipherText = cipher.doFinal(input.getBytes(CHARSET));\n            System.out.println(\"\\ncipher text: \");\n            System.out.println(new String(cipherText, CHARSET));\n\n            // decrypt\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] plainText = cipher.doFinal(cipherText);\n            System.out.println(\"\\nplain text: \");\n            System.out.println(new String(plainText, CHARSET));\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    final static String CHARSET = \"UTF-8\";\n\n    static String padRight(String s, int n) {\n        return String.format(\"%1$-\" + n + \"s\", s);\n    }\n}\n", "idx": 1214}
{"project": "cipher", "commit_id": "Snippet41359839_23328.java", "target": 0, "func": "static String key = \"xxx\"; // key should be exactly 16bit long\nprivate static final String ALGORITHM = \"AES\";\nprivate static final String TRANSFORMATION = \"AES\";\n\npublic static void encrypt(File inputFile, File outputFile) throws CryptoException {\n    doCrypto(Cipher.ENCRYPT_MODE, inputFile, outputFile);\n}\npublic static void decrypt(File inputFile, File outputFile) throws CryptoException {\n    doCrypto(Cipher.DECRYPT_MODE, inputFile, outputFile);\n}\n\nprivate static void doCrypto(int cipherMode, File inputFile, File outputFile) throws CryptoException {\n    try {\n        Key secretKey = new SecretKeySpec(key.getBytes(), ALGORITHM);\n        Cipher cipher = Cipher.getInstance(TRANSFORMATION);\n        cipher.init(cipherMode, secretKey);\n\n        FileInputStream inputStream = new FileInputStream(inputFile);\n        byte[] inputBytes = new byte[(int) inputFile.length()];\n        inputStream.read(inputBytes);\n\n        byte[] outputBytes = cipher.doFinal(inputBytes);\n\n        FileOutputStream outputStream = new FileOutputStream(outputFile);\n        outputStream.write(outputBytes);\n\n        inputStream.close();\n        outputStream.close();\n    } catch (IOException | NoSuchAlgorithmException | InvalidKeyException | NoSuchPaddingException | BadPaddingException | IllegalBlockSizeException e) {\n        e.printStackTrace();\n        throw new CryptoException(\"Error encrypting/decrypting file\", e);\n    }\n}\n", "idx": 1215}
{"project": "cipher", "commit_id": "Snippet14620846_37854.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"AES/ECB/NoPadding\");", "idx": 1216}
{"project": "cipher", "commit_id": "Snippet16054845_39012.java", "target": 0, "func": "public static String encrypt(String PT,String skey) throws Exception, NoSuchPaddingException {\n      Cipher cipher = Cipher.getInstance(\"AES\");\n        SecretKeySpec key = new SecretKeySpec(skey.getBytes(\"ascii\"), \"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] val = hexToBytes(PT);\n        byte[] encVal = cipher.doFinal(val);\n\n        return byteToString(encVal);\n}\n", "idx": 1217}
{"project": "cipher", "commit_id": "Snippet26969150_9088.java", "target": 0, "func": "public String encrypt(String texte) {\n   byte[] bytePassword = Base64.decode(PASSWORD, Base64.DEFAULT);\n   byte[] byteSalt = Base64.decode(SALT, Base64.DEFAULT);\n   byte[] bytesIv = Base64.decode(IV, Base64.DEFAULT);\n   SecretKeyFactory factory = null;\n   factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n   KeySpec spec = new PBEKeySpec(PASSWORD.toCharArray(), byteSalt, NB_ITER_RFC, 128);\n   SecretKey temp = null;\n   temp = factory.generateSecret(spec);\n   byte[] clef = temp.getEncoded();\n   Cipher c = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n   IvParameterSpec ivParam = new IvParameterSpec(bytesIv);\n   c.init(Cipher.ENCRYPT_MODE, temp, ivParam);     \n   byte[] encrypted = c.doFinal(texte.getBytes(\"UTF-8\"));\n   mdp = Base64.encodeToString(encrypted, Base64.DEFAULT);\n   Log.i(\"MDP CHIFFRE\", \" = \" + mdp);\n}\n", "idx": 1218}
{"project": "cipher", "commit_id": "Snippet34756927_16783.java", "target": 0, "func": "desCipher = Cipher.getInstance(\"DES/OFB56/NoPadding\");\ndesCipher.init(Cipher.DECRYPT_MODE, secretKey, ivParameter);\nfor (i=0;i<subframeCount;i++){\n// perform the skip iteration here\n  if (firstFrame){\n      byte[] dummy = new byte[7];\n      dummy[0] = 1;dummy[1] = 12;dummy[2] = 12;dummy[3] = 15;dummy[4] = 26;dummy[5] = 12;dummy[6] = 12;\n      desCipher.update(dummy);\n  }\n  if (not_last_frame){\n      decryptedVCW = desCipher.update(vcwShift_E);\n  }\n  else{\n      decryptedVCW = desCipher.doFinal(vcwShift_E);\n  }\n\n}\n", "idx": 1219}
{"project": "cipher", "commit_id": "Snippet16185245_39143.java", "target": 0, "func": "public static void encryptOrDecrypt(int mode, OutputStream os, InputStream is, String key) throws Throwable {\n\n    IvParameterSpec l_ivps;\n    l_ivps = new IvParameterSpec(IV, 0, IV.length);\n\n    DESKeySpec dks = new DESKeySpec(key.getBytes());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey desKey = skf.generateSecret(dks);\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\"); \n\n    if (mode == Cipher.ENCRYPT_MODE) {\n        cipher.init(Cipher.ENCRYPT_MODE, desKey,l_ivps);    \n        CipherInputStream cis = new CipherInputStream(is, cipher);\n        doCopy(cis, os);\n    } else if (mode == Cipher.DECRYPT_MODE) {\n        cipher.init(Cipher.DECRYPT_MODE, desKey,l_ivps);            \n        CipherInputStream cis = new CipherInputStream(is, cipher);                  \n        doCopy(cis, os);\n        System.out.println(\"Decrypted\");\n    }\n}\n\npublic static void doCopy(InputStream is, OutputStream os) throws IOException {\n    byte[] bytes = new byte[64];\n    int numBytes;\n    System.out.println(\"doCopy Step1\");\n    System.out.println(\"is: \"+is.read(bytes));\n    while ((numBytes = is.read(bytes)) != -1) {\n        os.write(bytes, 0, numBytes);\n        System.out.println(\"doCopy Step2\");\n    }\n    os.flush();\n    os.close();\n    is.close();\n}\n\npublic static void writeFile(InputStream in){\n    try {\n        String strContent;          \n        BufferedReader bReader = new BufferedReader(new InputStreamReader(in));\n        StringBuffer sbfFileContents = new StringBuffer();\n        String line = null;\n\n        while( (line = bReader.readLine()) != null){\n            sbfFileContents.append(line);\n        }\n        System.out.println(\"File:\"+sbfFileContents);            \n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException ioe){\n\n    }\n}\n", "idx": 1220}
{"project": "cipher", "commit_id": "Snippet16238710_39193.java", "target": 0, "func": "private static final String ENCRYPTION_ALGORITHM = \"AES/ECB/PKCS5Padding\";\nprivate static final SecureRandom RANDOM = new SecureRandom();\n\npublic static void main(String[] args) throws UnsupportedEncodingException, GeneralSecurityException {\n    final KeyGenerator keyGen = KeyGenerator.getInstance(ENCRYPTION_ALGORITHM.substring(0, ENCRYPTION_ALGORITHM.indexOf('/')));\n    keyGen.init(128, RANDOM);\n    final SecretKey key = keyGen.generateKey();\n    final String s = \"My topsecret string\";\n    System.out.println(s);\n    final Cipher encryption = getCipher(key, Cipher.ENCRYPT_MODE);\n    final String enc = DatatypeConverter.printBase64Binary(encryption.doFinal(s.getBytes(\"UTF-8\")));\n    System.out.println(enc);\n    final Cipher decryption = getCipher(key, Cipher.DECRYPT_MODE);\n    final String dec = new String(decryption.doFinal(DatatypeConverter.parseBase64Binary(enc)), \"UTF-8\");\n    System.out.println(dec);\n}\n\nprivate static Cipher getCipher(final Key key, final int mode) throws GeneralSecurityException {\n    final Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);\n    cipher.init(mode, key, RANDOM);\n    return cipher;\n}\n", "idx": 1221}
{"project": "cipher", "commit_id": "Snippet16613644_23.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"AES\");\n", "idx": 1222}
{"project": "cipher", "commit_id": "Snippet25297748_7672.java", "target": 0, "func": "public static String encrypt(String plaintxt)            //line 24\n    {\n        String encryptedtxt = null;\n        try\n        {\n            Key skey=aes.setkey(pswd);\n            Cipher c=Cipher.getInstance(\"AES\");\n            c.init(Cipher.ENCRYPT_MODE, skey);\n            byte[] P=plaintxt.getBytes(\"UTF-8\");\n            encryptedtxt=new String(c.doFinal(P));\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n        return encryptedtxt;\n    }\n", "idx": 1223}
{"project": "cipher", "commit_id": "Snippet27034374_9179.java", "target": 0, "func": "public class Main {\n\npublic static void main(String[] args) {\n    try {\n        System.out.println(encrypt(\"12345678\", \"abc\", \"12345678\"));\n        //System.out.println(encrypt(\"12345678\", \"ABC\", \"12345678\"));\n\n\n        System.out.println(decrypt(\"12345678\", \"9YR6ZPdZufM=\", \"12345678\"));\n        //System.out.println(decrypt(\"12345678\", \"6rtTnrF34mPkJ5SO3RiaaQ==\", \"12345678\"));\n\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n\npublic static String encrypt(String key, String str, String ivString) throws Exception {\n    DESKeySpec desKeySpec = new DESKeySpec(key.getBytes());\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    Key secretKey = keyFactory.generateSecret(desKeySpec);\n\n    IvParameterSpec iv = new IvParameterSpec(ivString.getBytes());\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey, iv);\n    byte[] bytes = cipher.doFinal(str.getBytes());\n    dumpHex(bytes);\n\n    return Base64.encode(bytes);\n}\n\npublic static void dumpHex(byte[] bytes) {\n    for (byte b : bytes) {\n        System.out.println(String.format(\"%02x\",b&0xff));\n    }\n    System.out.println(bytesToHex(bytes));\n}\n\nfinal protected static char[] hexArray = \"0123456789ABCDEF\".toCharArray();\npublic static String bytesToHex(byte[] bytes) {\n    char[] hexChars = new char[bytes.length * 2];\n    for ( int j = 0; j < bytes.length; j++ ) {\n        int v = bytes[j] & 0xFF;\n        hexChars[j * 2] = hexArray[v >>> 4];\n        hexChars[j * 2 + 1] = hexArray[v & 0x0F];\n    }\n    return new String(hexChars);\n}\n\npublic static String decrypt(String key, String str, String ivString) throws Exception {\n    byte[] data = Base64.decode(str);\n    dumpHex(data);\n    DESKeySpec dks = new DESKeySpec(key.getBytes());\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n    Key secretKey = keyFactory.generateSecret(dks);\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    IvParameterSpec iv = new IvParameterSpec(ivString.getBytes());\n    cipher.init(Cipher.DECRYPT_MODE, secretKey, iv);\n    byte[] decryptedBytes = cipher.doFinal(data);\n    return new String(decryptedBytes, \"gb2312\");\n}\n", "idx": 1224}
{"project": "cipher", "commit_id": "Snippet40229349_22143.java", "target": 0, "func": "private SecretKey symmKey = null;\npublic String encrypt(String strToEncrypt) throws  Exception\n {\n\n     String symmEncryptMode = \"DESede\";\n     String encString= null;\n\n     KeyGenerator keyGen = KeyGenerator.getInstance(symmEncryptMode);\n     symmKey = keyGen.generateKey();\n\n     byte dataToEncrypt[] = strToEncrypt.getBytes();\n     Cipher symmCipher = Cipher.getInstance(symmEncryptMode);\n     symmCipher.init(Cipher.ENCRYPT_MODE, symmKey);\n     byte[] encrypted  = symmCipher.doFinal(dataToEncrypt);\n     encString= new String(Base64.encode(encrypted));\n     encString = URLEncoder.encode(encString, \"UTF-8\");\n     return(encString);\n} //end method create Signature\n", "idx": 1225}
{"project": "cipher", "commit_id": "Snippet4062015_30999.java", "target": 0, "func": "public static byte[] encrypt(byte to_encrypt[], byte strkey[]) {\n    try {           \n        SecretKeySpec key = new SecretKeySpec(strkey, \"Blowfish\");\n        Cipher cipher = Cipher.getInstance(\"Blowfish/ECB/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);  \n        return cipher.doFinal(to_encrypt); // <=========== error\n    } catch (Exception e) { \n        e.printStackTrace();\n        return null; \n    }\n}\n", "idx": 1226}
{"project": "cipher", "commit_id": "Snippet12914013_36548.java", "target": 0, "func": "import java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class apiKeyGenerate {\n  public static void main(String[] args) throws Exception {\n   // Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n\n    byte[] input = \"input\".getBytes();\n    byte[] ivBytes = \"1234567812345678\".getBytes();\n\n    Cipher cipher =  Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    KeyGenerator generator = KeyGenerator.getInstance(\"AES\", \"BC\");\n    generator.init(128);\n    Key encryptionKey = generator.generateKey();\n    System.out.println(\"key : \" + new String(encryptionKey.getEncoded()));\n   }\n}\n", "idx": 1227}
{"project": "cipher", "commit_id": "Snippet20419839_3060.java", "target": 0, "func": "private static byte[] decrypt(byte[] raw, byte[] encrypted) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n", "idx": 1228}
{"project": "cipher", "commit_id": "Snippet17873905_965.java", "target": 0, "func": "    package com.kushal.utils;\n\n    import java.security.spec.KeySpec;\n    import javax.crypto.Cipher;\n    import javax.crypto.SecretKey;\n    import javax.crypto.SecretKeyFactory;\n    import javax.crypto.spec.DESedeKeySpec;\n    import sun.misc.BASE64Decoder;\n    import sun.misc.BASE64Encoder;\n\n    public class DESedeEncryption {\n\n        private static final String UNICODE_FORMAT = \"UTF8\";\n        public static final String DESEDE_ENCRYPTION_SCHEME = \"DESede\";\n        private KeySpec myKeySpec;\n        private SecretKeyFactory mySecretKeyFactory;\n        private Cipher cipher;\n        byte[] keyAsBytes;\n        private String myEncryptionKey;\n        private String myEncryptionScheme;\n        SecretKey key;\n\n        public DESedeEncryption() throws Exception\n        {\n            myEncryptionKey = \"ThisIsSecretEncryptionKey\";\n            myEncryptionScheme = DESEDE_ENCRYPTION_SCHEME;\n            keyAsBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n            myKeySpec = new DESedeKeySpec(keyAsBytes);\n            mySecretKeyFactory = SecretKeyFactory.getInstance(myEncryptionScheme);\n            cipher = Cipher.getInstance(myEncryptionScheme);\n            key = mySecretKeyFactory.generateSecret(myKeySpec);\n        }\n\n        /**\n         * Method To Encrypt The String\n         */\n        public String encrypt(String unencryptedString) {\n            String encryptedString = null;\n            try {\n                cipher.init(Cipher.ENCRYPT_MODE, key);\n                byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);\n                byte[] encryptedText = cipher.doFinal(plainText);\n                BASE64Encoder base64encoder = new BASE64Encoder();\n                encryptedString = base64encoder.encode(encryptedText);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return encryptedString;\n        }\n        /**\n         * Method To Decrypt An Ecrypted String\n         */\n        public String decrypt(String encryptedString) {\n            String decryptedText=null;\n            try {\n                cipher.init(Cipher.DECRYPT_MODE, key);\n                BASE64Decoder base64decoder = new BASE64Decoder();\n                byte[] encryptedText = base64decoder.decodeBuffer(encryptedString);\n                byte[] plainText = cipher.doFinal(encryptedText);\n                decryptedText= bytes2String(plainText);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return decryptedText;\n        }\n        /**\n         * Returns String From An Array Of Bytes\n         */\n        private static String bytes2String(byte[] bytes) {\n            StringBuffer stringBuffer = new StringBuffer();\n            for (int i = 0; i &amp;lt; bytes.length; i++) {\n                stringBuffer.append((char) bytes[i]);\n            }\n            return stringBuffer.toString();\n        }\n\n        /**\n         * Testing The DESede Encryption And Decryption Technique\n         */\n        public static void main(String args []) throws Exception\n        {\n            DESedeEncryption myEncryptor= new DESedeEncryption();\n\n            String stringToEncrypt=&quot;Sanjaal.com&quot;;\n            String encrypted=myEncryptor.encrypt(stringToEncrypt);\n            String decrypted=myEncryptor.decrypt(encrypted);\n\n            System.out.println(\"String To Encrypt: \"+stringToEncrypt);\n            System.out.println(\"Encrypted Value :\" + encrypted);\n            System.out.println(\"Decrypted Value :\"+decrypted);\n\n        }\n\n    }\n\noutput:\nString To Encrypt: Sanjaal.com\nEncrypted Value :aArhqI25Y1SkYrdv9gxYDQ==\nDecrypted Value :Sanjaal.com\n\nhttp://sanjaal.com/java/189/java-encryption/tutorial-encryption-and-decryption-using-desede-triple-des-in-java/\n", "idx": 1229}
{"project": "cipher", "commit_id": "Snippet28506782_10667.java", "target": 0, "func": "String secret = \"1234567812345678\";\nKey key = new SecretKeySpec(secret.getBytes(), \"AES\");\n\n// Encrypt\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, key);\nbyte[] encryptedData = cipher.doFinal(\"helloworld\".getBytes());\n\n// Decrypt\ncipher.init(Cipher.DECRYPT_MODE, key);\nbyte[] decryptedData = cipher.doFinal(encryptedData);\nSystem.out.println(decryptedData.toString());\n", "idx": 1230}
{"project": "cipher", "commit_id": "Snippet25607270_7936.java", "target": 0, "func": "public static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n    DESKeySpec dks = new DESKeySpec(key.getBytes());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey desKey = skf.generateSecret(dks);\n    Cipher cipher = Cipher.getInstance(\"DES\"); // DES/ECB/PKCS5Padding for SunJCE\n\n    if (mode == Cipher.ENCRYPT_MODE) {\n        cipher.init(Cipher.ENCRYPT_MODE, desKey);\n        CipherInputStream cis = new CipherInputStream(is, cipher);\n        doCopy(cis, os);\n    } else if (mode == Cipher.DECRYPT_MODE) {\n        cipher.init(Cipher.DECRYPT_MODE, desKey);\n        CipherOutputStream cos = new CipherOutputStream(os, cipher);\n        doCopy(is, cos);\n    }\n}\n\npublic static void doCopy(InputStream is, OutputStream os) throws IOException {\n    byte[] bytes = new byte[64];\n    int numBytes;\n\n    // Why is this taking so long?\n    while ((numBytes = is.read(bytes)) != -1) {\n        os.write(bytes, 0, numBytes);\n    }\n\n    os.flush();\n    os.close();\n    is.close();\n}\n", "idx": 1231}
{"project": "cipher", "commit_id": "Snippet14767205_37902.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\n\npublic class Protector {\n\n    private static final String ALGORITHM = \"AES\";\n    private static final int ITERATIONS = 1;\n    private static final byte[] keyValue = \"ALSOISASECRETKEY\".getBytes();\n\n    public static String encrypt(String value, String salt) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.ENCRYPT_MODE, key);\n\n        String valueToEnc = null;\n        String eValue = value;\n        for (int i = 0; i < ITERATIONS; i++) {\n            valueToEnc = salt + eValue;\n            byte[] encValue = c.doFinal(valueToEnc.getBytes());\n            eValue = new BASE64Encoder().encode(encValue);\n        }\n        return eValue;\n    }\n\n    public static String decrypt(String value, String salt) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.DECRYPT_MODE, key);\n\n        String dValue = null;\n        String valueToDecrypt = value;\n        for (int i = 0; i < ITERATIONS; i++) {\n            byte[] decordedValue = new BASE64Decoder().decodeBuffer(valueToDecrypt);\n            byte[] decValue = c.doFinal(decordedValue);\n            dValue = new String(decValue).substring(salt.length());\n            valueToDecrypt = dValue;\n        }\n        return dValue;\n    }\n\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGORITHM);\n        // SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(ALGORITHM);\n        // key = keyFactory.generateSecret(new DESKeySpec(keyValue));\n        return key;\n    }\n}\n", "idx": 1232}
{"project": "cipher", "commit_id": "Snippet8300720_33137.java", "target": 0, "func": "   import java.security.InvalidKeyException;\n   import java.security.*;\n   import javax.crypto.BadPaddingException;\n   import javax.crypto.Cipher;\n   import javax.crypto.IllegalBlockSizeException;\n   import javax.crypto.SecretKey;\n   import javax.crypto.SecretKeyFactory;\n   import javax.crypto.spec.DESedeKeySpec;\n\n      public class LocalEncrypter {\n\n    private static String algorithm = \"PBEWithMD5AndDES\";\n   //private static Key key = null;\n    private static Cipher cipher = null;\n    private static SecretKey key;\n\n    private static void setUp() throws Exception {\n        ///key = KeyGenerator.getInstance(algorithm).generateKey();\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(algorithm);\n        String pass1 = \"thisIsTheSecretKeyProvidedByMe\";\n        byte[] pass = pass1.getBytes(); \n        SecretKey key = factory.generateSecret(new DESedeKeySpec(pass));\n        cipher = Cipher.getInstance(algorithm);\n    }\n\n    public static void main(String[] args) \n       throws Exception {\n        setUp();\n\n        byte[] encryptionBytes = null;\n        String input = \"1234\";\n        System.out.println(\"Entered: \" + input);\n        encryptionBytes = encrypt(input);\n        System.out.println(\n          \"Recovered: \" + decrypt(encryptionBytes));\n    }\n\n    private static byte[] encrypt(String input)\n        throws InvalidKeyException, \n               BadPaddingException,\n               IllegalBlockSizeException {\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] inputBytes = input.getBytes();\n        return cipher.doFinal(inputBytes);\n    }\n\n    private static String decrypt(byte[] encryptionBytes)\n        throws InvalidKeyException, \n               BadPaddingException,\n               IllegalBlockSizeException {\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] recoveredBytes = \n          cipher.doFinal(encryptionBytes);\n        String recovered = \n          new String(recoveredBytes);\n        return recovered;\n      }\n", "idx": 1233}
{"project": "cipher", "commit_id": "Snippet30118001_12277.java", "target": 0, "func": "private static String TRANSFORMATION = \"AES/ECB/NoPadding\";\nprivate static String ALGORITHM = \"AES\";\nprivate static String DIGEST = \"MD5\";\nbyte[] encryptedData;\n\npublic RijndaelCrypt(String password,String plainText) {\n\n    try {\n\n        //Encode digest\n        MessageDigest digest;           \n        digest = MessageDigest.getInstance(DIGEST);            \n        _password = new SecretKeySpec(digest.digest(password.getBytes()), ALGORITHM);\n\n        //Initialize objects\n        _cipher = Cipher.getInstance(TRANSFORMATION);\n\n       _cipher.init(Cipher.ENCRYPT_MODE, _password);\n        encryptedData = _cipher.doFinal(text);\n\n    } catch (InvalidKeyException e) {\n        Log.e(TAG, \"Invalid key  (invalid encoding, wrong length, uninitialized, etc).\", e);\n        return null;\n    } catch (InvalidAlgorithmParameterException e) {\n        Log.e(TAG, \"Invalid or inappropriate algorithm parameters for \" + ALGORITHM, e);\n        return null;\n    } catch (IllegalBlockSizeException e) {\n        Log.e(TAG, \"The length of data provided to a block cipher is incorrect\", e);\n        return null;\n    } catch (BadPaddingException e) {\n        Log.e(TAG, \"The input data but the data is not padded properly.\", e);\n        return null;\n    }               \n\n    return Base64.encodeToString(encryptedData,Base64.DEFAULT);\n}\n", "idx": 1234}
{"project": "cipher", "commit_id": "Snippet32745324_14857.java", "target": 0, "func": "public class ResourceEncrypter {\n\n    static byte[] salt = { (byte)0xc7, (byte)0x73, (byte)0x21, (byte)0x8c,\n                               (byte)0x7e, (byte)0xc8, (byte)0xee, (byte)0x99 };\n\n    public static void main(String[] args) {\n        new ResourceEncrypter().encryptAllFiles();\n        System.out.println(\"Okay, done\");\n    }\n\n\n\n    private byte[] getKey() {\n        try {\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n            SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n            sr.setSeed(salt);\n            kgen.init(128, sr); \n            SecretKey skey = kgen.generateKey();\n            byte[] key = skey.getEncoded();\n            return key;\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n\n    private void encryptAllFiles() {\n        try {\n            byte[] key = getKey();\n\n            //Take a list of files and encrypt each file...\n            String srcFilesPath = System.getProperty(\"user.dir\") + \"/srcFiles\";\n            String encryptedSrcFilesPath = System.getProperty(\"user.dir\") + \"/encryptedSrcFiles\";\n            File[] listOfFiles = new File(srcFilesPath).listFiles();\n            for(int i = 0; i < listOfFiles.length; ++i) {\n                if(listOfFiles[i].getAbsolutePath().contains(\".zip\")) {\n                    //Encrypt this file!\n                    byte[] data = Files.readAllBytes(Paths.get(listOfFiles[i].getAbsolutePath()));\n                    byte[] encryptedData = ResourceEncrypter.encrypt(key, data);\n\n                    String filename = listOfFiles[i].getName();\n                    System.out.println(\"Write result to \" + encryptedSrcFilesPath + \"/\" + filename);\n                    FileOutputStream output = new FileOutputStream(encryptedSrcFilesPath + \"/\" + filename);\n                    output.write(encryptedData);\n                    output.close();\n                }\n            }\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n\n\n    private static byte[] encrypt(byte[] key, byte[] data) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encryptedData = cipher.doFinal(data);\n        return encryptedData;\n    }\n", "idx": 1235}
{"project": "cipher", "commit_id": "Snippet46743292_28821.java", "target": 0, "func": "    String key22 = myKey;\n    byte[] b = key22.getBytes();\n\n    final SecretKey key = new SecretKeySpec(b, \"DESede\");\n    final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n    final Cipher decipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n    decipher.init(Cipher.DECRYPT_MODE, key, iv);    \n    final byte[] plainText = decipher.doFinal(file_encrypt);\n\n\n    try {\n        String dir = Environment.getExternalStorageDirectory() + File.separator + \".android\";\n        String dir2 = Environment.getExternalStorageDirectory() + File.separator + \".android/.androidmain\";\n        File folder = new File(dir); //folder name\n        File folder2 = new File(dir2); //folder name\n        if (!folder.exists())\n            folder.mkdirs();\n        if (!folder2.exists())\n            folder2.mkdirs();\n\n        File file = new File(Environment.getExternalStorageDirectory() + File.separator + \".android/.androidmain/file\");\n\n\n        if (file.exists()) {\n          //  Toast.makeText(contInst, \"111\", Toast.LENGTH_SHORT).show();\n        } else {\n          //  Toast.makeText(contInst, \"3333\", Toast.LENGTH_SHORT).show();\n            file.createNewFile();\n        }\n\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file));\n\n\n        bos.write(plainText);\n        bos.flush();\n        bos.close();          \n       videoplay.setSource(Uri.fromFile(file));\n\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n\n    return \"ok\";\n}\n", "idx": 1236}
{"project": "cipher", "commit_id": "Snippet35608233_17506.java", "target": 0, "func": "    public static void main(String[] args) throws Exception {\n    // TODO Auto-generated method stub\n    generateKey(clef);\n\n    CryptingWithSave(Cipher.ENCRYPT_MODE,\"db/db.csv\",publicKey,\"db/db.csv_encrypted\");\n    decrypt_file(\"db/db.csv_encrypted\",publicKey);\n    System.out.println(tab);\n}\n\n\n    public static void generateKey (String clef) throws NoSuchAlgorithmException{\n     final KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n     keyGen.init(128);\n     final SecretKey key = keyGen.generateKey();\n\n    publicKey= new SecretKeySpec(key.getEncoded(),\"AES\");\n}\n\n    public static void CryptingWithSave (int Crypting_METHOD,String inputFile, SecretKeySpec clef, String outputFile) throws NoSuchAlgorithmException, NoSuchPaddingException, BadPaddingException, Exception{\n   Cipher cipher = Cipher.getInstance(\"AES\");\n   cipher.init(Crypting_METHOD, clef);\n\n        FileInputStream fis = new FileInputStream(inputFile);\n        FileOutputStream fos = new FileOutputStream(outputFile);\n\n        byte[] input = new byte[64];\n        int bytesRead;\n\n        while ((bytesRead = fis.read(input)) != -1) {\n            byte[] output = cipher.update(input, 0, bytesRead);\n            if (output != null)\n                fos.write(output);\n        }\n\n        byte[] output = cipher.doFinal();\n        if (output != null)\n            fos.write(output);\n\n        fis.close();\n        fos.flush();\n        fos.close();\n}\n\npublic static void decrypt_file (String inputFile, SecretKeySpec clef) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException{\n    Cipher cipher2 = Cipher.getInstance(\"AES\");\n       cipher2.init(Cipher.DECRYPT_MODE, clef);\n        FileInputStream fis = new FileInputStream(inputFile);\n        byte[] input = new byte[64];\n        int bytesRead;\n\n        while ((bytesRead = fis.read(input)) != -1) {\n            byte[] output = cipher2.update(input, 0, bytesRead);\n            if (output != null)\n                tab=tab.concat(new String(output));\n        }\n\n        byte[] output = cipher2.doFinal();\n        if (output != null)\n            tab=tab.concat(new String(output));\n        fis.close();\n}\n", "idx": 1237}
{"project": "cipher", "commit_id": "Snippet31768498_13837.java", "target": 0, "func": "decryption algorithm\n\n    public static byte[] decrypt(byte[] ciphertext,byte[] keyBytes)   \n    {   \n        byte de[] = null;   \n        try   \n        {   \n            SecureRandom sr = new SecureRandom(keyBytes);\n            KeyGenerator kg = KeyGenerator.getInstance(algorithm);\n            kg.init(sr);\n            SecretKey sk = kg.generateKey();    \n            Cipher deCipher = Cipher.getInstance(\"RC4\");   \n            deCipher.init(Cipher.DECRYPT_MODE,sk);   \n            de = deCipher.doFinal(ciphertext);   \n        }   \n        catch(Exception e)   \n        {   \n            e.printStackTrace();   \n        }    \n        return de;   \n\n    }  \n", "idx": 1238}
{"project": "cipher", "commit_id": "Snippet43453905_25571.java", "target": 0, "func": "public class EncryptionDecrption {\n\n    private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = new byte[]{'T', 'h', 'e', 'R', 'o', 'o', 'K', 'n', 'a', 't','E','n', 'i', 'r','i','n'};\n\n    public EncryptionDecrption(){\n\n    }\n\n    public static String setEncryptedString(String data) throws Exception {\n        Key key = getKey();\n        Cipher cipher = Cipher.getInstance(ALGO);\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encryptedValue = cipher.doFinal(data.getBytes(\"UTF-8\"));\n\n        return Base64.encodeToString(encryptedValue, Base64.DEFAULT);\n    }\n\n    public static String getDecryptedValue(String data) throws Exception {\n\n        if(data != null) {\n            Key key = getKey();\n            Cipher cipher = Cipher.getInstance(ALGO);\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] decodebyte = Base64.decode(data.getBytes(\"UTF-8\"), Base64.DEFAULT);\n            byte[] decValue = cipher.doFinal(decodebyte);\n\n            return new String(decValue);\n        }\n\n        return null;\n    }\n\n    private static Key getKey() throws Exception {\n        return new SecretKeySpec(keyValue, ALGO);\n    }\n}\n", "idx": 1239}
{"project": "cipher", "commit_id": "Snippet41413439_23377.java", "target": 0, "func": "public class CipherStreams {\npublic static void main(String[] args) {\n    try {\n        KeyGenerator keygen = KeyGenerator.getInstance(\"AES\");\n        Key k = keygen.generateKey();\n\n        Cipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        aes.init(Cipher.ENCRYPT_MODE, k);\n        FileOutputStream fs = new FileOutputStream(\"Encrypyed.txt\");\n        CipherOutputStream out = new CipherOutputStream(fs, aes);\n        out.write(\"[Hello:Okay]\\nOkay\".getBytes());\n        out.close();\n\n        Cipher aes2 = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        aes2.init(Cipher.DECRYPT_MODE, k);\n\n        FileInputStream fis = new FileInputStream(\"Encrypyed.txt\");\n        CipherInputStream in = new CipherInputStream(fis,aes2);\n        byte[] b = new byte[8];\n        int i = in.read(b);\n        while(i!=-1) {\n            System.out.print((char)i);\n            i = in.read(b);\n        }\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IOException ex) {\n        Logger.getLogger(CipherStreams.class.getName()).log(Level.SEVERE, null, ex);\n    }\n}\n}\n", "idx": 1240}
{"project": "cipher", "commit_id": "Snippet12315043_36200.java", "target": 0, "func": "        // Now pick a random one\n        int index = (int)(Math.random() * thumbs.size());\n        Entry ent = thumbs.get(index);\n        String path = ent.path;\n        mFileLen = ent.bytes;\n\n        String cachePath = mContext.getCacheDir().getAbsolutePath() + \"/\" + IMAGE_FILE_NAME;\n        try {\n\n            KeyGenerator keygen = KeyGenerator.getInstance(\"DES\");\n            SecretKey key = keygen.generateKey(); //generate key\n            byte[] encryptedData;\n            byte[] decryptedData;\n            Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            //File f = new File(encryptfilepath);\n            FileInputStream in = new FileInputStream(cachePath);\n            encryptedData = new byte[(int)cachePath.length()];\n            in.read(encryptedData);\n            decryptedData = cipher.doFinal(encryptedData);\n            ByteArrayOutputStream fis = new ByteArrayOutputStream(decryptedData);\n            //ByteArrayInputStream fis = new ByteArrayInputStream(decryptedData);\n             mFos = new FileOutputStream(new File(fis));\n\n          //  mFos = new FileOutputStream(cachePath);\n        } catch (FileNotFoundException e) {\n            mErrorMsg = \"Couldn't create a local file to store the image\";\n", "idx": 1241}
{"project": "cipher", "commit_id": "Snippet22733157_5139.java", "target": 0, "func": "/** Utility method to Encrpyt a plain text string using blowfish algorithm. This method is synchronised between threads.\n     * Base64 encoding is used to encode and decode byte array.\n     * <p>NOTE: use the same key for Encryption and Decryption</p>\n     * \n     * @param plainText Plain text String\n     * @param key       Secret key ( If null default will be used)\n     * @return String   URL safe encrypted String\n     * @throws Exception\n     */\n\n    public synchronized static String blowfishEncryption(String plainText, String key) throws Exception {\n        if(DEBUG) {\n            logger.log(Level.INFO,\"blowfishEncryption() method ===== passed normal text: { \"+plainText+\" passed key: \"+key+\" }\");\n        }\n        if(key==null) {\n            logger.log(Level.INFO,\"passed key is null using default key\");\n            key=BLOWFISH_SECRET;\n        }\n        ByteArrayOutputStream os= new ByteArrayOutputStream(1024);\n        byte[] keyByte = hexToBytes(key);\n        SecretKeySpec skeySpec = new SecretKeySpec(keyByte, \"Blowfish\");\n        Cipher ecipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n        ecipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] stringByte=plainText.getBytes(\"US-ASCII\");\n\n        byte[] econtent=ecipher.doFinal(stringByte);\n\n        String out= new String(Base64.encodeBase64(econtent), \"US-ASCII\");\n\n        return out;\n    }\n\n    /** Utility method for Blowfish Decryption. This method is synchronised between threads. \n     * <p>NOTE: use the same key for Encryption and Decryption</p>\n     * \n     * @param cipherContent     Cipher Text Byte array to be decrypted\n     * @param key               Key used for Decryption. NOTE: use same key for encryption and decryption\n     * @return String           Plain text String\n     * @throws Exception\n     */\n\n    public synchronized static String blowfishDecryption(String cipherText, String key) throws Exception {\n        // String ciphertext is base 64 endoded string This method returns plain text string\n\n        if(DEBUG) {\n            logger.log(Level.INFO,\"blowfishEncryption() method ===== passed key: \"+key+\" }\");\n        }\n        if(key==null) {\n            logger.log(Level.INFO,\"passed key is null using default key\");\n            key=BLOWFISH_SECRET;\n        }\n\n        byte[] myKeyByte = hexToBytes(key);\n\n        SecretKeySpec skeySpec = new SecretKeySpec(myKeyByte, \"Blowfish\");\n\n        Cipher ecipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n\n        ecipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        byte[] cipherContent=cipherText.getBytes(\"US-ASCII\");\n\n\n        byte[]  dContent=ecipher.doFinal(cipherContent);\n\n        String out=new String(Base64.encodeBase64(dContent), \"US-ASCII\");\n\n        return out;\n    }\n", "idx": 1242}
{"project": "cipher", "commit_id": "Snippet19742236_2467.java", "target": 0, "func": "package cmdCrypto;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\npublic class CmdCrypto {\n\n    public static void main(String[] args) {\n        try{\n            final String strPassPhrase = \"123456789012345678901234\"; //min 24 chars\n\n            String param = \"No body can see me\";\n        System.out.println(\"Text : \" + param);\n\n            SecretKeyFactory factory = SecretKeyFactory.getInstance(\"DESede\");\n            SecretKey key = factory.generateSecret(new DESedeKeySpec(strPassPhrase.getBytes()));\n            Cipher cipher = Cipher.getInstance(\"DESede\");\n\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            String str = DatatypeConverter.printBase64Binary(cipher.doFinal(param.getBytes()));\n        System.out.println(\"Text Encryted : \" + str);\n\n            cipher.init(Cipher.DECRYPT_MODE, key);\n        String str2 = new String(cipher.doFinal(DatatypeConverter.parseBase64Binary(str)));\n        System.out.println(\"Text Decryted : \" + str2);\n\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 1243}
{"project": "cipher", "commit_id": "Snippet27023851_9170.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\n\npublic class EncryptionModule {\n\n    /**\n     * Encrypts\n     */\n    public static String encryptText(String plainText, SecretKey key) throws Exception{\n        Cipher c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] cipherT =  c.doFinal(plainText.getBytes());\n        return new String(cipherT,\"utf-8\");\n    }\n    /**\n     * Decrypts\n     */\n    public static String decryptText(String cipherText, SecretKey key) throws Exception{\n        Cipher c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] clearT =  c.doFinal(cipherText.getBytes());\n        return new String(clearT,\"utf-8\");\n    }\n}\n", "idx": 1244}
{"project": "cipher", "commit_id": "Snippet15682840_38697.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.*;\n\n// encrypt and decrypt using the DES private key algorithm\n\npublic class PrivateExample {\n\n  public static void main (String[] args) throws Exception {\n    String text=new String();\n     text=\"THIS IS AN ENCRYPTION TEST\";\n     byte[] plainText = text.getBytes(\"UTF8\");\n\n    // get a DES private key\n    System.out.println( \"\\nStart generating DES key\" );\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\n    keyGen.init(56);\n    Key key = keyGen.generateKey();\n    System.out.println( \"Finish generating DES key\" );\n\n    // get a DES cipher object and print the provider\n    Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    System.out.println( \"\\n\" + cipher.getProvider().getInfo() );\n    //\n    // encrypt using the key and the plaintext\n    System.out.println( \"\\nStart encryption\" );\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    byte[] cipherText = cipher.doFinal(plainText);\n    System.out.println( \"Finish encryption: \" );\n    System.out.println( new String(cipherText, \"UTF8\") );\n\n    //\n    // decrypt the ciphertext using the same key\n    System.out.println( \"\\nStart decryption\" );\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] newPlainText = cipher.doFinal(cipherText);\n    System.out.println( \"Finish decryption: \" );\n\n    System.out.println( new String(newPlainText, \"UTF8\") );\n  }\n}\n", "idx": 1245}
{"project": "cipher", "commit_id": "Snippet9601932_34057.java", "target": 0, "func": "    public static byte[] EncryptBlowfish(String msg){\n\n    byte[] encrypted =null;\n\n    try {\n\n\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n\n    cipher.init(Cipher.ENCRYPT_MODE, secretkey);\n\n    encrypted = cipher.doFinal(msg.getBytes());\n\n    } catch (){ //NoSuchAlgorithmException, NoSuchPaddingException..etc\n   }  \n\n    return encrypted;\n}\n", "idx": 1246}
{"project": "cipher", "commit_id": "Snippet14936912_38009.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");", "idx": 1247}
{"project": "cipher", "commit_id": "Snippet19294149_2129.java", "target": 0, "func": "package com.example.playvideo2;\n\nimport java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\n\nimport fr.maxcom.http.LocalSingleHttpServer;\nimport fr.maxcom.libmedia.Licensing;\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.os.Bundle;\nimport android.os.Environment;\nimport android.app.Activity;\nimport android.view.Menu;\nimport android.widget.MediaController;\nimport android.widget.VideoView;\n\n\npublic class MainActivity extends Activity implements OnCompletionListener \n{\n    LocalSingleHttpServer mServer;\n    VideoView mVideoView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.video_view);\n\n        Licensing.allow(this);\n        playENCVideo(Environment.getExternalStorageDirectory()\n                + \"/encVideo.mp4\");\n    }\n\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    // Inflate the menu; this adds items to the action bar if it is present.\n    getMenuInflater().inflate(R.menu.main, menu);\n    return true;\n}\n\npublic void playENCVideo(String path) {\n\n    try {\n        Cipher decipher = null;\n\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecretKey skey = kgen.generateKey();\n\n        decipher = Cipher.getInstance(\"AES\");\n\n        decipher.init(Cipher.DECRYPT_MODE, skey);\n\n        mServer = new LocalSingleHttpServer();\n\n        mServer.setCipher(decipher);\n        mServer.start();\n\n        path = mServer.getURL(path);\n\n        mVideoView = (VideoView) findViewById(R.id.videoView1);\n        mVideoView.setVideoPath(path);\n\n        // mVideoView.setMediaController(new MediaController(this));\n        // mVideoView.requestFocus();\n        mVideoView.start();\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n}\n\n@Override\npublic void onCompletion(MediaPlayer mp) {\n    // MediaPlayer.OnCompletionListener interface\n    mServer.stop();\n\n}\n\n}\n", "idx": 1248}
{"project": "cipher", "commit_id": "Snippet21354559_3884.java", "target": 0, "func": "byte[] kd = key.getBytes(\"UTF-8\");\n\nSecretKeySpec ks = new SecretKeySpec(kd, \"Blowfish\");\nCipher cipher = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\");\ncipher.init(Cipher.ENCRYPT_MODE, ks);\n\nbyte[] encrypted = cipher.doFinal(text.getBytes(\"UTF-8\"));\n\nString str = new String(encrypted, \"UTF-8\");\n", "idx": 1249}
{"project": "cipher", "commit_id": "Snippet28852308_10971.java", "target": 0, "func": "private final static String ALGORITM = \"Blowfish\";\nprivate final static String KEY = \"256342ba5781f80a72dad3f90aeee8ba93c7637aaf218a8b8c18c\";\nprivate final static String PLAIN_TEXT = \"here is your text\";\n\npublic void run(View v) {\n\n    try {\n\n        byte[] encrypted = encrypt(KEY, PLAIN_TEXT);\n        Log.i(\"FOO\", \"Encrypted: \" + bytesToHex(encrypted));\n\n        String decrypted = decrypt(KEY, encrypted);\n        Log.i(\"FOO\", \"Decrypted: \" + decrypted);\n\n    } catch (GeneralSecurityException e) {\n        e.printStackTrace();\n    }\n}\n\nprivate byte[] encrypt(String key, String plainText) throws GeneralSecurityException {\n\n    SecretKey secret_key = new SecretKeySpec(key.getBytes(), ALGORITM);\n\n    Cipher cipher = Cipher.getInstance(ALGORITM);\n    cipher.init(Cipher.ENCRYPT_MODE, secret_key);\n\n    return cipher.doFinal(plainText.getBytes());\n}\n\nprivate String decrypt(String key, byte[] encryptedText) throws GeneralSecurityException {\n\n    SecretKey secret_key = new SecretKeySpec(key.getBytes(), ALGORITM);\n\n    Cipher cipher = Cipher.getInstance(ALGORITM);\n    cipher.init(Cipher.DECRYPT_MODE, secret_key);\n\n    byte[] decrypted = cipher.doFinal(encryptedText);\n\n    return new String(decrypted);\n}\n\npublic static String bytesToHex(byte[] data) {\n\n    if (data == null)\n        return null;\n\n    String str = \"\";\n\n    for (int i = 0; i < data.length; i++) {\n        if ((data[i] & 0xFF) < 16)\n            str = str + \"0\" + java.lang.Integer.toHexString(data[i] & 0xFF);\n        else\n            str = str + java.lang.Integer.toHexString(data[i] & 0xFF);\n    }\n\n    return str;\n\n}\n", "idx": 1250}
{"project": "cipher", "commit_id": "Snippet25844026_8114.java", "target": 0, "func": "Cipher.getInstance(\"AES\", bouncyCastleProvider).getProvider()", "idx": 1251}
{"project": "cipher", "commit_id": "Snippet38209754_20180.java", "target": 0, "func": "       public static void encrypt(SecretKey secretKey, String filePath, IvParameterSpec iv){\n    try {\n\n        String file = \"\";\n        // Here you read the cleartext.\n        FileInputStream fis = new FileInputStream(filePath);\n        // This stream write the encrypted text. This stream will be wrapped by another stream.\n        //String filePath2 = filePath+\"enc\";\n\n        file = filePath.substring(0,filePath.length()-5)+\"enc.jpeg\";\n\n        FileOutputStream fos = new FileOutputStream(file);\n        Log.i(TAG, \"Uri = \"+file);\n\n        // Create cipher\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        // Wrap the output stream\n        CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n        // Write bytes\n        int b;\n        byte[] d = new byte[8];\n        while ((b = fis.read(d)) != -1) {\n            cos.write(d, 0, b);\n        }\n\n        // Flush and close streams.\n        cos.flush();\n        cos.close();\n        fis.close();\n\n    }catch(IOException e){\n        e.printStackTrace();\n    }catch (NoSuchAlgorithmException e){\n        e.printStackTrace();\n    }catch(NoSuchPaddingException e){\n        e.printStackTrace();\n    }catch(InvalidKeyException e){\n        e.printStackTrace();\n    }/*catch (InvalidAlgorithmParameterException e){\n        e.printStackTrace();\n    }*/\n}\n", "idx": 1252}
{"project": "cipher", "commit_id": "Snippet16369787_39313.java", "target": 0, "func": "Cipher ecipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\",\"SunJCE\");\n", "idx": 1253}
{"project": "cipher", "commit_id": "Snippet23080032_5443.java", "target": 0, "func": "    private String toBase64Crypt(String cryptString) {\n    try {\n        SecretKeySpec key = new SecretKeySpec(pwd.getBytes(\"UTF8\"), \"AES\");\n\n        byte[] cryptByte = cryptString.getBytes(\"UTF8\"); \n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        cryptString = Base64.encodeToString(cipher.doFinal(cryptByte),Base64.DEFAULT);\n\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    }\n\n    return cryptString;\n}\n", "idx": 1254}
{"project": "cipher", "commit_id": "Snippet26016064_8248.java", "target": 0, "func": "public class Test extends JPanel implements ActionListener,\n        PropertyChangeListener {\n\n    private JProgressBar progressBar;\n    private JButton startButton;\n    private JTextArea encryptedOutput;\n    private JTextArea decryptedOutput;\n    private Task task;\n\n    Key aesKey;\n    Cipher cipher;\n    String key = \"Code1234Code1234\"; // 128 bit key\n\n    class Task extends SwingWorker<Void, Void> {\n        @Override\n        public Void doInBackground() {\n            int progress = 0;\n            // Initialize progress property.\n            setProgress(0);\n\n            try {\n\n                JFileChooser fileopen = new JFileChooser();\n                FileFilter filter = new FileNameExtensionFilter(\"txt files\",\n                        \"txt\");\n                fileopen.addChoosableFileFilter(filter);\n\n                File file = null;\n                String fileName = \"\";\n                int ret = fileopen.showDialog(null, \"Open file\");\n\n                if (ret == JFileChooser.APPROVE_OPTION) {\n                    file = fileopen.getSelectedFile();\n                    fileName = file.getName();\n\n                    encryptedOutput.setText(String.format(\n                            \"Encrypted Output :  %s\\t\\n\\n\", fileName));\n                    decryptedOutput.setText(String.format(\n                            \"Decrypted Output  : %s\\t\\n\\n\", fileName));\n                    BufferedReader in = new BufferedReader(new FileReader(file));\n                    String line = in.readLine();\n                    long readLength = 0;\n                    long totalLength = file.length();\n                    double lengthPerPercent = 100.0 / totalLength;\n                    // added dummy delay because encryption takes very less time\n                    // in MVCE\n                    Thread.sleep(1000);\n                    while (line != null) {\n                        try {\n\n                            Thread.sleep(100);\n                            // encrypt the text\n                            cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n                            byte[] encrypted = cipher.doFinal(line.getBytes());\n\n                            encryptedOutput.append(String.format(\"%s\\n\",\n                                    new String(encrypted)));\n\n                            // decrypt the text\n                            cipher.init(Cipher.DECRYPT_MODE, aesKey);\n                            String decrypted = new String(\n                                    cipher.doFinal(encrypted));\n                            decryptedOutput.append(String.format(\"%s\\n\",\n                                    decrypted));\n\n                            // calculate progress.\n                            readLength += line.length();\n                            progress = (int) (lengthPerPercent * readLength);\n                            setProgress(Math.min(progress, 100));\n                            line = in.readLine();\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n            return null;\n        }\n\n        /*\n         * Executed in event dispatching thread\n         */\n        @Override\n        public void done() {\n            setProgress(100);\n            Toolkit.getDefaultToolkit().beep();\n            startButton.setEnabled(true);\n\n            // turn off the wait cursor\n            setCursor(null);\n        }\n    }\n\n    public Test() {\n\n        super(new BorderLayout());\n\n        // Create key and cipher\n        aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        try {\n            cipher = Cipher.getInstance(\"AES\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        progressBar = new JProgressBar(0, 100);\n        progressBar.setValue(0);\n        progressBar.setStringPainted(true);\n\n        encryptedOutput = new JTextArea(20, 50);\n        encryptedOutput.setMargin(new Insets(5, 5, 5, 5));\n        encryptedOutput.setEditable(false);\n        encryptedOutput.setLineWrap(true);\n\n        decryptedOutput = new JTextArea(20, 50);\n        decryptedOutput.setMargin(new Insets(5, 5, 5, 5));\n        decryptedOutput.setEditable(false);\n        decryptedOutput.setLineWrap(true);\n\n        startButton = new JButton(\"Start Encoding\");\n        startButton.setActionCommand(\"start\");\n        startButton.addActionListener(this);\n\n        JPanel panel = new JPanel();\n        add(panel, BorderLayout.PAGE_START);\n        panel.add(progressBar, BorderLayout.LINE_START);\n        add(new JScrollPane(encryptedOutput), BorderLayout.LINE_START);\n        add(new JScrollPane(decryptedOutput), BorderLayout.LINE_END);\n        panel.add(startButton, BorderLayout.PAGE_END);\n        setBorder(BorderFactory.createEmptyBorder(50, 50, 50, 50));\n\n    }\n\n    public void actionPerformed(ActionEvent evt) {\n        startButton.setEnabled(false);\n        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n        task = new Task();\n        task.addPropertyChangeListener(this);\n        task.execute();\n    }\n\n    /**\n     * Invoked when task's progress property changes.\n     */\n    public void propertyChange(PropertyChangeEvent evt) {\n        if (evt.getPropertyName().equals(\"progress\")) {\n            int progress = (Integer) evt.getNewValue();\n            progressBar.setValue(progress);\n            encryptedOutput.append(\"\\n\\n\");\n        }\n    }\n\n    private static void createAndShowGUI() {\n        JFrame frame = new JFrame(\"Test\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JComponent newContentPane = new Test();\n        newContentPane.setOpaque(true);\n        frame.setContentPane(newContentPane);\n        frame.pack();\n        frame.setVisible(true);\n    }\n\n    public static void main(String[] args) {\n        javax.swing.SwingUtilities.invokeLater(new Runnable() {\n            public void run() {\n                createAndShowGUI();\n            }\n        });\n    }\n}\n", "idx": 1255}
{"project": "cipher", "commit_id": "Snippet4985827_31440.java", "target": 0, "func": "SecretKeyFactory sf = SecretKeyFactory.getInstance(\"DES\");\nbyte[] in = \"test\".getBytes(\"UTF-8\");\n\nCipher c1 = Cipher.getInstance(\"DES\");\nc1.init(Cipher.ENCRYPT_MODE, sf.generateSecret(new DESKeySpec(\n   new byte[] {0x10,0x20,0x30,0x40,0x50,0x60,0x70,(byte) 0x80})));\nbyte[] r1 = c1.doFinal(in);\n\nCipher c2 = Cipher.getInstance(\"DES\");\nc2.init(Cipher.ENCRYPT_MODE, sf.generateSecret(new DESKeySpec(\n    new byte[] {0x11,0x21,0x31,0x41,0x51,0x61,0x71,(byte) 0x81})));\nbyte[] r2 = c2.doFinal(in);\n\nassertArrayEquals(r1, r2);  \n", "idx": 1256}
{"project": "cipher", "commit_id": "Snippet26279014_8468.java", "target": 0, "func": " Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n", "idx": 1257}
{"project": "cipher", "commit_id": "Snippet9928409_34339.java", "target": 0, "func": "    moteurCryptage = Cipher.getInstance(\"PBEWithMD5AndDES\");\n\n        PBEKeySpec sp\u00e9cifCl\u00e9=new PBEKeySpec(mdp.toCharArray());\n        SecretKeyFactory usine\u00e0Clefs=SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey cl\u00e9=null;\n        try {\n            cl\u00e9 = usine\u00e0Clefs.generateSecret(sp\u00e9cifCl\u00e9);\n        } catch (InvalidKeySpecException ex) {\n            Logger.getLogger(DiskUtilView.class.getName()).log(Level.SEVERE, null, ex);\n        }\n\n    moteurCryptage.init(Cipher.ENCRYPT_MODE,cl\u00e9);\n        byte[] param\u00e8tresEncodage;\n        try {\n            param\u00e8tresEncodage=moteurCryptage.getParameters().getEncoded();\n        } catch (IOException ex) {\n            param\u00e8tresEncodage=null;\n        }\n\n    destination=moteurCryptage.update(source1.getBytes());\n    destination=moteurCryptage.doFinal(source2.getBytes());\n\n    moteurCryptage.init(Cipher.DECRYPT_MODE,cl\u00e9,param\u00e8tresEncodage);\n\n    source=new String(moteurCryptage.doFinal(destination));\n", "idx": 1258}
{"project": "cipher", "commit_id": "Snippet34409246_16404.java", "target": 0, "func": "package get;\n\nimport java.io.BufferedReader;\nimport java.io.ByteArrayInputStream;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\n\npublic class CipherExample {\n\n    public static void main(String[] args) {\n        try {\n            String key = \"squirrel123\"; // needs to be at least 8 characters for DES\n\n            FileInputStream fis = new FileInputStream(\"/home/anand/Desktop/encrypt/c/cute.jpg\");\n            FileOutputStream fos = new FileOutputStream(\"/home/anand/Desktop/encrypt/c/encrypted.jpg\");\n            encrypt(key, fis, fos);\n\n            FileInputStream fis2 = new FileInputStream(\"/home/anand/Desktop/encrypt/c/encrypted.jpg\");\n            FileOutputStream fos2 = new FileOutputStream(\"/home/anand/Desktop/encrypt/c/decrypted.jpg\");\n            decrypt(key, fis2, fos2);\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void encrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.ENCRYPT_MODE, is, os);\n    }\n\n    public static void decrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);\n    }\n\n    public static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n\n        DESKeySpec dks = new DESKeySpec(key.getBytes());\n        SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey desKey = skf.generateSecret(dks);\n        Cipher cipher = Cipher.getInstance(\"DES\"); // DES/ECB/PKCS5Padding for SunJCE\n\n        if (mode == Cipher.ENCRYPT_MODE) {\n            cipher.init(Cipher.ENCRYPT_MODE, desKey);\n            CipherInputStream cis = new CipherInputStream(is, cipher);\n            doCopy(cis, os);\n        } else if (mode == Cipher.DECRYPT_MODE) {\n            cipher.init(Cipher.DECRYPT_MODE, desKey);\n\n            // PipedInputStream pis = new PipedInputStream();\n               // PipedOutputStream pos = new PipedOutputStream(pis);\n\n            CipherOutputStream cos = new CipherOutputStream(os, cipher);\n            //doCopying(is);\n\n            doCopy(is, os);\n        }\n    }\n\n    public static void doCopy(InputStream is, OutputStream os) throws IOException {\n        byte[] bytes = new byte[64];\n        int numBytes;\n        while ((numBytes = is.read(bytes)) != -1) {\n            os.write(bytes, 0, numBytes);\n        }\n        os.flush();\n        os.close();\n        is.close();\n\n    }\n\n\n    }\n", "idx": 1259}
{"project": "cipher", "commit_id": "Snippet30047067_12127.java", "target": 0, "func": "try {\n\n            SecretKeySpec secretKeySpec = new SecretKeySpec(byteKey, \"DES\");\n\n\n\n            Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); //Demande l'utilisation de l'algorithme DES, en utilisant le mode ECB (Electronic CodeBook) et le style de padding PKCS-5.\n            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n            byte[] myCipherText = cipher.doFinal(plainText);\n            byte[] test = (new String(myCipherText)).getBytes();\n\n\n             cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n             byte[] newPlainText = cipher.doFinal(test);\n             System.out.println(new String(newPlainText));\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n", "idx": 1260}
{"project": "cipher", "commit_id": "Snippet43027584_25150.java", "target": 0, "func": "public class Symmetric2 {\n\n    public static void main(String[] args) throws Exception{\n        // TODO Auto-generated method stub\n\n        FileInputStream inFile = new FileInputStream(\"C:/Users/Administrator/Desktop/original.bmp\");\n        FileOutputStream outFile = new FileOutputStream(\"C:/Users/Administrator/Desktop/CBC_original.bmp\");\n\n        KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n        kg.init(new SecureRandom());\n\n        SecretKey sk = kg.generateKey();\n\n        Cipher cp = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        byte[] ivBytes = new byte[]{\n                0x00, 0x01,0x02, 0x03, 0x00, 0x00, 0x00, 0x01       };\n        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n\n        cp.init(Cipher.ENCRYPT_MODE, sk, ivSpec); //CBC\ubc29\uc2dd\uc774\ubbc0\ub85c \uc778\uc790\uac00 3\uac1c\uc774\ub2e4.\n\n        byte[] input = new byte[64]; //getBytes() \n        int bytesRead;\n        while((bytesRead = inFile.read(input)) != -1){\n            byte[] output = cp.update(input,0,bytesRead);\n            if(output != null)\n                outFile.write(output);\n        }\n        byte[] output = cp.doFinal();\n        if(output != null)\n            outFile.write(output);\n\n        inFile.close();\n        outFile.flush();\n        outFile.close();\n    }\n\n}\n", "idx": 1261}
{"project": "cipher", "commit_id": "Snippet25571431_7885.java", "target": 0, "func": "public class SecureSocket extends Socket {\n\n    private SecretKey seckey;\n\n    private InputStream in = null;\n    private OutputStream out = null;\n    private CipherInputStream cin = null;\n    private CipherOutputStream cout = null;\n\n    public SecureSocket() throws IOException {\n    }\n\n    public SecureSocket(String address, int port) throws UnknownHostException,\n            IOException, NoSuchAlgorithmException, NoSuchPaddingException,\n            InvalidKeyException {\n\n        super(address, port);\n\n        if (out == null) {\n            this.out = super.getOutputStream();\n        }\n\n        if (in == null) {\n            this.in = super.getInputStream();\n        }\n\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom random = new SecureRandom();\n        keyGen.init(random);\n        seckey = keyGen.generateKey();\n\n        byte[] mess = EncryptionManager.rsaEncryptPublic(seckey.getEncoded());\n\n        // writing the initial message with the AES encryption key\n        out.write(mess);\n\n        // Initialization of the Cipher streams\n        Cipher cipherEn = Cipher.getInstance(\"AES\");\n        cipherEn.init(Cipher.ENCRYPT_MODE, seckey);\n        Cipher cipherDc = Cipher.getInstance(\"AES\");\n        cipherDc.init(Cipher.DECRYPT_MODE, seckey);\n\n        cout = new CipherOutputStream(out, cipherEn);\n        cin = new CipherInputStream(in, cipherDc);\n\n    }\n\n    public InputStream getInputStream() throws IOException {\n        if (cin == null)\n            return super.getInputStream();\n        return cin;\n    }\n\n    public OutputStream getOutputStream() throws IOException {\n        if (cout == null)\n            return super.getOutputStream();\n        return cout;\n    }\n\n    public synchronized void close() throws IOException {\n        OutputStream o = getOutputStream();\n        o.flush();\n        super.close();\n    }\n\n    public void setkey(SecretKey seckey) throws NoSuchAlgorithmException,\n            NoSuchPaddingException, InvalidKeyException, IOException {\n\n        this.seckey = seckey;\n\n        Cipher cipherEn = Cipher.getInstance(\"AES\");\n        cipherEn.init(Cipher.ENCRYPT_MODE, seckey);\n\n        cout = new CipherOutputStream(super.getOutputStream(), cipherEn);\n\n        Cipher cipherDc = Cipher.getInstance(\"AES\");\n        cipherDc.init(Cipher.DECRYPT_MODE, seckey);\n\n        cin = new CipherInputStream(super.getInputStream(), cipherDc);\n    }\n\n}\n", "idx": 1262}
{"project": "cipher", "commit_id": "Snippet6481627_32154.java", "target": 0, "func": "String key = \"av45k1pfb024xa3bl359vsb4esortvks74sksr5oy4s5serondry84jsrryuhsr5ys49y5seri5shrdliheuirdygliurguiy5ru\";\ntry {\n    Cipher c = Cipher.getInstance(\"ARCFOUR\");\n\n    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"ARCFOUR\");\n    c.init(Cipher.DECRYPT_MODE, secretKeySpec);\n\n    return new String(c.doFinal(Hex.decodeHex(data.toCharArray())), \"UTF-8\");\n\n} catch (InvalidKeyException e) {\n    throw new CryptoException(e);\n}\n", "idx": 1263}
{"project": "cipher", "commit_id": "Snippet46576918_28708.java", "target": 0, "func": "private static KeyGenerator key_gen = null;\nprivate static SecretKey sec_key = null;\nprivate static byte[] raw = null;\nprivate static SecretKeySpec sec_key_spec = null;\nprivate static Cipher sec_cipher = null;\n\n//for DSA\nprivate static KeyPairGenerator keypairgen = null;\nprivate static KeyPair keypair = null;\nprivate static DSAPrivateKey private_key = null;\nprivate static DSAPublicKey public_key = null;\nprivate static Signature dsa_sig = null;\nprivate static SecureRandom secRan = null;\npublic static void main(String args[])\n {\n    FileInputStream in_file = null;\n    FileInputStream in_file2 = null;\n    FileOutputStream out_file = null;\n    String decrypted_str = new String();\n    int read_bytes = 0;\n\n    try{\n        //open files\n        in_file = new FileInputStream(args[0]);\n        byte[] seed = args[1].getBytes();\n\n        //encrypt file with AES\n        //key setup - generate 128 bit key\n        SecureRandom rand = new SecureRandom();\n        rand.setSeed(seed);\n\n        key_gen = KeyGenerator.getInstance(\"AES\");\n        key_gen.init(128, rand);\n        sec_key = key_gen.generateKey();\n\n        //get key material in raw form\n        raw = sec_key.getEncoded();\n        sec_key_spec = new SecretKeySpec(raw, \"AES\");\n\n        //create the cipher object that uses AES as the algorithm\n        sec_cipher = Cipher.getInstance(\"AES\"); \n\n        //decrypt file\n        byte[] ciphtext = new byte[in_file.available()];\n        in_file.read(ciphtext); \n\n        decrypted_str = aes_decrypt(ciphtext);\n\n        byte[] decryptedBytes = decrypted_str.getBytes();\n        byte[] decryptedMSG = new byte[decryptedBytes.length - 20];\n        byte[] decryptedHash = new byte[20];\n\n        System.out.print(decrypted_str);\n        System.out.print(\"\\n\");\n        for(int i = 0; i < decryptedMSG.length; i++)\n            decryptedMSG[i] = decryptedBytes[i];\n\n        for(int i = 0; i < decryptedHash.length; i++)\n            decryptedHash[i] = decryptedBytes[i+ decryptedMSG.length];\n\n        String decryptedCalcSHA = toHexString(sha1_hash(decryptedMSG));\n        String fileSHA = toHexString(decryptedHash);\n\n        System.out.println(\"DEC:\" +decryptedCalcSHA);\n        System.out.println(\"FIL:\" +fileSHA);\n    }\n    catch(Exception e){\n        e.printStackTrace();\n    }\n    finally{\n\n        try{\n            if (in_file != null){\n                in_file.close();\n            }\n            if(out_file != null){\n                out_file.close();\n            }\n            if(in_file2 != null){\n                in_file2.close();\n            }\n        } catch(Exception e2)\n        {\n            e2.printStackTrace();\n        }\n\n    }\n}\n", "idx": 1264}
{"project": "cipher", "commit_id": "Snippet18422207_1491.java", "target": 0, "func": "        cis.close();\n\n        is.close();\n\n        os.close();\n\n    } catch (IOException e) {\n\n        System.out.println(\"I/O Error:\" + e.getMessage());\n\n    }\n\n}\n\npublic void run() {\n    try {\n\n        SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n\n        AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);\n\n\n        dcipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        dcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n\n        decrypt(input, new FileOutputStream(\"cleartext-reversed.txt\"));\n\n        FileWriter out = new FileWriter(\"test.txt\");\n        BufferedWriter bufWriter = new BufferedWriter(out);\n\n\n        System.out.println(\"receive from : \"\n                + clientSocket.getInetAddress() + \":\"\n                + clientSocket.getPort());\n        //Step 1 read length\n        int nb = input.read();\n        System.out.println(\"Read Length\" + nb);\n\n        String enctext = Character.toString(input.readChar());\n        Integer.toString(nb);\n        //Step 2 read byte\n\n        String st = new String(\"see if it can write\");\n        bufWriter.append(enctext);\n        bufWriter.close();\n\n\n        //Step 1 send length\n        output.writeInt(st.length());\n        //Step 2 send length\n        output.writeBytes(st); // UTF is a string encoding\n        //  output.writeUTF(data);\n    } catch (NoSuchPaddingException ex) {\n        Logger.getLogger(Connection.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidKeyException ex) {\n        Logger.getLogger(Connection.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidAlgorithmParameterException ex) {\n        Logger.getLogger(Connection.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(Connection.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (EOFException e) {\n        System.out.println(\"EOF:\" + e.getMessage());\n    } catch (IOException e) {\n        System.out.println(\"IO:\" + e.getMessage());\n    } finally {\n        try {\n            clientSocket.close();\n        } catch (IOException e) {/*close failed*/\n\n        }\n    }\n}\n", "idx": 1265}
{"project": "cipher", "commit_id": "Snippet17520949_693.java", "target": 0, "func": "public static String encryptDesECB(String data) {\n    try {\n        DESKeySpec keySpec = newDESKeySpec(\"431654625bd37673e3b00359676154074a04666a\".getBytes(\"UTF8\"));\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey key = keyFactory.generateSecret(keySpec);\n\n        // ENCODE plainTextPassword String\n        byte[] cleartext = data.getBytes(\"UTF8\");\n\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        Logger.log(Log.INFO, new String(cipher.doFinal(cleartext)));\n\n        String encrypedPwd = Base64.encodeToString(cipher.doFinal(cleartext), Base64.DEFAULT);\n\n        Logger.log(Log.INFO, encrypedPwd);\n\n        return encrypedPwd;\n\n    } catch (Exception e) {\n        Logger.log(e);\n        return null;\n    }\n}\n", "idx": 1266}
{"project": "cipher", "commit_id": "Snippet11315100_35464.java", "target": 0, "func": "import javax.crypto.*\nimport javax.crypto.spec.*\n\ndef key1 = new SecretKeySpec(\"C67DDB0CE47D27FA\".decodeHex(), \"DES\")\ndef key2 = new SecretKeySpec(\"F6F32ECA5C99E8AF\".decodeHex(), \"DES\")\ndef plaintext = (\"ff00\" + \"000000000000\").decodeHex() // manually zero pad\n\ndef c1 = Cipher.getInstance(\"DES/CBC/NoPadding\")\nc1.init(Cipher.ENCRYPT_MODE, key1, new IvParameterSpec(new byte[8]))\ndef cipherText1 = c1.doFinal(plaintext) \n\ndef c2 = Cipher.getInstance(\"DES/CBC/NoPadding\")\nc2.init(Cipher.DECRYPT_MODE, key2, new IvParameterSpec(new byte[8]))\ndef cipherText2 = c2.doFinal(cipherText1)\n\ndef c3 = Cipher.getInstance(\"DES/ECB/NoPadding\")\nc3.init(Cipher.ENCRYPT_MODE, key1)\ndef cipherText3 = c3.doFinal(cipherText2)\n\nassert cipherText3.encodeHex().toString() == \"4bc0479d7889cf8e\"\n", "idx": 1267}
{"project": "cipher", "commit_id": "Snippet5636521_31732.java", "target": 0, "func": "public  void initKey(String passwd, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchProviderException{\n\n    byte[] localsalt = salt; \n   PBEKeySpec password = new PBEKeySpec(passwd.toCharArray(),localsalt, 1024,128);//, localsalt, 1000, 128);  //128bit enc aes\n   SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBEWithMD5And128BitAES-CBC-OpenSSL\",\"BC\");  \n   PBEKey key = (PBEKey) factory.generateSecret(password);  \n   encKey = new SecretKeySpec(key.getEncoded(), \"AES\");\n}\n\n\npublic   String txt2enc(String etxt) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {\n\n       final Cipher cipher = Cipher.getInstance(\"AES\");//AES       \n       cipher.init(Cipher.ENCRYPT_MODE, encKey);      \n\n       byte[] encrypted = cipher.doFinal((etxt).getBytes(\"UTF-8\"));\n       return Base64.encodeToString(encrypted, 0);\n}\n\n//decryption\npublic  String txt2dec(String dtxt) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException{\n\n    final Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, encKey);\n    byte[] decrypt = cipher.doFinal(Base64.decode(dtxt, 0));\n    return new String(decrypt);//return Base64.encodeToString(decrypt, 0);\n}\n", "idx": 1268}
{"project": "cipher", "commit_id": "Snippet20136740_2801.java", "target": 0, "func": "public class Enc {\n\npublic static class Map extends Mapper<LongWritable, Text, Text, IntWritable> {\nprivate Text word = new Text();\npublic void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n            String strDataToEncrypt = new String();\n            String strCipherText = new String();\n\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n            keyGen.init(128);\n            SecretKey secretKey = keyGen.generateKey();\n\n            Cipher aesCipher = Cipher.getInstance(\"AES\");\n            aesCipher.init(Cipher.ENCRYPT_MODE,secretKey);\n            strDataToEncrypt = value.toString();\n\n            byte[] byteDataToEncrypt = strDataToEncrypt.getBytes();\n            byte[] byteCipherText = aesCipher.doFinal(byteDataToEncrypt); \n            strCipherText = new BASE64Encoder().encode(byteCipherText);\n            System.out.println(\"cipher text: \" +strCipherText);\n\n                    String cipherString =  new String(strCipherText);\n                    context.write(key, new Text(cipherString));\n\n                }\n    } \n\n    public static void main(String[] args) throws Exception {\n        Configuration conf = new Configuration();\n\n        Job job = new Job(conf, \"Enc\");\n        job.setJarByClass(Enc.class);\n\n        job.setOutputKeyClass(LongWritable.class);\n        job.setOutputValueClass(Text.class);\n\n        job.setMapperClass(Map.class);\n\n        job.setInputFormatClass(TextInputFormat.class);\n        job.setOutputFormatClass(TextOutputFormat.class);\n\n        FileInputFormat.addInputPath(job, new Path(args[0]));\n        FileOutputFormat.setOutputPath(job, new Path(args[1]));\n\n        job.waitForCompletion(true);\n    }        \n}\n", "idx": 1269}
{"project": "cipher", "commit_id": "Snippet43581720_25733.java", "target": 0, "func": "package nomad;\n\nimport java.security.*;\nimport java.security.spec.InvalidKeySpecException;\nimport javax.crypto.*;\nimport sun.misc.*;\n\npublic class AESencrp {\n\n     private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = \n        new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't',\n'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\n\npublic static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encVal);\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n}\n\n}\n\n\npackage nomad;\n\npublic class Checker {\n\n    public static void main(String[] args) throws Exception {\n\n        String password = \"mypassword\";\n        String passwordEnc = AESencrp.encrypt(password);\n        String passwordDec = AESencrp.decrypt(passwordEnc);\n\n        System.out.println(\"Plain Text : \" + password);\n        System.out.println(\"Encrypted Text : \" + passwordEnc);\n        System.out.println(\"Decrypted Text : \" + passwordDec);\n    }\n}\n", "idx": 1270}
{"project": "cipher", "commit_id": "Snippet13965095_37392.java", "target": 0, "func": "public static void main(String args[]) throws Exception {\n\nString jar = \"http://site.com/api/rsc/test.jar\";\nList<URL> urls = new ArrayList<URL>();\nurls.add(getURL(jar));\nURL jarurl = urls.get(0);\n\nObjectInputStream ois = new ObjectInputStream((new URL(\"http://site.com/api/rsc/key_1.txt\").openStream()));\nObject o = ois.readObject();\nDESKeySpec ks = new DESKeySpec((byte[])o);\nSecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\nSecretKey key = skf.generateSecret(ks);\n\nCipher c = Cipher.getInstance(\"DES/CFB8/NoPadding\");\nc.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec((byte[]) ois.readObject()));\nCipherInputStream cis = new CipherInputStream((jarurl.openStream()), c);\n\nJarInputStream jis = new JarInputStream(cis);\nString main = jis.getManifest().getMainAttributes().getValue(\"Main-Class\");\nString classpaths[] = jis.getManifest().getMainAttributes().getValue(\"Class-Path\").split(\" \");\n\nfor (String classpath: classpaths) {\n    urls.add(getURL(classpath));\n}\n\nURLClassLoader loader = new URLClassLoader(urls.toArray(new URL[0]));\nClass<?> cls = loader.loadClass(main);\nThread.currentThread().setContextClassLoader(loader);\nMethod m = cls.getMethod(\"main\", new Class[]{new String[0].getClass()});\nm.invoke(null, new Object[]{args});\n", "idx": 1271}
{"project": "cipher", "commit_id": "Snippet35983553_17830.java", "target": 0, "func": "public static void encryptMe(String  vidName)\n{\n    try {\n        File rawData = new File(Environment.getExternalStoragePublicDirectory( Environment.DIRECTORY_DOWNLOADS), \"HSDownloads\");\n        File fiss = new File(rawData, vidName);\n        Log.d(TAG,\"input file  \"+fiss.toString());\n        FileInputStream in = new FileInputStream(fiss);\n\n        File encreptedFileDirectory = new File(Environment.getExternalStoragePublicDirectory( Environment.DIRECTORY_DOWNLOADS), \"HSEncript\");\n\n        if(encreptedFileDirectory.exists())\n        {\n\n        }\n        else\n        {\n            encreptedFileDirectory.mkdirs();\n        }\n        File outfile = new File(encreptedFileDirectory,vidName);\n        OutputStream out= new FileOutputStream(outfile);\n\n        byte[] skey = AppUtiles.generateKey(\"qwertyuiopasdfgh\");\n        SecretKeySpec key = new SecretKeySpec(skey, \"AES\");\n\n\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.ENCRYPT_MODE, key);\n\n        out = new CipherOutputStream(out, c);\n        int count = 0;\n        byte[] buffer = new byte[128*1024];\n        while ((count = in.read(buffer)) >= 0)\n        {\n            out.write(buffer, 0, count);\n            Log.d(TAG,\"inside while loop encryptMe()\"+(count = in.read(buffer)));\n        }\n       out.close();\n    }\n    catch(Exception e)\n    {\n        Log.d(TAG,\"exception encryption >\"+Log.getStackTraceString(e));\n    }\n    finally \n    {\n        Log.d(TAG,\"Inside finally   \");\n    }\n}\n", "idx": 1272}
{"project": "cipher", "commit_id": "Snippet33765651_15793.java", "target": 0, "func": "private static String key = \"012345678901234567890123\";\n\npublic static void main(String[] args) throws Exception {\n    String text = \"test\";\n    String codedtext = encrypt(text);\n    //String decodedtext = decrypt(codedtext);\n\n    System.out.println(new String(codedtext));\n    //System.out.println(decodedtext); \n}\n\npublic static String encrypt(String message) throws Exception {\n    MessageDigest md = MessageDigest.getInstance(\"md5\");\n    byte[] digestOfPassword = md.digest(key.getBytes(\"unicode\"));\n    byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n    //for (int j = 0, k = 16; j < 8;) {\n    //  keyBytes[k++] = keyBytes[j++];\n    //}\n\n    SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n    Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n    byte[] plainTextBytes = message.getBytes();\n    byte[] cipherText = cipher.doFinal(plainTextBytes);\n\n    String output = Base64.encode(cipherText);\n\n    return output;\n}\n\npublic static String decrypt(String message) throws Exception {\n    byte[] messageBytes = Base64.decode(message);\n\n    MessageDigest md = MessageDigest.getInstance(\"md5\");\n    byte[] digestOfPassword = md.digest(key.getBytes());\n    byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n    for (int j = 0, k = 16; j < 8;) {\n        keyBytes[k++] = keyBytes[j++];\n    }\n\n    SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n    Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n    byte[] plainText = decipher.doFinal(messageBytes);\n\n    return new String(plainText);\n}\n", "idx": 1273}
{"project": "cipher", "commit_id": "Snippet28700464_10772.java", "target": 0, "func": "public FunctionClass() {  \n         try {  \n            keyGenerator = KeyGenerator.getInstance(\"Blowfish\");  \n            secretKey = keyGenerator.generateKey();  \n\n           cipher = Cipher.getInstance(\"Blowfish\");  \n        } catch (NoSuchPaddingException ex) {  \n           System.out.println(ex);  \n        } catch (NoSuchAlgorithmException ex) {  \n            System.out.println(ex);  \n       }  \n}\n", "idx": 1274}
{"project": "cipher", "commit_id": "Snippet22130407_4546.java", "target": 0, "func": "import java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class Encryption {\n    public static void main(String args[]) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{\n                String t = \"Testing\";\n\n                byte[] dataToSend = t.getBytes();\n                byte[] key = new byte[16];\n\n                Cipher c = Cipher.getInstance(\"AES\");\n                SecretKeySpec k = new SecretKeySpec(key, \"AES\");\n                c.init(Cipher.ENCRYPT_MODE, k);\n                byte[] encryptedData = c.doFinal(dataToSend);\n                System.out.println(encryptedData);\n\n                byte[] key2 = new byte[16];\n                        byte[] encryptedData2 = encryptedData;\n\n                        Cipher c2 = Cipher.getInstance(\"AES\");\n                        SecretKeySpec k2 =\n                          new SecretKeySpec(key2, \"AES\");\n                        c2.init(Cipher.DECRYPT_MODE, k2);\n                        byte[] data = c.doFinal(encryptedData);\n                        System.out.println(data);\n\n    }\n}\n", "idx": 1275}
{"project": "cipher", "commit_id": "Snippet9181030_33730.java", "target": 0, "func": "public static byte [] ecbAesEncrypt(byte [] key, byte [] currentVector) {\n        SecretKeySpec keySpec = null;\n        Cipher cipher = null;\n        byte [] encryptedValue = null;\n\n        try {\n            keySpec = new SecretKeySpec(key, \"AES\");\n\n            cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n            cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n\n            encryptedValue = cipher.doFinal(currentVector);\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n\n        if (DEBUG)\n            printHex(\"AES-ECB encrypt: \", encryptedValue);\n\n        return encryptedValue;\n    }\n", "idx": 1276}
{"project": "cipher", "commit_id": "Snippet39622158_21544.java", "target": 0, "func": "    package xxx.serversocket.encryption2;\n\n/*\n * Copyright (c) 1997, 2001, Oracle and/or its affiliates. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n *   - Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n *\n *   - Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *\n *   - Neither the name of Oracle nor the names of its\n *     contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport java.io.*;\nimport java.math.BigInteger;\nimport java.security.*;\nimport java.security.spec.*;\nimport java.security.interfaces.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport javax.crypto.interfaces.*;\nimport com.sun.crypto.provider.SunJCE;\n\n/**\n * This program executes the Diffie-Hellman key agreement protocol\n * between 2 parties: Alice and Bob.\n *\n * By default, preconfigured parameters (1024-bit prime modulus and base\n * generator used by SKIP) are used.\n * If this program is called with the \"-gen\" option, a new set of\n * parameters is created.\n */\n\npublic class DHKeyAgreement2 {\n\n    private DHKeyAgreement2() {}\n\n    public static void main(String argv[]) {\n        try {\n            String mode = \"USE_SKIP_DH_PARAMS\";\n\n            DHKeyAgreement2 keyAgree = new DHKeyAgreement2();\n\n            if (argv.length > 1) {\n                keyAgree.usage();\n                throw new Exception(\"Wrong number of command options\");\n            } else if (argv.length == 1) {\n                if (!(argv[0].equals(\"-gen\"))) {\n                    keyAgree.usage();\n                    throw new Exception(\"Unrecognized flag: \" + argv[0]);\n                }\n                mode = \"GENERATE_DH_PARAMS\";\n            }\n\n            keyAgree.run(mode);\n        } catch (Exception e) {\n            System.err.println(\"Error: \" + e);\n            System.exit(1);\n        }\n    }\n\n    private void run(String mode) throws Exception {\n\n        DHParameterSpec dhSkipParamSpec;\n\n        if (mode.equals(\"GENERATE_DH_PARAMS\")) {\n            // Some central authority creates new DH parameters\n            System.out.println\n                    (\"Creating Diffie-Hellman parameters (takes VERY long) ...\");\n            AlgorithmParameterGenerator paramGen\n                    = AlgorithmParameterGenerator.getInstance(\"DH\");\n            paramGen.init(512);\n            AlgorithmParameters params = paramGen.generateParameters();\n            dhSkipParamSpec = (DHParameterSpec)params.getParameterSpec\n                    (DHParameterSpec.class);\n        } else {\n            // use some pre-generated, default DH parameters\n            System.out.println(\"Using SKIP Diffie-Hellman parameters\");\n            dhSkipParamSpec = new DHParameterSpec(skip1024Modulus,\n                    skip1024Base);\n        }\n\n        /*\n         * Alice creates her own DH key pair, using the DH parameters from\n         * above\n         */\n        System.out.println(\"ALICE: Generate DH keypair ...\");\n        KeyPairGenerator aliceKpairGen = KeyPairGenerator.getInstance(\"DH\");\n        aliceKpairGen.initialize(dhSkipParamSpec);\n        KeyPair aliceKpair = aliceKpairGen.generateKeyPair();\n\n        // Alice creates and initializes her DH KeyAgreement object\n        System.out.println(\"ALICE: Initialization ...\");\n        KeyAgreement aliceKeyAgree = KeyAgreement.getInstance(\"DH\");\n        aliceKeyAgree.init(aliceKpair.getPrivate());\n\n        // Alice encodes her public key, and sends it over to Bob.\n        byte[] alicePubKeyEnc = aliceKpair.getPublic().getEncoded();\n\n        /*\n         * Let's turn over to Bob. Bob has received Alice's public key\n         * in encoded format.\n         * He instantiates a DH public key from the encoded key material.\n         */\n        KeyFactory bobKeyFac = KeyFactory.getInstance(\"DH\");\n        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec\n                (alicePubKeyEnc);\n        PublicKey alicePubKey = bobKeyFac.generatePublic(x509KeySpec);\n\n        /*\n         * Bob gets the DH parameters associated with Alice's public key.\n         * He must use the same parameters when he generates his own key\n         * pair.\n         */\n        DHParameterSpec dhParamSpec = ((DHPublicKey)alicePubKey).getParams();\n\n        // Bob creates his own DH key pair\n        System.out.println(\"BOB: Generate DH keypair ...\");\n        KeyPairGenerator bobKpairGen = KeyPairGenerator.getInstance(\"DH\");\n        bobKpairGen.initialize(dhParamSpec);\n        KeyPair bobKpair = bobKpairGen.generateKeyPair();\n\n        // Bob creates and initializes his DH KeyAgreement object\n        System.out.println(\"BOB: Initialization ...\");\n        KeyAgreement bobKeyAgree = KeyAgreement.getInstance(\"DH\");\n        bobKeyAgree.init(bobKpair.getPrivate());\n\n        // Bob encodes his public key, and sends it over to Alice.\n        byte[] bobPubKeyEnc = bobKpair.getPublic().getEncoded();\n\n        /*\n         * Alice uses Bob's public key for the first (and only) phase\n         * of her version of the DH\n         * protocol.\n         * Before she can do so, she has to instantiate a DH public key\n         * from Bob's encoded key material.\n         */\n        KeyFactory aliceKeyFac = KeyFactory.getInstance(\"DH\");\n        x509KeySpec = new X509EncodedKeySpec(bobPubKeyEnc);\n        PublicKey bobPubKey = aliceKeyFac.generatePublic(x509KeySpec);\n        System.out.println(\"ALICE: Execute PHASE1 ...\");\n        aliceKeyAgree.doPhase(bobPubKey, true);\n\n        /*\n         * Bob uses Alice's public key for the first (and only) phase\n         * of his version of the DH\n         * protocol.\n         */\n        System.out.println(\"BOB: Execute PHASE1 ...\");\n        bobKeyAgree.doPhase(alicePubKey, true);\n\n        /*\n         * At this stage, both Alice and Bob have completed the DH key\n         * agreement protocol.\n         * Both generate the (same) shared secret.\n         */\n        byte[] aliceSharedSecret = aliceKeyAgree.generateSecret();\n        int aliceLen = aliceSharedSecret.length;\n\n        byte[] bobSharedSecret = new byte[aliceLen];\n        int bobLen;\n        try {\n            // show example of what happens if you\n            // provide an output buffer that is too short\n            bobLen = bobKeyAgree.generateSecret(bobSharedSecret, 1);\n        } catch (ShortBufferException e) {\n            System.out.println(e.getMessage());\n        }\n        // provide output buffer of required size\n        bobLen = bobKeyAgree.generateSecret(bobSharedSecret, 0);\n\n        System.out.println(\"Alice secret: \" +\n                toHexString(aliceSharedSecret));\n        System.out.println(\"Bob secret: \" +\n                toHexString(bobSharedSecret));\n\n        if (!java.util.Arrays.equals(aliceSharedSecret, bobSharedSecret))\n            throw new Exception(\"Shared secrets differ\");\n        System.out.println(\"Shared secrets are the same\");\n\n        /*\n         * Now let's return the shared secret as a SecretKey object\n         * and use it for encryption. First, we generate SecretKeys for the\n         * \"DES\" algorithm (based on the raw shared secret data) and\n         * then we use DES in ECB mode\n         * as the encryption algorithm. DES in ECB mode does not require any\n         * parameters.\n         *\n         * Then we use DES in CBC mode, which requires an initialization\n         * vector (IV) parameter. In CBC mode, you need to initialize the\n         * Cipher object with an IV, which can be supplied using the\n         * javax.crypto.spec.IvParameterSpec class. Note that you have to use\n         * the same IV for encryption and decryption: If you use a different\n         * IV for decryption than you used for encryption, decryption will\n         * fail.\n         *\n         * NOTE: If you do not specify an IV when you initialize the\n         * Cipher object for encryption, the underlying implementation\n         * will generate a random one, which you have to retrieve using the\n         * javax.crypto.Cipher.getParameters() method, which returns an\n         * instance of java.security.AlgorithmParameters. You need to transfer\n         * the contents of that object (e.g., in encoded format, obtained via\n         * the AlgorithmParameters.getEncoded() method) to the party who will\n         * do the decryption. When initializing the Cipher for decryption,\n         * the (reinstantiated) AlgorithmParameters object must be passed to\n         * the Cipher.init() method.\n         */\n        System.out.println(\"Return shared secret as SecretKey object ...\");\n        // Bob\n        // NOTE: The call to bobKeyAgree.generateSecret above reset the key\n        // agreement object, so we call doPhase again prior to another\n        // generateSecret call\n        bobKeyAgree.doPhase(alicePubKey, true);\n        SecretKey bobDesKey = bobKeyAgree.generateSecret(\"DES\");\n\n        // Alice\n        // NOTE: The call to aliceKeyAgree.generateSecret above reset the key\n        // agreement object, so we call doPhase again prior to another\n        // generateSecret call\n        aliceKeyAgree.doPhase(bobPubKey, true);\n        SecretKey aliceDesKey = aliceKeyAgree.generateSecret(\"DES\");\n\n        /*\n         * Bob encrypts, using DES in ECB mode\n         */\n        Cipher bobCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        bobCipher.init(Cipher.ENCRYPT_MODE, bobDesKey);\n\n        byte[] cleartext = \"This is just an example\".getBytes();\n        byte[] ciphertext = bobCipher.doFinal(cleartext);\n\n        /*\n         * Alice decrypts, using DES in ECB mode\n         */\n        Cipher aliceCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        aliceCipher.init(Cipher.DECRYPT_MODE, aliceDesKey);\n        byte[] recovered = aliceCipher.doFinal(ciphertext);\n\n        if (!java.util.Arrays.equals(cleartext, recovered))\n            throw new Exception(\"DES in CBC mode recovered text is \" +\n                    \"different from cleartext\");\n        System.out.println(\"DES in ECB mode recovered text is \" +\n                \"same as cleartext\");\n\n        /*\n         * Bob encrypts, using DES in CBC mode\n         */\n        bobCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        bobCipher.init(Cipher.ENCRYPT_MODE, bobDesKey);\n\n        cleartext = \"This is just an example\".getBytes();\n        ciphertext = bobCipher.doFinal(cleartext);\n        // Retrieve the parameter that was used, and transfer it to Alice in\n        // encoded format\n        byte[] encodedParams = bobCipher.getParameters().getEncoded();\n\n        /*\n         * Alice decrypts, using DES in CBC mode\n         */\n        // Instantiate AlgorithmParameters object from parameter encoding\n        // obtained from Bob\n        AlgorithmParameters params = AlgorithmParameters.getInstance(\"DES\");\n        params.init(encodedParams);\n        aliceCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        aliceCipher.init(Cipher.DECRYPT_MODE, aliceDesKey, params);\n        recovered = aliceCipher.doFinal(ciphertext);\n\n        if (!java.util.Arrays.equals(cleartext, recovered))\n            throw new Exception(\"DES in CBC mode recovered text is \" +\n                    \"different from cleartext\");\n        System.out.println(\"DES in CBC mode recovered text is \" +\n                \"same as cleartext\");\n    }\n\n    /*\n     * Converts a byte to hex digit and writes to the supplied buffer\n     */\n    private void byte2hex(byte b, StringBuffer buf) {\n        char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8',\n                '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n        int high = ((b & 0xf0) >> 4);\n        int low = (b & 0x0f);\n        buf.append(hexChars[high]);\n        buf.append(hexChars[low]);\n    }\n\n    /*\n     * Converts a byte array to hex string\n     */\n    private String toHexString(byte[] block) {\n        StringBuffer buf = new StringBuffer();\n\n        int len = block.length;\n\n        for (int i = 0; i < len; i++) {\n            byte2hex(block[i], buf);\n            if (i < len-1) {\n                buf.append(\":\");\n            }\n        }\n        return buf.toString();\n    }\n\n    /*\n     * Prints the usage of this test.\n     */\n    private void usage() {\n        System.err.print(\"DHKeyAgreement usage: \");\n        System.err.println(\"[-gen]\");\n    }\n\n    // The 1024 bit Diffie-Hellman modulus values used by SKIP\n    private static final byte skip1024ModulusBytes[] = {\n            (byte)0xF4, (byte)0x88, (byte)0xFD, (byte)0x58,\n            (byte)0x4E, (byte)0x49, (byte)0xDB, (byte)0xCD,\n            (byte)0x20, (byte)0xB4, (byte)0x9D, (byte)0xE4,\n            (byte)0x91, (byte)0x07, (byte)0x36, (byte)0x6B,\n            (byte)0x33, (byte)0x6C, (byte)0x38, (byte)0x0D,\n            (byte)0x45, (byte)0x1D, (byte)0x0F, (byte)0x7C,\n            (byte)0x88, (byte)0xB3, (byte)0x1C, (byte)0x7C,\n            (byte)0x5B, (byte)0x2D, (byte)0x8E, (byte)0xF6,\n            (byte)0xF3, (byte)0xC9, (byte)0x23, (byte)0xC0,\n            (byte)0x43, (byte)0xF0, (byte)0xA5, (byte)0x5B,\n            (byte)0x18, (byte)0x8D, (byte)0x8E, (byte)0xBB,\n            (byte)0x55, (byte)0x8C, (byte)0xB8, (byte)0x5D,\n            (byte)0x38, (byte)0xD3, (byte)0x34, (byte)0xFD,\n            (byte)0x7C, (byte)0x17, (byte)0x57, (byte)0x43,\n            (byte)0xA3, (byte)0x1D, (byte)0x18, (byte)0x6C,\n            (byte)0xDE, (byte)0x33, (byte)0x21, (byte)0x2C,\n            (byte)0xB5, (byte)0x2A, (byte)0xFF, (byte)0x3C,\n            (byte)0xE1, (byte)0xB1, (byte)0x29, (byte)0x40,\n            (byte)0x18, (byte)0x11, (byte)0x8D, (byte)0x7C,\n            (byte)0x84, (byte)0xA7, (byte)0x0A, (byte)0x72,\n            (byte)0xD6, (byte)0x86, (byte)0xC4, (byte)0x03,\n            (byte)0x19, (byte)0xC8, (byte)0x07, (byte)0x29,\n            (byte)0x7A, (byte)0xCA, (byte)0x95, (byte)0x0C,\n            (byte)0xD9, (byte)0x96, (byte)0x9F, (byte)0xAB,\n            (byte)0xD0, (byte)0x0A, (byte)0x50, (byte)0x9B,\n            (byte)0x02, (byte)0x46, (byte)0xD3, (byte)0x08,\n            (byte)0x3D, (byte)0x66, (byte)0xA4, (byte)0x5D,\n            (byte)0x41, (byte)0x9F, (byte)0x9C, (byte)0x7C,\n            (byte)0xBD, (byte)0x89, (byte)0x4B, (byte)0x22,\n            (byte)0x19, (byte)0x26, (byte)0xBA, (byte)0xAB,\n            (byte)0xA2, (byte)0x5E, (byte)0xC3, (byte)0x55,\n            (byte)0xE9, (byte)0x2F, (byte)0x78, (byte)0xC7\n    };\n\n    // The SKIP 1024 bit modulus\n    private static final BigInteger skip1024Modulus\n            = new BigInteger(1, skip1024ModulusBytes);\n\n    // The base used with the SKIP 1024 bit modulus\n    private static final BigInteger skip1024Base = BigInteger.valueOf(2);\n}\n", "idx": 1277}
{"project": "cipher", "commit_id": "Snippet34063213_16099.java", "target": 0, "func": "public void setPassCode(String   value) throws Exception { \n\n    try {\n\n        SecretKeySpec sks = null; \n        sks = getEncryptKey();\n\n        byte[] userLatENC=null;\n\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.ENCRYPT_MODE,sks ); \n        userLatENC = c.doFinal(value.getBytes());\n\n        passCode = Base64.encodeToString(userLatENC, Base64.DEFAULT);\n\n    } catch (Exception e) {\n        throw e;\n    }\n}\n", "idx": 1278}
{"project": "cipher", "commit_id": "Snippet25726840_8044.java", "target": 0, "func": "public void crypt() throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, IOException{\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n    SecretKey secKey = keyGen.generateKey();\n    byte[] encoded = secKey.getEncoded();\n    this.setCodeCrypt(encoded);\n\n    cipher.init(Cipher.ENCRYPT_MODE, secKey);\n\n    String cleartextFile = this.lien;\n    String ciphertextFile = \"crypted img.jpg\";\n\n    FileInputStream fis = new FileInputStream(cleartextFile);\n    FileOutputStream fos = new FileOutputStream(ciphertextFile);\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n    int i;\n    while ((i = fis.read()) != -1) {\n        cos.write(i);\n    }\n    cos.close();\n}\n\n    // Decrypt\npublic void decrypt() throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, IOException{\n    try {\n        Class.forName(\"org.postgresql.Driver\");\n        String url = \"jdbc:postgresql://localhost:5432/papiersadmin\";\n        String user = \"postgres\";\n        String passwd = \"postgresql\";\n        java.sql.Connection conn = DriverManager.getConnection(url, user,passwd);\n        Statement state = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);\n\n        // loading a picture knowing its path (lien)\n\n        ResultSet result = state.executeQuery(\"SELECT * FROM image WHERE lien = '\"+this.lien+\"'\");\n        while(result.next()){\n        setCodeCrypt(result.getObject(6).toString().getBytes());}\n        state.close();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    SecretKey originalKey = new SecretKeySpec(codeCrypt, 0, codeCrypt.length, \"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, originalKey);\n\n    String cleartextFile = \"decrypted img.jpg\";\n    String ciphertextFile = this.lien;\n\n    FileInputStream fis = new FileInputStream(ciphertextFile);\n    FileOutputStream fos = new FileOutputStream(cleartextFile);\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n    int i;\n    while ((i = fis.read()) != -1) {\n        cos.write(i);\n    }\n    cos.close();\n}\n", "idx": 1279}
{"project": "cipher", "commit_id": "Snippet23193211_5533.java", "target": 0, "func": "public static byte[] encrypt(byte[] value, String cryptoPass) {\n    try {\n        DESKeySpec keySpec = new DESKeySpec(cryptoPass.getBytes(\"UTF8\"));\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey key = keyFactory.generateSecret(keySpec);\n\n        // Cipher is not thread safe\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        Log.d(\"bitmap\", \"Decrypted: \" + value + \" -> \" + value);\n        String encryptedValue = Base64.encodeToString(cipher.doFinal(value), Base64.DEFAULT);\n        Log.d(\"bitmap\", \"Encrypted: \" + value + \" -> \" + encryptedValue);\n\n        return encryptedValue.getBytes(\"UTF-8\");\n\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeySpecException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    }\n    return value;\n};\n\npublic static byte[] decrypt(byte[] value, String cryptoPass) {\n\n    try {\n        DESKeySpec keySpec = new DESKeySpec(cryptoPass.getBytes(\"UTF8\"));\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey key = keyFactory.generateSecret(keySpec);\n\n        byte[] encrypedPwdBytes = Base64.decode(value, Base64.DEFAULT);\n        // cipher is not thread safe\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n        return (cipher.doFinal(encrypedPwdBytes));\n\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeySpecException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    }\n    return value;\n}\n", "idx": 1280}
{"project": "cipher", "commit_id": "Snippet17278592_515.java", "target": 0, "func": "import java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.Provider;\nimport java.security.spec.InvalidKeySpecException;\nimport java.util.Random;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\nimport sun.misc.BASE64Encoder;\n\n\npublic class OpenSSLEncryption {\n\n    private static final String CIPHER_ALG = \"PBEWITHMD5AND256BITAES-CBC-OPENSSL\";\n    private static final Provider CIPHER_PROVIDER = new BouncyCastleProvider();\n    private static final String PREFIX = \"Salted__\";\n    private static final String UTF_8 = \"UTF-8\";\n    private String password;\n    private PBEKeySpec pbeSpec;\n    private SecretKeyFactory keyFact;\n    private Cipher cipher;\n    private Random rand = new Random();\n    private BASE64Encoder encoder = new BASE64Encoder();\n\n    public OpenSSLEncryption(String password) throws NoSuchAlgorithmException, NoSuchPaddingException {\n        this.password = password;\n        pbeSpec = new PBEKeySpec(password.toCharArray());\n        keyFact = SecretKeyFactory.getInstance(CIPHER_ALG, CIPHER_PROVIDER);\n        cipher = Cipher.getInstance(CIPHER_ALG, CIPHER_PROVIDER);\n    }  \n\n    public synchronized String encrypt(String toEncrypt) throws InvalidKeySpecException, InvalidKeyException, InvalidAlgorithmParameterException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, IOException {\n        byte[] salt = new byte[8];\n        rand.nextBytes(salt);\n        PBEParameterSpec defParams = new PBEParameterSpec(salt, 0);\n        cipher.init(Cipher.ENCRYPT_MODE, keyFact.generateSecret(pbeSpec), defParams);\n        byte[] cipherText = cipher.doFinal(toEncrypt.getBytes(UTF_8));\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(cipherText.length + 16);\n        baos.write(PREFIX.getBytes(UTF_8));\n        baos.write(salt);\n        baos.write(cipherText);\n        baos.close();\n        return encoder.encode(baos.toByteArray());\n    }\n}\n", "idx": 1281}
{"project": "cipher", "commit_id": "Snippet10782267_35043.java", "target": 0, "func": "static void encrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    // Here you read the cleartext.\n    FileInputStream fis = new FileInputStream(\"data/cleartext\");\n    // This stream write the encrypted text. This stream will be wrapped by another stream.\n    FileOutputStream fos = new FileOutputStream(\"data/encrypted\");\n\n    // Length is 16 byte\n    // Careful when taking user input!!! https://stackoverflow.com/a/3452620/1188357\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    // Create cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    // Wrap the output stream\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    // Write bytes\n    int b;\n    byte[] d = new byte[8];\n    while((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    cos.flush();\n    cos.close();\n    fis.close();\n}\n", "idx": 1282}
{"project": "cipher", "commit_id": "Snippet40402357_22261.java", "target": 0, "func": "public static String encrypt(String plainText) {\n    try {\n        byte[] keyData = secret_key.getBytes();\n        SecretKeySpec secretKey = new SecretKeySpec(keyData, \"AES/ECB/PKCS7Padding\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n        byte[] cipherText = cipher.doFinal(plainText.getBytes(\"UTF-8\"));\n        String encryptedString = Base64.encodeToString(cipherText, Base64.NO_WRAP);\n\n        return encryptedString;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 1283}
{"project": "cipher", "commit_id": "Snippet22652351_5046.java", "target": 0, "func": "import javax.crypto.Cipher;\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class AESJava {\n\n    public static void main(String[] args) {\n\n\n        // returns the current value of the system timer, in nanoseconds\n          System.out.print(\"time in nanoseconds = \");\n          System.out.println(System.nanoTime());\n\n\n        try {\n\n\n\n            BufferedReader br = new BufferedReader(new FileReader(\"key.txt\"));\n            String key = br.readLine();\n            br.close();\n            FileInputStream fis = new FileInputStream(\"original.txt\");\n            FileOutputStream fos = new FileOutputStream(\"encrypted.txt\");\n            encrypt(key, fis, fos);\n\n            FileInputStream fis2 = new FileInputStream(\"encrypted.txt\");\n            FileOutputStream fos2 = new FileOutputStream(\"decrypted.txt\");\n            decrypt(key, fis2, fos2);\n\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void encrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.ENCRYPT_MODE, is, os);\n    }\n\n    public static void decrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);\n    }\n\n    public static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n\n\n      SecretKeySpec dks = new SecretKeySpec(key.getBytes(),\"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\"); \n\n        if (mode == Cipher.ENCRYPT_MODE) {\n            cipher.init(Cipher.ENCRYPT_MODE, dks);\n            CipherInputStream cis = new CipherInputStream(is, cipher);\n            doCopy(cis, os);        \n        } else if (mode == Cipher.DECRYPT_MODE) {\n            cipher.init(Cipher.DECRYPT_MODE, dks);\n            CipherOutputStream cos = new CipherOutputStream(os, cipher);\n            doCopy(is, cos);\n        }\n\n\n    }\n\n    public static void doCopy(InputStream is, OutputStream os) throws IOException {\n        byte[] bytes = new byte[128];\n        int numBytes;\n        while ((numBytes = is.read(bytes)) != -1) {\n            os.write(bytes, 0, numBytes);\n        }\n        os.flush();\n        os.close();\n        is.close();\n    }\n\n}\n", "idx": 1284}
{"project": "cipher", "commit_id": "Snippet43101699_25220.java", "target": 0, "func": "public class AES {\n\n  public static void main(String ... args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {\n    final String Algo=\"AES\";\n    String key = \"aaaaaaaaaaaaaaaa\";\n    byte[] keyBytes = key.getBytes(StandardCharsets.UTF_8);\n\n    MessageDigest sha= MessageDigest.getInstance(\"SHA-1\"); \n    keyBytes=sha.digest(keyBytes);\n    keyBytes=Arrays.copyOf(keyBytes, 16);\n\n    SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, Algo);\n    Cipher cipher = Cipher.getInstance(Algo);\n    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n    byte[] ciphertext = cipher.doFinal(\"Message\".getBytes());\n    System.out.println(\"Encrypted Message: \" +new String(ciphertext));\n\n    cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n    byte[] original = cipher.doFinal(ciphertext);\n    String originalString = new String(original);\n    System.out.println(\"keybyte: \"+keyBytes);\n    System.out.println(\"Original string: \" + originalString + \"\\nOriginal string (Hex): \" +original);      \n  }\n}\n", "idx": 1285}
{"project": "cipher", "commit_id": "Snippet44497375_26568.java", "target": 0, "func": "public class EncryptionHelper {\n\nprivate static byte[] Key = new byte[] {\n    0x42, 0x45, 0x49, 0x30, 0x12, 0x22, 0x35, 0x48, 0x33, 0x24, 0x28, 0x51,\n    0x48, 0x24, 0x30, 0x21, 0x44, 0x31, 0x14, 0x19, 0x45, 0x34, 0x47, 0x25 };\n\nstatic Cipher c;\n\npublic EncryptionHelper() throws Exception {\n    // byte[] key_hash = (Key).toString().getBytes(\"UTF-8\");\n    // key_hash = Arrays.copyOf(key_hash, 32);\n    SecretKey key = new SecretKeySpec(Key, 0, Key.length, \"DESede\");\n    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n}\n\npublic static String Encrypt(String S) throws Exception {\n    byte[] base64EncryptedText = S.getBytes(\"UTF-8\");\n    byte EncryptedText[] = c.doFinal(base64EncryptedText, 0, base64EncryptedText.length);\n    return new String(Base64.getEncoder().encode(EncryptedText));\n}\n\n// LOGIC:\n// for encryption: string -> utf-8 byte array,\n        // encrypt and return a base 64 encoded string\n// for decryption: String -> base64 -> decode base 64 array,\n        // decrypt and return utf-8 string\n\npublic static String Decrypt(String S) throws Exception {\n    Cipher c2 = null;\n    // byte[] key_hash = (Key).toString().getBytes(\"UTF-8\");\n    // key_hash = Arrays.copyOf(key_hash, 24);\n    SecretKey key = new SecretKeySpec(Key, \"DESede\");\n    c2 = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    c2.init(Cipher.DECRYPT_MODE, key);\n    byte[] base64EncryptedText = Base64.getDecoder().decode(S.getBytes());\n    byte[] textDecrypted = c2.doFinal(base64EncryptedText, 0, base64EncryptedText.length);\n    return new String(textDecrypted, \"UTF-8\");\n}\n", "idx": 1286}
{"project": "cipher", "commit_id": "Snippet22952981_5335.java", "target": 0, "func": "encryptCipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");", "idx": 1287}
{"project": "cipher", "commit_id": "Snippet1755791_30064.java", "target": 0, "func": "        public static String decrypt(byte[] pin, byte [] desKeyData ) throws Exception {\n    //if (ISOConstantsLibrary.DEBUG) System.out.println(\"original: \" + pin + \" key: \" + ISOUtil.bcd2str(desKeyData, 0, 2 * desKeyData.length, false) );\n    String out = \"\";\n\n    try {           \n        SecretKeySpec desKey = new SecretKeySpec(desKeyData, \"DES\");\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/NoPadding\");//DES/CBC/PKCS5Padding\n        byte[] encrypted_password = pin;\n        cipher.init(Cipher.DECRYPT_MODE, desKey);\n        byte[] decrypted_password = cipher.doFinal(encrypted_password);\n        out = new String(decrypted_password);\n        //if (ISOConstantsLibrary.DEBUG) System.out.println(\"Decrypted Password \" + out);\n    }\n    catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return out;\n}\n", "idx": 1288}
{"project": "cipher", "commit_id": "Snippet11590739_35639.java", "target": 0, "func": "public class AES {\n\nprivate static final String algo=\"AES\";\nprivate static final byte[] keyValue= \n        new byte[]{somekey};\n\nprivate static Key generateKey() throws Exception{\n\n    Key key= new SecretKeySpec(keyValue, algo);\n\n    return key;\n}\n\npublic static String encrypt(String  email) throws Exception{\n\n    Key key=generateKey();\n    Cipher c=Cipher.getInstance(algo);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal=c.doFinal(email.getBytes());\n    String encryptedEmail= new BASE64Encoder().encode(encVal);\n\n    return encryptedEmail;\n}\n\npublic static String decrypt(String encryptedEmail) throws Exception{\n\n    Key key=generateKey();\n    Cipher c=Cipher.getInstance(algo);\n    c.init(Cipher.DECRYPT_MODE, key);\n\n    byte[] decodeEmail= new BASE64Decoder().decodeBuffer(encryptedEmail);\n    byte[] decodedEmail=c.doFinal(decodeEmail);\n\n    String decryptedEmail= new String(decodedEmail);\n\n    return decryptedEmail;\n    }\n", "idx": 1289}
{"project": "cipher", "commit_id": "Snippet13057931_36688.java", "target": 0, "func": "public boolean connect(String ip, int port) {\n    try {\n        socket = new Socket(ip, port);\n        dis = new DataInputStream(socket.getInputStream());\n        dos = new DataOutputStream(socket.getOutputStream());\n        dos.writeByte(0x02);\n        dos.writeByte(0x00);\n        writeString(username);\n        writeString(ip);\n        dos.writeInt(port);\n        if (dis.readByte() != 0xFD)\n            return false;\n        String serverId = readString();\n        byte[] publicKey = new byte[dis.readShort()];\n        for (int i = 0; i < publicKey.length; i++)\n            publicKey[i] = dis.readByte();\n        byte[] token = new byte[dis.readShort()];\n        for (int i = 0; i < token.length; i++)\n            token[i] = dis.readByte();\n        PublicKey serverPublicKey = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKey));\n        byte[] sharedSecret = new byte[16];\n        new Random().nextBytes(sharedSecret);\n        URL url = new URL(\"http://session.minecraft.net/game/joinserver.jsp?user=\" + username + \"&sessionId=\" + session + \"&serverId=\" + serverId);\n        url.openConnection();\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        return true;\n    }\n    catch (Exception ex) { System.out.println(\"Failed to login for \" + username); ex.printStackTrace(); }\n    return false;\n}\n", "idx": 1290}
{"project": "cipher", "commit_id": "Snippet37525119_19466.java", "target": 0, "func": "public class Encryptionsss {\n\npublic static void main(String[] args) throws Exception {\n\n     try {\n         String text = \"Hello World\";\n         String key = \"1234567891234567\";\n         // Create key and cipher\n         Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n         Cipher cipher = Cipher.getInstance(\"AES\");\n\n     // encrypt the text\n     cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n     byte[] encrypted = cipher.doFinal(text.getBytes());\n     System.out.println(\"Encrypted text: \" + new String(encrypted));\n\n     // decrypt the text\n     cipher.init(Cipher.DECRYPT_MODE, aesKey);\n     String decrypted = new String(cipher.doFinal(encrypted));\n     System.out.println(\"Decrypted text: \" + decrypted);\n  }catch(Exception e) {\n     e.printStackTrace();\n  }\n\n    String plainText = \"Hello World\";\n\n    /**\n     * Generate new Key \n     */\n//  String str = generatenewkeyasString();\n\n\n\n /*** Generate Cipher Text from Key(We are using same key stored in String-str)\n ****/\n\n\n    String str = \"]\u02dc??4I-S@\u00e6,\u00d4t\";\n    byte[] data = str.getBytes();\n    SecretKey key2 = new SecretKeySpec(data, 0, data.length, \"AES\");\n    byte[] cipherText = encryptText(plainText, key2);\n    String scipherText = new String(cipherText);\n   /**\n    *\n    * Decrypt Cipher Text with Key****/\n\n    cipherText = scipherText.getBytes();\n    String decryptedText = decryptText(cipherText, key2);\n    System.out.println(\"ScipherText:\" + scipherText);\n    System.out.println(\"Original Text:\" + plainText);\n    System.out.println(\"AES Key (Hex Form):\"\n            + bytesToHex(key2.getEncoded()));\n    System.out.println(\"Encrypted Text (Hex Form):\"\n            + bytesToHex(cipherText));\n    System.out.println(\"Descrypted Text:\" + decryptedText);\n\n}\n\n/**\n * \n * @return byte[] as String\n * @Generate Key\n */\n\nprivate static String generatenewkeyasString() throws Exception {\n    SecretKey secKey = KeyGenerator.getInstance(\"AES\").generateKey();\n    byte[] data = secKey.getEncoded();\n    String str = new String(data);\n    return str;\n\n}\n\n/**\n * \n * Encrypts plainText in AES using the secret key\n * \n * @param plainText\n * \n * @param secKey\n * \n * @return\n * \n * @throws Exception\n */\n\npublic static byte[] encryptText(String plainText, SecretKey secKey)\n        throws Exception {\n\n    // AES defaults to AES/ECB/PKCS5Padding in Java 7\n\n    Cipher aesCipher = Cipher.getInstance(\"AES\");\n    aesCipher.init(Cipher.ENCRYPT_MODE, secKey);\n    byte[] byteCipherText = aesCipher.doFinal(plainText.getBytes());\n    return byteCipherText;\n\n}\n\n/**\n * \n * Decrypts encrypted byte array using the key used for encryption.\n * \n * @param byteCipherText\n * @param secKey\n * \n * @return\n * \n * @throws Exception\n */\n\npublic static String decryptText(byte[] byteCipherText, SecretKey secKey)\n        throws Exception {\n\n    // AES defaults to AES/ECB/PKCS5Padding in Java 7\n\n    Cipher aesCipher = Cipher.getInstance(\"AES\");\n    aesCipher.init(Cipher.DECRYPT_MODE, secKey);\n    byte[] bytePlainText = aesCipher.doFinal(byteCipherText);\n    return new String(bytePlainText);\n\n}\n\n/**\n * \n * Convert a binary byte array into readable hex form\n * \n * @param hash\n * \n * @return\n */\n\nprivate static String bytesToHex(byte[] hash) {\n    return DatatypeConverter.printHexBinary(hash);\n\n}\n", "idx": 1291}
{"project": "cipher", "commit_id": "Snippet9839754_34261.java", "target": 0, "func": "public byte[] crypt(String pStringToCrypt) throws Exception{\n\n    byte[] key = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    System.arraycopy(this.passphrase.getBytes(), 0, key, 0, this.passphrase.getBytes().length);\n    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(pStringToCrypt.getBytes());\n    return encrypted;\n\n}\n", "idx": 1292}
{"project": "cipher", "commit_id": "Snippet22102881_4523.java", "target": 0, "func": "public class Crypto {\n\n    public FileInputStream mIn;\n    public FileOutputStream mOut;\n    public Crypto(String fileIn, String fileOut, String key) {\n        try {\n                mIn = new FileInputStream(new File(fileIn));\n                mOut = new FileOutputStream(new File(fileOut));\n                decrypt(mIn, mOut, key);\n        } catch (Exception e) {\n                e.printStackTrace();\n        }\n}\n\npublic static void decrypt(InputStream in, FileOutputStream out, String password) {\n        try {\n                // byte[] iv = new byte[IV_LENGTH];\n                byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n                Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n                in.read(iv);\n                System.out.println(\">>>>>>>>red\" + Arrays.toString(iv));\n\n                String s = \"346a23652a46392b4d73257c67317e352e3372482177652c\";\n\n                byte[] sBytes = hexStringToByteArray(s);\n\n                byte[] bytes = new BigInteger(s, 16).toByteArray();\n                SecretKeySpec keySpec = new SecretKeySpec(sBytes, \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\"); // \"AES/CFB8/NoPadding\";\"AES/CBC/PKCS5Padding\";\n                // //\"AES/ECB/PKCS5Padding\"\n\n                IvParameterSpec ivSpec = new IvParameterSpec(iv);\n                 cipher.init(Cipher.DECRYPT_MODE, keySpec);// , ivSpec);\n                //cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);\n\n                in = new CipherInputStream(in, cipher);\n                byte[] buf = new byte[iv.length];\n                int numRead = 0;\n                while ((numRead = in.read(buf)) >= 0) {\n                    String si = new String(buf);\n                //  System.out.println(si);\n                     out.write(buf, 0, numRead);\n                        // Log.d(\"Crypto\", buf.toString());\n                }\n                out.close();\n\n        } catch (Exception e) {\n                e.printStackTrace();\n        }\n\n}\n\npublic static byte[] hexStringToByteArray(String s) {\n        int len = s.length();\n        byte[] data = new byte[len / 2];\n        for (int i = 0; i < len; i += 2) {\n                data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character\n                                .digit(s.charAt(i + 1), 16));\n        }\n        return data;\n}\n    public static void main(String[] args) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException, InvalidKeyException {\n\n        Crypto c = new Crypto(\"C:\\\\msgstore.db.crypt\", \"D:\\\\WhatsappDeneme\", \"test\");\n        System.out.println(\"Done\");\n\n    }\n\n}\n", "idx": 1293}
{"project": "cipher", "commit_id": "Snippet24671967_7028.java", "target": 0, "func": "import java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AES {\n     public void run() {\n         try {\n             String text = \"Hello World\";\n             String key = \"1234567891234567\";\n             // Create key and cipher\n             Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n             Cipher cipher = Cipher.getInstance(\"AES\");\n\n         // encrypt the text\n         cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n         byte[] encrypted = cipher.doFinal(text.getBytes());\n         System.out.println(\"Encrypted text: \" + new String(encrypted));\n\n         // decrypt the text\n         cipher.init(Cipher.DECRYPT_MODE, aesKey);\n         String decrypted = new String(cipher.doFinal(encrypted));\n         System.out.println(\"Decrypted text: \" + decrypted);\n      }catch(Exception e) {\n         e.printStackTrace();\n      }\n    }\n\n    public static void main(String[] args) {\n        AES app = new AES();\n       app.run();\n    }\n}\n", "idx": 1294}
{"project": "cipher", "commit_id": "Snippet37406189_19317.java", "target": 0, "func": "public static String SIMMETRICAL_ALGORITHM = \"AES\";\n\n//Generate cipher key with user provided password\nprivate static String getPassphraseSize16(String key) {\n    if (TextUtils.isEmpty(key)) {\n        return null;\n    }\n    char controlChar = '\\u0014';\n    String key16 = key + controlChar;\n    if (key16.length() < 16) {\n        while (key16.length() < 16) {\n            key16 += key + controlChar;\n        }\n    }\n    if (key16.length() > 16) {\n        key16 = key16.substring(key16.length() - 16, key16.length());\n    }\n    return key16;\n}\n\n//AES cipher with passphrase\npublic static byte[] encrypt(byte[] message, String passphrase)\n        throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n    String passphrase16 = getPassphraseSize16(passphrase);\n\n    SecretKeySpec secretKey = new SecretKeySpec(passphrase16.getBytes(), SIMMETRICAL_ALGORITHM);\n    Cipher cipher = Cipher.getInstance(SIMMETRICAL_ALGORITHM);\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n    byte[] encoded = cipher.doFinal(message);\n\n    return encoded;\n}\n\n//AES decipher with passphrase\npublic static byte[] decrypt(byte[] encodedMessage, String key) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n    String passphrase16 = getPassphraseSize16(key);\n\n    SecretKeySpec secretKey = new SecretKeySpec(passphrase16.getBytes(), SIMMETRICAL_ALGORITHM);\n    Cipher cipher = Cipher.getInstance(SIMMETRICAL_ALGORITHM);\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\n    byte decoded[] = cipher.doFinal(encodedMessage);\n\n    return decoded;\n}\n", "idx": 1295}
{"project": "cipher", "commit_id": "Snippet8302992_33144.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n", "idx": 1296}
{"project": "cipher", "commit_id": "Snippet34063213_16100.java", "target": 0, "func": "public String getPassCode() throws Exception {\n        SecretKeySpec sks = null; \n\n        try {\n\n            String encVal = \"pass_code\";\n\n            if (encVal.isEmpty()) {\n                return encVal;\n            }\n\n\n            sks = getDecryptKey();\n\n            byte[] latDEC=null;\n\n\n            Cipher c = Cipher.getInstance(\"AES\");\n            c.init(Cipher.DECRYPT_MODE, sks);\n\n            latDEC = c.doFinal(Base64.decode(encVal, Base64.DEFAULT));\n\n\n\n\n            return new String(latDEC);\n\n        } catch (Exception e) {\n            throw e;\n        }\n    }\n", "idx": 1297}
{"project": "cipher", "commit_id": "Snippet40607981_22475.java", "target": 0, "func": "DESKeySpec keySpec = new DESKeySpec(\"Your secret Key phrase\".getBytes(\"UTF8\"));\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\nSecretKey key = keyFactory.generateSecret(keySpec);\nsun.misc.BASE64Encoder base64encoder = new BASE64Encoder();\nsun.misc.BASE64Decoder base64decoder = new BASE64Decoder();\n.........\n\n// ENCODE plainTextPassword String\nbyte[] cleartext = plainTextPassword.getBytes(\"UTF8\");      \n\nCipher cipher = Cipher.getInstance(\"DES\"); // cipher is not thread safe\ncipher.init(Cipher.ENCRYPT_MODE, key);\nString encryptedPwd = base64encoder.encode(cipher.doFinal(cleartext));\n// now you can store it \n......\n\n// DECODE encryptedPwd String\nbyte[] encrypedPwdBytes = base64decoder.decodeBuffer(encryptedPwd);\n\nCipher cipher = Cipher.getInstance(\"DES\");// cipher is not thread safe\ncipher.init(Cipher.DECRYPT_MODE, key);\nbyte[] plainTextPwdBytes = (cipher.doFinal(encrypedPwdBytes));\n", "idx": 1298}
{"project": "cipher", "commit_id": "Snippet32802242_14893.java", "target": 0, "func": "private static final String PADDING = \"DESede/ECB/PKCS5Padding\";\nprivate static final String UTF_F8 = \"UTF-8\";\nprivate static final String DE_SEDE = \"DESede\";\nprivate String secretKey;\n\n\npublic String encrypt(String message) throws Exception {\n\n    secretKey = getSecretKey();\n\n    final byte[] secretBase64Key = Base64.decodeBase64(secretKey);\n    final SecretKey key = new SecretKeySpec(secretBase64Key, DE_SEDE);\n    final Cipher cipher = Cipher.getInstance(PADDING);\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    final byte[] plainTextBytes = message.getBytes();\n    final byte[] cipherText = cipher.doFinal(plainTextBytes);\n\n    return Hex.encodeHexString(cipherText);\n}\n\npublic String decrypt(String keyToDecrypt) throws Exception {\n\n    secretKey = getSecretKey();\n\n    byte[] message = DatatypeConverter.parseHexBinary(keyToDecrypt);\n    final byte[] secretBase64Key = Base64.decodeBase64(secretKey);\n    final SecretKey key = new SecretKeySpec(secretBase64Key, DE_SEDE);\n    final Cipher decipher = Cipher.getInstance(PADDING);\n    decipher.init(Cipher.DECRYPT_MODE, key);\n    final byte[] plainText = decipher.doFinal(message);\n\n    return new String(plainText, UTF_F8);\n}\n", "idx": 1299}
{"project": "cipher", "commit_id": "Snippet19741927_2465.java", "target": 0, "func": "public static void main(String[] args) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchPaddingException, IOException, CertificateException {\n        Provider provider = new sun.security.pkcs11.SunPKCS11(DesSaveLoad.class.getClassLoader().getResourceAsStream(\"pkcs11.cfg\"));\n        Security.removeProvider(provider.getName());\n        Security.insertProviderAt(provider, 1);\n        KeyStore keyStore = KeyStore.getInstance(\"PKCS11\", provider);\n        keyStore.load(null, null);\n        SecretKey desKey = desGenerateKey();\n        keyStore.setKeyEntry(\"t1\", desKey, null, null);\n        SecretKey t1 = (SecretKey) keyStore.getKey(\"t1\", null);\n        byte[] messageBytes = \"message\".getBytes();\n        desEncrypt(messageBytes, 0, messageBytes.length, desKey);\n        desEncrypt(messageBytes, 0, messageBytes.length, t1);  //Exception is thrown here\n    }\n\n    public static SecretKey desGenerateKey() throws NoSuchAlgorithmException {\n        KeyGenerator keygenerator = null;\n        keygenerator = KeyGenerator.getInstance(\"DES\");\n        return keygenerator.generateKey();\n    }\n\n    public static byte[] desEncrypt(byte[] plainText, int offset, int size, SecretKey key) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        Cipher cipher;\n        if (size % 8 != 0) {\n            cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        } else {\n            cipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        }\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        return cipher.doFinal(plainText, offset, size);\n    }\n", "idx": 1300}
{"project": "cipher", "commit_id": "Snippet10623402_34932.java", "target": 0, "func": "import java.security.spec.KeySpec;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\n\npublic class TripleDes2 {\n\nprivate static final String UNICODE_FORMAT = \"UTF8\";\nprivate static final String DESEDE_ENCRYPTION_SCHEME = \"DESede\";\nprivate static final String CIPHER_ALG = \"DESede/ECB/Nopadding\"; //assuming no padding\nprivate KeySpec ks;\nprivate SecretKeyFactory skf;\nprivate Cipher cipher;\nprivate byte[] arrayBytes;\nprivate String myEncryptionKey;\nprivate SecretKey key;\n\npublic static void main(String args []) throws Exception {\n    TripleDes2 td= new TripleDes2();\n\n    String decrypted = td.decrypt(\"AC9C5A46A63FC9EA\");\n    System.out.println(\"expecting: 04286EDDFDEA6BD7\");\n    System.out.println(\"found: \" + decrypted);\n}\n\npublic TripleDes2() throws Exception {\n    myEncryptionKey = \"1032FD2CD64A9D7FA4D061F76B04BFEA\";\n    arrayBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n    ks = new DESedeKeySpec(arrayBytes);\n    skf = SecretKeyFactory.getInstance(DESEDE_ENCRYPTION_SCHEME);\n\n    cipher = Cipher.getInstance(CIPHER_ALG);\n    key = skf.generateSecret(ks);\n}\n\npublic String decrypt(String encryptedString) {\n    String decryptedText=null;\n    try {\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] encryptedText = encryptedString.getBytes();\n        byte[] plainText = cipher.doFinal(encryptedText);\n        decryptedText= new String(plainText);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return decryptedText;\n}\n}\n", "idx": 1301}
{"project": "cipher", "commit_id": "Snippet3040694_30587.java", "target": 0, "func": "import java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport javax.crypto.Cipher;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport com.tdocc.utils.Base64;\n\npublic class TripleDES {\n    private static byte[] keyBytes = { 110, 32, 73, 24, 125, 66, 75, 18, 79, (byte)150, (byte)211, 122, (byte)213, 14, (byte)156, (byte)136, (byte)171, (byte)218, 119, (byte)240, 81, (byte)142, 23, 4 };\n    private static byte[] ivBytes = { 25, 117, 68, 23, 99, 78, (byte)231, (byte)219 };\n\n    public static String encryptText(String plainText) {\n        try {\n            if (plainText.isEmpty()) return plainText;\n            return Base64.decode(TripleDES.encrypt(plainText)).toString();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    public static byte[] encrypt(String plainText) throws InvalidKeyException, InvalidAlgorithmParameterException, NoSuchPaddingException {\n        try {\n            final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n            final IvParameterSpec iv = new IvParameterSpec(ivBytes);\n            final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n            final byte[] plainTextBytes = plainText.getBytes(\"utf-8\");\n            final byte[] cipherText = cipher.doFinal(plainTextBytes);\n\n            return cipherText;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    public static String decryptText(String message) {\n        try {\n            if (message.isEmpty()) return message;\n            else return TripleDES.decrypt(message.getBytes());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    public static String decrypt(byte[] message) {\n        try {\n            final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n            final IvParameterSpec iv = new IvParameterSpec(ivBytes);\n            final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n            final byte[] plainText = cipher.doFinal(message);\n\n            return plainText.toString();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n}\n", "idx": 1302}
{"project": "cipher", "commit_id": "Snippet41378967_23349.java", "target": 0, "func": "byte fport= (byte) 0x01;//Byte.valueOf(\"1\");\nbyte dirValue = (byte) 0x00;//Byte.valueOf(\"0\");\nbyte[] devAddr = {0x08,0x00,0x00,0x00};//hexStringToByteArray(\"08000000\");\nshort fCnt = 200;\n\n public byte[] getClearPayLoad(byte[] payload, byte[] _nwkSKey, byte[] _appSKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, MalformedPacketException {\n    byte[] key;\n\n    if (fport == 0) {\n        if (_nwkSKey == null) {\n            throw new IllegalArgumentException(\"Missing nwkSKey\");\n        }\n        if (_nwkSKey.length != 16) {\n            throw new IllegalArgumentException(\"Invalid nwkSKey\");\n        }\n        key = _nwkSKey;\n    } else {\n        if (_appSKey == null) {\n            throw new IllegalArgumentException(\"Missing appSKey\");\n        }\n        if (_appSKey.length != 16) {\n            throw new IllegalArgumentException(\"Invalid appSKey\");\n        }\n        key = _appSKey;\n    }\n    int k = (int) Math.ceil(payload.length / 16.0);\n    System.out.println(\"payload length: \"+payload.length);\n    System.out.println(\"k is: \"+ k);\n    ByteBuffer a = ByteBuffer.allocate(16 * k);\n    a.order(ByteOrder.LITTLE_ENDIAN);\n    for (int i = 1; i <= k; i++) {\n        a.put((byte) 0x01);\n        a.put(new byte[]{0x00, 0x00, 0x00, 0x00});\n        a.put(dirValue);\n        a.put(devAddr);\n        a.putInt(fCnt);\n        a.put((byte) 0x00);\n        a.put((byte) i);\n    }\n    Key aesKey = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n    byte[] s = cipher.doFinal(a.array());\n    byte[] paddedPayload = new byte[16 * k];\n    System.arraycopy(payload, 0, paddedPayload, 0, payload.length);\n    byte[] plainPayload = new byte[payload.length];\n    for (int i = 0; i < payload.length; i++) {\n        plainPayload[i] = (byte) (s[i] ^ paddedPayload[i]);\n    }           \n    return plainPayload;\n}\n", "idx": 1303}
{"project": "cipher", "commit_id": "Snippet15563643_38600.java", "target": 0, "func": "package com.elliptic;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.PrivateKey;\nimport java.security.Provider;\nimport java.security.PublicKey;\nimport java.security.Security;\nimport java.security.spec.ECGenParameterSpec;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\n\n\npublic class TestECC {\n\n    public static void main(String args[]) {\n        try {\n            Provider p[] = Security.getProviders();\n            Provider p1 = Security.getProvider(\"SunEC\");\n            System.out.println(p1.getName());\n            KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"EC\", \"SunEC\");\n            System.out.println(kpg.getAlgorithm());\n\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            System.out.println(\"provider=\" + cipher.getProvider());\n\n            ECGenParameterSpec ecsp = new ECGenParameterSpec(\"sect163r2\");\n\n            kpg.initialize(ecsp);\n            KeyPair kyp = kpg.genKeyPair();\n            PublicKey pubKey = kyp.getPublic();\n            System.out.println(pubKey.getFormat() + \" public key \" + pubKey);\n\n            PrivateKey privKey = kyp.getPrivate();\n            System.out.println(\"private key \" + privKey);\n\n            System.out.println(cipher.getProvider());\n\n            cipher.init(Cipher.ENCRYPT_MODE, pubKey);\n\n            String cleartextFile = \"cleartext.txt\";\n            String ciphertextFile = \"ciphertextECIES.txt\";\n\n            byte[] block = new byte[64];\n            FileInputStream fis = new FileInputStream(cleartextFile);\n            FileOutputStream fos = new FileOutputStream(ciphertextFile);\n            CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n            int i;\n            while ((i = fis.read(block)) != -1) {\n                cos.write(block, 0, i);\n            }\n            cos.close();\n\n            // Decrypt\n\n            String cleartextAgainFile = \"cleartextAgainECIES.txt\";\n\n            cipher.init(Cipher.DECRYPT_MODE, privKey, ecsp);\n\n            fis = new FileInputStream(ciphertextFile);\n            CipherInputStream cis = new CipherInputStream(fis, cipher);\n            fos = new FileOutputStream(cleartextAgainFile);\n\n            while ((i = cis.read(block)) != -1) {\n                fos.write(block, 0, i);\n            }\n            fos.close();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n", "idx": 1304}
{"project": "cipher", "commit_id": "Snippet31630488_13741.java", "target": 0, "func": "Cipher aesCipher = Cipher.getInstance(\"AES\");\naesCipher.init(Cipher.ENCRYPT_MODE, aesSecretKey);\nString inputText1 = JOptionPane.showInputDialog(\"Enter a secret message: \");\nbyte[] encrypt = aesCipher.doFinal(inputText1.getBytes());\n", "idx": 1305}
{"project": "cipher", "commit_id": "Snippet13383006_36898.java", "target": 0, "func": "import java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n/**\n * Util class to perform encryption/decryption over strings. <br/>\n */\npublic final class UtilsEncryption\n{\n    /** The logging TAG */\n    private static final String TAG = UtilsEncryption.class.getName();\n\n    /** */\n    private static final String KEY = \"some_encryption_key\";\n\n    /**\n     * Avoid instantiation. <br/>\n     */\n    private UtilsEncryption()\n    {\n    }\n\n    /** The HEX characters */\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    /**\n     * Encrypt a given string. <br/>\n     * \n     * @param the string to encrypt\n     * @return the encrypted string in HEX\n     */\n    public static String encrypt( String cleartext )\n    {\n        try\n        {\n            byte[] result = process( Cipher.ENCRYPT_MODE, cleartext.getBytes() );\n            return toHex( result );\n        }\n        catch ( Exception e )\n        {\n            System.out.println( TAG + \":encrypt:\" + e.getMessage() );\n        }\n        return null;\n    }\n\n    /**\n     * Decrypt a HEX encrypted string. <br/>\n     * \n     * @param the HEX string to decrypt\n     * @return the decrypted string\n     */\n    public static String decrypt( String encrypted )\n    {\n        try\n        {\n            byte[] enc = fromHex( encrypted );\n            byte[] result = process( Cipher.DECRYPT_MODE, enc );\n            return new String( result );\n        }\n        catch ( Exception e )\n        {\n            System.out.println( TAG + \":decrypt:\" + e.getMessage() );\n        }\n        return null;\n    }\n\n\n    /**\n     * Get the raw encryption key. <br/>\n     * \n     * @param the seed key\n     * @return the raw key\n     * @throws NoSuchAlgorithmException\n     */\n    private static byte[] getRawKey()\n        throws NoSuchAlgorithmException\n    {\n        KeyGenerator kgen = KeyGenerator.getInstance( \"AES\" );\n        SecureRandom sr = SecureRandom.getInstance( \"SHA1PRNG\" );\n        sr.setSeed( KEY.getBytes() );\n        kgen.init( 128, sr );\n        SecretKey skey = kgen.generateKey();\n        return skey.getEncoded();\n    }\n\n    /**\n     * Process the given input with the provided mode. <br/>\n     * \n     * @param the cipher mode\n     * @param the value to process\n     * @return the processed value as byte[]\n     * @throws InvalidKeyException\n     * @throws IllegalBlockSizeException\n     * @throws BadPaddingException\n     * @throws NoSuchAlgorithmException\n     * @throws NoSuchPaddingException\n     */\n    private static byte[] process( int mode, byte[] value )\n        throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException,     NoSuchAlgorithmException,\n        NoSuchPaddingException\n    {\n        SecretKeySpec skeySpec = new SecretKeySpec( getRawKey(), \"AES\" );\n        Cipher cipher = Cipher.getInstance( \"AES\" );\n        cipher.init( mode, skeySpec );\n        byte[] encrypted = cipher.doFinal( value );\n        return encrypted;\n    }\n\n    /**\n     * Decode an HEX encoded string into a byte[]. <br/>\n     * \n     * @param the HEX string value\n     * @return the decoded byte[]\n     */\n    protected static byte[] fromHex( String value )\n    {\n        int len = value.length() / 2;\n        byte[] result = new byte[len];\n        for ( int i = 0; i < len; i++ )\n        {\n            result[i] = Integer.valueOf( value.substring( 2 * i, 2 * i + 2 ), 16     ).byteValue();\n        }\n        return result;\n    }\n\n    /**\n     * Encode a byte[] into an HEX string. <br/>\n     * \n     * @param the byte[] value\n     * @return the HEX encoded string\n     */\n    protected static String toHex( byte[] value )\n    {\n        if ( value == null )\n        {\n            return \"\";\n        }\n        StringBuffer result = new StringBuffer( 2 * value.length );\n        for ( int i = 0; i < value.length; i++ )\n        {\n            byte b = value[i];\n\n            result.append( HEX.charAt( ( b >> 4 ) & 0x0f ) );\n            result.append( HEX.charAt( b & 0x0f ) );\n        }\n        return result.toString();\n    }\n}\n", "idx": 1306}
{"project": "cipher", "commit_id": "Snippet22138277_4556.java", "target": 0, "func": "import java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class Encryption {\n\n    public static byte[] encrypted(String t) throws IllegalBlockSizeException, BadPaddingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException{\n        byte[] dataToSend = t.getBytes();\n        byte[] key = new byte[16];\n        Cipher c = Cipher.getInstance(\"AES\");\n        SecretKeySpec k = new SecretKeySpec(key, \"AES\");\n        c.init(Cipher.ENCRYPT_MODE, k);\n        byte[] encryptedData = c.doFinal(dataToSend);\n        return encryptedData; \n    }\n    public static byte[] decrypted(byte[] kr) throws IllegalBlockSizeException, BadPaddingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException{\n        byte[] key = new byte[16];\n        SecretKeySpec k = new SecretKeySpec(key, \"AES\");\n        byte[] encryptedData = kr;\n        Cipher c2 = Cipher.getInstance(\"AES\");\n        c2.init(Cipher.DECRYPT_MODE, k);\n        byte[] data = c2.doFinal(encryptedData);\n        return data;\n    }\n    public static void main(String args[]) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{\n\n                //method1\n                System.out.println(encrypted(\"adsda\"));\n                String f = new String (encrypted(\"adsda\")); //working on console but not works when stores to cookies because of invalid characters\n                System.out.println(f);\n                System.out.println(new String(decrypted(f.getBytes())));// works when decrypting in console, not tried in cookies because not able encrypt\n\n\n                //method2\n                String x = encrypted(\"adsda\").toString(); // works when stores in cookies works on console\n                System.out.println(x);\n                System.out.println(new String(decrypted(x.getBytes())));// decrypt not working both on console and cookies\n                System.out.println(decrypted(x.getBytes()).toString()); // decrypt not working both on console and cookies\n\n\n    }\n}\n", "idx": 1307}
{"project": "cipher", "commit_id": "Snippet45834088_27893.java", "target": 0, "func": "try\n        {\n            String encryptedText = \"FN0hbSrVzkqhe+w2rQefAQ==\";\n            String vectorKey = \"7EsBtzAJjMg=\";\n            //32 bit key\n            String secretKey = \"08061052989102040806105298910204\";\n            byte[] PinBytes = Base64.decodeBase64(encryptedText.getBytes(\"utf-8\"));\n            byte[] VectorBytes = Base64.decodeBase64(vectorKey.getBytes(\"utf-8\"));\n            byte[] SecretKeyBytes = Base64.decodeBase64(secretKey.getBytes(\"utf-8\"));\n            final MessageDigest md = MessageDigest.getInstance(\"md5\");\n            final byte[] digestOfPassword = md.digest(SecretKeyBytes);\n            final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n            for (int j = 0,  k = 16; j < 8;)\n            {\n                keyBytes[k++] = keyBytes[j++];\n            }\n\n            final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n            final IvParameterSpec iv = new IvParameterSpec(VectorBytes);\n            final Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n            decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n            //final byte[] encData = new sun.misc.BASE64Decoder().decodeBuffer(message);\n            final byte[] plainText = decipher.doFinal(PinBytes);\n\n            System.out.println(plainText.toString());           \n        }\n        catch (java.security.InvalidAlgorithmParameterException e) { System.out.println(\"Invalid Algorithm\"); }\n        catch (javax.crypto.NoSuchPaddingException e) { System.out.println(\"No Such Padding\"); }\n        catch (java.security.NoSuchAlgorithmException e) { System.out.println(\"No Such Algorithm\"); }\n        catch (java.security.InvalidKeyException e) { System.out.println(\"Invalid Key\"); }\n        catch (BadPaddingException e) { System.out.println(\"Invalid Key\");}\n        catch (IllegalBlockSizeException e) { System.out.println(\"Invalid Key\");}\n        catch (UnsupportedEncodingException e) { System.out.println(\"Invalid Key\");}     \n        catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n", "idx": 1308}
{"project": "cipher", "commit_id": "Snippet19760634_2476.java", "target": 0, "func": "static String decrypt(String strInput) throws IOException, NoSuchAlgorithmException,\n    NoSuchPaddingException, InvalidKeyException {\n    FileInputStream fis = new FileInputStream(strInput);\n\n    int endFile = strInput.length() - 4;\n    String strOut = strInput.substring(0, endFile) + \"xx.jpg\"; \n\n    FileOutputStream fos = new FileOutputStream(strOut);\n\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(),\n              \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n    int b;\n    byte[] d = new byte[8];\n\n    while ((b = cis.read(d)) != -1) {\n        fos.write(d, 0, b);\n    }\n    fos.flush();\n    fos.close();\n    cis.close();\n    return strOut;\n}\n", "idx": 1309}
{"project": "cipher", "commit_id": "Snippet24968616_7299.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\npublic class stackoverflow_test {\n    private byte[] encrypted;\n\n    private String encryptedtext;\n    private String decrypted;\n\n    public String Encrypt(String pInput) {\n\n        try {\n\n            String Input = pInput;\n            String key = \"Bar12345Bar12345Bar12345Bar12345\";\n\n            SecretKeySpec aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n\n            cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            byte[] encrypted = cipher.doFinal(Input.getBytes());\n            //encryptedtext = new String(encrypted);\n            encryptedtext = DatatypeConverter.printBase64Binary(encrypted);\n            System.err.println(\"encrypted:\" + encryptedtext);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return encryptedtext;\n    }\n\n    public String Decrypt(String pInput) {\n\n        try {\n\n            String Input = pInput;\n\n            String key = \"Bar12345Bar12345Bar12345Bar12345\";\n\n            SecretKeySpec aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n\n            cipher.init(Cipher.DECRYPT_MODE, aesKey);\n            encrypted = DatatypeConverter.parseBase64Binary(encryptedtext);\n            decrypted = new String(cipher.doFinal(encrypted)); \n            System.err.println(\"decrypted: \" + decrypted);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return pInput;\n    }\n\n    public static void main(String[] ag){\n        stackoverflow_test test = new stackoverflow_test();\n        String a = test.Encrypt(\"Byte cannot directly convert to string\");\n        String b = test.Decrypt(a);\n    }\n}\n", "idx": 1310}
{"project": "cipher", "commit_id": "Snippet47512818_28805.java", "target": 0, "func": "    Security.addProvider(new BouncyCastleProvider());\n    SecretKey sKey = new SecretKeySpec(Hex.decode(\"8ff6d560edfd395f3a1cbee18bcce3ac\"), \"Twofish\");\n    Cipher cipher = Cipher.getInstance(\"Twofish/ECB/NoPadding\",\"BC\");\n", "idx": 1311}
{"project": "cipher", "commit_id": "Snippet22181357_4574.java", "target": 0, "func": "public class TripleDes {\n\n    public static String EncryptTripleDES(String Cadena, String Llave)\n    {\n        String cryptedString = \"\";\n        try{\n            SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(\"DESede\");\n            Cipher desEdeCipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n            MessageDigest localMessageDigest = MessageDigest.getInstance(\"MD5\");\n\n            byte[] arrayOfByte1 = Llave.getBytes();\n            byte[] arrayOfByte3 = new byte[24];\n\n            localMessageDigest.update(arrayOfByte1);\n            byte[] result = localMessageDigest.digest();\n\n            for (int i=0; i<999; i++){\n               localMessageDigest.update(result);\n               result = localMessageDigest.digest();\n            }\n\n            byte[] arrayOfByte4 = result;\n\n            for (int n=0; n<16; n++)\n               arrayOfByte3[n] = arrayOfByte4[n];\n\n            for (int n=0; n<8; n++) \n               arrayOfByte3[(16 + n)] = arrayOfByte4[n];\n\n            DESedeKeySpec localDESedeKeySpec = new DESedeKeySpec(arrayOfByte3, 0);\n            SecretKey desEdeKey = secretKeyFactory.generateSecret(localDESedeKeySpec);\n            desEdeCipher.init(1, desEdeKey);\n\n            byte[] arrayOfByte = new byte[Cadena.length() % 8 > 0 ? Cadena.length() + 8 - Cadena.length() % 8 : Cadena.length()];\n            System.arraycopy(Cadena.getBytes(), 0, arrayOfByte, 0, Cadena.length());\n\n            //Resultado en base 64:\n            String b_64 = encryptaBase64(desEdeCipher.doFinal(arrayOfByte));\n\n            //Convertir resultado a cadena en hexadecimal\n            cryptedString = StringToHexString(b_64);\n\n        }catch(Exception e){\n          e.printStackTrace();\n        }\n        return cryptedString;\n    }\n\n    public static String StringToHexString(String s) {\n        StringBuffer stringbuffer = new StringBuffer(s.length() * 2);\n        for (int i = 0; i < s.length(); i++) {\n            int j = s.charAt(i) & 0xff;\n            if (j < 16)\n                stringbuffer.append('0');\n            stringbuffer.append(Integer.toHexString(j));\n        }\n        return stringbuffer.toString().toUpperCase();\n    }\n\n    public static String encryptaBase64(byte[] paramArrayOfByte) throws Exception{\n        int i = paramArrayOfByte.length;\n        int j = (i * 4 + 2) / 3;\n        int k = (i + 2) / 3 * 4;\n        byte[] result = new byte[k];\n        char[] map1 = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9','+','/'};\n        int m = 0;\n        for (int n = 0; m < i; n++)\n        {\n            int i1 = paramArrayOfByte[(m++)] & 0xFF;\n            int i2 = m < i ? paramArrayOfByte[(m++)] & 0xFF : 0;\n            int i3 = m < i ? paramArrayOfByte[(m++)] & 0xFF : 0;\n            int i4 = i1 >>> 2;\n            int i5 = (i1 & 0x3) << 4 | i2 >>> 4;\n            int i6 = (i2 & 0xF) << 2 | i3 >>> 6;\n            int i7 = i3 & 0x3F;\n            result[(n++)] = ((byte)map1[i4]);\n            result[(n++)] = ((byte)map1[i5]);\n            result[n] = ((byte)(n < j ? map1[i6] : 61)); n++;\n            result[n] = ((byte)(n < j ? map1[i7] : 61));\n        }\n        return new String(result);\n    }\n\n    public static String DecryptTripleDES(String Cadena, String Llave)\n    {\n        String decryptedString = \"\";\n        try\n        {\n            SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(\"DESede\");\n            Cipher desEdeCipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n            MessageDigest localMessageDigest = MessageDigest.getInstance(\"MD5\");\n\n            byte[] arrayOfByte1 = Llave.getBytes();\n            byte[] arrayOfByte3 = new byte[24];\n\n            localMessageDigest.update(arrayOfByte1);\n            byte[] result = localMessageDigest.digest();\n\n            for (int i=0; i<999; i++){\n               localMessageDigest.update(result);\n               result = localMessageDigest.digest();\n            }\n            byte[] arrayOfByte4 = result;\n\n            for (int n=0; n<16; n++)\n               arrayOfByte3[n] = arrayOfByte4[n];\n\n            for (int n=0; n<8; n++) \n               arrayOfByte3[(16 + n)] = arrayOfByte4[n];\n\n            DESedeKeySpec localDESedeKeySpec = new DESedeKeySpec(arrayOfByte3, 0);\n            SecretKey desEdeKey = secretKeyFactory.generateSecret(localDESedeKeySpec);\n            desEdeCipher.init(2, desEdeKey);\n\n            //Convertir cadena hexadecimal a String\n            String hexString = \"\";\n            for(int i = 0; i < Cadena.length()/2; i++){\n                int k = Integer.parseInt(Cadena.substring(i*2, (i*2)+2), 16);\n                hexString += (char)k;\n            }\n\n            result = desEdeCipher.doFinal(decrypt(hexString.getBytes()));\n            decryptedString = new String(result).trim();\n        }\n        catch(Exception e){\n            e.printStackTrace();\n        }\n        return decryptedString;\n    }\n\n    public static byte[] decrypt(byte[] paramArrayOfByte) throws Exception {\n        byte[] map2 = new byte[256];\n        char[] map1 = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9','+','/'};\n        for (int i = 0; i < map2.length; i++) map2[i] = -1;\n        for (int i = 0; i < 64; i++) map2[map1[i]] = ((byte)i);\n\n        int i = paramArrayOfByte.length;\n        if (i % 4 != 0) throw new IllegalArgumentException(\"Length of Base64 encoded input string is not a multiple of 4.\");\n        while ((i > 0) && (paramArrayOfByte[(i - 1)] == 61)) i--;\n        int j = i * 3 / 4;\n        byte[] result = new byte[j];\n        int k = 0;\n        int m = 0;\n        while (k < i)\n        {\n            int n = paramArrayOfByte[(k++)];\n            int i1 = paramArrayOfByte[(k++)];\n            int i2 = k < i ? paramArrayOfByte[(k++)] : 65;\n            int i3 = k < i ? paramArrayOfByte[(k++)] : 65;\n            if ((n > 127) || (i1 > 127) || (i2 > 127) || (i3 > 127))\n                throw new IllegalArgumentException(\"Illegal character in Base64 encoded data.\");\n            int i4 = map2[n];\n            int i5 = map2[i1];\n            int i6 = map2[i2];\n            int i7 = map2[i3];\n            if ((i4 < 0) || (i5 < 0) || (i6 < 0) || (i7 < 0))\n                throw new IllegalArgumentException(\"Illegal character in Base64 encoded data.\");\n            int i8 = i4 << 2 | i5 >>> 4;\n            int i9 = (i5 & 0xF) << 4 | i6 >>> 2;\n            int i10 = (i6 & 0x3) << 6 | i7;\n            result[(m++)] = ((byte)i8);\n            if (m < j) result[(m++)] = ((byte)i9);\n            if (m < j) result[(m++)] = ((byte)i10);\n        }\n        return result;\n    }\n}\n", "idx": 1312}
{"project": "cipher", "commit_id": "Snippet29683048_10332.java", "target": 0, "func": "desCipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n", "idx": 1313}
{"project": "cipher", "commit_id": "Snippet34215024_16231.java", "target": 0, "func": "import java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.security.*;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.util.Scanner;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class PasswordManager3\n{\n\n    static String key = \"SimplePasswordMg\";\n    static String password1 = \"\";\n    static String password2 = \"\";\n    static String username = \"\";\n\n\n    public static void main(String[] args) \n             throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, \n             BadPaddingException, IOException \n    {\n\n        Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        System.out.println(\"Enter New to input a new password, or Retrieve to retrieve an old password:\");\n        Scanner scanner1 = new Scanner(System.in);\n        String answer = scanner1.nextLine();\n\n        if(answer.equalsIgnoreCase(\"New\")) {\n\n            System.out.println(\"Please enter a username: \");\n            Scanner scanner2 = new Scanner(System.in);\n            username = scanner2.nextLine();\n\n            System.out.println(\"Please enter a password: \");\n            Scanner scanner3 = new Scanner(System.in);\n            password1 = scanner3.nextLine();\n\n            System.out.println(\"Please enter your password again: \");\n            Scanner scanner4 = new Scanner(System.in);\n            password2 = scanner4.nextLine();\n\n            if (password1.equalsIgnoreCase(password2)) {\n\n                Files.write(Paths.get(username + \".txt\"), encrypt(password1, cipher, aesKey));\n                System.out.println(\"Your password has been stored.\");\n            }\n\n            else {\n                System.out.println(\"The passwords you entered did not match. Exiting password manager.\");\n            }\n\n        }\n\n        else if(answer.equalsIgnoreCase(\"Retrieve\")) {\n\n            System.out.println(\"Please enter the username you would like to retrieve the password for: \");\n            Scanner scanner5 = new Scanner(System.in);\n            username = scanner5.nextLine();\n            BufferedReader in = new BufferedReader(new FileReader(username + \".txt\"));\n            String encryptedpass = in.readLine();\n            byte[] encryptedpass2 = encryptedpass.getBytes(\"UTF-8\");\n            System.out.println(decrypt(encryptedpass2, cipher, aesKey));\n        }\n\n        else {\n            System.out.println(\"You entered an incorrect option, program exited.\");\n        }\n\n    }\n\n     public static byte[] encrypt(String str, Cipher cipher, Key aesKey) \n             throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException \n     {\n\n          cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n\n          byte[] encrypted = cipher.doFinal(key.getBytes(\"UTF-8\"));\n\n          return encrypted;\n     }\n\n    public static String decrypt(byte[] byte1, Cipher cipher, Key aesKey) \n            throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException \n\n    {\n\n        cipher.init(Cipher.DECRYPT_MODE, aesKey);\n        String decrypted = new String(cipher.doFinal(byte1));\n        return decrypted;\n    }\n\n}\n", "idx": 1314}
{"project": "cipher", "commit_id": "Snippet32156380_14250.java", "target": 0, "func": "public void register() {\n    // ENCRYPT PASSWORD\n    try {\n        String key = username; // 128bit key (16*8)\n        String text = password;\n\n        // CREATE KEY AND CIPHER\n        Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        // ENCRYPT THE TEXT\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n        byte[] encrypted = cipher.doFinal(text.getBytes());\n        System.out.println(\"Encrypted: \" + new String(encrypted));\n\n        // SET VARIABLE FOR SAVING\n        p = new String(new String(encrypted));\n        System.out.println(\"p: \" + new String(p));\n        System.out.println(\"p: \" + password);\n    }\n    catch (Exception e){\n        e.printStackTrace();\n    }\n\n    // ENCRYPT QUESTION\n    try {\n        String key = username; // 128bit key (16*8)\n        String text = question;\n\n        // CREATE KEY AND CIPHER\n        Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        // ENCRYPT THE TEXT\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n        byte[] encrypted = cipher.doFinal(text.getBytes());\n        System.out.println(\"Encrypted: \" + new String(encrypted));\n\n        // SET VARIABLE FOR SAVING\n        q = new String(new String(encrypted));\n        System.out.println(\"q: \" + new String(q));\n        System.out.println(\"q: \" + question);\n    }\n    catch (Exception e){\n        e.printStackTrace();\n    }\n\n    // ENCRYPT ANSWER\n    try {\n        String key = username; // 128bit key (16*8)\n        String text = answer;\n\n        // CREATE KEY AND CIPHER\n        Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        // ENCRYPT THE TEXT\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n        byte[] encrypted = cipher.doFinal(text.getBytes());\n        System.out.println(\"Encrypted: \" + new String(encrypted));\n\n        // SET VARIABLE FOR SAVING\n        an = new String(new String(encrypted));\n        System.out.println(\"an: \" + new String(an));\n        System.out.println(\"an: \" + answer);\n    }\n    catch (Exception e){\n        e.printStackTrace();\n    }\n\n\n\n    // SAVE DATA IN LICENSE FILE\n    try {\n        File file = new File(\"C://Welcome/License.txt\");\n        file.getParentFile().mkdirs();\n        FileWriter fw = new FileWriter(file);\n        BufferedWriter bw = new BufferedWriter(fw);\n\n        //bw.write(new String(u));\n        //bw.newLine();\n        bw.write(new String(p));\n        bw.newLine();\n        bw.write(new String(q));\n        bw.newLine();\n        bw.write(new String(an));\n        bw.close();\n    }\n    catch(FileNotFoundException ex){\n        ex.printStackTrace();\n    }\n    catch(IOException ex){\n        ex.printStackTrace();\n    }\n\n    // CREATE A FOLDER FOR FILES\n    try {\n        File dir = new File(\"C://IronFortress/Files\");\n        dir.mkdir();\n    }\n    catch(Exception e){\n        e.printStackTrace();\n    }\n}\n\npublic void login() {\n    // LOAD PASSWORD, QUESTION AND ANSWER HASHES\n    String fileName = \"C:/Welcome/License.txt\";\n    String line0 = null;\n    String line1 = null;\n    String line2 = null;\n\n    try {\n        FileReader fr = new FileReader(fileName);\n        BufferedReader br = new BufferedReader(fr);\n\n        if((line0 = br.readLine()) != null){\n            p = (line0);\n        }\n        if((line1 = br.readLine()) != null){\n            q = (line1);\n        }\n        if((line2 = br.readLine()) != null){\n            an = (line2);\n        }\n\n        br.close();\n    }\n    catch(FileNotFoundException e) {\n        e.printStackTrace();\n    }\n    catch (IOException e) {\n        e.printStackTrace();\n    }\n\n\n\n    // DECRYPT STORED PASSWORD\n    try {\n        String key = username; // 128bit key (16*8)\n        String text = p;\n\n        // CREATE KEY AND CIPHER\n        Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        // DECRYPT THE TEXT\n        cipher.init(Cipher.DECRYPT_MODE, aesKey);\n        byte[] decrypted = cipher.doFinal(p.getBytes());\n        System.out.println(\"Decrypted Pass: \" + new String(decrypted));\n\n                // COMPARE VALUES\n                if (password.equals(new String(decrypted))){\n                //if (tf2.getText().equals(new String(decrypted))){\n                    welcome.setVisible(true);\n                    bg.setVisible(false);\n                    l.setVisible(false);\n                    tf1.setVisible(false);\n                    tf2.setVisible(false);\n                    b3.setVisible(false);\n                    b4.setVisible(false);\n                }\n    }\n    catch (Exception e){\n        e.printStackTrace();\n    }\n}\n", "idx": 1315}
{"project": "cipher", "commit_id": "Snippet32055879_14111.java", "target": 0, "func": "String privateKey = \"someprivatekey\";\nString data = \"dataToEncrypt\";\n\nDESKeySpec keySpec = new DESKeySpec(privateKey.getBytes(\"UTF-8\"));\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\nSecretKey key = keyFactory.generateSecret(keySpec);\n\nbyte[] dataToBytes = data.getBytes(\"UTF-8\");      \n\nCipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\"); \ncipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(new byte[8]));\n\n// send this string to server \nString encryptedStr = Base64.encodeToString(cipher.doFinal(dataToBytes), 0);\n", "idx": 1316}
{"project": "cipher", "commit_id": "Snippet13363754_36883.java", "target": 0, "func": "public void onClick(View arg0) {\n    user=rName.getText().toString().trim();\n    pass=rPwd.getText().toString().trim();\n\n    if(arg0==regBttn){     \n       if((user.length()!=0))\n        {\n          if((pass.length()!=0))\n        {\n\n        sp=getSharedPreferences(\"AccessApp\",MODE_WORLD_WRITEABLE);\n        Editor myEditor=sp.edit();\n\n        byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6 };\n\n        try {\n             String encryptedUser = encrypt(user, key);  \n             myEditor.putString(\"USERNAME_KEY\", encryptedUser); \n        }\n     catch (Exception e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }   \n    try {\n             String encryptedPass = encrypt(pass, key);  \n             myEditor.putString(\"PASSWORD_KEY\", encryptedPass); \n\n    } catch (Exception e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    myEditor.commit();\n    Toast.makeText(this, \"Registration is successfull\",10000).show();\n    i=new Intent(this,AccessApp.class);\n    startActivity(i);\n    }\n    else\n     {\n      Toast.makeText(this, \"Please Enter password\", 10000).show();  \n     }}\n\n    else{\n        Toast.makeText(this,\"Please Enter Username\",10000).show();\n     }\n        }\n\nelse if(arg0==rtnBttn){\n    AlertDialog.Builder builder=new AlertDialog.Builder(this);\n     builder.setTitle(\"Exit\");\n     builder.setMessage(\"Do you want to exit\");\n     builder.setCancelable(false);\n     builder.setPositiveButton(\"Yes\",new DialogInterface.OnClickListener() {\n\n  public void onClick(DialogInterface dialog, int which) {\n  // TODO Auto-generated method stub\n  finish();\n  }\n  });\n    builder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\n\n            public void onClick(DialogInterface arg0, int arg1) {\n                arg0.cancel();\n            }\n        });\n    AlertDialog alert=builder.create();\n    alert.show();\n}\n    }\n\npublic String encrypt(String toEncrypt, byte key[]) throws Exception {\n    SecretKeySpec secret = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secret);\n    byte[] encryptedBytes = cipher.doFinal(toEncrypt.getBytes());\n    String encrypted = Base64.encodeBytes(encryptedBytes);\n    return encrypted;\n\n}\n\n}\n", "idx": 1317}
{"project": "cipher", "commit_id": "Snippet30107048_12260.java", "target": 0, "func": "public static byte[] encrypt(String plainText, char[] password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, NoSuchProviderException {\n    SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBEWithSHA256And256BitAES-CBC-BC\", \"BC\");\n    KeySpec spec = new PBEKeySpec(password, salt, 2048, 256);\n    SecretKey key = new SecretKeySpec(factory.generateSecret(spec).getEncoded(), \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    return cipher.doFinal(plainText.getBytes());\n}\n", "idx": 1318}
{"project": "cipher", "commit_id": "Snippet8629598_33384.java", "target": 0, "func": "cipher = Cipher.getInstance(\"Blowfish\")", "idx": 1319}
{"project": "cipher", "commit_id": "Snippet44430959_26481.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"Blowfish\");\ncipher.init(Cipher.ENCRYPT_MODE, key);\nFileInputStream fis = new FileInputStream(plain);\n\nFileOutputStream fos = new FileOutputStream(copy);\nCipherOutputStream out2 = new CipherOutputStream(fos, cipher);\nbyte[] buffer = new byte[1024];\nwhile (fis.read(buffer)>=0) {\n    out2.write(buffer);\n}\n", "idx": 1320}
{"project": "cipher", "commit_id": "Snippet15639442_38631.java", "target": 0, "func": "package com.example.app;\n\nimport java.io.DataInputStream;\nimport java.net.URL;\nimport java.security.Security;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Decoder;\n\npublic class MainClass {\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args)\n    {\n        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n\n        try {\n            BASE64Decoder decoder   = new BASE64Decoder();\n            String b64PrivateKey    = getContents(\"http://localhost/api/keypair.php\").trim();\n            String b64EncryptedStr  = getContents(\"http://localhost/api/encrypt.php\").trim();\n\n            System.out.println(\"PrivateKey (b64): \" + b64PrivateKey);\n            System.out.println(\" Encrypted (b64): \" + b64EncryptedStr);\n\n            SecretKeySpec privateKey    = new SecretKeySpec( decoder.decodeBuffer(b64PrivateKey) , \"AES\");\n            Cipher cipher               = Cipher.getInstance(\"RSA/None/OAEPWithSHA1AndMGF1Padding\", \"BC\");\n            cipher.init(Cipher.DECRYPT_MODE, privateKey);\n\n            byte[] plainText            = decoder.decodeBuffer(b64EncryptedStr);\n\n            System.out.println(\"         Message: \" + plainText);\n        }\n        catch( Exception e )\n        {\n            System.out.println(\"           Error: \" + e.getMessage());\n        }\n\n    }\n\n    public static String getContents(String url)\n    {\n        try {\n            String result = \"\";\n            String line;\n            URL u = new URL(url);\n            DataInputStream theHTML = new DataInputStream(u.openStream());\n            while ((line = theHTML.readLine()) != null)\n                result = result + \"\\n\" + line;\n\n            return result;\n        }\n        catch(Exception e){}\n\n        return \"\";\n    }\n}\n", "idx": 1321}
{"project": "cipher", "commit_id": "Snippet14453861_37720.java", "target": 0, "func": "    final CertAndKeyGen keypair = new CertAndKeyGen(\"RSA\", \"SHA1WithRSA\", null);\n    keypair.generate(1024);\n    final PrivateKey privKey = keypair.getPrivateKey();\n    byte[] encodedprivkey = privKey.getEncoded();\n    String MYPBEALG = \"PBEWithSHA1AndDESede\";\n    String password = \"test123\";\n    int count = 20;// hash iteration count\n    Random random = new Random();\n    byte[] salt = new byte[8];\n    random.nextBytes(salt);\n    PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, count);\n    PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());\n    SecretKeyFactory keyFac = SecretKeyFactory.getInstance(MYPBEALG);\n    SecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n    Cipher pbeCipher = Cipher.getInstance(MYPBEALG);\n    // Initialize PBE Cipher with key and parameters\n    pbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n    // Encrypt the encoded Private Key with the PBE key\n    byte[] ciphertext = pbeCipher.doFinal(encodedprivkey);\n    // Now construct  PKCS #8 EncryptedPrivateKeyInfo object\n    AlgorithmParameters algparms = AlgorithmParameters.getInstance(MYPBEALG);\n    algparms.init(pbeParamSpec);\n    EncryptedPrivateKeyInfo encinfo = new EncryptedPrivateKeyInfo(algparms,ciphertext);\n    byte[] encryptedPkcs8 = encinfo.getEncoded();\n\n    // Now I am writing the encrypted private key into a file.\n    // Using FileOutputStream \n\n    FileOutputStream out = new FileOutputStream(\"usingOutEncrypedPrivkey\");\n    out.write(Base64.encodeBase64(encryptedPkcs8, true));\n    out.flush();\n    out.close();\n\n    // Using PrintWriter \n    PrintWriter pw = new PrintWriter(\"usingPwEncryptedPrivKey\");\n    pw.println(\"-----BEGIN \"+ privKey.getAlgorithm() + \" PRIVATE KEY-----\");\n    pw.println(Base64.encodeBase64(encryptedPkcs8));\n    pw.println(\"-----END \"+ privKey.getAlgorithm() +\" PRIVATE KEY-----\");\n    pw.close();\n", "idx": 1322}
{"project": "cipher", "commit_id": "Snippet23392085_5761.java", "target": 0, "func": "Cipher CIPHER = Cipher.getInstance(\"AES\");\n", "idx": 1323}
{"project": "cipher", "commit_id": "Snippet21933484_4357.java", "target": 0, "func": "Cipher cipher=Cipher.getInstance(\"AES\");    \ncipher.init(Cipher.ENCRYPT_MODE, key);\nenFile=cipher.doFinal(bFile);\n", "idx": 1324}
{"project": "cipher", "commit_id": "Snippet115540_29666.java", "target": 0, "func": "KeySpec ks = new DESKeySpec(new byte[] {'s','e','c','r','e','t','!','!'});\nSecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\nSecretKey sk = skf.generateSecret(ks);\nCipher c = Cipher.getInstance(\"DES/CBC/NoPadding\");\nIvParameterSpec ips = new IvParameterSpec(new byte[] {0,0,0,0,0,0,0,0});\nc.init(Cipher.ENCRYPT, sk, ips);\n// or\nc.init(Cipher.DECRYPT, sk, ips);\n", "idx": 1325}
{"project": "cipher", "commit_id": "Snippet42164739_24132.java", "target": 0, "func": "package org.springframework.security.util;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.spec.KeySpec;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport org.apache.commons.codec.binary.Base64;\nimport org.springframework.security.SpringSecurityException;\nimport org.springframework.util.Assert;\n\npublic final class EncryptionUtils\n{\n  public static byte[] stringToByteArray(String input)\n  {\n    Assert.hasLength(input, \"Input required\");\n    try\n    {\n      return input.getBytes(\"UTF-8\");\n    }\n    catch (UnsupportedEncodingException fallbackToDefault) {}\n    return input.getBytes();\n  }\n\n  public static String byteArrayToString(byte[] byteArray)\n  {\n    Assert.notNull(byteArray, \"ByteArray required\");\n    Assert.isTrue(byteArray.length > 0, \"ByteArray cannot be empty\");\n    try\n    {\n      return new String(byteArray, \"UTF8\");\n    }\n    catch (UnsupportedEncodingException e) {}\n    return new String(byteArray);\n  }\n\n  private static byte[] cipher(String key, byte[] passedBytes, int cipherMode)\n    throws EncryptionUtils.EncryptionException\n  {\n    try\n    {\n      KeySpec keySpec = new DESedeKeySpec(stringToByteArray(key));\n      SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DESede\");\n      Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n      SecretKey secretKey = keyFactory.generateSecret(keySpec);\n      cipher.init(cipherMode, secretKey);\n      return cipher.doFinal(passedBytes);\n    }\n    catch (Exception e)\n    {\n      throw new EncryptionException(e.getMessage(), e);\n    }\n  }\n\n  public static String encrypt(String key, String inputString)\n    throws EncryptionUtils.EncryptionException\n  {\n    isValidKey(key);\n    byte[] cipherText = cipher(key, stringToByteArray(inputString), 1);\n    return byteArrayToString(Base64.encodeBase64(cipherText));\n  }\n\n  public static byte[] encrypt(String key, byte[] inputBytes)\n    throws EncryptionUtils.EncryptionException\n  {\n    isValidKey(key);\n    return Base64.encodeBase64(cipher(key, inputBytes, 1));\n  }\n\n  public static String decrypt(String key, String inputString)\n    throws EncryptionUtils.EncryptionException\n  {\n    Assert.hasText(key, \"A key is required to attempt decryption\");\n    byte[] cipherText = cipher(key, Base64.decodeBase64(stringToByteArray(inputString)), 2);\n    return byteArrayToString(cipherText);\n  }\n\n  public static byte[] decrypt(String key, byte[] inputBytes)\n    throws EncryptionUtils.EncryptionException\n  {\n    Assert.hasText(key, \"A key is required to attempt decryption\");\n    return cipher(key, Base64.decodeBase64(inputBytes), 2);\n  }\n\n  private static void isValidKey(String key)\n  {\n    Assert.hasText(key, \"A key to perform the encryption is required\");\n    Assert.isTrue(key.length() >= 24, \"Key must be at least 24 characters long\");\n  }\n\n  public static class EncryptionException\n    extends SpringSecurityException\n  {\n    private static final long serialVersionUID = 1L;\n\n    public EncryptionException(String message, Throwable t)\n    {\n      super(t);\n    }\n\n    public EncryptionException(String message)\n    {\n      super();\n    }\n  }\n}\n", "idx": 1326}
{"project": "cipher", "commit_id": "Snippet41925353_23922.java", "target": 0, "func": "private void encryptKeysFile() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, IOException{\n    SecretKey key64 = new SecretKeySpec( new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 }, \"Blowfish\" );\n    Cipher cipher = Cipher.getInstance( \"Blowfish\" );\n    cipher.init( Cipher.ENCRYPT_MODE, key64 );\n    File keysFile = new File(System.getProperty(\"src\"),fileName);\n    SealedObject sealedObject = new SealedObject(keysFile, cipher);\n    CipherOutputStream cipherOutputStream = new CipherOutputStream( new BufferedOutputStream( new FileOutputStream(fileName) ), cipher );\n    ObjectOutputStream outputStream = new ObjectOutputStream( cipherOutputStream );\n    outputStream.writeObject(sealedObject);\n    outputStream.close();\n}\n", "idx": 1327}
{"project": "cipher", "commit_id": "Snippet6566925_32200.java", "target": 0, "func": "SecretKeySpec keySpec = new SecretKeySpec(AesKey, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, keySpec);\nreturn cipher.doFinal(input);\n", "idx": 1328}
{"project": "cipher", "commit_id": "Snippet29476395_11500.java", "target": 0, "func": "public class SimpleCrypto{\npublic static String encrypt(String seed, String cleartext) throws Exception\n{\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted) throws Exception\n{\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception\n{\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception\n{\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception\n{\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static String toHex(String txt)\n{\n    return toHex(txt.getBytes());\n}\n\npublic static String fromHex(String hex)\n{\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString)\n{\n    int len = hexString.length() / 2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2), 16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf)\n{\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2 * buf.length);\n    for (int i = 0; i < buf.length; i++)\n    {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\n\nprivate final static String HEX = \"0123456789ABCDEF\";\n\nprivate static void appendHex(StringBuffer sb, byte b)\n{\n    sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n}\n}\n", "idx": 1329}
{"project": "cipher", "commit_id": "Snippet15158089_38262.java", "target": 0, "func": "byte[] data = \":\u00ca\u00ba$jhk\u00a8\u00eb\u2039\u00f2\u00ba\u00c3\"; // fetched from php server..\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, mKeyspec);\nreturn new String(cipher.doFinal(data));\n", "idx": 1330}
{"project": "cipher", "commit_id": "Snippet4816771_31320.java", "target": 0, "func": "public String encript(String dataToEncrypt)\n        throws NoSuchAlgorithmException, NoSuchPaddingException,\n        InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    // I'm using AES encription\n\n    if(!dataToEncrypt.equals(\"\")){\n        String key = \"FMVWf8d_sm#fz\";\n\n        Cipher c = Cipher.getInstance(\"AES\");\n        SecretKeySpec k;\n        try {\n            k = new SecretKeySpec(key.getBytes(), \"AES\");\n            c.init(Cipher.ENCRYPT_MODE, k);\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n\n\n        return new String(c.doFinal(Base64.decode(dataToEncrypt)));\n    }\n    return \"\";\n}\n\npublic String decript(String encryptedData)\n        throws NoSuchAlgorithmException, NoSuchPaddingException,\n        InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n\n    if(!encryptedData.equals(\"\")){\n        String key = \"FMVWf8d_sm#fz\";\n\n        Cipher c = Cipher.getInstance(\"AES\");\n        SecretKeySpec k = new SecretKeySpec(Base64.decode(key), \"AES\");\n        c.init(Cipher.DECRYPT_MODE, k);\n        return new String(c.doFinal(Base64.decode(encryptedData)));\n    }\n    return \"\";\n}\n", "idx": 1331}
{"project": "cipher", "commit_id": "Snippet12292389_36181.java", "target": 0, "func": "    public class Encryption extends Applet {\n    Key keyOrig;\n    BASE64Decoder decoder = new BASE64Decoder();\n    BASE64Encoder encoder = new BASE64Encoder();\n\n    public void init() {\n        try {\n            keyOrig = generateKey();\n\n            String keyString = encoder.encode(keyOrig.getEncoded());\n            System.out.println(\"Key: \"+keyString);\n\n            Key key = new SecretKeySpec(keyString.getBytes(),0,keyString.getBytes().length, \"DES\");     \n\n            String message = \"This is hacker proof!\";\n            System.out.println(\"Message is: \"+message);\n\n            String encryptedMessage = encrypt(message,key);\n            System.out.println(\"Message encrypted: \"+ encryptedMessage);\n\n            String decryptedMessage = decrypt(encryptedMessage,key);\n            System.out.println(\"Message decrypted: \"+ decryptedMessage);\n\n\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Key generateKey() throws NoSuchAlgorithmException {\n        KeyGenerator generator;\n        generator = KeyGenerator.getInstance(\"DES\");\n        generator.init(new SecureRandom());\n        return keyOrig = generator.generateKey();\n    }\n\n    @SuppressWarnings(\"unused\")\n    public String encrypt(String message, Key key)\n            throws IllegalBlockSizeException, BadPaddingException,\n            NoSuchAlgorithmException, NoSuchPaddingException,\n            InvalidKeyException, UnsupportedEncodingException {\n        // Get a cipher object.\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        // Gets the raw bytes to encrypt, UTF8 is needed for\n        // having a standard character set\n        byte[] stringBytes = message.getBytes(\"UTF8\");\n\n        // encrypt using the cypher\n        byte[] raw = cipher.doFinal(stringBytes);\n\n        // converts to base64 for easier display.\n        @SuppressWarnings(\"restriction\")\n        BASE64Encoder encoder = new BASE64Encoder();\n        String base64 = encoder.encode(raw);\n\n        return base64;\n    }\n\n    public String decrypt(String encrypted, Key key) throws InvalidKeyException,\n            NoSuchAlgorithmException, NoSuchPaddingException,\n            IllegalBlockSizeException, BadPaddingException, IOException {\n\n        // Get a cipher object.\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n        // decode the BASE64 coded message\n        BASE64Decoder decoder = new BASE64Decoder();\n        byte[] raw = decoder.decodeBuffer(encrypted);\n\n        // decode the message\n        byte[] stringBytes = cipher.doFinal(raw);\n\n        // converts the decoded message to a String\n        String clear = new String(stringBytes, \"UTF8\");\n        return clear;\n    }\n}\n", "idx": 1332}
{"project": "cipher", "commit_id": "Snippet27785741_9955.java", "target": 0, "func": "public class AES {\n\n    private static SecretKeySpec secretKey;\n    private static byte[] key;\n    private static String decryptedString;\n    private static String encryptedString;\n\n    public static void setKey(String myKey) {\n\n        MessageDigest sha = null;\n        try {\n            key = myKey.getBytes(\"UTF-8\");\n            System.out.println(key.length);\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n            key = Arrays.copyOf(key, 16); // use only first 128 bit\n            System.out.println(key.length);\n            System.out.println(new String(key, \"UTF-8\"));\n            secretKey = new SecretKeySpec(key, \"AES\");\n        } catch (NoSuchAlgorithmException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    public static String getDecryptedString() {\n        return decryptedString;\n    }\n\n    public static void setDecryptedString(String decryptedString) {\n        AES.decryptedString = decryptedString;\n    }\n\n    public static String getEncryptedString() {\n        return encryptedString;\n    }\n\n    public static void setEncryptedString(String encryptedString) {\n        AES.encryptedString = encryptedString;\n    }\n\n    public static String encrypt(String strToEncrypt) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            setEncryptedString(Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))));\n        } catch (Exception e) {\n            System.out.println(\"Error while encrypting: \" + e.toString());\n        }\n        return null;\n    }\n\n    public static String decrypt(String strToDecrypt) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            setDecryptedString(new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt))));\n        } catch (Exception e) {\n            System.out.println(\"Error while decrypting: \" + e.toString());\n        }\n        return null;\n    }\n}\n", "idx": 1333}
{"project": "cipher", "commit_id": "Snippet36002834_17872.java", "target": 0, "func": "import android.util.Base64;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Decryption {\n\nprivate SecretKeySpec keySpec;\nprivate String algorithm = \"Blowfish/CBC/PKCS5Padding\";\nprivate Cipher cipher;\n\npublic void setupForDecryption(String key) throws NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {\n    byte[] keyData = key.getBytes();\n    keySpec = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"Blowfish\");\n    cipher = Cipher.getInstance(algorithm);\n}\n\npublic boolean checkForKeySpec() {\n    if(keySpec !=  null){\n        return true;\n    }\n    return false;\n}\n\npublic SecretKeySpec getSecretKey() {\n    return keySpec;\n}\n\npublic String decryptString(String inputString) throws InvalidKeyException, BadPaddingException, IllegalBlockSizeException, InvalidAlgorithmParameterException, UnsupportedEncodingException {\n    IvParameterSpec ivSpec = new IvParameterSpec(keySpec.getEncoded());\n    cipher.init(Cipher.DECRYPT_MODE, getSecretKey(),ivSpec);\n    byte[] decryptedBytes = Base64.decode(inputString,0);\n    String decrypted = new String(decryptedBytes);\n    return decrypted;\n}\n}\n", "idx": 1334}
{"project": "cipher", "commit_id": "Snippet8302796_33141.java", "target": 0, "func": "   //string encrypted contains the string of the encoded characters. \n\n     String encrypted = intent.getStringExtra(\"SCAN_RESULT\");\n\n     //converting the string into a byte array          \n     byte[] byteEncrypted = encrypted.getBytes();\n\n     //instantiating the AES cipher object\n     Cipher cipher = Cipher.getInstance(\"AES\");\n\n     //Predefined public-key \n\n     byte[] skey = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,  0x0b, 0x0c, 0x0d, 0x0e, 0x0f };\n\n     //creating a secretKeySpec       \n     SecretKeySpec skeyspec = new SecretKeySpec(skey, \"AES\");\n\n //initializing the cipher to Decrypt               \n     cipher.init(Cipher.DECRYPT_MODE, skeyspec);\n  final byte[] decrypt  = cipher.doFinal(byteEncrypted);\n\n //decrypting the string                \n String contents = new String(decrypt, \"UTF-8\");\n", "idx": 1335}
{"project": "cipher", "commit_id": "Snippet36856965_18828.java", "target": 0, "func": "private byte[] encryptrc4(String toEncrypt, String key) throws Exception{\n        // create a binary key from the argument key (seed)\n        SecureRandom sr = new SecureRandom(key.getBytes());\n\n        KeyGenerator kg = KeyGenerator.getInstance(\"RC4\");\n        kg.init(sr);\n        SecretKey sk = kg.generateKey();\n\n        // create an instance of cipher\n        Cipher cipher = Cipher.getInstance(\"RC4\");\n\n        // initialize the cipher with the key\n        cipher.init(Cipher.ENCRYPT_MODE, sk);\n\n        // enctypt!\n        byte[] encrypted = cipher.doFinal(toEncrypt.getBytes());\n\n        return encrypted;\n    }\n", "idx": 1336}
{"project": "cipher", "commit_id": "Snippet21994023_4421.java", "target": 0, "func": "Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n", "idx": 1337}
{"project": "cipher", "commit_id": "Snippet44455550_26511.java", "target": 0, "func": "import java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.Base64;\n\npublic class encryptData {\n  public static void main(String[] args) {\n\n    String data=\"amount=10&expiryDate=20150101 151515&orderRefNum=11001&postBackURL=http://localhost:9081/local/status.php&storeId=28\";\n    String key=\"89OUITUPRL3I8H3G\";\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(), \"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n    encryptedValue = new String(Base64.encodeBase64(cipher.doFinal(data.getBytes())));\n  }\n}\n", "idx": 1338}
{"project": "cipher", "commit_id": "Snippet17274787_511.java", "target": 0, "func": "    // generate a key pair\n    KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n    kpg.initialize(512, Utils.createFixedRandom());\n\n    KeyPair pair = kpg.generateKeyPair();\n\n    for (Object obj : java.security.Security.getAlgorithms(\"Cipher\")) {\n      System.out.println(obj);\n    }\n\n    // wrapping step\n    char[]              password = \"hello\".toCharArray();\n    byte[]              salt = new byte[20];\n    int                 iCount = 100;\n    String              pbeAlgorithm = \"PBEWITHMD5ANDTRIPLEDES\";\n    PBEKeySpec          pbeKeySpec = new PBEKeySpec(password, salt, iCount);\n    SecretKeyFactory    secretKeyFact = SecretKeyFactory.getInstance(pbeAlgorithm/*, \"BC\"*/);\n    Cipher              cipher = Cipher.getInstance(pbeAlgorithm/*, \"BC\"*/);\n\n    cipher.init(Cipher.WRAP_MODE, secretKeyFact.generateSecret(pbeKeySpec));\n\n    byte[]             wrappedKey = cipher.wrap(pair.getPrivate());\n\n//    System.out.println(ASN1Dump.dumpAsString(new ASN1InputStream(cipher.getParameters().getEncoded()).readObject()));\n\n    // create carrier   \n    EncryptedPrivateKeyInfo pInfo = new EncryptedPrivateKeyInfo(cipher.getParameters(), wrappedKey);\n\n    // unwrapping step - note we only use the password\n    pbeKeySpec = new PBEKeySpec(password);\n\n    cipher = Cipher.getInstance(pInfo.getAlgName()/*, \"BC\"*/);\n\n    cipher.init(Cipher.DECRYPT_MODE, secretKeyFact.generateSecret(pbeKeySpec), pInfo.getAlgParameters());\n\n    PKCS8EncodedKeySpec pkcs8Spec = pInfo.getKeySpec(cipher);\n    KeyFactory          keyFact = KeyFactory.getInstance(\"RSA\"/*, \"BC\"*/);\n    PrivateKey          privKey = keyFact.generatePrivate(pkcs8Spec);\n\n\n    ASN1InputStream     aIn = new ASN1InputStream(pkcs8Spec.getEncoded());\n    PrivateKeyInfo      info = PrivateKeyInfo.getInstance(aIn.readObject());\n\n    System.out.println(ASN1Dump.dumpAsString(info));        \n    System.out.println(ASN1Dump.dumpAsString(info.getPrivateKey()));\n\n    if (privKey.equals(pair.getPrivate()))\n    {\n        System.out.println(\"key recovery successful\");\n    }\n    else\n    {\n        System.out.println(\"key recovery failed\");\n    }\n", "idx": 1339}
{"project": "cipher", "commit_id": "Snippet15954508_38952.java", "target": 0, "func": "public static SecretKey generateKey() throws NoSuchAlgorithmException, InvalidKeySpecException {\n    return secret = new SecretKeySpec(password.getBytes(), \"AES\");\n}\n\npublic static byte[] encryptMsg(String message, SecretKey secret) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidParameterSpecException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {\n/* Encrypt the message. */\n    Cipher cipher = null;\n    cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, secret);\n    byte[] cipherText = cipher.doFinal(message.getBytes(\"UTF-8\"));\n    return cipherText;\n}\n\npublic static String decryptMsg(byte[] cipherText, SecretKey secret) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidParameterSpecException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException {\n\n    /* Decrypt the message, given derived encContentValues and initialization vector. */\n    Cipher cipher = null;\n    cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n   cipher.init(Cipher.DECRYPT_MODE, secret);\n    String decryptString = new String(cipher.doFinal(cipherText), \"UTF-8\");\n    return decryptString;\n}\n", "idx": 1340}
{"project": "cipher", "commit_id": "Snippet18282593_1324.java", "target": 0, "func": "public void actionPerformed(ActionEvent e) {\n    try {\n        String input = (textField.getText());\n        //ENCRYPTION\n        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n        md5.update(\"So What's Up Doc?\".getBytes());\n\n        SecretKeySpec key = new SecretKeySpec(md5.digest(), \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte encryptedMessage[] = cipher.doFinal(input.getBytes());\n        //Sends the encrypted version of message\n        System.out.println(encryptedMessage);\n        out.println(encryptedMessage);\n        //Clears the input box\n        textField.setText(\"\");\n    } catch (    NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException ex) {\n        Logger.getLogger(ChatClient.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    }\n", "idx": 1341}
{"project": "cipher", "commit_id": "Snippet15528057_38566.java", "target": 0, "func": "Cipher.getInstance(\"DES/ECB/PKCS5Padding\")", "idx": 1342}
{"project": "cipher", "commit_id": "Snippet14297219_37639.java", "target": 0, "func": "SecretKeySpec key = new SecretKeySpec(keyBytes, \"DESede\");\nIvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\nCipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\ncipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);\nbyte[] encrypted = cipher.doFinal(input.getBytes());\n", "idx": 1343}
{"project": "cipher", "commit_id": "Snippet26265524_8463.java", "target": 0, "func": "public String getJSON() {\n            String jsonString = \"\";\n\n    try {\n            String algorithm = \"DESede\";\n            jsonString = \"\";\n            SecretKeyFactory skf = SecretKeyFactory.getInstance(algorithm);\n            DESedeKeySpec kspec = new DESedeKeySpec(readKey().getBytes());\n            SecretKey key = skf.generateSecret(kspec);\n            Cipher cipher = Cipher.getInstance(algorithm);\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            CipherInputStream cip = new CipherInputStream(context.openFileInput(\"filename\"), cipher);\n\n            // here I have to get the result of decoding and write it to the jsonString\n\n            cip.close();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return jsonString;\n    }\n", "idx": 1344}
{"project": "cipher", "commit_id": "Snippet35580510_17489.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DESede\");\ncipher.init(Cipher.ENCRYPT_MODE, key);\n\n// Create a special output stream to do the work for us\nCipherOutputStream cos = new CipherOutputStream(out, cipher);\n\n// Read from the input and write to the encrypting output stream\nbyte[] buffer = new byte[2048];\nint bytesRead;\nwhile ((bytesRead = in.read(buffer)) != -1) {\n    cos.write(buffer, 0, bytesRead);\n}\ncos.close();\n", "idx": 1345}
{"project": "cipher", "commit_id": "Snippet35106909_17047.java", "target": 0, "func": "public String decrypt(String text) throws DecryptionException{\n        try{\n\n        //byte[] decordedValue = new BASE64Decoder().decodeBuffer(text);\n        // tried too use it but with poor outcome\n        //c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] tmp1 = text.getBytes(\"UTF-8\");\n        //byte[] tmp = c.doFinal(\"aaaaaaaaaaaaaaaa\".getBytes());\n        //this returns BadPaddingException\n        byte[] tmp = c.doFinal(text.getBytes());\n        return new String(tmp, \"UTF-8\");\n\n    }catch(IllegalBlockSizeException e){\n    throw new DecryptionException();\n    }\n}\n", "idx": 1346}
{"project": "cipher", "commit_id": "Snippet15660170_38643.java", "target": 0, "func": "package com.example.app;\n\nimport java.io.BufferedReader;\nimport java.io.DataInputStream;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.security.KeyPair;\nimport java.security.PrivateKey;\nimport java.security.Security;\n\nimport javax.crypto.Cipher;\n\nimport org.bouncycastle.openssl.PEMReader;\n\nimport sun.misc.BASE64Decoder;\n\npublic class MainClass {\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args)\n    {\n        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n\n        try {\n            BASE64Decoder decoder   = new BASE64Decoder();\n            String b64PrivateKey    = getContents(\"http://localhost/api/keypair.php\").trim();\n            String b64EncryptedStr  = getContents(\"http://localhost/api/encrypt.php\").trim();\n\n            System.out.println(\"PrivateKey (b64): \" + b64PrivateKey);\n            System.out.println(\" Encrypted (b64): \" + b64EncryptedStr);\n\n            byte[] decodedKey           = decoder.decodeBuffer(b64PrivateKey);\n            byte[] decodedStr           = decoder.decodeBuffer(b64EncryptedStr);\n            PrivateKey privateKey       = strToPrivateKey(new String(decodedKey));\n\n            Cipher cipher               = Cipher.getInstance(\"RSA/None/OAEPWithSHA1AndMGF1Padding\", \"BC\");\n            cipher.init(Cipher.DECRYPT_MODE, privateKey);\n\n\n            byte[] plainText            = cipher.doFinal(decodedStr);\n\n            System.out.println(\"         Message: \" + new String(plainText));\n        }\n        catch( Exception e )\n        {\n            System.out.println(\"           Error: \" + e.getMessage());\n        }\n\n    }\n\n    public static String getContents(String url)\n    {\n        try {\n            String result = \"\";\n            String line;\n            URL u = new URL(url);\n            DataInputStream theHTML = new DataInputStream(u.openStream());\n            while ((line = theHTML.readLine()) != null)\n                result = result + \"\\n\" + line;\n\n            return result;\n        }\n        catch(Exception e){}\n\n        return \"\";\n    }\n\n    public static PrivateKey strToPrivateKey(String s)\n    {\n        try {\n            BufferedReader br   = new BufferedReader( new StringReader(s) );\n            PEMReader pr        = new PEMReader(br);\n            KeyPair kp          = (KeyPair)pr.readObject();\n            pr.close();\n            return kp.getPrivate();\n        }\n        catch( Exception e )\n        {\n\n        }\n\n        return null;\n    }\n}\n", "idx": 1347}
{"project": "cipher", "commit_id": "Snippet17045802_337.java", "target": 0, "func": "import java.util.Arrays;\nimport java.util.Random;\nimport java.io.ByteArrayOutputStream;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\nimport verschl\u00fcsseln.FalscheMACOderSaltException;\n\npublic static String verschluesselnZuBase64String(String daten) throws Exception{\n    String b64Daten;\n    byte[] datenArray = verschl\u00fcsseln(daten);\n    new Base64(true);\n    b64Daten = Base64.encodeBase64String(datenArray);\n    return b64Daten;\n}\n\npublic static String bytesToHex(byte[] bytes) {\n    final char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};\n    char[] hexChars = new char[bytes.length * 2];\n    int v;\n    for ( int j = 0; j < bytes.length; j++ ) {\n        v = bytes[j] & 0xFF;\n        hexChars[j * 2] = hexArray[v >>> 4];\n        hexChars[j * 2 + 1] = hexArray[v & 0x0F];\n    }\n    return new String(hexChars);\n}\n\npublic static byte[] verschl\u00fcsseln(String daten) throws Exception {\n    // Ben\u00f6tigt: daten, DreifachDES.password, DreifachDES.macString\n    // \u00c4ndert: saltString\n    // Ausf\u00fchrt: Verschl\u00fcsselt \"daten,\" 3DES mit Salt und ein MAC wird\n    // benutzt.\n    // hash(DreifachDES.password + salt) ist der Schl\u00fcssel.\n    // Der Output ist ein byte[]\n\n    // Erzeugen Digest f\u00fcr Passwort + Salt\n    password=\"pw\";\n            macstring=\"mac\";\n    final MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n\n    // Erzeugen zuf\u00e4llig 24 Byte Salt\n    Random z\u00fcfallig = new SecureRandom();\n    byte[] salt = new byte[24];\n    z\u00fcfallig.nextBytes(salt);\n\n    ByteArrayOutputStream pwsalt = new ByteArrayOutputStream();\n    pwsalt.write(password.getBytes(\"UTF-8\"));\n    pwsalt.write(salt);\n    byte[] unhashedBytes = pwsalt.toByteArray();\n\n    //Hash the pw+salt\n    byte[] digestVonPassword = md.digest(unhashedBytes);\n\n    //SHA1 only generates 20 bytes and we need more, so concatenate the salt onto the end.\n    byte[] digestVonPassword2 = new byte[digestVonPassword.length + salt.length];\n    System.arraycopy(digestVonPassword, 0, digestVonPassword2, 0, digestVonPassword.length);\n    System.arraycopy(salt, 0, digestVonPassword2, digestVonPassword.length, salt.length);\n\n    // Erzeugen die MAC (Message Authentication Code, Mesage\n    // Authentifizierung Chiffre)\n    // Sp\u00e4ter mache ich einmal ein zuf\u00e4llig String, und wir benutzen das\n    // immer.\n    SecretKeySpec macSpec = new SecretKeySpec(\n            digestVonPassword, \"HmacSHA1\");\n    Mac mac = Mac.getInstance(\"HmacSHA1\");\n    mac.init(macSpec);\n    byte[] macBytes = mac.doFinal(macString.getBytes());\n\n    // Wir brauchen nur 24 Bytes, benutze die Erste 24 von der Digest\n    final byte[] keyBytes = Arrays.copyOf(digestVonPassword2, 24);\n\n    // Erzeugen eine z\u00fcfallig IV\n    byte[] ivSeed = new byte[8];\n    z\u00fcfallig.nextBytes(ivSeed);\n    final IvParameterSpec iv = new IvParameterSpec(ivSeed);\n\n    // Erzeugen der Schl\u00fcssel\n    final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n\n    // Erzeugen Cipher mit 3DES, CBC und PKCS5Padding\n    final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n    // Erzeugen byte[] von String message\n    final byte[] plainTextBytes = daten.getBytes(\"UTF-8\");\n    byte[] vorIvCipherText = cipher.doFinal(plainTextBytes);\n\n    // Erzeugen byte outputStream um die Arrays zu verbinden\n    ByteArrayOutputStream ostream = new ByteArrayOutputStream();\n\n    // Verbinden IV, Salt, MAC, und verschl\u00fcsselt String\n    ostream.write(cipher.getIV());\n    ostream.write(salt);\n    ostream.write(macBytes);\n    ostream.write(vorIvCipherText);\n\n    final byte[] cipherText = ostream.toByteArray();\n\n    return cipherText;\n}\n", "idx": 1348}
{"project": "cipher", "commit_id": "Snippet45053086_27176.java", "target": 0, "func": "import java.security.Security;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEParameterSpec;\nimport sun.misc.BASE64Decoder;\n\npublic class EncryptionUtils\n{\n  private Cipher decryptCipher;\n  private BASE64Decoder decoder = new BASE64Decoder();\n\n  public EncryptionUtils() throws SecurityException {\n    Security.addProvider(new com.sun.crypto.provider.SunJCE());\n\n    char[] pass = \"edurixkey\".toCharArray();\n    byte[] salt = {\n      -93, 33, 36, 44, \n      -14, -46, 62, 25 };\n\n    int iterations = 3;\n\n    init(pass, salt, iterations);\n  }\n\n  public void init(char[] pass, byte[] salt, int iterations) throws SecurityException {\n    try {\n      PBEParameterSpec ps = new PBEParameterSpec(salt, 20);\n      SecretKeyFactory kf = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n      SecretKey k = kf.generateSecret(new javax.crypto.spec.PBEKeySpec(pass));\n\n      decryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");\n      decryptCipher.init(2, k, ps);\n    }\n    catch (Exception e) {\n      throw new SecurityException(\"Could not initialize Encryption: \" + e.getMessage());\n    }\n  }\n\n  public synchronized String decrypt(String str) throws SecurityException {\n    try {\n      byte[] dec = decoder.decodeBuffer(str);\n      byte[] utf8 = decryptCipher.doFinal(dec);\n      return new String(utf8, \"UTF8\");\n    }\n    catch (Exception e) {\n      throw new SecurityException(\"Could not decrypt: \" + e.getMessage());\n    }\n  }\n}   \n", "idx": 1349}
{"project": "cipher", "commit_id": "Snippet16657220_44.java", "target": 0, "func": "enter code here\n\npublic static void main(String[] args)  {\n//Same password used in android\n        String masterpassword =\"test\";\n        String crypto =  encrypt(masterpassword, \"XYZ\");\n\n}\n\n\n\n\n\n\n public static String encrypt(String seed, String cleartext) throws Exception {\n            byte[] rawKey = getRawKey(seed.getBytes());\n            System.out.println(rawKey);\n            byte[] result = encrypt(rawKey, cleartext.getBytes());\n           return Base64.encode(result);\n         //   return toHex(result);\n        }\n\n\n\n\n private static byte[] getRawKey(byte[] seed) throws Exception {\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n            SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n            sr.setSeed(seed);\n            kgen.init(128, sr); // 192 and 256 bits may not be available\n            SecretKey skey = kgen.generateKey();\n            byte[] raw = skey.getEncoded();\n            return raw;\n        }\n\n\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n", "idx": 1350}
{"project": "cipher", "commit_id": "Snippet45502635_27554.java", "target": 0, "func": "package encryption;\n\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport java.util.*;\nimport javax.crypto.*;\n\npublic class CipherClient\n{\n    public static void main(String[] args) throws Exception \n    {\n        String message = \"The quick brown fox jumps over the lazy dog.\";\n        String host = \"localhost\";\n        int port = 7999;\n        Socket s = new Socket(host, port);\n\n        // -Generate a DES key.\n        KeyGenerator generator = KeyGenerator.getInstance(\"DES\");\n        generator.init(new SecureRandom());\n        Key key = generator.generateKey();\n\n        // -Store it in a file.\n        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\"KeyFile.xx\"));\n        out.writeObject(key);\n        out.close();\n\n        // -Use the key to encrypt the message above and send it over socket s to the server.   \n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        CipherOutputStream cipherOut = new CipherOutputStream(s.getOutputStream(), cipher);\n        System.out.println(message.getBytes().length);\n        cipherOut.write(message.getBytes());\n    }\n}\n", "idx": 1351}
{"project": "cipher", "commit_id": "Snippet45984042_27116.java", "target": 0, "func": "String s=\"a1d0534e4baf9e670bde8670caee8b87\"\nString decKey = \"R=U!LH$O2B#\";\nCipher m_decrypt = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\nm_decrypt.init(Cipher.DECRYPT_MODE, new SecretKeySpec(decKey.getBytes(),\"Blowfish\"));\nbyte[] decrypted = m_decrypt.doFinal(Hex.decodeHex(s.toCharArray()));\n", "idx": 1352}
{"project": "cipher", "commit_id": "Snippet41349341_23324.java", "target": 0, "func": "    public void decrypt(){\n          int iterationCount = 1000;\n          int keyLength = 256;\n          int saltLength = keyLength / 8; \n          SecureRandom random = new SecureRandom();\n          byte[] salt = new byte[saltLength];\n          random.nextBytes(salt);\n          KeySpec keySpec = new PBEKeySpec(str_key.toCharArray(), salt,  iterationCount, keyLength);\n          SecretKeyFactory  keyFactory = null;\n          try {\n               keyFactory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n              } catch (NoSuchAlgorithmException e) {\n                 e.printStackTrace();\n              }\n              byte[] keyBytes = new byte[0];\n              try {\n                keyBytes = keyFactory.generateSecret(keySpec).getEncoded();\n                } catch (InvalidKeySpecException e) {\n                  e.printStackTrace();\n                }\n              SecretKey key = new SecretKeySpec(keyBytes, \"Blowfish\");\n\n\n\n    Cipher cipher2 = null;\n    try {\n        cipher2 = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\"); \n    } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n        e.printStackTrace();\n    }\n    iv = new byte[cipher2.getBlockSize()];\n    random.nextBytes(iv);\n    IvParameterSpec ivSpec = new IvParameterSpec(iv);\n    try {\n        cipher2.init(Cipher.DECRYPT_MODE, key, ivSpec );\n    } catch (InvalidKeyException  | InvalidAlgorithmParameterException e) {\n        e.printStackTrace();\n    }\n    byte[] decryptedBytes = null;\n    byte[] app= Base64.decode(str2,Base64.DEFAULT);\n\n    try {\n        decryptedBytes = cipher2.doFinal(app);\n    } catch (IllegalBlockSizeException | BadPaddingException  e) {\n        e.printStackTrace();\n    }\n\n\n    str3 = Base64.encodeToString(decryptedBytes,Base64.DEFAULT);\n}\n", "idx": 1353}
{"project": "cipher", "commit_id": "Snippet9749842_34184.java", "target": 0, "func": "RandomAccessFile f = new RandomAccessFile(\"partial-key.dat\", \"r\");\n   byte[] pkey = new byte[(int)f.length()];\n   f.read(pkey);\n\n   byte[] key = new byte[16];\n\n   RandomAccessFile f1 = new RandomAccessFile(\"ciphertext2.dat\", \"r\");\n   byte[] cipher_text = new byte[(int)f1.length()];\n   f.read(cipher_text);\n\n\n    for(int copy=0; copy<12;copy++){\n        key[copy] = pkey[copy];\n    }\n    for(int br =0 ; br <=4 ; br++){\n        byte[] integ = intToByteArray(br);\n        for(int ii =0 ; ii<4; ii++){\n            key[12+ii] = integ[ii];\n        }\n\n\n    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n    byte[] text_byte = cipher.doFinal(cipher_text);\n", "idx": 1354}
{"project": "cipher", "commit_id": "Snippet32544335_14655.java", "target": 0, "func": "public class Experiment {  \n    public static void main(String[] args) throws Exception {\n        File data = new File(\"C:\\\\Users\\\\Furze\\\\Desktop\\\\experiment.dat\");   \n        // I only execute the following to encrypt the file, which works fine:\n        Test test = new Test(new VariableMap<String, String>() {{\n            put(\"Name\", \"Furze\");\n        }});   \n        Cipher cipher = Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(new byte[] {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07}, \"Blowfish\"));\n        SealedObject sealedObject = new SealedObject(test, cipher);\n        CipherOutputStream outputStream = new CipherOutputStream(new BufferedOutputStream(new FileOutputStream(data.getPath())), cipher);\n        ObjectOutputStream objectOutput = new ObjectOutputStream(outputStream);\n        objectOutput.writeObject(sealedObject);     \n        objectOutput.close();\n        // I then comment out the above code to test the file, which fails.\n        Cipher cipher = Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(new byte[] {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07}, \"Blowfish\"));\n        CipherInputStream inputStream = new CipherInputStream(new BufferedInputStream(new FileInputStream(data.getPath())), cipher);\n        ObjectInputStream objectInput = new ObjectInputStream(inputStream);\n        SealedObject sealedObject = (SealedObject) objectInput.readObject();\n        Test test = (Test) sealedObject.getObject(cipher);\n        System.out.println(test.variables.get(\"Name\"));\n    }\n}\n", "idx": 1355}
{"project": "cipher", "commit_id": "Snippet44739109_26821.java", "target": 0, "func": "package com.example.rama.beta;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.Environment;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\n\npublic class MainActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Button encryptButton = (Button) findViewById(R.id.button1);\n        Button DecryptButton = (Button) findViewById(R.id.button2);\n        encryptButton.setOnClickListener(new OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n                try {\n                    encrypt();\n                } catch (InvalidKeyException e) {\n                    e.printStackTrace();\n                } catch (NoSuchAlgorithmException e) {\n                    e.printStackTrace();\n                } catch (NoSuchPaddingException e) {\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        DecryptButton.setOnClickListener(new OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n                try {\n                    decrypt();\n                } catch (InvalidKeyException e) {\n                    e.printStackTrace();\n                } catch (NoSuchAlgorithmException e) {\n                    e.printStackTrace();\n                } catch (NoSuchPaddingException e) {\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n    }\n    static void encrypt() throws IOException, NoSuchAlgorithmException,\n                NoSuchPaddingException, InvalidKeyException {\n            File extStore = Environment.getExternalStorageDirectory();\n            FileInputStream fis = new FileInputStream(extStore + \"/abc.m4v\");\n            FileOutputStream fos = new FileOutputStream(extStore + \"/encabc.m4v\");\n\n            SecretKeySpec sks = new SecretKeySpec(\"xxxx\".getBytes(),\n                    \"AES\");\n\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, sks);\n\n            CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n            int read;\n            byte[] buffer = new byte[1024];\n            while ((read = fis.read(buffer)) != -1) {\n                cos.write(buffer, 0, read);\n            }\n\n            cos.flush();\n            cos.close();\n            fis.close();\n        }\n\n    static void decrypt() throws IOException, NoSuchAlgorithmException,\n                NoSuchPaddingException, InvalidKeyException {\n\n            File extStore = Environment.getExternalStorageDirectory();\n            FileInputStream fis = new FileInputStream(extStore + \"/encabc.m4v\");\n\n            FileOutputStream fos = new FileOutputStream(extStore + \"/decabc.m4v\");\n            SecretKeySpec sks = new SecretKeySpec(\"xxxx\".getBytes(),\n                    \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, sks);\n            CipherInputStream cis = new CipherInputStream(fis, cipher);\n            int read;\n            byte[] buffer = new byte[1024];\n            while ((read = cis.read(buffer)) != -1) {\n                fos.write(buffer, 0, read);\n            }\n            fos.flush();\n            fos.close();\n            cis.close();\n\n        }\n    }\n", "idx": 1356}
{"project": "cipher", "commit_id": "Snippet6992019_32501.java", "target": 0, "func": "byte[] tempByte = Base64.decodeBase64(encryptedString);\n\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, keySpec);\nbyte[] cipherData = cipher.doFinal(tempByte);\n\nString ttt = new String(cipherData ,\"UTF-8\");\nSystem.out.println(ttt);\n", "idx": 1357}
{"project": "cipher", "commit_id": "Snippet41974363_23959.java", "target": 0, "func": "package mundo;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\nclass AESTest {\n   public static void main(String[] args) throws Exception {\n     //each array is a vector case {key, plainText, expectedCipher}\n     String[][] cases = new String[][]{{\"00000000000000000000000000000000\", \"f34481ec3cc627bacd5dc3fb08f273e6\",\"0336763e966d92595a567cc9ce537f5e\"},\n                                       {\"00000000000000000000000000000000\", \"9798c4640bad75c7c3227db910174e72\", \"a9a1631bf4996954ebc093957b234589\"},\n                                       {\"2b7e151628aed2a6abf7158809cf4f3c\", \"6bc1bee22e409f96e93d7e117393172a\", \"3ad77bb40d7a3660a89ecaf32466ef97\"},\n                                       {\"2b7e151628aed2a6abf7158809cf4f3c\", \"ae2d8a571e03ac9c9eb76fac45af8e51\", \"f5d3d58503b9699de785895a96fdbaaf\"}};\n     for(String[] kase : cases)\n     {\n         byte[] theKey = byte2hex(kase[0]);\n         byte[] theMsg = byte2hex(kase[1]);\n         byte[] theExp = byte2hex(kase[2]);\n         Cipher cipher = Cipher.getInstance(\"AES\");\n         SecretKeySpec keySpec = new SecretKeySpec(theKey, \"AES\");\n         cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n         byte[] cryptMsg = cipher.doFinal(theMsg);\n         System.out.println(\"Key     : \"+hex2byte(theKey));\n         System.out.println(\"Message : \"+hex2byte(theMsg));\n         System.out.println(\"Cipher  : \"+hex2byte(cryptMsg));\n         System.out.println(\"Expected: \"+hex2byte(theExp) + \"\\n\");\n     }\n   }\n   public static String hex2byte(byte[] array) {\n        return DatatypeConverter.printHexBinary(array);\n   }\n   public static byte[] byte2hex(String s) {\n        return DatatypeConverter.parseHexBinary(s);\n   }\n}\n", "idx": 1358}
{"project": "cipher", "commit_id": "Snippet21732018_4173.java", "target": 0, "func": "package encryption;\n\nimport java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class AES {\n\n     private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = \n        new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't',\n'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\npublic static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encVal);\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n}\n\n}\n", "idx": 1359}
{"project": "cipher", "commit_id": "Snippet29937079_11994.java", "target": 0, "func": "public static byte[] encryptAES(SecretKey key, byte[] clear) {\n    try {\n\n        SecretKeySpec skeySpec = new SecretKeySpec(key.getEncoded(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return null;\n}\n", "idx": 1360}
{"project": "cipher", "commit_id": "Snippet44461831_26521.java", "target": 0, "func": "import java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.Base64;\n\npublic class encryptData {\n  public static void main(String[] args) throws Exception {\n\n    String data=\"amount=10&expiryDate=20150101151515&orderRefNum=11001&postBackURL=http://localhost:9081/local/status.php&storeId=28\";\n    String key=\"89OUITUPRL3I8H3G\";\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(), \"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n    byte[] plaintext = data.getBytes();\n    byte[] ciphertext = cipher.doFinal(plaintext);\n    String encryptedValue = Base64.getEncoder().encodeToString(ciphertext);\n\n    System.out.println(encryptedValue);\n  }\n}\n", "idx": 1361}
{"project": "cipher", "commit_id": "Snippet21040968_3626.java", "target": 0, "func": "public String crypto(SecretKey key, String inString, boolean decrypt){\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    byte[] inputByte = inString.getBytes(\"UTF-8\");\n    if (decrypt){\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        return new String (cipher.doFinal(Base64.decode(inputByte, Base64.DEFAULT)));\n    } else {\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        return new String (Base64.encode(cipher.doFinal(inputByte), Base64.DEFAULT));\n    }\n}\n", "idx": 1362}
{"project": "cipher", "commit_id": "Snippet2778256_30418.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"AES\");\nc.init(Cipher.ENCRYPT_MODE, key);\nbyte[] encValue = c.doFinal(valueToEnc.getBytes());\nString encryptedValue = new BASE64Encoder().encode(encValue);\n", "idx": 1363}
{"project": "cipher", "commit_id": "Snippet26742340_8855.java", "target": 0, "func": "        String text = \"Hello World\";\n        String key = \"Bar12345kjkj5454hggx1234\"; \n\n        // Create key and cipher\n        Key aesKey = new SecretKeySpec(key.getBytes(), \"DESede\");\n        Cipher cipher = Cipher.getInstance(\"DESede\");\n\n        // encrypt the text\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n        byte[] encrypted = cipher.doFinal(text.getBytes());\n        System.err.println(\"Using Tripple DES algorithm and with key <\"+key+\">, <\"+text+\">  converted into <\"+new String(encrypted)+\">\");\n\n        // decrypt the text\n        String key1 = \"Bar12345kkkj5454hggx1234\"; // 128 bit key\n        Key aesKey1 = new SecretKeySpec(key1.getBytes(), \"DESede\");\n        Cipher cipher1 = Cipher.getInstance(\"DESede\");\n\n\n        cipher1.init(Cipher.DECRYPT_MODE, aesKey1);\n        String decrypted = new String(cipher1.doFinal(encrypted));\n        System.err.println(\"Using Tripple DES algorithm and with key <\"+key1+\">, encrypted text <\"+new String(encrypted)+\"> decrypted into <\"+decrypted+\">\");\n", "idx": 1364}
{"project": "cipher", "commit_id": "Snippet46624350_28730.java", "target": 0, "func": "public class AES {\n    private static SecretKeySpec secretKey;\n    private static byte[] key;\n\n    public static void setKey(String myKey)\n    {\n        MessageDigest sha = null;\n        try {\n            key = myKey.getBytes(\"UTF-8\");\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n            key = Arrays.copyOf(key, 16);\n            secretKey = new SecretKeySpec(key, \"AES\");\n        }\n        catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static String encrypt(String strToEncrypt, String secret)\n    {\n        try\n        {\n            setKey(secret);\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\")));\n        }\n        catch (Exception e)\n        {\n            System.out.println(\"Error while encrypting: \" + e.toString());\n        }\n        return null;\n    }\n\n    public static String decrypt(String strToDecrypt, String secret)\n    {\n        try\n        {\n            setKey(secret);\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));\n        }\n        catch (Exception e)\n        {\n            System.out.println(\"Error while decrypting: \" + e.toString());\n        }\n        return null;\n    }\n}\n", "idx": 1365}
{"project": "cipher", "commit_id": "Snippet21138811_3705.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class StringDecryptor {\n\n    public static String encrypt(String text, String key) {\n        Key aesKey = null;\n        Cipher cipher = null;\n        byte[] encrypted = null;\n        try {\n            aesKey = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\n            cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            encrypted = cipher.doFinal(text.getBytes());\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (NoSuchPaddingException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (InvalidKeyException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (IllegalBlockSizeException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (BadPaddingException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (UnsupportedEncodingException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return new String(encrypted);\n    }\n\n    public static String decrypt(String text, String key) {\n        Key aesKey = null;\n        Cipher cipher;\n        String decrypted = null;\n        try {\n            aesKey  = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\n            cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, aesKey);\n            decrypted = new String(cipher.doFinal(text.getBytes()));\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (NoSuchPaddingException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (InvalidKeyException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (IllegalBlockSizeException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (BadPaddingException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (UnsupportedEncodingException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return decrypted;\n    }\n\n    public static String generateKey() {\n        SecretKey secretKey = null;\n        try {\n            secretKey = KeyGenerator.getInstance(\"AES\").generateKey();\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        String keyString = bytesToString(secretKey.getEncoded());\n        return keyString;\n    }\n\n    public static String bytesToString(byte[] b) {\n        String decoded = null;\n        try {\n            decoded = new String(b, \"UTF-8\");            \n        } catch (UnsupportedEncodingException ex) {\n            Logger.getLogger(StringDecryptor.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return decoded;\n    }\n\n    public static void main(String args[]) {\n        String key = generateKey();\n        System.out.println(\"key: \" + key);\n        String str = \"This is the original string...\";\n        String enc = encrypt(str, key);\n        System.out.println(\"enc: \" + enc);\n        String dec = decrypt(enc, key);\n        System.out.println(\"dec: \" + dec);\n    }\n}\n", "idx": 1366}
{"project": "cipher", "commit_id": "Snippet22021006_4442.java", "target": 0, "func": "import java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.NoSuchProviderException;\nimport java.security.Security;\nimport java.util.Arrays;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.ShortBufferException;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class Crypto {\n\n    public FileInputStream mIn;\n    public FileOutputStream mOut;\n    public Crypto(String fileIn, String fileOut, String key) {\n        try {\n                mIn = new FileInputStream(new File(fileIn));\n                mOut = new FileOutputStream(new File(fileOut));\n                decrypt(mIn, mOut, key);\n        } catch (Exception e) {\n                e.printStackTrace();\n        }\n}\n\npublic static void decrypt(InputStream in, FileOutputStream out, String password) {\n        try {\n                // byte[] iv = new byte[IV_LENGTH];\n                byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n                Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n                in.read(iv);\n                System.out.println(\">>>>>>>>red\" + Arrays.toString(iv));\n\n                String s = \"346a23652a46392b4d73257c67317e352e3372482177652c\";\n\n                byte[] sBytes = hexStringToByteArray(s);\n\n                byte[] bytes = new BigInteger(s, 16).toByteArray();\n                SecretKeySpec keySpec = new SecretKeySpec(sBytes, \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\"); // \"AES/CFB8/NoPadding\";\"AES/CBC/PKCS5Padding\";\n                // //\"AES/ECB/PKCS5Padding\"\n\n                IvParameterSpec ivSpec = new IvParameterSpec(iv);\n                 cipher.init(Cipher.DECRYPT_MODE, keySpec);// , ivSpec);\n                //cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);\n\n                in = new CipherInputStream(in, cipher);\n                byte[] buf = new byte[iv.length];\n                int numRead = 0;\n                while ((numRead = in.read(buf)) >= 0) {\n                    String si = new String(buf);\n                //  System.out.println(si);\n                     out.write(buf, 0, numRead);\n                        // Log.d(\"Crypto\", buf.toString());\n                }\n                out.close();\n\n        } catch (Exception e) {\n                e.printStackTrace();\n        }\n\n}\n\npublic static byte[] hexStringToByteArray(String s) {\n        int len = s.length();\n        byte[] data = new byte[len / 2];\n        for (int i = 0; i < len; i += 2) {\n                data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character\n                                .digit(s.charAt(i + 1), 16));\n        }\n        return data;\n}\n    public static void main(String[] args) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException, InvalidKeyException {\n        String example = \"This is an example\";\n        byte[] bytes = example.getBytes();\n\n\n\n    //    String s = new String(bytes);\n     //   System.out.println(\"Text Decryted : \" + s);\n\n        Crypto c = new Crypto(\"C:\\\\msgstore.db.crypt\", \"D:\\\\WhatsappDeneme\", \"sdfsd\");\n        System.out.println(\"deneme\");\n\n    }\n\n}\n", "idx": 1367}
{"project": "cipher", "commit_id": "Snippet45104691_27229.java", "target": 0, "func": "public String encrypt(String Data, String keySet) throws Exception {\n    byte[] keyByte = keySet.getBytes();\n    Key key = generateKey(keyByte);\n\n    Cipher c = Cipher.getInstance(\"AES\");\n\n    c.init(Cipher.ENCRYPT_MODE, key); //2\n    byte[] encVal = c.doFinal(Data.getBytes()); //1\n    byte[] encryptedByteValue = new Base64().encode(encVal); //3\n    String encryptedValue = new String(encryptedByteValue); //4\n    return encryptedValue;\n}\n\nprivate static Key generateKey(byte[] keyByte) throws Exception {\n    Key key = new SecretKeySpec(keyByte, \"AES\");\n    return key;\n}\n", "idx": 1368}
{"project": "cipher", "commit_id": "Snippet15882476_38869.java", "target": 0, "func": " Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n", "idx": 1369}
{"project": "cipher", "commit_id": "Snippet16369787_39316.java", "target": 0, "func": "Cipher dcipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n", "idx": 1370}
{"project": "cipher", "commit_id": "Snippet14572834_37816.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\");\n\n// setup an IV (initialization vector) that should be\n// randomly generated for each input that's encrypted\nbyte[] iv = new byte[cipher.getBlockSize()];\nnew SecureRandom().nextBytes(iv);\nIvParameterSpec ivSpec = new IvParameterSpec(iv);\n\n// decrypt\nSecretKey secretKey = new SecretKeySpec(Base64.decodeBase64(keyString), \"Blowfish\");\ncipher.init(Cipher.DECRYPT_MODE, secretKey, ivSpec);\nbyte[] decrypted = cipher.doFinal(Base64.decodeBase64(input));\nreturn Hex.encodeHexString(decrypted);\n", "idx": 1371}
{"project": "cipher", "commit_id": "Snippet47029182_29039.java", "target": 0, "func": "public class EncryptUtils {\npublic static SecretKey generateKey(String mySecret) \n    throws NoSuchAlgorithmException, InvalidKeySpecException \n{ \n    return secret = new SecretKeySpec(mySecret.getBytes(), \"AES\"); \n}\n\npublic static byte[] encryptMsg(String message, SecretKey secret)\n    throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidParameterSpecException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException \n{ \n   /* Encrypt the message. */\n   Cipher cipher = null; \n   cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n   cipher.init(Cipher.ENCRYPT_MODE, secret); \n   byte[] cipherText = cipher.doFinal(message.getBytes(\"UTF-8\")); \n   return cipherText; \n}\n\npublic static String decryptMsg(byte[] cipherText, SecretKey secret) \n    throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidParameterSpecException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException \n{\n    /* Decrypt the message, given derived encContentValues and initialization vector. */\n    Cipher cipher = null;\n    cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, secret); \n    String decryptString = new String(cipher.doFinal(cipherText), \"UTF-8\");\n    return decryptString; \n}\n}\n\nString mySecret=\"mySecretKeyString\";\nString secretKey = EncryptUtils.generateKey(mySecret);\nString encryptedStr = EncryptUtils.encryptMsg(jsonResultString, secretKey));\n\nString decryptedStr = EncryptUtils.decryptMsg(encryptedStr.getBytes(\"UTF-8\"), secretKey));\n", "idx": 1372}
{"project": "cipher", "commit_id": "Snippet970876_29819.java", "target": 0, "func": " import java.net.URLDecoder;\nimport java.net.URLEncoder;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEParameterSpec;\n\n/**\n * An easy to use class to encrypt and decrypt a string. Just call the simplest\n * constructor and the needed methods.\n * \n */\n\npublic class StringEncryptor {\nprivate Cipher encryptCipher;\nprivate Cipher decryptCipher;\nprivate sun.misc.BASE64Encoder encoder = new sun.misc.BASE64Encoder();\nprivate sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();\n\nfinal private String charset = \"UTF-8\";\nfinal private String defaultEncryptionPassword = \"PAOSIDUFHQWER98234QWE378AHASDF93HASDF9238HAJSDF923\";\nfinal private byte[] defaultSalt = {\n\n(byte) 0xa3, (byte) 0x21, (byte) 0x24, (byte) 0x2c,\n\n(byte) 0xf2, (byte) 0xd2, (byte) 0x3e, (byte) 0x19 };\n\n/**\n * The simplest constructor which will use a default password and salt to\n * encode the string.\n * \n * @throws SecurityException\n */\npublic StringEncryptor() throws SecurityException {\n    setupEncryptor(defaultEncryptionPassword, defaultSalt);\n}\n\n/**\n * Dynamic constructor to give own key and salt to it which going to be used\n * to encrypt and then decrypt the given string.\n * \n * @param encryptionPassword\n * @param salt\n */\npublic StringEncryptor(String encryptionPassword, byte[] salt) {\n    setupEncryptor(encryptionPassword, salt);\n}\n\npublic void init(char[] pass, byte[] salt, int iterations) throws SecurityException {\n    try {\n        PBEParameterSpec ps = new javax.crypto.spec.PBEParameterSpec(salt, 20);\n\n        SecretKeyFactory kf = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n\n        SecretKey k = kf.generateSecret(new javax.crypto.spec.PBEKeySpec(pass));\n\n        encryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");\n\n        encryptCipher.init(Cipher.ENCRYPT_MODE, k, ps);\n\n        decryptCipher = Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");\n\n        decryptCipher.init(Cipher.DECRYPT_MODE, k, ps);\n    } catch (Exception e) {\n        throw new SecurityException(\"Could not initialize CryptoLibrary: \" + e.getMessage());\n    }\n}\n\n/**\n * \n * method to decrypt a string.\n * \n * @param str\n *            Description of the Parameter\n * \n * @return String the encrypted string.\n * \n * @exception SecurityException\n *                Description of the Exception\n */\n\npublic synchronized String encrypt(String str) throws SecurityException {\n    try {\n\n        byte[] utf8 = str.getBytes(charset);\n\n        byte[] enc = encryptCipher.doFinal(utf8);\n\n        return URLEncoder.encode(encoder.encode(enc),charset);\n    }\n\n    catch (Exception e)\n\n    {\n        throw new SecurityException(\"Could not encrypt: \" + e.getMessage());\n    }\n}\n\n/**\n * \n * method to encrypting a string.\n * \n * @param str\n *            Description of the Parameter\n * \n * @return String the encrypted string.\n * \n * @exception SecurityException\n *                Description of the Exception\n */\n\npublic synchronized String decrypt(String str) throws SecurityException {\n    try {\n\n        byte[] dec = decoder.decodeBuffer(URLDecoder.decode(str,charset));\n        byte[] utf8 = decryptCipher.doFinal(dec);\n\n        return new String(utf8, charset);\n\n    } catch (Exception e) {\n        throw new SecurityException(\"Could not decrypt: \" + e.getMessage());\n    }\n}\n\nprivate void setupEncryptor(String defaultEncryptionPassword, byte[] salt) {\n\n    java.security.Security.addProvider(new com.sun.crypto.provider.SunJCE());\n\n    char[] pass = defaultEncryptionPassword.toCharArray();\n\n    int iterations = 3;\n\n    init(pass, salt, iterations);\n}\n", "idx": 1373}
{"project": "cipher", "commit_id": "Snippet34152169_16169.java", "target": 0, "func": "private void switchToChipherStreams(String username) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException {\n    byte key[] = dbMediator.getPasswordCypher(username);\n    SecretKey key64 = new SecretKeySpec(key, \"Blowfish\");\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n    cipher.init(Cipher.ENCRYPT_MODE, key64);\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n        Logger.getLogger(Connection.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    out = new ObjectOutputStream(new CipherOutputStream(socket.getOutputStream(), cipher));\n    out.reset();\n    out.flush();\n    out.writeObject(\"switch\");\n    in = new ObjectInputStream(new CipherInputStream(socket.getInputStream(), cipher));\n}\n", "idx": 1374}
{"project": "cipher", "commit_id": "Snippet15901740_38888.java", "target": 0, "func": "SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\nDESKeySpec keySpecEncrypt = new DESKeySpec(ParamsProvider.SERVER_ECRYPTION_SECRETKEY2); //Secret key is a byte[8] = {1, 2, 3, 4, 5, 6, 7, 8}\nSecretKey keyEncrypt = keyFactory.generateSecret(keySpecEncrypt);\n\n// Create the cipher \nCipher desCipher = Cipher.getInstance(\"DES/CFB8/NoPadding\");\n\n// Initialize the cipher for encryption\ndesCipher.init(Cipher.ENCRYPT_MODE, keyEncrypt);\n\n// Encrypt the text\nbyte[] textEncrypted = desCipher.doFinal(data.getBytes(\"UTF-8\"));\n\n//B64 encoding and return\nbyte[] encryptedB64ByteArray = (new org.apache.commons.codec.binary.Base64()).encode(textEncrypted);\nreturn new String(encryptedB64ByteArray, \"UTF8\");\n", "idx": 1375}
{"project": "cipher", "commit_id": "Snippet28132124_10292.java", "target": 0, "func": "Cipher.getInstance(\"AES\");", "idx": 1376}
{"project": "cipher", "commit_id": "Snippet7762892_32916.java", "target": 0, "func": "private static final String ALGORITHM = \"AES\";\nprivate static final byte[] keyValue = \n    new byte[] { 'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };\n\n public String encrypt(String valueToEnc) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGORITHM);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encValue = c.doFinal(valueToEnc.getBytes());\n    String encryptedValue = new BASE64Encoder().encode(encValue);\n    return encryptedValue;\n}\n\npublic String decrypt(String encryptedValue) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGORITHM);\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    return decryptedValue;\n}\n\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, ALGORITHM);\n    return key;\n}\n", "idx": 1377}
{"project": "cipher", "commit_id": "Snippet22619602_5018.java", "target": 0, "func": "    public class AesEncrDec\n{\n\npublic static String encrypt(String Data)\n{\n    byte[] byteCipherText = null;\n    try {\n        String plainData=Data,cipherText,decryptedText;\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        keyGen.init(128);\n        SecureRandom rnd = new SecureRandom();\n        SecretKey secretKey = keyGen.generateKey();\n        IvParameterSpec iv;\n        iv = new IvParameterSpec(rnd.generateSeed(16));\n        Cipher aesCipher = Cipher.getInstance(\"AES\");\n        aesCipher.init(Cipher.ENCRYPT_MODE,secretKey,iv); \n        byte[] byteDataToEncrypt = plainData.getBytes();\n        byteCipherText = aesCipher.doFinal(byteDataToEncrypt);\n        cipherText = new BASE64Encoder().encode(byteCipherText);\n        return new String(byteCipherText);\n    } catch (InvalidKeyException ex) {\n        Logger.getLogger(AesEncrDec.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(AesEncrDec.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchPaddingException ex) {\n        Logger.getLogger(AesEncrDec.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalBlockSizeException ex) {\n        Logger.getLogger(AesEncrDec.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (BadPaddingException ex) {\n        Logger.getLogger(AesEncrDec.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidAlgorithmParameterException ex) {\n        Logger.getLogger(AesEncrDec.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    return new String(byteCipherText);\n}\n\npublic static String dencrypt(String Data)\n{\n    byte[] byteDecryptedText = null;\n    try {\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        keyGen.init(128);\n        IvParameterSpec iv;\n        SecureRandom rnd = new SecureRandom();\n        iv = new IvParameterSpec(rnd.generateSeed(16));\n        Cipher aesCipher = Cipher.getInstance(\"AES\");\n        SecretKey secretKey = keyGen.generateKey();\n        aesCipher.init(Cipher.ENCRYPT_MODE,secretKey,iv);\n        byteDecryptedText = aesCipher.doFinal(Data.getBytes());\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(AesEncrDec.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (NoSuchPaddingException ex) {\n        Logger.getLogger(AesEncrDec.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidKeyException ex) {\n        Logger.getLogger(AesEncrDec.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InvalidAlgorithmParameterException ex) {\n        Logger.getLogger(AesEncrDec.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalBlockSizeException ex) {\n        Logger.getLogger(AesEncrDec.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (BadPaddingException ex) {\n        Logger.getLogger(AesEncrDec.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    return new String(byteDecryptedText);\n}\n}\n", "idx": 1378}
{"project": "cipher", "commit_id": "Snippet1762221_30082.java", "target": 0, "func": "package org.temp2.cod1;\n\nimport java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.io.*;\n\n/**\n* This program generates a AES key, retrieves its raw bytes, and\n* then reinstantiates a AES key from the key bytes.\n* The reinstantiated key is used to initialize a AES cipher for\n* encryption and decryption.\n*/\n\npublic class AES1\n{\n\n    /**\n    * Turns array of bytes into string\n    *\n    * @param buf    Array of bytes to convert to hex string\n    * @return   Generated hex string\n    */\n    public static String asHex (byte buf[])\n    {\n        StringBuffer strbuf = new StringBuffer(buf.length * 2);\n        int i;\n\n        for (i = 0; i < buf.length; i++)\n        {\n            if (((int) buf[i] & 0xff) < 0x10)\n                strbuf.append(\"0\");\n\n            strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n        }\n\n        return strbuf.toString();\n    }\n\n    public static void main(String[] args) throws Exception\n    {\n\n        String message=\"This is just an example\";\n\n        // Get the KeyGenerator\n\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        kgen.init(128); // 192 and 256 bits may not be available\n\n\n        // Generate the secret key specs.\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n\n        // Instantiate the cipher\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encrypted =\n        cipher.doFinal((args.length == 0 ?\n        \"This is just an example\" : args[0]).getBytes());\n        System.out.println(\"encrypted string: \" + asHex(encrypted));\n\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] original =\n        cipher.doFinal(encrypted);\n        String originalString = new String(original);\n        System.out.println(\"Original string: \" +\n        originalString + \" \" + asHex(original));\n    }\n}\n", "idx": 1379}
{"project": "cipher", "commit_id": "Snippet16912933_228.java", "target": 0, "func": "    KeyGenerator keyGenS = KeyGenerator.getInstance(\"AES\");\n    keyGenS.init(128);\n    SecretKey sKey1 = keyGenS.generateKey();\n\n    Cipher aesCipher = Cipher.getInstance(\"AES\");\n    aesCipher.init(Cipher.ENCRYPT_MODE,sKey1);\n\n    byte[] byteText = \"Insert here whatever you want to crypt\".getBytes();\n\n    byte[] byteCipherText = aesCipher.doFinal(byteText);\n", "idx": 1380}
{"project": "cipher", "commit_id": "Snippet5354313_31603.java", "target": 0, "func": "public static final byte[] IV = { 65, 1, 2, 23, 4, 5, 6, 7, 32, 21, 10, 11, 12, 13, 84, 45 };\npublic static final byte[] IV2 = { 65, 1, 2, 23, 45, 54, 61, 81, 32, 21, 10, 121, 12, 13, 84, 45 };\npublic static final byte[] KEY = { 0, 42, 2, 54, 4, 45, 6, 7, 65, 9, 54, 11, 12, 13, 60, 15 };\npublic static final byte[] KEY2 = { 0, 42, 2, 54, 43, 45, 16, 17, 65, 9, 54, 11, 12, 13, 60, 15 };\n//public static final int BITS = 256;\n\npublic static void test()\n{\n    try\n    {\n        // encryption\n        Cipher c = Cipher.getInstance(\"AES\");\n        SecretKeySpec keySpec = new SecretKeySpec(KEY, \"AES\");\n        c.init(Cipher.ENCRYPT_MODE, keySpec, new IvParameterSpec(IV));\n\n        String s = \"Secret message\";\n        byte[] data = s.getBytes();\n\n        byte[] encrypted = c.doFinal(data);\n\n        String encryptedStr = \"\";\n        for (int i = 0; i < encrypted.length; i++)\n            encryptedStr += (char) encrypted[i];\n\n\n        //decryoption\n        Cipher d_c = Cipher.getInstance(\"AES\");\n        SecretKeySpec d_keySpec = new SecretKeySpec(KEY, \"AES\");\n        d_c.init(Cipher.DECRYPT_MODE, d_keySpec, new IvParameterSpec(IV2));\n\n        byte[] decrypted = d_c.doFinal(encrypted);\n        String decryptedStr = \"\";\n        for (int i = 0; i < decrypted.length; i++)\n            decryptedStr += (char) decrypted[i];\n        Log.d(\"\", decryptedStr);\n\n    }\n    catch (Exception ex)\n    {\n        Log.d(\"\", ex.getMessage());\n    }\n}\n", "idx": 1381}
{"project": "cipher", "commit_id": "Snippet20811912_3421.java", "target": 0, "func": "public static String decrypt(String content, String sKey) {\n    try {\n        SecretKey secretKey = null;\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom secureRandom = SecureRandom.getInstance(\"SHA1PRNG\");\n        secureRandom.setSeed(sKey.getBytes());\n        kgen.init(128, secureRandom);\n        secretKey = kgen.generateKey();\n\n        byte[] data = ByteUtil.parseHexStr2Byte(content);\n        byte[] enCodeFormat = secretKey.getEncoded();\n\n        SecretKeySpec key = new SecretKeySpec(enCodeFormat, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] result = cipher.doFinal(data);\n        return new String(result, \"UTF-8\");\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return content;\n}\n", "idx": 1382}
{"project": "cipher", "commit_id": "Snippet33579333_15631.java", "target": 0, "func": "public static String Decrypt(String encryptedText, byte[] key2) throws NoSuchAlgorithmException,NoSuchPaddingException,InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {\n    byte[] decryptedTextBytes=null;\n    byte[] key3 =null;\n    MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n    key3= sha.digest(key2);\n    key3 = copyOf(key3, 16);\n    SecretKeySpec keySpec = new SecretKeySpec(key3, \"AES\");\n    // Instantiate the cipher\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, keySpec);\n    byte[] encryptedTextBytes = new Base64().decode(encryptedText);\n    decryptedTextBytes = cipher.doFinal(encryptedTextBytes);\n    return new String(decryptedTextBytes);\n}\n", "idx": 1383}
{"project": "cipher", "commit_id": "Snippet26116689_8327.java", "target": 0, "func": "private static byte[] passwordEncrypt(char[] password, byte[] plaintext) throws Exception {\n    String MYPBEALG = \"PBEWithSHA1AndDESede\";\n\n    int count = 20;// hash iteration count\n    SecureRandom random = new SecureRandom();\n    byte[] salt = new byte[8];\n    random.nextBytes(salt);\n\n    // Create PBE parameter set\n    PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, count);\n    PBEKeySpec pbeKeySpec = new PBEKeySpec(password);\n    SecretKeyFactory keyFac = SecretKeyFactory.getInstance(MYPBEALG);\n    SecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n\n    Cipher pbeCipher = Cipher.getInstance(MYPBEALG);\n\n    // Initialize PBE Cipher with key and parameters\n    pbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n\n    // Encrypt the encoded Private Key with the PBE key\n    byte[] ciphertext = pbeCipher.doFinal(plaintext);\n\n    // Now construct  PKCS #8 EncryptedPrivateKeyInfo object\n    AlgorithmParameters algparms = AlgorithmParameters.getInstance(MYPBEALG);\n    algparms.init(pbeParamSpec);\n    EncryptedPrivateKeyInfo encinfo = new EncryptedPrivateKeyInfo(algparms, ciphertext);\n\n    // and here we have it! a DER encoded PKCS#8 encrypted key!\n    return encinfo.getEncoded();\n", "idx": 1384}
{"project": "cipher", "commit_id": "Snippet46828430_28869.java", "target": 0, "func": "String plainText = \"Please encrypt me urgently...\"\nCipher aesCipher = Cipher.getInstance(\"AES\");\naesCipher.init(Cipher.ENCRYPT_MODE, secKey);\nbyte[] byteCipherText = aesCipher.doFinal(plainText.getBytes());\n", "idx": 1385}
{"project": "cipher", "commit_id": "Snippet44239444_26292.java", "target": 0, "func": "static String encryptedString;\n\npublic static String encrypt(String seed, String cleartext)\n        throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n\n}\n\npublic static String decrypt(String seed, String encrypted)\n        throws Exception {\n    Log.d(\"EncrypteedCode=\", encrypted);\n\n    encryptedString = encrypted;\n\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\npublic static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted)\n        throws Exception {\n    Log.d(\"EnterInHouse\", \"EnterInHouse\");\n\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    Log.d(\"EnterInHouse\", cipher.toString());\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n   byte[] decrypted = cipher.doFinal(encrypted);\n\n\n    Log.d(\"Exit\", \"Exit\");\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\n\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length() / 2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2 * buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\n\nprivate final static String HEX = \"0123456789ABCDEF\";\n\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n}\n", "idx": 1386}
{"project": "cipher", "commit_id": "Snippet31553371_13693.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"RSA/None/OAEPWithSHA1AndMGF1Padding\", \"BC\");\n", "idx": 1387}
{"project": "cipher", "commit_id": "Snippet41321849_23291.java", "target": 0, "func": "public class ObscuredSharedPreferences implements SharedPreferences {\n\n    private static final String TAG = \"ObscuredSp\";\n    protected static final String UTF8 = \"utf-8\";\n    private static final char[] SEKRIT = \"abc\".toCharArray() ; // INSERT A RANDOM PASSWORD HERE.\n\n    protected SharedPreferences delegate;\n    protected Context context;\n\n    public ObscuredSharedPreferences(Context context, SharedPreferences delegate) {\n        this.delegate = delegate;\n        this.context = context;\n    }\n\n    @Override\n    public int getInt(String key, int defValue) {\n        final String v = delegate.getString(key, null);\n        Log.d(TAG, \"got int \" + v);\n        return v!=null ? Integer.parseInt(decrypt(v)) : defValue;\n    }\n\n    protected String decrypt(String value){\n        try {\n            final byte[] bytes = value!=null ? Base64.decode(value, Base64.DEFAULT) : new byte[0];\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n            SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));\n            Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n            pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID).getBytes(UTF8), 20));\n            return new String(pbeCipher.doFinal(bytes),UTF8);\n\n        } catch( Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n", "idx": 1388}
{"project": "cipher", "commit_id": "Snippet43779197_25884.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\n", "idx": 1389}
{"project": "cipher", "commit_id": "Snippet25759450_8053.java", "target": 0, "func": "Cipher c = Cipher.getInstance( \"DES\" );\nKey k = new SecretKeySpec( pass.getBytes(), \"DES\" );\nc.init( Cipher.ENCRYPT_MODE, k );\n\nOutputStream cos = new CipherOutputStream( out, c );\ncos.write( bytes );\ncos.close()\n", "idx": 1390}
{"project": "cipher", "commit_id": "Snippet13175147_36763.java", "target": 0, "func": "\n    private void testDES() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        byte[] keyByte = convertStringToBytes(\"00 00 00 00 00 00 00 00\");\n        byte[] data = convertStringToBytes(\"00 00 00 00 00 00 00 00\");\n        Key key = new SecretKeySpec(keyByte, \"DES\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        System.out.println(hexadecimalString(cipher.doFinal(data)));\n    }\n", "idx": 1391}
{"project": "cipher", "commit_id": "Snippet31298620_13424.java", "target": 0, "func": "public KeyPair wrapPrivateKeyWithSymmetricKey(KeyPair keyPair) {\n\n    try {\n        PrivateKey priv = keyPair.getPrivate();\n        SecretKey symmetricKey = \"bjksabfkasdbgvkasbvkkj\";//symmetricKey from jks file\n\n        //wrapping Private Key\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.WRAP_MODE, symmetricKey);\n        byte[] wrappedKey = cipher.wrap(priv);\n\n        //wrappedKey bytes to PrivateKey Object\n        KeyFactory keyFactory = KeyFactory.getInstance(priv.getAlgorithm());\n        EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(wrappedKey);\n        PrivateKey privateKey2 = keyFactory.generatePrivate(privateKeySpec); //above Error Throwing in this line\n\n        return new KeyPair(keyPair.getPublic(), privateKey2);;\n}\n", "idx": 1392}
{"project": "cipher", "commit_id": "Snippet42738641_24770.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, aesKey);\nbyte[] encrypted = cipher.doFinal(value.getBytes(\"UTF-8\"));\n\nString encoded = Base64.encodeBase64String(encrypted);\nreturn new String(encoded.getBytes(\"UTF-8\"));\n", "idx": 1393}
{"project": "cipher", "commit_id": "Snippet8731671_33457.java", "target": 0, "func": "import java.awt.image.BufferedImage;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.security.MessageDigest;\nimport java.security.Security;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.imageio.ImageIO;\n\npublic class Crypto {\n    Cipher ecipher;\n    Cipher dcipher;\n\n    /**\n    * Input a string that will be md5 hashed to create the key.\n    * @return void, cipher initialized\n    */\n\n    public Crypto(){\n        try{\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n            kgen.init(128);\n            this.setupCrypto(kgen.generateKey());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    public Crypto(String key){\n        SecretKeySpec skey = new SecretKeySpec(getMD5(key), \"AES\");\n        this.setupCrypto(skey);\n    }\n\n    private void setupCrypto(SecretKey key){\n        try\n        {    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n            ecipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n            dcipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n            ecipher.init(Cipher.ENCRYPT_MODE, key);\n            dcipher.init(Cipher.DECRYPT_MODE, key);\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n    // Buffer used to transport the bytes from one stream to another\n    byte[] buf = new byte[1024];\n\n    public void encrypt(InputStream in, OutputStream out){\n        try {\n            // Bytes written to out will be encrypted\n            out = new CipherOutputStream(out, ecipher);\n\n            // Read in the cleartext bytes and write to out to encrypt\n            int numRead = 0;\n            while ((numRead = in.read(buf)) >= 0){\n                out.write(buf, 0, numRead);\n            }\n            out.close();\n        }\n        catch (java.io.IOException e){\n            e.printStackTrace();\n        }\n    }\n\n\n    public void decrypt(InputStream in, OutputStream out){\n\n        try {\n            // Bytes read from in will be decrypted\n            in = new CipherInputStream(in, dcipher);\n\n            // Read in the decrypted bytes and write the cleartext to out\n            int numRead = 0;\n            while ((numRead = in.read(buf)) >= 0) {\n                out.write(buf, 0, numRead);\n            }\n            out.close();\n        } catch (java.io.IOException e) {\n             e.printStackTrace();\n        }\n    }\n\n    private static byte[] getMD5(String input){\n        try{\n            byte[] bytesOfMessage = input.getBytes(\"UTF-8\");\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            return md.digest(bytesOfMessage);\n        }  catch (Exception e){\n             return null;\n        }\n    }\n\n\n    public static void main(String args[]){\n        try {\n\n\n            Crypto encrypter = new Crypto(\"yursxjdlbkuikeqe\");  ///key for decryption logic\n             encrypter.encrypt(new FileInputStream(\"D:\\\\Path\\\\Lighthouse.jpg\"),new FileOutputStream(\"D:\\\\Encryption\\\\iOS code base\\\\Lighthouse.jpg.pkcs5\"));\n               encrypter.decrypt(new FileInputStream(\"D:\\\\Path\\\\Lighthouse.jpg.pkcs5\"),new FileOutputStream(\"D:\\\\Encryption\\\\iOS code base\\\\Lighthouse.jpg\"));\n             System.out.println(\"DONE\");\n       }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 1394}
{"project": "cipher", "commit_id": "Snippet21489029_3984.java", "target": 0, "func": "try {\n        //Conservazione delle chiavi!\n        //Secure PRNG\n        SecureRandom m = SecureRandom.getInstance(\"SHA1PRNG\");\n        //Secure HASH\n        MessageDigest hash = MessageDigest.getInstance(\"SHA-1\");\n        //KeyGenerator \n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"DES\");\n        keyGenerator.init(m);\n        //Want to obtain a random masterkey that need to encrypt\n        Key key = keyGenerator.generateKey();\n        //Get DES cipher\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        //AND NOW?\n                    cipher.init(Cipher.ENCRYPT_MODE, KEY); // THAT's the problem.\n\n\n\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n", "idx": 1395}
{"project": "cipher", "commit_id": "Snippet47300920_29272.java", "target": 0, "func": "public static void performEncryption(String baseFolderLocation) \n{       \n    String key = \"This is a secret\";\n\n    System.out.println(\"Started Doing Encrypting...\");\n    List<File> filenames = getAllfilesInFolder(baseFolderLocation, new ArrayList<File>());\n    int processedFilesCount = 0;\n\n    for (File file : filenames) {\n        try {\n\n            Crypto.fileProcessor(Cipher.ENCRYPT_MODE, key, file.getAbsoluteFile(), file.getAbsoluteFile());\n\n        } catch (Exception ex) {\n            // ex.printStackTrace();\n        }\n        processedFilesCount++;\n    }\n\n    System.out.println(\"Ended Encrypting...\");\n}\n\nstatic void fileProcessor(int cipherMode, String key, File inputFile, File outputFile) {\n    try {\n        Key secretKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(cipherMode, secretKey);\n\n        FileInputStream inputStream = new FileInputStream(inputFile);\n        byte[] inputBytes = new byte[(int) inputFile.length()];\n        inputStream.read(inputBytes);\n\n        byte[] outputBytes = cipher.doFinal(inputBytes);\n\n        FileOutputStream outputStream = new FileOutputStream(outputFile);\n        outputStream.write(outputBytes);\n\n        inputStream.close();\n        outputStream.close();\n\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n\npublic static List<File> getAllfilesInFolder(String directoryName, ArrayList<File> files) {\n    File directory = new File(directoryName);\n\n    // get all the files from a directory\n    File[] fList = directory.listFiles();\n    for (File file : fList) \n    {\n        if (file.isFile()) \n        {\n            files.add(file);\n        }\n        else if (file.isDirectory()) \n        {\n            getAllfilesInFolder(file.getAbsolutePath(), files);\n        }\n    }\n\n    return files;\n}\n", "idx": 1396}
{"project": "cipher", "commit_id": "Snippet4183853_31028.java", "target": 0, "func": "public static void main(String args[]){ \n     String message = \"<abc>ABCDEFG</abc>\"; \n     String key = \"key\"; \n     byte[] b = encrypt(message.getBytes(), key.getBytes());\n}\n\npublic byte[] encrypt(byte encrypt[], byte en_key[]) { \n     try { \n           SecretKeySpec key = new SecretKeySpec(en_key, \"Blowfish\"); \n           Cipher cipher = Cipher.getInstance(\"Blowfish/ECB/NoPadding\"); \n           cipher.init(Cipher.ENCRYPT_MODE, en_key); \n           return cipher.doFinal(encrypt); \n     } catch (Exception e) { \n           e.printStackTrace();\n           return null; \n         }\n\n} \n", "idx": 1397}
{"project": "cipher", "commit_id": "Snippet16279883_39254.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\n\npublic class Test {\n\n    private static String strkey =\"Blowfish\";\n    private static Base64 base64 = new Base64(true);\n\n     //encrypt using blowfish algorithm\n    public static String encrypt(String Data)throws Exception{\n\n        SecretKeySpec key = new SecretKeySpec(strkey.getBytes(\"UTF8\"), \"Blowfish\");\n         Cipher cipher = Cipher.getInstance(\"Blowfish\");\n         cipher.init(Cipher.ENCRYPT_MODE, key);\n\n         return base64.encodeToString(cipher.doFinal(Data.getBytes(\"UTF8\")));\n\n    }\n\n    //decrypt using blow fish algorithm\n    public static String decrypt(String encrypted)throws Exception{\n        byte[] encryptedData = base64.decodeBase64(encrypted);\n         SecretKeySpec key = new SecretKeySpec(strkey.getBytes(\"UTF8\"), \"Blowfish\");\n         Cipher cipher = Cipher.getInstance(\"Blowfish\");\n         cipher.init(Cipher.DECRYPT_MODE, key);\n         byte[] decrypted = cipher.doFinal(encryptedData);\n         return new String(decrypted); \n\n    }\n\n    public static void main(String[] args) throws Exception {\n        String data = \"will this work?\";\n        String encoded = encrypt(data);\n        System.out.println(encoded);\n        String decoded = decrypt(encoded);\n        System.out.println(decoded);\n    }\n}\n", "idx": 1398}
{"project": "cipher", "commit_id": "Snippet30090679_12227.java", "target": 0, "func": "public class testMain {\n    private static byte[] key = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\".getBytes();\n    private static byte[] plaintext = \"fjaiejrfoi\".getBytes();\n    private static Cipher cipher;\n    private static byte[] result;\n\n    public static void main(String[] args) {\n        try {\n            cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        }\n        SecretKeySpec secretKey = null;\n        try {\n            secretKey = makeKey();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        }\n        try {\n            result = cipher.doFinal(plaintext);\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        }\n        StringBuffer sb = new StringBuffer();\n        for(byte b : result) {\n            sb.append(Integer.toHexString((int)(b&0xff)));\n        }\n        System.out.println(\"result is \" + sb.toString());\n\n    }\n\n    private static SecretKeySpec makeKey() throws NoSuchAlgorithmException{\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        kgen.init(256, new SecureRandom(key));\n        SecretKey secretKey = kgen.generateKey();\n        SecretKeySpec keySpec = new SecretKeySpec(secretKey.getEncoded(), \"AES\");\n        return keySpec;\n    }\n}\n", "idx": 1399}
{"project": "cipher", "commit_id": "Snippet22705921_5122.java", "target": 0, "func": "    public static InputStream getEncryptedInputStream(String key, String path) {\n    try {\n        InputStream is = ResourceManager.getResourceStatic(path);\n        SecretKeySpec keyspec = new SecretKeySpec(getHash(key),\"AES\");\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.DECRYPT_MODE, keyspec);\n        return new CipherInputStream(is,c);\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    }\n    return null;\n    }\n", "idx": 1400}
{"project": "cipher", "commit_id": "Snippet4598873_31206.java", "target": 0, "func": "import java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic final class StupidSimpleEncrypter\n{\n    public static String encrypt(String key, String plaintext)\n    {\n        byte[] keyBytes = key.getBytes();\n        byte[] plaintextBytes = plaintext.getBytes();\n        byte[] ciphertextBytes = encrypt(keyBytes, plaintextBytes);\n        return new String(ciphertextBytes);\n    }\n\n    public static byte[] encrypt(byte[] key, byte[] plaintext)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            SecretKeySpec spec = new SecretKeySpec(getRawKey(key), \"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, spec);\n            return cipher.doFinal(plaintext);\n        }\n        catch(Exception e)\n        {\n            // some sort of problem, return null because we can't encrypt it.\n            Utility.writeError(e);\n            return null;\n        }\n    }\n\n    public static String decrypt(String key, String ciphertext)\n    {\n        byte[] keyBytes = key.getBytes();\n        byte[] ciphertextBytes = ciphertext.getBytes();\n        byte[] plaintextBytes = decrypt(keyBytes, ciphertextBytes);\n        return new String(plaintextBytes);\n    }\n\n    public static byte[] decrypt(byte[] key, byte[] ciphertext)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            SecretKeySpec spec = new SecretKeySpec(getRawKey(key), \"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, spec);\n            return cipher.doFinal(ciphertext);\n        }\n        catch(Exception e)\n        {\n            // some sort of problem, return null because we can't encrypt it.\n            Utility.writeError(e);\n            return null;\n        }\n    }\n\n    private static byte[] getRawKey(byte[] key)\n    {\n        try\n        {\n            KeyGenerator gen = KeyGenerator.getInstance(\"AES\");\n            SecureRandom rand = SecureRandom.getInstance(\"SHA1PRNG\");\n            rand.setSeed(key);\n            gen.init(256, rand);\n            return gen.generateKey().getEncoded();\n        }\n        catch(Exception e)\n        {\n            return null;\n        }\n    }\n}\n", "idx": 1401}
{"project": "cipher", "commit_id": "Snippet13511250_37065.java", "target": 0, "func": "public String encrypt(String DATA,String key_string) throws Exception {\n    String separator = \"//msit//\";\n    byte[] data = key_string.getBytes();\n    MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n    data = sha.digest(data);\n    data = Arrays.copyOf(data, 16); // use only first 128 bit\n    SecretKey key = new SecretKeySpec(data, \"AES\");\n    String final_matter = DATA + separator;\n    System.out.println(final_matter);\n    ecipher = Cipher.getInstance(\"AES\");\n    ecipher.init(Cipher.ENCRYPT_MODE, key);\n    byte[] utf8 = final_matter.getBytes(\"UTF8\");\n    byte[] enc = ecipher.doFinal(utf8);\n    return new sun.misc.BASE64Encoder().encode(enc);\n    }\n", "idx": 1402}
{"project": "cipher", "commit_id": "Snippet22078859_4500.java", "target": 0, "func": "val secretKey = new SecretKeySpec(\"some key\".getBytes(\"UTF-8\"), \"DES\")\nval encipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\nencipher.init(Cipher.ENCRYPT_MODE, secretKey)\nval encrypted = encipher.doFinal(\"hello world\".getBytes)\nprintln(encrypted) // prints: [B@4896ceb3\nprintln(java.util.Arrays.toString(encrypted)) // [-45, -126, -90, 36, 8, -73, 6, 85, -94, 108, 100, -120, 15, -8, 126, 76]\nprintln(Hex.encodeHexString(encrypted)) //prints: 822c90f1116686e75160ff06c8faf4a4\n", "idx": 1403}
{"project": "cipher", "commit_id": "Snippet1219377_29887.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Decrypter\n{\n\n    /**\n     * @param args\n     * @throws IOException\n     * @throws NoSuchPaddingException\n     * @throws NoSuchAlgorithmException\n     * @throws InvalidKeyException\n     * @throws BadPaddingException\n     * @throws IllegalBlockSizeException\n     */\n    public static void main(String[] args) throws IOException,\n        NoSuchAlgorithmException, NoSuchPaddingException,\n        InvalidKeyException, IllegalBlockSizeException, BadPaddingException\n    {\n    // TODO Auto-generated method stub\n    File iFile = new File(\"normal.xml\");\n    FileInputStream fis = new FileInputStream(iFile);\n\n    File oFile = new File(\"normal.xml.encrypted\");\n    FileOutputStream fos = new FileOutputStream(oFile);\n\n    String algorithm = \"DESede\";\n    byte[] keyBytes = new byte[] { 0x34, 0x11, 0x12, 0x06, 0x34, 0x11,\n        0x12, 0x06, 0x34, 0x11, 0x12, 0x06, 0x34, 0x11, 0x12, 0x06,\n        0x34, 0x11, 0x12, 0x06, 0x34, 0x11, 0x12, 0x06 };\n\n    SecretKeySpec key = new SecretKeySpec(keyBytes, algorithm);\n\n    // generates encrypted output from normal.xml.\n    Cipher cipher = Cipher.getInstance(algorithm);\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n    int b;\n    while ((b = fis.read()) != -1)\n    {\n        cos.write(b);\n    }\n\n    fos.close();\n    fos = null;\n    fis.close();\n    fis = null;\n\n    System.out.println(\"done\");\n\n    // decrypt encrypted xml to normal xml. \n    File ieFile = new File(\"normal.xml.encrypted\");\n    FileInputStream fies = new FileInputStream(ieFile);\n\n    Cipher ieCipher = Cipher.getInstance(algorithm);\n    ieCipher.init(Cipher.DECRYPT_MODE, key);\n    CipherInputStream cis = new CipherInputStream(fies, ieCipher);\n\n    File oeFile = new File(\"normal.xml.encrypted.xml\");\n    FileOutputStream foes = new FileOutputStream(oeFile);\n\n    int c;\n    while ((c = cis.read()) != -1)\n    {\n        foes.write(c);\n    }\n\n    foes.close();\n    cis.close();\n    fies.close();\n\n    System.out.println(\"done done\");\n    }\n\n}\n", "idx": 1404}
{"project": "cipher", "commit_id": "Snippet30080548_12207.java", "target": 0, "func": "public class Main \n{\n    public static void main(String[] argv)\n    {\n        try\n        {\n            writeStringAsBytes();\n            readStringAsBytes();\n        }\n        catch(Exception error)\n        {\n            System.out.println(error.toString());\n        }\n    }\n\n    public static void readStringAsBytes() throws Exception\n    {\n        File file = new File(\"pathname\");\n\n        FileInputStream fis=new FileInputStream(\"pathname\");\n\n        byte[] by=new byte[(int)file.length()];\n        int i;\n        fis.read(by);\n        fis.close();\n\n        Encrypter encrypter = new Encrypter();\n\n        System.out.println(\"decoded:\\n\" + encrypter.decrypt(by));\n    }\n\n\n    public static void writeStringAsBytes() throws Exception\n    {\n        String toEncrypt = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur.\";\n\n        Encrypter encrypter = new Encrypter();\n\n        byte[] encryptedByteArray = encrypter.encrypt(toEncrypt);\n        System.out.println(\"encryptedByteArray:\" + encryptedByteArray);\n\n        FileOutputStream fos = new FileOutputStream(new File(\"pathname\"));\n        BufferedOutputStream bos = new BufferedOutputStream(fos);\n        bos.write(encryptedByteArray);\n        bos.close();\n    }\n}\n\nclass Encrypter\n{\n    String alg = \"AES\";\n    Key key;\n    Cipher cipher;\n\n    public Encrypter() throws Exception\n    {\n         key = KeyGenerator.getInstance(alg).generateKey();\n         cipher = Cipher.getInstance(alg);\n    }\n\n    public byte[] encrypt(String str) throws Exception\n    {\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] inBytes = str.getBytes(\"UTF-16\");\n\n        return cipher.doFinal(inBytes);\n    }\n\n    public String decrypt(byte[] enBytes) throws Exception\n    {\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] bytes = cipher.doFinal(enBytes);\n        String rData = new String(bytes, \"UTF-16\");\n\n        return rData;\n    }\n}\n", "idx": 1405}
{"project": "cipher", "commit_id": "Snippet26613144_8740.java", "target": 0, "func": "private static void receive(InputStream ip, File fname,\n        PrintWriter output2) throws Throwable    {\n\n\n    byte[] ivBytes = \"1234567812345678\".getBytes();\n\n    Cipher dcipher ;\n    DESKeySpec desKeySpec = new DESKeySpec(ivBytes);\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey sKey = keyFactory.generateSecret(desKeySpec);\n\n    dcipher = Cipher.getInstance(\"DES\");\n    dcipher.init(Cipher.DECRYPT_MODE, sKey);\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n\n    byte[] buffer = new byte[1024]; \n    int length;\n\n    while ((length = ip.read(buffer)) != -1)\n     { \n       out.write(buffer, 0, length); \n      }\n\n    byte[] result = out.toByteArray();\n\n    byte[] outputBytes = dcipher.doFinal(result);\n\n    FileOutputStream outputStream = new FileOutputStream(fname);\n    outputStream.write(outputBytes);\n    outputStream.close();\n\n    System.out.println(\"File received\");\n\n }\n", "idx": 1406}
{"project": "cipher", "commit_id": "Snippet3954611_30961.java", "target": 0, "func": "import java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\npublic class Test {\n\n    private static final String ALGORITHM = \"AES\";\n    private static final byte[] keyValue = \"ADBSJHJS12547896\".getBytes();\n\n    public static void main(String args[]) throws Exception {\n        String encriptValue = encrypt(\"dude5\");\n        decrypt(encriptValue);\n\n    }\n\n    /**\n     * @param args\n     * @throws Exception\n     */\n\n    public static String encrypt(String valueToEnc) throws Exception {\n\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.ENCRYPT_MODE, key);\n\n        System.out.println(\"valueToEnc.getBytes().length \"+valueToEnc.getBytes().length);\n        byte[] encValue = c.doFinal(valueToEnc.getBytes());\n        System.out.println(\"encValue length\" + encValue.length);\n        byte[] encryptedByteValue = new Base64().encode(encValue);\n        String encryptedValue = encryptedByteValue.toString();\n        System.out.println(\"encryptedValue \" + encryptedValue);\n\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedValue) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.DECRYPT_MODE, key);\n\n        byte[] enctVal = c.doFinal(encryptedValue.getBytes());\n        System.out.println(\"enctVal length \" + enctVal.length);\n\n        byte[] decordedValue = new Base64().decode(enctVal);\n\n        return decordedValue.toString();\n    }\n\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGORITHM);\n        return key;\n    }\n\n}\n", "idx": 1407}
{"project": "cipher", "commit_id": "Snippet29228916_11264.java", "target": 0, "func": "package mypackage;\n\nimport java.security.MessageDigest;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n\n        String text = \"neeraj\";\n\n        String codedtext = new Main().encrypt(text);\n\n        String decodedtext = new Main().decrypt(codedtext);\n\n        System.out.println(codedtext); // this is a byte array, you'll just see a reference to an array\n        System.out.println(decodedtext); // This correctly shows \"neeraj\"\n    }\n\n    public String encrypt(String message) throws Exception {\n        final MessageDigest md = MessageDigest.getInstance(\"md5\");\n        final byte[] digestOfPassword = md.digest(\"KEY\"\n                .getBytes(\"utf-8\"));\n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        for (int j = 0, k = 16; j < 8;) {\n            keyBytes[k++] = keyBytes[j++];\n        }\n\n        final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n        final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n        final byte[] plainTextBytes = message.getBytes(\"utf-8\");\n        final byte[] cipherText = cipher.doFinal(plainTextBytes);\n        // final String encodedCipherText = new sun.misc.BASE64Encoder()\n        // .encode(cipherText);\n\n        return Base64.encodeBase64String(cipherText);\n    }\n\n    public String decrypt(String input) throws Exception {\n\n        byte[] message = Base64.decodeBase64(input);\n\n        final MessageDigest md = MessageDigest.getInstance(\"md5\");\n        final byte[] digestOfPassword = md.digest(\"KEY\"\n                .getBytes(\"utf-8\"));\n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        for (int j = 0, k = 16; j < 8;) {\n            keyBytes[k++] = keyBytes[j++];\n        }\n\n        final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n        final Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n        // final byte[] encData = new\n        // sun.misc.BASE64Decoder().decodeBuffer(message);\n        final byte[] plainText = decipher.doFinal(message);\n\n        return new String(plainText, \"UTF-8\");\n    }\n}\n", "idx": 1408}
{"project": "cipher", "commit_id": "Snippet46506117_28633.java", "target": 0, "func": "import java.io.File;\nimport java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\n\n /*\n * To change this license header, choose License Headers in Project \n Properties.\n  * To change this template file, choose Tools | Templates\n  * and open the template in the editor.\n  */\n\n  /**\n  *\n   * @author user\n   */\n   public class ImageCrypto1 extends javax.swing.JFrame {\n\n/**\n * Creates new form ImageCrypto1\n */\npublic ImageCrypto1() {\n    initComponents();\n}\n\n  /**\n * This method is called from within the constructor to initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is always\n * regenerated by the Form Editor.\n */\n@SuppressWarnings(\"unchecked\")\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">                          \nprivate void initComponents() {\n\n    popupMenu1 = new java.awt.PopupMenu();\n    file_path = new javax.swing.JTextField();\n    jButton1 = new javax.swing.JButton();\n    jButton2 = new javax.swing.JButton();\n    jButton3 = new javax.swing.JButton();\n\n    popupMenu1.setLabel(\"popupMenu1\");\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n    jButton1.setText(\"Choose\");\n    jButton1.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jButton1ActionPerformed(evt);\n        }\n    });\n\n    jButton2.setText(\"Encrypt\");\n    jButton2.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jButton2ActionPerformed(evt);\n        }\n    });\n\n    jButton3.setText(\"Decrypt\");\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addGap(135, 135, 135)\n                    .addComponent(file_path, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(35, 35, 35)\n                    .addComponent(jButton1))\n                .addGroup(layout.createSequentialGroup()\n                    .addGap(155, 155, 155)\n                    .addComponent(jButton2)\n                    .addGap(18, 18, 18)\n                    .addComponent(jButton3)))\n            .addContainerGap(165, Short.MAX_VALUE))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGap(285, 285, 285)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(file_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jButton1))\n            .addGap(18, 18, 18)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jButton2)\n                .addComponent(jButton3))\n            .addContainerGap(155, Short.MAX_VALUE))\n    );\n\n    pack();\n}// </editor-fold>                        \n\nprivate void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         \n    // TODO add your handling code here:\n    JFileChooser chooser  = new JFileChooser();\n    chooser.showOpenDialog(null);\n    File f = chooser.getSelectedFile();\n    file_path.setText(f.getAbsolutePath());\n}                                        \n\nprivate void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         \n    // TODO add your handling code here:\n    try{\n        FileInputStream file = new FileInputStream(file_path.getText());\n        FileOutputStream outStream = new FileOutputStream(\"Encrypt.jpg\");\n        byte k[]=\"NiTh5252\".getBytes();\n        SecretKeySpec key = new SecretKeySpec(k, \"DES\");\n        Cipher enc = Cipher.getInstance(\"DES\");\n        enc.init(Cipher.ENCRYPT_MODE, (Key) key);\n        CipherOutputStream cos;\n        cos = new CipherOutputStream( outStream, enc);\n        byte[]  buf = new byte[1024];\n        int read;\n        while((read=file.read(buf))!=-1){\n            cos.write(buf,0,read);\n\n        }\n        file.close();\n        outStream.flush();\n        cos.close();\n        JOptionPane.showMessageDialog(null,\"The file encrypted Succesfully\");\n    }catch(Exception e){\n        JOptionPane.showMessageDialog(null,e);\n    }\n}                                        \n\n/**\n * @param args the command line arguments\n */\npublic static void main(String args[]) {\n    /* Set the Nimbus look and feel */\n    //<editor-``fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\n    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\n     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html \n     */\n    try {\n        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n            if (\"Nimbus\".equals(info.getName())) {\n                javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                break;\n            }\n        }\n    } catch (ClassNotFoundException ex) {\n        java.util.logging.Logger.getLogger(ImageCrypto1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n    } catch (InstantiationException ex) {\n        java.util.logging.Logger.getLogger(ImageCrypto1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n    } catch (IllegalAccessException ex) {\n        java.util.logging.Logger.getLogger(ImageCrypto1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n    } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n        java.util.logging.Logger.getLogger(ImageCrypto1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n    }\n    //</editor-fold>\n\n    /* Create and display the form */\n    java.awt.EventQueue.invokeLater(() -> {\n        new ImageCrypto1().setVisible(true);\n    });\n}\n\n// Variables declaration - do not modify                     \nprivate javax.swing.JTextField file_path;\nprivate javax.swing.JButton jButton1;\nprivate javax.swing.JButton jButton2;\nprivate javax.swing.JButton jButton3;\nprivate java.awt.PopupMenu popupMenu1;\n// End of variables declaration                   \n\nprivate static class FileOutputStream {\n\n    public FileOutputStream() {\n    }\n\n    private FileOutputStream(String encryptjpg) {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    private void flush() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n}\n}\n", "idx": 1409}
{"project": "cipher", "commit_id": "Snippet34634399_16624.java", "target": 0, "func": "Cipher cipherencrypt = Cipher.getInstance(\"AES\");", "idx": 1410}
{"project": "cipher", "commit_id": "Snippet30852316_12994.java", "target": 0, "func": "String pinstr = new String();\npinstr = \"5555\";\ntry {\n    EncryptDecrypt encryptor = new EncryptDecrypt(pinstr);\n    //encryptor.encrypt(code);\n    String encrypted = new String();\n    encrypted = encryptor.encrypt(code);\n\n    String decrypted = new String();\n    decrypted = encryptor.decrypt(encrypted);\n\n    Toast.makeText(MainActivity.this, decrypted, Toast.LENGTH_SHORT).show();\n} catch (InvalidKeyException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n} catch (NoSuchAlgorithmException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n} catch (UnsupportedEncodingException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n} catch (NoSuchPaddingException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n} catch (IllegalBlockSizeException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n} catch (BadPaddingException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n}\npublic class EncryptDecrypt {\n    private SecretKeySpec skeySpec;\n    private Cipher cipher, cipher2;\n\n\n    EncryptDecrypt(String password) throws NoSuchAlgorithmException,\n    UnsupportedEncodingException, NoSuchPaddingException,\n    IllegalBlockSizeException, BadPaddingException, InvalidKeyException {\n        MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n        byte[] key = Arrays.copyOf(sha.digest((\"ThisisMySalt1234\" + password).getBytes(\"UTF-8\")),\n        16);\n        skeySpec = new SecretKeySpec(key, \"AES\");\n        cipher = Cipher.getInstance(\"AES\");\n        cipher2 = Cipher.getInstance(\"AES\");\n    }\n\n    String encrypt(String clear) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException {\n        String encrypted = new String();\n\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encryptedBytes = null;\n        encryptedBytes = cipher.doFinal(clear.getBytes());\n\n        encrypted = Base64.encodeToString(encryptedBytes, Base64.DEFAULT);\n\n        return encrypted;\n    }\n\n    // fehlerhaft\n    String decrypt(String encryptedBase64) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n        String decrypted = new String();\n        cipher2.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decodedBytes = null;\n\n\n        decodedBytes = Base64.decode(encryptedBase64, Base64.DEFAULT);\n\n        decrypted = cipher2.doFinal(decodedBytes).toString();\n\n        return decrypted;\n\n    }\n}\n", "idx": 1411}
{"project": "cipher", "commit_id": "Snippet23037213_5419.java", "target": 0, "func": "private static final String ALGORITHM = \"DESede/CBC/PKCS5Padding\";\n\n\n    void main() {\n\n    MessageDigest md = MessageDigest.getInstance(\"md5\");\n    byte[] digestOfPassword = md.digest(\"O\".getBytes(\"UTF-8\"));\n    byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n    byte[] ivBytes = Arrays.copyOf(digestOfPassword, 8);\n    final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    FileInputStream fis = new FileInputStream(new File(\"7za920.zip.enc\"));\n    FileOutputStream fos = new FileOutputStream(new File(\"7za920.zip\"));\n    decrypt(key, ivBytes, fis, fos);\n    }\n\n\n    private static void decrypt(SecretKey key, byte[] iv, InputStream is, OutputStream os) {\n    try {\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        IvParameterSpec ivSpec = new IvParameterSpec(iv);\n        cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);\n        CipherInputStream cis = new CipherInputStream(is, cipher);\n        doCopy(cis, os);\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    private static void doCopy(InputStream is, OutputStream os) throws IOException {\n    try {\n        byte[] bytes = new byte[4096];\n        int numBytes;\n        while ((numBytes = is.read(bytes)) != -1) {\n            os.write(bytes, 0, numBytes);\n        }\n        } finally {\n            is.close();\n            os.close();\n        }\n    }\n\n    // only for demonstration\n    private static byte[] encrypt(SecretKey key, IvParameterSpec iv, InputStream is, OutputStream os) {\n    try {\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n        CipherInputStream cis = new CipherInputStream(is, cipher);\n        doCopy(cis, os);\n        return cipher.getIV();\n    } catch (Exception ex) {\n        throw new RuntimeException(ex);\n    }\n}\n", "idx": 1412}
{"project": "cipher", "commit_id": "Snippet20032600_2666.java", "target": 0, "func": "    public class MainActivity extends Activity {\n\n//@SuppressWarnings(\"unchecked\")\nprivate static final String TAG = \"MyActivity\";\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);       \n\n     AlertDialog.Builder alert = new AlertDialog.Builder(this);\n\n        alert.setTitle(\"Title\");\n        alert.setMessage(\"Message\");\n\n        // Set an EditText view to get user input \n        final EditText input = new EditText(this);\n        alert.setView(input);\n\n        alert.setPositiveButton(\"Ok\", new\n    DialogInterface.OnClickListener()   {\n        public void onClick(DialogInterface dialog, int whichButton) {\n        String value = input.getText().toString();\n        try {\n                Decrypt(value);\n                Log.d(TAG,value);\n            } catch (InvalidKeyException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (NoSuchAlgorithmException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (NoSuchPaddingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }});\n\n\n        alert.setNegativeButton(\"Cancel\", new\n    DialogInterface.OnClickListener() {\n             public void onClick(DialogInterface dialog, int\n    whichButton) {\n                 // Canceled.\n            }\n            });\n\n             alert.show();  \n    }\n    static void Decrypt(String Key) throws IOException, NoSuchAlgorithmException,\n    NoSuchPaddingException, InvalidKeyException {\n\n    final String libPath = Environment.getExternalStorageDirectory() +  \n    \"/encrypted.jar\";\n    FileInputStream fis = new FileInputStream(libPath);\n\n    FileOutputStream fos = new  \n    FileOutputStream(Environment.getExternalStorageDirectory() + \"/decrypted.jar\");\n    SecretKeySpec sks = new SecretKeySpec(Key.getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks /*originalKey*/);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while((b = cis.read(d)) != -1) {\n    fos.write(d, 0, b);\n    }\n    fos.flush();\n    fos.close();\n    cis.close();\n    }\n", "idx": 1413}
{"project": "cipher", "commit_id": "Snippet3293928_30712.java", "target": 0, "func": "    import org.apache.commons.codec.binary.Base64;\n    import java.util.ResourceBundle;\n    import com.sun.crypto.provider.SunJCE;\n\n    ... snip ...\n\n    StringBuffer ourTransferBuffer = new StringBuffer(s);\n    byte abyte0[] = Base64.decodeBase64(encryptionKey);\n    SunJCE sunjce = new SunJCE();\n    Security.addProvider(sunjce);\n    SecretKeySpec secretkeyspec = new SecretKeySpec(abyte0, \"Blowfish\");\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n    cipher.init(1, secretkeyspec);\n    byte abyte1[] = cipher.doFinal(ourTransferBuffer.toString().getBytes());\n    s = Base64.encodeBase64String(abyte1);\n    return s;\n\n    ... snip ...\n", "idx": 1414}
{"project": "cipher", "commit_id": "Snippet25155476_7504.java", "target": 0, "func": "void encrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException,\nInvalidKeyException {\n    String myString = getOutputFile();\n    File myFile = new File(myString);\n    FileInputStream inputStream = new FileInputStream(myFile);\n    File encodedfile = new File(path,\"filename\" + \".mp4\");\n    FileOutputStream outputStream = new FileOutputStream(encodedfile);\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    CipherOutputStream cos = new CipherOutputStream(outputStream, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while((b = inputStream.read(d)) != -1){\n        cos.write(d, 0, b);\n    }\n    cos.flush();\n    cos.close();\n    inputStream.close();\n", "idx": 1415}
{"project": "cipher", "commit_id": "Snippet10831801_35101.java", "target": 0, "func": " import java.security.Key;\n\n import javax.crypto.Cipher;\n import javax.crypto.spec.SecretKeySpec;\n\n import sun.misc.BASE64Decoder;\n import sun.misc.BASE64Encoder;\n\n public class AESEncryptionDecryptionTest {\n\n   private static final String ALGORITHM       = \"AES\";\n   private static final String myEncryptionKey = \"ThisIsSecurityKey\";\n   private static final String UNICODE_FORMAT  = \"UTF8\";\n\n   public static String encrypt(String valueToEnc) throws Exception {\n Key key = generateKey();\n Cipher c = Cipher.getInstance(ALGORITHM);\n c.init(Cipher.ENCRYPT_MODE, key);  //////////LINE 20\n byte[] encValue = c.doFinal(valueToEnc.getBytes());\n String encryptedValue = new BASE64Encoder().encode(encValue);\n return encryptedValue;\n   }\n\npublic static String decrypt(String encryptedValue) throws Exception {\nKey key = generateKey();\nCipher c = Cipher.getInstance(ALGORITHM);\nc.init(Cipher.DECRYPT_MODE, key);\nbyte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\nbyte[] decValue = c.doFinal(decordedValue);\nString decryptedValue = new String(decValue);\nreturn decryptedValue;\n}\n\nprivate static Key generateKey() throws Exception {\nbyte[] keyAsBytes;\nkeyAsBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\nKey key = new SecretKeySpec(keyAsBytes, ALGORITHM);\nreturn key;\n}\n\npublic static void main(String[] args) throws Exception {\n\nString value = \"password1\";\nString valueEnc = AESEncryptionDecryptionTest.encrypt(value);\nString valueDec = AESEncryptionDecryptionTest.decrypt(valueEnc);\n\nSystem.out.println(\"Plain Text : \" + value);\nSystem.out.println(\"Encrypted : \" + valueEnc);\nSystem.out.println(\"Decrypted : \" + valueDec);\n}\n\n}\n", "idx": 1416}
{"project": "cipher", "commit_id": "Snippet41349341_23323.java", "target": 0, "func": "public void encrypt(){\n    //encrypt\n    EditText mEdit = (EditText)findViewById(R.id.editText);\n    str_key = (String) mEdit.getText().toString();\n\n    int iterationCount = 1000;\n    int keyLength = 256;\n    int saltLength = keyLength / 8; \n\n    SecureRandom random = new SecureRandom();\n    byte[] salt = new byte[saltLength];\n    random.nextBytes(salt);\n    KeySpec keySpec = new PBEKeySpec(str_key.toCharArray(), salt,\n            iterationCount, keyLength);\n    SecretKeyFactory keyFactory = null;\n    try {\n        keyFactory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    }\n    byte[] keyBytes = new byte[0];\n    try {\n        keyBytes = keyFactory.generateSecret(keySpec).getEncoded();\n    } catch (InvalidKeySpecException e) {\n        e.printStackTrace();\n    }\n    SecretKey key = new SecretKeySpec(keyBytes, \"Blowfish\");\n\n    Cipher cipher = null;\n    try {\n        cipher = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\"); \n    } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n        e.printStackTrace();\n    }\n    if ( cipher == null || key == null) {\n        //throw new Exception(\"Invalid key or cypher\");\n        str2=\"error\";\n    }\n    else {\n        byte[] iv = new byte[cipher.getBlockSize()];\n        random.nextBytes(iv);\n        IvParameterSpec ivParams = new IvParameterSpec(iv);\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, key,ivParams);\n        } catch (InvalidKeyException | InvalidAlgorithmParameterException e) {\n            e.printStackTrace();\n        }\n\n\n        try {\n            raw = cipher.doFinal(message.getBytes(\"UTF-8\"));\n        } catch (IllegalBlockSizeException | BadPaddingException | UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        str2 = Base64.encodeToString(raw,Base64.DEFAULT);\n\n    }\n\n\n}\n", "idx": 1417}
{"project": "cipher", "commit_id": "Snippet9228062_32239.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n", "idx": 1418}
{"project": "cipher", "commit_id": "Snippet8775165_33497.java", "target": 0, "func": "package com.myclass.util;\n\nimport java.io.UnsupportedEncodingException;\nimport java.nio.charset.Charset;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.NoSuchProviderException;\nimport java.security.spec.InvalidParameterSpecException;\nimport java.util.Arrays;\nimport java.util.regex.Pattern;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n   public class AES {\n       private static Charset PLAIN_TEXT_ENCODING = Charset.forName(\"UTF-8\");\n       private static String CIPHER_TRANSFORMATION = \"AES/CTR/NoPadding\";\n       private static String KEY_TYPE = \"AES\";\n       private static int KEY_SIZE_BITS = 128;\n\n       private SecretKey key;\n       private Cipher cipher = Cipher.getInstance(CIPHER_TRANSFORMATION);\n       private byte[] ivBytes = new byte[KEY_SIZE_BITS/8];\n\n       public AES() throws NoSuchAlgorithmException, NoSuchPaddingException, NoSuchProviderException, InvalidParameterSpecException, InvalidKeyException, InvalidAlgorithmParameterException{\n           KeyGenerator kgen = KeyGenerator.getInstance(KEY_TYPE);\n           kgen.init(KEY_SIZE_BITS); \n           key = kgen.generateKey();\n           cipher.init(Cipher.ENCRYPT_MODE, key);\n           ivBytes = cipher.getParameters().getParameterSpec(IvParameterSpec.class).getIV();\n       }\n\n       public String getIVAsHex(){\n           return byteArrayToHexString(ivBytes);\n       }\n\n       public String getKeyAsHex(){\n           return byteArrayToHexString(key.getEncoded());\n       }\n\n       public void setCrtKey(String keyText) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException{\n           byte[] bText = keyText.getBytes();\n           SecretKey secretKey = new SecretKeySpec(bText, \"AES\");\n           Cipher c2 = Cipher.getInstance(\"AES/ECB/NoPadding\");\n           c2.init(Cipher.ENCRYPT_MODE, secretKey);\n           bText = c2.doFinal(bText);\n           key = new SecretKeySpec(bText, \"AES\");\n       }\n\n       public void setStringToKey(String keyText) throws NoSuchAlgorithmException, UnsupportedEncodingException{\n           setKey(keyText.getBytes());\n       }\n\n       public void setHexToKey(String hexKey){\n           setKey(hexStringToByteArray(hexKey));\n       }\n\n       private void setKey(byte[] bArray){\n           byte[] bText = new byte[KEY_SIZE_BITS/8];\n           int end = Math.min(KEY_SIZE_BITS/8, bArray.length);\n           System.arraycopy(bArray, 0, bText, 0, end);\n           key = new SecretKeySpec(bText, KEY_TYPE);\n       }\n\n       public void setStringToIV(String ivText){\n           setIV(ivText.getBytes());\n       }\n\n       public void setHexToIV(String hexIV){\n           setIV(hexStringToByteArray(hexIV));\n       }\n\n       private void setIV(byte[] bArray){\n           byte[] bText = new byte[KEY_SIZE_BITS/8];\n           int end = Math.min(KEY_SIZE_BITS/8, bArray.length);\n           System.arraycopy(bArray, 0, bText, 0, end);\n           ivBytes = bText;\n       }\n\n        public String encryptCRT(String message) throws InvalidKeyException,\n                IllegalBlockSizeException, BadPaddingException,\n                InvalidAlgorithmParameterException {\n            String hexMessage = encrypt(message);\n            return byteArrayToHexString(ivBytes).concat(hexMessage.substring(2));\n        }\n\n        public String encrypt(String message) throws InvalidKeyException,\n                IllegalBlockSizeException, BadPaddingException,\n                InvalidAlgorithmParameterException {\n            cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(ivBytes));\n            byte[] encrypted = cipher.doFinal(message.getBytes(PLAIN_TEXT_ENCODING));\n            String result = byteArrayToHexString(encrypted);\n            return result;\n        }\n\n        public String decryptCrt(String hexCipherText) throws InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException{\n            byte[] ciphertextBytes = hexStringToByteArray(hexCipherText);\n            ivBytes = Arrays.copyOf(Arrays.copyOf(ciphertextBytes, 8), 16);\n            cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(ivBytes));\n            byte[] recoveredCleartext = cipher.doFinal(ciphertextBytes, 8, ciphertextBytes.length - 8);\n            return new String(recoveredCleartext);\n        }\n\n\n        public String decrypt(String hexCiphertext)\n                throws IllegalBlockSizeException, BadPaddingException,\n                InvalidKeyException, InvalidAlgorithmParameterException,\n                UnsupportedEncodingException {\n            byte[] dec = hexStringToByteArray(hexCiphertext);\n            cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(ivBytes));\n            byte[] decrypted = cipher.doFinal(dec);\n            return new String(decrypted, PLAIN_TEXT_ENCODING);\n        }\n\n        private static String byteArrayToHexString(byte[] raw) {\n            StringBuilder sb = new StringBuilder(2 + raw.length * 2);\n            sb.append(\"0x\");\n            for (int i = 0; i < raw.length; i++) {\n                sb.append(String.format(\"%02X\", Integer.valueOf(raw[i] & 0xFF)));\n            }\n            return sb.toString();\n        }\n\n       private static byte[] hexStringToByteArray(String hex) {\n            Pattern replace = Pattern.compile(\"^0x\");\n            String s = replace.matcher(hex).replaceAll(\"\");\n\n            byte[] b = new byte[s.length() / 2];\n            for (int i = 0; i < b.length; i++){\n              int index = i * 2;\n              int v = Integer.parseInt(s.substring(index, index + 2), 16);\n              b[i] = (byte)v;\n            }\n            return b;\n       }\n   }\n", "idx": 1419}
{"project": "cipher", "commit_id": "Snippet37498555_19402.java", "target": 0, "func": " public static byte[] Encrypt(byte[] a,Key skey) throws Exception {\n\n // Instantiate the cipher\n\nCipher cipher = Cipher.getInstance(\"AES\");  \ncipher.init(Cipher.ENCRYPT_MODE, skey);\n\nbyte[] encrypted =cipher.doFinal(a);\ncipher.init(Cipher.DECRYPT_MODE, skey);\nbyte[] original = cipher.doFinal(encrypted);\nString originalString = new String(original);\n\nreturn encrypted;\n}\n", "idx": 1420}
{"project": "cipher", "commit_id": "Snippet41820513_23808.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\n\npublic class ImageEncDec {\n\n    public static byte[] getFile() {\n\n        File f = new File(\"/home/bridgeit/Desktop/Olympics.jpg\");\n        InputStream is = null;\n        try {\n            is = new FileInputStream(f);\n        } catch (FileNotFoundException e2) {\n            // TODO Auto-generated catch block\n            e2.printStackTrace();\n        }\n        byte[] content = null;\n        try {\n            content = new byte[is.available()];\n        } catch (IOException e1) {\n            // TODO Auto-generated catch block\n            e1.printStackTrace();\n        }\n        try {\n            is.read(content);\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        return content;\n    }\n\n    public static byte[] encryptPdfFile(Key key, byte[] content) {\n        Cipher cipher;\n        byte[] encrypted = null;\n        try {\n            cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            encrypted = cipher.doFinal(content);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return encrypted;\n\n    }\n\n    public static byte[] decryptPdfFile(Key key, byte[] textCryp) {\n        Cipher cipher;\n        byte[] decrypted = null;\n        try {\n            cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            decrypted = cipher.doFinal(textCryp);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return decrypted;\n    }\n\n    public static void saveFile(byte[] bytes) throws IOException {\n\n        FileOutputStream fos = new FileOutputStream(\"/home/bridgeit/Desktop/Olympics-new.jpg\");\n        fos.write(bytes);\n        fos.close();\n\n    }\n\n    public static void main(String args[])\n            throws NoSuchAlgorithmException, InstantiationException, IllegalAccessException, IOException {\n\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n        keyGenerator.init(128);\n        Key key = keyGenerator.generateKey();\n        System.out.println(key);\n\n        byte[] content = getFile();\n        System.out.println(content);\n\n        byte[] encrypted = encryptPdfFile(key, content);\n        System.out.println(encrypted);\n\n        byte[] decrypted = decryptPdfFile(key, encrypted);\n        System.out.println(decrypted);\n\n        saveFile(decrypted);\n        System.out.println(\"Done\");\n\n    }\n\n}\n", "idx": 1421}
{"project": "cipher", "commit_id": "Snippet39733712_21629.java", "target": 0, "func": "private static byte[] key = {\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15};\n\n public static String decrypt()\n   {\n\n       byte[] info= hexStrToByteArray(\"1425EC9B5D983FF7DF45A4A8089E69FC\"); \n       try\n       {\n           Cipher cipher = Cipher.getInstance(\"AES/ECB/NOPADDING\");\n           final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n           cipher.init(Cipher.DECRYPT_MODE, secretKey);\n           byte[] decryptedResult= cipher.doFinal(info);\n           String result = new String(result, \"UTF-8\");\n           return result;\n       }\n       catch (Exception e)\n       {\n         e.printStackTrace();\n\n       }\n       return null;\n   }\n\n\n  private static byte[] hexStrToByteArray(String hex) {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(hex.length() / 2);\n\n        for (int i = 0; i < hex.length(); i += 2) {\n            String output = hex.substring(i, i + 2);\n            int decimal = Integer.parseInt(output, 16);\n            baos.write(decimal);\n        }\n        return baos.toByteArray();\n    }\n", "idx": 1422}
{"project": "cipher", "commit_id": "Snippet15683916_38700.java", "target": 0, "func": "    //Read your key\n    FileInputStream keyFis = new FileInputStream(\"key.txt\");\n    byte[] encKey = new byte[keyFis.available()];\n    keyFis.read(encKey);\n    keyFis.close();\n    Key keyFromFile = new SecretKeySpec(encKey, \"DES\");\n    //Read your text\n    FileInputStream encryptedTextFis = new FileInputStream(\"test.txt\");\n    byte[] encText = new byte[encryptedTextFis.available()];\n    encryptedTextFis.read(encText);\n    encryptedTextFis.close();\n    //Decrypt\n    Cipher decrypter = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    decrypter.init(Cipher.DECRYPT_MODE, keyFromFile);\n    byte[] decryptedText = decrypter.doFinal(encText);\n    //Print result\n    System.out.println(\"Decrypted Text: \" + new String(decryptedText));\n", "idx": 1423}
{"project": "cipher", "commit_id": "Snippet9667288_34126.java", "target": 0, "func": "public class AES {\nprivate final String characterEncoding = \"UTF-8\";\nprivate final String cipherTransformation = \"AES/ECB/PKCS5Padding\";\nprivate final String aesEncryptionAlgorithm = \"AES\";\n\npublic  byte[] decrypt(byte[] cipherText, byte[] key, byte [] initialVector) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException\n{\n    Cipher cipher = Cipher.getInstance(cipherTransformation);\n    SecretKeySpec secretKeySpecy = new SecretKeySpec(key, aesEncryptionAlgorithm);\n    //IvParameterSpec ivParameterSpec = new IvParameterSpec(initialVector);\n    //cipher.init(Cipher.DECRYPT_MODE, secretKeySpecy, ivParameterSpec);\n    cipher.init(Cipher.DECRYPT_MODE, secretKeySpecy);\n    System.out.println(\"Do final: \"+cipherText);\n\n    cipherText = cipher.doFinal(cipherText);\n    return cipherText;\n}\n\npublic  byte[] encrypt(byte[] plainText, byte[] key, byte [] initialVector) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException\n{\n    Cipher cipher = Cipher.getInstance(cipherTransformation);\n    SecretKeySpec secretKeySpec = new SecretKeySpec(key, aesEncryptionAlgorithm);\n    //IvParameterSpec ivParameterSpec = new IvParameterSpec(initialVector);\n    //cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivParameterSpec);\n    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n    plainText = cipher.doFinal(plainText);\n    return plainText;\n}\n\nprivate byte[] getKeyBytes(String key) throws UnsupportedEncodingException{\n    byte[] keyBytes= new byte[16];\n    byte[] parameterKeyBytes= key.getBytes(characterEncoding);\n    System.arraycopy(parameterKeyBytes, 0, keyBytes, 0, Math.min(parameterKeyBytes.length, keyBytes.length));\n    return keyBytes;\n}\n\n/// <summary>\n/// Encrypts plaintext using AES 128bit key and a Chain Block Cipher and returns a base64 encoded string\n/// </summary>\n/// <param name=\"plainText\">Plain text to encrypt</param>\n/// <param name=\"key\">Secret key</param>\n/// <returns>Base64 encoded string</returns>\npublic String encrypt(String plainText, String key) throws UnsupportedEncodingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException{\n    byte[] plainTextbytes = plainText.getBytes(characterEncoding);\n    byte[] keyBytes = getKeyBytes(key);\n    //return Base64.encodeToString(encrypt(plainTextbytes,keyBytes, keyBytes), Base64.DEFAULT);\n    return Base64.encodeToString(encrypt(plainTextbytes,keyBytes, new byte[0]), Base64.DEFAULT);\n}\n\n/// <summary>\n/// Decrypts a base64 encoded string using the given key (AES 128bit key and a Chain Block Cipher)\n/// </summary>\n/// <param name=\"encryptedText\">Base64 Encoded String</param>\n/// <param name=\"key\">Secret Key</param>\n/// <returns>Decrypted String</returns>\npublic String decrypt(String encryptedText, String key) throws KeyException, GeneralSecurityException, GeneralSecurityException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, IOException{\n    byte[] cipheredBytes = Base64.decode(encryptedText, Base64.DEFAULT);\n    byte[] keyBytes = getKeyBytes(key);\n    //return new String(decrypt(cipheredBytes, keyBytes, keyBytes), characterEncoding);\n    return new String(decrypt(cipheredBytes, keyBytes, new byte[0]), characterEncoding);\n}\n", "idx": 1424}
{"project": "cipher", "commit_id": "Snippet21075369_3669.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/NoPadding\");\n", "idx": 1425}
{"project": "cipher", "commit_id": "Snippet10358882_34711.java", "target": 0, "func": "import java.math.BigInteger;\nimport java.security.InvalidKeyException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class SimpleCrypto {\n\n    private static final int KEY_SIZE = 128;\n\n    public static String encrypt(String seed, String cleartext) throws NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {\n        final byte[] rawKey = getRawKey(seed.getBytes());\n        final byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return bin2hex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException {\n        final byte[] rawKey = getRawKey(seed.getBytes());\n        final byte[] enc = toByte(encrypted);\n        final byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    public static String decrypt(String seed, byte[] encrypted) throws NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException {\n        final byte[] rawKey = getRawKey(seed.getBytes());\n        final byte[] result = decrypt(rawKey, encrypted);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws NoSuchAlgorithmException {\n        final KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        final SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(KEY_SIZE, sr); // 192 and 256 bits may not be available\n        final SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n    public static byte[] encrypt(byte[] raw, byte[] clear) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n        final SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        final Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        final byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    public static byte[] decrypt(byte[] raw, byte[] encrypted) throws IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n        final SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        final Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        final byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return bin2hex(txt.getBytes());\n    }\n\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        final int len = hexString.length() / 2;\n        final byte[] result = new byte[len];\n        for (int i = 0; i < len; i++) {\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2), 16).byteValue();\n        }\n        return result;\n    }\n\n    public static byte[] getHash(String str) {\n        MessageDigest digest = null;\n        try {\n            digest = MessageDigest.getInstance(\"SHA-256\");\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        }\n        digest.reset();\n        return digest.digest(str.getBytes());\n    }\n\n    static String bin2hex(byte[] data) {\n        return String.format(\"%0\" + (data.length * 2) + \"X\", new BigInteger(1, data));\n    }\n}\n", "idx": 1426}
{"project": "cipher", "commit_id": "Snippet15160714_38267.java", "target": 0, "func": "    Cipher cipher = Cipher.getInstance(\"AES\");\n    SecretKeySpec keySpec = new SecretKeySpec(masterKey, \"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n", "idx": 1427}
{"project": "cipher", "commit_id": "Snippet6942932_32466.java", "target": 0, "func": "// 16 characters for 128-bit AES\nprivate final static String PASSPHRASE=\"myappspassphrase\"\n\nSecretKeySpec key = new SecretKeySpec(PASSPHRASE.getBytes(\"UTF-8\"), \"AES\");\n\n...\n\n// Initialise the cipher\nCipher encryptCipher = Cipher.getInstance(\"AES\");\nencryptCipher.init(Cipher.ENCRYPT_MODE, key);\n", "idx": 1428}
{"project": "cipher", "commit_id": "Snippet41517225_23079.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 1429}
{"project": "cipher", "commit_id": "Snippet21189577_3731.java", "target": 0, "func": "public class Encryption {\nprivate static String charsetName = \"UTF8\";\nprivate static String algorithm = \"DES\";\nprivate static int base64Mode = Base64.DEFAULT;\n\npublic String getCharsetName() {\n    return charsetName;\n}\n\npublic void setCharsetName(String charsetName) {\n    this.charsetName = charsetName;\n}\n\npublic String getAlgorithm() {\n    return algorithm;\n}\n\npublic void setAlgorithm(String algorithm) {\n    this.algorithm = algorithm;\n}\n\npublic int getBase64Mode() {\n    return base64Mode;\n}\n\npublic void setBase64Mode(int base64Mode) {\n    this.base64Mode = base64Mode;\n}\n\npublic static String encrypt(String key, String data) {\n    if (key == null || data == null)\n        return null;\n    try {\n        DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(charsetName));\n        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithm);\n        SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);\n        byte[] dataBytes = data.getBytes(charsetName);\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        return Base64.encodeToString(cipher.doFinal(dataBytes), base64Mode);\n    } catch (Exception e) {\n        return null;\n    }\n}\n\npublic static String decrypt(String key, String data) {\n    if (key == null || data == null)\n        return null;\n    try {\n        byte[] dataBytes = Base64.decode(data, base64Mode);\n        DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(charsetName));\n        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithm);\n        SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        byte[] dataBytesDecrypted = (cipher.doFinal(dataBytes));\n        return new String(dataBytesDecrypted);\n    } catch (Exception e) {\n        return null;\n    }\n}\n\n}   \n", "idx": 1430}
{"project": "cipher", "commit_id": "Snippet37921767_19932.java", "target": 0, "func": "Cipher.getInstance(\"DES\");", "idx": 1431}
{"project": "cipher", "commit_id": "Snippet36923382_18897.java", "target": 0, "func": " pt = (EditText) findViewById(R.id.pt);\n        lat = (EditText) findViewById(R.id.lat);\n        lon = (EditText) findViewById(R.id.lon);\n        ct = (TextView) findViewById(R.id.ct);\n        b1 = (Button) findViewById(R.id.b1);\n\n       b1.setOnClickListener(new View.OnClickListener() {\n           @Override\n           public void onClick(View v) {\n               String plaintext = pt.getText().toString();\n               String latitude = lat.getText().toString();\n               String longitude = lon.getText().toString();\n\n               String key = latitude;\n               key = key.concat(longitude);\n               byte[] array = new byte[0];\n               try {\n                   array = key.getBytes(\"UTF-8\");\n               } catch (UnsupportedEncodingException e) {\n                   e.printStackTrace();\n               }\n\n               MessageDigest sha = null;\n               try {\n                   sha = MessageDigest.getInstance(\"SHA-1\");\n               } catch (NoSuchAlgorithmException e) {\n                   e.printStackTrace();\n               }\n               array = sha.digest(array);\n               array = Arrays.copyOf(array, 16); // use only first 128 bit\n               Cipher cipher = null;\n               try {\n                   cipher = Cipher.getInstance(\"AES\");\n               } catch (NoSuchAlgorithmException e) {\n                   e.printStackTrace();\n               } catch (NoSuchPaddingException e) {\n                   e.printStackTrace();\n               }\n               SecretKeySpec secretKeySpec = new SecretKeySpec(array, \"AES\");\n\n               try {\n                   cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n               } catch (InvalidKeyException e) {\n                   e.printStackTrace();\n               }\n               byte[] encrypted = new byte[0];\n               try {\n                   encrypted = cipher.doFinal((plaintext).getBytes());\n               } catch (IllegalBlockSizeException e) {\n                   e.printStackTrace();\n               } catch (BadPaddingException e) {\n                   e.printStackTrace();\n               }\n               String ciphertext = Base64.encodeToString(encrypted,0);\n               ct.setText(ciphertext);\n\n           }\n       });\n    }\n", "idx": 1432}
{"project": "cipher", "commit_id": "Snippet3181250_30613.java", "target": 0, "func": "Cipher c1 = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n", "idx": 1433}
{"project": "cipher", "commit_id": "Snippet42154479_23898.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, secretKey_AES);\nbyte[] encrypted = cipher.doFinal(message.getBytes(\"UTF-8\"));\nString encryptedMessage = Base64.encodeToString(encrypted, Base64.DEFAULT);\nreturn encryptedMessage;\n", "idx": 1434}
{"project": "cipher", "commit_id": "Snippet17690898_815.java", "target": 0, "func": "final Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");", "idx": 1435}
{"project": "cipher", "commit_id": "Snippet11360924_35496.java", "target": 0, "func": "Key key = SecretKeyFactory.getInstance(\"DES\").generateSecret(new DESKeySpec(bytesOfThe Key)); // bytesOfTheKey should be 8 bytes long\nCipher cipher = Cipher.getInstance(\"DES\");\ncipher.init(Cipher.DECRYPT_MODE, key);\nreturn new CipherInputStream(inputStream, cipher);\n", "idx": 1436}
{"project": "cipher", "commit_id": "Snippet21253056_3787.java", "target": 0, "func": "private static String decrypt(String seed, String encrypted) throws Exception {\n    byte[] keyb = seed.getBytes(\"UTF-8\");\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    byte[] thedigest = md.digest(keyb);\n    SecretKeySpec skey = new SecretKeySpec(thedigest, \"AES\");\n    Cipher dcipher = Cipher.getInstance(\"AES\");\n    dcipher.init(Cipher.DECRYPT_MODE, skey);\n\n    byte[] clearbyte = dcipher.doFinal(toByte(encrypted));\n    return new String(clearbyte);\n}\n\nprivate static byte[] toByte(String hexString) {\n    int len = hexString.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++) {\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n    }\n    return result;\n}\n", "idx": 1437}
{"project": "cipher", "commit_id": "Snippet15471779_38524.java", "target": 0, "func": " byte[] data = new BASE64Decoder().decodeBuffer(cipherData);\n        Cipher aesCipher = Cipher.getInstance(\"AES\");\n        aesCipher.init(Cipher.DECRYPT_MODE, secretKeyUsed while encrypting);\n        byte[] plainData = aesCipher.doFinal(data);\n        return new String(plainData);\n", "idx": 1438}
{"project": "cipher", "commit_id": "Snippet12914288_36550.java", "target": 0, "func": "import java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Test1 {\n  public static void main(String[] args) throws Exception {\n   // Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n\n      byte[] input = \"input\".getBytes();\n        byte[] ivBytes = \"1234567812345678\".getBytes();\n\n        Cipher cipher =  Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        **KeyGenerator generator = KeyGenerator.getInstance(\"AES\");**\n        generator.init(128);\n        Key encryptionKey = generator.generateKey();\n        System.out.println(\"key : \" + new String(encryptionKey.getEncoded()));\n       }\n\n}\n", "idx": 1439}
{"project": "cipher", "commit_id": "Snippet38407929_20356.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"blowfish/ecb/nopadding\");\n", "idx": 1440}
{"project": "cipher", "commit_id": "Snippet15170808_38276.java", "target": 0, "func": " public void initKey(String key) {\n    String paddedKey = Utils.padString(key);\n    mKeyspec = new SecretKeySpec(Utils.getBytes(paddedKey), \"AES/ECB/NoPadding\");\n                   // Utils.getBytes returns \"paddedKey.getBytes(\"CP1252\")\"\n }\n\npublic byte[] encrypt2(String data) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, mKeyspec);\n        String paddedData = Utils.padString(data);\n        return cipher.doFinal(Utils.getBytes(paddedData));\n\n    } catch(InvalidKeyException e) {\n        e.printStackTrace();\n    // Series of catch blocks\n    }\n    return null;\n}\n\npublic String decrypt2(byte[] cypherText) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE, mKeyspec);\n        byte[] plainTextBytes = cipher.doFinal(cypherText);\n        return Utils.getString(plainTextBytes);\n        // Utils.getString returns \"new String(bytes, \"CP1252\");\"\n    } catch(InvalidKeyException e) {\n        // Series of catch blocks.\n    } \n    return null;\n}\n", "idx": 1441}
{"project": "cipher", "commit_id": "Snippet20425824_3072.java", "target": 0, "func": "import java.security.*\nimport javax.crypto.*\nimport javax.crypto.spec.*\n\npublic class Des {\n    static encode = { String target ->\n        def cipher = getCipher(Cipher.ENCRYPT_MODE)\n        return cipher.doFinal(target.bytes).encodeBase64()\n    }\n\n    static decode = { String target ->\n        println \"DECODE TARGET :::: \" + target\n        def cipher = getCipher(Cipher.DECRYPT_MODE)\n        def b64Char = target.decodeBase64()\n        println \"BASE64 CHAR :::: \" + b64Char\n        def ret = cipher.doFinal(b64Char)\n        println \"DECODE VALUE :::\" + ret\n        return ret\n    }\n\n    private static getCipher(mode) {\n        def keySpec = new DESKeySpec(getKeySecretKey())\n        def cipher = Cipher.getInstance(\"DES\")\n        def keyFactory = SecretKeyFactory.getInstance(\"DES\")\n        cipher.init(mode, keyFactory.generateSecret(keySpec))\n        return cipher\n    }\n\n    private static getKeySecretKey() {\n        \"MySecret1234\".getBytes(\"UTF-8\")\n    }\n\n    static void main(args) {\n        println encode(\"TheP4ssword\")\n    }\n}\n", "idx": 1442}
{"project": "cipher", "commit_id": "Snippet20824887_3451.java", "target": 0, "func": "SecretKey secretKey;\n        String stringKey;\n        try {\n            secretKey = KeyGenerator.getInstance(\"DES\").generateKey();\n            // byte[] initialization_vector;\n            // IvParameterSpec alogrithm_specs = new\n            // IvParameterSpec(initialization_vector);\n            // set encryption mode ...\n            Cipher encrypt = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n            encrypt.init(Cipher.ENCRYPT_MODE, secretKey);\n\n            if (secretKey != null) {\n                stringKey = Base64.encodeBase64String(secretKey.getEncoded());\n                System.out.println(\"actual secret_key:\" + stringKey);\n\n                byte[] encodedKey = Base64.decodeBase64(stringKey);\n\n                // out.print(\"byte[]:\"+encodedKey);\n\n                secretKey = new SecretKeySpec(encodedKey, 0, encodedKey.length,\n                        \"DES\");\n                System.out.println(\"after encode & decode secret_key:\"\n                        + Base64.encodeBase64String(secretKey.getEncoded()));\n            }\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n", "idx": 1443}
{"project": "cipher", "commit_id": "Snippet5003328_31443.java", "target": 0, "func": "Cipher cipher;\nSecretKey key;\nbyte[] buf = new byte[1024];\nDesEncrypter() {\n   byte[] iv = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,\n      0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };\n   key = new SecretKeySpec(iv, \"AES\");\n   try {\n     cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n     cipher.init(Cipher.ENCRYPT_MODE, key);          \n   } \n   catch (NoSuchProviderException e) {}\n }        \n\npublic void encrypt(InputStream in, OutputStream out) {\n    try {\n      out = new CipherOutputStream(out, cipher);\n      int numRead = 0;\n      while ((numRead = in.read(buf)) >= 0) {\n          out.write(buf, 0, numRead);\n      }\n      out.close();\n    } \n", "idx": 1444}
{"project": "cipher", "commit_id": "Snippet10494764_34815.java", "target": 0, "func": "int result_len = 0;\nresult_len = din.readInt();            \nbyte[] result_Bytes = new byte[result_len];\ndin.readFully(result_Bytes);\ncipher2 = Cipher.getInstance(\"AES\");\ncipher2.init(Cipher.DECRYPT_MODE, aesKey);             \nbyte[] encrypt = cipher2.doFinal(result_Bytes);\n", "idx": 1445}
{"project": "cipher", "commit_id": "Snippet13773070_37158.java", "target": 0, "func": "Cipher c1 = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); and\nCipher c1 = Cipher.getInstance(\"DES\"); are equivalent statements.\n", "idx": 1446}
{"project": "cipher", "commit_id": "Snippet9584167_34033.java", "target": 0, "func": "public Encrypt(AOBCore instance){\n    try {\n        String message=\"This is just an example\";\n\n           // Get the KeyGenerator\n\n           KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n           kgen.init(256); // 192 and 256 bits may not be available\n\n\n           // Generate the secret key specs.\n           SecretKey skey = kgen.generateKey(); //Cantget 'test' in here...\n           byte[] raw = skey.getEncoded();\n\n           SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n\n           // Instantiate the cipher\n\n           Cipher cipher = Cipher.getInstance(\"AES\");\n\n           cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n           byte[] encrypted =\n             cipher.doFinal(message.getBytes());\n           System.out.println(\"encrypted string: \" + asHex(encrypted));\n\n           cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n           byte[] original =\n             cipher.doFinal(encrypted);\n           String originalString = new String(original);\n           System.out.println(\"Original string: \" +\n             originalString + \" \" + asHex(original));\n    } catch (Exception e) {\n        instance.logMessage(e.getMessage());\n    }\n}\n\npublic static String asHex (byte buf[]) {\n      StringBuffer strbuf = new StringBuffer(buf.length * 2);\n      int i;\n\n      for (i = 0; i < buf.length; i++) {\n       if (((int) buf[i] & 0xff) < 0x10)\n        strbuf.append(\"0\");\n\n       strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n      }\n\n      return strbuf.toString();\n     }\n", "idx": 1447}
{"project": "cipher", "commit_id": "Snippet37660602_19622.java", "target": 0, "func": "Cipher.getInstance(\"DES\")", "idx": 1448}
{"project": "cipher", "commit_id": "Snippet31089571_13264.java", "target": 0, "func": "public String encryptAES(String key, String mdp) throws NoSuchPaddingException, NoSuchAlgorithmException {\n    byte[] skey = key.getBytes();\n    byte[] pwd = mdp.getBytes();\n    byte[] encrypted = null;\n    SecretKeySpec secretKeySpec = new SecretKeySpec(skey, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    try {\n        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    }\n    try {\n        encrypted = cipher.doFinal(pwd);\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        e.printStackTrace();\n    }\n    return Arrays.toString(Base64.encode(encrypted, Base64.DEFAULT));\n}\n", "idx": 1449}
{"project": "cipher", "commit_id": "Snippet35247247_17186.java", "target": 0, "func": "private String decrypt(String encrypted) throws Exception {\n    Cipher cipher = getCipher(Cipher.DECRYPT_MODE);\n    //byte[] plainBytes = cipher.doFinal(Base64.decodeBase64(encrypted));\n\n    /*this line throw an exception*/                                      \n    byte[] plainBytes = cipher.doFinal(Base64.getDecoder().decode(encrypted));\n\n    return new String(plainBytes);\n}\n\nprivate Cipher getCipher(int cipherMode) throws Exception {\n    String encryptionAlgorithm = \"AES\";\n    SecretKeySpec keySpecification = new SecretKeySpec(\n            encryptionKey.getBytes(\"UTF-8\"), encryptionAlgorithm);\n    Cipher cipher = Cipher.getInstance(encryptionAlgorithm);\n    cipher.init(cipherMode, keySpecification);\n\n    return cipher;\n}\n\n\n\n\nException in thread \"main\" java.lang.NullPointerException\nat java.util.Base64$Decoder.decode(Base64.java:549)\nat edmaker.EdMaker.decrypt(EdMaker.java:148)\n", "idx": 1450}
{"project": "cipher", "commit_id": "Snippet26495841_8635.java", "target": 0, "func": "    byte[] key = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n    byte[] data = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n\n    SecretKeySpec encryptionKey = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n    cipher.init(Cipher.ENCRYPT_MODE, encryptionKey);\n\n    long start = System.currentTimeMillis();\n    for (int i=0; i<10000000; i++)\n    {\n        cipher.doFinal(data);\n    }\n    long end = System.currentTimeMillis();      \n\n    System.out.println(\"took: \"+ (end-start));\n", "idx": 1451}
{"project": "cipher", "commit_id": "Snippet31413244_13537.java", "target": 0, "func": "public static String decrypt(byte[] input) throws Exception {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n    byte[] key = getKey(input[1]);\n    SecretKey secretKey = new SecretKeySpec(key, 0, key.length, \"AES/ECB/NoPadding\");\n    cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(getIV()));\n    // remove first 4 since C# code reads past those\n    byte[] finalDecoded = Arrays.copyOfRange(input, 4, input.length);\n    byte[] decryptedVal = cipher.doFinal(finalDecoded);\n    return new String(decryptedVal);\n}\n", "idx": 1452}
{"project": "cipher", "commit_id": "Snippet13171031_36761.java", "target": 0, "func": "private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n  }\n", "idx": 1453}
{"project": "cipher", "commit_id": "Snippet32108274_14161.java", "target": 0, "func": "int slot = 0;\nProvider provider = new au.com.safenet.crypto.provider.SAFENETProvider(slot);\nSecurity.addProvider(provider);\nfinal String PROVIDER = provider.getName(); // \"SAFENET\", \"SAFENET.1\", ...\n\nKeyGenerator keyGen = KeyGenerator.getInstance(\"DESede\", PROVIDER);\nKey baseKey = keyGen.generateKey();\n\nCipher desCipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\", PROVIDER);\ndesCipher.init(Cipher.ENCRYPT_MODE, baseKey);\n\nbyte[] derived = desCipher.doFinal(\"diversification data\".getBytes());\n", "idx": 1454}
{"project": "cipher", "commit_id": "Snippet14195287_37544.java", "target": 0, "func": "package crypt;\n\nimport java.io.PrintStream;\nimport java.nio.charset.Charset;\nimport java.security.spec.KeySpec;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\npublic class SecretKeyEncryptionExample {\n\n    private static final String FORMAT = \"ISO-8859-1\";\n    public static final String DESEDE_ENCRYPTION_SCHEME = \"DESede\";\n\n    private KeySpec ks;\n    private SecretKeyFactory skf;\n    private Cipher cipher;\n    SecretKey key;\n\n    public SecretKeyEncryptionExample() throws Exception {\n\n        String myEncryptionKey = \"4A144BEBF7E5E7B7DCF26491AE79C54C768C514CF1547D23\";\n\n        ks = new DESedeKeySpec(myEncryptionKey.getBytes(FORMAT));\n        skf = SecretKeyFactory.getInstance(DESEDE_ENCRYPTION_SCHEME);\n        cipher = Cipher.getInstance(DESEDE_ENCRYPTION_SCHEME);\n        key = skf.generateSecret(ks);\n    }\n\n    public String encrypt(String unencryptedString) throws Exception {\n\n        String encryptedString = null;\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] plainText = unencryptedString.getBytes(FORMAT);\n        byte[] encryptedText = cipher.doFinal(plainText);\n        encryptedString = DatatypeConverter.printBase64Binary(encryptedText);\n\n        return encryptedString;\n    }\n\n    public String decrypt(String encryptedString)  throws Exception {\n\n        String decryptedText = null;\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] encryptedText = DatatypeConverter.parseBase64Binary(encryptedString);\n        byte[] plainText = cipher.doFinal(encryptedText);\n        decryptedText = new String(plainText);\n\n        return decryptedText;\n    }\n\n    public static void main(String args[]) throws Exception {\n\n        SecretKeyEncryptionExample td = new SecretKeyEncryptionExample();\n\n        String target = \"Expendable\" + getSpecialCharacter(49810) + \"s Pte Ltd\";\n\n        String encrypted = td.encrypt(target);\n        String decrypted = td.decrypt(encrypted);\n\n        PrintStream out = new PrintStream(System.out, true, FORMAT);\n        out.println(\"String To Encrypt: \" + target);\n        out.println(\"Encrypted String: \" + encrypted);\n        out.println(\"Decrypted String: \" + decrypted);\n\n    }\n\n    public static String getSpecialCharacter(int code) {\n\n        Charset charSet = Charset.forName(FORMAT);\n        String specialCharacter = new String(new byte[] { (byte) code }, charSet);\n        specialCharacter = String.format(\"%s\", specialCharacter);\n\n        return specialCharacter;\n    }\n\n}\n", "idx": 1455}
{"project": "cipher", "commit_id": "Snippet38450509_20397.java", "target": 0, "func": "private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n  SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n  Cipher cipher = Cipher.getInstance(\"AES\");\n  cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n  byte[] decrypted = cipher.doFinal(encrypted);\n  return decrypted;\n}\n", "idx": 1456}
{"project": "cipher", "commit_id": "Snippet29146408_11202.java", "target": 0, "func": "package tools;\n\nimport java.security.MessageDigest;\nimport java.util.Base64;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AES {\n    public static String cryptString(String toCrypt) {\n        String ret = \"\";\n        try {\n            String keyStr = \"key\";\n            byte[] key = keyStr.getBytes(\"ASCII\");\n            MessageDigest sha = MessageDigest.getInstance(\"MD5\");\n            key = sha.digest(key);\n            SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n            byte[] crypt = cipher.doFinal(toCrypt.getBytes(\"ASCII\"));\n            Base64.Encoder myencoder = Base64.getEncoder();\n            String crypted = myencoder.encodeToString(crypt);\n            ret = new String(crypted).trim();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    return ret;\n    }\n\n    public static String decryptString(String crypted) {\n        String ret = \"\";\n        try {\n            String keyStr = \"key\";\n            byte[] key = keyStr.getBytes(\"ASCII\");\n            MessageDigest sha = MessageDigest.getInstance(\"MD5\");\n            key = sha.digest(key);\n            SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n            Base64.Decoder myDecoder = Base64.getDecoder();\n            byte[] encrypt = myDecoder.decode(crypted.trim().getBytes(\"ASCII\"));\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n            ret = new String(cipher.doFinal(encrypt)).trim();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return ret;\n    }\n}\n", "idx": 1457}
{"project": "cipher", "commit_id": "Snippet44240518_26296.java", "target": 0, "func": "public class MainActivity extends AppCompatActivity implements ZXingScannerView.ResultHandler {\nprivate static final String TAG = \"DESA\" ;\nprivate ZXingScannerView mScannerView;\n\nString m_Text=\"\";\nprivate Button butto;\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    butto = (Button) findViewById(R.id.button);\n    butto.setOnClickListener(new View.OnClickListener(){\n        @Override\n        public void onClick(View view){\n            QrScanner(view);\n        }\n    });\n}\n\npublic void QrScanner(View view){\n\n\n    mScannerView = new ZXingScannerView(this);   // Programmatically initialize the scanner view\n    setContentView(mScannerView);\n\n    mScannerView.setResultHandler(this); // Register ourselves as a handler for scan results.\n    mScannerView.startCamera();         // Start camera\n\n}\n\n@Override\npublic void onPause() {\n    super.onPause();\n    mScannerView.stopCamera();           // Stop camera on pause\n}\nprivate static String cryptoPass = \"sup3rS3xy\";\n\npublic static String decryptIt(String value) {\n    try {\n        DESKeySpec keySpec = new DESKeySpec(cryptoPass.getBytes(\"UTF8\"));\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey key = keyFactory.generateSecret(keySpec);\n\n        byte[] encrypedPwdBytes = Base64.decode(value, Base64.DEFAULT);\n        // cipher is not thread safe\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decrypedValueBytes = (cipher.doFinal(encrypedPwdBytes));\n\n        String decrypedValue = new String(decrypedValueBytes);\n        Log.d(TAG, \"Decrypted: \" + value + \" -> \" + decrypedValue);\n        return decrypedValue;\n\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeySpecException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    }\n    return value;\n}\n\n@Override\npublic void handleResult(Result rawResult) {\n\n    final Context context = this;\n    // Do something with the result here\n    String s = rawResult.getText().toString();\n    final String pwd;\n    s = decryptIt(s);\n    int len = s.length();\n    final String newStr = s.substring(0,(len-5));\n    pwd = s.substring((len-5),len);\n\n    Log.e(\"handler\", s); // Prints scan results\n    Log.e(\"handler\", rawResult.getBarcodeFormat().toString()); // Prints the scan format (qrcode)\n    AlertDialog.Builder builder = new AlertDialog.Builder(this);\n    builder.setTitle(\"Enter QR PIN\");\n    final EditText input = new EditText(this);\n    input.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);\n    builder.setView(input);\n    final AlertDialog.Builder builder1 = builder.setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n            m_Text = input.getText().toString();\n            if (m_Text.equals(pwd)) {\n                Intent intent = new Intent(context, ResultActivity.class);\n                intent.putExtra(\"result\", newStr);\n                startActivity(intent);\n            }\n            else\n            {\n                Intent intent3 = new Intent(context,MainActivity.class);\n                startActivity(intent3);\n            }\n        }\n    });\n    builder.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n            dialog.cancel();\n            Intent intent2 = new Intent(context,MainActivity.class);\n            startActivity(intent2);\n\n        }\n    });\n\n    builder.show();\n}\n}\n", "idx": 1458}
{"project": "cipher", "commit_id": "Snippet35005513_16969.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class JEncrytion\n{   \n    private static final char[] hexDigits = {\n        '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'\n    };\n       /**\n     * Returns a string of hexadecimal digits from a byte array. Each\n     * byte is converted to 2 hex symbols.\n     * <p>\n     * If offset and length are omitted, the whole array is used.\n     */\n    public static String toString(byte[] ba, int offset, int length) {\n        char[] buf = new char[length * 2];\n        int j = 0;\n        int k;\n\n        for (int i = offset; i < offset + length; i++) {\n            k = ba[i];\n            buf[j++] = hexDigits[(k >>> 4) & 0x0F];\n            buf[j++] = hexDigits[ k        & 0x0F];\n        }\n        return new String(buf);\n    }\n    public static String toString(byte[] ba) {\n        return toString(ba, 0, ba.length);\n    }\n      /**\n     * Returns the number from 0 to 15 corresponding to the hex digit <i>ch</i>.\n     */\n    public static int fromDigit(char ch) {\n        if (ch >= '0' && ch <= '9')\n            return ch - '0';\n        if (ch >= 'A' && ch <= 'F')\n            return ch - 'A' + 10;\n        if (ch >= 'a' && ch <= 'f')\n            return ch - 'a' + 10;\n\n        throw new IllegalArgumentException(\"invalid hex digit '\" + ch + \"'\");\n    }\n    /**\n     * Returns a byte array from a string of hexadecimal digits.\n     */\n    public static byte[] fromString(String hex) {\n        int len = hex.length();\n        byte[] buf = new byte[((len + 1) / 2)];\n\n        int i = 0, j = 0;\n        if ((len % 2) == 1)\n            buf[j++] = (byte) fromDigit(hex.charAt(i++));\n\n        while (i < len) {\n            buf[j++] = (byte) ((fromDigit(hex.charAt(i++)) << 4) |\n                                fromDigit(hex.charAt(i++)));\n        }\n        return buf;\n    }\n    //Add padding to make key 24 bytes length i.e. 192 bits length\n    public static byte [] addPaddingToKey (byte [] keyBytes) {\n        byte[] key;\n        int keyLength = keyBytes.length;\n        int paddingLenght = 24 - keyLength;\n        if (paddingLenght != 0) {\n            key = new byte[24];\n            //copy original key\n            System.arraycopy(keyBytes, 0, key, 0, keyLength);\n            //Adding 0 as padding for remaining\n            System.arraycopy(keyBytes, 0, key, keyLength, paddingLenght);\n        } else {\n            key = keyBytes;\n        }\n        return key;\n    }\n    //Add padding to input value to \n    public static byte[] addPadding(byte[] inData, int offset, int len) {\n\n        byte[] bp = null;\n        int padChars = 8;               // start with max padding value\n        int partial = (len + 1) % padChars;     // calculate how many extra bytes exist\n        if (partial == 0) padChars = 1;         // if none, set to only pad with length byte\n        else padChars = padChars - partial + 1; // calculate padding size to include length\n\n        bp = new byte[len + padChars];\n        bp[0] = Byte.parseByte(Integer.toString(padChars));\n        System.arraycopy(inData, offset, bp, 1, len);\n        return bp;\n    }\n    //remove padding added while decryption\n     public static byte[] removePadding(byte[] inData) {\n\n            byte[] bp = null;\n            int dataLength = 0;\n            int padLength = 0;\n            padLength = inData[0];\n            dataLength = inData.length - padLength;\n            bp = new byte[dataLength];\n            System.arraycopy(inData, 1, bp, 0, dataLength);      \n            return bp;\n      } \n     //Get SecretKey object \n    public static SecretKey getSecretKey(String secretString) {\n            SecretKey myDesKey = null;\n            try {\n                //get bytes from key\n                byte [] keyBytes = secretString.getBytes();\n                //add padding to key to meet 24 bytes requirement\n                byte [] bytes = addPaddingToKey(keyBytes);\n                //Generate DES key \n                myDesKey = new SecretKeySpec(bytes,\"DESede\" );\n\n            }catch (Exception e) {\n                e.printStackTrace();    \n            }\n            return myDesKey;\n    }\n     //encrypt data\n     public static byte[] encrypt(byte[] text, String secretString) {\n         byte[] textEncrypted = null;\n            try {\n                 //Generate DES key \n                SecretKey myDesKey = getSecretKey(secretString);\n\n                Cipher desCipher;\n                // Create the cipher  for DES-EDE3\n                desCipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n\n                // Initialize the cipher for encryption\n                desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n\n                //Add padding to make it multiple of 8\n                text  = addPadding (text, 0 , text.length);\n\n                // encrypt the text\n                textEncrypted = desCipher.doFinal(text);\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n            return textEncrypted;\n\n          } \n     //Decrypt given encrypted bytes\n    public static byte[] decrypt (byte [] textEncrypted, String secretString){\n        byte[] textDecrypted = null;\n        try {            \n            //Generate DES key \n            SecretKey myDesKey = getSecretKey(secretString);\n\n            Cipher desCipher;\n            // Create the cipher  for DES-EDE3\n            desCipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n\n\n            // Initialize the same cipher for decryption\n            desCipher.init(Cipher.DECRYPT_MODE, myDesKey);\n\n            // Decrypt the text\n            textDecrypted = desCipher.doFinal(textEncrypted);\n\n            //remove padding which was added during encryption\n            textDecrypted  = removePadding (textDecrypted);\n\n        }catch (Exception e) {\n            e.printStackTrace();    \n        }\n        return textDecrypted;\n    } \n    public static void main(String[] argv) {        \n        try{\n            String secretString = \"hg34sdfg4ertertr\";\n            String plainTextString = \"{\\\"name\\\":\\\"Test\\\"}\";\n            byte[] plainText = plainTextString.getBytes();\n            //Encrypt given plain text\n            byte [] encryptedText = encrypt(plainText, secretString);\n            //Convert into hex\n\n            String hexStr = toString(encryptedText);\n            System.out.println(\"Encrypted String \"+hexStr);        \n            byte [] decryptedText = decrypt(encryptedText, secretString);\n            System.out.println(\" decrypted string \"+new String (decryptedText));\n\n        }catch(Exception e){\n            e.printStackTrace();\n        } \n\n    }\n}\n", "idx": 1459}
{"project": "cipher", "commit_id": "Snippet29679283_11746.java", "target": 0, "func": "public String DesDecryptPin(String pin, String encryptKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException {\n\n        String UNICODE_FORMAT = \"UTF8\";\n        String decryptedPinText = null;\n\n        byte[] hexConvert = hexStringtoByteArray(encryptKey);\n\n        SecretKey desKey = null;\n        byte[] tdesKey = new byte[24];\n        System.arraycopy(hexConvert, 0, tdesKey, 0,16);\n        System.arraycopy(hexConvert, 0, tdesKey, 0,8);\n\n        byte[] encryptKeyBytes = encryptKey.getBytes(UNICODE_FORMAT);\n\n        KeySpec desKeySpec = new DESedeKeySpec(tdesKey);\n        Cipher desCipher;\n        SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DESede\");\n        desCipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n        try {\n            desKey = skf.generateSecret(desKeySpec);\n        } catch (InvalidKeySpecException e) {\n            e.printStackTrace();\n        }\n\n        desCipher.init(Cipher.DECRYPT_MODE, desKey);\n\n       byte[] decryptPin = desCipher.doFinal(pin.getBytes());\n        decryptedPinText = new String(decryptPin, \"UTF-8\");\n        return decryptedPinText;\n    }\n", "idx": 1460}
{"project": "cipher", "commit_id": "Snippet9405077_33888.java", "target": 0, "func": "// I'm not author of generateKey method so I've no idea if is it correct\nprivate static byte[] generateKey(String pass) throws UnsupportedEncodingException, NoSuchAlgorithmException\n{\nMessageDigest sha = MessageDigest.getInstance(\"SHA-256\");\nbyte[] passBytes = pass.getBytes(\"ASCII\");\nbyte[] sha256Bytes = sha.digest(passBytes);\n\n\nbyte[] key = new byte[16];\nint j = 0;\nfor (int i = 0; i < sha256Bytes.length; i++)\n{\n    if (i % 2 == 0)\n    {\n    key[j] = sha256Bytes[i];\n    j++;\n    }\n}\nreturn key;\n}\n\npublic static Cipher getEncryptCipher(String pass)\n{\ntry\n{\n    SecretKeySpec skeySpec = new SecretKeySpec(generateKey(pass), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    return cipher;\n}\ncatch (Exception ex) // just for clarity\n{\n    Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);\n}\nreturn null;\n}\n\npublic static Cipher getDecryptCipher(String pass)\n{\ntry\n{\n    SecretKeySpec skeySpec = new SecretKeySpec(generateKey(pass), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    return cipher;\n}\ncatch (Exception ex) // just for clarity\n{\n    Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);\n}\nreturn null;\n}\n", "idx": 1461}
{"project": "cipher", "commit_id": "Snippet16523666_39456.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/PKCS5Padding\");", "idx": 1462}
{"project": "cipher", "commit_id": "Snippet10980080_35213.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class JavaCrypt\n{\n    public static void main(String[] args) throws Exception {\n\n           File f=new File(\"D:/a.txt\");\n           int ch;\n\n               StringBuffer strContent = new StringBuffer(\"\");\n               FileInputStream fin = null;\n               try {\n               fin = new FileInputStream(f);\n               while ((ch = fin.read()) != -1)\n                   strContent.append((char) ch);\n                   fin.close();\n                   } \n               catch (Exception e) {\n                   System.out.println(e);\n                   }\n\n               System.out.println(\"Original string: \" +strContent.toString()+\"\\n\");\n               // Get the KeyGenerator\n\n           KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n           kgen.init(128); // 192 and 256 bits may not be available\n\n\n           // Generate the secret key specs.\n           SecretKey skey = kgen.generateKey();\n           byte[] raw = skey.getEncoded();\n\n           SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n\n           // Instantiate the cipher\n\n           Cipher cipher = Cipher.getInstance(\"AES\");\n\n           cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n           byte[] encrypted = cipher.doFinal(strContent.toString().getBytes());\n\n           System.out.println(\"encrypted string: \" + encrypted.toString());\n\n           cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n           byte[] original =cipher.doFinal(encrypted);\n\n           String originalString = new String(original);\n           System.out.println(\"Original string: \" +originalString);\n         }\n}\n", "idx": 1463}
{"project": "cipher", "commit_id": "Snippet2100433_30219.java", "target": 0, "func": "public class AES {\n\n /**\n * Turns array of bytes into string\n *\n * @param buf   Array of bytes to convert to hex string\n * @return  Generated hex string\n */\n public static String asHex (byte buf[]) {\n  StringBuffer strbuf = new StringBuffer(buf.length * 2);\n  int i;\n\n  for (i = 0; i < buf.length; i++) {\n   if (((int) buf[i] & 0xff) < 0x10)\n    strbuf.append(\"0\");\n\n   strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n  }\n\n  return strbuf.toString();\n }\n\n public static void main(String[] args) throws Exception {\n\n   String message=\"This is just an example\";\n\n   // Get the KeyGenerator\n\n   KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n   kgen.init(128); // 192 and 256 bits may not be available\n\n\n   // Generate the secret key specs.\n   SecretKey skey = kgen.generateKey();\n   byte[] raw = skey.getEncoded();\n\n   SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n\n   // Instantiate the cipher\n\n   Cipher cipher = Cipher.getInstance(\"AES\");\n\n   cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n   byte[] encrypted =cipher.doFinal(\"welcome\".getBytes());\n   System.out.println(\"encrypted string: \" + asHex(encrypted));\n\n   cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n   byte[] original =\n     cipher.doFinal(encrypted);\n   String originalString = new String(original);\n   System.out.println(\"Original string: \" +\n     originalString + \" \" + asHex(original));\n  }\n}\n", "idx": 1464}
{"project": "cipher", "commit_id": "Snippet19803505_2515.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\n\nimport tw.com.januarytc.android.singularsdk.lib.JsLib;\nimport android.util.Log;\n\npublic class DESUtil\n{\n  private KeyGenerator keyGen=null;\n  private SecretKey sKey=null;\n  private Cipher desCip=null;\n\n  /**\n   * Init. DES utility class\n   * @return boolean\n   */\n  public boolean init()\n  {\n    boolean b=false;\n\n    try\n    {\n      keyGen=KeyGenerator.getInstance(\"DES\");\n      sKey=keyGen.generateKey();\n      desCip=Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n      b=true;\n    }\n    catch(Exception e)\n    {\n      Log.d(JsLib.TAG, \"Init DESUtil failed: \"+e.toString());\n      e.printStackTrace();\n      b=false;\n    }\n    return b;\n  }\n\n  /**\n   * Encrypt string with DES\n   * @param str - Original string\n   * @return java.lang.String DES encrypted string\n   * @throws IllegalStateException\n   */\n  public String encryptString(String str) throws IllegalStateException\n  {\n    if(keyGen==null || sKey==null || desCip==null){throw new IllegalStateException(\"DESUtil class has not been initialized.\");}\n    String ret=\"\";\n    try\n    {\n      desCip.init(Cipher.ENCRYPT_MODE, sKey);\n      ret=new String(desCip.doFinal(str.getBytes(\"UTF-8\")));\n    }\n    catch(Exception e)\n    {\n      e.printStackTrace();\n      ret=\"\";\n    }\n    return ret;\n  }\n\n  /**\n   * Decrypt string which encrypted by DES\n   * @param str - DES encrypted string\n   * @return java.lang.String Original string\n   * @throws IllegalStateException\n   */\n  public String decryptString(String strDes) throws IllegalStateException\n  {\n    if(keyGen==null || sKey==null || desCip==null){throw new IllegalStateException(\"DESUtil class has not been initialized.\");}\n    String ret=\"\";\n    try\n    {\n      desCip.init(Cipher.DECRYPT_MODE, sKey);\n      ret=new String(desCip.doFinal(strDes.getBytes(\"UTF-8\")));\n    }\n    catch(Exception e)\n    {\n      e.printStackTrace();\n      ret=\"\";\n    }\n    return ret;\n  }\n}\n", "idx": 1465}
{"project": "cipher", "commit_id": "Snippet10959103_35205.java", "target": 0, "func": " private void decryption()throws Exception {\n    // TODO Auto-generated method stub\n    String filePath2 = path + \"en/encVideo\";\n\n    String filePath3 = path + \"de/decVideo\";\n\n    File decfile = new File(filePath3);\n\n\n    if(!decfile.exists())\n        decfile.createNewFile();\n\n    File outfile = new File(filePath2);\n    int read;\n\n    FileInputStream encfis = new FileInputStream(outfile);\n    Cipher decipher = Cipher.getInstance(\"AES\");\n\n    decipher.init(Cipher.DECRYPT_MODE, skey);\n    FileOutputStream decfos = new FileOutputStream(decfile);\n    CipherOutputStream cos = new CipherOutputStream(decfos,decipher);   \n\n    while((read=encfis.read()) != -1)\n    {\n\n        cos.write(read);\n        cos.flush();\n    }\n    cos.close(); \n}\n", "idx": 1466}
{"project": "cipher", "commit_id": "Snippet1645852_30017.java", "target": 0, "func": "    public void testSymCypher(SecretKey k, String str)\n        throws BadPaddingException, IllegalBlockSizeException,\n        InvalidAlgorithmParameterException, InvalidKeyException,\n        NoSuchAlgorithmException, NoSuchPaddingException\n{\n    Cipher cip = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    cip.init(Cipher.ENCRYPT_MODE,k);\n    byte[] ciphered = cip.doFinal(str.getBytes());\n    byte iv[] = cip.getIV();\n\n    // printing the ciphered string\n    printHexadecimal(ciphered);\n\n    IvParameterSpec dps = new IvParameterSpec(iv);\n    cip.init(Cipher.DECRYPT_MODE,k,dps);\n    byte[] deciphered = cip.doFinal(ciphered);\n\n    // printing the deciphered string\n    printHexadecimal(deciphered);\n}\n", "idx": 1467}
{"project": "cipher", "commit_id": "Snippet11071975_35292.java", "target": 0, "func": "public static void main(String[] args) throws Exception {\n    encrypt(\"samplePassword\", new FileInputStream(\"file.txt\"), new FileOutputStream(\"enc-file.txt\"));\n    decrypt(\"samplePassword\", new FileInputStream(\"enc-file.txt\"), new FileOutputStream(\"file-from-enc.txt\"));\n}\n\npublic static void encrypt(String password, InputStream is, OutputStream os) throws Exception {\n\n    SecretKeySpec keySpec = new SecretKeySpec(password(password), \"TripleDES\");\n    Cipher cipher = Cipher.getInstance(\"TripleDES\");\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n    byte[] buf = new byte[8096];\n    os = new CipherOutputStream(os, cipher);\n    int numRead = 0;\n    while ((numRead = is.read(buf)) >= 0) {\n        os.write(buf, 0, numRead);\n    }\n    os.close();\n}\n\npublic static void decrypt(String password, InputStream is, OutputStream os) throws Exception {\n\n    SecretKeySpec keySpec = new SecretKeySpec(password(password), \"TripleDES\");\n    Cipher cipher = Cipher.getInstance(\"TripleDES\");\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n\n    byte[] buf = new byte[8096];\n    CipherInputStream cis = new CipherInputStream(is, cipher);\n    int numRead = 0;\n    while ((numRead = cis.read(buf)) >= 0) {\n        os.write(buf, 0, numRead);\n    }\n    cis.close();\n    is.close();\n    os.close();\n}\n\nprivate static byte[] password(String password) {\n\n    byte[] baseBytes = { (byte) 0x38, (byte) 0x5C, (byte) 0x8, (byte) 0x4C, (byte) 0x75, (byte) 0x77, (byte) 0x5B, (byte) 0x43,\n            (byte) 0x1C, (byte) 0x1B, (byte) 0x38, (byte) 0x6A, (byte) 0x5, (byte) 0x0E, (byte) 0x47, (byte) 0x3F, (byte) 0x31,\n            (byte) 0xF, (byte) 0xC, (byte) 0x76, (byte) 0x53, (byte) 0x67, (byte) 0x32, (byte) 0x42 };\n    byte[] bytes = password.getBytes();\n    int i = bytes.length;\n    bytes = Arrays.copyOf(bytes, 24);\n    if(i < 24){\n        for(;i<24; i++){\n            bytes[i] = baseBytes[i];\n        }\n    }\n    return bytes;\n}\n", "idx": 1468}
{"project": "cipher", "commit_id": "Snippet6164414_31977.java", "target": 0, "func": "// generate key pair\n\nKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\nkeyPairGenerator.initialize(1024);\nKeyPair keyPair = keyPairGenerator.genKeyPair();\n\n// extract the encoded private key, this is an unencrypted PKCS#8 private key\nbyte[] encodedprivkey = keyPair.getPrivate().getEncoded();\n\n// We must use a PasswordBasedEncryption algorithm in order to encrypt the private key, you may use any common algorithm supported by openssl, you can check them in the openssl documentation http://www.openssl.org/docs/apps/pkcs8.html\nString MYPBEALG = \"PBEWithSHA1AndDESede\";\nString password = \"pleaseChangeit!\";\n\nint count = 20;// hash iteration count\nSecureRandom random = new SecureRandom();\nbyte[] salt = new byte[8];\nrandom.nextBytes(salt);\n\n// Create PBE parameter set\nPBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, count);\nPBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());\nSecretKeyFactory keyFac = SecretKeyFactory.getInstance(MYPBEALG);\nSecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n\nCipher pbeCipher = Cipher.getInstance(MYPBEALG);\n\n// Initialize PBE Cipher with key and parameters\npbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n\n// Encrypt the encoded Private Key with the PBE key\nbyte[] ciphertext = pbeCipher.doFinal(encodedprivkey);\n\n// Now construct  PKCS #8 EncryptedPrivateKeyInfo object\nAlgorithmParameters algparms = AlgorithmParameters.getInstance(MYPBEALG);\nalgparms.init(pbeParamSpec);\nEncryptedPrivateKeyInfo encinfo = new EncryptedPrivateKeyInfo(algparms, ciphertext);\n\n// and here we have it! a DER encoded PKCS#8 encrypted key!\nbyte[] encryptedPkcs8 = encinfo.getEncoded();\n", "idx": 1469}
{"project": "cipher", "commit_id": "Snippet20897662_3503.java", "target": 0, "func": "import java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n\n    public class SimpleCrypto {\n\n            public static String encrypt(String seed, String cleartext) throws Exception {\n                    byte[] rawKey = getRawKey(seed.getBytes());\n                    byte[] result = encrypt(rawKey, cleartext.getBytes());\n                    return toHex(result);\n            }\n\n            public static String decrypt(String seed, String encrypted) throws Exception {\n                    byte[] rawKey = getRawKey(seed.getBytes());\n                    byte[] enc = toByte(encrypted);\n                    byte[] result = decrypt(rawKey, enc);\n                    return new String(result);\n            }\n\n            private static byte[] getRawKey(byte[] seed) throws Exception {\n                    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n                    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n                    sr.setSeed(seed);\n                kgen.init(128, sr); // 192 and 256 bits may not be available\n                SecretKey skey = kgen.generateKey();\n                byte[] raw = skey.getEncoded();\n                return raw;\n            }\n\n\n            private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n                SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n                    Cipher cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n                byte[] encrypted = cipher.doFinal(clear);\n                    return encrypted;\n            }\n\n            private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n                SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n                    Cipher cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n                byte[] decrypted = cipher.doFinal(encrypted);\n                    return decrypted;\n            }\n\n            public static String toHex(String txt) {\n                    return toHex(txt.getBytes());\n            }\n            public static String fromHex(String hex) {\n                    return new String(toByte(hex));\n            }\n\n            public static byte[] toByte(String hexString) {\n                    int len = hexString.length()/2;\n                    byte[] result = new byte[len];\n                    for (int i = 0; i < len; i++)\n                            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue(); //2 * i, 2 * i + 2\n                    return result;\n            }\n\n            public static String toHex(byte[] buf) {\n                    if (buf == null)\n                            return \"\";\n                    StringBuffer result = new StringBuffer(2*buf.length);\n                    for (int i = 0; i < buf.length; i++) {\n                            appendHex(result, buf[i]);\n                    }\n                    return result.toString();\n            }\n            private final static String HEX = \"0123456789ABCDEF\";\n            private static void appendHex(StringBuffer sb, byte b) {\n                    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n            }\n\n    }\n", "idx": 1470}
{"project": "cipher", "commit_id": "Snippet7900673_31848.java", "target": 0, "func": "public class DESHelper {\n\n    private String keyPass = \"KeyPass\";\n    private String keyAlias = \"keyAlias\";\n    private String keyStorePass=\"keyStorePass\";\n    private KeyStore ks = null;\n    private static final String KEYSTORE_PATH = \"keystore/mykeystore.keystore\";\n    private static final String KEYSTORE_TYPE = \"jceks\";    \n    protected static String DES_KEY = \"pin\";\n    private Map<String, byte[]> mKeys = new HashMap<String, byte[]>();\n\n    public String decrypt(byte[] message, String salt) throws Exception {\n\n        SecretKey secretKey = getSecretKey();\n\n        if (secretKey == null) \n        {\n            throw new GeneralSecurityException(\"No secret key\");\n        }\n\n        final IvParameterSpec iv = new IvParameterSpec(generateIV(keyAlias, salt, DES_KEY));\n        final Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        decipher.init(Cipher.DECRYPT_MODE, secretKey, iv);\n\n        final byte[] plainText = decipher.doFinal(message);\n\n        return new String(plainText, \"UTF-8\");\n    }\n\n    public String encrypt(String value, String salt) {\n\n        byte ciphertext[][] = new byte[2][];\n\n        try\n        {           \n            SecretKey secretKey = getSecretKey();\n\n            if (secretKey == null) \n            {\n                throw new GeneralSecurityException(\"No secret key\");\n            }\n\n            Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n            byte iv[] = generateIV(keyAlias, salt, DES_KEY);\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(iv));\n            ciphertext[0] = cipher.update(stringToByteArray(value));\n            ciphertext[1] = cipher.doFinal(generateMAC(keyAlias, salt, DES_KEY, value));\n        }\n        catch (GeneralSecurityException gse) \n        {\n            gse.printStackTrace();\n            return null;\n        }\n\n        if (ciphertext[0] == null) \n        {\n            ciphertext[0] = new byte[0];\n        }\n\n        if (ciphertext[1] == null) \n        {\n            ciphertext[1] = new byte[0];\n        }\n\n        byte ct[] = new byte[ciphertext[0].length + ciphertext[1].length];\n        System.arraycopy(ciphertext[0], 0, ct, 0, ciphertext[0].length);\n        System.arraycopy(ciphertext[1], 0, ct, ciphertext[0].length, ciphertext[1].length);\n\n        // Convert encrypted bytes to a String\n        StringBuffer result = new StringBuffer(2 * ct.length + 1);\n        result.append(\"b\");           // first byte indicates encoding method.\n        Base64 enc = new Base64();\n        result.append(enc.encode(ct));\n\n        return result.toString();\n    }\n\n    /**\n     * \n     * @return\n     * @throws InvalidKeyException\n     * @throws NoSuchAlgorithmException\n     * @throws GeneralSecurityException \n     */\n    public SecretKey getSecretKey() throws InvalidKeyException, NoSuchAlgorithmException, GeneralSecurityException{\n\n        byte des_key[];\n        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(\"DESede\") ;\n\n        if (secretKeyFactory == null) \n        {\n            throw new GeneralSecurityException(\"No DESede factory\");\n        }\n\n        try\n        {\n            des_key = getKey(keyAlias);\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n            return null;\n        }\n\n        SecretKey secretKey = secretKeyFactory.generateSecret(new DESedeKeySpec(des_key));\n\n        return secretKey;\n    }\n\n    /**\n     * Generate MAC\n     */\n    protected byte[] generateMAC(String type,String salt,String key,String value) {\n        try \n        {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n\n            if (type!=null) {\n                md.update(stringToByteArray(type));\n            }\n\n            if (salt!=null) {\n                md.update(stringToByteArray(salt));\n            }\n\n            if (key!=null) {\n                md.update(stringToByteArray(key));\n            }\n\n            if (value!=null) {\n                md.update(stringToByteArray(value));\n            }\n\n            byte[] sha = md.digest();\n            byte[] mac = new byte[4];\n\n            for (int scan=0;scan<sha.length;scan++) \n            {\n                mac[scan%4]=(byte)(mac[scan%4]^sha[scan]);\n            }\n\n            return mac;\n        } \n        catch (NoSuchAlgorithmException ex) \n        {\n            throw new IllegalStateException(ex.getMessage());\n        }\n    }\n\n    protected byte[] generateIV(String type,String salt,String key) {\n        try \n        {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n\n            if (type!=null) {\n                md.update(stringToByteArray(type));\n            }\n\n            if (salt!=null) {\n                md.update(stringToByteArray(salt));\n            }\n\n            if (key!=null) {\n                md.update(stringToByteArray(key));\n            }\n\n            byte[] sha = md.digest();\n            byte[] iv = new byte[8];\n\n            for (int scan=0;scan<sha.length;scan++) \n            {\n                iv[scan%8]=(byte)(iv[scan%8]^sha[scan]);\n            }\n\n            return iv;\n        } \n        catch (NoSuchAlgorithmException ex) \n        {\n            throw new IllegalStateException(ex.getMessage());\n        }\n    }\n\n    protected byte[] getKey(String alias) throws GeneralSecurityException, IOException {\n\n        synchronized (mKeys) \n        {\n            byte k[] = mKeys.get(alias);\n            if (k != null) {\n                return k;\n            }\n        }\n\n        byte key[] = getKeystoreKey(alias, 192);\n\n        if (key == null) \n        {\n            return null;\n        }\n\n        if (key.length != 24) {\n            return null;\n        }\n\n        synchronized (mKeys) \n        {\n            mKeys.put(alias, key);\n            return key;\n        }\n    }\n\n    protected byte[] stringToByteArray(String aString) {\n        try \n        {\n            return aString.getBytes(\"UTF-8\");\n        } \n        catch (java.io.UnsupportedEncodingException ex) \n        {\n            System.out.println(\"Exception in stringToByteArray \" + ex.getMessage());\n            return null;\n        }\n    }\n\n    /**\n    * Returns String From An Array Of Bytes\n    */\n    private String bytes2String(byte[] bytes) {\n\n        StringBuffer stringBuffer = new StringBuffer();\n\n        for (int i = 0; i <= bytes.length; i++) \n        {\n            stringBuffer.append((char) bytes[i]);\n        }\n\n        return stringBuffer.toString();\n\n    }\n\n\n    protected byte[] getKeystoreKey(String aKeyName,int size) throws GeneralSecurityException, IOException {\n\n        Key key = getKeystore().getKey(aKeyName, keyPass.toCharArray());\n\n        if (key==null) \n        {\n            System.out.println(\"KeyStore key \"+aKeyName+\" not found\");\n            return null;\n        }\n\n        byte keyBytes[] = key.getEncoded();\n\n        if (keyBytes.length != (size/8) ) \n        {\n            System.out.println(\"KeyStore key \"+aKeyName+\" invalid length. Expected:\"+size+\" was: \"+(keyBytes.length*8));\n            return null;\n        }\n\n        return keyBytes;\n    }\n\n    protected KeyStore getKeystore() throws GeneralSecurityException, IOException {\n        if ( ks == null )\n        {\n            ks = KeyStore.getInstance(KEYSTORE_TYPE);\n            char[] password = keyStorePass.toCharArray();\n\n            if (password == null) \n            {\n                System.out.println(\"Couldn't get keystore password from config\");\n            }\n\n            // get the keystore as a resource\n            InputStream is = getClass().getClassLoader().getResourceAsStream(KEYSTORE_PATH);\n\n            try\n            {\n                ks.load(is, password);\n            }\n            finally\n            {\n                if (is != null)\n                {\n                    is.close();\n                }\n            }\n        }\n\n        return ks;\n    }\n\n    public class Base64 {\n        private char sBase64[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".toCharArray();\n\n        /** Creates a new instance of Base64 */\n        public Base64()\n        {\n        }\n\n        public byte[] decode(String aSource)\n        {\n            int aSource_length=aSource.length();\n\n            while (aSource_length>0 && aSource.charAt(aSource_length-1)=='=') aSource_length--;\n\n            if (aSource_length%4==1) \n            {\n                return null;\n            }\n\n            int len = (aSource_length/4)*3 + aSource_length%4 - (aSource_length%4==0?0:1);\n            byte result[] = new byte[len];\n\n            int o_ofs=0;\n            int i_ofs=0;\n\n            while (i_ofs<aSource_length) \n            {\n                int i24=0;\n                for (int bscan=0;bscan<4;bscan++) \n                {\n                    if (i_ofs<aSource_length) \n                    {\n                        int decode = decode(aSource.charAt(i_ofs));\n                        if (decode==-1) return null;\n                        i24=(i24<<6)+decode;\n                    } \n                    else \n                    {\n                        i24=i24<<6;\n                    }\n\n                    i_ofs++;\n                }\n\n                if (o_ofs<len) \n                {\n                    result[o_ofs++]=(byte)(i24>>16);\n                }\n\n                if (o_ofs<len) \n                {\n                    result[o_ofs++]=(byte)(i24>>8);\n                }\n\n                if (o_ofs<len) \n                {\n                    result[o_ofs++]=(byte)(i24);\n                }\n            }\n            return result;\n        }\n\n        private int decode(char c)\n        {\n            if (c>='A' && c<='Z') \n            {\n                return c-'A';\n            }\n\n            if (c>='a' && c<='z') \n            {\n                return c-'a'+26;\n            }\n\n            if (c>='0' && c<='9') \n            {\n                return c-'0'+52;\n            }\n\n            if (c=='+') \n            {\n                return 62;\n            }\n\n            if (c=='/') \n            {\n                return 63;\n            }\n\n            return -1;\n        }\n\n        public String encode(byte[] aSource)\n        {\n            int result_length = aSource.length*4/3 + (aSource.length%3==0?0:1);\n\n            char result[]=new char[ ((aSource.length+2)/3)*4 ];\n\n            int o_ofs=0;\n            int i_ofs=0;\n\n            while (i_ofs<aSource.length) {\n\n                int i24=0;\n                for (int bscan=0;bscan<3;bscan++) {\n                    if (i_ofs>=aSource.length) {\n                        i24=i24<<8;\n                    } \n                    else {\n                        i24=(i24<<8)+(aSource[i_ofs]&0xff);\n                    }\n\n                    i_ofs++;\n                }\n\n                if (o_ofs<result_length) result[o_ofs++]=sBase64[(i24>>18)&63];\n                if (o_ofs<result_length) result[o_ofs++]=sBase64[(i24>>12)&63];\n                if (o_ofs<result_length) result[o_ofs++]=sBase64[(i24>>6)&63];\n                if (o_ofs<result_length) result[o_ofs++]=sBase64[(i24)&63];\n            }\n            while (o_ofs<result.length) result[o_ofs++]='=';\n            return new String(result);\n        }\n    }\n\n}\n", "idx": 1471}
{"project": "cipher", "commit_id": "Snippet23542479_5903.java", "target": 0, "func": "public String encrypt(String data) {\n    String Key = \"My_PRIVATE_KEY\";\n    try {\n        byte[] KeyData = Key.getBytes();\n        SecretKeySpec KS = new SecretKeySpec(KeyData, \"Blowfish\");\n        Cipher cipher = Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.ENCRYPT_MODE, KS);\n        return bytesToHex(cipher.doFinal(data.getBytes()));\n\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    return null;\n}\n\nprivate String bytesToHex(byte[] data) {\n    if (data == null) {\n        return null;\n    }\n\n    int len = data.length;\n    String str = \"\";\n    for (int i = 0; i < len; i++) {\n        if ((data[i] & 0xFF) < 16) {\n            str = str + \"0\" + java.lang.Integer.toHexString(data[i]&0xFF);\n        }\n        else {\n            str = str + java.lang.Integer.toHexString(data[i]&0xFF);\n        }\n    }\n    return str;\n}\n", "idx": 1472}
{"project": "cipher", "commit_id": "Snippet26692337_8821.java", "target": 0, "func": "/**\n * @param args the command line arguments\n */\npublic static void main(String[] args) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, FileNotFoundException, ClassNotFoundException {\n    // TODO code application logic here\n\n    cifrarFicheiro();\n    decifrarFicheiro();\n\n}\npublic static void cifrarFicheiro() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{\n    File t1 = new File(\"t1.txt\");\n    FileInputStream Fin= new FileInputStream(t1);\n    byte[] texto= new byte[(int)t1.length()];\n    Fin.read(texto);\n    Fin.close();\n\n    SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n    Cipher cifra = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    cifra.init(Cipher.ENCRYPT_MODE, key);\n    byte[] chave = key.getEncoded();\n    byte[] texto_cifrado = cifra.doFinal(texto);\n\n    FileOutputStream fout = new FileOutputStream(\"t1_t.txt\");\n    ObjectOutputStream obj = new ObjectOutputStream(fout);\n    obj.writeObject(texto_cifrado);\n    obj.writeObject(chave);\n    obj.close();\n    fout.close();\n\n}\npublic static void decifrarFicheiro() throws FileNotFoundException, IOException, ClassNotFoundException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{\n    FileInputStream fin = new FileInputStream(\"t1_t.txt\");\n    ObjectInputStream obj = new ObjectInputStream(fin);\n\n    byte[] texto = (byte[]) obj.readObject();\n    byte[] chave = (byte[]) obj.readObject();\n    obj.close();\n\n    FileOutputStream fout = new FileOutputStream(\"t1_chave.txt\");\n    ObjectOutputStream obj1 = new ObjectOutputStream(fout);\n    obj1.writeObject(chave);\n\n    FileOutputStream fout1 = new FileOutputStream(\"t1_texto.txt\");\n    ObjectOutputStream obj2 = new ObjectOutputStream(fout1);\n    obj2.writeObject(texto);\n\n    SecretKey sks = new SecretKeySpec(chave, \"DES\");\n    Cipher c= Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    c.init(Cipher.DECRYPT_MODE,sks);\n    byte[] aux=c.doFinal(texto);\n\n    FileOutputStream fout2 = new FileOutputStream(\"t1_final.txt\");\n    fout2.write(aux);\n}\n", "idx": 1473}
{"project": "cipher", "commit_id": "Snippet34682894_16670.java", "target": 0, "func": "import org.apache.commons.codec.binary.Base64;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.security.Key;\nimport java.security.SecureRandom;\nimport java.util.Scanner;\n\npublic class Test {\n\nprivate static String publicName = null;\nprivate static String privateName = null;\n\npublic static void main(String[] args) throws Exception {\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Choose an option: \\n(1) Decrypt \\n(2) Encrypt \\n(3) Generate Keypair\");\n    int choice = scanner.nextInt();\n    if(choice == 1) decrypt();\n    else if(choice == 2) encrypt();\n    else if(choice == 3) makeKeypair();\n}\n\nprivate static void makeKeypair() throws Exception {\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Enter the name of your public key: \");\n    publicName = scanner.nextLine() + \".key\";\n    System.out.println(\"Enter the name of your private key: \");\n    privateName = scanner.nextLine() + \".key\";\n    KeyMaker keyMaker = new KeyMaker(publicName, privateName);\n    keyMaker.generateKeys();\n}\n\npublic static void encrypt() throws Exception {\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Enter the text you want to encrypt: \");\n    String toEncrypt = scanner.nextLine();\n    System.out.println(\"Enter the name of the public key you want to use: \");\n    publicName = scanner.nextLine() + \".key\";\n    Encrypter encrypter = new Encrypter(publicName);\n\n    Key key = generateKey();\n    String encryptedWithAES = encryptAES(toEncrypt, key);\n\n    String encodedKey = java.util.Base64.getEncoder().encodeToString(key.getEncoded());\n    String encryptedKey = encrypter.rsaEncrypt(encodedKey);\n    String finalOutput = encryptedKey + encryptedWithAES;\n\n    System.out.println(\"Enter the name of the file encrypted file which will be created: \");\n    String fileName = scanner.nextLine();\n    PrintWriter out = new PrintWriter(fileName + \".txt\");\n    out.println(finalOutput);\n    out.close();\n\n    System.out.println(\"DONE - saved as: \" + fileName + \".txt\");\n    scanner.close();\n}\n\npublic static void decrypt() throws Exception {\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Enter the name of your encrypted file: \");\n    String fileName = scanner.nextLine() + \".txt\";\n\n    String givenInput = null;\n    try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            givenInput = givenInput + line;\n        }\n    }\n    assert givenInput != null;\n    String encryptedKey = givenInput.substring(0,172);\n    String encryptedWithAES = givenInput.replace(encryptedKey, \"\");\n\n    System.out.println(\"Enter the name of your private key: \");\n    privateName = scanner.nextLine() + \".key\";\n    Decrypter decrypter = new Decrypter(privateName);\n    String decryptedKey = decrypter.rsaDecrypt(encryptedKey);\n\n    byte[] decodedKey = java.util.Base64.getDecoder().decode(decryptedKey);\n    Key originalKey = new SecretKeySpec(decodedKey, \"AES\");\n\n    String decryptedWithAES = decryptAES(encryptedWithAES, originalKey);\n    System.out.println(decryptedWithAES);\n    scanner.close();\n}\n\npublic static Key generateKey() throws Exception {\n    KeyGenerator kg = KeyGenerator.getInstance(\"AES\");\n    SecureRandom random = new SecureRandom();\n    kg.init(random);\n    return kg.generateKey();\n}\n\nprivate static String encryptAES(String message, Key key) throws Exception {\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE,key);\n\n    byte[] stringBytes = message.getBytes();\n    byte[] raw = cipher.doFinal(stringBytes);\n    return Base64.encodeBase64String(raw);\n}\n\npublic static String decryptAES(String encrypted, Key key) throws Exception       {\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, key);\n\n    byte[] raw = Base64.decodeBase64(encrypted);\n    byte[] stringBytes = cipher.doFinal(raw);\n    return new String(stringBytes, \"UTF8\");\n}\n}\n", "idx": 1474}
{"project": "cipher", "commit_id": "Snippet42755334_24793.java", "target": 0, "func": "    public String decrypt(String enc) throws Exception\n    {\n        Key key = k;\n        Cipher crypt = Cipher.getInstance(\"AES\");\n        crypt.init(Cipher.DECRYPT_MODE,key);\n        byte[] decrypt = crypt.doFinal(enc.getBytes());\n        return new String(decrypt);\n    }\n", "idx": 1475}
{"project": "cipher", "commit_id": "Snippet13103725_36714.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\npublic class EncryptionExample {\n\n  public static void main(String[] args) throws Exception {\n    final String keyHex = \"00000000000000000000000000123456\";\n    final String plaintextHex = \"00000000000000000000000000000000\";\n\n    SecretKey key = new SecretKeySpec(DatatypeConverter\n        .parseHexBinary(keyHex), \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n\n    byte[] result = cipher.doFinal(DatatypeConverter\n        .parseHexBinary(plaintextHex));\n\n    System.out.println(DatatypeConverter.printHexBinary(result));\n  }\n}\n", "idx": 1476}
{"project": "cipher", "commit_id": "Snippet47051259_27537.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\n", "idx": 1477}
{"project": "cipher", "commit_id": "Snippet29030035_11099.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/PKCS5Padding\");", "idx": 1478}
{"project": "cipher", "commit_id": "Snippet20835808_3454.java", "target": 0, "func": "public static byte[] decrypt3DESCBC(byte[] keyBytes, byte[] ivBytes,\n        byte[] dataBytes) {\n    try {\n        AlgorithmParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n        SecretKeySpec newKey = new SecretKeySpec(keyBytes, \"DESede\");\n        Cipher cipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE, newKey, ivSpec); // Causes Exception\n        return cipher.doFinal(dataBytes);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 1479}
{"project": "cipher", "commit_id": "Snippet9895299_34313.java", "target": 0, "func": "public class DesEncrypter {\nCipher ecipher;\nCipher dcipher;\n\nDesEncrypter(SecretKey key) {\n    // Create an 8-byte initialization vector\n    byte[] iv = new byte[]{\n        (byte)0x8E, 0x12, 0x39, (byte)0x9C,\n        0x07, 0x72, 0x6F, 0x5A\n    };\n    AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);\n    try {\n        ecipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        dcipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        // CBC requires an initialization vector\n        ecipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n        dcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n    } catch (java.security.InvalidAlgorithmParameterException e) {\n    } catch (javax.crypto.NoSuchPaddingException e) {\n    } catch (java.security.NoSuchAlgorithmException e) {\n    } catch (java.security.InvalidKeyException e) {\n    }\n}\n\n// Buffer used to transport the bytes from one stream to another\nbyte[] buf = new byte[1024];\n\npublic void encrypt(InputStream in, OutputStream out) {\n    try {\n        // Bytes written to out will be encrypted\n       AppendableOutputStream out_append = new AppendableOutputStream(out);\n\n       OutputStream out_c = new CipherOutputStream(out_append, ecipher);\n\n        // Read in the cleartext bytes and write to out to encrypt\n        int numRead = 0;\n        int count = 0;\n        int max = 1024;\n        boolean first = true;\n\n        while ((numRead = in.read(buf, 0, max)) > 0) {                 \n            System.out.println(\"running Total: \" + count);\n            count += numRead;\n            // if this read puts as at less than a meg, encrypt\n            if(count <= 1024*1024){\n                System.out.println(\"encrypted \" + numRead + \" of \" + max +\" bytes : total \" + count);\n                out_c.write(buf, 0, numRead);\n                // last encryption pass, close buffer and fix max\n                if(count == 1024*1024){\n                    // fix reading 1k in case max was decreased\n                    max = 1024;\n                    out_c.close();\n                }\n                // if next read will go over a meg, read less than 1k\n                else if(count + max > 1024*1024)\n                    max = 1024*1024 - count;\n            }\n            // past the first meg, don't encrypt\n            else{\n                System.out.println(\"processed \" + numRead + \" of \" + max +\" bytes : total \" + count);\n                out.write(buf, 0, numRead);\n            }\n\n        }\n        out.close();\n\n    } catch (java.io.IOException e) {}\n\n}\n\n// Movies encrypt only 1 MB 128 passes.\n\npublic void decrypt(InputStream in, OutputStream out) {\n    try {\n        // Bytes read from in will be decrypted\n        InputStream in_c = new CipherInputStream(in, dcipher);\n\n        // Read in the decrypted bytes and write the cleartext to out\n        int numRead = 0;\n        int count = 0;\n        int max = 1024;\n\n        while ((numRead = in_c.read(buf, 0, max)) > 0) {\n            count += numRead;\n            System.out.println(\"decrypted \" + numRead + \" of \" + max +\" bytes : total \" + count);\n            out.write(buf, 0, numRead);\n            if(count + max > 1024*1024){\n                max = 1024*1024 - count;\n            }\n            if(count == 1024*1024)\n                max = 0;\n        }\n\n        //in.skip(count);\n        int n = 0;\n        while((numRead = in.read(buf)) > 0 && n < 10){\n        count += numRead;\n        System.out.println(\"processed \" + numRead + \" of 1024 bytes : total \" + count);\n            out.write(buf,0,numRead);\n            //System.out.println(\"buf\"+buf.length  +\" numered\" + numRead+ \" n\"+n);\n            // If i look at the file after anything under n < 51 the file  doesn't change.\n            n++;\n\n        }\n        out.flush();\n        out.close();\n    } catch (java.io.IOException e) {\n        System.out.println(\"AHHHHHHHH!!!!!!\");\n    }\n}\n", "idx": 1480}
{"project": "cipher", "commit_id": "Snippet21282958_3821.java", "target": 0, "func": "    InputStream is = new FileInputStream(...); //Input stream\n\n    SecretKeySpec skey = new SecretKeySpec(Hex.decodeHex(key.toCharArray()), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, skey); \n    FileOutputStream fileOuputStream = new FileOutputStream(SD_CARD_PATH+ \"/\" + \"abcd.db\"); \n    CipherOutputStream cos = new CipherOutputStream(fileOuputStream, cipher);\n\n    //Now read from input and write to output using your favorite utilities library\n    //Guava and Apache Commons IO are good examples.\n    FooUtils.copy(is, cos);\n    //Remember to close streams if the previous call didn't (preferably in a finally block)\n", "idx": 1481}
{"project": "cipher", "commit_id": "Snippet38352275_20308.java", "target": 0, "func": "public static String encrypt(String accessToken) throws Exception {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        String merchantKey = \"11111111111111111111\";\n        String st = StringUtils.substring(merchantKey, 0, 16);\n        System.out.println(st);\n        Key secretKey = new SecretKeySpec(st.getBytes(), \"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] encryptedByte = cipher.doFinal(accessToken.getBytes());\n\n        // convert the byte to hex format\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < encryptedByte.length; i++) {\n            sb.append(Integer.toString((encryptedByte[i] & 0xff) + 0x100, 16).substring(1));\n        }\n        return sb.toString();\n    }\n", "idx": 1482}
{"project": "cipher", "commit_id": "Snippet45004207_27122.java", "target": 0, "func": "public String encrypt(String plainTextPassword){\nString encrypted = \"\";\ntry{\nDESKeySpec keySpec = new DESKeySpec(\"qwertykey\".getBytes());\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\nSecretKey key = keyFactory.generateSecret(keySpec);\nbyte[] cleartext = plainTextPassword.getBytes();\n\nCipher cipher = Cipher.getInstance(\"DES\"); // cipher is not thread safe\ncipher.init(Cipher.ENCRYPT_MODE, key);\nencrypted = Base64.encodeToString(cipher.doFinal(cleartext),Base64.DEFAULT);\n\n}catch (Exception e){\n\n}\nreturn encrypted;\n}\n", "idx": 1483}
{"project": "cipher", "commit_id": "Snippet12475859_36290.java", "target": 0, "func": "import java.util.StringTokenizer;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class AES {\n    public static String asHex(byte[] buf) {\n        StringBuffer strbuf = new StringBuffer(buf.length * 2);\n        int i;\n\n        for (i = 0; i < buf.length; i++) {\n            if (((int)buf[i] & 0xff) < 0x10)\n                strbuf.append(\"0\");\n            strbuf.append(Long.toString((int)buf[i] & 0xff, 16));\n        }\n\n        return strbuf.toString();\n    }\n\n    public static void main(String[] args) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        kgen.init(128); // 192 and 256 bits may not be available\n        // Generate the secret key specs.\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        String target = \"This is just an example\";\n        StringTokenizer token = new StringTokenizer(target);\n        while(token.hasMoreTokens()) {\n            String temp = token.nextToken();\n            byte[] encrypted = cipher.doFinal((args.length == 0 ?  temp : args[0]).getBytes());\n            System.out.println(asHex(encrypted) + \" \");\n        }\n    }\n}\n", "idx": 1484}
{"project": "cipher", "commit_id": "Snippet4895773_31372.java", "target": 0, "func": "public class EncryptDecryptUtil {\n    /** Encryption Cipher */\n    private static Cipher ecipher;\n    /** Decription Cipher */\n    private static Cipher dcipher;\n\n    private static Logger logger = Logger.getLogger(EncryptDecryptUtil.class);\n\n    /**\n     * Constructor used to create this object. Responsible for setting and initializing this object's encrypter and\n     * decrypter Cipher instances given a Secret Key and algorithm.\n     * \n     * @param key Secret Key used to initialize both the encrypter and decrypter instances.\n     * @param algorithm Which algorithm to use for creating the encrypter and decrypter instances.\n     */\n    public EncryptDecryptUtil(SecretKey key, String algorithm) {\n        Security.insertProviderAt(new org.bouncycastle.jce.provider.BouncyCastleProvider(), 1);\n        try {\n            ecipher = Cipher.getInstance(algorithm);\n            dcipher = Cipher.getInstance(algorithm);\n            ecipher.init(Cipher.ENCRYPT_MODE, key);\n            dcipher.init(Cipher.DECRYPT_MODE, key);\n        } catch (NoSuchPaddingException e) {\n            System.out.println(\"EXCEPTION: NoSuchPaddingException\");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"EXCEPTION: NoSuchAlgorithmException\");\n        } catch (InvalidKeyException e) {\n            System.out.println(\"EXCEPTION: InvalidKeyException\");\n        }\n    }\n\n    /**\n     * Constructor used to create this object. Responsible for setting and initializing this object's encrypter and\n     * decrypter Chipher instances given a Pass Phrase and algorithm.\n     * \n     * @param passPhrase Pass Phrase used to initialize both the encrypter and decrypter instances.\n     */\n    public EncryptDecryptUtil(String passPhrase) {\n        Security.insertProviderAt(new org.bouncycastle.jce.provider.BouncyCastleProvider(), 1);\n        // 8-bytes Salt\n        byte[] salt = { (byte) 0xB9, (byte) 0x8B, (byte) 0xD8, (byte) 0x31, (byte) 0x55, (byte) 0x24, (byte) 0xF3, (byte) 0x13 };\n\n        // Iteration count\n        int iterationCount = 19;\n\n        try {\n            // Generate the secret key associated to the passphrase.\n            KeySpec keySpec = new PBEKeySpec(passPhrase.toCharArray(), salt, iterationCount);\n            SecretKey key = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\").generateSecret(keySpec);\n\n            // Get instance of the cipher\n            ecipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n            dcipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n\n            // Prepare the parameters to the cipthers\n            AlgorithmParameterSpec paramSpec = new PBEParameterSpec(salt, iterationCount);\n\n            ecipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n            dcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n\n        } catch (InvalidAlgorithmParameterException e) {\n            logger.error(\"during encrypter instantiation\",e);\n        } catch (InvalidKeySpecException e) {\n            logger.error(\"during encrypter instantiation\",e);\n        } catch (NoSuchPaddingException e) {\n            logger.error(\"during encrypter instantiation\",e);\n        } catch (NoSuchAlgorithmException e) {\n            logger.error(\"during encrypter instantiation\",e);\n        } catch (InvalidKeyException e) {\n            logger.error(\"during encrypter instantiation\",e);\n        }\n    }\n\n    /**\n     * Takes a single String as an argument and returns an Encrypted version of that String.\n     * \n     * @param str String to be encrypted\n     * @return <code>String</code> Encrypted version of the provided String\n     */\n    public String encrypt(String str) {\n        try {\n            // Encode the string into bytes using utf-8\n            byte[] utf8 = str.getBytes(\"UTF8\");\n\n            // Encrypt\n            byte[] enc = ecipher.doFinal(utf8);\n\n            // Encode bytes to base64 to get a string\n            return new String( Base64.encode(enc), \"UTF8\");\n\n        } catch (BadPaddingException e) {\n            logger.error(\"during encryption : \",e);\n        } catch (IllegalBlockSizeException e) {\n            logger.error(\"during encryption : \",e);\n        } catch (UnsupportedEncodingException e) {\n            logger.error(\"during encryption : \",e);\n        } \n        return new String();\n    }\n\n\n    /**\n     * Takes a encrypted String as an argument, decrypts and returns the decrypted String.\n     * \n     * @param str Encrypted String to be decrypted\n     * @return <code>String</code> Decrypted version of the provided String\n     */\n    public String decrypt(String str) {\n        byte[] dec = new byte[0];\n        try {\n            // Decode base64 to get bytes. Not sure to understand why.\n            dec = Base64.decode(str) ;\n            // Decrypt\n            byte[] utf8 = dcipher.doFinal(dec);\n            // Decode using utf-8\n            return new String(utf8, \"UTF8\");\n\n        } catch (BadPaddingException e) {\n            logger.error(\"error during decryption. String to decode was : \"+str + \" byte array to decode was : \"+ Arrays.toString(dec) ,e);\n        } catch (IllegalBlockSizeException e) {\n            logger.error(\"during decryption : \",e);\n        } catch (UnsupportedEncodingException e) {\n            logger.error(\"during decryption : \",e);\n        }  \n        return new String();\n    }\n}\n", "idx": 1485}
{"project": "cipher", "commit_id": "Snippet17103021_375.java", "target": 0, "func": "public static byte[] enc(byte data[], byte key[]\n{\nCipher c = Cipher.getInstance(\"AES\");\nSecretKeySpec k =\n  new SecretKeySpec(key, \"AES\");\nc.init(Cipher.ENCRYPT_MODE, k);\nbyte[] encryptedData = c.doFinal(dataToSend);\nreturn encryptedData;\n}\n", "idx": 1486}
{"project": "cipher", "commit_id": "Snippet17540208_711.java", "target": 0, "func": "public static String toHex(byte[] buf) {\n    if (buf == null)\n            return \"\";\n    StringBuffer result = new StringBuffer(2*buf.length);\n    for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\n\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n}\n\nprivate final static String HEX = \"0123456789ABCDEF\";\n\npublic static String encrypt(String seed, String cleartext) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}    \n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n}\n", "idx": 1487}
{"project": "cipher", "commit_id": "Snippet26922991_9039.java", "target": 0, "func": "private String doEncrypt3DES(String key, String data) throws Exception{\n        SecretKey secretKey;\n        byte[] keyValue;\n        Cipher c;\n\n        keyValue = Hex.decodeHex(key.toCharArray());\n        DESedeKeySpec keySpec = new DESedeKeySpec(keyValue);\n        secretKey = SecretKeyFactory.getInstance(\"DESede\").generateSecret(keySpec);\n\n        // Create the cipher\n        c = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n\n        c.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] text = data.getBytes(\"utf-8\"); // Base64.decodeBase64(data);\n        byte[] textEncrypt = c.doFinal(text);\n        String hex = bytesToHex(textEncrypt);\n        return hex;\n}\n", "idx": 1488}
{"project": "cipher", "commit_id": "Snippet21254035_3800.java", "target": 0, "func": "public class SimpleCrypto \n\n{\n\n    public static String decrypt1(String seed, String encrypted) throws Exception \n    {\n        byte[] keyb = seed.getBytes(\"UTF-8\");\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] thedigest = md.digest(keyb);\n        SecretKeySpec skey = new SecretKeySpec(thedigest, \"AES/CBC/ZeroBytePadding\");\n        //SecretKeySpec skey = new SecretKeySpec(thedigest, \"AES/ECB/PKCS7Padding\");\n        Cipher dcipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n        dcipher.init(Cipher.DECRYPT_MODE, skey);\n        byte[] clearbyte = dcipher.doFinal(toByte(encrypted));\n        return new String(clearbyte);\n    }\n\n    public static byte[] toByte1(String hexString) \n    {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n\n        public static String encrypt(String seed, String cleartext) throws Exception {\n                byte[] rawKey = getRawKey(seed.getBytes());\n                byte[] result = encrypt(rawKey, cleartext.getBytes());\n                return toHex(result);\n        }\n\n        public static String decrypt(String seed, String hexStr) throws Exception {\n                byte[] rawKey = getRawKey(seed.getBytes());\n                byte[] enc = toByte(hexStr);\n                byte[] result = decrypt(rawKey, enc);\n                return new String(result);\n        }\n\n        private static byte[] getRawKey(byte[] seed) throws Exception {\n                KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n                SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n                sr.setSeed(seed);\n            kgen.init(128, sr); // 192 and 256 bits may not be available\n            SecretKey skey = kgen.generateKey();\n            byte[] raw = skey.getEncoded();\n            return raw;\n        }\n\n\n        private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n            byte[] encrypted = cipher.doFinal(clear);\n                return encrypted;\n        }\n\n        private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n               // Cipher cipher = Cipher.getInstance(\"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n            byte[] decrypted = cipher.doFinal(encrypted);\n                return decrypted;\n        }\n\n        //SecretKeySpec(thedigest, \"AES/CBC/ZeroBytePadding\");\n\n        public static String toHex(String txt) {\n                return toHex(txt.getBytes());\n        }\n        public static String fromHex(String hex) {\n                return new String(toByte(hex));\n        }\n\n        public static byte[] toByte(String hexStr) {\n                int len = hexStr.length()/2;\n                byte[] result = new byte[len];\n                for (int i = 0; i < len; i++)\n                        result[i] = Integer.valueOf(hexStr.substring(2*i, 2*i+2), 16).byteValue(); //2 * i, 2 * i + 2\n                return result;\n        }\n\n        public static String toHex(byte[] buf) {\n                if (buf == null)\n                        return \"\";\n                StringBuffer result = new StringBuffer(2*buf.length);\n                for (int i = 0; i < buf.length; i++) {\n                        appendHex(result, buf[i]);\n                }\n                return result.toString();\n        }\n        private final static char[] HEX = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\".toCharArray();\n        private static void appendHex(StringBuffer sb, byte b) {\n                sb.append(HEX.length).append(HEX.length);\n        }\n\n}\n", "idx": 1489}
{"project": "cipher", "commit_id": "Snippet38407929_19423.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"blowfish/ecb/nopadding\");\n", "idx": 1490}
{"project": "cipher", "commit_id": "Snippet41036477_22985.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, publicKey);\ninputStream = new CipherInputStream(new FileInputStream(encryptedFile), cipher);\noutputStream = new FileOutputStream(decryptedFileName);\n", "idx": 1491}
{"project": "cipher", "commit_id": "Snippet22198856_4592.java", "target": 0, "func": "            byte inBuf[] = outA.toByteArray();\n\n            SecretKeyFactory keyFac = SecretKeyFactory.getInstance(\"DESede\");\n            DESedeKeySpec keySpec = new DESedeKeySpec(passwd.getBytes());\n            SecretKey secKey = keyFac.generateSecret(keySpec);\n            Cipher cipher = Cipher.getInstance(\"DESede\");\n            cipher.init(Cipher.ENCRYPT_MODE, secKey);\n\n            cipher.init(Cipher.ENCRYPT_MODE, secKey);\n\n            byte[] b = cipher.doFinal(inBuf);\n", "idx": 1492}
{"project": "cipher", "commit_id": "Snippet7685963_32877.java", "target": 0, "func": "public static String encrypt(String seed, String cleartext) throws Exception {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0byte[] rawKey = getRawKey(seed.getBytes(\"UTF-16\"));\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0byte[] result = encrypt(rawKey, cleartext.getBytes(\"UTF-16\"));\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return toHex(result);\n\u00a0 \u00a0 \u00a0 \u00a0}\n\u00a0 \u00a0 \u00a0 \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0public static String decrypt(String seed, String encrypted) throws Exception {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0byte[] rawKey = getRawKey(seed.getBytes(\"UTF-16\"));\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0byte[] enc = toByte(encrypted);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0byte[] result = decrypt(rawKey, enc);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return new String(result);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0}\n\n\u00a0 \u00a0 \u00a0 \u00a0private static byte[] getRawKey(byte[] seed) throws Exception {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0sr.setSeed(seed);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0kgen.init(128, sr); // 192 and 256 bits may not be available\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0SecretKey skey = kgen.generateKey();\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0byte[] raw = skey.getEncoded();\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return raw;\n\u00a0 \u00a0 \u00a0 \u00a0}\n\n\u00a0 \u00a0 \u00a0 \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Cipher cipher = Cipher.getInstance(\"AES\");\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0byte[] encrypted = cipher.doFinal(clear);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return encrypted;\n\u00a0 \u00a0 \u00a0 \u00a0}\n\n\u00a0 \u00a0 \u00a0 \u00a0private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Cipher cipher = Cipher.getInstance(\"AES\");\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0byte[] decrypted = cipher.doFinal(encrypted);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return decrypted;\n\u00a0 \u00a0 \u00a0 \u00a0}\n\n\u00a0 \u00a0 \u00a0 \u00a0public static String toHex(String txt) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return toHex(txt.getBytes());\n\u00a0 \u00a0 \u00a0 \u00a0}\n\u00a0 \u00a0 \u00a0 \u00a0public static String fromHex(String hex) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return new String(toByte(hex));\n\u00a0 \u00a0 \u00a0 \u00a0}\n\u00a0 \u00a0 \u00a0 \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0public static byte[] toByte(String hexString) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0int len = hexString.length()/2;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0byte[] result = new byte[len];\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0for (int i = 0; i < len; i++)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return result;\n\u00a0 \u00a0 \u00a0 \u00a0}\n\n\u00a0 \u00a0 \u00a0 \u00a0public static String toHex(byte[] buf) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if (buf == null)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return \"\";\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0StringBuffer result = new StringBuffer(2*buf.length);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0for (int i = 0; i < buf.length; i++) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0appendHex(result, buf[i]);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return result.toString();\n\u00a0 \u00a0 \u00a0 \u00a0}\n\u00a0 \u00a0 \u00a0 \u00a0private final static String HEX = \"0123456789ABCDEF\";\n\u00a0 \u00a0 \u00a0 \u00a0private static void appendHex(StringBuffer sb, byte b) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n\u00a0 \u00a0 \u00a0 \u00a0}\n\u00a0 \u00a0 \u00a0 \u00a0\n", "idx": 1493}
{"project": "cipher", "commit_id": "Snippet41660349_23597.java", "target": 0, "func": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Crypt {\n\n    private Crypt() {\n    }\n\n    public static String encrypt(String key, String toEncrypt) {\n        byte[] toEncryptBytes = toEncrypt.getBytes();\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, getKey(key));\n            byte[] encrypted = cipher.doFinal(toEncryptBytes);\n            return new String(encrypted);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }\n\n    public static String decrypt(String key, String toDecrypt) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, getKey(key));\n            byte[] decrypted = cipher.doFinal(toDecrypt.getBytes());\n            return new String(decrypted);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }\n\n    private static SecretKeySpec getKey(String str) {\n        byte[] bytes = str.getBytes();\n        try {\n            MessageDigest sha = MessageDigest.getInstance(\"SHA-256\");\n            bytes = sha.digest(bytes);\n            bytes = Arrays.copyOf(bytes, 16);\n            return new SecretKeySpec(bytes, \"AES\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public static final void main(String[] args) {\n        String key = \"KEY123\";\n        String toEncrypt = \"0\";\n        boolean[] b = new boolean[128];\n        for (int i = 0; i < 128; i++) {\n            if (test(key, toEncrypt) == false) {\n                System.err.println(\"ERROR with size \" + toEncrypt.length());\n            } else {\n                b[i] = true;\n            }\n            toEncrypt += \"0\";\n        }\n\n        System.out.println(\"Following sizes don't work:\");\n        for (int i = 0; i < b.length; i++) {\n            if (!b[i]) {\n                System.out.println(i + 1);\n            }\n        }\n    }\n\n    // true = success\n    public static boolean test(String key, String toEncrypt) {\n        try {\n            System.out.print(toEncrypt.length() + \": \");\n            String encrypted = encrypt(key, toEncrypt);\n            System.out.print(encrypted + \"; \");\n\n            String decrypted = decrypt(key, encrypted);\n            System.out.println(decrypted);\n\n            if (decrypted == null) {\n                return false;\n            }\n\n            if (toEncrypt.equals(decrypted)) {\n                return true;\n            }\n            return false;\n        } catch (Throwable t) {\n            return false;\n        }\n    }\n}\n", "idx": 1494}
{"project": "cipher", "commit_id": "Snippet13234972_36791.java", "target": 0, "func": "public static void encrypt_AES(String message){\n\n        Cipher ecipher;\n        try {\n            // generate secret key using DES algorithm\n            SecretKeySpec key = new SecretKeySpec(theKey.getBytes(\"UTF-8\"), \"AES\");\n\n            ecipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n\n            // initialize the ciphers with the given key\n            ecipher.init(Cipher.ENCRYPT_MODE, key);\n\n            byte[] encrypted = ecipher.doFinal(message.getBytes(\"UTF-8\"));\n\n        }catch (Exception e) {\n            //    \n            e.printStackTrace();\n        }\n\n    }\n", "idx": 1495}
{"project": "cipher", "commit_id": "Snippet46345901_28454.java", "target": 0, "func": "//Generating keypairs\nKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\nkeyPairGenerator.initialize(1024);\nKeyPair keyPair = keyPairGenerator.genKeyPair();\n\n// extract the encoded private key, this is an unencrypted PKCS#8 private key\nbyte[] encodedprivkey = keyPair.getPrivate().getEncoded();\n\n// We must use a PasswordBasedEncryption algorithm in order to encrypt the private key, you may use any common algorithm supported by openssl, you can check them in the openssl documentation http://www.openssl.org/docs/apps/pkcs8.html\nString MYPBEALG = \"PBEWithSHA1AndDESede\";\nString password = \"pleaseChangeit!\";\n\nint count = 20;// hash iteration count\nSecureRandom random = new SecureRandom();\nbyte[] salt = new byte[8];\nrandom.nextBytes(salt);\n\n// Create PBE parameter set\nPBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, count);\nPBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());\nSecretKeyFactory keyFac = SecretKeyFactory.getInstance(MYPBEALG);\nSecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n\nCipher pbeCipher = Cipher.getInstance(MYPBEALG);\n\n// Initialize PBE Cipher with key and parameters\npbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n\n// Encrypt the encoded Private Key with the PBE key\nbyte[] ciphertext = pbeCipher.doFinal(encodedprivkey);\n\n// Now construct  PKCS #8 EncryptedPrivateKeyInfo object\nAlgorithmParameters algparms = AlgorithmParameters.getInstance(MYPBEALG);\nalgparms.init(pbeParamSpec);\nEncryptedPrivateKeyInfo encinfo = new EncryptedPrivateKeyInfo(algparms, ciphertext);\n\n// and here we have it! a DER encoded PKCS#8 encrypted key!\nbyte[] encryptedPkcs8 = encinfo.getEncoded();\n", "idx": 1496}
{"project": "cipher", "commit_id": "Snippet20087963_2740.java", "target": 0, "func": "FileInputStream fis;\nFileOutputStream fos;\nCipherOutputStream cos;\n// File you are reading from\nfis = new FileInputStream(\"/tmp/a.txt\");\n// File output\nfos = new FileOutputStream(\"/tmp/b.txt\");\n\n// Here the file is encrypted. The cipher1 has to be created.\n// Key Length should be 128, 192 or 256 bit => i.e. 16 byte\nSecretKeySpec skeySpec = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\"); \nCipher cipher1 = Cipher.getInstance(\"AES\");  \ncipher1.init(Cipher.ENCRYPT_MODE, skeySpec);\ncos = new CipherOutputStream(fos, cipher1);\n// Here you read from the file in fis and write to cos.\nbyte[] b = new byte[8];\nint i = fis.read(b);\nwhile (i != -1) {\n    cos.write(b, 0, i);\n    i = fis.read(b);\n}\ncos.flush();\n", "idx": 1497}
{"project": "cipher", "commit_id": "Snippet42755334_24229.java", "target": 0, "func": "    public String decrypt(String enc) throws Exception\n    {\n        Key key = k;\n        Cipher crypt = Cipher.getInstance(\"AES\");\n        crypt.init(Cipher.DECRYPT_MODE,key);\n        byte[] decrypt = crypt.doFinal(Base64.getMimeDecoder().decode(enc));\n        return new String(decrypt);\n    }\n", "idx": 1498}
{"project": "cipher", "commit_id": "Snippet25590953_7921.java", "target": 0, "func": "    public void run(){\n    try {\n        String key1 = \"1234567812345678\"; \n        byte[] key2 = key1.getBytes();\n        SecretKeySpec secret = new SecretKeySpec(key2, \"AES\");\n        String msg = \"Singapore Malaysia Japan India\";\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");        \n        cipher.init(Cipher.ENCRYPT_MODE, secret);\n        byte[] encrypted = cipher.doFinal(msg.getBytes());\n\n        in = new DataInputStream(incoming.getInputStream());\n        out = new DataOutputStream(incoming.getOutputStream());\n\n\n        boolean done = false;\n        String str=\"\";\n        out.writeUTF(\"Connected!\\n\");\n        out.flush();\n        while (!done){\n            out.writeUTF(\">\");\n            out.flush();\n            str = in.readUTF();\n            System.out.println(in+\":\"+str);\n            if (str == null)\n                done = true;\n            else{\n                System.out.println(\"Sending Ciphertext : \" + new String(encrypted));\n                out.writeUTF(new String(encrypted));\n                out.flush();\n", "idx": 1499}
{"project": "cipher", "commit_id": "Snippet46356723_28461.java", "target": 0, "func": "     final String ALGORITHM = \"blowfish\";\n     String keyString = \"DesireSecretKey\";\n\n    private void encrypt(String file) throws Exception {\n\n        File extStore = Environment.getExternalStorageDirectory();\n        File inputFile = new File(file);\n        File encryptedFile = new \n        File(extStore+\"/Movies/encryptAudio.amr\");\n        doCrypto(Cipher.ENCRYPT_MODE, inputFile, encryptedFile);\n     }\n\n\n\n     private  void doCrypto(int cipherMode, File inputFile,\n                                 File outputFile) throws Exception {\n\n        Key secretKey = new \n        SecretKeySpec(keyString.getBytes(),ALGORITHM);\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(cipherMode, secretKey);\n\n        FileInputStream inputStream = new FileInputStream(inputFile);\n        byte[] inputBytes = new byte[(int) inputFile.length()];\n        inputStream.read(inputBytes);\n\n        byte[] outputBytes = cipher.doFinal(inputBytes);\n\n        FileOutputStream outputStream = new \n        FileOutputStream(outputFile);\n        outputStream.write(outputBytes);\n\n        inputStream.close();\n        outputStream.close();\n\n    }\n", "idx": 1500}
{"project": "cipher", "commit_id": "Snippet30347452_12496.java", "target": 0, "func": "public class CipherUtils\n{\n    private static byte[] key = {\n            0x74, 0x68, 0x69, 0x73, 0x49, 0x73, 0x41, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79\n    };//\"thisIsASecretKey\";\n\n    public static String encrypt(String strToEncrypt)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            final String encryptedString = Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes()));\n            return encryptedString;\n        }\n        catch (Exception e)\n        {\n           e.printStackTrace();\n        }\n        return null;\n    }\n}\n", "idx": 1501}
{"project": "cipher", "commit_id": "Snippet44048146_26117.java", "target": 0, "func": "import javax.crypto.*;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\npublic class Gen_DESAES_key {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException,\n                                                  NoSuchPaddingException,\n                                                  BadPaddingException,\n                                                  IllegalBlockSizeException,\n                                                  InvalidKeyException {\n\n        byte[] message = \"Hello World\".getBytes();\n\n        KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n        SecretKey desKey = keygenerator.generateKey();\n\n        Cipher desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        desCipher.init(Cipher.ENCRYPT_MODE, desKey);\n\n        byte[] encryptedMessage = desCipher.doFinal(message);\n        System.out.println(new String(encryptedMessage));\n    }\n}\n", "idx": 1502}
{"project": "cipher", "commit_id": "Snippet14099604_37459.java", "target": 0, "func": "    import java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\n\n\npublic class JEncrytion\n{    \n    public static void main(String[] argv) {\n\n        try{\n\n            KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n            SecretKey myDesKey = keygenerator.generateKey();\n                    String key = \"zertyuio\";\n            Cipher desCipher;\n\n            // Create the cipher \n            desCipher = Cipher.getInstance(\"DES\");\n\n            // Initialize the cipher for encryption\n            desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n\n            //sensitive information\n            byte[] text = \"No body can see me\".getBytes();\n\n            System.out.println(\"Text [Byte Format] : \" + text);\n            System.out.println(\"Text : \" + new String(text));\n\n            // Encrypt the text\n            byte[] textEncrypted = desCipher.doFinal(text);\n\n            System.out.println(\"Text Encryted : \" + textEncrypted);\n\n            // Initialize the same cipher for decryption\n            desCipher.init(Cipher.DECRYPT_MODE, myDesKey);\n\n            // Decrypt the text\n            byte[] textDecrypted = desCipher.doFinal(textEncrypted);\n\n            System.out.println(\"Text Decryted : \" + new String(textDecrypted));\n\n        }catch(NoSuchAlgorithmException e){\n            e.printStackTrace();\n        }catch(NoSuchPaddingException e){\n            e.printStackTrace();\n        }catch(InvalidKeyException e){\n            e.printStackTrace();\n        }catch(IllegalBlockSizeException e){\n            e.printStackTrace();\n        }catch(BadPaddingException e){\n            e.printStackTrace();\n        } \n\n    }\n}\n", "idx": 1503}
{"project": "cipher", "commit_id": "Snippet45662133_27727.java", "target": 0, "func": "public static String EncryptText(String message) throws Exception {\n\nMessageDigest md = MessageDigest.getInstance(\"SHA-1\");\nbyte[] digestOfPassword = md.digest(secretKey.getBytes(\"utf-8\"));\nbyte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n\nSecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\nCipher cipher = Cipher.getInstance(\"DESede\");\ncipher.init(Cipher.ENCRYPT_MODE, key);\n\nbyte[] plainTextBytes = message.getBytes(\"utf-8\");\nbyte[] buf = cipher.doFinal(plainTextBytes);\nbyte [] base64Bytes = Base64.encode(buf,Base64.DEFAULT);\nString base64EncryptedString = new String(base64Bytes);\n\nreturn base64EncryptedString;\n", "idx": 1504}
{"project": "cipher", "commit_id": "Snippet29671913_11736.java", "target": 0, "func": "public byte[] encTripleDes (String txt, byte [] key) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException, InvalidKeySpecException{\n    DESedeKeySpec keySpec = new DESedeKeySpec(key);\n    SecretKeyFactory keyfactory = SecretKeyFactory.getInstance(\"DESede\");\n    SecretKey ky = keyfactory.generateSecret(keySpec);\n\n    Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, ky);\n    return cipher.doFinal(txt.getBytes(\"UTF-8\"));\n\n}\n", "idx": 1505}
{"project": "cipher", "commit_id": "Snippet39679747_21571.java", "target": 0, "func": "public static String decrypt(String input, String key) {\n\n    byte[] output = null;\n    String newString = \"\";\n\n    try {\n\n        SecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, skey);\n        output = cipher.doFinal(Base64.decode(input, Base64.DEFAULT));\n        newString = new String(output);\n\n    } catch(Exception e) {}\n\n    return newString;\n}\n", "idx": 1506}
{"project": "cipher", "commit_id": "Snippet37918185_19956.java", "target": 0, "func": "public static String encode(String srcStr) {\n    if (srcStr == null)\n        return null;\n    String dst = null;\n    byte[] result = encrypt2(srcStr.getBytes(), \"h43au76U\");\n    if (result == null)\n        return null;\n    System.out.println(result);\n    dst = byte2HexStr(result, result.length);\n    return dst;\n    }\n\n private static final char[] mChars = \"0123456789ABCDEF\".toCharArray();\n\n\n public static String byte2HexStr(byte[] b, int iLen) {\n        if (b == null)\n            return null;\n        StringBuilder sb = new StringBuilder();\n        for (int n = 0; n < iLen; n++) {\n            sb.append(mChars[(b[n] & 0xff) >> 4]);\n            sb.append(mChars[b[n] & 0xf]);\n        }\n        return sb.toString().trim().toUpperCase(Locale.US);\n        }\n\n\n\n private static byte[] encrypt2(byte[] datasource, String password) {\n        byte[] is;\n        try {\n            SecureRandom random = new SecureRandom();\n            DESKeySpec desKey = new DESKeySpec(password.getBytes(\"UTF-8\"));\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n            javax.crypto.SecretKey securekey\n            = keyFactory.generateSecret(desKey);\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            cipher.init(1, securekey, random);\n            is = cipher.doFinal(datasource);\n        } catch (Throwable e) {\n            e.printStackTrace();\n            return null;\n        }\n        return is;\n        }\n", "idx": 1507}
{"project": "cipher", "commit_id": "Snippet37988724_20011.java", "target": 0, "func": "public class Prova {\n\npublic static void main(String[] args){\n    String s = \"with the lights out is less dangerous here we are now entertain us\";\n    s = cripta(s);\n    System.out.println(s);\n    s = decripta(s);\n    System.out.println(s);\n}\n\npublic static String cripta(String s){\n    System.out.println(\"lunghezza stringa:\"+s.length());\n    byte[] input = s.getBytes();\n    byte[] output;\n    byte[] keyBytes = hexStringToByteArray(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\n    byte[] ivBytes = hexStringToByteArray(\"AAAAAAAAAAAAAAAA\");\n    String out = \"\";\n\n\n    SecretKeySpec key = new SecretKeySpec(keyBytes, \"DESede\" );\n    IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n    try {\n        Cipher cp = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n        cp.init(Cipher.ENCRYPT_MODE, key);\n        byte[] criptati = new byte[cp.getOutputSize(input.length)];\n        int enc_len = cp.update(input, 0, input.length, criptati, 0);\n        enc_len += cp.doFinal(criptati, enc_len);\n        out = new String(criptati);\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (ShortBufferException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    return out;\n}\n\npublic static String decripta(String s){\n\n    byte[] input = s.getBytes();\n    byte[] output;\n    byte[] keyBytes = hexStringToByteArray(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\n    byte[] ivBytes = hexStringToByteArray(\"AAAAAAAAAAAAAAAA\");\n    String out = \"\";\n\n    try {\n        SecretKeySpec key = new SecretKeySpec(keyBytes, \"DESede\");\n        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n        Cipher cp = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n        cp.init(Cipher.DECRYPT_MODE,  key);\n        byte[] decrypt = new byte[cp.getOutputSize(input.length)];\n\n        int dec_len = cp.update(input, 0, input.length, decrypt, 0);\n        System.out.println(dec_len);\n        dec_len += cp.doFinal(decrypt, dec_len );\n        System.out.println(dec_len);\n        out = new String(decrypt);\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (ShortBufferException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    return out;\n}\n\nprivate static byte[] hexStringToByteArray(String s) {\n    // TODO Auto-generated method stub\n    int len = s.length();\n    byte[] data = new byte[len / 2];\n    for (int i = 0; i < len; i += 2) {\n        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)\n                             + Character.digit(s.charAt(i+1), 16));\n    }\n    return data;\n\n}\n", "idx": 1508}
{"project": "cipher", "commit_id": "Snippet13478097_37017.java", "target": 0, "func": "public class Decryptor {\n\n\npublic static byte[] decryptData(byte[] encryptedCredentials, String key){\n\n    Cipher c;\n    SecretKeySpec k;\n    byte[] byteSharedKey = null;\n    byte[] byteObject = null;\n\n\n    try {\n\n        byteSharedKey = getByteKey(key);\n\n        c = Cipher.getInstance(\"AES\");\n        k = new SecretKeySpec(byteSharedKey, \"AES\");\n        c.init(Cipher.DECRYPT_MODE, k);\n        byteObject = c.doFinal(encryptedCredentials);\n\n\n\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n        throw new RuntimeException(e);\n    } catch (InvalidKeyException e) {\n        throw new RuntimeException(e);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    } catch (IllegalBlockSizeException e) {\n        throw new RuntimeException(e);\n    } catch (BadPaddingException e) {\n        throw new RuntimeException(e);\n    }\n\n    return byteObject;\n\n}\n\npublic static Object getObjectFromBytes(byte[] credentials) throws IOException, ClassNotFoundException{\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(credentials);\n    ObjectInput in = null;\n    ITU_Credentials credentialsObj = null;\n\n    try {\n\n        in = new ObjectInputStream(bis);\n        credentialsObj = (ITU_Credentials)in.readObject(); \n\n    } finally {\n      bis.close();\n      in.close();\n    }\n    return credentialsObj;\n}\n\n\nprivate static byte[] getByteKey(String key) throws UnsupportedEncodingException, NoSuchAlgorithmException{\n\n    //Converting key to SHA-1 and trimming to mach maximum lenght of key\n\n    byte[] bkey = key.getBytes(\"UTF-8\");\n    MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n    bkey = sha.digest(bkey);\n    bkey = Arrays.copyOf(bkey, 16);\n\n    return bkey;\n}\n\npublic static void main(String[] args) {\n    new Encryptor();\n}\n\n}\n", "idx": 1509}
{"project": "cipher", "commit_id": "Snippet45502635_27560.java", "target": 0, "func": "package encryption;\n\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport javax.crypto.*;\n\npublic class CipherClient\n{\n    public static void main(String[] args) throws Exception \n    {\n        // -Generate a DES key.\n        KeyGenerator generator = KeyGenerator.getInstance(\"DES\");\n        generator.init(new SecureRandom());\n        Key key = generator.generateKey();\n\n        // -Store it in a file.\n        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\"KeyFile.xx\"));\n        out.writeObject(key);\n        out.close();\n\n        // -Connect to a server.\n        String message = \"The quick brown fox jumps over the lazy dog.\";\n        String host = \"localhost\";\n        int port = 7999;\n        Socket s = new Socket(host, port);\n\n        // -Use the key to encrypt the message above and send it over socket s to the server.   \n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = cipher.doFinal(message.getBytes());\n        DataOutputStream dOut = new DataOutputStream(s.getOutputStream());\n        dOut.writeInt(encVal.length); // write length of the message\n        dOut.write(encVal);           // write the message\n    }\n}\n", "idx": 1510}
{"project": "cipher", "commit_id": "Snippet33694550_15747.java", "target": 0, "func": "public class Upper_fragment extends Fragment {\n\n        private static final String TAG = \"PlayActivity\";\n\n        private Video vid;\n        int mSavedVideoPosition;\n        protected VideoPlayerInterface vidp;\n        private LocalSingleHttpServer mServer;\n\n\n        // to be implemented in concrete activities\n        public Cipher getCipher() throws GeneralSecurityException {\n            final Cipher c = Cipher.getInstance(\"AES\");    // NoSuchAlgorithmException, NoSuchPaddingException\n            c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(\"abcdef1234567890\".getBytes(), \"AES\"));    // InvalidKeyException\n            return c;\n        }\n\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                                 Bundle savedInstanceState) {\n            View upperView = inflater.inflate(R.layout.upper_fragment, container, false);\n\n            vidp = (VideoPlayerInterface) upperView.findViewById(R.id.vid);\n            getRTSPUrl();\n\n            init(getIntent().getSerializableExtra(Const.EXTRA_DATA));\n            return upperView;\n        }\n", "idx": 1511}
{"project": "cipher", "commit_id": "Snippet41164463_23129.java", "target": 0, "func": "public void dec(File b) throws FileNotFoundException\n{\n    try {\n        c1 = new Scanner(b).useDelimiter(\"\\\\Z\").next();\n        byte[] by=c1.getBytes();\n\n        String key = \"Bar12345Sar12345\"; // 128 bit key\n        Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        cipher.init(Cipher.DECRYPT_MODE, aesKey);\n        String decrypted = new String(cipher.doFinal(by));\n\n        str2 = new String(decrypted);\n        System.out.println(str2);\n        System.out.println(\"3\");\n\n        textField_2.setText(str2);\n\n        empty(b);\n\n        PrintWriter writer = new PrintWriter(b);\n        writer.println(str2);                       \n        writer.close();\n\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n\n}\n", "idx": 1512}
{"project": "cipher", "commit_id": "Snippet15432917_38487.java", "target": 0, "func": "byte[] encrypted = UniversalBase64Encoder.decode(input);\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, generateAESKey128b(key));\nbyte[] originalBytes = cipher.doFinal(encrypted);\n", "idx": 1513}
{"project": "cipher", "commit_id": "Snippet22248619_4649.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"Blowfish/ECB/NoPadding\");\ncipher.init(1, new SecretKeySpec(theKey.getBytes(), \"BlowFish\"));\nbyte[] arrayOfByte = cipher.doFinal(inputString.getBytes());\nString result = new BASE64Encoder().encode(arrayOfByte);\n", "idx": 1514}
{"project": "cipher", "commit_id": "Snippet25297681_7671.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.*;\n\npublic class aes {\n    final static String Plaintext=\"difficult\";\n    final static String pswd=\"secretkey\";\n    public static Key setkey(String mykey)\n    {\n        Key skey=null;\n        try\n        {\n             skey=new SecretKeySpec(mykey.getBytes(\"UTF-8\"), \"AES\");\n        }catch(Exception e){\n             e.printStackTrace();\n        }\n        return skey;\n    }\n\n    public static String encrypt(String plaintxt)\n    {\n        String encryptedtxt=null;\n        try\n        {\n            Key skey=aes.setkey(pswd);\n            Cipher c=Cipher.getInstance(\"AES\");\n            c.init(Cipher.ENCRYPT_MODE, skey);\n            byte[] P=plaintxt.getBytes(\"UTF-8\");\n            encryptedtxt=new String(c.doFinal(P));\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n        return encryptedtxt;\n    }\n\n    public static String decrypt(String encryptedtxt)\n    {\n        try{\n            Cipher c=Cipher.getInstance(\"AES\");\n            Key skey=aes.setkey(pswd);\n            c.init(Cipher.DECRYPT_MODE, skey);\n            String decryptedtxt=new String(c.doFinal(encryptedtxt.getBytes(\"UTF-8\")));\n            return decryptedtxt;\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args)\n    {\n        System.out.println(\"Plain text    :\"+Plaintext);\n        String encryptedtxt=aes.encrypt(Plaintext.trim());\n        System.out.println(\"encrypted text:\"+encryptedtxt);\n        String decryptedtxt=aes.decrypt(encryptedtxt.trim());\n        System.out.println(\"decrypted text:\"+decryptedtxt);\n    }\n}\n", "idx": 1515}
{"project": "cipher", "commit_id": "Snippet33377412_15440.java", "target": 0, "func": "public String encrypt(String var1) throws BlowfishCipher.BCException {\n    try {\n        byte[] var2 = var1.getBytes(\"UTF-8\");\n        byte[] var3 = this.encrypt(var2);\n        return bytesToHexString(var3);\n    } catch (Exception var4) {\n        if(var4 instanceof RuntimeException) {\n            throw (RuntimeException)var4;\n        } else if(var4 instanceof BlowfishCipher.BCException) {\n            throw (BlowfishCipher.BCException)var4;\n        } else {\n            throw new BlowfishCipher.BCException(var4);\n        }\n    }\n}\n\npublic byte[] encrypt(byte[] var1) throws BlowfishCipher.BCException {\n    try {\n        Cipher var2 = Cipher.getInstance(\"Blowfish\");\n        byte[] var3 = hexStringToBytes(this.sKey);\n        SecretKeySpec var4 = new SecretKeySpec(var3, \"Blowfish\");\n        var2.init(1, var4);\n        return var2.doFinal(var1);\n    } catch (Exception var5) {\n        if(var5 instanceof RuntimeException) {\n            throw (RuntimeException)var5;\n        } else {\n            throw new BlowfishCipher.BCException(var5);\n        }\n    }\n}\n\nprivate static String bytesToHexString(byte[] var0) {\n    StringBuffer var1 = new StringBuffer();\n\n    for(int var2 = 0; var2 < var0.length; ++var2) {\n        String var3 = Integer.toHexString(255 & var0[var2]);\n        if(var3.length() < 2) {\n            var1.append(\"0\");\n        }\n\n        var1.append(Integer.toHexString(255 & var0[var2]));\n    }\n\n    return var1.toString();\n}\n", "idx": 1516}
{"project": "cipher", "commit_id": "Snippet40985052_22893.java", "target": 0, "func": "package Server;\n\nimport application.ClientInterface;\n\nimport javax.crypto.*;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.rmi.AlreadyBoundException;\nimport java.rmi.NotBoundException;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\nimport java.rmi.server.UnicastRemoteObject;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\n/**\n * Created by alexi on 05/12/2016.\n */\npublic class MyFileServer extends UnicastRemoteObject implements ServerInit, Serializable {\n\n    private static Cipher ecipher;\n    private static SecretKey key;\n\n\n    public  MyFileServer() throws RemoteException {\n        super();\n    }\n\n    @Override\n    public void importFiles(ClientInterface n, String name) throws RemoteException {\n        String videoPath = \"src\" + File.separator + \"Videos\" + File.separator + name;\n        try {\n\n            key = KeyGenerator.getInstance(\"DES\").generateKey();\n\n            ecipher = Cipher.getInstance(\"DES\");\n            ecipher.init(Cipher.ENCRYPT_MODE, key);\n\n\n            ServerInit server = new MyFileServer();\n\n            File video = new File(videoPath);\n            FileInputStream in=new FileInputStream(video);\n            byte [] mydata=new byte[(int)video.length()];\n\n            SealedObject sealed = new SealedObject(mydata, ecipher);\n\n            int mylen=in.read(mydata);\n            while(mylen>0){\n                n.sendData(video.getName(), sealed, mylen);\n                mylen=in.read(mydata);\n            }\n\n        }catch( Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    public static void startServer(){\n        try{\n\n\n            ServerInit server = new MyFileServer();\n\n            Registry registry = LocateRegistry.createRegistry(1099);\n            registry.bind(\"videoServer\", server);\n            System.out.println(registry.lookup(\"videoServer\"));\n\n        }catch (RemoteException e){\n            e.printStackTrace();\n        } catch (AlreadyBoundException e) {\n            e.printStackTrace();\n        } catch (NotBoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n}\n", "idx": 1517}
{"project": "cipher", "commit_id": "Snippet17019024_322.java", "target": 0, "func": "import java.util.Arrays;\nimport java.util.Random;\nimport java.io.ByteArrayOutputStream;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\nimport verschl\u00fcsseln.FalscheMACOderSaltException;\n\n\n    public static byte[] verschl\u00fcsseln(String daten) throws Exception {\n        // Ben\u00f6tigt: daten, DreifachDES.password, DreifachDES.macString\n        // \u00c4ndert: saltString\n        // Ausf\u00fchrt: Verschl\u00fcsselt \"daten,\" 3DES mit Salt und ein MAC wird\n        // benutzt.\n        // hash(DreifachDES.password + salt) ist der Schl\u00fcssel.\n        // Der Output ist ein byte[]\n\n        // Erzeugen Digest f\u00fcr Passwort + Salt\n        password=\"key12345key54321key15243\";\n        final MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n\n        // Erzeugen zuf\u00e4llig 24 Byte Salt\n        Random z\u00fcfallig = new SecureRandom();\n        byte[] salt = new byte[24];\n        z\u00fcfallig.nextBytes(salt);\n        String saltString = Arrays.toString(salt);\n\n        // Digest Passwort + Salt um der Schl\u00fcssel zu erzeugen\n        final byte[] digestVonPassword = md.digest((password + saltString)\n                .getBytes(\"UTF-8\"));\n        new Base64(true);\n        String b64Daten = Base64.encodeBase64String(digestVonPassword);\n\n        // Wir brauchen nur 24 Bytes, benutze die Erste 24 von der Digest\n        final byte[] keyBytes = Arrays.copyOf(digestVonPassword, 24);\n\n        // Erzeugen der Schl\u00fcssel\n        final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n\n        // Erzeugen eine z\u00fcfallig IV\n        byte[] ivSeed = new byte[8];\n        z\u00fcfallig.nextBytes(ivSeed);\n        final IvParameterSpec iv = new IvParameterSpec(ivSeed);\n\n        // Erzeugen Cipher mit 3DES, CBC und PKCS5Padding\n        final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n        // Erzeugen byte[] von String message\n        final byte[] plainTextBytes = daten.getBytes(\"UTF-8\");\n        byte[] vorIvCipherText = cipher.doFinal(plainTextBytes);\n\n        // Erzeugen die MAC (Message Authentication Code, Mesage\n        // Authentifizierung Chiffre)\n        // Sp\u00e4ter mache ich einmal ein zuf\u00e4llig String, und wir benutzen das\n        // immer.\n        SecretKeySpec macSpec = new SecretKeySpec(\n                (password + saltString).getBytes(\"UTF-8\"), \"HmacSHA1\");\n        Mac mac = Mac.getInstance(\"HmacSHA1\");\n        mac.init(macSpec);\n        byte[] macBytes = mac.doFinal(macString.getBytes());\n\n        // Erzeugen byte outputStream um die Arrays zu verbinden\n        ByteArrayOutputStream ostream = new ByteArrayOutputStream();\n\n        // Verbinden IV, Salt, MAC, und verschl\u00fcsselt String\n        ostream.write(cipher.getIV());\n        ostream.write(salt);\n        ostream.write(macBytes);\n        ostream.write(vorIvCipherText);\n\n        final byte[] cipherText = ostream.toByteArray();\n\n        return cipherText;\n    }\n", "idx": 1518}
{"project": "cipher", "commit_id": "Snippet6492518_32164.java", "target": 0, "func": "package chert.chert;\n\nimport chert.chert.R;\nimport chert.chert.SimpleCrypto;\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.widget.TextView;\n\npublic class ChertActivity extends Activity {\n    /** Called when the activity is first created. */\n    TextView textView1;\n\n\n\n    byte[] key=new byte[16];\n    byte[] state=new byte[16];\n    public SimpleCrypto Crypt = new SimpleCrypto(this);\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        int i;\n        String ss,state_str,key_str;\n        char c;\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n\n\n\n\n        //======================================================================================================================        \n\n        state[0]=0x32;           state[1]=(byte) 0x88;  state[2]=0x31;          state[3]=(byte) 0xe0;\n        state[4]=0x43;           state[5]=0x5a;         state[6]=0x31;          state[7]=0x37;\n        state[8]=(byte) 0xf6;    state[9]=0x30;         state[10]=(byte) 0x98;  state[11]=0x07;\n        state[12]=(byte) 0xa8;   state[13]=(byte) 0x8d; state[14]=(byte) 0xa2;  state[15]=0x34;\n\n\n     //======================================================================================================================        \n\n        key[0]=0x2b;           key[1]=0x28;                key[2]=(byte) 0xab;   key[3]=0x09;\n        key[4]=0x7e;           key[5]=(byte) 0xae;         key[6]=(byte) 0xf7;   key[7]=(byte) 0xcf;\n        key[8]=0x15;           key[9]=(byte) 0xd2;         key[10]=0x15;         key[11]=0x4f;\n        key[12]=0x16;          key[13]=(byte) 0xa6;        key[14]=(byte) 0x88;  key[15]=0x3c;\n\n      //======================================================================================================================        \n\n        try {\n            byte[] rawKey = Crypt.getRawKey(key);\n            byte[] result = Crypt.encrypt(rawKey, state);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n    }\n}\n\n\n\n\n\n\n\npackage chert.chert;\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class SimpleCrypto {\n\n    public SimpleCrypto(ChertActivity chertActivity) {\n        // TODO Auto-generated constructor stub\n    }\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    public static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n\n    public static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2*buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n    private final static String HEX = \"0123456789ABCDEF\";\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n    }\n\n}\n", "idx": 1519}
{"project": "cipher", "commit_id": "Snippet36813098_18768.java", "target": 0, "func": "public static String encrypt(String seed, String cleartext) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes(), seed);\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result); // \"unlock code\" which must always be the same for the same seed and clearText accross android versions\n}\n\nprivate static byte[] getRawKey(byte[] seed, String seedStr) throws Exception {\n    SecureRandom sr;\n    sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");  // what used to work\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); \n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2 * buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\n", "idx": 1520}
{"project": "cipher", "commit_id": "Snippet37377862_19274.java", "target": 0, "func": "public static String encryptText(String plainText) throws Exception {\n\n    byte[] plaintext = plainText.getBytes();//input\n    byte[] tdesKeyData = Constants.getKey().getBytes();// your encryption key\n\n    byte[] myIV = Constants.getInitializationVector().getBytes();// initialization vector\n\n    Cipher c3des = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    SecretKeySpec myKey = new SecretKeySpec(tdesKeyData, \"DESede\");\n    IvParameterSpec ivspec = new IvParameterSpec(myIV);\n\n    c3des.init(Cipher.ENCRYPT_MODE, myKey, ivspec);\n    byte[] cipherText = c3des.doFinal(plaintext);\n    String encryptedString = Base64.encodeToString(cipherText,\n            Base64.DEFAULT);\n    // return Base64Coder.encodeString(new String(cipherText));\n    return encryptedString;\n}\n\nprivate static class Constants\n{\n    private static final String KEY=\"\";\n    private static final String INITIALIZATION_VECTOR=\"\";\n    public static String getKey()\n    {\n        return KEY;\n    }\n\n\n    public static String getInitializationVector()\n    {\n        return INITIALIZATION_VECTOR;\n    }\n}\n", "idx": 1521}
{"project": "cipher", "commit_id": "Snippet7348224_32704.java", "target": 0, "func": "// Read in the salt.\nbyte[] salt = new byte[8];\nByteArrayInputStream bais = new ByteArrayInputStream(ciphertext);\nbais.read(salt,0,8);\n\n// The remaining bytes are the actual ciphertext.\nbyte[] remainingCiphertext = new byte[ciphertext.length-8];\nbais.read(remainingCiphertext,0,ciphertext.length-8);\n\n// Create a PBE cipher to decrypt the byte array.\nPBEKeySpec keySpec = new PBEKeySpec(password);\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithSHAAndTwofish-CBC\");\nSecretKey key = keyFactory.generateSecret(keySpec);\nPBEParameterSpec paramSpec = new PBEParameterSpec(salt, ITERATIONS);\nCipher cipher = Cipher.getInstance(\"PBEWithSHAAndTwofish-CBC\");\n\n// Perform the actual decryption.\ncipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\nreturn cipher.doFinal(remainingCiphertext);\n  }\n}\n", "idx": 1522}
{"project": "cipher", "commit_id": "Snippet4895773_31043.java", "target": 0, "func": "dcipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\nKeySpec keySpec = new PBEKeySpec(passPhrase.toCharArray(), salt, iterationCount);\nSecretKey key = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\").generateSecret(keySpec);\ndcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n", "idx": 1523}
{"project": "cipher", "commit_id": "Snippet7572793_32794.java", "target": 0, "func": "public class TripleDES {\nprivate String key;\nprivate byte[] initializationVector;\n\npublic TripleDES(String key, byte[] initializationVector)\n{\n    this.key = key;\n    this.initializationVector = initializationVector;\n}\n\npublic String encryptText(String plainText) throws Exception{\n//----  Use specified 3DES key and IV from other source -------------------------\n  byte[] plaintext = plainText.getBytes();\n  byte[] tdesKeyData = key.getBytes();\n\n  System.out.println(\"plain text length: \" + plaintext.length);\n  System.out.println(\"key length: \" + tdesKeyData.length);\n\n\n  Cipher c3des = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n  SecretKeySpec    myKey = new SecretKeySpec(tdesKeyData, \"DESede\");\n  IvParameterSpec ivspec = new IvParameterSpec(initializationVector);\n\n  c3des.init(Cipher.ENCRYPT_MODE, myKey, ivspec);\n  byte[] cipherText = c3des.doFinal(plaintext);\n\n  return Base64Coder.encodeString(new String(cipherText));\n}\n\npublic String decryptText(String encryptedText) throws Exception{\n    //----  Use specified 3DES key and IV from other source -------------------\n      byte[] enctext = Base64Coder.decode(encryptedText);\n      byte[] tdesKeyData = key.getBytes();\n\n\n      Cipher c3des = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n      SecretKeySpec    myKey = new SecretKeySpec(tdesKeyData, \"DESede\");\n      IvParameterSpec ivspec = new IvParameterSpec(initializationVector);\n\n      c3des.init(Cipher.DECRYPT_MODE, myKey, ivspec);\n      byte[] cipherText = c3des.doFinal(enctext);\n      return new String(cipherText);\n    }\n", "idx": 1524}
{"project": "cipher", "commit_id": "Snippet16369787_39314.java", "target": 0, "func": "Cipher ecipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n", "idx": 1525}
{"project": "cipher", "commit_id": "Snippet19360234_2188.java", "target": 0, "func": " public static void encrypt(String password, InputStream is, OutputStream os,String DelFile) throws Exception {\n\nSecretKeySpec keySpec = new SecretKeySpec(password(password), \"TripleDES\");\nCipher cipher = Cipher.getInstance(\"TripleDES\");\ncipher.init(Cipher.ENCRYPT_MODE, keySpec);\nbyte[] buf = new byte[8096];\nos = new CipherOutputStream(os, cipher);\nint numRead = 0;\nwhile ((numRead = is.read(buf)) >= 0) {\n    os.write(buf, 0, numRead);\n}\nos.close();\n\n// file deleting part...\nFile f = new File(DelFile);\nf.delete();}\n", "idx": 1526}
{"project": "cipher", "commit_id": "Snippet41672314_23605.java", "target": 0, "func": "protected static byte[] encrypt(String text) \n    {\n        try\n        {\n            String key = \"6589745268754125\";\n            // Create key and cipher\n            Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            // encrypt the text\n            cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            byte[] encrypted = cipher.doFinal(text.getBytes());\n            return encrypted;\n        }\n        catch(Exception ex)\n        {\n            WriteLog(\"Encryption Failed\");\n            WriteLog(ex.getMessage());\n            return null;\n        }\n    }\n\nprotected static String decrypt(byte[] pass)\n{\n    try\n    {\n        String key = \"6589745268754125\";\n        // Create key and cipher\n        Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        // decrypt the text\n        cipher.init(Cipher.DECRYPT_MODE, aesKey);           \n        String decrypted = new String(cipher.doFinal(pass));        \n        return decrypted;\n    }\n    catch(Exception ex)\n    {\n        WriteLog(\"Encryption Failed\");      \n        WriteLog(ex.getMessage());\n        return null;\n    }\n}\n", "idx": 1527}
{"project": "cipher", "commit_id": "Snippet26693988_8824.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/PKCS5Padding\")", "idx": 1528}
{"project": "cipher", "commit_id": "Snippet26688583_8814.java", "target": 0, "func": "private final static String algorithm = \"AES\";\nprivate final static byte[] keyValue = new byte[]      {'@', 'j', 'a', 'z', 'p', 'a', 'w', 'm', 'd', 'n', 'c', '5', 'y', 'p', 't', '*'};\n\n// generates a secret key\n private static Key generateKey( ) throws Exception {\n    Key key = new SecretKeySpec(keyValue, algorithm);\n    return key;\n}\n\n// Performs Encryption\npublic static String encrypt(String plainText) throws Exception {\n    Key key = generateKey();\n    Cipher chiper = Cipher.getInstance(algorithm);\n    chiper.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = chiper.doFinal(plainText.getBytes());\n    return new BASE64Encoder().encode(encVal);\n}\n\n// Performs decryption\npublic static String decrypt(String encryptedText) throws Exception {\n    // generate key \n    Key key = generateKey();\n    Cipher chiper = Cipher.getInstance(algorithm);\n    chiper.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedText);\n    byte[] decValue = chiper.doFinal(decordedValue);\n    return new String(decValue);\n}\n", "idx": 1529}
{"project": "cipher", "commit_id": "Snippet13782798_37273.java", "target": 0, "func": "public static String encrypt(String seed, String cleartext) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2*buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\nprivate final static String HEX = \"0123456789ABCDEF\";\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n}\n", "idx": 1530}
{"project": "cipher", "commit_id": "Snippet15434802_38499.java", "target": 0, "func": "public static void main(String args[]) {\n\n            byte[] keyForEncription = new byte[16];\n            byte[] keyForDecription = new byte[16];\n            long FixedKey = 81985526925837671L;\n            long VariableKey = 744818830;\n\n            for (int i1 = 0; i1 < 8; i1++) {\n\n                keyForEncription[i1] = (byte) (FixedKey >> (8 * i1));\n                keyForEncription[i1 + 8] = (byte) (VariableKey >> (8 * i1));\n            }\n\n            short[] data = new short[96];\n\n            data[0] = 2;\n            data[1] = 0;\n            data[2] = 0;\n            data[3] = 0;\n            data[4] = 0;\n            data[5] = 6;\n            data[6] = 6;\n            data[7] = 81;\n            data[8] = 124;\n            data[9] = 23;\n            data[10] = 3;\n\n            SecretKeySpec skeySpec = new SecretKeySpec(keyForEncription, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n            CipherOutputStream cos = new CipherOutputStream(bos, cipher);\n            DataOutputStream dos = new DataOutputStream(cos);\n\n            byte[] byteArray_data = new byte[data.length];\n\n            for (int i1 = 0; i1 < data.length; i1++)\n                byteArray_data[i1] = (byte) data[i1];\n\n                dos.write(byteArray_data, 0, 16);\n            dos.close();\n\n            byte[] ENCRYPTED_DATA = bos.toByteArray();\n\n            for (int i1 = 0; i1 < 8; i1++) {\n\n                keyForDecription[i1] = (byte) (FixedKey >> (8 * i1));\n                keyForDecription[i1 + 8] = (byte) (VariableKey >> (8 * i1));\n            }\n\n            SecretKeySpec skeySpec_decryption = new SecretKeySpec(keyForDecription,\n                    \"AES\");\n            Cipher cipher1 = Cipher.getInstance(\"AES/ECB/NoPadding\");\n            cipher1.init(Cipher.DECRYPT_MODE, skeySpec_decryption);\n\n                    ByteArrayInputStream bis = new ByteArrayInputStream(ENCRYPTED_DATA);\n            CipherInputStream cis = new CipherInputStream(bis, cipher1);\n            DataInputStream dis = new DataInputStream(cis);\n\n            byte[] DECRYPTED_DATA = new byte[byteArray_data.length];\n            dis.readFully(DECRYPTED_DATA, 4, 16);\n            cis.close();\n", "idx": 1531}
{"project": "cipher", "commit_id": "Snippet36198458_18059.java", "target": 0, "func": "cipher = Cipher.getInstance(\"AES\");\nSecretKeySpec spec = new SecretKeySpec(\"KeyOfSize16Leng.\".getBytes(\"UTF-8\"), \"AES\");\ncipher.init(Cipher.DECRYPT_MODE, spec);\n", "idx": 1532}
{"project": "cipher", "commit_id": "Snippet10562908_34900.java", "target": 0, "func": "public class AESencrp {\n\n private static final String ALGO = \"AES\";\nprivate static final byte[] keyValue = \n    new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't',\n'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\npublic static byte[] encrypt(byte[] Data) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(Data);\n    //String encryptedValue = new BASE64Encoder().encode(encVal);\n    return encVal;\n}\n\npublic static byte[] decrypt(byte[] encryptedData) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.DECRYPT_MODE, key);\n\n    byte[] decValue = c.doFinal(encryptedData);\n    return decValue;\n}\n\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, ALGO);\n    return key;\n", "idx": 1533}
{"project": "cipher", "commit_id": "Snippet9513682_33913.java", "target": 0, "func": "**public class SimpleCrypto {\npublic static String decrypt(String seed, String encrypted) throws Exception {\n    byte[] keyb = seed.getBytes(\"UTF-8\");\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    byte[] thedigest = md.digest(keyb);\n    SecretKeySpec skey = new SecretKeySpec(thedigest, \"AES/ECB/PKCS7Padding\");\n    Cipher dcipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n    dcipher.init(Cipher.DECRYPT_MODE, skey);\n    byte[] clearbyte = dcipher.doFinal(toByte(encrypted));\n    return new String(clearbyte);\n}\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n    return result;\n}\n}**\n", "idx": 1534}
{"project": "cipher", "commit_id": "Snippet30897347_13047.java", "target": 0, "func": "private static byte[] key = {\n        0x74, 0x68, 0x69, 0x73, 0x49, 0x73, 0x41, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79\n};//\"thisIsASecretKey\";\n\npublic static byte[] EncryptByteArray(byte[] array)\n{\n    try\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n        return (cipher.doFinal(array));\n    }\n    catch (Exception e)\n    {\n      e.printStackTrace();\n\n    }\n    return null;\n}\n\npublic static byte[] DecryptByteArray(byte[] array)\n{\n    try\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n        return cipher.doFinal(array);\n    }\n    catch (Exception e)\n    {\n      e.printStackTrace();\n\n    }\n    return null;\n}\n", "idx": 1535}
{"project": "cipher", "commit_id": "Snippet9271433_33807.java", "target": 0, "func": "    try {\n                 in = new FileInputStream(\"/sdcard/Pic 1.txt\");\n            } catch (FileNotFoundException e) {\n\n                e.printStackTrace();\n            }\n            File f=new File(\"/sdcard/Pic 1.txt\");\n\n            buf = new byte[(int) f.length()+2];\n\n\n            try {\n                in.read(buf);\n            } catch (IOException e) {\n\n                e.printStackTrace();\n            }\n\n            try {\n\n                decryptedData = decrypt(key, buf);\n\n                decryptedimage = BitmapFactory.decodeByteArray(\n                        decryptedData, 0, decryptedData.length);\n\n                loadedimage.setImageBitmap(decryptedimage);\n\n            } catch (Exception e) {\n\n                e.printStackTrace();\n            }\n\n        }\n    });\n\n}\n\npublic void Encription(Bitmap bm) {\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    bm.compress(Bitmap.CompressFormat.JPEG, 100, baos);\n    b = baos.toByteArray();\n\n    try {\n        keyStart = \".....\".getBytes();\n        kgen = KeyGenerator.getInstance(\"AES\");\n        sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(keyStart);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        skey = kgen.generateKey();\n        key = skey.getEncoded();\n\n        encryptedData = encrypt(key, b);\n\n        encryptedimage = BitmapFactory.decodeByteArray(encryptedData, 0,\n                encryptedData.length);\n\n\n         out = new FileOutputStream(\"/sdcard/\"+\"Pic \"+i+\".txt\");\n         out.write(encryptedData, 0, encryptedData.length);\n\n            out.close();\n    } catch (Exception e) {\n\n    }\n    i++;\n}\n\nprivate byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\nprivate byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    long start=System.currentTimeMillis()/1000l;\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\n02-19 08:27:06.972: W/System.err(12742): javax.crypto.IllegalBlockSizeException: last block incomplete in decryption\n", "idx": 1536}
{"project": "cipher", "commit_id": "Snippet37419486_19344.java", "target": 0, "func": "public class MessagesEncrypter {\n\n    static String key = \"1234567891234567\";\n\n    public static String encrypt(String input){\n        byte[] crypted = null;\n        try{\n            SecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, skey);\n            crypted = cipher.doFinal(input.getBytes());\n        }catch(Exception e){\n            System.out.println(e.toString());\n        }\n        return new String(Base64.encodeBase64(crypted));\n    }\n\n    public static String decrypt(String input){\n        byte[] output = null;\n        try{\n            SecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, skey);\n            output = cipher.doFinal(Base64.decodeBase64(input));\n        }catch(Exception e){\n            System.out.println(e.toString());\n        }\n        return new String(output);\n    }\n}\n", "idx": 1537}
{"project": "cipher", "commit_id": "Snippet42127949_24103.java", "target": 0, "func": "key = \"abcd123456789kjd\";\nbyteKey = key.getBytes();\nMessageDigest sha = MessageDigest.getInstance(\"SHA-256\");\nbyteKey = sha.digest(byteKey);\nbyteKey = Arrays.copyOf(byteKey, 32); // use only first 256 bit\nsecretKey = new SecretKeySpec(byteKey, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);\n", "idx": 1538}
{"project": "cipher", "commit_id": "Snippet45503448_27564.java", "target": 0, "func": "public class FileDecryptor {\n\u00a0\n    private static String filename;\n    private static String password;\n    private static FileInputStream inFile;\n    private static FileOutputStream outFile;\n\n    public static File decryptFile(File encryptedFile, String passkey) throws NoSuchAlgorithmException, \n                                                            InvalidKeySpecException, IOException, NoSuchPaddingException,\n                                                            InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {\n\n        String encryptedfilename = encryptedFile.getPath();\n        password = passkey;\n\n        inFile = new FileInputStream(encryptedFile);\n        StringBuffer sb = new StringBuffer(encryptedfilename);\n        sb.reverse();\n        sb.delete(0, 3);\n        sb.reverse();           //removing the \".des\" extension of the encrypted file\n        filename = new String(sb) + \".dec\";\n\n        File decrypFile = new File(filename);\n        outFile = new FileOutputStream(decrypFile);\n\n        PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n        SecretKeyFactory sKeyFac = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey sKey = sKeyFac.generateSecret(keySpec);\n\n        // Read in the previously stored salt and set the iteration count.\n        byte[] salt = new byte[8];\n        inFile.read(salt);\n        int iterations = 100;\n\n        PBEParameterSpec parameterSpec = new PBEParameterSpec(salt, iterations);\n\n        //Create the cipher and initialize it for decryption.\n        Cipher c = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        c.init(Cipher.DECRYPT_MODE, sKey, parameterSpec);\n\n        byte[] input = new byte[64];\n        int bytesRead;\n        while((bytesRead = inFile.read(input)) != -1) {\n            byte[] output = c.update(input, 0, bytesRead);\n            if(output != null) {\n                outFile.write(output);\n            }\n        }\n\n        byte[] output = c.doFinal();\n        System.out.println(\"Decrypted the data....\");\n        System.out.println(\"Wrting the data into file!!\");\n        if(output != null) {\n            outFile.write(output);\n        }\n        System.out.println(\"Closing the streams\");\n        inFile.close();\n        outFile.flush();\n        outFile.close();\n\n        return decrypFile;      \n    }\n}\n", "idx": 1539}
{"project": "cipher", "commit_id": "Snippet42696859_24734.java", "target": 0, "func": "    try {\n Cipher desCipher;\n byte[] decodedKey = pass.getText().getBytes();//the password is supplied here\n SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"DES\");\n desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n byte[] text = input.getText().getBytes();\n desCipher.init(Cipher.DECRYPT_MODE, originalKey);\n byte[] textDecrypted = desCipher.doFinal(input.getText().getBytes());\n output.setText(Arrays.toString(textDecrypted));\n} catch (NoSuchAlgorithmException | InvalidKeyException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException ex) {\n Error(ex.getMessage());\n Logger(ex.getMessage());\n}\n", "idx": 1540}
{"project": "cipher", "commit_id": "Snippet44640515_26762.java", "target": 0, "func": "public void authenticate(byte[] key) throws CardException {\n    System.out.println(\"AUTHENTICATE\");\n    byte[] encRndB = transmitRaw(new byte[] { 0x1A, 0x00 });\n    if((encRndB.length!=9)||(encRndB[0]!=AF)) {\n        throw new RuntimeException(\"Invalid response!\");\n    }\n    encRndB=Arrays.copyOfRange(encRndB, 1, 9);\n    System.out.println(\" - EncRndB: \" + toHex(encRndB));\n    byte[] rndB = desDecrypt(key, encRndB);\n    System.out.println(\" - RndB: \" + toHex(rndB));\n    byte[] rndBrot = rotateLeft(rndB);\n    System.out.println(\" - RndBrot: \" + toHex(rndBrot));\n    byte[] rndA = new byte[8];\n    generateRandom(rndA);\n    System.out.println(\" - RndA: \" + toHex(rndA));\n    byte[] encRndArotPrime = transmitRaw(ArrayUtils.addAll(new byte[] {AF}, desEncrypt(key, ArrayUtils.addAll(rndA, rndBrot))));\n    if((encRndArotPrime.length!=9)||(encRndArotPrime[0]!=0x00)) {\n        throw new RuntimeException(\"Invalid response!\");\n    }\n    encRndArotPrime=Arrays.copyOfRange(encRndArotPrime, 1, 9);\n    System.out.println(\" - EncRndArot': \" + toHex(encRndArotPrime));\n    byte[] rndArotPrime = desDecrypt(key, encRndArotPrime);\n    System.out.println(\" - RndArot': \" + toHex(rndArotPrime));\n    if(!Arrays.equals(rotateLeft(rndA), rndArotPrime)) {\n        throw new RuntimeException(\"Card authentication failed\");\n    }\n}\n\nprotected static SecureRandom rnd = new SecureRandom();\nprotected static void generateRandom(byte[] rndA) {\n    rnd.nextBytes(rndA);\n}\n\nprotected byte[] desEncrypt(byte[] key, byte[] data) {\n    return performDes(Cipher.ENCRYPT_MODE, key, data);\n}\nprotected byte[] desDecrypt(byte[] key, byte[] data) {\n    return performDes(Cipher.DECRYPT_MODE, key, data);\n}\nprivate byte[] iv = new byte[8];\nprotected byte[] performDes(int opMode, byte[] key, byte[] data) {\n    try {\n        Cipher des = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n        SecretKeyFactory desKeyFactory = SecretKeyFactory.getInstance(\"DESede\");\n        Key desKey = desKeyFactory.generateSecret(new DESedeKeySpec(ArrayUtils.addAll(key, Arrays.copyOf(key, 8))));\n        des.init(opMode, desKey, new IvParameterSpec(iv));\n        byte[] ret = des.doFinal(data);\n        if(opMode==Cipher.ENCRYPT_MODE) {\n            iv=Arrays.copyOfRange(ret, ret.length-8, ret.length);\n        } else {\n            iv=Arrays.copyOfRange(data, data.length-8, data.length);\n        }\n        return ret;\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | InvalidKeySpecException | IllegalBlockSizeException | BadPaddingException | InvalidAlgorithmParameterException e) {\n        throw new RuntimeException(e);\n    }\n}\n\nprotected static byte[] rotateLeft(byte[] in) {\n    return ArrayUtils.add(Arrays.copyOfRange(in, 1, 8), in[0]);\n}\n", "idx": 1541}
{"project": "cipher", "commit_id": "Snippet27821166_9984.java", "target": 0, "func": "static void encrypt(File file, String pass) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n\n\n        FileInputStream fis = new FileInputStream(file);\n\n\n        FileOutputStream fos = new FileOutputStream(APPPATH+\"/E_\"+file.getName());\n\n\n        SecretKeySpec sks = new SecretKeySpec(pass.getBytes(), \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, sks);\n\n        CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n        int b;\n        byte[] d = new byte[8];\n        while((b = fis.read(d)) != -1) {\n            cos.write(d, 0, b);\n        }\n\n        cos.flush();\n        cos.close();\n        fis.close();\n\n\n    }\n\n\n\n     static void decrypt(File file, String pass) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n\n            FileInputStream fis = new FileInputStream(file);\n\n            FileOutputStream fos = new FileOutputStream(APPPATH+\"/D_\"+file.getName());\n            SecretKeySpec sks = new SecretKeySpec(pass.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, sks);\n            CipherInputStream cis = new CipherInputStream(fis, cipher);\n            int b;\n            byte[] d = new byte[8];\n            while((b = cis.read(d)) != -1) {\n                fos.write(d, 0, b);\n            }\n            fos.flush();\n            fos.close();\n            cis.close();\n        }\n", "idx": 1542}
{"project": "cipher", "commit_id": "Snippet28876379_10963.java", "target": 0, "func": "SecretKey k1 = generateDESkey();\nSecretKey k2 = generateDESkey();\n\nbyte[] edeKeyBytes = new byte[24];\nSystem.arraycopy(k1.getEncoded(), 0, edeKeyBytes, 0, 8);\nSystem.arraycopy(k2.getEncoded(), 0, edeKeyBytes, 8, 8);\nSystem.arraycopy(k1.getEncoded(), 0, edeKeyBytes, 16, 8);\n\nedeKey = new SecretKeySpec(edeKeyBytes, \"DESede\");\n\nCipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\ncipher.init(Cipher.ENCRYPT_MODE, edeKey);\n\nSystem.out.println(Base64.encode(cipher.doFinal(\"plaintext\".getBytes(\"UTF-8\"))));\n", "idx": 1543}
{"project": "cipher", "commit_id": "Snippet32651324_14768.java", "target": 0, "func": "public class EncryptionTest{\nCipher c;\nstatic SecretKey  secKey;\nstatic IvParameterSpec iv;\n\npublic static void main(String[] args) throws Exception\n{\n    KeyGenerator keygen=KeyGenerator.getInstance(\"DES\");\n    secKey=keygen.generateKey();\n    byte[] encoded = secKey.getEncoded();\n\n    String KeyString=bytesToHex(encoded);\n    System.out.println(KeyString);\n\n    SecureRandom rnd = new SecureRandom();\n    iv = new IvParameterSpec(rnd.generateSeed(8));\n\n\n    byte[] ivencoded=iv.getIV();\n    String ivString=bytesToHex(ivencoded);\n\n    System.out.println(ivString);\n\n    new EncryptionTest().start();\n\n}\n// encoded the key to hex so that i can use at Linux machine to decrypt the data.\npublic static String bytesToHex(byte[] bytes) {\n    char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n    char[] hexChars = new char[bytes.length * 2];\n    for ( int j = 0; j < bytes.length; j++ ) {\n        int v = bytes[j] & 0xFF;\n        hexChars[j * 2] = hexArray[v >>> 4];\n        hexChars[j * 2 + 1] = hexArray[v & 0x0F];\n    }\n    return new String(hexChars);\n}\n\npublic void start() throws Exception\n{\n    System.out.println(\"Encryption/Decryption App\");\n\n    c = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n\n    String input =\"Data to be ecrypted\";\n\n    byte[] text = input.getBytes();\n\n    System.out.println(\"--------------------------------------------\");\n\n    System.out.println(\"Text : \" + new String(text));\n\n    byte[] textEncrypted = encrypt(text, c);\n\n\n    String encryptedString=bytesToHex(textEncrypted);\n\n    System.out.println(\"Text Encrypted : \" + encryptedString);\n\n    byte[] textDecrypted = decrypt(textEncrypted, c);\n\n    System.out.println(\"Text Decrypted : \" + new String(textDecrypted));\n\n    System.out.println(\"--------------------------------------------\");\n   }\n\npublic byte[] encrypt(byte[] b, Cipher c) throws Exception\n{\n    c.init(Cipher.ENCRYPT_MODE, secKey,iv);\n    byte[] encryptedText = null;\n    try {\n        encryptedText = c.doFinal(b);\n    } catch (IllegalBlockSizeException e) {\n        System.out.println(\"ERROR - error occured\");\n        System.exit(0);\n    } \n    return encryptedText;\n}\n\npublic byte[] decrypt(byte[] b, Cipher c) throws Exception\n{\n    c.init(Cipher.DECRYPT_MODE, secKey,iv);\n\n    byte[] decryptedText = c.doFinal(b);\n    return decryptedText;\n} \n}\n", "idx": 1544}
{"project": "cipher", "commit_id": "Snippet33521682_15574.java", "target": 0, "func": "import java.security.GeneralSecurityException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\n/**\n * A PlayActivity variant that plays an encrypted video.\n */\npublic class PlayActivity2 extends APlayActivity {\n\n    @Override\n    public Cipher getCipher() throws GeneralSecurityException {\n        final Cipher c = Cipher.getInstance(\"ARC4\");    // NoSuchAlgorithmException, NoSuchPaddingException\n        c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(\"BrianIsInTheKitchen\".getBytes(), \"ARC4\"));   // InvalidKeyException\n        return c;\n    }\n\n    @Override\n    public String getPath() {\n\n\n\n        return \"THE SELECTED PATH OF THE ENCRYPTED VIDEO\";\n    }\n}\n", "idx": 1545}
{"project": "cipher", "commit_id": "Snippet30098239_12256.java", "target": 0, "func": "byte[] data;\nString key = \"tkg96827pco74510\";\n\nbyte[] encryptedOut;\nString decryptedOut;\n\nKey aesKey;\nCipher cipher;\n\npublic void setData(String dataIn){\n    this.data = dataIn.getBytes();\n    try {\n        aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        cipher = Cipher.getInstance(\"AES\");\n\n    }catch(Exception e){\n        System.out.println(\"SET DATA ERROR - \" + e);\n    }\n}\npublic void encrypt() {\n    try{\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n        encryptedOut = cipher.doFinal(data);\n    }catch(Exception e){\n        System.out.println(e);\n    }\n}\n\npublic void decrypt(){\n    try {\n        cipher.init(Cipher.DECRYPT_MODE, aesKey);\n        decryptedOut = new String(cipher.doFinal(data));\n\n    }catch(Exception e){\n        System.out.println(\"Decrypt Error: \" + e);\n    }\n}\n\npublic byte[] getEncrypted() {\n   return encryptedOut;\n}\n\npublic String getDecrypted(){\n    return decryptedOut;\n}\n", "idx": 1546}
{"project": "cipher", "commit_id": "Snippet23291224_5634.java", "target": 0, "func": "import javax.crypto.*;\nimport javax.crypto.spec.*;\n\npublic class etest {  \n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        encryp ec=new encryp();\n        String name=\"1234567890123456\";\n        System.out.println(name);\n        try {\n            System.out.println(ec.encrypt(name));\n//          System.out.println(ec.decrypt(ec.encrypt(name)));\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n}\n\nclass encryp {\n//  public static String key = \"abcdefgh12345678\";\n    static byte []key=new byte[]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};\n    public static String encrypt(String message) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/NOPADDING\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(message.getBytes());\n        return byteArrayToHex(encrypted);\n//      return encrypted;\n    }\n    public static String decrypt(String encrypted) throws Exception {\n\n        // use key coss2\n        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] original = cipher.doFinal(hexToByteArray(encrypted));\n        String originalString = new String(original);\n        return originalString;\n    }\n    public static byte[] hexToByteArray(String hex) {\n        if (hex == null || hex.length() == 0) {\n            return null;\n        }\n\n        byte[] ba = new byte[hex.length() / 2];\n        for (int i = 0; i < ba.length; i++) {\n            ba[i] = (byte) Integer\n                    .parseInt(hex.substring(2 * i, 2 * i + 2), 16);\n        }\n        return ba;\n    }\n\n    /**\n     * \n     * @param ba\n     *            byte[]\n     * @return\n     */\n    public static String byteArrayToHex(byte[] ba) {\n        if (ba == null || ba.length == 0) {\n            return null;\n        }\n\n        StringBuffer sb = new StringBuffer(ba.length * 2);\n        String hexNumber;\n        for (int x = 0; x < ba.length; x++) {\n            hexNumber = \"0\" + Integer.toHexString(0xff & ba[x]);\n\n            sb.append(hexNumber.substring(hexNumber.length() - 2));\n        }\n        return sb.toString();\n    }\n}\n", "idx": 1547}
{"project": "cipher", "commit_id": "Snippet29671913_11737.java", "target": 0, "func": "public byte[] uncTripleDes (byte [] encryptedTextBytes, byte [] key) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException, InvalidKeySpecException{\n    DESedeKeySpec keySpec = new DESedeKeySpec(key);\n    SecretKeyFactory keyfactory = SecretKeyFactory.getInstance(\"DESede\");\n    SecretKey ky = keyfactory.generateSecret(keySpec);\n\n    Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, ky);\n    return cipher.doFinal(encryptedTextBytes);\n\n}\n", "idx": 1548}
{"project": "cipher", "commit_id": "Snippet10833113_35103.java", "target": 0, "func": "     PublicKey publicKey = x509cert.getPublicKey();\n    //publinKey is key extracted from iOS device response stream\n\n    Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n    clearText = payloadContents.getBytes();\n    //payloadContents are contents to be encrypyted\n    cipherText = cipher.doFinal(clearText);\n", "idx": 1549}
{"project": "cipher", "commit_id": "Snippet8233553_33121.java", "target": 0, "func": "String input = \"{\\\"action\\\":\\\"getQuestion\\\"}\";\nString key = \"4288f0b8060ca1b682bf795f2617cfdc\";\nbyte[] data = input.getBytes();\nbyte[] encrypted = null;\nbyte[] keyBytes = new BigInteger(key, 16).toByteArray();\nSecretKeySpec keySpec = new SecretKeySpec(keyBytes, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\ncipher.init(Cipher.ENCRYPT_MODE, keySpec);\nencrypted = cipher.doFinal(data);\nSystem.out.println(Base64.encodeBytes(encrypted));\n", "idx": 1550}
{"project": "cipher", "commit_id": "Snippet13248851_36800.java", "target": 0, "func": "    public static byte[] encrypt(byte[] plainText, byte[] keyBytes)\n        throws GeneralSecurityException {\n\n    SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n\n    byte[] cipherText = cipher.doFinal(plainText);\n\n    return cipherText;\n}\n", "idx": 1551}
{"project": "cipher", "commit_id": "Snippet31850294_13883.java", "target": 0, "func": "String key = MD5.getMD5(\"K3b2mTr3g0s1_B-m\");//MD5.getMD5(key) will return MD5 hash of key passed\n    byte[] raw = key.getBytes();\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        if (inputString != null) {\n            byte[] encrypted = cipher.doFinal(inputString.getBytes());\n            BASE64Encoder encoder = new BASE64Encoder();\n            encryptedString = encoder.encode(encrypted);\n            System.out.print(\"encrypted string :\" + encryptedString);\n        }\n", "idx": 1552}
{"project": "cipher", "commit_id": "Snippet21354559_3886.java", "target": 0, "func": "byte[] kd = key.getBytes(\"UTF-8\");\n\nSecretKeySpec ks = new SecretKeySpec(kd, \"Blowfish\");\nCipher cipher = Cipher.getInstance(\"Blowfish\");\ncipher.init(Cipher.ENCRYPT_MODE, ks);\n\nbyte[] encrypted = cipher.doFinal(text.getBytes(\"UTF-8\"));\n\nString str = new String(Base64.encodeBase64(encrypted), \"UTF-8\");\n", "idx": 1553}
{"project": "cipher", "commit_id": "Snippet10499729_34841.java", "target": 0, "func": "Cipher desCipher = Cipher.getInstance(\"DES/CBC/NoPadding\");\nDESKeySpec desSpec = new DESKeySpec(desKey);\nSecretKey des = SecretKeyFactory.getInstance(\"DES\").generateSecret(desSpec);\ndesCipher.init(Cipher.ENCRYPT_MODE, des , ivSpec);\n", "idx": 1554}
{"project": "cipher", "commit_id": "Snippet36839254_18804.java", "target": 0, "func": "Key secretKey = new SecretKeySpec(\"mysecretmysecret\".getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);\nbyte[] outputBytes = cipher.doFinal(read(sampleFile));\nreturn outputBytes;\n", "idx": 1555}
{"project": "cipher", "commit_id": "Snippet31983375_14031.java", "target": 0, "func": "public String encryptText(String plainText) throws Exception {\n    byte[] plaintext = plainText.getBytes(\"UTF-8\");//input\n    byte[] tdesKeyData =  \"sdfsdgf3q453qdsg\".getBytes(\"UTF-8\"); \n\n    Cipher c3des = Cipher.getInstance(\"DESede/ECB/PKCS7Padding\");\n    SecretKeySpec myKey = new SecretKeySpec(tdesKeyData, \"DESede\");\n\n    c3des.init(Cipher.ENCRYPT_MODE, myKey);\n    byte[] cipherText = c3des.doFinal(plaintext);\n    String encryptedString = Base64.encodeToString(cipherText,\n            Base64.DEFAULT);\n    return encryptedString;\n}\n\npublic String decrypt(String tekst) throws Exception {\n\n    byte[] tekst2 = tekst.getBytes(\"UTF-8\");\n    byte[] tdesKeyData =  \"sdfsdgf3q453qdsg\".getBytes(\"UTF-8\");\n    Cipher c3des = Cipher.getInstance(\"DESede/ECB/PKCS7Padding\");\n    SecretKeySpec myKey = new SecretKeySpec(tdesKeyData, \"DESede\");\n    String decryptedString=\"\";\n\n\n    try {\n        c3des.init(Cipher.DECRYPT_MODE, myKey);\n        byte[] cipherText = c3des.doFinal(tekst2);\n        decryptedString = Base64.decode(cipherText, Base64.DEFAULT).toString();\n    }\n    catch(Exception e)\n    {\n        decryptedString=e.getMessage();\n    }\n    return  decryptedString;\n}\n", "idx": 1556}
{"project": "cipher", "commit_id": "Snippet40019678_21957.java", "target": 0, "func": "public static void main(String[] args) {\n\n        String codedtext = null;\n        try {\n            codedtext = readFile(\"ect.txt\", StandardCharsets.UTF_8);                \n        } catch (IOException e1) {\n            e1.printStackTrace();\n        }\n\n        String decodedtext = null;\n        try {\n            decodedtext = _decrypt(codedtext,\"abcdefgh\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n}\n\nprivate static String readFile(String path, Charset encoding) \n          throws IOException \n        {\n          byte[] encoded = Files.readAllBytes(Paths.get(path));\n          return new String(encoded, encoding);\n        }\n\nprivate static String _encrypt(String message, String secretKey) throws Exception {\n\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    byte[] digestOfPassword = md.digest(secretKey.getBytes(\"utf-8\"));\n    byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n\n    SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n\n    byte[] plainTextBytes = message.getBytes(\"utf-8\");\n    byte[] buf = cipher.doFinal(plainTextBytes);\n    byte [] base64Bytes = Base64.encodeBase64(buf);\n    String base64EncryptedString = new String(base64Bytes);\n\n    return base64EncryptedString;\n}\n", "idx": 1557}
{"project": "cipher", "commit_id": "Snippet24380155_6690.java", "target": 0, "func": "            Cipher c = Cipher.getInstance(\"AES\");\n            SecretKeySpec k = new SecretKeySpec(key, \"AES\");\n", "idx": 1558}
{"project": "cipher", "commit_id": "Snippet15569663_38604.java", "target": 0, "func": "static void encrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    // Here you read the cleartext.\n    FileInputStream fis = new FileInputStream(\"data/cleartext\");\n    // This stream write the encrypted text. This stream will be wrapped by another stream.\n    FileOutputStream fos = new FileOutputStream(\"data/encrypted\");\n\n    // Length is 16 byte\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    // Create cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    // Wrap the output stream\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    // Write bytes\n    int b;\n    byte[] d = new byte[8];\n    while((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    cos.flush();\n    cos.close();\n    fis.close();\n}\n\nstatic void decrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    FileInputStream fis = new FileInputStream(\"data/encrypted\");\n\n    FileOutputStream fos = new FileOutputStream(\"data/decrypted\");\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while((b = cis.read(d)) != -1) {\n        fos.write(d, 0, b);\n    }\n    fos.flush();\n    fos.close();\n    cis.close();\n}\n", "idx": 1559}
{"project": "cipher", "commit_id": "Snippet24740361_7078.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"PBEWithMD5AndDES\");\n", "idx": 1560}
{"project": "cipher", "commit_id": "Snippet10535714_34864.java", "target": 0, "func": "import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\n\npublic class EncryptAndDecrypt{\n\n   public static void main(String[] args) {\n    try {\n        String key = \"myencryptedpass123\";\n\n        FileInputStream fis = new FileInputStream(\"File_to_encrypt.mp4\");\n        FileOutputStream fos = new FileOutputStream(\"Encrypted_file.mp4\");\n        encrypt(key, fis, fos);\n\n        FileInputStream fis2 = new FileInputStream(\"Encrypted_file.mp4\");\n        FileOutputStream fos2 = new FileOutputStream(\"File_to_decrypt.mp4\");\n        decrypt(key, fis2, fos2);\n    } catch (Throwable e) {\n        e.printStackTrace();\n    }\n}\n\npublic static void encrypt(String key, InputStream is, OutputStream os) throws Throwable {\n    encryptOrDecrypt(key, Cipher.ENCRYPT_MODE, is, os);\n}\n\npublic static void decrypt(String key, InputStream is, OutputStream os) throws Throwable {\n    encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);\n}\n\npublic static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n\n    DESKeySpec dks = new DESKeySpec(key.getBytes());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey desKey = skf.generateSecret(dks);\n    Cipher cipher = Cipher.getInstance(\"DES\"); \n\n    if (mode == Cipher.ENCRYPT_MODE) {\n        cipher.init(Cipher.ENCRYPT_MODE, desKey);\n        CipherInputStream cis = new CipherInputStream(is, cipher);\n        doCopy(cis, os);\n    } else if (mode == Cipher.DECRYPT_MODE) {\n        cipher.init(Cipher.DECRYPT_MODE, desKey);\n        CipherOutputStream cos = new CipherOutputStream(os, cipher);\n        doCopy(is, cos);\n    }\n}\n\npublic static void doCopy(InputStream is, OutputStream os) throws IOException {\n    byte[] bytes = new byte[64];\n    int numBytes;\n    while ((numBytes = is.read(bytes)) != -1) {\n        os.write(bytes, 0, numBytes);\n    }\n    os.flush();\n    os.close();\n    is.close();\n}\n", "idx": 1561}
{"project": "cipher", "commit_id": "Snippet10398040_34766.java", "target": 0, "func": "PBEKeySpec pbeKeySpec;\nPBEParameterSpec pbeParamSpec;\nSecretKeyFactory keyFac;\n\n// Salt\nbyte[] salt = {\n    (byte)0xc7, (byte)0x73, (byte)0x21, (byte)0x8c,\n    (byte)0x7e, (byte)0xc8, (byte)0xee, (byte)0x99\n};\n\n// Iteration count\nint count = 20;\n\n// Create PBE parameter set\npbeParamSpec = new PBEParameterSpec(salt, count);\n\n// Prompt user for encryption password.\n// Collect user password as char array (using the\n// \"readPasswd\" method from above), and convert\n// it into a SecretKey object, using a PBE key\n// factory.\nSystem.out.print(\"Enter encryption password:  \");\nSystem.out.flush();\npbeKeySpec = new PBEKeySpec(readPasswd(System.in));\nkeyFac = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\nSecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n\n// Create PBE Cipher\nCipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n\n// Initialize PBE Cipher with key and parameters\npbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n\n// Our cleartext\nbyte[] cleartext = \"This is another example\".getBytes();\n\n// Encrypt the cleartext\nbyte[] ciphertext = pbeCipher.doFinal(cleartext);\n", "idx": 1562}
{"project": "cipher", "commit_id": "Snippet9458612_33933.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.io.*;\nimport java.net.*;\n\npublic class socket_server_simple {\n\n    public static byte[] getBytesFromFile(File file) throws IOException {\n        InputStream is = new FileInputStream(file);\n\n        // Get the size of the file\n        long length = file.length();\n\n        // You cannot create an array using a long type.\n        // It needs to be an int type.\n        // Before converting to an int type, check\n        // to ensure that file is not larger than Integer.MAX_VALUE.\n        if (length > Integer.MAX_VALUE) {\n        // File is too large\n        }\n\n        // Create the byte array to hold the data\n        byte[] bytes = new byte[(int)length];\n\n        // Read in the bytes\n        int offset = 0;\n        int numRead = 0;\n        while (offset < bytes.length && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {\n        offset += numRead;\n    }\n\n        // Ensure all the bytes have been read in\n        if (offset < bytes.length) {\n            throw new IOException(\"Could not completely read file \"+file.getName());\n        }\n\n        // Close the input stream and return bytes\n        is.close();\n        return bytes;\n    }\n    public static String asHex (byte buf[]) {\n        StringBuffer strbuf = new StringBuffer(buf.length * 2);\n        int i;\n\n        for (i = 0; i < buf.length; i++) {\n            if (((int) buf[i] & 0xff) < 0x10)\n                strbuf.append(\"0\");\n\n            strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n        }\n        return strbuf.toString();\n    }\n\n    public static String aes_run(String message, String username, int mode) throws Exception\n    {\n\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        kgen.init(256); // 192 and 256 bits may not be available\n        // Generate the secret key specs.\n        SecretKey skey = kgen.generateKey();\n        String keyfilepath=new String(username+\".key\");\n        File keyfile = new File(keyfilepath);\n        byte[] raw = getBytesFromFile(keyfile);\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        System.out.println(\"Key file found\\n\\n\");\n           // Instantiate the cipher\n\n        byte[] encdecres;\n        String encdecresstr=new String();\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        if(mode==0)\n            {\n                cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n                encdecres= cipher.doFinal(message.getBytes());\n                encdecresstr= new String(encdecres);\n            }\n            else if(mode==1)\n            {\n                cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n                encdecres = cipher.doFinal(message.getBytes());\n                encdecresstr= new String(encdecres);\n            }\n            return encdecresstr;\n    }\n\n    public static void main(String args[]) throws Exception\n    {\n        char[] buffer = new char[3000];\n        String message;\n        String username;\n        String orgmsg;\n        char encryptedmsg[] = new char[400];\n            if(args.length<1)\n                {\n                    System.out.println(\"Usage: java socket_server_simple <port_num>\");\n                    System.exit(1);\n                }\n        ServerSocket serversock = new ServerSocket(Integer.parseInt(args[0])); //can be any port\n        System.out.println(\"Socket Instantiated!\\n\");\n        Socket  connsock = serversock.accept();\n        InputStreamReader instr =  new InputStreamReader(connsock.getInputStream());\n        DataOutputStream outstr = new DataOutputStream(connsock.getOutputStream());\n        System.out.println(\"Streams Instantiated!\\n\");  \n        BufferedReader in = new BufferedReader(instr);\n        System.out.println(\"Server is up! Waiting for username\\n\\n\");\n        username = in.readLine();\n        System.out.println(\"Username recieved: \"+username+\"\\n\\n\");              \n        while(true)\n        {\n            System.out.println(\"Waiting for message\\n\");\n            //message=in.readLine();\n            //int len = instr.readLine(encryptedmsg,0,300);\n            int len = in.read(buffer, 0,3000);  \n            String strEnc = new String(buffer,0,len);\n            //message = in.readLine();          \n            //System.out.println(\"len: \"+len);\n            System.out.println(\"Encrypted msg received: \"+strEnc);\n            /*for(int i=0; i<400; i++)\n            {\n                System.out.print((encryptedmsg[i]));\n            }*/\n            //String strEnc = new String(encryptedmsg);\n            //System.out.println(strEnc);\n            orgmsg=aes_run(strEnc,username,1);          \n            System.out.println(\"Decrypting message : \"+orgmsg+\"\\n\");\n            //orgmsg=aes_run(encryptedmsg.toString(),username,1);\n\n            //System.out.println(\"Encrypted Message :\"+asHex(message.getBytes())+\"\\nPlain text\"+orgmsg+\"\\n\");\n                //messagereturn = \"\\\"You send me ->\" +message.toUpperCase() + \"\\\"\\n\";\n                //outstr.writeBytes(messagereturn);\n        }\n    }\n}\n", "idx": 1563}
{"project": "cipher", "commit_id": "Snippet17690611_807.java", "target": 0, "func": "final Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");", "idx": 1564}
{"project": "cipher", "commit_id": "Snippet31238451_13351.java", "target": 0, "func": "package com.optixal.tests;\n\nimport java.security.Security;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\n\npublic class AES128ECB {\n\n    public static void main(String[] args) throws Exception {\n\n        Security.addProvider(new BouncyCastleProvider());\n\n        // Input\n        String hexInput = \"68656c6c6f776f726c6473696e676170\";\n        byte[] byteInput = toByteArray(hexInput);\n\n        // Key\n        String hexKey = decToHex(77);\n        byte[] byteKey = toByteArray(hexKey);\n\n        System.out.println(\" Input: \" + new String(byteInput));\n        System.out.println(\"Length: \" + byteInput.length + \"\\n\");\n        System.out.println(\"   Key: \" + hexKey);\n        System.out.println(\"Length: \" + byteKey.length + \"\\n\");\n\n        SecretKeySpec key = new SecretKeySpec(byteKey, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n        // Encrypt\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] cipherText = new byte[cipher.getOutputSize(byteInput.length)];\n        int ctLength = cipher.update(byteInput, 0, byteInput.length, cipherText, 0);\n        ctLength += cipher.doFinal(cipherText, ctLength);\n        System.out.println(\"Cipher: \" + toHexString(cipherText));\n        System.out.println(\"Length: \" + ctLength + \"\\n\");\n\n        // Decrypt\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] plainText = new byte[cipher.getOutputSize(ctLength)];\n        int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);\n        ptLength += cipher.doFinal(plainText, ptLength);\n        System.out.println(\"Output: \" + new String(plainText));\n        System.out.println(\"Length: \" + ptLength);\n    }\n\n    private static final String hexDigits = \"0123456789ABCDEF\";\n    private static final char[] hexDigitsArray = hexDigits.toCharArray();\n\n    public static String decToHex(int dec) {\n\n        final int sizeOfIntInHalfBytes = 32;\n        final int numberOfBitsInAHalfByte = 4;\n        final int halfByte = 0x0F;\n\n        StringBuilder hexBuilder = new StringBuilder(sizeOfIntInHalfBytes);\n        hexBuilder.setLength(sizeOfIntInHalfBytes);\n        for (int i = sizeOfIntInHalfBytes - 1; i >= 0; --i) {\n            int j = dec & halfByte;\n            hexBuilder.setCharAt(i, hexDigitsArray[j]);\n            dec >>= numberOfBitsInAHalfByte;\n        }\n        return hexBuilder.toString();\n    }\n\n    public static String toHexString(byte[] array) {\n        return DatatypeConverter.printHexBinary(array);\n    }\n\n    public static byte[] toByteArray(String s) {\n        return DatatypeConverter.parseHexBinary(s);\n    }\n\n}\n", "idx": 1565}
{"project": "cipher", "commit_id": "Snippet40704745_22569.java", "target": 0, "func": " public byte[] encrypt(String message) throws Exception {\n\n        getResources().getIdentifier(\"key\",\n                \"raw\", getPackageName());\n        byte[] bytes = new byte[1024];\n        try {\n            BufferedInputStream buf = new BufferedInputStream(getResources().openRawResource(\n                    getResources().getIdentifier(\"key\",\n                            \"raw\", getPackageName())));\n            buf.read(bytes, 0, bytes.length);\n            buf.close();\n        } catch (FileNotFoundException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        final SecretKey key = new SecretKeySpec(bytes, \"DESede/ECB/PKCS5Padding\");\n        final Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE,key);\n\n        final byte[] plainTextBytes = message.getBytes(\"utf-8\");\n        final byte[] cipherText = cipher.doFinal(plainTextBytes);\n\n        return cipherText;\n    }\n", "idx": 1566}
{"project": "cipher", "commit_id": "Snippet29783459_11863.java", "target": 0, "func": " public static void EncryptFile(Path POld, String key, Path PNew)\n{\n    try {\n\n        File FileOld = new File(POld.toString());\n        FileInputStream file = new FileInputStream(FileOld);\n        FileOutputStream outStream = new FileOutputStream(FileOld);\n        byte k[]= key.getBytes();\n        SecretKeySpec KEYY=new SecretKeySpec(k, \"AES\");\n        Cipher enc = Cipher.getInstance(\"AES\");\n        enc.init(Cipher.ENCRYPT_MODE, KEYY);\n        CipherOutputStream cos = new CipherOutputStream(outStream,enc);\n        byte[] buffer = new byte[1024];\n        int read;\n        while((read=file.read(buffer))!=-1){\n            cos.write(buffer, 0, read);\n        }\n        file.close();\n        outStream.flush();\n        cos.close();\n       JOptionPane.showMessageDialog(null, \"Encrypted!\");\n\n\n    }\n    catch(FileNotFoundException e) {\n       JOptionPane.showMessageDialog(null, \"File Not Found!\");\n    }\n    catch (IOException e){\n        JOptionPane.showMessageDialog(null, \"IO Exception!\");\n    }\n    catch (NoSuchPaddingException e){\n        JOptionPane.showMessageDialog(null, \"No such padding!\");\n    }\n    catch (NoSuchAlgorithmException e){\n        JOptionPane.showMessageDialog(null, \"No Such Algorithm!\");\n    }\n    catch (InvalidKeyException e){\n        JOptionPane.showMessageDialog(null, \"Invalid Key!\");\n    }\n}\n", "idx": 1567}
{"project": "cipher", "commit_id": "Snippet38271609_20214.java", "target": 0, "func": "import java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class FileTransferServer { \n\n    public static void main(String[] args) throws Exception {\n        //Initialize Sockets\n        ServerSocket ssock = new ServerSocket(5000);\n        Socket socket = ssock.accept();\n\n        //The InetAddress specification\n        InetAddress IA = InetAddress.getByName(\"localhost\"); \n\n        //Specify the file\n        File file = new File(\"/home/shanmukhh/Downloads/ApacheSpark.mp4\");\n        FileInputStream fis = new FileInputStream(file);\n        BufferedInputStream bis = new BufferedInputStream(fis); \n\n        //Get socket's output stream\n        OutputStream os = socket.getOutputStream();\n\n        //Read File Contents into contents array \n        byte[] contents;\n        long fileLength = file.length(); \n        long current = 0;\n\n        long start = System.nanoTime();\n        while(current!=fileLength){ \n            int size = 100000000;\n            if(fileLength - current >= size)\n                current += size;    \n            else{ \n                size = (int)(fileLength - current); \n                current = fileLength;\n            } \n            contents = new byte[size]; \n            bis.read(contents, 0, size); \n            String key = \"1234567812345678\";\n            Key secretKey = new SecretKeySpec(key.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            byte[] outputBytes = cipher.doFinal(bis.toString().getBytes(\"UTF-8\"));\n\n            os.write(outputBytes);\n            System.out.println(outputBytes.toString().getBytes(\"UTF-8\"));\n            System.out.print(\"Sending file ... \"+(current*100)/fileLength+\"% complete!\");\n            System.out.println(outputBytes.toString().getBytes(\"UTF-8\"));\n        }   \n\n        //os.flush(); \n        //File transfer done. Close the socket connection!\n        socket.close();\n        ssock.close();\n        System.out.println(\"File sent succesfully!\");\n    }\n}\n", "idx": 1568}
{"project": "cipher", "commit_id": "Snippet16524484_39446.java", "target": 0, "func": "public void encrypt(File file, String output_file_path) throws FileNotFoundException, IOException, GeneralSecurityException {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\"); \n    SecretKeySpec keySpec = new SecretKeySpec(HexParser.fromHexString(db_enc_key), \"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n    CipherInputStream cis = new CipherInputStream(new FileInputStream(file), cipher);\n    FileOutputStream os = new FileOutputStream(new File(output_file_path));\n    doCopy(cis, os);\n    cis.close();\n    os.close();\n}\n", "idx": 1569}
{"project": "cipher", "commit_id": "Snippet7440453_32728.java", "target": 0, "func": "package com.acc;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.PrivateKey;\nimport java.security.Provider;\nimport java.security.PublicKey;\nimport java.security.SecureRandom;\nimport java.security.Security;\nimport java.security.Signature;\nimport java.security.spec.ECGenParameterSpec;\nimport java.security.spec.ECParameterSpec;\nimport java.security.spec.EllipticCurve;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.spec.DESKeySpec;\n\n\npublic class TestECC {\n\n    public static void main(String args[]) {\n        try {\n            Provider p[] = Security.getProviders();\n            Provider p1 = Security.getProvider(\"SunEC\");\n            System.out.println(p1.getName());\n            KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"EC\", \"SunEC\");\n            System.out.println(kpg.getAlgorithm());\n\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            System.out.println(\"provider=\" + cipher.getProvider());\n\n            ECGenParameterSpec ecsp = new ECGenParameterSpec(\"sect163r2\");\n\n            kpg.initialize(ecsp);\n            KeyPair kyp = kpg.genKeyPair();\n            PublicKey pubKey = kyp.getPublic();\n\n            PrivateKey privKey = kyp.getPrivate();\n            System.out.println(cipher.getProvider());\n\n            cipher.init(Cipher.ENCRYPT_MODE, pubKey);\n\n            String cleartextFile = \"cleartext.txt\";\n            String ciphertextFile = \"ciphertextECIES.txt\";\n\n            byte[] block = new byte[64];\n            FileInputStream fis = new FileInputStream(cleartextFile);\n            FileOutputStream fos = new FileOutputStream(ciphertextFile);\n            CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n            int i;\n            while ((i = fis.read(block)) != -1) {\n                cos.write(block, 0, i);\n            }\n            cos.close();\n\n            // Decrypt\n\n            String cleartextAgainFile = \"cleartextAgainECIES.txt\";\n\n            cipher.init(Cipher.DECRYPT_MODE, privKey, ecsp);\n\n            fis = new FileInputStream(ciphertextFile);\n            CipherInputStream cis = new CipherInputStream(fis, cipher);\n            fos = new FileOutputStream(cleartextAgainFile);\n\n            while ((i = cis.read(block)) != -1) {\n                fos.write(block, 0, i);\n            }\n            fos.close();\n\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n\n}\n", "idx": 1570}
{"project": "cipher", "commit_id": "Snippet21518678_3985.java", "target": 0, "func": "String keyString = \"C0BAE23DF8B51807B3E17D21925FADF273A70181E1D81B8EDE6C76A5C1F1716E\";\nbyte[] keyValue = hexStringToByte(keyString);\nKey key = new SecretKeySpec(keyValue, \"AES\");\nCipher c1 = Cipher.getInstance(\"AES\");\nc1.init(Cipher.ENCRYPT_MODE, key);\n\nString data = \"Some data to encrypt\";\nbyte[] encVal = c1.doFinal(data.getBytes());\nString encryptedValue = Base64.encodeBase64String(encVal);\n\n\n/* Copied the below code from another post in stackexchange */\npublic static byte[] hexStringToByte(String hexstr) \n{\n  byte[] retVal = new BigInteger(hexstr, 16).toByteArray();\n  if (retVal[0] == 0) \n  {\n    byte[] newArray = new byte[retVal.length - 1];\n    System.arraycopy(retVal, 1, newArray, 0, newArray.length);\n    return newArray;\n  }\n  return retVal;\n}\n", "idx": 1571}
{"project": "cipher", "commit_id": "Snippet39038291_20908.java", "target": 0, "func": "public static byte[] decode(byte[] decrypteSrcBuffer) throws Exception {\n    Key deskey = null;\n    DESedeKeySpec spec = new DESedeKeySpec(mKeyBytes);\n    SecretKeyFactory keyfactory = SecretKeyFactory.getInstance(\"desede\");\n    deskey = keyfactory.generateSecret(spec);\n    Cipher cipher = Cipher.getInstance(\"desede/CBC/PKCS5Padding\");\n    IvParameterSpec ips = new IvParameterSpec(iv.getBytes());\n    cipher.init(Cipher.DECRYPT_MODE, deskey, ips);\n    byte[] decryptData = cipher.doFinal(decrypteSrcBuffer);\n\n    return decryptData;\n}\n", "idx": 1572}
{"project": "cipher", "commit_id": "Snippet9668115_34130.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class BlowfishTwoWayHashImpl {\n\n    static {\n        test();\n    }\n\n    public static void test() {\n        String key = \"wibble\";\n\n        String passwordToEnrypt = \"Aaaaaaa7\";\n\n        String enc = BlowfishTwoWayHashImpl.encryptBlowfish(passwordToEnrypt, key);\n        System.out.println(\"'\" + passwordToEnrypt + \"' encrypted: '\" + enc + \"'\");\n\n        String dec = BlowfishTwoWayHashImpl.decryptBlowfish(enc, key);\n        System.out.println(\"'\" + passwordToEnrypt + \"' decrypted: '\" + dec + \"'\");\n    }\n\n\n    private static final String CIPHER_NAME = \"Blowfish\";\n\n    public static String encryptBlowfish(String toEncrypt, String key) {\n        return processString(toEncrypt, key, Cipher.ENCRYPT_MODE);\n    }\n\n    public static String decryptBlowfish(String toDecrypt, String key) {\n        return processString(toDecrypt, key, Cipher.DECRYPT_MODE);\n    }\n\n    private static String processString(String toEncrypt, String key, int encryptDecryptMode) {\n\n        SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), CIPHER_NAME);\n\n        Cipher cipher;\n        try {\n            cipher = Cipher.getInstance(CIPHER_NAME);\n            cipher.init(encryptDecryptMode, secretKeySpec);\n            return new String(cipher.doFinal(toEncrypt.getBytes()));\n        }\n        catch (Exception e) {\n            throw new RuntimeException(e.toString());\n        }\n    }\n\n}\n", "idx": 1573}
{"project": "cipher", "commit_id": "Snippet4217920_31057.java", "target": 0, "func": "SecretKey key = new SecretKeySpec(keyBytes, \"DES\");\nCipher ecipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\nbyte[] utf8 = str.getBytes(\"UTF8\");\nbyte[] enc = ecipher.doFinal(utf8);\n// Encode bytes to base64 to get a string\nreturn  new String(Base64Utils.encode(enc));\n", "idx": 1574}
{"project": "cipher", "commit_id": "Snippet42770338_24816.java", "target": 0, "func": "Cipher.getInstance(\"AES\");", "idx": 1575}
{"project": "cipher", "commit_id": "Snippet4956274_31417.java", "target": 0, "func": "public String Encryption(String toEncrypt) throws Exception\n{\n        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n        EditText et = (EditText) findViewById(R.id.entry);\n        byte[] input = toEncrypt.getBytes();\n        byte[] keyBytes = \"hello\".getBytes();\n\n        //et.setText(\"in encryption\");\n        SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n        //et.setText(\"in encryption\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        et.setText(\"in encryption\");\n        byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n        int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n        ctLength += cipher.doFinal(cipherText, ctLength);\n        //et.setText(\"in encryption\");\n        //return \"abc\";\n        return cipherText.toString();\n}\n", "idx": 1576}
{"project": "cipher", "commit_id": "Snippet45295240_27410.java", "target": 0, "func": "public static void encrypt(InputStream fis,FileOutputStream fos ) throws IOException, NoSuchAlgorithmException\n            , NoSuchPaddingException, InvalidKeyException {\n        // Here you read the cleartext.\n        //FileInputStream fis = new FileInputStream(\"data/cleartext\");\n        // This stream write the encrypted text. This stream will be wrapped by another stream.\n        // FileOutputStream fos = new FileOutputStream(\"data/encrypted\");\n\n        String password =\"passwordProtectd\";\n        // Length is 16 byte\n        byte[] inputByte = password.getBytes(\"UTF-8\");\n        SecretKeySpec sks = new SecretKeySpec(inputByte, \"AES\");\n        // SecretKeySpec sks = new SecretKeySpec(password.getBytes(), \"AES\");\n        // Create cipher\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, sks);\n        // Wrap the output stream\n        CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n        // Write bytes\n        int b;\n        byte[] d = new byte[8];\n        while((b = fis.read(d)) != -1) {\n            cos.write(d, 0, b);\n        }\n        // Flush and close streams.\n        cos.flush();\n        cos.close();\n        fis.close();\n    }\n", "idx": 1577}
{"project": "cipher", "commit_id": "Snippet24505681_6840.java", "target": 0, "func": "Cipher.getInstance(\"PBEWithHmacSHA256AndDESede\")", "idx": 1578}
{"project": "cipher", "commit_id": "Snippet2280375_30276.java", "target": 0, "func": "public byte[] encryptData(byte[] data, String key) {\n    byte[] encrypted = null;\n\n    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n    byte[] keyBytes = key.getBytes();\n\n    SecretKeySpec keySpec = new SecretKeySpec(keyBytes, \"AES\");\n\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n        cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n\n        encrypted = new byte[cipher.getOutputSize(data.length)];\n        int ctLength = cipher.update(data, 0, data.length, encrypted, 0);\n        ctLength += cipher.doFinal(encrypted, ctLength);\n    } catch (Exception e) {\n        logger.log(Level.SEVERE, e.getMessage());\n    } finally {\n        return encrypted;\n    }\n}\n", "idx": 1579}
{"project": "cipher", "commit_id": "Snippet27385370_9572.java", "target": 0, "func": "import java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Scanner;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class Encrypt2 {\n\npublic static void main(String[] args) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException {\n    // TODO Auto-generated method stub\n\n    Encrypt();\n    Decrypt();\n\n}\n\n\npublic static void Encrypt() throws IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException{\n\n    Scanner input = new Scanner(System.in);\n\n    System.out.println(\"Please enter a message you'd like to encrypt\");\n    String plaintext = input.nextLine();\n\n    System.out.println(\"Please enter a 16 digit password: \");\n    String pass = input.nextLine();\n\n    byte[] key = pass.getBytes();\n    SecretKeySpec aesKey = new SecretKeySpec(key, \"AES\");\n\n    Cipher aesCipher;\n\n    // Create the cipher \n    aesCipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n    // Initialize the cipher for encryption\n    aesCipher.init(Cipher.ENCRYPT_MODE, aesKey);\n\n    //sensitive information\n    byte[] text = plaintext.getBytes();\n\n    System.out.println(\"Text [Byte Format] : \" + text);\n    System.out.println(\"Text : \" + new String(text));\n\n    // Encrypt the text\n    byte[] textEncrypted = aesCipher.doFinal(text);\n\n    System.out.println(\"Text Encryted : \" + textEncrypted);\n\n}\npublic static void Decrypt() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{\n\n     Scanner input = new Scanner(System.in);\n\n     System.out.println(\"Please enter a message you'd like to decrypt\");\n        String ciphertext = input.nextLine();\n        byte[] textEncrypted = ciphertext.getBytes();\n\n\n        System.out.println(\"Please enter a 16 digit password: \");\n        String passw = input.nextLine();\n\n\n        byte[] key = passw.getBytes();\n        SecretKeySpec aesKey = new SecretKeySpec(key, \"AES\");\n\n        Cipher aesCipher;\n\n        // Create the cipher \n        aesCipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        String pass = input.nextLine(); // Initialize the same cipher for decryption\n        aesCipher.init(Cipher.DECRYPT_MODE, aesKey);\n\n        // Decrypt the text\n        byte[] textDecrypted = aesCipher.doFinal(textEncrypted);\n\n        System.out.println(\"Text Decryted : \" + new String(textDecrypted));\n}\n}\n", "idx": 1580}
{"project": "cipher", "commit_id": "Snippet11393397_35554.java", "target": 0, "func": "<%@ page import=\"java.sql.*\" %>\n<%@ page import=\"java.security.*\" %>\n<%@ page import=\"javax.crypto.*\" %>\n<%@ page import=\"javax.crypto.spec.*\" %>\n\n<HTML>\n<HEAD>\n<TITLE>Simple JSP/Oracle Query Example</TITLE>\n</HEAD>\n<BODY>\n\n<%\n   Class.forName(\"oracle.jdbc.OracleDriver\");\n\n   Connection conn = DriverManager.getConnection(\"jdbc:oracle:thin:@xxx:xxxx:xxxx\",\"ixxxer\",\"ixxxer\");\n                        // @//machineName:port:SID,   userid,  password\n\n    Statement st=conn.createStatement();\n\n    ResultSet rs=st.executeQuery(\"Select * from Cusxxxxer\");\n\n    while(rs.next()){\n        String name=rs.getString(\"user_id\");\n        String p=rs.getString(\"password\");\n        out.println(name+\":\"+p);\n        out.println(\"</br>\");\n\n\n    String algorithm1 = \"DES\";//magical mystery constant\n    String algorithm2 = \"DES/CBC/NoPadding\";//magical mystery constant\n    IvParameterSpec iv = new IvParameterSpec( new byte [] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );//magical mystery constant\n    Cipher cipher;\n    SecretKey key;\n    String k=\"12345abc\";\n    key = new SecretKeySpec( k.getBytes( ), algorithm1 );\n    cipher = Cipher.getInstance( algorithm2 );\n\n    String str=\"test1234abc\";\n\n    cipher.init( Cipher.ENCRYPT_MODE, key, iv ); //normally you could leave out the IvParameterSpec argument, but not with Oracle\n\n    byte[] bytes=str.getBytes(\"UTF-8\");\n\n    byte[] encrypted = cipher.doFinal( bytes );\n\n    }\n%>  \n</BODY>\n</HTML>\n", "idx": 1581}
{"project": "cipher", "commit_id": "Snippet15335905_38398.java", "target": 0, "func": "import java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Hex;\n\n public class AESEncryptionDecryptionTest {\n\n   private static final String ALGORITHM       = \"AES\";\n   private static final String myEncryptionKey = \"OIXQUULC7khaJzzOOHRqgw==\";\n   private static final String UNICODE_FORMAT  = \"UTF8\";\n\n   public static String encrypt(String valueToEnc) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.ENCRYPT_MODE, key);  \n        byte[] encValue = c.doFinal(valueToEnc.getBytes(UNICODE_FORMAT));\n        String encryptedValue = new Hex().encodeHexString(encValue);\n        return encryptedValue;\n   }\n\n   public static String decrypt(String encryptedValue) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new Hex().decode(encryptedValue.getBytes());\n        byte[] decValue = c.doFinal(decordedValue);//////////LINE 50\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n   }\n\n   private static Key generateKey() throws Exception {\n        byte[] keyAsBytes;\n        keyAsBytes = myEncryptionKey.getBytes();\n        Key key = new SecretKeySpec(keyAsBytes, ALGORITHM);\n        return key;\n   }\n\n   public static void main(String[] args) throws Exception {\n\n        String value = \"PFN123\";\n        String valueEnc = AESEncryptionDecryptionTest.encrypt(value);\n        String valueDec = AESEncryptionDecryptionTest.decrypt(valueEnc);\n\n        System.out.println(\"Plain Text : \" + value);\n        System.out.println(\"Encrypted : \" + valueEnc);\n        System.out.println(\"Decrypted : \" + valueDec);\n   }\n\n}\n", "idx": 1582}
{"project": "cipher", "commit_id": "Snippet36869628_18843.java", "target": 0, "func": "public class AES\n{\nstatic String encryptionKey = \"48C3B4286FF421A4A328E68AD9E542A4\";\n    static String clearText = \"00000000000000000000000000000000\";\n\n    public static void main(String[] args) throws UnsupportedEncodingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException\n    {\n        encr();\n    }\n\n    public static String toHexString(byte[] ba)\n    {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < ba.length; i++)\n        {\n            sb.append(String.format(\"%02X \", ba[i]));\n        }\n        return sb.toString();\n    }\n\n    public static void encr() throws InvalidKeyException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException\n    {\n        //Security.addProvider(new com.sun.crypto.provider.SunJCE());\n        SecretKeySpec secretKey = new SecretKeySpec(encryptionKey.getBytes(\"UTF-8\"), \"AES\");\n\n        byte[] clearTextBytes = clearText.getBytes(\"UTF8\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] cipherBytes = cipher.doFinal(clearTextBytes);\n\n        System.out.print(\"enc1:  \");\n        for (int i = 0; i < cipherBytes.length; i++)\n        {\n            System.out.print(cipherBytes[i]);\n        }\n        System.out.println(\"\");\n\n        String cipherText = new String(cipherBytes, \"UTF8\");\n        System.out.println(\"enc2: \" + cipherText);\n\n        System.out.println(\"enc3: \" + toHexString(cipherText.getBytes(\"UTF-8\")));\n    }\n}\n", "idx": 1583}
{"project": "cipher", "commit_id": "Snippet39565618_21490.java", "target": 0, "func": "import java.security.Key;\nimport java.security.MessageDigest;\nimport java.util.Base64;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class H {\n    public static void main(String args[]){\n        try{\n        String strDefaultKey = \"QabC-+50\";\n        Key key = new SecretKeySpec(strDefaultKey.getBytes(\"UTF-8\"), \"DES\");\n        Cipher encryptCipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        encryptCipher.init(Cipher.ENCRYPT_MODE, key);\n        String seed = \"2016-09-19 05:11\";\n        String seedMd5 = MD5(seed);\n        byte[] a = encryptCipher.doFinal(seedMd5.getBytes());\n        byte[] encodeUrl = Base64.getEncoder().encode(a);\n        String finalUrl = new String(encodeUrl);\n        String finalResult = finalUrl.substring(2, 8) + finalUrl.substring(10, 13);\n        System.out.println(finalUrl);\n        System.out.println(finalResult);\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    static String MD5(String src) {\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n            StringBuffer deviceIDString = new StringBuffer(src);\n            src = convertToHex(md.digest(deviceIDString.toString().getBytes()));\n        } catch (Exception e) {\n            src = \"00000000000000000000000000000000\";\n        }\n        return src;\n    }\n\n    private static String convertToHex(byte[] data) {\n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < data.length; i++) {\n            int halfbyte = (data[i] >>> 4) & 0x0F;\n            int two_halfs = 0;\n            do {\n                if ((0 <= halfbyte) && (halfbyte <= 9))\n                    buf.append((char) ('0' + halfbyte));\n                else\n                    buf.append((char) ('a' + (halfbyte - 10)));\n                halfbyte = data[i] & 0x0F;\n            } while (two_halfs++ < 1);\n        }\n        return buf.toString();\n    }\n}\n", "idx": 1584}
{"project": "cipher", "commit_id": "Snippet31540927_13683.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"RSA/None/OAEPWithSHA1AndMGF1Padding\", \"BC\");\n", "idx": 1585}
{"project": "cipher", "commit_id": "Snippet44365286_26428.java", "target": 0, "func": "public static String DESDecrypt(String src, String password) {\n    String result = src;\n    if (src == null) {\n        return result;\n    }\n\n        if (src.isEmpty()) {\n            return result;\n        }\n\n        byte[] item = password.substring(0, 8).getBytes();\n        try {\n            DESKeySpec item2 = new DESKeySpec(item);\n            SecretKey securekey = SecretKeyFactory.getInstance(\"DES\").generateSecret(item2);\n        } catch (InvalidKeyException e) {\n            // TODO Auto-generated catch block\n\n        }\n\n        return password.substring(0, 8);\n        /*AlgorithmParameterSpec iv = new IvParameterSpec(ivkey);\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        cipher.init(2, securekey, iv);\n        return new String(cipher.doFinal(Base64.getDecoder().decode(src)));*/\n\n}\n", "idx": 1586}
{"project": "cipher", "commit_id": "Snippet43664282_25787.java", "target": 0, "func": "    try{\n    String msgout = \"\";\n    msgout = msg_text.getText().trim();\n    aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n        encrypted = cipher.doFinal(msgout.getBytes());\n    String msgout1;\n        msgout1 = String.valueOf(encrypted);\n    dout.writeUTF(msgout1);\n    msg_area.setText(msg_area.getText().trim()+\"\\nYou:\\t\"+msgout);\n    }catch(Exception e){\n\n    }\n", "idx": 1587}
{"project": "cipher", "commit_id": "Snippet46704765_28785.java", "target": 0, "func": "public static byte[] decodeFile(byte[] key, byte[] fileData) {\n    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n    byte[] decrypted = null;\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        decrypted = cipher.doFinal(fileData);\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch(Exception e){\n        // for all other exception\n        e.printStackTrace();\n    }\n    return decrypted;\n}\n", "idx": 1588}
{"project": "cipher", "commit_id": "Snippet45392201_27470.java", "target": 0, "func": "public class MainActivity extends AppCompatActivity {\nTextView txtChuoi, txtKey, txtMaHoa, txtGiaiMa;\nButton btnMaHoa, btnGiaiMa;\nprivate static Cipher ecipher;\nprivate static Cipher dcipher;\nprivate  static SecretKey key;\nString encrypted;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    addControl();\n    addEvent();\n}\n\nprivate void addEvent() {\n    btnMaHoa.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            try {\n\n                key = KeyGenerator.getInstance(\"DES\").generateKey();\n                /////How to use\n                ////txtKey.setText().toString() -----> for SecretKey?\n                ecipher = Cipher.getInstance(\"DES\");\n                ecipher.init(Cipher.ENCRYPT_MODE,key);\n                encrypted = encrypt(txtChuoi.getText().toString());\n                txtMaHoa.setText(encrypted);\n            } catch (Exception e) {\n                e.printStackTrace();\n            } \n        }\n    });\n    btnGiaiMa.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            String decrypt = decrypt(encrypted);\n            txtGiaiMa.setText(decrypt);\n        }\n    });\n}\n\nprivate String decrypt(String encrypted) {\n\n    try {\n        dcipher = Cipher.getInstance(\"DES\");\n        dcipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] dec = Base64.decode(encrypted.getBytes(),Base64.DEFAULT);\n        byte[] utf8 = dcipher.doFinal(dec);\n        return  new String(utf8,\"UTF-8\");\n    } catch (Exception e) {\n        e.printStackTrace();\n    } \n    return null;\n}\n\nprivate String encrypt(String s){\n    byte[]enc = null;\n    try {\n        byte[] utf8 = s.getBytes(\"UTF-8\");\n        enc = ecipher.doFinal(utf8);\n        enc = Base64.encode(enc,Base64.DEFAULT);\n        return new String(enc);\n    } catch (Exception e) {\n        e.printStackTrace();\n    } \n    return null;\n}\n\n\nprivate void addControl() {\n    txtChuoi = (TextView) findViewById(R.id.txtChuoi);\n    txtKey = (TextView) findViewById(R.id.txtKey);\n    txtMaHoa = (TextView) findViewById(R.id.txtMaHoa);\n    txtGiaiMa = (TextView) findViewById(R.id.txtGiaiMa);\n    btnMaHoa = (Button) findViewById(R.id.btnMaHoa);\n    btnGiaiMa = (Button) findViewById(R.id.btnGiaiMa);\n\n    }\n}\n", "idx": 1589}
{"project": "cipher", "commit_id": "Snippet47516485_29522.java", "target": 0, "func": "//imports here\npublic class Main \n\n    public static void main(String[] args) {\n\n\n        try {\n            String text = \"this text will be encrypted\";\n\n            String key = \"Bar12345Bar12345\";\n\n            //Create key and cipher\n            Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n\n            //encrypt text\n            cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            byte[] encrypted = cipher.doFinal(text.getBytes());\n            write(new String(encrypted));\n\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public static void write(String message) {\n        BufferedWriter bw = null;\n        FileWriter fw = null;\n\n        try {\n\n            String data = message;\n\n            File file = new File(FILENAME);\n            if (!file.exists()) {\n                file.createNewFile();\n            }\n\n\n            fw = new FileWriter(file.getAbsoluteFile(), true);\n            bw = new BufferedWriter(fw);\n\n            bw.write(data);\n\n        } catch (IOException e) {\n\n            e.printStackTrace();\n\n        } finally {\n\n            try {\n\n                if (bw != null)\n                    bw.close();\n\n                if (fw != null)\n                    fw.close();\n\n            } catch (IOException ex) {\n\n                ex.printStackTrace();\n\n            }\n        }\n    }\n\n}\n", "idx": 1590}
{"project": "cipher", "commit_id": "Snippet22610761_5009.java", "target": 0, "func": "public class EncryptionUtils {\n\nprivate static final String AES_CIPHER_METHOD = \"AES\";\nprivate static final int AES_KEY_SIZE = 128;\n\npublic static byte[] generateAesKey() throws NoSuchAlgorithmException {\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(AES_CIPHER_METHOD);\n    keyGenerator.init(AES_KEY_SIZE);\n    SecretKey key = keyGenerator.generateKey();\n    return key.getEncoded();\n}\n\npublic static SecretKeySpec createAesKeySpec(byte[] aesKey) {\n    return new SecretKeySpec(aesKey, AES_CIPHER_METHOD);\n}\n\npublic static void aesEncryptFile(File in, File out, SecretKeySpec aesKeySpec) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IOException {\n    Cipher aesCipher = Cipher.getInstance(AES_CIPHER_METHOD);\n    aesCipher.init(Cipher.ENCRYPT_MODE, aesKeySpec);\n    InputStream inputStream = new FileInputStream(in);\n    try {\n        OutputStream outputStream = new CipherOutputStream(new FileOutputStream(out), aesCipher);\n        try {\n            IOUtils.copy(inputStream , outputStream);\n        } finally {\n            outputStream.close();\n        }\n    } finally {\n        inputStream.close();\n    }\n}\n}\n\n\n//testcode\n@Test\npublic void testAesEncryptFile() throws IOException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException {\n    byte[] aesKey = EncryptionUtils.generateAesKey();\n    SecretKeySpec aesKeySpec = EncryptionUtils.createAesKeySpec(aesKey);\n    EncryptionUtils.aesEncryptFile(new File(\"C:\\\\test\\\\test.txt\"), new File(\"C:\\\\test\\\\test-encrypted.txt\"), aesKeySpec);\n\n    FileOutputStream outputStream = new FileOutputStream(\"C:\\\\test\\\\aes.key\");\n    outputStream.write(aesKey);\n    outputStream.close();\n}\n\n@Test\npublic void testAesDecryptFile() throws IOException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException {\n    FileInputStream keyFis = new FileInputStream(\"C:\\\\test\\\\aes.key\");\n    ByteArrayOutputStream keyBaos = new ByteArrayOutputStream();\n    IOUtils.copy(keyFis, keyBaos);\n\n    SecretKeySpec keySpec = new SecretKeySpec(keyBaos.toByteArray(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, keySpec);\n\n    FileInputStream fileInputStream = new FileInputStream(\"C:\\\\test\\\\test-encrypted.txt\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    IOUtils.copy(fileInputStream, baos);\n\n    byte[] decrypted = cipher.doFinal(baos.toByteArray());\n    FileOutputStream outputStream = new FileOutputStream(\"C:\\\\test\\\\test-decrypted.txt\");\n    outputStream.write(decrypted);\n    outputStream.close();\n\n}\n", "idx": 1591}
{"project": "cipher", "commit_id": "Snippet26614822_8742.java", "target": 0, "func": "    public void send( OutputStream op, \n                        FileInputStream filetoprocess, \n                        long l) throws Throwable\n{\n\n    byte[] inputBytes = new byte[(int) l];\n    int iRead = filetoprocess.read(inputBytes);\n    if (iRead != l)\n    {\n        System.out.println(\"Read error.\");\n        return;\n    }\n    byte[] ivBytes = \"1234567812345678\".getBytes();\n    DESKeySpec desKeySpec = new DESKeySpec(ivBytes);\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey sKey = keyFactory.generateSecret(desKeySpec);\n    Cipher ecipher = Cipher.getInstance(\"DES\");\n    ecipher.init(Cipher.ENCRYPT_MODE, sKey);\n    byte[] outputBytes = ecipher.doFinal(inputBytes);\n\n    // Send the file's size, 4 bytes.\n    // Use an 8 byte buffer to send big files > 2GB.\n    byte[] fileSize = new byte[4];\n    fileSize[0] = (byte) ((iRead & 0xff000000) >> 24);\n    fileSize[1] = (byte) ((iRead & 0x00ff0000) >> 16);\n    fileSize[2] = (byte) ((iRead & 0x0000ff00) >>  8);\n    fileSize[3] = (byte)  (iRead & 0x000000ff);\n    op.write(fileSize, 0, 4);\n\n    // Now send the file's data\n    op.write(outputBytes);\n    op.flush();\n\n    System.out.println(\"File sent\");\n\n}\n\npublic static void receive(\n                    InputStream ip, \n                    File fname, \n                    PrintWriter output2) throws Throwable\n{\n\n    byte[] ivBytes = \"1234567812345678\".getBytes();\n\n    DESKeySpec desKeySpec = new DESKeySpec(ivBytes);\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey sKey = keyFactory.generateSecret(desKeySpec);\n\n    Cipher dcipher = Cipher.getInstance(\"DES\");\n    dcipher.init(Cipher.DECRYPT_MODE, sKey);\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n\n    // Receive the file's size first  \n    byte[] bSize = new byte[4];\n    ip.read(bSize, 0, 4);\n    int fileSize=0;\n    fileSize = (int) (bSize[0]) << 24 | (int) (bSize[1]) << 16 | \n               (int) (bSize[2]) << 8 | (int) (bSize[3]);\n\n    // use a 4 or 8K buffer for better performance\n    byte[] buffer = new byte[8*1024];\n    int length;\n\n    // Read up to the file size\n    while (fileSize > 0)\n    {\n        if (fileSize > buffer.length) length=buffer.length;\n        else length=fileSize;\n        int iRead = ip.read(buffer, 0, length);\n        if (iRead > 0) \n        {\n            out.write(buffer, 0, iRead);\n            fileSize -= iRead;              \n        }\n    }\n\n    byte[] result = out.toByteArray();\n\n    byte[] outputBytes = dcipher.doFinal(result);\n\n    FileOutputStream outputStream = new FileOutputStream(fname);\n    outputStream.write(outputBytes);\n    outputStream.close();\n\n    System.out.println(\"File received\");\n\n}\n", "idx": 1592}
{"project": "cipher", "commit_id": "Snippet3451823_30740.java", "target": 0, "func": "        PBEKeySpec pbeKeySpec;\n        PBEParameterSpec pbeParamSpec;\n        SecretKeyFactory keyFac;\n\n        // Salt\n        byte[] salt = {\n            (byte)0xc7, (byte)0x73, (byte)0x21, (byte)0x8c,\n            (byte)0x7e, (byte)0xc8, (byte)0xee, (byte)0x99\n        };\n\n        // Iteration count\n        int count = 20;\n\n        // Create PBE parameter set\n        pbeParamSpec = new PBEParameterSpec(salt, count);\n\n        // Prompt user for encryption password.\n        // Collect user password as char array (using the\n        // \"readPassword\" method from above), and convert\n        // it into a SecretKey object, using a PBE key\n        // factory.\n        System.out.print(\"Enter encryption password:  \");\n        System.out.flush();\n        pbeKeySpec = new PBEKeySpec(readPassword(System.in));\n        keyFac = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n\n        // Create PBE Cipher\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n\n        // Initialize PBE Cipher with key and parameters\n        pbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n\n        // Our cleartext\n        byte[] cleartext = \"This is another example\".getBytes();\n\n        // Encrypt the cleartext\n        byte[] ciphertext = pbeCipher.doFinal(cleartext);\n", "idx": 1593}
{"project": "cipher", "commit_id": "Snippet22198856_4593.java", "target": 0, "func": "    static public byte[] dec(byte data[]){\n\n    byte[] ret = null;\n\n    SecretKeyFactory keyFac;\n\n    keyFac = SecretKeyFactory.getInstance(\"DESede\");\n\n    DESedeKeySpec keySpec = new DESedeKeySpec(passwd.getBytes());\n    SecretKey secKey = keyFac.generateSecret(keySpec);\n    Cipher cipher = Cipher.getInstance(\"DESede\");\n    cipher.init(Cipher.DECRYPT_MODE, secKey);\n\n    ret = cipher.doFinal(data);\n    return ret;\n}\n", "idx": 1594}
{"project": "cipher", "commit_id": "Snippet22551704_4953.java", "target": 0, "func": "   import java.io.File;\n   import java.io.FileInputStream;\n   import java.io.FileOutputStream;\n   import java.io.InputStream;\n\n   import javax.crypto.Cipher;\n   import javax.crypto.CipherInputStream;\n   import javax.crypto.spec.SecretKeySpec;\n\n    import android.util.Log;\n\n  public class Crypto\n {\n\npublic FileInputStream mIn;\npublic FileOutputStream mOut;\n\npublic Crypto(String fileIn, String fileOut)\n{\n    try\n    {\n        mIn = new FileInputStream(new File(fileIn));\n        mOut = new FileOutputStream(new File(fileOut));\n        decrypt(mIn, mOut);\n    }\n    catch (Exception e)\n    {\n        e.printStackTrace();\n    }\n}\n\npublic static void decrypt(InputStream in, FileOutputStream out) throws Exception\n{\n    final String string = \"346a23652a46392b4d73257c67317e352e3372482177652c\";\n    byte[] hexAsBytes = hexStringToByteArray(string);\n\n    SecretKeySpec keySpec = new SecretKeySpec(hexAsBytes, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\n    cipher.init(Cipher.DECRYPT_MODE, keySpec);\n\n    in = new CipherInputStream(in, cipher);\n    byte[] buffer = new byte[24];\n    int bytesRead;\n    while ((bytesRead = in.read(buffer)) != -1)\n    {\n        out.write(buffer, 0, bytesRead);\n        String si = new String(buffer);\n        Log.d(\"Crypto\", si);\n    }\n\n}\n\npublic static byte[] hexStringToByteArray(String s)\n{\n    int len = s.length();\n    byte[] data = new byte[len / 2];\n    for(int i = 0; i < len; i += 2)\n    {\n        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16));\n    }\n    return data;\n}\n\n       }  \n", "idx": 1595}
{"project": "cipher", "commit_id": "Snippet9596335_34048.java", "target": 0, "func": "// get cipher object for password-based encryption\nCipher cipher1 = Cipher.getInstance(\"PBEWithMD5AndDES\");//You have to pass here algorithm name which PGP uses. May be you have to find and init provider for it.\n\n// initialize cipher for decryption, using one of the \n// init() methods that takes an AlgorithmParameters \n// object, and pass it the algParams object from above\ncipher1.init(Cipher.DECRYPT_MODE, myKey, algParams);\n\n\nFileInputStream fis;\nFileOutputStream fos;\nCipherInputStream cis;\n\nfis = new FileInputStream(\"/tmp/a.txt\");\ncis = new CipherInputStream(fis, cipher1);\nfos = new FileOutputStream(\"/tmp/b.txt\");\nbyte[] b = new byte[8];\nint i = cis.read(b);\nwhile (i != -1) {\n    fos.write(b, 0, i);\n    i = cis.read(b);\n}\nfos.close();\n", "idx": 1596}
{"project": "cipher", "commit_id": "Snippet29186434_11244.java", "target": 0, "func": "public class DES {\n    private KeyGenerator keyGen;\n    private SecretKey secretKey;\n    private Cipher cipher;\n    private byte[] bytes_to_encrypt;\n    private byte[] encrypted_bytes;\n    private byte[] decrypted_bytes;\n    public DES(byte[] bytes_to_encrypt) {\n        this.bytes_to_encrypt = bytes_to_encrypt;\n        generate_key();\n        init_cipher();\n        encrypt_text();\n    }\n    private void generate_key(){\n        try{\n            keyGen = KeyGenerator.getInstance(\"DES\");\n        }catch(Exception e){\n            System.out.println(e.toString());   \n        }\n        keyGen.init(56);\n        secretKey = keyGen.generateKey();\n    }\n    private void init_cipher(){\n        try{\n            cipher = Cipher.getInstance(\"DES\");   \n        }catch(Exception e){\n            System.out.println(e.toString());    \n        }\n    }\n    private void encrypt_text(){\n        try{\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            encrypted_bytes = cipher.doFinal(bytes_to_encrypt);\n        }catch(Exception e){\n            System.out.println(e.toString());\n        }\n    }\n    private void decrypt_text(){\n        try{\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            decrypted_bytes = cipher.doFinal(encrypted_bytes);\n        }catch(Exception e){\n            System.out.println(e.toString());\n        }\n    }\n    public byte[] get_encrypted_data(){\n        return this.encrypted_bytes;    \n    }\n    public byte[] get_decrypted_data(){\n        decrypt_text();\n        return this.decrypted_bytes;    \n    }\n    public byte[] get_original_data(){\n        return this.bytes_to_encrypt;\n    }\n    public SecretKey get_key(){\n        return this.secretKey;    \n    }\n}\n", "idx": 1597}
{"project": "cipher", "commit_id": "Snippet8644989_33401.java", "target": 0, "func": "import java.security.MessageDigest;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n\n\nclass ZiggyTest2{\n\n\n        public static void main(String[] args) throws Exception{  \n            String text = \"I am sunil\";\n\n            byte[] codedtext = new ZiggyTest2().encrypt(text);\n            String decodedtext = new ZiggyTest2().decrypt(codedtext);\n\n            System.out.println(codedtext); // this is a byte array, you'll just see a reference to an array\n            System.out.println(decodedtext); // This correctly shows \"kyle boon\"\n        }\n\n        public byte[] encrypt(String message) throws Exception {\n            MessageDigest md = MessageDigest.getInstance(\"md5\");\n            byte[] digestOfPassword = md.digest(\"ABCDEABCDE\"\n                            .getBytes(\"utf-8\"));\n            byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n            for (int j = 0, k = 16; j < 8;) {\n                    keyBytes[k++] = keyBytes[j++];\n            }\n\n            SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n            IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n            Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n            byte[] plainTextBytes = message.getBytes(\"utf-8\");\n            byte[] cipherText = cipher.doFinal(plainTextBytes);\n            // String encodedCipherText = new sun.misc.BASE64Encoder()\n            // .encode(cipherText);\n\n            return cipherText;\n        }\n\n        public String decrypt(byte[] message) throws Exception {\n            MessageDigest md = MessageDigest.getInstance(\"md5\");\n            byte[] digestOfPassword = md.digest(\"ABCDEABCDE\"\n                            .getBytes(\"utf-8\"));\n            byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n            for (int j = 0, k = 16; j < 8;) {\n                    keyBytes[k++] = keyBytes[j++];\n            }\n\n            SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n            IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n            Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n            decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n            byte[] plainText = decipher.doFinal(message);\n\n            return new String(plainText, \"UTF-8\");\n        }\n    }\n", "idx": 1598}
{"project": "cipher", "commit_id": "Snippet19610476_2339.java", "target": 0, "func": "Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n", "idx": 1599}
{"project": "cipher", "commit_id": "Snippet33999427_16059.java", "target": 0, "func": "ERROR: java.security.InvalidAlgorithmParameterException: expected IV length of 0\n\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.GeneralSecurityException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.DESedeKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Encryption {\n\npublic static int MAX_KEY_LENGTH = DESedeKeySpec.DES_EDE_KEY_LEN;\nprivate static String ENCRYPTION_KEY_TYPE = \"DESede\";\nprivate static String ENCRYPTION_ALGORITHM = \"DESede/ECB/PKCS5Padding\";\nprivate final SecretKeySpec keySpec;\n\npublic Encryption(String passphrase) {\n    byte[] key;\n    try {\n        // get bytes representation of the password\n        key = passphrase.getBytes(\"UTF8\");\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalArgumentException(e);\n    }\n\n    key = padKeyToLength(key, MAX_KEY_LENGTH);\n    keySpec = new SecretKeySpec(key, ENCRYPTION_KEY_TYPE);\n}\n\n// !!! - see post below\nprivate byte[] padKeyToLength(byte[] key, int len) {\n    byte[] newKey = new byte[len];\n    System.arraycopy(key, 0, newKey, 0, Math.min(key.length, len));\n    return newKey;\n}\n\n// standard stuff\npublic byte[] encrypt(byte[] unencrypted) throws GeneralSecurityException {\n    return doCipher(unencrypted, Cipher.ENCRYPT_MODE);\n}\n\npublic byte[] decrypt(byte[] encrypted) throws GeneralSecurityException {\n    return doCipher(encrypted, Cipher.DECRYPT_MODE);\n}\n\nprivate byte[] doCipher(byte[] original, int mode) throws GeneralSecurityException {\n    Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);\n    // IV = 0 is yet another issue, we'll ignore it here\n    IvParameterSpec iv = new IvParameterSpec(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });\n    cipher.init(mode, keySpec, iv);\n    return cipher.doFinal(original);\n}\n}\n", "idx": 1600}
{"project": "cipher", "commit_id": "Snippet11125371_35332.java", "target": 0, "func": "public String decryptBlowfish(String to_decrypt, String strkey) {\n    System.out.println(to_decrypt);\n    try {\n        SecretKeySpec key = new SecretKeySpec(strkey.getBytes(), \"Blowfish\");\n        Cipher cipher = Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decrypted = cipher.doFinal(to_decrypt.getBytes());\n        return new String(decrypted);\n    } catch (Exception e) {\n        System.out.println(e.getMessage());\n        ;\n        return null;\n    }\n}\n", "idx": 1601}
{"project": "cipher", "commit_id": "Snippet31090303_13271.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n", "idx": 1602}
{"project": "cipher", "commit_id": "Snippet16940107_256.java", "target": 0, "func": "import java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n/**\n * Usage:\n * <pre>\n * String crypto = SimpleCrypto.encrypt(masterpassword, cleartext)\n * ...\n * String cleartext = SimpleCrypto.decrypt(masterpassword, crypto)\n * </pre>\n * @author ferenc.hechler\n */\npublic class SimpleCrypto {\n\n\n    public static void main(String args[])\n    {\n\n\n        try {\n\n            String sr=encrypt(\"username\", \"The AsyncTask isn\u2019t the only way to do background processing in Android, though. The Loader class is a much newer construct in Android (although now it\u2019s getting a bit dated). It was released with Honeycomb(3.0) and is now included in the Support Library. The beauty of the Loader is that it handles some of the \u2018gotchas\u2019 that usually are missed when using the AsyncTask. Mainly, it handles activity configuration changes (IE when the user rotates the screen)\");\n            System.out.println(\" &&&& \" + sr);\n            System.out.println(\"88888 \"+decrypt(\"username\", sr));\n\n\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n        public static String encrypt(String seed, String cleartext) throws Exception {\n                byte[] rawKey = getRawKey(seed.getBytes());\n                byte[] result = encrypt(rawKey, cleartext.getBytes());\n                return toHex(result);\n        }\n\n        public static String decrypt(String seed, String encrypted) throws Exception {\n                byte[] rawKey = getRawKey(seed.getBytes());\n                byte[] enc = toByte(encrypted);\n                byte[] result = decrypt(rawKey, enc);\n                return new String(result);\n        }\n\n        private static byte[] getRawKey(byte[] seed) throws Exception {\n                KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n                SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n                sr.setSeed(seed);\n            kgen.init(128, sr); // 192 and 256 bits may not be available\n            SecretKey skey = kgen.generateKey();\n            byte[] raw = skey.getEncoded();\n            return raw;\n        }\n\n\n        private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n            byte[] encrypted = cipher.doFinal(clear);\n                return encrypted;\n        }\n\n        private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n            SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n            byte[] decrypted = cipher.doFinal(encrypted);\n                return decrypted;\n        }\n\n        public static String toHex(String txt) {\n                return toHex(txt.getBytes());\n        }\n        public static String fromHex(String hex) {\n                return new String(toByte(hex));\n        }\n\n        public static byte[] toByte(String hexString) {\n                int len = hexString.length()/2;\n                byte[] result = new byte[len];\n                for (int i = 0; i < len; i++)\n                        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n                return result;\n        }\n\n        public static String toHex(byte[] buf) {\n                if (buf == null)\n                        return \"\";\n                StringBuffer result = new StringBuffer(2*buf.length);\n                for (int i = 0; i < buf.length; i++) {\n                        appendHex(result, buf[i]);\n                }\n                return result.toString();\n        }\n        private final static String HEX = \"0123456789ABCDEF\";\n        private static void appendHex(StringBuffer sb, byte b) {\n                sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n        }\n\n}\n", "idx": 1603}
{"project": "cipher", "commit_id": "Snippet22209479_4600.java", "target": 0, "func": "public class Obscure {\nprivate byte[] k = \"Now is the time for all good men to come to the aid of their country.\"\n        .getBytes();\n\npublic Obscure(String keyString) {\n    k = keyString.getBytes();\n}\n\npublic boolean encryptFile(String source, String target)\n        throws NoSuchAlgorithmException, NoSuchPaddingException,\n        InvalidKeyException, IOException {\n    Cipher encoding;\n    byte[] buffer = new byte[8192];\n\n    FileInputStream fis = new FileInputStream(source);\n    FileOutputStream fos = new FileOutputStream(target);\n\n    SecretKeySpec key = new SecretKeySpec(k, \"DES\");\n    encoding = Cipher.getInstance(\"DES\");\n    encoding.init(Cipher.ENCRYPT_MODE, key);\n    CipherOutputStream cos = new CipherOutputStream(fos, encoding);\n    int numBytes;\n    while ((numBytes = fis.read(buffer)) != -1) {\n        cos.write(buffer, 0, numBytes);\n    }\n    fos.flush();\n    fis.close();\n    fos.close();\n    cos.close();\n    return true;\n}\n}\n", "idx": 1604}
{"project": "cipher", "commit_id": "Snippet22549251_4951.java", "target": 0, "func": "package com.sample.camera;\n\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport android.util.Base64;\n\npublic class EncodeDecodeAES {\n\n\n\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    private final static int JELLY_BEAN_4_2 = 17;\n\n    private final static byte[] key = {\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    };\n\n\n\n\n    // static {\n\n    // Security.addProvider(new BouncyCastleProvider());\n\n    // }\n\n\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n\n        byte[] rawKey = getRawKey(seed.getBytes());\n\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n\n        String fromHex = toHex(result);\n\n        String base64 = new String(Base64.encodeToString(fromHex.getBytes(), 0));\n\n        return base64;\n\n\n    }\n\n\n\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n\n        byte[] seedByte = seed.getBytes();\n\n        System.arraycopy(seedByte, 0, key, 0, ((seedByte.length < 16) ? seedByte.length : 16));\n\n        String base64 = new String(Base64.decode(encrypted, 0));\n\n        byte[] rawKey = getRawKey(seedByte);\n\n        byte[] enc = toByte(base64);\n\n        byte[] result = decrypt(rawKey, enc);\n\n        return new String(result);\n\n\n    }\n\n\n\n\n    public static byte[] encryptBytes(String seed, byte[] cleartext) throws Exception {\n\n        byte[] rawKey = getRawKey(seed.getBytes());\n\n        byte[] result = encrypt(rawKey, cleartext);\n\n        return result;\n\n\n    }\n\n\n\n\n    public static byte[] decryptBytes(String seed, byte[] encrypted) throws Exception {\n\n        byte[] rawKey = getRawKey(seed.getBytes());\n\n        byte[] result = decrypt(rawKey, encrypted);\n\n        return result;\n\n\n    }\n\n\n\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\"); // , \"SC\");\n\n        SecureRandom sr = null;\n\n        if (android.os.Build.VERSION.SDK_INT >= JELLY_BEAN_4_2) {\n\n            sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n\n\n        } else {\n\n            sr = SecureRandom.getInstance(\"SHA1PRNG\");\n\n\n        }\n\n        sr.setSeed(seed);\n\n        try {\n\n            kgen.init(256, sr);\n\n            // kgen.init(128, sr);\n\n\n        } catch (Exception e) {\n\n            // Log.w(LOG, \"This device doesn't suppor 256bits, trying 192bits.\");\n\n            try {\n\n                kgen.init(192, sr);\n\n\n            } catch (Exception e1) {\n\n                // Log.w(LOG, \"This device doesn't suppor 192bits, trying 128bits.\");\n\n                kgen.init(128, sr);\n\n\n            }\n\n        }\n\n        SecretKey skey = kgen.generateKey();\n\n        byte[] raw = skey.getEncoded();\n\n        return raw;\n\n\n    }\n\n\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n        //Cipher cipher = Cipher.getInstance(\"AES\"); // /ECB/PKCS7Padding\", \"SC\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encrypted = cipher.doFinal(clear);\n\n        return encrypted;\n\n\n    }\n\n\n\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\"); // /ECB/PKCS7Padding\", \"SC\");\n\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        byte[] decrypted = cipher.doFinal(encrypted);\n\n        return decrypted;\n\n\n    }\n\n\n\n\n    public static String toHex(String txt) {\n\n        return toHex(txt.getBytes());\n\n\n    }\n\n\n\n\n    public static String fromHex(String hex) {\n\n        return new String(toByte(hex));\n\n\n    }\n\n\n\n\n    public static byte[] toByte(String hexString) {\n\n        int len = hexString.length() / 2;\n\n        byte[] result = new byte[len];\n\n        for (int i = 0; i < len; i++)\n\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2), 16).byteValue();\n\n        return result;\n\n    }\n\n\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n\n            return \"\";\n\n        StringBuffer result = new StringBuffer(2 * buf.length);\n\n        for (int i = 0; i < buf.length; i++) {\n\n            appendHex(result, buf[i]);\n\n        }\n        return result.toString();\n\n    }\n\n\n\n\n    private static void appendHex(StringBuffer sb, byte b) {\n\n        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n\n\n    }\n\n\n\n\n}\n", "idx": 1605}
{"project": "cipher", "commit_id": "Snippet26828649_8981.java", "target": 0, "func": "import java.security.KeyPair;\nimport java.security.PrivateKey;\nimport java.security.PublicKey;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\n\npublic class DHTest {\n\n    public static void main(String[] args) {\n        //Generates keyPairs for Alice and Bob\n        KeyPair kp1 = DiffieHellmanModule.genDHKeyPair();\n        KeyPair kp2 = DiffieHellmanModule.genDHKeyPair();\n        //Gets the public key of Alice(g^X mod p) and Bob (g^Y mod p)\n        PublicKey pbk1 = kp1.getPublic();\n        PublicKey pbk2 = kp2.getPublic();\n        //Gets the private key of Alice X and Bob Y\n        PrivateKey prk1 = kp1.getPrivate();\n        PrivateKey prk2 = kp2.getPrivate();\n        try {\n            //Computes secret keys for Alice (g^Y mod p)^X mod p == Bob (g^X mod p)^Y mod p\n            SecretKey key1 = DiffieHellmanModule.agreeSecretKey(prk1, pbk2, true);\n            SecretKey key2 = DiffieHellmanModule.agreeSecretKey(prk2, pbk1, true);\n            //Instantiate the Cipher of algorithm \"DES\"\n            Cipher c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n            //Init the cipher with Alice's key1\n            c.init(Cipher.ENCRYPT_MODE, key1);\n            //Compute the cipher text = E(key,plainText)\n            byte[] ciphertext = c.doFinal(\"Stand and unfold yourself\".getBytes());\n            //prints ciphertext\n            System.out.println(\"Encrypted: \" + new String(ciphertext,\"utf-8\"));\n            //inits the encryptionMode\n            c.init(Cipher.DECRYPT_MODE, key2);\n            //Decrypts and print\n            System.out.println(\"Decrypted: \" + new String(c.doFinal(ciphertext), \"utf-8\"));\n            System.out.println(\"Done\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n", "idx": 1606}
{"project": "cipher", "commit_id": "Snippet33681535_15734.java", "target": 0, "func": "Cipher iso = Cipher.getInstance(\"DESede/CBC/ISO7816-4Padding\");\n", "idx": 1607}
{"project": "cipher", "commit_id": "Snippet21995426_4428.java", "target": 0, "func": "String decodee = \"1234\";\nString key = \"oY3[r.Ri4oF\";\nString iv = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\nSecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), \"Blowfish\");\nIvParameterSpec ivSpec = new IvParameterSpec(iv.getBytes());\n\nCipher cipher = Cipher.getInstance(\"Blowfish/CFB/NoPadding\");\ncipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);\n\nbyte[] res = cipher.doFinal(decodee.getBytes());\nString s = new String(res);  \nint[] x = new int[s.length()]; for (int i = 0 ; i < s.length() ; i++) x[i] = (int) s.charAt(i);\nSystem.out.println(Arrays.toString(x));\n", "idx": 1608}
{"project": "cipher", "commit_id": "Snippet22230302_4635.java", "target": 0, "func": "KeyPairGenerator generator = KeyPairGenerator.getInstance(\"RSA\");\n        KeyPair keyPair = generator.generateKeyPair();\n        PublicKey publicKey = keyPair.getPublic();\n        PrivateKey privateKey = keyPair.getPrivate();\n\n        Cipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        aes.init(Cipher.ENCRYPT_MODE,publicKey);\n        byte[] cipherText = aes.doFinal(\"my password\".getBytes());\n        System.out.println(new String(cipherText));\n", "idx": 1609}
{"project": "cipher", "commit_id": "Snippet26651771_8765.java", "target": 0, "func": "KeyGenerator keyGenerator = KeyGenerator.getInstance(\"RC4\");\nSecretKey secretKey = keyGenerator.generateKey();\nCipher cipher = Cipher.getInstance(\"RC4\");  \nString mainKey=secretKey.toString();\nString cipherkey=cipher.toString());\n", "idx": 1610}
{"project": "cipher", "commit_id": "Snippet44461090_26520.java", "target": 0, "func": "import java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.Base64;\n\npublic class encryptData {\n  public static void main(String[] args) {\n\n    String data=\"amount=10&expiryDate=20150101 151515&orderRefNum=11001&postBackURL=http://localhost:9081/local/status.php&storeId=28\";\n    String key=\"89OUITUPRL3I8H3G\";\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(), \"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n    encryptedValue = new String(Base64.encodeBase64(cipher.doFinal(data.getBytes())));\n  }\n}\n", "idx": 1611}
{"project": "cipher", "commit_id": "Snippet34425494_16411.java", "target": 0, "func": "public class MyDES {\nprivate static String ENCRYPTION_KEY_TYPE = \"DESede\";\nprivate static String ENCRYPTION_ALGORITHM = \"DESede/CBC/NoPadding\";\n\nprivate static byte[] key = new byte[]{\n        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};\n\nprivate static byte[] iv = new byte[]{\n        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};\n\npublic static byte[] encrypt(byte[] plainText) {\n    try {\n        IvParameterSpec ivSpec = new IvParameterSpec(iv);\n        SecretKey secretKey = new SecretKeySpec(key, ENCRYPTION_KEY_TYPE);\n        Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec);\n        byte[] encrypted = cipher.doFinal(plainText);\n        return encrypted;\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (InvalidAlgorithmParameterException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n\npublic static byte[] decrypt(byte[] cipherText) {\n    try {\n        IvParameterSpec ivSpec = new IvParameterSpec(iv);\n        SecretKey secretKey = new SecretKeySpec(key, ENCRYPTION_KEY_TYPE);\n        Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);\n        cipher.init(Cipher.DECRYPT_MODE, secretKey, ivSpec);\n        byte[] decrypted = cipher.doFinal(cipherText);\n        return decrypted;\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (InvalidAlgorithmParameterException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 1612}
{"project": "cipher", "commit_id": "Snippet23266933_5611.java", "target": 0, "func": "byte[] salt = { (byte) 0xc7, (byte) 0x73, (byte) 0x21, (byte) 0x8c,\n        (byte) 0x7e, (byte) 0xc8, (byte) 0xee, (byte) 0x99 };\nfileinputstrm = new FileInputStream(path);\n\nPBEKeySpec pbeKeySpec = new PBEKeySpec(\"pass\".toCharArray());\n\nPBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, 20);\nSecretKeyFactory keyFac = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\nSecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n\nCipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\npbeCipher.init(Cipher.DECRYPT_MODE, pbeKey, pbeParamSpec);\n\nFileInputStream fis=new FileInputStream(path);\nCipherInputStream cis=new CipherInputStream(fis, pbeCipher);\nBufferedInputStream bfi=new BufferedInputStream(cis);\nbfi.read();\ncis.close();\nFileOutputStream output1 = new FileOutputStream(path+\".jpeg\");\nByteArrayOutputStream baos=new ByteArrayOutputStream();\nBufferedOutputStream bfo=new BufferedOutputStream(output1);\noutput1.write(baos.toByteArray());\n", "idx": 1613}
{"project": "cipher", "commit_id": "Snippet20744367_3333.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class CipherHelper {\n\n    // Algorithm used\n    private final static String ALGORITHM = \"DES\";\n\n    /**\n     * Encrypt data\n     * @param secretKey -   a secret key used for encryption\n     * @param data      -   data to encrypt\n     * @return  Encrypted data\n     * @throws Exception\n     */\n    public static String cipher(String secretKey, String data) throws Exception {\n        // Key has to be of length 8\n        if (secretKey == null || secretKey.length() != 8)\n            throw new Exception(\"Invalid key length - 8 bytes key needed!\");\n\n        SecretKey key = new SecretKeySpec(secretKey.getBytes(), ALGORITHM);\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        return toHex(cipher.doFinal(data.getBytes()));\n    }\n\n    /**\n     * Decrypt data\n     * @param secretKey -   a secret key used for decryption\n     * @param data      -   data to decrypt\n     * @return  Decrypted data\n     * @throws Exception\n     */\n    public static String decipher(String secretKey, String data) throws Exception {\n        // Key has to be of length 8\n        if (secretKey == null || secretKey.length() != 8)\n            throw new Exception(\"Invalid key length - 8 bytes key needed!\");\n\n        SecretKey key = new SecretKeySpec(secretKey.getBytes(), ALGORITHM);\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n        return new String(cipher.doFinal(toByte(data)));\n    }\n\n    // Helper methods\n\n    private static byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n\n        byte[] result = new byte[len];\n\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] stringBytes) {\n        StringBuffer result = new StringBuffer(2*stringBytes.length);\n\n        for (int i = 0; i < stringBytes.length; i++) {\n            result.append(HEX.charAt((stringBytes[i]>>4)&0x0f)).append(HEX.charAt(stringBytes[i]&0x0f));\n        }\n\n        return result.toString();\n    }\n\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    // Helper methods - end\n\n    /**\n     * Quick test\n     * @param args\n     */\n    public static void main(String[] args) {\n        try {\n\n            String secretKey    = \"01234567\";\n            String data=\"test\";\n            String encryptedData = cipher(secretKey, data);\n\n            System.out.println(\"encryptedData: \" + encryptedData);\n\n            String decryptedData = decipher(secretKey, encryptedData);\n\n            System.out.println(\"decryptedData: \" + decryptedData);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n", "idx": 1614}
{"project": "cipher", "commit_id": "Snippet16165977_39125.java", "target": 0, "func": "public class DesEncryptor {\nprivate static Key key;\nprivate static Cipher cipher;\n\npublic static void keyGenerate() throws NoSuchAlgorithmException, NoSuchPaddingException{\n    // get a DES cipher object and print the provider\n    cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\n    keyGen.init(64);\n    key = keyGen.generateKey();\n\n}\n\npublic static String encryptSms(String sms) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, \nIllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException{\n\n\n\n    //System.out.println( \"\\n\" + cipher.getProvider().getInfo() );\n    // encrypt using the key and the plaintext\n    //  System.out.println( \"\\nStart encryption\" );\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    byte[] cipherText = cipher.doFinal(sms.getBytes(\"UTF8\"));\n    // System.out.println( \"Finish encryption: \" );\n    return( new String(cipherText, \"UTF8\") );\n}\n\npublic static String decryptSms(String smsEncrypted) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException, \nUnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException\n{\n    // decrypt the ciphertext using the same key\n    //System.out.println( \"\\nStart decryption\" );\n\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] newPlainText = cipher.doFinal(smsEncrypted.getBytes());\n    //System.out.println( \"Finish decryption: \" );\n\n    return( new String(newPlainText, \"UTF8\") );\n}\n", "idx": 1615}
{"project": "cipher", "commit_id": "Snippet34389464_16384.java", "target": 0, "func": " KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n SecretKey myDesKey = keygenerator.generateKey();\n Cipher desCipher;\n desCipher = Cipher.getInstance(\"DES\");\n byte[] text = \"Hello\".getBytes(\"UTF8\");\n\n\n desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n byte[] textEncrypted = desCipher.doFinal(text);\n String s = new String(textEncrypted);\n System.out.println(s);\n", "idx": 1616}
{"project": "cipher", "commit_id": "Snippet22872004_5277.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\npublic class Crypto\n{\n    public Crypto(){\n\n    }\n\n    public static void main(String args[]){\n        Crypto crypto = new Crypto();\n        byte encrypted[] = crypto.encrypt(\"test encryption\");\n        System.out.println(encrypted);\n        String decrypted = crypto.decrypt(encrypted);\n        System.out.println(decrypted);\n\n    }\n\n    public byte[] encrypt(String input){\n        try{\n            Crypto crypto = new Crypto();\n            SecretKeySpec key = crypto.hashPhrase();\n            Cipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            aes.init(Cipher.ENCRYPT_MODE, key);\n            return aes.doFinal(input.getBytes());\n        }\n        catch(Exception e){\n            return null;\n        }\n    }\n\n    public SecretKeySpec hashPhrase(){\n        try{\n            String code = \"some code\";\n            MessageDigest digest = MessageDigest.getInstance(\"SHA\");\n            digest.update(code.getBytes());\n            return new SecretKeySpec(digest.digest(), 0, 16, \"AES\");\n        }\n        catch(Exception e){\n            return null;\n        }\n    }\n\n    public String decrypt(byte[] input){\n        try{\n            Crypto crypto = new Crypto();\n            SecretKeySpec key = crypto.hashPhrase();\n            Cipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            aes.init(Cipher.DECRYPT_MODE, key);\n            return new String(aes.doFinal(input));\n        }\n        catch(Exception e){\n            return null;\n        }\n    }\n}\n", "idx": 1617}
{"project": "cipher", "commit_id": "Snippet30860101_13009.java", "target": 0, "func": "String objVal=<the json>;\nSecretKeySpec lKeySpec = new SecretKeySpec(lKey.getBytes(\"UTF8\"),\"Blowfish\");\nCipher lCipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\nlCipher.init(Cipher.ENCRYPT_MODE, lKeySpec);\nbyte[] lPassword = objVal.getBytes(\"UTF8\");\nbyte[] lEncryptPassword = lCipher.doFinal(lPassword);\nString lEncryptString = new BASE64Encoder().encode(lEncryptPassword);\nStringBuffer nString = new StringBuffer();\nfor (int i = 0; i < lEncryptString.length(); i++) {\nint a = lEncryptString.charAt(i);\nif (a != 13 && a != 10 && !lEncryptString.substring(i, i + 1).equals(\" \")){\nnString.append(lEncryptString.charAt(i));\n}\nreturn nString.toString();\n", "idx": 1618}
{"project": "cipher", "commit_id": "Snippet11418336_35571.java", "target": 0, "func": "import java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n/**\n * Usage:\n * <pre>\n * String crypto = SimpleCrypto.encrypt(masterpassword, cleartext)\n * ...\n * String cleartext = SimpleCrypto.decrypt(masterpassword, crypto)\n * </pre>\n * @author ferenc.hechler\n */\n\npublic class SimpleCrypto {\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n            byte[] rawKey = getRawKey(seed.getBytes());\n            byte[] result = encrypt(rawKey, cleartext.getBytes());\n            return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n            byte[] rawKey = getRawKey(seed.getBytes());\n            byte[] enc = toByte(encrypted);\n            byte[] result = decrypt(rawKey, enc);\n            return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n            SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n            sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n            return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n            return decrypted;\n    }\n\n    public static String toHex(String txt) {\n            return toHex(txt.getBytes());\n    }\n    public static String fromHex(String hex) {\n            return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n            int len = hexString.length()/2;\n            byte[] result = new byte[len];\n            for (int i = 0; i < len; i++)\n                    result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n            return result;\n    }\n\n    public static String toHex(byte[] buf) {\n            if (buf == null)\n                    return \"\";\n            StringBuffer result = new StringBuffer(2*buf.length);\n            for (int i = 0; i < buf.length; i++) {\n                    appendHex(result, buf[i]);\n            }\n            return result.toString();\n    }\n    private final static String HEX = \"0123456789ABCDEF\";\n    private static void appendHex(StringBuffer sb, byte b) {\n            sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n    }\n\n}\n", "idx": 1619}
{"project": "cipher", "commit_id": "Snippet45859052_27936.java", "target": 0, "func": "try\n        {\n            byte[] PinBytes = Base64.decodeBase64(encryptedText);\n            byte[] VectorBytes = Base64.decodeBase64(vectorKey);\n            byte[] SecretKeyBytes = Base64.decodeBase64(secretKey);\n         // initialize the vector with the one you receive               \n            IvParameterSpec spec = new IvParameterSpec(VectorBytes);\n\n            // create the key. DESede should be correct, but if it doesn't work try also with DES\n            Key key = new SecretKeySpec(SecretKeyBytes, \"DESede\");\n\n            // Initialize the cipher\n            Cipher c = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n\n            // decrypt the string\n            c.init(Cipher.DECRYPT_MODE, key, spec);\n            byte[] decodedDecryptedBytes = c.doFinal(PinBytes);\n            return new String(decodedDecryptedBytes, \"UTF-8\");      \n        }\n        catch (java.security.InvalidAlgorithmParameterException e) { System.out.println(\"Invalid Algorithm\"); }\n        catch (javax.crypto.NoSuchPaddingException e) { System.out.println(\"No Such Padding\"); }\n        catch (java.security.NoSuchAlgorithmException e) { System.out.println(\"No Such Algorithm\"); }\n        catch (java.security.InvalidKeyException e) { System.out.println(\"InvalidKeyException : Invalid Key\"); }\n        catch (BadPaddingException e) { System.out.println(\"BadPaddingException : Invalid Key\");}\n        catch (IllegalBlockSizeException e) { System.out.println(\"IllegalBlockSizeException : Invalid Key\");}\n        catch (UnsupportedEncodingException e) { System.out.println(\"UnsupportedEncodingException : Invalid Key\");}     \n        catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        return null;\n", "idx": 1620}
{"project": "cipher", "commit_id": "Snippet45340410_27448.java", "target": 0, "func": "public static String encryptData(byte[] clearData, String key, int keySize, boolean paddingEnable)\n        throws Exception {\n    byte[] keyBytes = getEncryptionKey(key, keySize);\n    SecretKey secretKey = new SecretKeySpec(keyBytes, \"DESede\");\n    String algo = \"DESede/ECB/pkcs5padding\";\n    Cipher cipher = Cipher.getInstance(algo);\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n    byte[] cipherText = cipher.doFinal(clearData);\n         System.out.println(clearData.toString());\n    return String.valueOf(Hex.encodeHex(cipherText, false));\n}\n\npublic static String decryptData(String clearData, String key, int keySize, boolean paddingEnable)\n        throws Exception {\n   byte[] keyBytes = getEncryptionKey(key, keySize);\n    SecretKey secretKey = new SecretKeySpec(keyBytes, \"DESede\");\n    String algo = \"DESede/ECB/pkcs5padding\";\n    Cipher cipher = Cipher.getInstance(algo);\n    byte[] stringDecode = Hex.decodeHex(clearData.toCharArray());\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\n    byte[] cipherText = cipher.doFinal(stringDecode);\n    return cipherText.toString();\n}\n\n\nprivate static byte[] getEncryptionKey(String keyString, int keySize)\n        throws Exception {\n    int keyLength = keyString.length();\n    switch (keySize) {\n        case 56:\n            if (keyLength != 16) {\n                throw new InvalidKeyException(\"Hex Key length should be 16 for a 56 Bit Encryption, found [\" + keyLength + \"]\");\n            }\n            break;\n        case 112:\n            if (keyLength != 32) {\n                throw new InvalidKeyException(\"Hex Key length should be 32 for a 112 Bit Encryption, found[\" + keyLength + \"]\");\n            }\n            break;\n        case 168:\n            if ((keyLength != 32) && (keyLength != 48)) {\n                throw new InvalidKeyException(\"Hex Key length should be 32 or 48 for a 168 Bit Encryption, found[\" + keyLength + \"]\");\n            }\n            if (keyLength == 32) {\n                keyString = keyString + keyString.substring(0, 16);\n            }\n            break;\n        default:\n            throw new InvalidKeyException(\"Invalid Key Size, expected one of [56, 112, 168], found[\" + keySize + \"]\");\n    }\n    return Hex.decodeHex(keyString.toCharArray());\n}\n", "idx": 1621}
{"project": "cipher", "commit_id": "Snippet15147099_38227.java", "target": 0, "func": "public MyCipher() throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, UnsupportedEncodingException, InvalidParameterSpecException, InvalidAlgorithmParameterException {\n    Security.addProvider(new BouncyCastleProvider());\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\", \"BC\");\n    keyGen.init(new SecureRandom());\n    SecretKey keySpec = keyGen.generateKey();\n\n    this.sharedKey = new String( Base64.encodeBase64URLSafe( keySpec.getEncoded() ) );\n    this.encrypter = Cipher.getInstance(\"DES/CBC/PKCS5Padding\", \"BC\");\n    this.encrypter.init(Cipher.ENCRYPT_MODE, keySpec);\n\n    AlgorithmParameters params = this.encrypter.getParameters();\n    byte[] iv = params.getParameterSpec(IvParameterSpec.class).getIV();\n    IvParameterSpec ivSpec = new IvParameterSpec(iv);\n\n    this.sharedIV = new String( Base64.encodeBase64URLSafe( iv ) );\n    this.decrypter = Cipher.getInstance(\"DES/CBC/PKCS5Padding\", \"BC\");\n    this.decrypter.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);\n}\n", "idx": 1622}
{"project": "cipher", "commit_id": "Snippet45971798_28074.java", "target": 0, "func": "public static void test() {\n    String stringToEncrypt = \"R\";\n    stringToEncrypt= Encryption.encrypt(stringToEncrypt);\n    System.out.println(stringToEncrypt);\n    stringToEncrypt= Encryption.decrypt(stringToEncrypt);\n    System.out.println(stringToEncrypt);\n}\n\npublic class Encryption {\n    private static final String key = \"ert25424o\";\n\n    public static String encrypt(String password){\n        try\n        {\n        Key clef = new SecretKeySpec(key.getBytes(\"ISO-8859-2\"),\"Blowfish\");\n        Cipher cipher=Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.ENCRYPT_MODE,clef);\n        return new String(cipher.doFinal(password.getBytes()));\n        }\n        catch (Exception e)\n        {\n            return null;\n        }\n    }\n\n    public static String decrypt(String password){\n        try\n        {\n            Key clef = new SecretKeySpec(key.getBytes(\"ISO-8859-2\"),\"Blowfish\");\n            Cipher cipher=Cipher.getInstance(\"Blowfish\");\n            cipher.init(Cipher.DECRYPT_MODE,clef);\n            return new String(cipher.doFinal(password.getBytes()));\n        }\n        catch (Exception e)\n        {\n            System.out.println(e);\n            return null;\n        }\n    }\n}\n", "idx": 1623}
{"project": "cipher", "commit_id": "Snippet33505223_15558.java", "target": 0, "func": "public byte[] createMac(byte[] fileBytes, String nick){\n    byte[] mac = null;\n    byte[] digest;\n    try {\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        md.update(fileBytes);\n        digest = md.digest();\n\n        KeyFactory keyFactory = KeyFactory.getInstance(\"DH\");\n\n        byte[] myPrivateKey = Files.readAllBytes(Paths.get(dirMyKeys+\"//dhPrivateKey.txt\"));\n        PrivateKey dhPrivKey = keyFactory.generatePrivate(new PKCS8EncodedKeySpec(myPrivateKey));\n\n\n        byte[] myPublicKey = Files.readAllBytes(Paths.get(dirKeys+\"/\"+nick+\"DhPublicKey.txt\"));\n        System.out.println(dirKeys+\"/\"+nick+\"DhPublicKey.txt\");\n        PublicKey dhPubKey = keyFactory.generatePublic(new X509EncodedKeySpec(myPublicKey));\n\n        SecretKey secretKey = combine(dhPrivKey, dhPubKey);\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        System.out.println( \"\\nStart decryption\" );\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        mac = cipher.doFinal(digest);\n        System.out.println( \"Finish decryption: \" );\n\n        return mac;\n\n    } catch (NoSuchAlgorithmException | IOException | InvalidKeySpecException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException | NoSuchPaddingException ex) {\n        Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    return mac;\n}\n\nprivate static SecretKey combine(PrivateKey private1, PublicKey public1) throws NoSuchAlgorithmException, InvalidKeyException  {\n    KeyAgreement ka = KeyAgreement.getInstance(\"DH\");\n    ka.init(private1);\n    //error on this line\n    ka.doPhase(public1, true);\n    SecretKey secretKey = ka.generateSecret(\"DES\");\n    return secretKey;\n}\n", "idx": 1624}
{"project": "cipher", "commit_id": "Snippet24907530_7245.java", "target": 0, "func": "public String cryptString(String s) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException, BadPaddingException, IllegalBlockSizeException {\n    byte[] KeyData = this.cryptKey.getBytes();\n    SecretKeySpec KS = new SecretKeySpec(KeyData, \"Blowfish\");\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n    cipher.init(Cipher.ENCRYPT_MODE, KS);\n    String ret = new String(cipher.doFinal(s.getBytes(\"UTF-8\")));\n    return ret;\n}\n\npublic String decryptString(byte[] s) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n    byte[] KeyData = this.cryptKey.getBytes();\n    SecretKeySpec KS = new SecretKeySpec(KeyData, \"Blowfish\");\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n    cipher.init(Cipher.DECRYPT_MODE, KS);\n    String ret = new String(cipher.doFinal(s));\n    return ret;\n}\n", "idx": 1625}
{"project": "cipher", "commit_id": "Snippet7418007_32722.java", "target": 0, "func": "public static String encrypt(String src, String key) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        DESKeySpec dks = new DESKeySpec(key.substring(0, 8).getBytes());\n\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey securekey = keyFactory.generateSecret(dks);\n        IvParameterSpec iv = new IvParameterSpec(key.substring(0, 8)\n                .getBytes());\n\n        cipher.init(Cipher.ENCRYPT_MODE, securekey, iv);\n        StringBuilder builder = new StringBuilder();\n        byte[] bytes = cipher.doFinal(src.getBytes(\"UTF-8\"));\n        for (byte b : bytes) {\n            System.out.println(b);\n                            builder.append(b);\n        }\n\n        return builder.toString().toUpperCase();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return \"\";\n}\n", "idx": 1626}
{"project": "cipher", "commit_id": "Snippet45412178_27486.java", "target": 0, "func": "package org.apache.drill.exec.fn.impl;\n\nimport com.google.common.base.Charsets;\nimport io.netty.buffer.DrillBuf;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.net.BCodec;\nimport org.apache.drill.exec.expr.DrillSimpleFunc;\nimport org.apache.drill.exec.expr.annotations.FunctionTemplate;\nimport org.apache.drill.exec.expr.annotations.Output;\nimport org.apache.drill.exec.expr.annotations.Param;\nimport org.apache.drill.exec.expr.annotations.Workspace;\nimport org.apache.drill.exec.expr.holders.VarCharHolder;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.inject.Inject;\n\n@functiontemplate(\nname = \"decode_cid\",\nscope = FunctionTemplate.FunctionScope.SIMPLE,\nnulls = FunctionTemplate.NullHandling.NULL_IF_NULL\n)\n\npublic class DecodeCidFunction implements DrillSimpleFunc {\n\n@Param\nVarCharHolder raw_input;\n// @Param\n// VarCharHolder raw_key;\n\n@Output\nVarCharHolder out;\n\n@Inject\nDrillBuf buffer;\n// @workspace\n// KeyGenerator keygenerator;\n\n@Workspace\nSecretKey myDesKey;\n\n@Workspace\nCipher desCipher;\n\n@Workspace\nBCodec bCodec;\n\n@Override\npublic void setup() {\n    try {\n        String key = \"this is a secret\";\n        javax.crypto.SecretKeyFactory factory = javax.crypto.SecretKeyFactory.getInstance(\"DES\");\n        myDesKey = factory.generateSecret(new javax.crypto.spec.DESKeySpec(key.getBytes())) ;\n        System.out.println(\"myDesKey = \"+myDesKey.toString());\n        // Create the cipher\n        desCipher = Cipher.getInstance(\"DES\");\n\n        // Initialize the cipher for encryption\n        desCipher.init(Cipher.DECRYPT_MODE, myDesKey);\n\n        bCodec =  new BCodec(\"UTF-8\");\n\n    } catch(Exception e) {\n        System.out.println(\"may i come here\");\n        e.printStackTrace();\n    }\n}\n\n@Override\npublic void eval() {\n    String input = org.apache.drill.exec.expr.fn.impl.StringFunctionHelpers.toStringFromUTF8(raw_input.start, raw_input.end, raw_input.buffer);\n    String output = \"\";\n    System.out.println(\"input = \" + input);\n    if (input.startsWith(\"=?\"))\n    {\n        try{\n            output = bCodec.decode(input);\n        }catch(Exception e){\n            System.out.println(\"find an error :\" +e.toString());\n            output  = \"\";\n        }\n    }else{\n        byte[] bts = new byte[input.length() / 2];\n        for (int i = 0; i < bts.length; i++) {\n            bts[i] = (byte) Integer.parseInt(input.substring(2*i, 2*i+2), 16);\n        }\n        System.out.println(\"bts = \" +bts.toString());\n        try{\n            byte[] decodedString = desCipher.doFinal(bts) ;\n            output = new String(decodedString, \"utf-8\");\n        }catch(Exception e){\n            System.out.println(\"i come here \" + e.toString());\n            output=\"\";\n        }\n    }\n    System.out.println(\"output = \" + output);\n    out.buffer = buffer;\n    out.start = 0;\n    out.end = output.getBytes().length;\n    buffer.setBytes(0, output.getBytes());\n}\n}\n", "idx": 1627}
{"project": "cipher", "commit_id": "Snippet24807123_7132.java", "target": 0, "func": "byte key_bytes[] = \"12345678\".getBytes();\nSecretKeySpec _keyspec = new SecretKeySpec(key_bytes, \"DES\");\nCipher dcipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\ndcipher.init(Cipher.DECRYPT_MODE, _keyspec);\n\nbyte[] dec = new Base64().decode(value);\nbyte[] utf8 = dcipher.doFinal(dec);  // Decrypt, throws exception\nreturn new String(utf8, \"UTF8\");\n", "idx": 1628}
{"project": "cipher", "commit_id": "Snippet45835697_27902.java", "target": 0, "func": "// this is the encripted text\nbyte[] PinBytes = Base64.decodeBase64(encryptedText.getBytes(\"utf-8\"));\n\nbyte[] VectorBytes = Base64.decodeBase64(vectorKey.getBytes(\"utf-8\"));\n\nbyte[] SecretKeyBytes = Base64.decodeBase64(secretKey.getBytes(\"utf-8\")); \n\n// initialize the vector with the one you receive               \nIvParameterSpec spec = new IvParameterSpec(VectorBytes);\n\n// create the key. DESede should be correct, but if it doesn't work try also with DES\nKey key = new SecretKeySpec(SecretKeyBytes, \"DESede\");\n\n// Initialize the cipher\nCipher c = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n\n// decrypt the string\nc.init(Cipher.DECRYPT_MODE, key, spec);\nbyte[] decodedDecryptedBytes = c.doFinal(PinBytes);\n", "idx": 1629}
{"project": "cipher", "commit_id": "Snippet24618698_6969.java", "target": 0, "func": "public class MainActivity extends Activity {\n\nstatic byte[] keyValue = {'T', 'h', 'e', 'B', 'e', 's', 't', 'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y'};\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    ImageView imgView = (ImageView) findViewById(R.id.imageView1);\n\n    Bitmap picture = getBitmapFromAsset(\"result.jpg\");\n    Bitmap resultPic = picture.copy(Bitmap.Config.ARGB_8888, true);\n    picture.recycle();\n\n    int width = resultPic.getWidth();\n    int height = resultPic.getHeight();\n\n    int[] pixels = new int[width * height];\n\n    resultPic.getPixels(pixels, 0, width, 0, 0, width, height);\n\n    //--------- perform encryption\n\n    byte[] content = intArrToByteArr(pixels);\n\n    try {\n\n        content = decrypt(content);\n\n    } catch (Exception e) { }\n\n    pixels = byteArrToIntArr(content);\n\n    //--------------------------------------------\n\n    resultPic.setPixels(pixels, 0, width, 0, 0, width, height);\n\n    imgView.setImageBitmap(resultPic);\n\n    File file = new File(Environment.getExternalStorageDirectory().toString() + \"/result.jpg\");\n\n    try {\n\n        FileOutputStream fOut = new FileOutputStream(file);\n        resultPic.compress(Bitmap.CompressFormat.JPEG, 100, fOut);\n        fOut.close();\n    }\n    catch (Exception e) { }\n}\n\npublic static byte[] encrypt(byte[] Data) throws Exception {\n\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(\"RC4\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n\n    byte[] encVal = c.doFinal(Data);\n\n    return encVal;\n}\n\npublic static byte[] decrypt(byte[] encryptedData) throws Exception {\n\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(\"RC4\");\n    c.init(Cipher.DECRYPT_MODE, key);\n\n    byte[] decValue = c.doFinal(encryptedData);\n\n    return decValue;\n}\n\nprivate static Key generateKey() throws Exception {\n\n    Key key = new SecretKeySpec(keyValue, \"RC4\");\n\n    return key;\n}\n\npublic static byte[] intArrToByteArr(int[] input){\n\n    ByteBuffer byteBuffer = ByteBuffer.allocate(input.length * 4);\n    IntBuffer intBuffer = byteBuffer.asIntBuffer();\n    intBuffer.put(input);\n\n    byte[] array = byteBuffer.array();\n\n    return array;\n}\n\npublic static int[] byteArrToIntArr(byte[] input){\n\n    IntBuffer intBuf = ByteBuffer.wrap(input).order(ByteOrder.BIG_ENDIAN).asIntBuffer();\n    int[] array = new int[intBuf.remaining()];\n    intBuf.get(array);\n\n    return array;\n}\n\nprivate Bitmap getBitmapFromAsset(String strName) {\n\n    AssetManager assetManager = getAssets();\n    InputStream istr = null;\n\n    try {\n\n        istr = assetManager.open(strName);\n    } catch (IOException e) { }\n\n    Bitmap bitmap = BitmapFactory.decodeStream(istr);\n\n    return bitmap;\n}\n", "idx": 1630}
{"project": "cipher", "commit_id": "Snippet37699169_19671.java", "target": 0, "func": "String key = \"Bar12345Bar12345\"; // 128 bit key\n// Create key and cipher\nKey aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\n// encrypt the text\ncipher.init(Cipher.ENCRYPT_MODE, aesKey);\nbyte[] encrypted = cipher.doFinal(text.getBytes());\nString e=new String(encrypted);\nbyte[] encrypted1 = cipher.doFinal(e.getBytes());\nSystem.out.println(encrypted.length+\" \"+encrypted1.length);\nSystem.out.println(e);\n// decrypt the text\ncipher.init(Cipher.DECRYPT_MODE, aesKey);\nString decrypted = new String(cipher.doFinal(encrypted));\nSystem.out.println(decrypted);\n", "idx": 1631}
{"project": "cipher", "commit_id": "Snippet40737563_22596.java", "target": 0, "func": "import java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class AdvanceEncryptionSecurity {\n\n    private static final String ALGORITHM = \"AES\";\n    private static final int ITERATIONS = 2;\n    private static final byte[] keyValue = new byte[] { 'P', 'R', 'S', 'a', 'n', 'd', 'A', 'P', 'F', 'A', 'A', 'l', 'l', 'i', 'e', 'd' };\n    private static String salt = \"prs and pfa\";\n\n    public static String encrypt(String value) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);  \n        c.init(Cipher.ENCRYPT_MODE, key);\n\n        String valueToEnc = null;\n        String eValue = value;\n        for (int i = 0; i < ITERATIONS; i++) {\n            valueToEnc = salt + eValue;\n            byte[] encValue = c.doFinal(valueToEnc.getBytes());\n            eValue = new BASE64Encoder().encode(encValue);\n        }\n        return eValue;\n    }\n\n    public static String decrypt(String value) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.DECRYPT_MODE, key);\n\n        String dValue = null;\n        String valueToDecrypt = value;\n        for (int i = 0; i < ITERATIONS; i++) {\n            byte[] decordedValue = new BASE64Decoder().decodeBuffer(valueToDecrypt);\n            byte[] decValue = c.doFinal(decordedValue);\n            dValue = new String(decValue).substring(salt.length());\n            valueToDecrypt = dValue;\n        }\n        return dValue;\n    }\n\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGORITHM);\n        return key;\n    }\n}\n", "idx": 1632}
{"project": "cipher", "commit_id": "Snippet4655649_31248.java", "target": 0, "func": "public String encrypt(String data) throws Exception{\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        Key k = new SecretKeySpec(key.getBytes(), 0, key.length(), \"AES\");\n\n        // Calculate ciphertext size.\n        int blocksize = 16;\n        int ciphertextLength = 0;\n        int remainder = data.getBytes().length % blocksize;\n        if (remainder == 0) {\n            ciphertextLength = data.getBytes().length + blocksize;\n        } else {\n            ciphertextLength = data.getBytes().length - remainder + blocksize;\n        }\n\n\n        cipher.init(Cipher.ENCRYPT_MODE, k);\n        byte[] buf = new byte[ciphertextLength];\n        cipher.doFinal(data.getBytes(), 0, data.length(), buf, 0);\n\n        StringBuffer strbuf = new StringBuffer(buf.length * 2);\n        int i;\n\n        for (i = 0; i < buf.length; i++) {\n            if (((int) buf[i] & 0xff) < 0x10) {\n                strbuf.append(\"0\");\n            }\n\n            strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n        }\n        return strbuf.toString();\n    } catch (Exception e) {\n        Logger.logException(e);\n    }\n    return null;\n}\n", "idx": 1633}
{"project": "cipher", "commit_id": "Snippet36883971_18867.java", "target": 0, "func": "import java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n/**\n * Usage:\n *\n\n * String crypto = SimpleCrypto.encrypt(masterpassword, cleartext)\n * ...\n * String cleartext = SimpleCrypto.decrypt(masterpassword, crypto)\n *\n\n * @author ferenc.hechler\n */\n\npublic class SimpleCrypto {\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2*buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n    private final static String HEX = \"0123456789ABCDEF\";\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n    }\n}\n", "idx": 1634}
{"project": "cipher", "commit_id": "Snippet22231051_4639.java", "target": 0, "func": "public static String encryptString(String password, String source, String fileName, String fileDir) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, FileNotFoundException, IOException {\n    FileOutputStream fos = null;\n    CipherInputStream cis;\n\n    byte key[] = password.getBytes();\n    SecretKeySpec secretKey = new SecretKeySpec(key, \"DES\");\n\n    Cipher encrypt = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    encrypt.init(Cipher.ENCRYPT_MODE, secretKey);\n\n    InputStream fileInputStream = new ByteArrayInputStream(source.getBytes());//Here I am getting file data as byte array. You can convert your file data to InputStream  by other way too.\n\n    File dataFile = new File(fileDir, fileName); //dataDir is location where my file is stored\n    if (!dataFile.exists()) {\n        cis = new CipherInputStream(fileInputStream, encrypt);\n        try {\n            fos = new FileOutputStream(dataFile);\n            byte[] b = new byte[32];\n            int i;\n            while ((i = cis.read(b)) != -1) {\n                fos.write(b, 0, i);\n            }\n            return fileName;\n        } finally {\n            try {\n                if (fos != null) {\n                    fos.flush();\n                    fos.close();\n                }\n                cis.close();\n                fileInputStream.close();\n            } catch (IOException e) {\n                //IOException\n            }\n        }\n    }\n    return \"\";\n}\n", "idx": 1635}
{"project": "cipher", "commit_id": "Snippet14494781_37775.java", "target": 0, "func": "FileInputStream fis = new FileInputStream(\"/sdcard/encrypted.apk\");\n\nFileOutputStream fos = new FileOutputStream(\"/sdcard/decrypted.apk\");\nSecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, sks);\nCipherInputStream cis = new CipherInputStream(fis, cipher);\nint b;\nbyte[] d = new byte[8];\nwhile((b = cis.read(d)) != -1) {\n    fos.write(d, 0, b);\n}\nfos.flush();\nfos.close();\ncis.close();\n", "idx": 1636}
{"project": "cipher", "commit_id": "Snippet37442548_19374.java", "target": 0, "func": "public class AES {\n    private String a= \"AES/ECB/NoPadding\";\n    private byte[] key;\n    Cipher c;\n    public AES(byte [] key) throws NoSuchAlgorithmException, NoSuchPaddingException{\n            this.key = key;\n            c = Cipher.getInstance(a);\n        }\npublic String encrypt(byte[] Data) throws Exception{\n        Key k = new SecretKeySpec(key, \"AES\");\n        c.init(Cipher.ENCRYPT_MODE, k);\n        byte[] encoded = c.doFinal(Data);\n        String encrypted= new String(encoded);\n        return encrypted;\n\n    }\npublic String decrypt(byte[] v) throws Exception{\n        Key k = new SecretKeySpec(key, \"AES\");\n        if(v.length%16!=0)\n            return null;\n        c.init(Cipher.DECRYPT_MODE, k);\n        byte[] decv = c.doFinal(v);\n        String decrypted = new String(decv);\n        return decrypted;\n    }\n}\n", "idx": 1637}
{"project": "cipher", "commit_id": "Snippet45133268_27283.java", "target": 0, "func": "public class encrypt {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException {\n        //Key is created and saved in File\n        KeyGenerator keygenerator = KeyGenerator.getInstance(\"AES\");\n        SecretKey myDesKey = keygenerator.generateKey();\n        String encodedKey = Base64.getEncoder().encodeToString(myDesKey.getEncoded());\n        Path keypath = Paths.get(\"C:/xxx/key.txt\");\n        Path keyfile = Files.createFile(keypath);\n        Files.write(keyfile, encodedKey.getBytes(), StandardOpenOption.WRITE);\n\n        Cipher desalgCipher;\n        desalgCipher = Cipher.getInstance(\"AES\");\n        desalgCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n\n        Path target = Paths.get(\"C:/xxx/encrypted.txt\");\n        Path file = Files.createFile(target);\n\n        Path path = Paths.get(\"test.txt\");               \n        try(InputStream is = Files.newInputStream(path);      \n        CipherInputStream cipherIS = new CipherInputStream(is, desalgCipher);   \n        BufferedReader reader = new BufferedReader(new InputStreamReader(cipherIS));){  \n            String line;\n            while((line = reader.readLine()) != null){\n                System.out.println(line);\n                Files.write(file, line.getBytes(), StandardOpenOption.WRITE);\n            }\n        }          \n    }\n}\n", "idx": 1638}
{"project": "cipher", "commit_id": "Snippet2732808_30406.java", "target": 0, "func": "\nkgen = KeyGenerator.getInstance(\"AES\");\n            kgen.init(128);\n            raw = new byte[]{(byte)0x00,(byte)0x11,(byte)0x22,(byte)0x33,(byte)0x44,(byte)0x55,(byte)0x66,(byte)0x77,(byte)0x88,(byte)0x99,(byte)0xaa,(byte)0xbb,(byte)0xcc,(byte)0xdd,(byte)0xee,(byte)0xff};\n            skeySpec = new SecretKeySpec(raw, \"AES\");\n            cipher = Cipher.getInstance(\"AES\");\n\n            plainText=null;\n            cipherText=null;\n\n", "idx": 1639}
{"project": "cipher", "commit_id": "Snippet11893370_35872.java", "target": 0, "func": "    byte password[] = (WHAT YOUR WANT. STRING, NUMBER, etc.).getBytes();\n    DESKeySpec desKeySpec;\n    try {\n\n        desKeySpec = new DESKeySpec(password);\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey key = keyFactory.generateSecret(desKeySpec);\n\n        Cipher desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        desCipher.init(Cipher.ENCRYPT_MODE, key);\n\n        // Create stream\n        FileOutputStream fos = new FileOutputStream(\"Your file here\");\n        BufferedOutputStream bos = new BufferedOutputStream(fos);\n        CipherOutputStream cos = new CipherOutputStream(bos, desCipher);\n    }\n", "idx": 1640}
{"project": "cipher", "commit_id": "Snippet11391249_35548.java", "target": 0, "func": "<HTML>\n<BODY>\n\n<%\n    Class.forName(\"oracle.jdbc.OracleDriver\");\n\n        Connection conn =     DriverManager.getConnection(\"jdbc:oracle:thin:@xxx:xxxx:xxxx\",\"i----r\",\"i-----r\");\n                        // @//machineName:port:SID,   userid,  password\n\n    Statement st=conn.createStatement();\n\n    ResultSet rs=st.executeQuery(\"Select * from xxxxxxx\");\n\n    //Just testing now, for decryption\n\n    String algorithm1 = \"DES\";//magical mystery constant\n    String algorithm2 = \"DES/CBC/NoPadding\";//magical mystery constant\n    IvParameterSpec iv = new IvParameterSpec( new byte [] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );//magical mystery constant\n    Cipher cipher;\n    SecretKey key;\n    String k=\"12345abc\";\n    key = new SecretKeySpec( k.getBytes( ), algorithm1 );\n    cipher = Cipher.getInstance( algorithm2 );\n\n    String str=\"test1234abc\";\n\n    cipher.init( Cipher.ENCRYPT_MODE, key, iv ); //normally you could leave out the IvParameterSpec argument, but not with Oracle\n\n    byte[] bytes=str.getBytes(\"UTF-8\");\n\n    byte[] encrypted = cipher.doFinal( bytes );\n\n\n%>\n</BODY>\n</HTML>\n", "idx": 1641}
{"project": "cipher", "commit_id": "Snippet35122795_17061.java", "target": 0, "func": "private String keyString;\nprivate byte[] byteKey;\nprivate SecretKey key;\nCipher c;\n\npublic AES_Cipher(String keyString){\n    this.keyString = keyString.toString();\n}\n\npublic void init() throws InitializtionFailedException{\n    try{\n        c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        byteKey = keyString.getBytes(\"UTF-8\");\n        MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n        byteKey = sha.digest(byteKey);\n        byteKey = Arrays.copyOf(byteKey, 16);\n        key = new SecretKeySpec(byteKey, \"AES\");\n\n    }catch(NoSuchAlgorithmException e){\n        throw new InitializtionFailedException();\n    }\n }\n", "idx": 1642}
{"project": "cipher", "commit_id": "Snippet35119827_17053.java", "target": 0, "func": "package com.openbravo.pos.util;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.*;\nimport javax.crypto.*;\n\n/**\n *\n * @author JG uniCenta\n */\npublic class AltEncrypter {\n\n    private Cipher cipherDecrypt;\n    private Cipher cipherEncrypt;\n\n    /** Creates a new instance of Encrypter\n     * @param passPhrase */\n    public AltEncrypter(String passPhrase) {\n\n        try {\n            SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n            sr.setSeed(passPhrase.getBytes(\"UTF8\"));\n            KeyGenerator kGen = KeyGenerator.getInstance(\"DESEDE\");\n            kGen.init(168, sr);\n            Key key = kGen.generateKey();\n\n            cipherEncrypt = Cipher.getInstance(\"DESEDE/ECB/PKCS5Padding\");\n            cipherEncrypt.init(Cipher.ENCRYPT_MODE, key);\n\n            cipherDecrypt = Cipher.getInstance(\"DESEDE/ECB/PKCS5Padding\");\n            cipherDecrypt.init(Cipher.DECRYPT_MODE, key);\n        } catch (UnsupportedEncodingException | NoSuchPaddingException | NoSuchAlgorithmException | InvalidKeyException e) {\n        }\n    }\n\n    /**\n     *\n     * @param str\n     * @return\n     */\n    public String encrypt(String str) {\n        try {\n            return StringUtils.byte2hex(cipherEncrypt.doFinal(str.getBytes(\"UTF8\")));\n        } catch (UnsupportedEncodingException | BadPaddingException | IllegalBlockSizeException e) {\n        }\n        return null;\n    }\n\n    /**\n     *\n     * @param str\n     * @return\n     */\n    public String decrypt(String str) {\n        try {\n            return new String(cipherDecrypt.doFinal(StringUtils.hex2byte(str)), \"UTF8\");\n        } catch (UnsupportedEncodingException | BadPaddingException | IllegalBlockSizeException e) {\n        }\n        return null;\n    }    \n}\n", "idx": 1643}
{"project": "cipher", "commit_id": "Snippet39972028_21882.java", "target": 0, "func": "public class LastNameEncryption implements AttributeConverter<String,String> {\n\n    private static SecretKeySpec secretKey;\n    private final static String peselKey = \"somekey\";\n\n    @Override\n    public String convertToDatabaseColumn(String attribute) {\n        try\n        {\n            setKey();\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            return Base64.getEncoder().encodeToString(cipher.doFinal(attribute.getBytes(\"UTF-8\")));\n        }\n        catch (Exception e)\n        {\n            System.out.println(\"Error while encrypting: \" + e.toString());\n        }\n        return null;\n\n    }\n\n    public String convertToEntityAttribute(String dbData) {\n        try {\n            setKey();\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            return new String(cipher.doFinal(Base64.getDecoder().decode(dbData)));\n        }\n        catch (Exception e)\n        {\n            System.out.println(\"Error while decrypting: \" + e.toString());\n        }\n        return null;\n\n    }\n\n    public static void setKey() {\n        MessageDigest sha = null;\n        byte[] key;\n        try {\n            key = peselKey.getBytes(\"UTF-8\");\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n            key = Arrays.copyOf(key, 16);\n            secretKey = new SecretKeySpec(key, \"AES\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }  catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n", "idx": 1644}
{"project": "cipher", "commit_id": "Snippet21043423_3615.java", "target": 0, "func": "Cipher cipherInstance = Cipher.getInstance(\"DES/CBC/NoPadding\");\n", "idx": 1645}
{"project": "cipher", "commit_id": "Snippet16997914_286.java", "target": 0, "func": "public class MainClass {\n  public static void main(String args[]) throws Exception {\n    KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n    kg.init(new SecureRandom());\n    SecretKey key = kg.generateKey();\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    Class spec = Class.forName(\"javax.crypto.spec.DESKeySpec\");\n    DESKeySpec ks = (DESKeySpec) skf.getKeySpec(key, spec);\n    ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"keyfile\"));\n    oos.writeObject(ks.getKey());\n\n    Cipher c = Cipher.getInstance(\"DES/CFB8/NoPadding\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n    CipherOutputStream cos = new CipherOutputStream(new FileOutputStream(\"ciphertext\"), c);\n    PrintWriter pw = new PrintWriter(new OutputStreamWriter(cos));\n    pw.println(\"Stand and unfold yourself\");\n    pw.close();\n    oos.writeObject(c.getIV());\n    oos.close();\n  }\n}\n", "idx": 1646}
{"project": "cipher", "commit_id": "Snippet44640282_26760.java", "target": 0, "func": "// defined outside the below method; this algorithm works:\nprivate static String ALGORITHM = \"PBEWITHSHA1ANDDESEDE\";\n\n// the new version, which fails:\n//private static String ALGORITHM = \"PBEWithHmacSHA512AndAES_128\";\n\nprivate static Cipher getCipher(int mode, String password) throws NoSuchAlgorithmException, InvalidKeySpecException,\n    NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n\n    // Create secret key using password\n    PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());\n    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(ALGORITHM);\n    SecretKey secretKey = secretKeyFactory.generateSecret(pbeKeySpec);\n\n    // Create the cipher\n    byte[] salt = new byte[SALT_SIZE];\n    salt = password.getBytes();\n\n    PBEParameterSpec pbeParameterSpec = new PBEParameterSpec(salt, PBEPARAMETERSPEC_ITERATION_COUNT);\n    Cipher cipher = Cipher.getInstance(ALGORITHM);\n\n    // this original line causes crash with the new algorithm, reporting:\n    // Exception in thread \"main\" java.security.InvalidAlgorithmParameterException: Missing parameter type: IV expected\n    // solved as per this S.O. post:\n    // https://stackoverflow.com/questions/29215274/how-do-i-properly-use-the-pbewithhmacsha512andaes-256-algorithm\n    cipher.init(mode, secretKey, pbeParameterSpec);\n\n    // this new line causes the encryption/decryption to apparently fail, giving results that look like this:\n    // \ufffd0\ufffd.\ufffd\ufffd\ufffd\ufffd\ufffdj\ufffd\"\ufffd\ufffd\u06d7P#o\u02fe\ufffd\ufffd\ufffdIYc\ufffd \ufffdwe\ufffd\ufffd\ufffd\ufffd)\ufffdTq(f\ufffdC\ufffd\ufffd\ufffd.\ufffd\ufffdnjDt\ufffd.pG\ufffd\ufffd\n    //cipher.init(mode, secretKey, cipher.getParameters());\n    return cipher;\n}\n", "idx": 1647}
{"project": "cipher", "commit_id": "Snippet35820688_17706.java", "target": 0, "func": "public class EncryptAsync extends AsyncTask<Void, Void, Void> {\n    //ProgressDialog progressDialog;\n\n    //declare other objects as per your need\n    @Override\n    protected void onPreExecute() {\n        //   progressDialog = ProgressDialog.show(EncryptFile.this, \"Progress Dialog Title Text\", \"Process Description Text\", true);\n\n\n        if (password.getText().toString().equals(confirmPassword.getText().toString())) {\n\n            correctPassword = password.getText().toString();\n            //Toast.makeText(this,correctPassword,Toast.LENGTH_LONG).show();\n\n            //copies Plain Text to String\n            fileEditText.setInputType(InputType.TYPE_CLASS_TEXT);\n            returnFile = fileEditText.getText().toString();\n            Toast.makeText(EncryptFile.this, returnFile, Toast.LENGTH_LONG).show();\n        } else {\n            Toast.makeText(EncryptFile.this, \"Passwords do not match\", Toast.LENGTH_LONG).show();\n\n        }\n\n    }\n\n\n\n    @Override\n    protected Void doInBackground(Void... params) {\n\n\n        if (spinnerValue.equals(\"AES\")) {\n            Toast.makeText(EncryptFile.this, returnFile, Toast.LENGTH_LONG).show();\n\n            try {\n                // Here you read the cleartext.\n                FileInputStream fis = new FileInputStream(returnFile);\n                // This stream write the encrypted text. This stream will be wrapped by another stream.\n                FileOutputStream fos = new FileOutputStream(returnFile + \".aes\");\n\n                // hash password with SHA-256 and crop the output to 128-bit for key\n                MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n                digest.update(correctPassword.getBytes());\n\n                // copys hashed password to key\n                System.arraycopy(digest.digest(), 0, key, 0, key.length);\n\n\n                SecretKeySpec sks = new SecretKeySpec(key, \"AES\");\n                // Create cipher\n                Cipher cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.ENCRYPT_MODE, sks);\n                // Wrap the output stream\n                CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n                // Write bytes\n                int b;\n                byte[] d = new byte[8];\n                while ((b = fis.read(d)) != -1) {\n                    cos.write(d, 0, b);\n                }\n                // Flush and close streams.\n                cos.flush();\n                cos.close();\n                fis.close();\n            } catch (Exception ex) {\n                Toast.makeText(EncryptFile.this, \"Error with Exception\", Toast.LENGTH_LONG).show();\n            } catch(Throwable t){\n                Toast.makeText(EncryptFile.this, \"Error with throwable\", Toast.LENGTH_LONG).show();\n            }\n\n        } else if (spinnerValue.equals(\"Blowfish\")) {\n//code for blowfish\n        }\n\n\n\n         return null;\n    }\n@Override\n    protected void onPostExecute(Void result) {\n        Toast.makeText(EncryptFile.this, \"Finished Encryption\", Toast.LENGTH_LONG).show();\n        // super.onPostExecute(result);\n        // progressDialog.dismiss();\n    }\n", "idx": 1648}
{"project": "cipher", "commit_id": "Snippet45911193_27984.java", "target": 0, "func": "    Uri targURI = Uri.parse(\"content://xxxx/yyy.txt\");\n    try {\n        InputStream content = getContentResolver().openInputStream(targURI);\n        BufferedReader reader1 = new BufferedReader(new InputStreamReader(content));\n        String line1;\n        String text = \"\";\n        while ((line1 = reader1.readLine()) != null) {\n            text+=line1;\n        }\n        Log.i(\"FILE ENCRYPTED\", text);\n        String DECRYPTED = \"\";\n        DECRYPTED = decrypt(text);\n        Log.i(\"FILE DECRYPTED:\", DECRYPTED);\n\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\npublic String decrypt(String paramString) throws Exception {\n        String md5_pin1 = \"\";\n        String md5_pin = MD5(md5_pin1);\n        SecretKeySpec keySpec = new SecretKeySpec(md5_pin.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, keySpec);\n        byte[] paramString1 = Base64.decode(paramString.getBytes(), 0);\n        byte[] paramstring2 = cipher.doFinal(paramString1);\n        String decoded = new String(paramstring2, \"UTF-8\");\n        return decoded;\n    }\n\n@NonNull\npublic static String MD5(String paramString) throws Exception {\n    MessageDigest digest = java.security.MessageDigest.getInstance(\"MD5\");\n    digest.update(paramString.getBytes());\n    byte messageDigest[] = digest.digest();\n    StringBuffer hexString = new StringBuffer();\n    int i=0;\n    while( i < messageDigest.length) {\n        String str = Integer.toHexString( messageDigest[i] & 0xFF );\n        if (str.length() == 1) {\n            hexString.append(\"0\");\n        }\n\n        hexString.append(str);\n        i += 1;\n    }\n    return hexString.toString();\n}\n", "idx": 1649}
{"project": "cipher", "commit_id": "Snippet17465732_661.java", "target": 0, "func": "import java.security.MessageDigest;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class TripleDESTest {\n\n    public static void main(String[] args) throws Exception {\n\n        String text = \"kyle boon\";\n\n        byte[] codedtext = new TripleDESTest().encrypt(text);\n        String decodedtext = new TripleDESTest().decrypt(codedtext);\n\n        System.out.println(codedtext); // this is a byte array, you'll just see a reference to an array\n        System.out.println(decodedtext); // This correctly shows \"kyle boon\"\n    }\n\n    public byte[] encrypt(String message) throws Exception {\n        final MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n        final byte[] digestOfPassword = md.digest(\"HG58YZ3CR9\"\n                .getBytes(\"utf-8\"));\n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        for (int j = 0, k = 16; j < 8;) {\n            keyBytes[k++] = keyBytes[j++];\n        }\n\n        final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n        final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n        final byte[] plainTextBytes = message.getBytes(\"utf-8\");\n        final byte[] cipherText = cipher.doFinal(plainTextBytes);\n        // final String encodedCipherText = new sun.misc.BASE64Encoder()\n        // .encode(cipherText);\n\n        return cipherText;\n    }\n\n    public String decrypt(byte[] message) throws Exception {\n        final MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n        final byte[] digestOfPassword = md.digest(\"HG58YZ3CR9\"\n                .getBytes(\"utf-8\"));\n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        for (int j = 0, k = 16; j < 8;) {\n            keyBytes[k++] = keyBytes[j++];\n        }\n\n        final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n        final Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n        // final byte[] encData = new\n        // sun.misc.BASE64Decoder().decodeBuffer(message);\n        final byte[] plainText = decipher.doFinal(message);\n\n        return new String(plainText, \"UTF-8\");\n    }\n}\n", "idx": 1650}
{"project": "cipher", "commit_id": "Snippet15406388_38458.java", "target": 0, "func": "    SecureRandom sr = new SecureRandom();  \n    DESKeySpec dks = new DESKeySpec(rawKeyData);\n\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");  \n    SecretKey key = keyFactory.generateSecret(dks);  \n    Cipher cipher = Cipher.getInstance(\"DES\");  \n    cipher.init(Cipher.ENCRYPT_MODE, key, sr);  \n    // why the sr is necessary to init a Cipher object?\n    byte data[] = str.getBytes();  \n    byte[] encryptedData = cipher.doFinal(data);\n", "idx": 1651}
{"project": "cipher", "commit_id": "Snippet37686794_19659.java", "target": 0, "func": "public class Encryptor {\n\nprivate static final String ALGORITHM = \"AES\";\nprivate static final String TRANSFORMATION = \"AES\";\n\npublic void encrypt(String key, File inputFile, File outputFile) throws CryptoException {\n    doCrypto(Cipher.ENCRYPT_MODE, key, inputFile, outputFile);\n}\n\npublic void decrypt(String key, File inputFile, File outputFile) throws CryptoException {\n    doCrypto(Cipher.DECRYPT_MODE, key, inputFile, outputFile);\n}    \nprivate void doCrypto(int cipherMode, String key, File inputFile, File outputFile) throws CryptoException {\n    try {\n\n        Key secretKey = new SecretKeySpec(key.getBytes(), ALGORITHM);\n        Cipher cipher = Cipher.getInstance(TRANSFORMATION);\n        cipher.init(cipherMode, secretKey);\n\n        byte[] inputBytes = new byte[16];\n        byte[] outputBytes = new byte[16];\n\n        //Open the file in read write mode\n        RandomAccessFile fileStore = new RandomAccessFile(inputFile, \"rw\"); \n        fileStore.seek(0); \n\n        //encrypt first 1024bytes\n        int bytesRead = 0;\n        for(int ctr=0;bytesRead!= -1 && ctr<64 ;ctr++){\n            //get file pointer position\n            long prevPosition = fileStore.getFilePointer();\n\n            //read 16 bytes to array\n            bytesRead = fileStore.read(inputBytes); \n\n            //if successful, go move back pointer and overwrite these 16 bytes with encrypted bytes\n            if(bytesRead != 1){\n                outputBytes = cipher.doFinal(inputBytes);\n                fileStore.seek(prevPosition);\n                fileStore.write(outputBytes);\n            }   \n        }\n\n        fileStore.close();\n\n    } catch (NoSuchPaddingException | NoSuchAlgorithmException | InvalidKeyException | BadPaddingException\n            | IllegalBlockSizeException | IOException ex) {\n        throw new CryptoException(ex);\n    }\n}\n", "idx": 1652}
{"project": "cipher", "commit_id": "Snippet28519570_10682.java", "target": 0, "func": "package aes;\n\nimport javax.crypto.*;\nimport java.security.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\n\n\npublic class AESencrpytion {\n\n  //private static final byte[] keyValue = new byte[]{'S','e','c','r','e','t'};\n\n\n  public static String encrypt(String data) throws Exception{\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom rand = new SecureRandom();\n    keyGen.init(rand);\n    Key key = keyGen.generateKey();\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encValue = cipher.doFinal(data.getBytes());\n    String encryptedValue = new BASE64Encoder().encode(encValue);\n    return encryptedValue;\n  }\n\n  public static String decrypt(String encData) throws Exception {\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom rand = new SecureRandom();\n    keyGen.init(rand);\n    Key key = keyGen.generateKey();\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] decodedValue = new BASE64Decoder().decodeBuffer(encData);\n    //ERROR HAPPENS HERE\n    byte[] decValue = cipher.doFinal(decodedValue);\n    String decryptedVal = new String(decValue);\n    return decryptedVal;\n  }\n", "idx": 1653}
{"project": "cipher", "commit_id": "Snippet30478025_12634.java", "target": 0, "func": "package des;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.xml.bind.DatatypeConverter;\n\npublic final class Des\n{\n    private static final byte[] IV = {(byte) 0xA6, (byte) 0x8A, 0x11, 0x63, (byte) 0x94, 0x4D, (byte) 0x8E, (byte) 0xA3};\n    private static final byte[] DES_KEY = {(byte) 0x81, 0x33, 0x66, (byte) 0xD8, 0x5F, (byte) 0xD3, 0x17, 0x21, 0x5C, 0x7F};\n\n    public static byte [] encrypt(String data)\n    {\n        byte result[] = null;\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n            DESKeySpec desKeySpec = new DESKeySpec(DES_KEY);\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n            SecretKey secretKey = keyFactory.generateSecret(desKeySpec);\n            IvParameterSpec iv = new IvParameterSpec(IV);\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey, iv);\n            result = cipher.doFinal(data.getBytes(CHARSET));\n        }\n        catch(Exception e)\n        {\n            e.printStackTrace();\n        }\n        return result;\n    }  \n}\n", "idx": 1654}
{"project": "cipher", "commit_id": "Snippet15952618_38939.java", "target": 0, "func": "byte[] key = \"1428324560542678\".getBytes();\n\nCipher c = null;\n            try {\n                c = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n            } catch (NoSuchAlgorithmException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (NoSuchPaddingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n\nSecretKeySpec k =  new SecretKeySpec(key, \"AES\");\n            try {\n                c.init(Cipher.ENCRYPT_MODE, k);\n            } catch (InvalidKeyException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n\n    try {\n        EditText tv1passwordText = (EditText) findViewById(R.id.password);\n        String password = URLEncoder.encode(tv1passwordText.getText().toString(), \"UTF-8\");\n\n            byte[] encryptedData = c.doFinal( password.getBytes());\n", "idx": 1655}
{"project": "cipher", "commit_id": "Snippet20902854_3402.java", "target": 0, "func": "     String input = \"5H5h8acnv2gzv2PeTVb+pw==\";\n     String key = \"thisismykey___2011_1234567898765\";\n        byte[] output = null;\n        try{\n\n            SecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, skey);\n            output = cipher.doFinal(Base64.decode(input, Base64.DEFAULT));\n            Log.i(\"word is: \", new String(output));\n        }catch(Exception e){\n\n            Log.d(\"myapp\", \"Error decrypting data\", e);  // This is the line\n        }\n", "idx": 1656}
{"project": "cipher", "commit_id": "Snippet37918352_19931.java", "target": 0, "func": "    private Key getAesKey() throws Exception {\n    return new SecretKeySpec(Arrays.copyOf(key.getBytes(\"UTF-8\"), 16), \"AES\");\n}\n\nprivate Cipher getMutual() throws Exception {\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    return cipher;// cipher.doFinal(pass.getBytes());\n}\n\npublic byte[] getEncryptedPass(String pass) throws Exception {\n    Cipher cipher = getMutual();\n    cipher.init(Cipher.ENCRYPT_MODE, getAesKey());\n    byte[] encrypted = cipher.doFinal(pass.getBytes(\"UTF-8\"));\n    return encrypted;\n\n}\n\npublic String getDecryptedPass(byte[] encrypted) throws Exception {\n    Cipher cipher = getMutual();\n    cipher.init(Cipher.DECRYPT_MODE, getAesKey());\n    String realPass = new String(cipher.doFinal(encrypted));\n    return realPass;\n}\n", "idx": 1657}
{"project": "cipher", "commit_id": "Snippet39218791_21081.java", "target": 0, "func": "   public static String base64Encode(byte[] bytes)\n    {\n        return new BASE64Encoder().encode(bytes);\n    }\n\n   public static byte[] base64Decode(String property) throws IOException\n    {\n        return new BASE64Decoder().decodeBuffer(property);\n    }\n\n\n    public static String encrypt(String mystring) throws GeneralSecurityException, UnsupportedEncodingException\n       {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(mystring.toCharArray()));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n        return base64Encode(pbeCipher.doFinal(mystring.getBytes(\"UTF-8\")));\n        }\n\n    public static String decrypt(String estring) throws GeneralSecurityException, IOException\n        {\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(estring.toCharArray()));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n        return new String(pbeCipher.doFinal(base64Decode(estring)), \"UTF-8\");\n        }\n", "idx": 1658}
{"project": "cipher", "commit_id": "Snippet38271609_20213.java", "target": 0, "func": "import java.io.BufferedOutputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.net.InetAddress;\nimport java.net.Socket;\nimport java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class FileTransferClient { \n\n    public static void main(String[] args) throws Exception{\n\n        //Initialize socket\n        Socket socket = new Socket(InetAddress.getByName(\"localhost\"), 5000);\n        byte[] contents = new byte[100000000];\n\n        //Initialize the FileOutputStream to the output file's full path.\n        FileOutputStream fos = new FileOutputStream(\"/home/shanmukhh/Desktop/op.mp4\");\n        BufferedOutputStream bos = new BufferedOutputStream(fos);\n        InputStream is = socket.getInputStream();\n        System.out.println(\"is: \"+is);\n        //No of bytes read in one read() call\n        int bytesRead = 0; \n        String key =\"1234567812345678\";\n        Key secretKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        byte[] outputBytes =null;\n        while((bytesRead=is.read(is.toString().getBytes()))!=-1){\n            outputBytes = cipher.doFinal(is.toString().getBytes());\n            bos.write(outputBytes, 0, bytesRead); \n        }\n\n        bos.flush(); \n        socket.close(); \n\n\n\n        System.out.println(\"File saved successfully!\");\n    }\n    }\n", "idx": 1659}
{"project": "cipher", "commit_id": "Snippet1913971_30153.java", "target": 0, "func": "cipher = Cipher.getInstance(\"AES\");\n", "idx": 1660}
{"project": "cipher", "commit_id": "Snippet11601201_35644.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(Hex.decodeHex(encryptionKey.toCharArray()), \"AES\"));\nencrypted = Hex.encodeHexString(cipher.doFinal((sampleText.toString()).getBytes()));\n", "idx": 1661}
{"project": "cipher", "commit_id": "Snippet31930949_13979.java", "target": 0, "func": "package com.boolbalabs.petlinx.settings;\n\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Encryptor {\n\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);//ERROR HERE////////////////////////////////////////////////////////////////////////////\n        return decrypted;\n    }\n\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2*buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n}\n", "idx": 1662}
{"project": "cipher", "commit_id": "Snippet11272575_35430.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\ncipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);\n", "idx": 1663}
{"project": "cipher", "commit_id": "Snippet42821867_24904.java", "target": 0, "func": "class TCPServer {\npublic static void main(String argv[]) throws Exception {\n    String password = null;\n    String capitalizedSentence;\n    ServerSocket welcomeSocket = new ServerSocket(6789);\n\n    while (true) {\n        Socket connectionSocket = welcomeSocket.accept();\n        BufferedReader inFromClient = new BufferedReader(new InputStreamReader(connectionSocket.getInputStream()));\n        password = \"Passcode\";\n        byte[] salt = new byte[64];\n        Random rnd = new Random();\n        rnd.nextBytes(salt);\n        byte[] data = deriveKey(password, salt, 64);\n        byte [] EncyptedText = inFromClient.readLine().getBytes();\n        System.out.println(\"Received Encrypted message \" + EncyptedText);\n        SecretKey desKey = SecretKeyFactory.getInstance(\"DES\").generateSecret(new DESKeySpec(data));\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, desKey);\n        // Decrypt the text\n        System.out.println(\"Text Received \" + EncyptedText);\n        byte[] textDecrypted = cipher.doFinal(EncyptedText);\n        System.out.println(\"Text Decryted : \" + new String(textDecrypted));\n\n    }\n}\n\npublic static byte[] deriveKey(String password, byte[] salt, int keyLen) {\n        SecretKeyFactory kf = null;\n        try {\n            kf = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n        } catch (NoSuchAlgorithmException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        KeySpec specs = new PBEKeySpec(password.toCharArray(), salt, 1024, keyLen);\n        SecretKey key = null;\n        try {\n            key = kf.generateSecret(specs);\n        } catch (InvalidKeySpecException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        return key.getEncoded();\n}\n}\n", "idx": 1664}
{"project": "cipher", "commit_id": "Snippet7781348_32918.java", "target": 0, "func": "SecretKeySpec key = new SecretKeySpec(salt.getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    String result = new String(cipher.doFinal(message.getBytes()));\n    System.out.println(\"Encrypted:\" + result);\n", "idx": 1665}
{"project": "cipher", "commit_id": "Snippet40424606_22269.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport javax.xml.bind.DatatypeConverter;\n\npublic class Encryptor {\n    private static String algorithm = \"RC4\";\n    public static String encrypt(String key, String value) {\n        try {\n            SecretKeySpec rc4Key = new SecretKeySpec(key.getBytes(), algorithm);\n            Cipher rc4 = Cipher.getInstance(algorithm);\n\n            rc4.init(Cipher.ENCRYPT_MODE, rc4Key);\n            byte [] encrypted = rc4.update(value.getBytes());\n            return DatatypeConverter.printBase64Binary(encrypted);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n\n        return null;\n    }\n\n    public static void main(String[] args) {\n        String key = \"trololol\";\n        String value = \"0612345678\";\n\n        System.out.println(encrypt(key, value));\n    }\n}\n", "idx": 1666}
{"project": "cipher", "commit_id": "Snippet36998066_18950.java", "target": 0, "func": "SecretKeySpec secretkeyspec = new SecretKeySpec(\"password\".getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, secretkeyspec);\nbyte[] encoded = cipher.doFinal(s.getBytes());\nSystem.out.println(Arrays.toString(encoded));", "idx": 1667}
{"project": "cipher", "commit_id": "Snippet10322343_34684.java", "target": 0, "func": "public static String aes_decrypt (String text, String key) \n{\n\n    SecretKey skey = new SecretKeySpec(key.getBytes(), \"AES\"); \n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n    cipher.init(Cipher.DECRYPT_MODE, skey);\n\n    return new String((cipher.doFinal(text.getBytes())));\n}\n", "idx": 1668}
{"project": "cipher", "commit_id": "Snippet33082516_15121.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 1669}
{"project": "cipher", "commit_id": "Snippet34634125_16618.java", "target": 0, "func": "    public class AdminKeyGenerator {\n\n    private static final String ALGORITHM = \"AES\";\n\n\n    public static SecretKey generateKey() throws NoSuchAlgorithmException,\n            NoSuchPaddingException {\n\n        KeyGenerator genarator = KeyGenerator.getInstance(ALGORITHM);\n        SecretKey secretkey = genarator.generateKey();\n\n        return secretkey;\n\n    }\n\n    public static void saveKey(SecretKey key) {\n\n        File keyFile = new File(\"/home/thamiz/workspace/keyFile.txt\");\n        try{\n\n            keyFile.createNewFile();\n            FileWriter keyWriter = new FileWriter(keyFile);\n            BufferedWriter buffKey = new BufferedWriter(keyWriter);\n\n            char[] hex = encodeHex( key.getEncoded() );\n\n            buffKey.write(hex);\n            buffKey.flush();\n            buffKey.close();\n\n\n        }catch(FileNotFoundException e){\n            System.out.println(\"Decryption fails\");\n\n        } catch (IOException e) {\n            System.out.println(\"Decryption fails\");\n        }\n\n    }\n\n\n\n    public static SecretKey loadKey() throws DecoderException{\n\n\n        File keyFile = new File(\"/home/thamiz/workspace/keyFile.txt\");\n        String data = null;\n        byte[] encoded = null;\n\n        try{\n        FileReader keyReader = new FileReader( keyFile );\n        BufferedReader buffKeyRead = new BufferedReader(keyReader);\n\n        data = buffKeyRead.readLine();\n        encoded = decodeHex(data.toCharArray());\n        buffKeyRead.close();\n\n\n        }catch( IOException e ){\n            System.out.println(\"Decryption fails\");\n        }\n\n\n        return new SecretKeySpec(encoded, ALGORITHM);\n\n\n\n    }\n\n\n    public static void main(String[] args) throws NoSuchAlgorithmException,\n            NoSuchPaddingException {\n\n        SecretKey secretkey = AdminKeyGenerator.generateKey();\n\n        AdminKeyGenerator.saveKey(secretkey);\n\n\n\n    }\n\n\nFollowing is the client side code. client used the admin key and encrypt his card details.\n\n\n private static String debitcardType;\n private static int debitCardNumber;\n private static int debitcardCVV;\n     private static Date debitcardExpiryDate;\n\n\n    public static void storeCardDetails() throws ParseException {\n\n    Scanner in = new Scanner(System.in);\n    boolean anotherCardDetail = false;\n    SimpleDateFormat expiry = new SimpleDateFormat(\"dd-MM-yyyy\");\n\n    do {\n\n        System.out.println(\"Enter your debit card type:\");\n        debitcardType = in.next();\n\n        System.out.println(\"Enter your debit card number:\");\n        debitCardNumber = in.nextInt();\n\n        System.out.println(\"Enter your debit card cvv number:\");\n        debitcardCVV = in.nextInt();\n\n        System.out.println(\"Enter your debit card expiry date in the format of dd-MM-yyyy:\");\n        String date = in.next();\n        debitcardExpiryDate = expiry.parse(date);\n\n        System.out.println(\"Do you want to enter another card detail\");\n        System.out.println(\"Enter 1 for another card details and 0 for exit \");\n        int option = in.nextInt();\n        if (!(option == 1) && (option == 0)) {\n            anotherCardDetail = true;\n            System.out.println(\"Exit from entering card details\");\n        }\n\n    } while (!anotherCardDetail);\n\n}\n\n        private static String encryptCardDetails(int cardNumber, int cardCVV,Date expiryDate, SecretKey key)\n        {\n\n    Cipher cipherencrypt = Cipher.getInstance(\"AES\");\n\n    byte[] plainCardNumber = String.valueOf(cardNumber).getBytes();\n    byte[] plainCardCVV = String.valueOf(cardCVV).getBytes();\n    byte[] plainExpiryDate = expiryDate.toString().getBytes();\n\n    cipherencrypt.init( cipherencrypt.ENCRYPT_MODE, key);\n    byte[] encryptedCardNumber = cipherencrypt.doFinal(plainCardNumber);\n    byte[] encryptedCardCVV = cipherencrypt.doFinal(plainCardCVV);\n    byte[] encryptedExpiryDate = cipherencrypt.doFinal(plainExpiryDate);\n\n    String encryptedCard = Base64.encodeBase64String(encryptedCardNumber)\n            + Base64.encodeBase64String(encryptedCardCVV)\n            + Base64.encodeBase64String(encryptedExpiryDate);\n\n    return encryptedCard;\n\n}\n\n\n   public static String decryptCardDetails( File file, SecretKey key ) {\n\n    byte[] finalString1 = null;\n    byte[] finalString2 = null;\n    byte[] finalString3 = null;\n\n    String final1 = null,final2 = null, final3 = null;\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n\n    try{\n    FileReader decryptFile = new FileReader(file);\n    BufferedReader buff = new BufferedReader(decryptFile);\n\n    String decryptcontent = buff.readLine();\n\n    Scanner scan = new Scanner(decryptcontent).useDelimiter(\",\");\n\n    String cardType = scan.next();\n    System.out.println(cardType);\n    String decryptString = scan.next();\n    System.out.println(decryptString);\n\n    byte[] decrypt1 = Base64.decodeBase64(decryptString);\n    cipher.init(Cipher.DECRYPT_MODE, key);\n\n    byte[] decryptedText = cipher.doFinal(decrypt1);\n\n    final3 = new String(decryptedText, \"UTF-8\");\n\n    decryptedCardNumber.toString()+decryptedCardCVV.toString()+decryptedExpiryDate.toString();\n\n    }catch( IOException e ) {\n        System.out.println(\"Decryption fails\");\n    }\n\n    return final3;\n\n\n}\n\npublic static void main(String[] args)  {\n\n    File cardDetailsFile = new File(\"/home/thamiz/workspace/cardFile.txt\");\n\n    try {\n        cardDetailsFile.createNewFile();\n\n        FileWriter fileOut = new FileWriter(cardDetailsFile);\n        BufferedWriter buffer = new BufferedWriter(fileOut);\n\n        ClientCardDetails.storeCardDetails();\n\n        AdminKeyGenerator.generateKey();\n\n\n        String card = ClientCardDetails.encryptCardDetails(debitCardNumber, debitcardCVV,\n                debitcardExpiryDate, AdminKeyGenerator.generateKey());\n\n        buffer.write(debitcardType);\n        buffer.write(\",\");\n        buffer.write(card);\n        buffer.newLine();\n        buffer.flush();\n\n        SecretKey key = AdminKeyGenerator.loadKey();\n        String card1 = ClientCardDetails.decryptCardDetails(cardDetailsFile, key );\n        System.out.println(\"Decryption sucessful\");\n        System.out.println(card1);\n\n\n    } catch (ParseException e) {\n        System.out.println(\"Enter incorrect card details\");\n    } catch (IOException e) {\n        System.out.println(\"Encryption fails\");\n    }\n\n}\n", "idx": 1670}
{"project": "cipher", "commit_id": "Snippet40099635_22017.java", "target": 0, "func": "static void encrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    // Here you read the cleartext.\n    FileInputStream fis = new FileInputStream(\"SampleFolder/yourfilename\");\n    // This stream write the encrypted text. This stream will be wrapped by another stream.\n    FileOutputStream fos = new FileOutputStream(\"SampleFolder/yourencryptedfilename\");\n\n    // Length is 16 byte\n    // Careful when taking user input!!! https://stackoverflow.com/a/3452620/1188357\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    // Create cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    // Wrap the output stream\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    // Write bytes\n    int b;\n    byte[] d = new byte[8];\n    while((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    cos.flush();\n    cos.close();\n    fis.close();\n}\n", "idx": 1671}
{"project": "cipher", "commit_id": "Snippet40242396_22157.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DESede/ECB/NoPadding\"); \ncipher.init(Cipher.ENCRYPT_MODE, key);\nbyte[] result = cipher.doFinal(data);\n", "idx": 1672}
{"project": "cipher", "commit_id": "Snippet40887490_22785.java", "target": 0, "func": " private String _encrypt(String message, String secretKey) throws Exception {\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] digestOfPassword = md.digest(secretKey.getBytes(\"utf-8\"));\n        byte[] keyBytes = Arrays.copyOf(digestOfPassword, 16);\n\n        SecretKey key = new SecretKeySpec(keyBytes, \"DESede/ECB/PKCS7Padding\");\n        Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS7Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] plainTextBytes = message.getBytes(\"utf-8\");\n\n\n        byte[] buf = cipher.doFinal(plainTextBytes);\n        byte [] base64Bytes = Base64.encodeBase64(buf);\n        String base64EncryptedString = new String(base64Bytes);\n\n        return base64EncryptedString;\n    }\n", "idx": 1673}
{"project": "cipher", "commit_id": "Snippet17280104_518.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"DESede\");\n\nCipher cipher = Cipher.getInstance(\"TripleDES/ECB/PKCS5Padding\");\n", "idx": 1674}
{"project": "cipher", "commit_id": "Snippet6907822_32448.java", "target": 0, "func": "import java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AES128 \n{\n    private byte[] getRawKey(byte[] seed) throws Exception \n    {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n    public byte[] encrypt(byte[] raw, byte[] clear) throws Exception \n    {\n        SecretKeySpec skeySpec = new SecretKeySpec(getRawKey(raw), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    public byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception \n    {\n        SecretKeySpec skeySpec = new SecretKeySpec(getRawKey(raw), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n}\n", "idx": 1675}
{"project": "cipher", "commit_id": "Snippet31022756_13205.java", "target": 0, "func": "public static void encryptAndClose(FileInputStream fis, FileOutputStream fos) \n        throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n\n    // Length is 16 byte\n    SecretKeySpec sks = new SecretKeySpec(\"1234567890123456\".getBytes(), \"AES\");\n    // Create cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);      \n\n    // Wrap the output stream for encoding\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);       \n\n    //wrap output with buffer stream\n    BufferedOutputStream bos = new BufferedOutputStream(cos);     \n\n    //wrap input with buffer stream\n    BufferedInputStream bis = new BufferedInputStream(fis); \n\n    // Write bytes\n    int b;\n    byte[] d = new byte[8];\n    while((b = bis.read(d)) != -1) {\n        bos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    bos.flush();\n    bos.close();\n    bis.close();\n}\n\n\npublic static void decryptAndClose(FileInputStream fis, FileOutputStream fos) \n        throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n\n    SecretKeySpec sks = new SecretKeySpec(\"1234567890123456\".getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n\n    //wrap input with buffer stream\n    BufferedInputStream bis = new BufferedInputStream(cis); \n\n    //wrap output with buffer stream\n    BufferedOutputStream bos = new BufferedOutputStream(fos);       \n\n    int b;\n    byte[] d = new byte[8];\n    while((b = bis.read(d)) != -1) {\n        bos.write(d, 0, b);\n    }\n    bos.flush();\n    bos.close();\n    bis.close();\n}\n", "idx": 1676}
{"project": "cipher", "commit_id": "Snippet39209818_21080.java", "target": 0, "func": "public static void encryptFile(String inFileName, String outFileName, char[] pass) throws IOException, GeneralSecurityException {\n    Cipher cipher = PasswordProtectFile.makeCipher(pass, true);\n    try (CipherOutputStream cipherOutputStream = new CipherOutputStream(new FileOutputStream(outFileName), cipher);\n            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName))) {\n        int i;\n        while ((i = bis.read()) != -1) {\n            cipherOutputStream.write(i);\n        }\n    }\n}\n\npublic static void decryptFile(String inFileName, String outFileName, char[] pass) throws GeneralSecurityException, IOException {\n    Cipher cipher = PasswordProtectFile.makeCipher(pass, false);\n    try (CipherInputStream cipherInputStream = new CipherInputStream(new FileInputStream(inFileName), cipher);\n            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName))) {\n        int i;\n        while ((i = cipherInputStream.read()) != -1) {\n            bos.write(i);\n        }\n    }\n}\n\nprivate static Cipher makeCipher(char[] pass, Boolean decryptMode) throws GeneralSecurityException {\n\n    // Use a KeyFactory to derive the corresponding key from the passphrase:\n    PBEKeySpec keySpec = new PBEKeySpec(pass);\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey key = keyFactory.generateSecret(keySpec);\n\n    // Create parameters from the salt and an arbitrary number of iterations:\n    PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, 43);\n\n    // Set up the cipher:\n    Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n\n    // Set the cipher mode to decryption or encryption:\n    if (decryptMode) {\n        cipher.init(Cipher.ENCRYPT_MODE, key, pbeParamSpec);\n    } else {\n        cipher.init(Cipher.DECRYPT_MODE, key, pbeParamSpec);\n    }\n\n    return cipher;\n}\n", "idx": 1677}
{"project": "cipher", "commit_id": "Snippet10562577_34895.java", "target": 0, "func": "  public static byte[] decrypted_Data(byte[] crypt) throws Exception {\n\n  String seed = \"SuperSecretPassword\";\n\n  KeyGenerator keygen = KeyGenerator.getInstance(\"AES\");\n\n  SecureRandom secrand = SecureRandom.getInstance(\"SHA1PRNG\");\n\n  secrand.setSeed(seed.getBytes());\n\n  keygen.init(128, secrand);\n\n  SecretKey seckey = keygen.generateKey();\n\n  byte[] rawKey = seckey.getEncoded();\n\n SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\n\n Cipher cipher = Cipher.getInstance(\"AES\");\n\n cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n byte[] decrypted = cipher.doFinal(crypt);\n\n  return decrypted;\n}\n", "idx": 1678}
{"project": "cipher", "commit_id": "Snippet3271912_30705.java", "target": 0, "func": "decryptCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\ndecryptCipher.init(2, getKey(0));\ndecryptCipher.doFinal(data);\n", "idx": 1679}
{"project": "cipher", "commit_id": "Snippet33824005_15903.java", "target": 0, "func": "public ArrayList<FootballClub> FootBallInputStream() throws FileNotFoundException, IOException, ClassNotFoundException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\nFile file = new File(\"FootballClub.ser\");\nfileIn = new FileInputStream(file);\n\nSecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, key);\n\nCipherInputStream cipherIn = new CipherInputStream(fileIn, cipher);\nin = new ObjectInputStream(cipherIn);\n\nSealedObject sealed = (SealedObject) in.readObject();\n\nArrayList<FootballClub> e = (ArrayList<FootballClub>) sealed.getObject(cipher);\n\nin.close();\n\nfileIn.close();\n\nreturn e;\n\n}\npublic void FootBallOutputStream(ArrayList<FootballClub> e) throws FileNotFoundException, IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException {\n\nFile file = new File(\"FootballClub.ser\");\nfileOut = new FileOutputStream(file);\n\n\nSecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\nCipher cipher = (Cipher.getInstance(\"AES\"));\ncipher.init(Cipher.ENCRYPT_MODE, key);\nSealedObject sealed = new SealedObject(e, cipher);\n\nCipherOutputStream cipherOut = new CipherOutputStream(fileOut, cipher);\nout = new ObjectOutputStream(cipherOut);\nout.writeObject(sealed);\nout.close();\nfileOut.close();\n}\n", "idx": 1680}
{"project": "cipher", "commit_id": "Snippet45502635_27561.java", "target": 0, "func": "package encryption;\n\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport javax.crypto.*;\n\npublic class CipherServer\n{\n    public static void main(String[] args) throws Exception \n    {\n        int port = 7999;\n        ServerSocket server = new ServerSocket(port);\n        Socket s = server.accept();\n\n        // -Read the key from the file generated by the client.\n        ObjectInputStream in = new ObjectInputStream(new FileInputStream(\"KeyFile.xx\"));\n        Key key = (Key)in.readObject();\n        in.close();\n\n        // -Use the key to decrypt the incoming message from socket s.    \n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n        DataInputStream dIn = new DataInputStream(s.getInputStream());\n        int length = dIn.readInt();                    // read length of incoming message\n        if(length>0) \n        {\n            byte[] messageInBytes = new byte[length];\n            dIn.readFully(messageInBytes, 0, messageInBytes.length); // read the message\n\n            // -Print out the decrypt String to see if it matches the orignal message.\n            System.out.println(new String(cipher.doFinal(messageInBytes)));\n        }\n    }\n}\n", "idx": 1681}
{"project": "cipher", "commit_id": "Snippet46158761_28266.java", "target": 0, "func": "    public void doSendGmail(){\n    Connection con = Functions.ConnectToDB();\n    try {\n        Statement stmt = con.createStatement();\n        String sqlQuery = \"select * from settings\";\n        ResultSet rs = stmt.executeQuery(sqlQuery);\n\n        while(rs.next()){\n            String email = rs.getString(\"Email\");\n            //String pass = rs.getString(\"Password\");\n            byte [] pass = rs.getBytes(\"Password\");\n\n            cipher = Cipher.getInstance(\"DES/CTR/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, keySpec,ivspec);\n            byte [] plain_text = cipher.doFinal(pass);\n\n            from = email;\n            password = new String(plain_text);\n        }\n\n        con.close();// close the connection\n\n    } catch (Exception e) {\n        JOptionPane.showMessageDialog(this, \"Error retrieving email address and password\\n\"+e.toString(),\n                \"Error\",JOptionPane.ERROR_MESSAGE);\n    }\n\n    to = txtTo.getText();\n    cc = txtCC.getText();\n    bcc = txtBCC.getText();\n    subject = txtSubject.getText();\n    message_body = jtaMessage.getText();\n\n    Properties props = new Properties();\n    props.put(\"mail.smtp.starttls.enable\", \"true\");\n    props.put(\"mail.smtp.auth\", \"true\");\n    props.put(\"mail.smtp.host\", \"smtp.gmail.com\");\n    props.put(\"mail.smtp.port\", \"587\");\n\n\n    /*use authenticator as username and password are supplied 'on demand' i.e queried from database\n    or supplied via a login dialog*/\n    Session session = Session.getInstance(props,new javax.mail.Authenticator() {\n        protected PasswordAuthentication getPasswordAuthentication(){\n            return new PasswordAuthentication(from, password);\n        }\n    });\n\n    try {            \n        Message message = new MimeMessage(session);\n        message.setFrom(new InternetAddress(from));\n        message.setRecipients(Message.RecipientType.TO,InternetAddress.parse(to));\n        if(!cc.equals(\"\")){\n            message.setRecipients(Message.RecipientType.CC, InternetAddress.parse(cc));\n        }\n        if(!bcc.equals(\"\")){\n            message.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bcc));\n        }\n        message.setSubject(subject);\n\n        if(filePathList.isEmpty()){// if a file(s) have not been attached...\n            message.setText(message_body);\n            Transport.send(message);\n        }\n        else{// if a file(s) have been attached\n            MimeBodyPart textPart = new MimeBodyPart();\n            textPart.setText(message_body);// actual message\n            Multipart multipart = new MimeMultipart();// create multipart message\n            multipart.addBodyPart(textPart);//add the text message to the multipart\n\n            for(int i =0; i<filePathList.size(); i++){// use for loop to attach file(s)\n                MimeBodyPart attachmentPart = new MimeBodyPart();\n                DataSource source = new FileDataSource((String)filePathList.get(i));\n                attachmentPart.setDataHandler(new DataHandler(source));\n                attachmentPart.setFileName((String)fileList.get(i));\n                multipart.addBodyPart(attachmentPart);// add the attachment to the multipart\n                message.setContent(multipart);// add the multipart to the message\n            }\n            Transport.send(message);\n        }\n\n        JOptionPane.showMessageDialog(this, \"Message Sent!\",\"Sent\",JOptionPane.INFORMATION_MESSAGE);\n\n    } catch (Exception e) {\n        JOptionPane.showMessageDialog(this, \"Error sending email message\\n\"+e.toString(),\n                \"Error\",JOptionPane.ERROR_MESSAGE);\n    }\n} \n", "idx": 1682}
{"project": "cipher", "commit_id": "Snippet26160561_8368.java", "target": 0, "func": "// salt\njava.security.SecureRandom rgen = new SecureRandom();\nbyte[] salt = rgen.generateSeed(20);\n// add Bouncy Castle\njava.security.Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n// aes secret key\njavax.crypto.KeyGenerator kgen = KeyGenerator.getInstance(\"AES\", \"BC\");\nKey cleSecrete = kgen.generateKey();\n// aes\njavax.crypto.Cipher cipher = Cipher.getInstance(\"AES\", \"BC\");\n// sha-256\njava.security.MessageDigest sha256 = MessageDigest.getInstance(\"SHA-256\",\"BC\");\n\n// hash the clear password with the salt to avoid collisions\nbyte[] motDePasseHash = hasherSaler(motDePasseClair.getBytes(\"UTF-8\"),salt);\n// Encrypt the hash with the salt to get the salt back\nbyte[] chiffreBDD = chiffrerSalerHash(salt,motDePasseHash,cleSecrete );\n// Store the cipher in DB\n...\n\n// Get back the hash and the salt from DB\nbyte[] deChiffreBDD = deChiffrer(chiffreBDD,cleSecrete );\nbyte[] saltBDD = extraireOctets(deChiffreBDD,0,19);\nbyte[] hashBDD = extraireOctets(deChiffreBDD,20,deChiffreBDD.length-1);\n// hash the user intput\nbyte[] motDePasseHashCandidat = hasherSaler(motDePasseClairCandidat.getBytes(\"UTF-8\"),saltBDD);\n// Compare hased user input with DB hash \nboolean isMotDePasseOK = Arrays.equals(hashBDD,motDePasseHashCandidat);\n\nprivate final byte[] hasherSaler(byte[] clair,byte[] salt) {\n    byte[] concat = concatenerOctets(clair,salt);\n    return sha256.digest(concat);\n}\nprivate final byte[] chiffrerSalerHash(byte[] salt,byte[] hash, Key cle) {\n    cipher.init(true,cle);\n    return cipher.doFinal(concatenerOctets(salt,hash));\n}\nprivate final byte[] deChiffrer(byte[] chiffre, Key cle) {\n    cipher.init(false,cle);\n    return cipher.doFinal(chiffre);\n}\n", "idx": 1683}
{"project": "cipher", "commit_id": "Snippet44156092_26227.java", "target": 0, "func": "byte[] decodeData(byte[] key, byte[] data)\n{\n    try {\n        SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        return cipher.doFinal(data);\n    } catch(Exception e) {\n        Log.e(\"Cryptography\", e.getMessage());\n    }\n    return new byte[0];\n}\n", "idx": 1684}
{"project": "cipher", "commit_id": "Snippet43104256_25233.java", "target": 0, "func": "Cipher.getInstance(\"AES\");", "idx": 1685}
{"project": "cipher", "commit_id": "Snippet17587813_755.java", "target": 0, "func": "    package security.symmatric;\n\n    import javax.crypto.Cipher;\n    import javax.crypto.spec.SecretKeySpec;\n\n    import org.apache.commons.codec.binary.Base64;\n\n    public class AES {\n        public static String symmetricEncrypt(String text, String secretKey) {\n            byte[] raw;\n            String encryptedString;\n            SecretKeySpec skeySpec;\n            byte[] encryptText = text.getBytes();\n            Cipher cipher;\n            try {\n                raw = Base64.decodeBase64(secretKey);\n                skeySpec = new SecretKeySpec(raw, \"AES\");\n                cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n                encryptedString = Base64.encodeBase64String(cipher.doFinal(encryptText));\n            } \n            catch (Exception e) {\n                e.printStackTrace();\n                return \"Error\";\n            }\n            return encryptedString;\n        }\n\n        public static String symmetricDecrypt(String text, String secretKey) {\n            Cipher cipher;\n            String encryptedString;\n            byte[] encryptText = null;\n            byte[] raw;\n            SecretKeySpec skeySpec;\n            try {\n                raw = Base64.decodeBase64(secretKey);\n                skeySpec = new SecretKeySpec(raw, \"AES\");\n                encryptText = Base64.decodeBase64(text);\n                cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n                encryptedString = new String(cipher.doFinal(encryptText));\n            } catch (Exception e) {\n                e.printStackTrace();\n                return \"Error\";\n            }\n            return encryptedString;\n        }\n\n        public static void main(String[] args) {\n            String secretKey = \"XMzDdG4D03CKm2IxIWQw7g==\";\n            String value1= \"ABCD\";\n            String enctypedValue1= \"3uweh4pzoVyH1uODQmVNJA==\";\n            String enctypedValue2= \"37PTC20w4DMZYjG3f+GWepSvAbEJUccMXwS/lXilLav1qM/PrCTdontw5/82OdC1zzyhDEsFVRGo rV6gXAQcm+Zai15hliiUQ8l8KRMtUl4=\";\n            String value4= \"20000\";\n\n            /**  Ecnryption and decryption of value1 **/\n            String encryptedValue1= symmetricEncrypt(value1, secretKey);\n            String decryptedValue1 = symmetricDecrypt(encryptedValue1, secretKey);\n            System.out.println(decryptedValue1);\n\n            /**  Decryption of  enctypedValue1 **/\n            String decryptedValue2 = symmetricDecrypt(enctypedValue1, secretKey);\n            System.out.println(decryptedValue2);\n\n            /**  Decryption of  enctypedValue2 **/\n            String decryptedValue3 = symmetricDecrypt(enctypedValue2, secretKey);\n            System.out.println(decryptedValue3);\n\n            /**  Ecnryption and decryption of value4 **/\n            String encryptedValue4= symmetricEncrypt(value4, secretKey);\n            String decryptedValue4 = symmetricDecrypt(encryptedValue4, secretKey);\n            System.out.println(decryptedValue4);\n        }\n    }\n", "idx": 1686}
{"project": "cipher", "commit_id": "Snippet29293748_11330.java", "target": 0, "func": "public class EncDec\n{\n    private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = \"1234567891234567\".getBytes();\n    public static void main(String[] args) throws Exception \n    {\n        String testData = \"ABC\";\n        String enc = encrypt(testData);\n        System.out.println(\"Encrypted data: \"+enc);\n        String dec = decrypt(enc);\n        System.out.println(\"Decrypted data: \"+enc);\n    }\n    public static String encrypt(String Data) throws Exception \n    {\n\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encVal);\n        return encryptedValue;\n    }\n    public static String decrypt(String encryptedData) throws Exception \n    {\n        try{\n            Key key = generateKey();\n            Cipher c = Cipher.getInstance(ALGO);\n            c.init(Cipher.DECRYPT_MODE, key);\n            byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n            byte[] decValue = c.doFinal(decordedValue);\n            String decryptedValue = new String(decValue);\n            return decryptedValue;\n        }catch(Exception e)\n        {\n            System.out.println(\"Something wrong..\");\n            return \"\";\n        }\n    }\n    private static Key generateKey() throws Exception\n    {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n    }\n}\n", "idx": 1687}
{"project": "cipher", "commit_id": "Snippet42537827_24578.java", "target": 0, "func": "private BufferedImage load(String s){\nBufferedImage image;\n        try{\n            image = ImageIO.read(getDecryptedStream(Buffers.class.getResourceAsStream(s)));\n            return image;\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n        return null;\n}\n\nprivate InputStream getDecryptedStream(InputStream inputStream) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException{\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, this.key);\n    CipherInputStream input = new CipherInputStream(inputStream, cipher);\n\n    return input;\n}\n", "idx": 1688}
{"project": "cipher", "commit_id": "Snippet17234359_484.java", "target": 0, "func": "package com.tb.module.service;\nimport java.security.Key;\nimport java.security.spec.InvalidKeySpecException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.*;\n\n/**\n * This class is used for encrypt and decrypt the  password field.\n *\n */\npublic class PswdEnc {\n\n    private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't','S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\n    public static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encVal);\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey(); \n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n\n\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n    }\n\n}\n", "idx": 1689}
{"project": "cipher", "commit_id": "Snippet15528057_38565.java", "target": 0, "func": "Cipher.getInstance(\"DES\")", "idx": 1690}
{"project": "cipher", "commit_id": "Snippet26078764_8304.java", "target": 0, "func": "protected String encrypt( String value ) {\n\n    try {\n        final byte[] bytes = value!=null ? value.getBytes(UTF8) : new byte[0];\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(),Settings.System.ANDROID_ID).getBytes(UTF8), 20));\n        return new String(Base64.encode(pbeCipher.doFinal(bytes), Base64.NO_WRAP),UTF8);\n\n    } catch( Exception e ) {\n        throw new RuntimeException(e);\n    }\n\n}\n\nprotected String decrypt(String value){\n    try {\n        final byte[] bytes = value!=null ? Base64.decode(value,Base64.DEFAULT) : new byte[0];\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(),Settings.System.ANDROID_ID).getBytes(UTF8), 20));\n        return new String(pbeCipher.doFinal(bytes),UTF8);\n\n    } catch( Exception e) {\n        throw new RuntimeException(e);\n    }\n}\n", "idx": 1691}
{"project": "cipher", "commit_id": "Snippet8877185_33574.java", "target": 0, "func": "FileInputStream fis = new FileInputStream(new File(\"D:/Shashank/Test123.txt\"));\n        File outfile = new File(\"D:/Shashank/encTest1234.txt\");\n        int read;\n        if(!outfile.exists())\n            outfile.createNewFile();\n        File decfile = new File(\"D:/Shashank/dec123.txt\");\n        if(!decfile.exists())\n            decfile.createNewFile();\n        FileOutputStream fos = new FileOutputStream(outfile);\n        FileInputStream encfis = new FileInputStream(outfile);\n        FileOutputStream decfos = new FileOutputStream(decfile);\n        Cipher encipher = Cipher.getInstance(\"AES\");\n        Cipher decipher = Cipher.getInstance(\"AES\");\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecretKey skey = kgen.generateKey();\n        encipher.init(Cipher.ENCRYPT_MODE, skey);\n        CipherInputStream cis = new CipherInputStream(fis, encipher);\n        decipher.init(Cipher.DECRYPT_MODE, skey);\n        CipherOutputStream cos = new CipherOutputStream(decfos,decipher);\n        while((read = cis.read())!=-1)\n                {\n                    fos.write((char)read);\n                    fos.flush();\n                }   \n        fos.close();\n        while((read=encfis.read())!=-1)\n        {\n            cos.write(read);\n            cos.flush();\n        }\n    cos.close();\n", "idx": 1692}
{"project": "cipher", "commit_id": "Snippet25480250_7826.java", "target": 0, "func": "public class EncryptionHelper {\n\n// Encrypts string and encode in Base64\npublic static String encryptText(String plainText,String key, String IV) throws Exception {\n    // ---- Use specified 3DES key and IV from other source --------------\n    byte[] plaintext = plainText.getBytes();//input\n    byte[] tdesKeyData = key.getBytes();// your encryption key\n\n    byte[] myIV = IV.getBytes();// initialization vector\n\n    Cipher c3des = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    SecretKeySpec myKey = new SecretKeySpec(tdesKeyData, \"DESede\");\n    IvParameterSpec ivspec = new IvParameterSpec(myIV);\n\n    c3des.init(Cipher.ENCRYPT_MODE, myKey, ivspec);\n    byte[] cipherText = c3des.doFinal(plaintext);\n    String encryptedString = Base64.encodeToString(cipherText,\n            Base64.DEFAULT);\n    // return Base64Coder.encodeString(new String(cipherText));\n    return encryptedString;\n}\n", "idx": 1693}
{"project": "cipher", "commit_id": "Snippet13488262_37028.java", "target": 0, "func": " import java.security.*;\n   import javax.crypto.*;\n   import javax.crypto.spec.*;\n   import java.io.*;\n\n   /**\n   * This program generates a AES key, retrieves its raw bytes, and\n   * then reinstantiates a AES key from the key bytes.\n   * The reinstantiated key is used to initialize a AES cipher for\n   * encryption and decryption.\n   */\n\n   public class AES {\n\n     /**\n     * Turns array of bytes into string\n     *\n     * @param buf   Array of bytes to convert to hex string\n     * @return  Generated hex string\n     */\n     public static String asHex (byte buf[]) {\n      StringBuffer strbuf = new StringBuffer(buf.length * 2);\n      int i;\n\n      for (i = 0; i < buf.length; i++) {\n       if (((int) buf[i] & 0xff) < 0x10)\n        strbuf.append(\"0\");\n\n       strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n      }\n\n      return strbuf.toString();\n     }\n\n     public static void main(String[] args) throws Exception {\n\n       String message=\"This is just an example\";\n\n       // Get the KeyGenerator\n\n       KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n       kgen.init(128); // 192 and 256 bits may not be available\n\n\n       // Generate the secret key specs.\n       SecretKey skey = kgen.generateKey();\n       byte[] raw = skey.getEncoded();\n\n       SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n\n       // Instantiate the cipher\n\n       Cipher cipher = Cipher.getInstance(\"AES\");\n\n       cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n       byte[] encrypted =\n         cipher.doFinal((args.length == 0 ?\n          \"This is just an example\" : args[0]).getBytes());\n       System.out.println(\"encrypted string: \" + asHex(encrypted));\n\n       cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n       byte[] original =\n         cipher.doFinal(encrypted);\n       String originalString = new String(original);\n       System.out.println(\"Original string: \" +\n         originalString + \" \" + asHex(original));\n     }\n   }\n", "idx": 1694}
{"project": "cipher", "commit_id": "Snippet11683946_35698.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.io.*;\n\npublic class AESEncrypt {\n\n    /**\n     * Turns array of bytes into string\n     * \n     * @param buf\n     *            Array of bytes to convert to hex string\n     * @return Generated hex string\n     */\n    public static String asHex(byte buf[]) {\n        StringBuffer strbuf = new StringBuffer(buf.length * 2);\n        int i;\n\n        for (i = 0; i < buf.length; i++) {\n            if (((int) buf[i] & 0xff) < 0x10)\n                strbuf.append(\"0\");\n\n            strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n        }\n\n        return strbuf.toString();\n    }\n\n    public static byte[] hexStringToByteArray(String s) {\n        int len = s.length();\n        byte[] data = new byte[len / 2];\n        for (int i = 0; i < len; i += 2) {\n            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character\n                    .digit(s.charAt(i + 1), 16));\n        }\n        return data;\n    }\n\n    public static void main(String[] args) throws Exception {\n\n        String message = \"Test text!\";\n\n        // Get the KeyGenerator\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        kgen.init(128); // 192 and 256 bits may not be available\n\n        // Generate the secret key specs.\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        System.out.println(\"Key: \" + asHex(raw));\n\n        // Instantiate the cipher\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encrypted = cipher.doFinal((args.length == 0 ? message : args[0]).getBytes());\n        System.out.println(\"encrypted string: \" + asHex(encrypted));\n\n    }\n}\n", "idx": 1695}
{"project": "cipher", "commit_id": "Snippet12989107_36617.java", "target": 0, "func": "public class PasswordCrypter {\n    Cipher ecipher;\n    Cipher dcipher;\n    SecretKey key;\n    DESKeySpec dks;\n    SecretKeyFactory skf;\n    byte[] psword;\n\n    public PasswordCrypter(String password) {\n\n        try {\n            psword = password.getBytes(\"UTF-16\");\n            dks = new DESKeySpec(psword);\n            skf = SecretKeyFactory.getInstance(\"DES\");\n            key = skf.generateSecret(dks);\n            ecipher = Cipher.getInstance(\"DES\");\n            ecipher.init(Cipher.ENCRYPT_MODE, key);\n            dcipher = Cipher.getInstance(\"DES\");\n            dcipher.init(Cipher.DECRYPT_MODE, key);\n        } catch (NoSuchAlgorithmException e) {\n            throw new CrypterException(e);\n        } catch (NoSuchPaddingException e) {\n            throw new CrypterException(e);\n        } catch (InvalidKeyException e) {\n            throw new CrypterException(e);\n        } catch (InvalidKeySpecException e) {\n            throw new CrypterException(e);\n        } catch (UnsupportedEncodingException e) {\n            throw new CrypterException(e);\n        }\n\n    }\n\n    public byte[] encrypt(byte[] array) {\n\n        try {\n            return ecipher.doFinal(array);\n        } catch (IllegalBlockSizeException e) {\n            throw new CrypterException(e);\n        } catch (BadPaddingException e) {\n            throw new CrypterException(e);\n        }\n    }\n\n    public byte[] decrypt(byte[] array) {\n\n        try {\n            return dcipher.doFinal(array);\n        } catch (IllegalBlockSizeException e) {\n            throw new CrypterException(e);\n        } catch (BadPaddingException e) {\n            throw new CrypterException(e);\n        }\n    }\n}\n", "idx": 1696}
{"project": "cipher", "commit_id": "Snippet8049872_33047.java", "target": 0, "func": "public class PasswordCrypter {\n\n    private Key key;\n    public PasswordCrypter(String password)  {\n\n              try{\n                    KeyGenerator generator;\n                    generator = KeyGenerator.getInstance(\"DES\");\n                    SecureRandom sec = new SecureRandom(password.getBytes());\n                    generator.init(sec);\n                    key = generator.generateKey();\n              }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n\n    public byte[] encrypt(byte[] array) throws CrypterException {\n\n        try{\n            Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n\n                return cipher.doFinal(array);\n        }catch (Exception e) {  \n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public byte[] decrypt(byte[] array) throws CrypterException{\n\n        try{\n            Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, key);\n\n            return cipher.doFinal(array);\n        }catch(Exception e ){\n            e.printStackTrace();\n        }\n\n\n        return null;\n    }\n}\n", "idx": 1697}
{"project": "cipher", "commit_id": "Snippet34923553_16873.java", "target": 0, "func": "public byte[] decryptData(byte input[], String password) throws Exception {\n    byte[] result = null;\n    //Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/NoPadding\");\n    //byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0 };\n    byte[] iv = { -128, -128, -128, -128, -128, -128, -128, -128 };\n    IvParameterSpec ivspec = new IvParameterSpec(iv);\n    cipher.init(Cipher.DECRYPT_MODE, generateSecretKey(passwordToKey(password)), ivspec);\n    result = cipher.doFinal(input);\n    return result;\n}\n\nprotected SecretKey generateSecretKey(byte[] key) throws Exception {\n    SecretKeyFactory factory = SecretKeyFactory.getInstance(\"DES\");\n    KeySpec keySpec = new DESKeySpec(key);\n    SecretKey secretKey = factory.generateSecret(keySpec);\n    return secretKey;\n}\n\npublic byte[] passwordToKey(String password) throws Exception\n{\n    if (password == null)\n        throw new IllegalArgumentException(\"password\");\n    if (password == \"\")\n        throw new IllegalArgumentException(\"password\");\n\n    byte[] key = new byte[8];\n\n    for (int i = 0; i < password.length(); i++)\n    {\n        int c = (int)password.charAt(i);\n        if ((i % 16) < 8)\n        {\n            key[i % 8] ^= (byte)(c << 1);\n        }\n        else\n        {\n            // reverse bits e.g. 11010010 -> 01001011\n            c = (((c << 4) & 0xf0) | ((c >> 4) & 0x0f));\n            c = (((c << 2) & 0xcc) | ((c >> 2) & 0x33));\n            c = (((c << 1) & 0xaa) | ((c >> 1) & 0x55));\n            key[7 - (i % 8)] ^= (byte)c;\n        }\n    }\n\n    addOddParity(key);\n\n    byte[] target = new byte[8];\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );\n    outputStream.write(password.getBytes(\"US-ASCII\"));\n    outputStream.write(new byte[8]);\n    byte[] temp = outputStream.toByteArray();\n    outputStream = new ByteArrayOutputStream( );\n    for (int i = 0; i < (password.length() + (8 - (password.length() % 8)) % 8); ++i) {\n        outputStream.write(temp[i]);\n    }\n    byte[] passwordBuffer = outputStream.toByteArray(); \n\n    Cipher cipher = Cipher.getInstance(\"DES/CBC/NoPadding\");\n    //byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0 };\n    byte[] iv = { -128, -128, -128, -128, -128, -128, -128, -128 };\n    IvParameterSpec ivspec = new IvParameterSpec(iv);\n    cipher.init(Cipher.ENCRYPT_MODE, generateSecretKey(key), ivspec);\n    for (int x = 0; x < passwordBuffer.length / 8; ++x)\n    {\n        cipher.update(passwordBuffer, 8 * x, 8, target, 0);\n    }\n\n    addOddParity(target);\n\n    return target;\n}\n\nprivate void addOddParity(byte[] buffer)\n{\n    for (int i = 0; i < buffer.length; ++i)\n    {\n        buffer[i] = _oddParityTable[buffer[i] & 0xFF];\n    }\n}\n\nprivate static byte[] _oddParityTable = {\n   -127,-127,-126,-126,-124,-124,-121,-121,-120,-120,-117,-117,-115,-115,-114,-114,\n   -112,-112,-109,-109,-107,-107,-106,-106,-103,-103,-102,-102,-100,-100, -97, -97,\n    -96, -96, -93, -93, -91, -91, -90, -90, -87, -87, -86, -86, -84, -84, -81, -81,\n    -79, -79, -78, -78, -76, -76, -73, -73, -72, -72, -69, -69, -67, -67, -66, -66,\n    -64, -64, -61, -61, -59, -59, -58, -58, -55, -55, -54, -54, -52, -52, -49, -49,\n    -47, -47, -46, -46, -44, -44, -41, -41, -40, -40, -37, -37, -35, -35, -34, -34,\n    -31, -31, -30, -30, -28, -28, -25, -25, -24, -24, -21, -21, -19, -19, -18, -18,\n    -16, -16, -13, -13, -11, -11, -10, -10,  -7,  -7,  -6,  -6,  -4,  -4,  -1,  -1,\n      0,   0,   3,   3,   5,   5,   6,   6,   9,   9,  10,  10,  12,  12,  15,  15,\n     17,  17,  18,  18,  20,  20,  23,  23,  24,  24,  27,  27,  29,  29,  30,  30,\n     33,  33,  34,  34,  36,  36,  39,  39,  40,  40,  43,  43,  45,  45,  46,  46,\n     48,  48,  51,  51,  53,  53,  54,  54,  57,  57,  58,  58,  60,  60,  63,  63,\n     65,  65,  66,  66,  68,  68,  71,  71,  72,  72,  75,  75,  77,  77,  78,  78,\n     80,  80,  83,  83,  85,  85,  86,  86,  89,  89,  90,  90,  92,  92,  95,  95,\n     96,  96,  99,  99, 101, 101, 102, 102, 105, 105, 106, 106, 108, 108, 111, 111,\n    113, 113, 114, 114, 116, 116, 119, 119, 120, 120, 123, 123, 125, 125, 126, 126\n};\n", "idx": 1698}
{"project": "cipher", "commit_id": "Snippet44048908_26130.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"DES/CBC/PKCS7Padding\");\n", "idx": 1699}
{"project": "cipher", "commit_id": "Snippet30616578_12819.java", "target": 0, "func": "import javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\n\npublic class Main {\n\n\n    /**\n     * entry the content\n     *\n     * @param content  the content need to entry\n     * @param password the key\n     * @return\n     */\n    public static String md5Aessign(String content, String password) {\n\n        MessageDigest md;\n        try {\n\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n\n            SecureRandom random = SecureRandom.getInstance(\"SHA1PRNG\");\n            random.setSeed(password.getBytes());\n            kgen.init(128, random);\n\n            SecretKey secretKey = kgen.generateKey();\n            byte[] enCodeFormat = secretKey.getEncoded();\n            SecretKeySpec key = new SecretKeySpec(enCodeFormat, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n\n\n            byte[] byteContent = content.getBytes(\"GBK\");\n\n            md = MessageDigest.getInstance(\"MD5\");\n            md.update(byteContent);\n            byte[] result = cipher.doFinal(md.digest());\n\n            return parseByte2HexStr(result);\n\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     *\n     *\n     * @param buf\n     * @return\n     */\n\n    public static String parseByte2HexStr(byte buf[]) {\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < buf.length; i++) {\n            String hex = Integer.toHexString(buf[i] & 0xFF);\n            if (hex.length() == 1) {\n                hex = '0' + hex;\n            }\n            sb.append(hex.toUpperCase());\n        }\n        return sb.toString();\n    }\n\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n\n        String content = \"Hello World!\";\n        String key = \"1234567812345678\";\n\n        System.out.println(md5Aessign(content, key));\n    }\n}\n", "idx": 1700}
{"project": "cipher", "commit_id": "Snippet29671427_11688.java", "target": 0, "func": " public String DesDecryptPin(String pin, String encryptKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException {\n\n    String UNICODE_FORMAT = \"UTF8\";\n    String decryptedPinText = null;\n\n    byte[] hexConvert = hexStringtoByteArray(encryptKey);\n\n    SecretKey desKey = null;\n    KeySpec desKeySpec = new DESedeKeySpec(hexConvert); // Exception HERE\n    Cipher desCipher;\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DESede\");\n    desCipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n    try {\n        desKey = skf.generateSecret(desKeySpec);\n    } catch (InvalidKeySpecException e) {\n        e.printStackTrace();\n    }\n\n    desCipher.init(Cipher.DECRYPT_MODE, desKey);\n    byte[] decryptPin = desCipher.doFinal(pin.getBytes());\n    decryptedPinText = new String(decryptPin, \"UTF-8\");\n\n    return decryptedPinText;\n}\n", "idx": 1701}
{"project": "cipher", "commit_id": "Snippet11838197_35820.java", "target": 0, "func": "import java.io.*;\nimport java.net.*;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.digest.DigestUtils;\n\n\npublic class Main {\n\n    /**\n     * @param args\n     * @throws Exception \n     */\n    public static void main(String[] args) throws Exception {\n\n        String pw = \"[E%Xr6pG-IDIA89_&=NI[AREofOy0#Mv[nJ7rO@T^PwgT!NVY*Hri@($p4luBM)ugVvbnAnWL@xGK*jBP3s$g#-XTH{e3@X*0StJ\";\n        String str = encode(\"Testing Testing Testing Testing Testing Testing Testing Testing Testing Testing Testing Testing Testing Testing Testing Testing Testing Testing Testing Testing \", pw);\n        System.out.println(str);\n        System.out.println(decode(str, pw));\n    }\n\n    public static String encode(String s, String p) throws Exception\n    {\n        String cleartext = padRight(s, s.length()+(16-(s.length()%16)));\n        String key = DigestUtils.md5Hex(p);\n        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(cleartext.getBytes());\n        return Base64.encodeBase64String(encrypted);\n    }\n\n    public static String decode(String encrypted, String p) throws Exception\n    {\n        byte[] bts = Base64.decodeBase64(encrypted);\n\n\n        String key = DigestUtils.md5Hex(p);\n        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n\n\n        byte[] decrypted = cipher.doFinal(bts);\n\n        return new String(decrypted).replaceAll(\"\\0\", \"\");\n    }\n\n    public static String padRight(String s, int n) {\n        while (s.length() < n)\n        {\n            s+=\"\\0\";\n        }\n        return s;\n    }\n\n}\n", "idx": 1702}
{"project": "cipher", "commit_id": "Snippet35185261_17120.java", "target": 0, "func": "password = DESCodec.decode(\"String Returned by the output of encode\")\n\n\n\n\nclass DESCodec {\n    def static encode = { String target ->\n        def cipher = getCipher(Cipher.ENCRYPT_MODE)\n        return cipher.doFinal(target.bytes).encodeBase64() as String\n    }\n\n    def static decode = { String target ->\n        def cipher = getCipher(Cipher.DECRYPT_MODE)\n        return new String(cipher.doFinal(target.decodeBase64())) as String\n    }\n\n    private static getCipher(mode) {\n        def keySpec = new DESKeySpec(getPassword())\n        def cipher = Cipher.getInstance(\"DES\")\n        def keyFactory = SecretKeyFactory.getInstance(\"DES\")\n        cipher.init(mode, keyFactory.generateSecret(keySpec))\n        return cipher\n    }\n\n    private static getPassword() {\n        \"testsaltString\".getBytes(\"UTF-8\")\n    }\n\n\n    static void main(args) {\n\n        println args\n        if(args.length == 1) {\n            println encode(args[0])\n        } else {\n\n             println decode(args[1])\n        }\n    }\n}\n", "idx": 1703}
{"project": "cipher", "commit_id": "Snippet23821923_6126.java", "target": 0, "func": "import java.security.spec.AlgorithmParameterSpec;\nimport java.security.spec.KeySpec;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;\n\npublic class EncryptedPropertyPlacementConfigurer extends PropertyPlaceholderConfigurer\n{\n    /** algorithm used for encrpytion and decryption */\n    private static final String ALGORITHM = \"PBEWithMD5AndDES\";\n\n    /** 8-byte Salt. */\n    private static final byte[] SALT = { ... };\n\n    /** Iteration count. */\n    private static final int ITERATION_COUNT = 19;\n\n    /** Stores parameter specification. */\n    private static final AlgorithmParameterSpec PARAM_SPEC = new PBEParameterSpec(SALT, ITERATION_COUNT);\n\n    //All properties starting with !! will be decrypted.\n    private static final String ENCRYPTIGION_LEADIN = \"!!\";\n\n    public static class EncrypterException extends RuntimeException\n    {\n        private static final long serialVersionUID = -7336009350594115318L;\n\n        public EncrypterException(final String message, final Throwable cause)\n        {\n            super(message, cause);\n        }\n\n        public EncrypterException(final String message)\n        {\n            super(message);\n        }\n    }\n\n    private static String decrypt(final String passPhrase, final String message)\n    {\n        // Create the key\n        final KeySpec keySpec = new PBEKeySpec(passPhrase.toCharArray(), SALT, ITERATION_COUNT);\n        SecretKey key;\n        try\n        {\n            key = SecretKeyFactory.getInstance(ALGORITHM).generateSecret(keySpec);\n        }\n        catch (final Exception e)\n        {\n            throw new EncrypterException(\"Error setting up encryption details.\", e);\n        }\n\n        if (!Base64.isBase64(message))\n        {\n            throw new EncrypterException(\"Message is not a valid base64 message.\");\n        }\n\n        final String result;\n        try\n        {\n            final Cipher cipher = Cipher.getInstance(ALGORITHM);\n\n            cipher.init(Cipher.DECRYPT_MODE, key, PARAM_SPEC);\n\n            final byte[] dec = Base64.decodeBase64(message);\n\n            result = new String(cipher.doFinal(dec), \"UTF-8\");\n        }\n        catch (final Exception e)\n        {\n            throw new EncrypterException(\"Error decrypting content.\", e);\n        }\n\n        return result;\n    }\n\n    @Override\n    protected String convertPropertyValue(final String originalValue)\n    {\n        if (StringUtils.isNotBlank(originalValue) && originalValue.startsWith(ENCRYPTIGION_LEADIN))\n        {\n            return decrypt(\"<Your magic password>\", originalValue.substring(2));\n        }\n        return super.convertPropertyValue(originalValue);\n    }\n\n}\n", "idx": 1704}
{"project": "cipher", "commit_id": "Snippet24119055_6415.java", "target": 0, "func": "import javax.crypto.Cipher;         \nimport javax.crypto.spec.SecretKeySpec;         \n\nimport org.apache.commons.codec.DecoderException;           \nimport org.apache.commons.codec.binary.Hex;         \n\nimport sun.misc.BASE64Decoder;          \nimport sun.misc.BASE64Encoder;          \n\n\npublic class AESTest {          \n    private static String sKeyString = \"29c4e20e74dce74f44464e814529203a\";      \n    private static SecretKeySpec skeySpec = null;       \n\n    static {        \n        try {   \n            skeySpec = new SecretKeySpec(Hex.decodeHex(sKeyString.toCharArray()), \"AES\");\n        } catch (DecoderException e) {  \n            e.printStackTrace();\n        }   \n    }       \n\n    public static String encode(String message) {       \n        String result = \"\"; \n\n        try {   \n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n            byte[] encrypted = cipher.doFinal(message.getBytes(\"UTF-8\"));\n            result =  (new BASE64Encoder()).encode(encrypted);\n        } catch (Exception e) { \n            e.printStackTrace();\n        }   \n\n        return result;  \n    }       \n\n    public static String decode(String message){        \n        String result = \"\"; \n        try {   \n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n            byte[] encrypted = (new BASE64Decoder()).decodeBuffer(message);\n            byte[] original = cipher.doFinal(encrypted);\n            result = new String(original,\"UTF-8\");\n        } catch (Exception e) { \n            e.printStackTrace();\n        }   \n\n        return result;  \n    }       \n\n    public static void main(String[] args) {        \n        String message = \"SOME TEST\";   \n        System.out.println(\"message : \"+message);   \n        String encodeString = encode(message);  \n        System.out.println(\"encrypted string: \" + encodeString);    \n        String original = decode(encodeString); \n        System.out.println(\"Original string: \" + original); \n    }       \n}           \n", "idx": 1705}
{"project": "cipher", "commit_id": "Snippet20401655_3036.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.*;\n\nCipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\naes.init(Cipher.ENCRYPT_MODE, key);\nbyte[] ciphertext = aes.doFinal(\"my cleartext\".getBytes());\n\naes.init(Cipher.DECRYPT_MODE, key);\nString cleartext = new String(aes.doFinal(ciphertext));\n", "idx": 1706}
{"project": "cipher", "commit_id": "Snippet28506922_10668.java", "target": 0, "func": "String secret = \"1234567812345678\";\nKey key = new SecretKeySpec(secret.getBytes(), \"AES\");\n\n// Encrypt\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, key);\nbyte[] encryptedData = cipher.doFinal(\"helloworld\".getBytes());\n\n// Decrypt\ncipher.init(Cipher.DECRYPT_MODE, key);\nbyte[] decryptedData = cipher.doFinal(encryptedData);\nSystem.out.println(new String(decryptedData, \"UTF-8\"));\n", "idx": 1707}
{"project": "cipher", "commit_id": "Snippet17798503_915.java", "target": 0, "func": "public static final byte[] ige(final byte[] key, final byte[] IV,\n        final byte[] Message) throws Exception {\n\n    final Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n    cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, \"AES\"));\n\n    final int blocksize = cipher.getBlockSize();\n\n    byte[] xPrev = Arrays.copyOfRange(IV, 0, blocksize);\n    byte[] yPrev = Arrays.copyOfRange(IV, blocksize, IV.length);\n\n    byte[] decrypted = new byte[0];\n\n    byte[] y, x;\n    for (int i = 0; i < Message.length; i += blocksize) {\n        x = java.util.Arrays.copyOfRange(Message, i, i + blocksize);\n        y = xor(cipher.doFinal(xor(x, yPrev)), xPrev);\n        xPrev = x;\n        yPrev = y;\n\n        decrypted = sumBytes(decrypted, y);\n    }\n\n    return decrypted;\n}\n", "idx": 1708}
{"project": "cipher", "commit_id": "Snippet45737528_27772.java", "target": 0, "func": "    public static String encrypt(String sessionId)\n{\n    try\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        final String encryptedSessionId = Base64.encodeBase64String(cipher.doFinal(sessionId.getBytes()));\n        return encryptedSessionId;\n    }\n    catch (Exception e)\n    {\n        e.printStackTrace();\n    }\n    return null;\n\n}\n", "idx": 1709}
{"project": "cipher", "commit_id": "Snippet30959980_13127.java", "target": 0, "func": "public void test() {\n    String sKSN = \"ffff1234560006800010\";\n    String sBDK = \"E08A46B616230152230DB9C8DF94C75E\";\n    byte[] dikKSN = new byte[10];\n    byte[] KSN8 = new byte[8];\n    byte[] BDK = new byte[16];\n    byte[] lKey = new byte[8];\n    byte[] rKey = new byte[8];\n    String retKey = \"\";\n    String lgTxt = \"\";\n    dikKSN = this.fromHex(sKSN);  // convert hex to byte array\n    BDK = this.fromHex(sBDK); // convert hex to byte array\n    KSN8 = this.copyByte8(dikKSN); //use the first 8 values\n    lKey = this.tDESEncrypt(KSN8, BDK);\n}\nprivate byte[] tDESEncrypt(byte[] plainTextBytes, byte[] kb) {\n  byte[] cipherText = null;\n  try {\n    final MessageDigest md = MessageDigest.getInstance(\"md5\");\n    final byte[] digestOfPassword = md.digest(kb);\n    final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n    for (int j = 0, k = 16; j < 8;) {\n      keyBytes[k++] = keyBytes[j++];\n    }\n    final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    final Cipher cipher = Cipher.getInstance(\"DESede/CBC/NoPadding\"); \n    final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n    cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n    cipherText = cipher.doFinal(plainTextBytes);\n  } catch (Exception ex) {\n    ex.printStackTrace();\n  }\n  return cipherText;\n}\n", "idx": 1710}
{"project": "cipher", "commit_id": "Snippet26722584_8841.java", "target": 0, "func": "private static String rc4(String plaintext, int mode, Key key) throws Exception {\n    Cipher cipher = Cipher.getInstance(\"RC4\");\n    cipher.init(mode, (java.security.Key) key);\n    return new String(cipher.doFinal(plaintext.getBytes()));\n}\n\npublic static String encrypt(String plaintext, Key key) throws Exception {\n    return rc4(plaintext, Cipher.ENCRYPT_MODE, key);\n}\n", "idx": 1711}
{"project": "cipher", "commit_id": "Snippet15882476_38874.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n", "idx": 1712}
{"project": "cipher", "commit_id": "Snippet9614189_33831.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");", "idx": 1713}
{"project": "cipher", "commit_id": "Snippet6907822_32447.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\n\npublic class DES \n{\n    SecretKey key;\n    DES(byte []  KEY) throws Exception\n    {\n        key = readKey(KEY);\n    }\n\n    public SecretKey readKey(byte[] rawkey) throws Exception\n    {\n         DESKeySpec keyspec = new DESKeySpec(rawkey);\n         SecretKeyFactory keyfactory = SecretKeyFactory.getInstance(\"DES\");\n         SecretKey key = keyfactory.generateSecret(keyspec);\n         return key;\n    }\n\n    public byte[] encrypt(byte[] plain ) throws Exception\n    {\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encrypted = cipher.doFinal(plain);\n        return encrypted;\n    }\n    public byte[] decrypt(byte[] cipher ) throws Exception\n    {\n        Cipher dcipher = Cipher.getInstance(\"DES\");\n        dcipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decrypted = dcipher.doFinal(cipher);\n        return decrypted;\n    }  \n}\n", "idx": 1714}
{"project": "cipher", "commit_id": "Snippet39701301_21608.java", "target": 0, "func": "package aes;\n\nimport java.security.*;\nimport java.security.spec.InvalidKeySpecException;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\n\npublic class AESencrp {\n\n     private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = \n        new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't', 'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\npublic static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n\n\n        // Encryption:\n\n        String encryptedValue = new BASE64Encoder().encode(encVal);\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n} }\n", "idx": 1715}
{"project": "cipher", "commit_id": "Snippet41333727_23302.java", "target": 0, "func": "package main;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\npublic class ForTest {\n    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {\n        String message= \"0123456789012345\";//Message to encode\u00a0 \n        String key = \"2222222222222222\";\u00a0 \n        // 128 bit key\u00a0 -this key is processed as ASCII values\u00a0 \n        System.out.println(\"Processing 3.0 AES-128 ECB Encryption/Decryption Example\");\n        System.out.println(\"++++++++++++++++++++++++++++++++\");\n        System.out.println(\"Original Message: \" + message);\n        System.out.println(\"Key: \" + key);\n        System.out.println(\"key in bytes: \"+key.getBytes(\"UTF-8\"));\n        System.out.println(\"==========================\");           \n        //Encrypter\n        SecretKeySpec skeySpec_encode = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\n        Cipher cipher_encode  = Cipher.getInstance(\"AES/ECB/NoPadding\");\n        //          Cipher cipher_encode = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\"); //AES-CBC with IV encoding, ECB is used without the IV, example shown on <a href=\"http://aesencryption.net/\" target=\"_blank\" rel=\"nofollow\">http://aesencryption.net/</a> \n        cipher_encode.init(Cipher.ENCRYPT_MODE, skeySpec_encode);\n        byte[] encrypted = cipher_encode.doFinal(message.getBytes());\n        System.out.println(\"Encrypted String (base 64): \"\n                + DatatypeConverter.printBase64Binary(encrypted));\n        //encode without padding: Base64.getEncoder().withoutPadding().encodeToString(encrypted));\n        //encode with padding:\u00a0 Base64.getEncoder().encodeToString(encrypted));\n        String base64_encrypted = DatatypeConverter.printBase64Binary(encrypted);\n        //Decrypter\n        SecretKeySpec skeySpec_decode = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\n        Cipher cipher_decode  = Cipher.getInstance(\"AES/ECB/NoPadding\");\n        //          Cipher cipher_decode = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        cipher_decode.init(Cipher.DECRYPT_MODE, skeySpec_decode);\n        System.out.println(\"length: \"+\"Ouril+UTDF8htLzE\".length());\n        byte[] decrypted_original = cipher_decode.doFinal(DatatypeConverter.parseBase64Binary(\"Ouril+UTDF8htLzEhiRj7wA=\"));\n        String decrypt_originalString = new String(decrypted_original);\n        System.out.println(\"Decrypted String: \" + decrypt_originalString);\n    }\n}\n", "idx": 1716}
{"project": "cipher", "commit_id": "Snippet29508467_11546.java", "target": 0, "func": "  String strDecriptedValue = decrypt(passkey, responseBase64);\n\npublic static String decrypt(String seed, String encrypted)\n            throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = Base64.decode(encrypted.getBytes(), Base64.DEFAULT);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator keygen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom random = SecureRandom.getInstance(\"SHA1PRNG\");\n        random.setSeed(seed);\n        keygen.init(128, random); \n        SecretKey key = keygen.generateKey();\n        byte[] raw = key.getEncoded();\n        return raw;\n    }\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted)\n            throws Exception {\n        SecretKeySpec keySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE, keySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n", "idx": 1717}
{"project": "cipher", "commit_id": "Snippet17690611_809.java", "target": 0, "func": "public static String decrypt(byte[] message) throws Exception {\n    final MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n    final byte[] digestOfPassword = md.digest(token.getBytes(\"utf-8\"));\n    final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n    for (int j = 0, k = 16; j < 8;) {\n        keyBytes[k++] = keyBytes[j++];\n    }\n\n    final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n    final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n    final Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    // final Cipher decipher = Cipher.getInstance(\"DESede/CFB/NoPadding\");\n    decipher.init(Cipher.DECRYPT_MODE, key, iv);\n    final byte[] plainText = decipher.doFinal(message);\n    return new String(plainText, \"UTF-8\");\n}\n", "idx": 1718}
{"project": "cipher", "commit_id": "Snippet41925353_23925.java", "target": 0, "func": "private File dencryptKeysFile() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, IOException, ClassNotFoundException, BadPaddingException{\n    SecretKey key64 = new SecretKeySpec( new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 }, \"Blowfish\" );\n    Cipher cipher = Cipher.getInstance( \"Blowfish\" );\n    cipher.init( Cipher.DECRYPT_MODE, key64 );\n    CipherInputStream cipherInputStream = new CipherInputStream(new BufferedInputStream(new FileInputStream(fileName)),cipher);\n    ObjectInputStream inputStream = new ObjectInputStream(cipherInputStream);\n    SealedObject sealedObject = (SealedObject)inputStream.readObject();\n    inputStream.close();\n\n    File keysFile =(File)sealedObject.getObject(cipher);\n    this.keysFile = keysFile;\n    return keysFile;\n}\n", "idx": 1719}
{"project": "cipher", "commit_id": "Snippet9613658_34067.java", "target": 0, "func": "dh=new data_helper(Resy.this);\n        mac_db=dh.getData();\n\n//        getdata=mac_db.toString();\n\n        KeyGenerator kgen;\n        try {\n            kgen = KeyGenerator.getInstance(\"AES\");\n\n             kgen.init(128); // 192 and 256 bits may not be available\n\n  // Generate the secret key specs.\n                SecretKey skey = kgen.generateKey();\n                byte[] raw = skey.getEncoded();\n\n                SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n\n                // Instantiate the cipher\n\n                Cipher cipher = Cipher.getInstance(\"AES\");\n                         getdata=mac_db.toString();\n//              byte g1[]=getdata.getBytes();\n//              System.out.println(g1);\n\n        byte b[]=hexStringToByteArray(getdata);\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] m1=cipher.doFinal(b);   // here pad block corrupt exception came.\n                String originalString_mac = new String(original_macadress);\n                Toast.makeText(getApplicationContext(),\"Original : \" +originalString_mac + \" \" + asHex(original_macadress) , Toast.LENGTH_LONG).show();\n", "idx": 1720}
{"project": "cipher", "commit_id": "Snippet41099999_23037.java", "target": 0, "func": "    @Test\npublic void testGet() {\n    Cipher cipher = null;\n    try {\n        SecretKey sks= getKeySpec(pass, salt);\n        cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, sks);\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeySpecException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    }\n}\n\npublic SecretKey getKeySpec(char[] pass, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n\n    //generate key spec...\n    return secretKeyFactory.generateSecret(keySpec);\n}\n", "idx": 1721}
{"project": "cipher", "commit_id": "Snippet38201687_20172.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n", "idx": 1722}
{"project": "cipher", "commit_id": "Snippet4004886_30980.java", "target": 0, "func": "import javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.*;\n\npublic class DecryptionTest {\n    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, NoSuchProviderException {\n        String password = \"12345678901234567890\";\n        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n        SecretKeySpec key = new SecretKeySpec(password.getBytes(), \"ECB\");\n        Cipher m_decrypter = Cipher.getInstance(\"DESede/ECB/ZeroBytePadding\");\n        m_decrypter.init(Cipher.DECRYPT_MODE, key);\n        byte[] decryptedText = m_decrypter.doFinal(\"bdf0baf948bff7e7\".getBytes());\n        System.out.println(new String(decryptedText));\n    }\n}\n", "idx": 1723}
{"project": "cipher", "commit_id": "Snippet17197446_442.java", "target": 0, "func": "private static final String ALGO = \"AES\";\n\n\n\npublic static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n     //   String encryptedValue = new BASE64Encoder().encode(encVal);\n\n        byte[] decoded = Base64.encodeBase64(encVal);\n\n        return (new String(decoded, \"UTF-8\") + \"\\n\");\n    }\n\npublic static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue =Base64.decodeBase64(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n\n        return decryptedValue;\n\n    }\n\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(Constant.keyValue, ALGO);\n        return key;\n    }\n", "idx": 1724}
{"project": "cipher", "commit_id": "Snippet19649058_2377.java", "target": 0, "func": "/**\n     * Method To Decrypt An Ecrypted String\n     */\n    public String decrypt(String encryptedString, String myEncryptionKey) {\n        String decryptedText = null;\n        try {\n            byte[] keyAsBytes = myEncryptionKey.getBytes(\"UTF8\");\n            KeySpec myKeySpec = new DESedeKeySpec(keyAsBytes);\n            SecretKeyFactory mySecretKeyFactory = \n                    SecretKeyFactory.getInstance(\"DESede\");\n            Cipher cipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n            SecretKey key = mySecretKeyFactory.generateSecret(myKeySpec);\n\n            cipher.init(Cipher.DECRYPT_MODE, key);\n//            BASE64Decoder base64decoder = new BASE64Decoder();\n//            byte[] encryptedText = base64decoder.decodeBuffer(encryptedString);\n\n            byte[] encryptedText =  org.apache.commons.codec.binary.Base64.decodeBase64(encryptedString);\n            byte[] plainText = cipher.doFinal(encryptedText);\n            decryptedText= bytes2String(plainText);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return decryptedText;\n    }\n", "idx": 1725}
{"project": "cipher", "commit_id": "Snippet15147099_38225.java", "target": 0, "func": "public MyCipher() throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, UnsupportedEncodingException {\n    Security.addProvider(new BouncyCastleProvider());\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"DESede\", \"BC\");\n    keyGen.init(new SecureRandom());\n    SecretKey keySpec = keyGen.generateKey();\n\n    this.sharedKey = keySpec.getEncoded().toString();\n    this.encrypter = Cipher.getInstance(\"DESede/ECB/Nopadding\", \"BC\");\n    this.encrypter.init(Cipher.ENCRYPT_MODE, keySpec);\n    this.decrypter = Cipher.getInstance(\"DESede/ECB/Nopadding\", \"BC\");\n    this.decrypter.init(Cipher.DECRYPT_MODE, keySpec);\n}\n", "idx": 1726}
{"project": "cipher", "commit_id": "Snippet39865043_21773.java", "target": 0, "func": "public static String EncryptUrl(String parameters){\n\n    try{\n        String encodedStr = \"\";\n        Cipher cipher;\n        DESKeySpec keySpec = new DESKeySpec(key.getBytes(\"UTF8\"));\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        cipher = Cipher.getInstance(\"DES\");\n        cipher.init(Cipher.ENCRYPT_MODE, keyFactory.generateSecret(keySpec));\n\n        encodedStr = Base64.encodeBase64String(cipher.doFinal(parameters.getBytes(\"UTF8\")));\n\n        try{\n            encodedStr = URLEncoder.encode(encodedStr, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n\n            throw new AssertionError(\"UTF-8 is unknown\");\n        }\n\n        return encodedStr;\n    }\n    catch(Exception ex){\n        return null;\n    }\n}\n", "idx": 1727}
{"project": "cipher", "commit_id": "Snippet22628085_5033.java", "target": 0, "func": "public class Cryptography {\n\n    public static SecretKey generateKey() throws NoSuchAlgorithmException {\n        MessageDigest digest = MessageDigest.getInstance(\"SHA\");\n        digest.update(\"BhLKTyLoP YroUsRQT\".getBytes());\n        return new SecretKeySpec(digest.digest(), 0, 16, \"AES\");\n    }\n\n    public static byte[] encrypt(String message, SecretKey key) throws NoSuchAlgorithmException, BadPaddingException, IllegalBlockSizeException, NoSuchPaddingException, InvalidKeyException, UnsupportedEncodingException {\n        Cipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        aes.init(Cipher.ENCRYPT_MODE, key);\n        return aes.doFinal(message.getBytes());\n    }\n\n    public static String decrypt(byte[] cipherText, SecretKey key) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        Cipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        aes.init(Cipher.DECRYPT_MODE, key);\n        return new String(aes.doFinal(cipherText));\n    }\n\n}\n", "idx": 1728}
{"project": "cipher", "commit_id": "Snippet47390097_29353.java", "target": 0, "func": "private static String encrypt(String text) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchProviderException\n{\n    String keyString = AESEncryption.convertToUTF8(\"8DJE7K01U8B51807B3E17D21\");\n    text = AESEncryption.convertToUTF8(text);\n\n    byte[]keyValue = Base64.getEncoder().encode(keyString.getBytes(StandardCharsets.UTF_8));\n    Key key = new SecretKeySpec(keyValue, \"AES\");\n    Cipher c1 = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n    c1.init(Cipher.ENCRYPT_MODE, key);\n\n    byte[] encodedText =Base64.getEncoder().encode(text.getBytes(StandardCharsets.UTF_8));\n    System.out.println(\"Encoded text: \"+new String(encodedText,StandardCharsets.UTF_8));\n\n    byte[] encVal = c1.doFinal(encodedText);\n    System.out.println(\"Encoded val: \"+new String(encVal,StandardCharsets.UTF_8));\n\n    return new String(encVal);\n}\n", "idx": 1729}
{"project": "cipher", "commit_id": "Snippet39011165_20897.java", "target": 0, "func": "public Main3Activity() {\n    try {\n      //  SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\",\"Crypto\");\n\n        keyGenerator = KeyGenerator.getInstance(\"Blowfish\");\n        secretKey = keyGenerator.generateKey();\n        cipher = Cipher.getInstance(\"Blowfish\");\n    } catch (NoSuchPaddingException ex) {\n        System.out.println(ex);\n    } catch (NoSuchAlgorithmException ex) {\n        System.out.println(ex);\n    }\n}\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main3);\n\n\n    ActivityCompat.requestPermissions(this, new String[]{ACCESS_FINE_LOCATION, CAMERA, WRITE_EXTERNAL_STORAGE}, PERMISSION_REQUEST_CODE);\n    v1=(ImageView)findViewById(R.id.imageViewnew);\n    b1=(Button)findViewById(R.id.cameranew);\n\n    final String imagePath = \"image\" + \".png\";\n    File root = new File(Environment.getExternalStorageDirectory() + File.separator + \"savedimages\");\n    root.mkdirs();\n    if (!root.exists()) {\n        root.mkdir();\n    }\n\n    file = new File(Environment.getExternalStorageDirectory() + File.separator + \"savedimages\",imagePath);\n    file1 = new File(Environment.getExternalStorageDirectory() + File.separator + \"savedimages\",\"Encryp\"+imagePath);\n    file2 = new File(Environment.getExternalStorageDirectory() + File.separator + \"savedimages\",\"decryp\"+imagePath);\n\n    b1.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n\n            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n            outputFileUri = Uri.fromFile(file);\n            intent.putExtra(MediaStore.EXTRA_OUTPUT, outputFileUri);\n            startActivityForResult(intent, CAMERA_REQUEST);\n\n        }\n    });\n}\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    if (requestCode == CAMERA_REQUEST && resultCode == RESULT_OK) {\n\n\n        OutputStream outStream = null;\n        InputStream inStream = null;\n        try {\n\n            System.out.println(\"Encryption Over\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            inStream = new FileInputStream(file);\n            outStream = new FileOutputStream(file1);\n            byte[] buffer = new byte[1024];\n            int len;\n\n            while ((len = inStream.read(buffer)) > 0) {\n                outStream.write(cipher.update(buffer, 0, len));\n                outStream.flush();\n            }\n            outStream.write(cipher.doFinal());\n            outStream.close();\n        } catch (IllegalBlockSizeException ex) {\n            System.out.println(ex);\n        } catch (BadPaddingException ex) {\n            System.out.println(ex);\n        } catch (InvalidKeyException ex) {\n            System.out.println(ex);\n        } catch (FileNotFoundException ex) {\n            System.out.println(ex);\n        } catch (IOException ex) {\n            System.out.println(ex);\n        }\n\n\n        try {\n            System.out.println(\"Decryption Over\");\n\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            inStream = new FileInputStream(file1);\n            outStream = new FileOutputStream(file2);\n            byte[] buffer = new byte[1024];\n            int len;\n\n            while ((len = inStream.read(buffer)) > 0)\n            {\n            //------------>>>>>>>>>    Here Image is Storing instead of that it should read as byte array\n                // ------------>>>>>>>>>>   and read as bitmap and set in Imageview for preview\n\n                outStream.write(cipher.update(buffer, 0, len));\n                outStream.flush();\n            }\n            System.out.print(\"Decryption ovverrr\");\n            outStream.write(cipher.doFinal());\n            inStream.close();\n            outStream.close();\n        } catch (IllegalBlockSizeException ex) {\n            System.out.println(ex);\n        } catch (BadPaddingException ex) {\n            System.out.println(ex);\n        } catch (InvalidKeyException ex) {\n            System.out.println(ex);\n        } catch (FileNotFoundException ex) {\n            System.out.println(ex);\n        } catch (IOException ex) {\n            System.out.println(ex);\n        } catch (Exception ex) {\n            System.out.println(ex);\n        }\n\n\n        BitmapFactory.Options options=new BitmapFactory.Options();\n        final Bitmap b=BitmapFactory.decodeFile(file2.toString(),options);\n        System.out.println(\"Image getting from File\");\n\n        //----------->>>>>>>>>> Decrypted Image should view Here. Currently I am getting directly from file.\n        v1.setImageBitmap(b);\n\n    }\n}\n}\n", "idx": 1730}
{"project": "cipher", "commit_id": "Snippet24009707_6315.java", "target": 0, "func": "public class CBCTest {\n    public static void main(String[] args) throws Exception {\n        Cipher cc = Cipher.getInstance(\"DES/CBC/NoPadding\");\n        Key k = new SecretKeySpec(new byte[] {1,1,1,1,1,1,1,1}, \"DES\");\n        cc.init(Cipher.ENCRYPT_MODE, k);\n        byte[] data = new byte[]{1,2,3,4,5,6,7,8};\n        cc.doFinal(data);\n        System.out.println(\"Encrypted: \" + Arrays.toString(cc.doFinal(data)));\n    }\n}\n", "idx": 1731}
{"project": "cipher", "commit_id": "Snippet10276821_34634.java", "target": 0, "func": "Cipher.getInstance(\"3DES/CBC/PKCS5Padding\")", "idx": 1732}
{"project": "cipher", "commit_id": "Snippet22156779_4561.java", "target": 0, "func": "import java.io.ByteArrayOutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.nio.charset.Charset;\nimport javax.crypto.*;\nimport java.security.*;\nimport java.util.Arrays;\nimport javax.crypto.spec.*;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\n\nimport org.apache.commons.codec.binary.Hex;\n\npublic class AESCrypto2 {\n\nprivate Cipher AEScipher;\nprivate KeyGenerator AESgen;\nprivate SecretKeySpec AESkey;\nprivate SecretKeySpec decodeKey;\nprivate String hexDecodeKey;\nprivate String decodeKey64;\nprivate byte[] cipherData;\nprivate String msg;\nprivate String encMsg;\n\npublic static void main(String[] args) {\n    try {\n        AESCrypto2 a = new AESCrypto2();\n        a.encrypt(\"Hello!\");\n        try {\n            a.decrypt(a.getEncryptedMsg(), a.getDecodeKey());\n        } catch (DecoderException ex) {\n            ex.printStackTrace();\n        }\n    } catch (NoSuchAlgorithmException ex) {\n        ex.printStackTrace();\n    } catch (NoSuchPaddingException ex) {\n        ex.printStackTrace();\n    } catch (InvalidKeyException ex) {\n        ex.printStackTrace();\n    } catch (UnsupportedEncodingException ex) {\n        ex.printStackTrace();\n    } catch (IllegalBlockSizeException ex) {\n        ex.printStackTrace();\n    } catch (BadPaddingException ex) {\n        ex.printStackTrace();\n    }\n\n}\n\npublic AESCrypto2() throws NoSuchAlgorithmException, NoSuchPaddingException,\n        UnsupportedEncodingException {\n    AESgen = KeyGenerator.getInstance(\"AES\");\n    AESgen.init(128);\n    AESkey = (SecretKeySpec) AESgen.generateKey();\n    decodeKey = new SecretKeySpec(AESkey.getEncoded(), \"AES\");\n    hexDecodeKey = keyToString(decodeKey);\n    AEScipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n}\n\npublic AESCrypto2(String msg) throws NoSuchAlgorithmException,\n        NoSuchPaddingException, InvalidKeyException,\n        UnsupportedEncodingException, IllegalBlockSizeException,\n        BadPaddingException {\n    this();\n    encrypt(msg);\n}\n\npublic String encrypt(String msg) throws NoSuchAlgorithmException,\n        InvalidKeyException, UnsupportedEncodingException,\n        IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException {\n    AEScipher.init(Cipher.ENCRYPT_MODE, AESkey);\n    cipherData = AEScipher.doFinal(handleString(msg.getBytes(\"UTF-8\")));\n\n    this.msg = msg;\n    encMsg = stringToHex(new String(cipherData));\n    return encMsg;\n}\n\npublic String decrypt(String msg, String hexDecodeKey) throws\n        InvalidKeyException, IllegalBlockSizeException,\n        BadPaddingException, UnsupportedEncodingException,\n        NoSuchAlgorithmException, NoSuchPaddingException, DecoderException {\n    AEScipher.init(Cipher.DECRYPT_MODE, stringToKey(hexDecodeKey));\n    byte[] decryptedData = AEScipher.doFinal(handleString(hexToString(msg).getBytes(\"UTF-8\")));\n    encMsg = msg;\n    msg = new String(decryptedData);\n    System.out.println(msg);\n    return msg;\n}\n\npublic String getEncryptedMsg() {\n    return encMsg;\n}\n\npublic String getDecryptedMsg() {\n    return msg;\n}\n\npublic String getDecodeKey() {\n    return hexDecodeKey;\n}\n\npublic SecretKeySpec getKey() {\n    return decodeKey;\n}\n\n//AEScipher requires that 16 divides the length of b\npublic static byte[] handleString(byte[] b) throws UnsupportedEncodingException {\n    byte[] temp = b;\n    if (temp.length % 16 != 0) {\n        byte[] byteMsg = Arrays.copyOf(temp, temp.length + 16 - (temp.length % 16));\n        return byteMsg;\n    }\n    return temp;\n}\n\npublic static String keyToString(SecretKeySpec key) {\n    String decoded = Hex.encodeHexString(key.getEncoded());\n    return decoded;\n}\n\npublic static SecretKeySpec stringToKey(String key) throws DecoderException {\n    byte[] decodedKey = Hex.decodeHex(key.toCharArray());\n    return new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\");\n}\n\npublic static String stringToHex(String msg) throws UnsupportedEncodingException {\n    return Hex.encodeHexString(msg.getBytes(\"UTF-8\"));\n}\n\npublic static String hexToString(String msg) throws DecoderException {\n    return new String(Hex.decodeHex(msg.toCharArray()));\n}\n", "idx": 1733}
{"project": "cipher", "commit_id": "Snippet15720077_38723.java", "target": 0, "func": "public class Cryptography {\nprivate static final String CRYPTOGRAPHY_ALGO_DES = \"DES\";\n\nprivate static Cipher cipher = null;\nprivate static DESKeySpec keySpec = null;\nprivate static SecretKeyFactory keyFactory = null;\n\npublic static String encrypt(String inputString, String commonKey)\n        throws InvalidKeyException, IllegalBlockSizeException,\n        BadPaddingException {\n\n    String encryptedValue = \"\";\n    SecretKey key = getSecretKey(commonKey);\n\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    byte[] inputBytes = inputString.getBytes();\n    byte[] outputBytes = cipher.doFinal(inputBytes);\n\n    encryptedValue =  new String(Base64.encodeBase64(outputBytes));\n    return encryptedValue;\n}\n\npublic static String decrypt(String encryptedString, String commonKey)\n    throws InvalidKeyException, IllegalBlockSizeException,\n    BadPaddingException, IOException {\n\nString decryptedValue = \"\";\nencryptedString = encryptedString.replace(' ', '+');\n\nSecretKey key = getSecretKey(commonKey);\n\ncipher.init(Cipher.DECRYPT_MODE, key); \n\nbyte[] decodeBytes=Base64.decodeBase64(encryptedString.getBytes());\n\ncipher.update(decodeBytes);\nbyte[] recoveredBytes = cipher.doFinal( );\nSystem.out.println(\" recovered bytes\\t\" + recoveredBytes);\ndecryptedValue = new String(recoveredBytes);\nSystem.out.println(\" decryptedvalue **strong text**\\t\" + decryptedValue);\nreturn decryptedValue;\n\n}\n\nprivate static SecretKey getSecretKey(String secretPassword) {\nSecretKey key = null;\ntry {\n    cipher = Cipher.getInstance(CRYPTOGRAPHY_ALGO_DES);\n    keySpec = new DESKeySpec(secretPassword.getBytes(\"UTF8\"));\n    keyFactory = SecretKeyFactory.getInstance(CRYPTOGRAPHY_ALGO_DES);\n    key = keyFactory.generateSecret(keySpec);\n} catch (Exception e) {\n    e.printStackTrace();\n    System.out.println(\"Error in generating the secret Key\");\n}\nreturn key;\n}\n\n}\n", "idx": 1734}
{"project": "cipher", "commit_id": "Snippet20868745_3462.java", "target": 0, "func": "public String Padding_key() {\n\n  try {\n\n    PBEKeySpec pbeKeySpec = new PBEKeySpec(STReditTxtPass.toCharArray());\n    Log.e(\"PBEkEYsPEC\", pbeKeySpec.toString());\n    Toast.makeText(this, \"step 1\", Toast.LENGTH_SHORT).show();\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    Toast.makeText(this, \"after ciphering\", Toast.LENGTH_SHORT).show();\n    SecretKeyFactory keyFactory = SecretKeyFactory\n    .getInstance(\"PBEWithMD5AndDES\");\n    Toast.makeText(this, \"after keyFactory\", Toast.LENGTH_SHORT).show();\n\n    SecretKey pbeKey = keyFactory.generateSecret(pbeKeySpec);\n    Log.e(\"PBEkEYsPEC\", pbeKey.toString());\n    Toast.makeText(this, \"after SecreteKey\", Toast.LENGTH_SHORT).show();\n\n    PBEParameterSpec pbeSpec = new PBEParameterSpec(salt, iterations);\n    Log.e(\"PBEkEYsPEC\", pbeSpec.toString());\n    Toast.makeText(this, \"after PBEParameterSpec\", Toast.LENGTH_SHORT).show();\n    cipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeSpec);\n\n    Toast.makeText(this, \"after cypher.init\", Toast.LENGTH_SHORT).show();\n\n    byte[] cipherText = cipher.doFinal(PlainText.getBytes(\"UTF-8\"));\n    Toast.makeText(this, \"after byte[]\", Toast.LENGTH_SHORT).show();\n\n    cyphertext = String.format(\"%s%s%s\", toBase64(salt), \"]\",\n    toBase64(cipherText));\n    Toast.makeText(this, \"after cypherText.format\", Toast.LENGTH_SHORT).show();\n\n    edit_txt_enc_string.setText(cyphertext);\n\n    strPaddingencryption = edit_txt_enc_string.getText().toString();\n\n  } catch (Exception e) {\n\n  }\n  return strPaddingencryption;\n}\n", "idx": 1735}
{"project": "cipher", "commit_id": "Snippet36671487_18530.java", "target": 0, "func": "import java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Scanner;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Encoder;\nimport sun.misc.BASE64Decoder;\n\npublic class Application\n{\n    public static void main(String[] args)\n    {\n        Scanner input = new Scanner(System.in);\n        String textToEncrypt = \"Hello World\";\n        String textToDecrypt;\n        String textToDecryptAscii;\n        String result;\n        int operation;\n        Cipher cipher = null;\n        try {\n            cipher = Cipher.getInstance(\"AES\");\n        } catch (NoSuchAlgorithmException e1) {\n            // TODO Auto-generated catch block\n            e1.printStackTrace();\n        } catch (NoSuchPaddingException e1) {\n            // TODO Auto-generated catch block\n            e1.printStackTrace();\n        }\n        //String key = \"Bar12345Bar12345\"; // 128 bit key\n        String key = null;\n\n        BASE64Encoder asciiEncoder = new BASE64Encoder();\n        BASE64Decoder asciiDecoder = new BASE64Decoder();\n\n        System.out.printf(\"Enter:\\n1 for encryption\\n2 for decryption\\n\\nChoice: \");\n        operation = input.nextInt();\n        input.nextLine();\n\n        if (operation == 1)\n        {\n            try \n            {\n                System.out.print(\"Enter a 128-bit key to be used for encryption: \");\n                key = input.nextLine();\n\n                if(key.length() != 16)\n                {\n                    while(key.length() != 16)\n                    {\n                        System.out.print(\"You need to enter a *128-bit* key: \");\n                        key = input.nextLine();\n                    }\n                }\n\n                System.out.printf(\"\\n---------\\n\\nText to encrypt: \");\n                textToEncrypt = input.nextLine();\n\n                //Create key and cipher\n                Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n                //Cipher cipher = Cipher.getInstance(\"AES\");\n\n                //encrypt the text\n                cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n                byte[] encrypted = cipher.doFinal(textToEncrypt.getBytes());\n\n                StringBuilder sb = new StringBuilder();\n                for (byte b: encrypted)\n                {\n                    sb.append((char)b);\n                }\n\n                // the encrypted String\n                String enc = sb.toString();\n                //System.out.println(\"encrypted:\" + enc);\n\n                String asciiEncodedEncryptedResult = asciiEncoder.encodeBuffer(enc.getBytes());\n\n                asciiEncodedEncryptedResult = asciiEncodedEncryptedResult.replace(\"\\n\", \"\").replace(\"\\r\", \"\");\n\n                System.out.println(\"Encrypted text: \" + asciiEncodedEncryptedResult);\n                //System.out.printf(\"\\n------------------------------\\nDecrypted text: \" + asciiEncodedEncryptedResult + \"\\n------------------------------\\n\\n\\n\");\n\n            }\n            catch(Exception e) \n            {\n                e.printStackTrace();\n            }\n        }\n        else if (operation == 2)\n        {\n            System.out.printf(\"\\n---------\\n\\nText to decrypt: \");\n            textToDecryptAscii = input.nextLine();\n\n            System.out.print(\"Enter the 128-bit decryption key: \");\n            key = input.nextLine();\n\n            if(key.length() != 16)\n            {\n                while(key.length() != 16)\n                {\n                    System.out.print(\"You need to enter a *128-bit* key: \");\n                    key = input.nextLine();\n                }\n            }\n\n            byte[] decodedBytes = null;\n            try\n            {\n                decodedBytes = asciiDecoder.decodeBuffer(textToDecryptAscii);\n            } catch (IOException e1) {\n                // TODO Auto-generated catch block\n                e1.printStackTrace();\n            }\n            //System.out.println(\"decodedBytes \" + new String(decodedBytes));\n\n            textToDecrypt = new String(decodedBytes);\n\n            //Convert the string to byte array\n            //for decryption\n            byte[] bb = new byte[textToDecrypt.length()];\n            for (int i=0; i<textToDecrypt.length(); i++)\n            {\n                bb[i] = (byte) textToDecrypt.charAt(i);\n            }\n\n            //decrypt the text\n            Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n            try\n            {\n                cipher.init(Cipher.DECRYPT_MODE, aesKey);\n            }\n            catch (InvalidKeyException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            String decrypted = null;\n            try\n            {\n                decrypted = new String(cipher.doFinal(bb));\n            }\n            catch (IllegalBlockSizeException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            catch (BadPaddingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            System.out.printf(\"\\n------------------------------\\nDecrypted text: \" + decrypted + \"\\n------------------------------\\n\\n\\n\");\n        }\n    }\n}\n", "idx": 1736}
{"project": "cipher", "commit_id": "Snippet37989430_20017.java", "target": 0, "func": "public static void main(String[] args) {\n        String s = \"with the lights out is less dangerous here we are now entertain us\";\n        s = cripta(s);\n        System.out.println(s);\n        s = decripta(s);\n        System.out.println(s);\n    }\n\n    public static String cripta(String s) {\n        System.out.println(\"lunghezza stringa:\" + s.length());\n        byte[] input = s.getBytes();\n        byte[] keyBytes = hexStringToByteArray(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\n        String out = \"\";\n\n        SecretKeySpec key = new SecretKeySpec(keyBytes, \"DESede\");\n        try {\n            Cipher cp = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n            cp.init(Cipher.ENCRYPT_MODE, key);\n            byte[] criptati = cp.doFinal(input);\n            out = new String(Base64.getEncoder().encode(criptati));\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        }\n\n        return out;\n    }\n\n    public static String decripta(String s) {\n\n        byte[] input = Base64.getDecoder().decode(s.getBytes());\n        byte[] keyBytes = hexStringToByteArray(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\n        String out = \"\";\n\n        try {\n            SecretKeySpec key = new SecretKeySpec(keyBytes, \"DESede\");\n            Cipher cp = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n            cp.init(Cipher.DECRYPT_MODE, key);\n            byte[] decrypt = cp.doFinal(input);\n            out = new String(decrypt);\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n            e.printStackTrace();\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        }\n        return out;\n    }\n", "idx": 1737}
{"project": "cipher", "commit_id": "Snippet13865655_37291.java", "target": 0, "func": "private byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n    int offset = 0;\n    byte[] encrypted;\n\n    while(offset < clear.length()) {\n        final byte[] answer = cipher.update(clear, offset, 1024);\n        encrypted = Arrays.copyOf( encrypted, encrypted.length + 1024);\n        System.arrayCopy(answer, 0, encrypted, offset, 1024);\n        offset += 1024;\n    }\n    encrypted += cipher.doFinal(clear, offset, clear.length() - offset);\n    return encrypted;\n}\n", "idx": 1738}
{"project": "cipher", "commit_id": "Snippet31853378_13914.java", "target": 0, "func": " public String encrypt(String value) throws GeneralSecurityException {\n    Cipher encryptCipher = Cipher.getInstance(\"DES\");\n    SecretKeyFactory  keyFactory = SecretKeyFactory.getInstance(\"DES\");\n    String salt=\"\";\n    SecretKey sk = keyFactory.generateSecret(new DESKeySpec(salt.getBytes()));\n    encryptCipher.init(Cipher.ENCRYPT_MODE, sk);\n    return new String(Base64.encodeBase64(encryptCipher.doFinal(value.getBytes())));\n}\n", "idx": 1739}
{"project": "cipher", "commit_id": "Snippet31013532_13196.java", "target": 0, "func": "    SecretKeySpec sks = null;\n    try {\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(\"Complex Key for encryption\".getBytes());\n        KeyGenerator kg = KeyGenerator.getInstance(\"AES\");\n        kg.init(128, sr);\n        sks = new SecretKeySpec((kg.generateKey()).getEncoded(), \"AES\");\n    } catch (Exception e) {\n        Log.e(TAG, \"AES secret key spec error\");\n    }\n\n    // Encode the original data with AES\n    byte[] encodedBytes = null;\n    try {\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.ENCRYPT_MODE, sks);\n        encodedBytes = c.doFinal(theTestText.getBytes());\n    } catch (Exception e) {\n        Log.e(TAG, \"AES encryption error\");\n    }\n    TextView tvencoded = (TextView)findViewById(R.id.textitem2);\n    tvencoded.setText(\"[ENCODED]:\\n\" +\n            Base64.encodeToString(encodedBytes, Base64.DEFAULT) + \"\\n\");\n\n    // Decode the encoded data with AES\n    byte[] decodedBytes = null;\n    try {\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.DECRYPT_MODE, sks);\n        decodedBytes = c.doFinal(encodedBytes);\n    } catch (Exception e) {\n        Log.e(TAG, \"AES decryption error\");\n    }\n    TextView tvdecoded = (TextView)findViewById(R.id.textitem3);\n    tvdecoded.setText(\"[DECODED]:\\n\" + new String(decodedBytes) + \"\\n\");\n", "idx": 1740}
{"project": "cipher", "commit_id": "Snippet19412696_2207.java", "target": 0, "func": "    public static void encrypt(String key, String filename) throws Throwable {\n        InputStream is = new FileInputStream(\"Somefile.class\");\n        OutputStream os = new FileOutputStream(\"tempfile.class\");\n\n        DESKeySpec dks = new DESKeySpec(key.getBytes());\n        SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey desKey = skf.generateSecret(dks);\n        Cipher cipher = Cipher.getInstance(\"DES\"); // DES/ECB/PKCS5Padding for SunJCE\n\n            cipher.init(Cipher.ENCRYPT_MODE, desKey);\n            CipherInputStream cis = new CipherInputStream(is, cipher);\n            doCopy(cis, os);\n\n            File file2 = new File(\"tempfile.class\");    \n\n            File f = new File(\"somefile.class\");\n            f.delete();\n            file2.renameTo(f);\n    }\n", "idx": 1741}
{"project": "cipher", "commit_id": "Snippet4060515_30996.java", "target": 0, "func": "    public static String generate(String plaintext, String passphase) throws Exception {\n        try {\n            PBEKeySpec pbeKeySpec = new PBEKeySpec(passphase.toCharArray());\n            PBEParameterSpec pbeParamSpec;\n            SecretKeyFactory keyFac;\n            // Salt\n            byte[] salt = {(byte) 0xc8, (byte) 0x73, (byte) 0x61, (byte) 0x1d, (byte) 0x1a, (byte) 0xf2, (byte) 0xa8, (byte) 0x99};\n            // Iteration count\n            int count = 20;\n            // Create PBE parameter set\n            pbeParamSpec = new PBEParameterSpec(salt, count);\n            keyFac = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n            SecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n            // Create PBE Cipher\n            Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n            // Initialize PBE Cipher with key and parameters\n            pbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n            // Our cleartext\n            byte[] cleartext = plaintext.getBytes();\n            // Encrypt the cleartext\n            byte[] ciphertext = pbeCipher.doFinal(cleartext);\n            return ciphertext;\n        } catch (Exception ex) {\n            throw new Exception(ex.getMessage());\n        }\n    }\n", "idx": 1742}
{"project": "cipher", "commit_id": "Snippet7781409_32921.java", "target": 0, "func": "public static byte[] encrypt(String message) throws Exception\n{\n    String salt = \"1111111111111111\";\n    SecretKeySpec key = new SecretKeySpec(salt.getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    return cipher.doFinal(message.getBytes());\n}\n\npublic static void main (String[] args) throws Exception\n{\n    String hello = Arrays.toString(encrypt(\"hello\"));\n    System.out.println(\"hello:\" + hello);\n    String helloWorld = Arrays.toString(encrypt(\"hello world\"));\n    System.out.println(\"hello world:\" + helloWorld);\n}\n", "idx": 1743}
{"project": "cipher", "commit_id": "Snippet3811302_30887.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.InvalidParameterSpecException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class CipherTest\n{\n\n    private static class EncryptInfo\n    {\n\n        private final byte[] encryptedData;\n        private final byte[] initVector;\n        private final byte[] salt;\n\n        public EncryptInfo(byte[] encryptedData, byte[] initVector, byte[] salt)\n        {\n            this.encryptedData = encryptedData.clone();\n            this.initVector = initVector.clone();\n            this.salt = salt.clone();\n        }\n\n        public byte[] getEncryptedData()\n        {\n            return encryptedData;\n        }\n\n        public byte[] getInitVector()\n        {\n            return initVector;\n        }\n\n        public byte[] getSalt()\n        {\n            return salt;\n        }\n\n    }\n\n    private static final String keyGenAlgorithm = \"PBEWithMD5AndDES\";\n    private static final String keyAlgorithm = \"DES\";\n    private static final String cipherTransform = \"PBEWithMD5AndDES/CBC/PKCS5Padding\";\n\n    private static EncryptInfo encrypt(char[] password, byte[] data)\n            throws NoSuchAlgorithmException, InvalidKeySpecException,\n            NoSuchPaddingException, InvalidKeyException,\n            InvalidParameterSpecException, IllegalBlockSizeException,\n            BadPaddingException, UnsupportedEncodingException\n    {\n\n        byte[] salt = new byte[16];\n        new SecureRandom().nextBytes(salt);\n\n        PBEKeySpec keySpec = new PBEKeySpec(password, salt, 1024);\n\n        SecretKeyFactory secretKeyFactory = SecretKeyFactory\n                .getInstance(keyGenAlgorithm);\n        SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);\n        keySpec.clearPassword();\n        byte[] key = secretKey.getEncoded();\n        SecretKeySpec secretKeySpec = new SecretKeySpec(key, keyAlgorithm);\n        Cipher cipher = Cipher.getInstance(cipherTransform);\n        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n\n        byte[] initVector = cipher.getParameters().getParameterSpec(\n                IvParameterSpec.class).getIV();\n\n        return new EncryptInfo(cipher.doFinal(data), initVector, salt);\n    }\n\n    public static byte[] decrypt(byte[] data, char[] password, byte[] salt,\n            byte[] initVector) throws NoSuchAlgorithmException,\n            InvalidKeySpecException, NoSuchPaddingException,\n            InvalidKeyException, InvalidAlgorithmParameterException,\n            IllegalBlockSizeException, BadPaddingException\n    {\n        PBEKeySpec keySpec = new PBEKeySpec(password, salt, 1024);\n\n        SecretKeyFactory secretKeyFactory = SecretKeyFactory\n                .getInstance(keyGenAlgorithm);\n        SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);\n        keySpec.clearPassword();\n        byte[] key = secretKey.getEncoded();\n        SecretKeySpec secretKeySpec = new SecretKeySpec(key, keyAlgorithm);\n        Cipher cipher = Cipher.getInstance(cipherTransform);\n        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, new IvParameterSpec(\n                initVector));\n        return cipher.doFinal(data);\n    }\n\n    public static void main(String[] args) throws Exception\n    {\n        char[] password = \"password\".toCharArray();\n\n        EncryptInfo info = encrypt(password, \"Message\".getBytes());\n\n        byte[] decyptedText = decrypt(info.getEncryptedData(), password, info\n                .getSalt(), info.getInitVector());\n\n        System.out.println(new String(decyptedText));\n\n    }\n}\n", "idx": 1744}
{"project": "cipher", "commit_id": "Snippet8467380_33261.java", "target": 0, "func": "package betterencryption;   \n\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.util.Scanner;\n\n public class BetterEncryption {\n\n public static String asHex (byte buf[]) {               //asHex works just fine, it's the main that's\n                                                         //giving me trouble\n  StringBuffer strbuf = new StringBuffer(buf.length * 2);\n  int i;\n\n  for (i = 0; i < buf.length; i++) {\n   if (((int) buf[i] & 0xff) < 0x10)\n    strbuf.append(\"0\");\n\n   strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n  }\n\n  return strbuf.toString();\n }\n\n public static void main(String[] args) throws Exception {\n   Scanner sc = new Scanner(System.in);\n   KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");kgen.init(128); \n   SecretKey skey = kgen.generateKey();\n   byte[] bytes = skey.getEncoded();\n   SecretKeySpec skeySpec = new SecretKeySpec(bytes, \"AES\");\n   Cipher cipher = Cipher.getInstance(\"AES\");\n   System.out.print(\"Do you want to encrypt or unencrypt?\\n\");/*This is a weird way of doing it,*/\n   String choice = sc.next(); char cc = choice.charAt(2);     /*I know, but this part checks to see if*/       \n   if(cc=='c'){                                               /*the program is to encrypt or unencrypt*/\n   System.out.print(\"Enter a string to encrypt: \");          /* a string. The 'encrypt' function works.*/\n   String message = sc.next();\n\n\n   cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n   byte[] encrypted = cipher.doFinal((args.length == 0 ? message : args[0]).getBytes());\n   System.out.println(\"Encrypted string: \" + asHex(encrypted)+\"\\nKey: \"+asHex(bytes));\n\n   //^This^ section actually works! The code outputs an encrypted string and everything.\n   //It's beautiful\n   //Unfortunately getting that string back into readable text has been problematic\n   //Which is where you guys come in!\n   //Hopefully\n\n }\n  if(true){\n   System.out.print(\"\\nEnter the encrypted string: \"); String encryptedString = sc.next();\n   System.out.print(\"\\nEnter the key: \"); String keyString = sc.next();\n   int len = encryptedString.length();    /*this section converts the user-input string*/\n   byte[] encrypted = new byte[len / 2];  /*into an array of bytes*/\n   for (int i = 0; i < len; i += 2) {     /*I'm not sure if it works, though*/\n   encrypted[i / 2] = (byte) ((Character.digit(encryptedString.charAt(i), 16) << 4)+\n           Character.digit(encryptedString.charAt(i+1), 16));\n   cipher.init(Cipher.DECRYPT_MODE, skeySpec); /*as you can see, I haven't even begun to implement*/ \n   byte[] original = cipher.doFinal(encrypted);/*a way to allow the user-input key to be used.*/\n   String originalString = new String(original);\n   System.out.println(\"\\nOriginal string: \"+originalString); //I'm really quite stuck.\n      //can you guys help?\n  } \n\n }\n   }\n}\n", "idx": 1745}
{"project": "cipher", "commit_id": "Snippet22858497_5261.java", "target": 0, "func": "import java.security.InvalidKeyException;  \nimport java.security.NoSuchAlgorithmException;    \nimport javax.crypto.BadPaddingException;  \nimport javax.crypto.Cipher;  \nimport javax.crypto.IllegalBlockSizeException;  \nimport javax.crypto.KeyGenerator;  \nimport javax.crypto.NoSuchPaddingException;  \nimport javax.crypto.SecretKey;\n\npublic class DESEncryptionDecryption {\n\nprivate static Cipher encryptCipher;  \nprivate static Cipher decryptCipher; \npublic static void main(String[] args) {  \ntry {\nKeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");  \nSecretKey secretKey = keygenerator.generateKey();  \n\nencryptCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");  \nencryptCipher.init(Cipher.ENCRYPT_MODE, secretKey);  \nbyte[] encryptedData = encryptData(\"Classified Information!\");  \n\ndecryptCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");  \ndecryptCipher.init(Cipher.DECRYPT_MODE, secretKey);  \ndecryptData(encryptedData);\n}}}\n", "idx": 1746}
{"project": "cipher", "commit_id": "Snippet38828807_20728.java", "target": 0, "func": "Cipher.getInstance(\"AES\");", "idx": 1747}
{"project": "cipher", "commit_id": "Snippet30685297_12799.java", "target": 0, "func": "public static String decrypt(String message){\n    try {\n        Cipher c = Cipher.getInstance(\"AES\");\n        SecretKeySpec key = new SecretKeySpec(secrKey.getBytes(), \"AES\");\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = Base64.decode(message.getBytes(), Base64.DEFAULT);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        String decoded = new String(Base64.decode(decryptedValue, Base64.DEFAULT));\n        return decoded;\n    }catch(Exception e){\n        return null;\n    }\n}\n", "idx": 1748}
{"project": "cipher", "commit_id": "Snippet11292413_35446.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n\nbyte[] encypted = new byte[cipher.getOutputSize(fileData.length)];\nint len = cipher.update(fileData, 0, fileData.length, encypted, 0);\nlen += cipher.doFinal(encypted, len);\n", "idx": 1749}
{"project": "cipher", "commit_id": "Snippet21973958_4405.java", "target": 0, "func": "import java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport android.util.Base64;\n\npublic class StringCryptor \n{\nprivate static final String CIPHER_ALGORITHM = \"AES\";\nprivate static final String RANDOM_GENERATOR_ALGORITHM = \"SHA1PRNG\";\nprivate static final int RANDOM_KEY_SIZE = 128;\n\n// Encrypts string and encode in Base64\npublic static String encrypt( String password, String data ) throws Exception \n{\n    byte[] secretKey = generateKey( password.getBytes() );\n    byte[] clear = data.getBytes();\n\n    SecretKeySpec secretKeySpec = new SecretKeySpec( secretKey, CIPHER_ALGORITHM );\n    Cipher cipher = Cipher.getInstance( CIPHER_ALGORITHM );\n    cipher.init( Cipher.ENCRYPT_MODE, secretKeySpec );\n\n    byte[] encrypted = cipher.doFinal( clear );\n    String encryptedString = Base64.encodeToString( encrypted, Base64.DEFAULT );\n\n    return encryptedString;\n}\n\n// Decrypts string encoded in Base64\npublic static String decrypt( String password, String encryptedData ) throws Exception \n{\n    byte[] secretKey = generateKey( password.getBytes() );\n\n    SecretKeySpec secretKeySpec = new SecretKeySpec( secretKey, CIPHER_ALGORITHM );\n    Cipher cipher = Cipher.getInstance( CIPHER_ALGORITHM );\n    cipher.init( Cipher.DECRYPT_MODE, secretKeySpec );\n\n    byte[] encrypted = Base64.decode( encryptedData, Base64.DEFAULT );\n    byte[] decrypted = cipher.doFinal( encrypted );\n\n    return new String( decrypted );\n}\n\npublic static byte[] generateKey( byte[] seed ) throws Exception\n{\n    KeyGenerator keyGenerator = KeyGenerator.getInstance( CIPHER_ALGORITHM );\n    SecureRandom secureRandom = SecureRandom.getInstance( RANDOM_GENERATOR_ALGORITHM );\n    secureRandom.setSeed( seed );\n    keyGenerator.init( RANDOM_KEY_SIZE, secureRandom );\n    SecretKey secretKey = keyGenerator.generateKey();\n    return secretKey.getEncoded();\n}\n}\n", "idx": 1750}
{"project": "cipher", "commit_id": "Snippet14991632_38040.java", "target": 0, "func": "package com.test.encrypt;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\nimport org.apache.commons.codec.binary.Hex;\n\npublic class TrippleDESTest\n{\n    private Cipher ecipher;\n    private Cipher dcipher;\n    private String algorithm = \"DESede\";\n    private String transformation = \"DESede/CBC/PKCS5Padding\";\n    private String keyPhrase = \"123456789012345678901234\"; //your keyphrase 24 bit\n    private SecretKey key;\n    private IvParameterSpec iv;\n    private static TrippleDESTest cryptoUtil;\n    private String ENCODING = \"UTF-8\";\n\n    public static TrippleDESTest getInstance() throws Exception\n    {\n        if (cryptoUtil == null)\n        {\n            cryptoUtil = new TrippleDESTest();\n        }\n\n        return cryptoUtil;\n    }\n\n    private TrippleDESTest() throws Exception\n    {\n            DESedeKeySpec keySpec = new DESedeKeySpec(keyPhrase.getBytes());\n            key = SecretKeyFactory.getInstance(algorithm).generateSecret(keySpec);\n            iv = new IvParameterSpec(new byte[8]);\n            ecipher = Cipher.getInstance(transformation);\n            dcipher = Cipher.getInstance(transformation);\n            ecipher.init(Cipher.ENCRYPT_MODE, key, iv);\n            dcipher.init(Cipher.DECRYPT_MODE, key, iv);\n    }\n\n    public String encrypt(String str) throws Exception\n    {\n            byte[] utf8 = str.getBytes(ENCODING);    \n            byte[] enc = ecipher.doFinal(utf8);                \n            System.out.println(\"number of bites: \" + enc.length);    \n            return Hex.encodeHexString(enc);\n    }\n\n    public String decrypt(String str) throws Exception\n    {\n            byte[] dec = str.getBytes();\n            byte[] utf8 = dcipher.doFinal(dec);    \n            return Hex.encodeHexString(utf8);\n    }\n\n    public static void main(String[] args) throws Exception\n    {\n        TrippleDESTest test = TrippleDESTest.getInstance();        \n        String originalText = \"Abcdefgh\";        \n        System.out.println(\"originalText: \" + originalText);        \n        String cryptText = test.encrypt(originalText);        \n        System.out.println(\"cryptText: \" + cryptText);        \n        System.out.println(\"cryptText.length: \" + cryptText.length());\n        System.out.println(\"cryptText.getBytes().length: \" + cryptText.getBytes().length);        \n        System.out.println(\"decote text: \" + test.decrypt(cryptText));\n\n    }\n}// end class TrippleDESTest\n", "idx": 1751}
{"project": "cipher", "commit_id": "Snippet16192140_39149.java", "target": 0, "func": "Cipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\"); //I am passing the padding too\naes.init(Cipher.DECRYPT_MODE, generateKey());\nbyte[] ciphertext = aes.doFinal(rawPassword.getBytes());\n", "idx": 1752}
{"project": "cipher", "commit_id": "Snippet25324304_7712.java", "target": 0, "func": "  Cipher rc4Decrypt = Cipher.getInstance(\"RC4\");\n  rc4Decrypt.init(Cipher.DECRYPT_MODE, rc4Key);\n  byte [] clearText2 = rc4Decrypt.update(cipherText);\n", "idx": 1753}
{"project": "cipher", "commit_id": "Snippet13389870_36919.java", "target": 0, "func": "import java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport android.util.Base64;\n\npublic class EncodeDecodeAES {\n\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        String fromHex = toHex(result);\n        String base64 = new String(Base64.encodeToString(fromHex.getBytes(), 0));\n        return base64;\n    }\n\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        String base64 = new String(Base64.decode(encrypted, 0));\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(base64);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n\n    public static byte[] encryptBytes(String seed, byte[] cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext);\n        return result;\n    }\n\n\n    public static byte[] decryptBytes(String seed, byte[] encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = decrypt(rawKey, encrypted);\n        return result;\n    }\n\n\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        try {\n            kgen.init(256, sr);\n        } catch (Exception e) {\n    //      Log.w(LOG, \"This device doesn't suppor 256bits, trying 192bits.\");\n            try {\n                kgen.init(192, sr);\n            } catch (Exception e1) {\n    //          Log.w(LOG, \"This device doesn't suppor 192bits, trying 128bits.\");\n                kgen.init(128, sr);\n            }\n        }\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n\n\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length() / 2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2), 16).byteValue();\n        return result;\n    }\n\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2 * buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n\n\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n    }\n\n}\n", "idx": 1754}
{"project": "cipher", "commit_id": "Snippet24554791_6910.java", "target": 0, "func": "String keyStr = \"secret\";\nbyte[] key = (keyStr).getBytes(\"UTF-8\");\nMessageDigest sha = MessageDigest.getInstance(\"MD5\");\nkey = sha.digest(key);\nkey = Arrays.copyOf(key, 16);\nSecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\nString text = \"Some text\"\n\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\nbyte[] encrypted = cipher.doFinal(text.getBytes());\n", "idx": 1755}
{"project": "cipher", "commit_id": "Snippet13546221_37099.java", "target": 0, "func": "public static void main(String args[]) {\n    Cipher fcipher, scipher;\n    String plaintextstring = \"\";\n\n    System.out.println(\"Enter the first message:\");\n    BufferedReader buffp = new BufferedReader(new InputStreamReader(System.in));\n    try {\n        plaintextstring = buffp.readLine();\n    } catch (Exception e) {\n        System.out.println(\"Exception occured:\" + e.getMessage());\n    }\n\n    int strlen1 = plaintextstring.length();\n\n    int x1 = strlen1 % 8;\n\n    int y1 = 8 - x1;\n\n    StringBuffer buf1 = new StringBuffer(plaintextstring);\n\n    if (x1 > 0) {\n        for (int k = 0; k < y1; k++) {\n            buf1.append('0');\n        }\n    }\n    System.out.println(\"Modified plaintext is:\" + buf1);\n    String inp = buf1.toString();\n\n    try {\n\n        SecretKey key1 = KeyGenerator.getInstance(\"DES\").generateKey();\n        SecretKey key2 = KeyGenerator.getInstance(\"DES\").generateKey();\n\n        fcipher = Cipher.getInstance(\"DES/ECB/NoPadding\");//CBC\n        scipher = Cipher.getInstance(\"DES/ECB/NoPadding\");//CBC\n\n        // Create an 8-byte initialization vector \n        //byte[] iv = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};\n        //byte[] iv = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};\n        byte[] iv = {(byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08};\n        System.out.println(\"Length of IV is :\" + iv.length);\n\n\n\n        byte[] sencrypted = new byte[8];\n\n        fcipher.init(Cipher.ENCRYPT_MODE, key1);\n        scipher.init(Cipher.DECRYPT_MODE, key2);\n        System.out.println(\"Default Charset is :\" + Charset.defaultCharset());\n        byte[] pbytes = inp.getBytes(\"UTF-8\");\n        System.out.println(\"Byte array of input string is :\" + pbytes);\n\n        System.out.println(\"Size of first message in bytes is:\" + pbytes.length);\n        for (int i = 0; i < pbytes.length; i++) {\n            System.out.println(\"Array values of byte array are: \" + pbytes[i]);\n        }\n\n        int z = (pbytes.length) / 8;\n        System.out.println(\"Number of data blocks of 8 bytes formed from message = \" + z);\n        for (int i = 0; i < z; i++) {\n            byte[] ds = getSection(pbytes, i * 8);//getting block of 64bit\n            byte[] out = new byte[8];\n\n            for (int r = 0; r < 8; r++) {\n                System.out.println(\"Array values of IV from previous stage is :\" + iv[r]);\n            }\n            for (int k = 0; k < 8; k++) {\n                out[k] = (byte) (ds[k] ^ iv[k]);//XORing of message block with IV bit by bit.\n                // System.out.println(\"XORed array byte by byte is:\"+out[k]);\n            }\n            byte[] fencrypted = fcipher.doFinal(out);//Applying DES Encryption to the XOR'ed result.(E)key1\n            byte[] fdecrypted = scipher.doFinal(fencrypted);// (D)key2 \n            sencrypted = fcipher.doFinal(fdecrypted);// (E)key1\n\n\n            System.out.println(\"Encrypted byte length: \" + sencrypted.length);\n            System.out.println(\"Encrypted text is :\" + sencrypted);\n\n            fcipher.init(Cipher.DECRYPT_MODE, key1);\n            scipher.init(Cipher.ENCRYPT_MODE, key2);\n\n            byte[] sfdecrypted = fcipher.doFinal(sencrypted);//DES1 key1 (D)\n            byte[] sfencrypted = scipher.doFinal(sfdecrypted);//DES Key2 (E)\n            byte[] ssdecrypted = fcipher.doFinal(sfencrypted);//DES Key3  (D)\n            System.out.println(\"length of final decrypted byte array is :\" + ssdecrypted.length);\n            byte[] d = new byte[8];\n            for (int u = 0; u < 8; u++) {\n                d[u] = (byte) (ssdecrypted[u] ^ iv[u]);//XORing of message block with IV bit by bit.\n                System.out.println(\"final decrypted array byte by byte of a single 64 bit block is:\" + d[u]);\n            }\n            String sdecryptedstr = new String(d);\n            System.out.println(\"Decrypted block is :\" + sdecryptedstr);\n            iv = sencrypted;\n            System.out.println(\"IV from previous stage is: \"+iv); \n        }\n\n\n    } catch (Exception e) {\n        System.out.println(\"Exception Occured: \" + e);\n    }\n\n}\n//function to get CBC message blocks.\npublic static byte[] getSection(byte[] message, int start) {\n    byte[] section = new byte[8];//dividing whole message into 64bit blocks.\n    for (int i = 0, j = start; i < 8; i++, j++) {\n        section[i] = message[j];\n    }\n    return section;\n}//end of getSection function.\n", "idx": 1756}
{"project": "cipher", "commit_id": "Snippet13002029_36636.java", "target": 0, "func": "cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n", "idx": 1757}
{"project": "cipher", "commit_id": "Snippet17567996_731.java", "target": 0, "func": "public static String symmetricDecrypt(String text, String secretKey) {\n    BASE64Decoder decoder = new BASE64Decoder();\n    BASE64Decoder base64Decoder = new BASE64Decoder();\n    Cipher cipher;\n    String encryptedString;\n    byte[] encryptText = null;\n    byte[] raw;\n    SecretKeySpec skeySpec;\n    try {\n        raw = decoder.decodeBuffer(secretKey);\n        skeySpec = new SecretKeySpec(raw, \"AES\");\n        encryptText = base64Decoder.decodeBuffer(text);\n        cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        encryptedString = new String(cipher.doFinal(encryptText));\n    } catch (Exception e) {\n        e.printStackTrace();\n        return \"Error\";\n    }\n    return encryptedString;\n}\n", "idx": 1758}
{"project": "cipher", "commit_id": "Snippet36939277_18906.java", "target": 0, "func": "import java.util.Base64;\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.security.Key;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.cert.X509Certificate;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport java.util.Arrays;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\npublic class HelloWorld {\n    public static final String PHONENUMBER_PARAM = \"phoneNumber\";\n    public static final String PIN_PARAM =\"pin\";\n\n    public static final String MERCHANTID_PARAM = \"merchantId\";\n\n    public static void main(String args[]) throws Exception {\n\n    String phoneNumber =\"+917738995286\";\n    String pin =\"5577\";\n\n    String merchantId =\"527425858\";\n    String encodedKey =\"vPDkdTDrcygLPROzd1829A==\";\n\n    String payLoad = PHONENUMBER_PARAM + \"=\" +         URLEncoder.encode(phoneNumber, \"UTF-8\")+ \"&\" + PIN_PARAM + \"=\" + URLEncoder.encode(pin, \"UTF-8\") ;\n\n    byte[] decodedKey = Base64.getDecoder().decode(encodedKey.getBytes());\n\n    Key encryptionKey = new SecretKeySpec(decodedKey, \"AES\");\n\n    byte[] utf8Bytes = payLoad.getBytes(\"utf-8\");\n\n    byte[] encryptedBody = encrypt(encryptionKey, utf8Bytes);\n    String encryptedData = new  String(Base64.getEncoder().encode(encryptedBody));\n\n    System.out.println(\"encryptedData:\" + encryptedData);\n }\nprivate static byte[] encrypt(Key encryptionKey, byte[] data) throws Exception {\n    Cipher c = Cipher.getInstance(\"AES\");\n    c.init(1, encryptionKey);\n    return c.doFinal(data);\n}\n}\n", "idx": 1759}
{"project": "cipher", "commit_id": "Snippet8597952_33365.java", "target": 0, "func": "Cipher.getInstance(\"DES/ECB/PKCS5Padding\")", "idx": 1760}
{"project": "cipher", "commit_id": "Snippet19610476_2338.java", "target": 0, "func": "Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n", "idx": 1761}
{"project": "cipher", "commit_id": "Snippet5531542_31692.java", "target": 0, "func": "import java.io.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\n\nclass Blowfish {\n    public static void main(String[] args) throws Exception {\n        String s;\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        Cipher encrypt = Cipher.getInstance(\"DES\");\n        Cipher decrypt = Cipher.getInstance(\"DES\");\n        System.out.print(\"Enter the key: \");\n        s = br.readLine();\n        /*\n         * Names of algorithms used \"Blowfish\" \"DES\" 64 bit key ie. 8 bytes\n         * \"AES\" key size has to be 16 bytes ie. 128 bits\n         */\n\n        byte key[] = new byte[8];\n        for (int i = 0; i < s.length() && i < 8; i++)\n            key[i] = (byte) s.charAt(i);\n\n        encrypt.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, \"DES\"));\n        FileInputStream fin = new FileInputStream(\"test.txt\");\n        FileOutputStream out = new FileOutputStream(\"encrypted.p4e\");\n        CipherOutputStream cout = new CipherOutputStream(out, encrypt);\n\n        int input = 0;\n        while ((input = fin.read()) != -1) {\n            cout.write(input);\n        }\n\n        out.close();\n        cout.close();\n        System.out.println(\"Starting the decryption\");\n        System.out.print(\"Enter the key: \");\n        s = br.readLine();\n\n        byte key2[] = new byte[8];\n        for (int i = 0; i < s.length() && i < 8; i++)\n            key2[i] = (byte) s.charAt(i);\n\n        decrypt.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key2, \"DES\"));\n        fin = new FileInputStream(\"encrypted.p4e\");\n        out = new FileOutputStream(\"test2.txt\");\n        CipherInputStream in = new CipherInputStream(fin, decrypt);\n        input = 0;\n        while ((input = in.read()) != -1) {\n            out.write(input);\n        }\n        out.close();\n        in.close();\n    }\n}\n", "idx": 1762}
{"project": "cipher", "commit_id": "Snippet26723118_8843.java", "target": 0, "func": "    String message = \"Hello world 123456\";\n\n    // Creating Key. Key of size = 128\n    byte [] raw ={-49, -44, 51, -114, 58, 79, 83, -38, 107, 64, 67, -108, -52, 109, 85, 77};\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n    // Encript\n    byte[] encrypted = cipher.doFinal(message.getBytes());\n    System.out.println(\"encripted: \" + Arrays.toString(encrypted));\n    System.out.println(\"encripted: \"+ asHex(encrypted));\n\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decript = cipher.doFinal(encrypted, 0, 32);\n", "idx": 1763}
{"project": "cipher", "commit_id": "Snippet28026325_10175.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n", "idx": 1764}
{"project": "cipher", "commit_id": "Snippet5520640_31681.java", "target": 0, "func": "    String algorithm = \"DES\";\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(algorithm);\n\n    byte[] encBytes = \"12345678\".getBytes(\"UTF8\");\n    byte[] decBytes = \"56781234\".getBytes(\"UTF8\");\n\n    DESKeySpec keySpecEncrypt = new DESKeySpec(encBytes);\n    DESKeySpec keySpecDecrypt = new DESKeySpec(decBytes);\n\n\n    SecretKey keyEncrypt = keyFactory.generateSecret(keySpecEncrypt);\n    SecretKey keyDecrypt = keyFactory.generateSecret(keySpecDecrypt);\n\n    Cipher cipherEncrypt = Cipher.getInstance(algorithm);\n    Cipher cipherDecrypt = Cipher.getInstance(algorithm);\n\n    String input = \"john doe\";\n\n    cipherEncrypt.init(Cipher.ENCRYPT_MODE, keyEncrypt);\n    byte[] inputBytes = cipherEncrypt.doFinal(input.getBytes());\n    System.out.println(\"inputBytes: \" + new String(inputBytes));\n\n    cipherDecrypt.init(Cipher.DECRYPT_MODE, keyDecrypt);\n    byte[] outputBytes = cipherDecrypt.doFinal(inputBytes);\n    System.out.println(\"outputBytes: \" + new String(outputBytes));\n", "idx": 1765}
{"project": "cipher", "commit_id": "Snippet25011238_7336.java", "target": 0, "func": "public class Decrypts {\n    private static final String password = \"haasd\";\n    private static final String ALGO = \"AES\";\n\n    public static String encrypt(String Data) throws Exception {\n        String SALT = generateSalt();\n        byte[] saltBytes = SALT.getBytes(\"UTF-8\");\n        System.out.println(\"Saltbytes ; \" + saltBytes);\n\n        SecretKeyFactory factory = SecretKeyFactory\n                .getInstance(\"PBKDF2WithHmacSHA1\");\n        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), saltBytes,\n                65536, 256);\n\n        SecretKey secretKey = factory.generateSecret(spec);\n        SecretKeySpec secret = new SecretKeySpec(secretKey.getEncoded(), \"AES\");\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, secret);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        byte[] encryptedValue = new Base64().encode(encVal);\n        String ency = new String(encryptedValue);\n        return ency;\n    }\n\n    @SuppressWarnings(\"static-access\")\n    public static String decrypt(String encryptedData) throws Exception {\n        String SALT = generateSalt();\n        byte[] saltBytes = SALT.getBytes(\"UTF-8\");\n        System.out.println(\"Saltbytes ; \" + saltBytes);\n\n        SecretKeyFactory factory = SecretKeyFactory\n                .getInstance(\"PBKDF2WithHmacSHA1\");\n        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), saltBytes,\n                65536, 256);\n\n        SecretKey secretKey = factory.generateSecret(spec);\n        SecretKeySpec secret = new SecretKeySpec(secretKey.getEncoded(), \"AES\");\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, secret);\n        byte[] decordedValue = new Base64().decodeBase64(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n\n    public static String generateSalt() {\n        SecureRandom random = new SecureRandom(password.getBytes());\n        byte bytes[] = new byte[120];\n        random.nextBytes(bytes);\n        String s = new String(bytes);\n        System.out.println(\"Salt ; \" + s);\n        return s;\n    }\n}\n", "idx": 1766}
{"project": "cipher", "commit_id": "Snippet33768305_15797.java", "target": 0, "func": "String key = \"012345678901234567890123\";\nString clearText = \"test\";\n\nMessageDigest md = MessageDigest.getInstance(\"md5\");\nbyte[] digestOfPassword = md.digest(key.getBytes(\"UTF-16LE\"));\n\nbyte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\nString byteText = Arrays.toString(keyBytes);\n\nfor (int j = 0, k = 16; j < 8;) {\n  keyBytes[k++] = keyBytes[j++];\n}\n\nSecretKey secretKey = new SecretKeySpec(keyBytes, 0, 24, \"DESede\");\n\nIvParameterSpec iv = new IvParameterSpec(new byte[8]);\nCipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n\ncipher.init(Cipher.ENCRYPT_MODE, secretKey, iv);\n\nbyte[] plainTextBytes = clearText.getBytes(\"UTF-16LE\");\nbyte[] cipherText = cipher.doFinal(plainTextBytes);\n\nString output = Base64.encode(cipherText);\n", "idx": 1767}
{"project": "cipher", "commit_id": "Snippet16837260_176.java", "target": 0, "func": "public class MyClassActivity extends Activity {\n\nVideoView mVideoView; \nLocalSingleHttpServer mServer ;\n\n@Override \nprotected void onCreate(Bundle savedInstanceState) { \n  super.onCreate(savedInstanceState);\n\n  SecretKey sk = encryptVideo(\"/mnt/sdcard/input.mp4\", \"/mnt/sdcard/enc.mp4\");\n\n  playENCVideo(sk,\"/mnt/sdcard/enc.mp4\");\n}\n\npublic void playENCVideo(SecretKey skey, String path) {\n\n   Cipher decipher = null;\n\n   decipher = Cipher.getInstance(\"AES\");\n\n   decipher.init(Cipher.DECRYPT_MODE, skey);\n\n   mServer = new LocalSingleHttpServer();\n\n   mServer.setCipher(decipher);\n   mServer.start();\n\n   path = mServer.getURL(path);\n\n  mVideoView = (VideoView) findViewById(R.id.vid_view);\n  mVideoView.setVideoPath(path);\n  mVideoView.setOnPreparedListener(this);\n  mVideoView.setOnCompletionListener(this);\n  mVideoView.setMediaController(new MediaController(this));\n  mVideoView.start();\n} //playENCVideo()\n\nencryptVideo() {\n\n}\n\ndecryptVideo() {\n\n}\n} //MyClassActivity\n", "idx": 1768}
{"project": "cipher", "commit_id": "Snippet46449809_28558.java", "target": 0, "func": "Key key = generateKeyAES();\nCipher c = Cipher.getInstance(\"AES\");\nc.init(Cipher.ENCRYPT_MODE, key);\nbyte[] encVal = c.doFinal(data.getBytes());\nreturn new String(java.util.Base64.getEncoder().encode(encVal));\n", "idx": 1769}
{"project": "cipher", "commit_id": "Snippet17690611_810.java", "target": 0, "func": "public static byte[] encrypt(String message) throws Exception {\n        final MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n        final byte[] digestOfPassword = md.digest(token\n                .getBytes(\"utf-8\"));\n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        for (int j = 0, k = 16; j < 8; ) {\n            keyBytes[k++] = keyBytes[j++];\n        }\n\n        final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n        final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n        final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv, new SecureRandom(new byte[5]));\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n        final byte[] plainTextBytes = message.getBytes(\"utf-8\");\n        final byte[] cipherText = cipher.doFinal(plainTextBytes);\n        return cipherText;\n    }\n", "idx": 1770}
{"project": "cipher", "commit_id": "Snippet25036826_7358.java", "target": 0, "func": "public class AESencrp {\n\n     private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = \n        new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't',\n'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\npublic static String encrypt(String Data) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encVal);\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n}\n\n}\n", "idx": 1771}
{"project": "cipher", "commit_id": "Snippet37646385_19594.java", "target": 0, "func": "public static void main(String[] args) {\n    String data = getData();\n    String key = generateKey();\n    byte[] encrypted = encryptData(data, key);\n    String str_encrypted = new String(encrypted);\n    String url = pushToServer(str_encrypted);\n}\n\nprivate static byte[] encryptData(String data, String key) {\n\n    try {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n\n        md.update(key.getBytes(\"UTF-8\"));\n        byte[] digest = md.digest();\n\n        Cipher c = Cipher.getInstance(\"AES\");\n        SecretKeySpec k = new SecretKeySpec(digest, \"AES\");\n        c.init(Cipher.ENCRYPT_MODE, k);\n\n        byte[] tobeencrypted = data.getBytes(\"UTF-8\");\n\n        return c.doFinal(tobeencrypted);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n\n}\n", "idx": 1772}
{"project": "cipher", "commit_id": "Snippet11408490_35567.java", "target": 0, "func": "<%@ page import=\"java.io.*\" %>\n<%@ page import=\"java.security.*\" %>\n<%@ page import=\"javax.crypto.*\" %>\n<%@ page import=\"javax.crypto.spec.*\" %>\n<%@ page import=\"java.lang.*\" %>\n<%@ page import=\"org.apache.commons.codec.binary.*\" %>\n\n    <HTML>\n    <HEAD>\n    <TITLE> Cheers! </TITLE>\n    </HEAD>\n    <BODY>\n\n    <%\n        String algorithm1 = \"DES\";//magical mystery constant\n        String algorithm2 = \"DES/CBC/NoPadding\";//magical mystery constant\n        IvParameterSpec iv = new IvParameterSpec( new byte [] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );//magical mystery constant\n        Cipher cipher;\n        SecretKey key;\n        String k=\"12345abc\"; //Just a random pick for testing\n        key = new SecretKeySpec( k.getBytes(\"UTF-8\"), algorithm1 );\n        cipher = Cipher.getInstance( algorithm2 );\n\n        String str=\"test4abc\"; //Test String, 8 characters\n\n        cipher.init( Cipher.ENCRYPT_MODE, key, iv ); //normally you could leave out the IvParameterSpec argument, but not with Oracle\n\n        byte[] bytes=str.getBytes(\"UTF-8\");\n\n        byte[] encrypted = cipher.doFinal( bytes );\n\n        String encoded = new String( Hex.encodeHex( encrypted ) );\n        out.println( \"Encrypted/Encoded: \\\"\" + encoded + \"\\\"\" );\n\n\n\n        cipher.init( Cipher.DECRYPT_MODE, key, iv );    \n\n        //byte [] decoded = org.apache.commons.codec.binary.Hex.decodeHex( encoded.toCharArray( ) );\n        byte [] decoded = Hex.decodeHex( encoded.toCharArray( ) );\n\n        String decrypted = new String (cipher.doFinal( decoded ));\n        out.println(\"DECRYPTED: \\\"\" + decrypted + \"\\\"\" );\n    }\n\n    %>  \n    </BODY>\n    </HTML>\n", "idx": 1773}
{"project": "cipher", "commit_id": "Snippet10228138_34573.java", "target": 0, "func": "import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AESDecrypter\n{\n        Cipher dcipher;\n\n        public AESDecrypter(SecretKey key)\n        {\n\n                try\n                {\n                        dcipher = Cipher.getInstance(\"AES\");\n                        dcipher.init(Cipher.DECRYPT_MODE, key);\n                }\n                catch (Exception e)\n                {\n                        e.printStackTrace();\n                }\n        }\n\n        byte[] buf = new byte[1024];\n\n        public void decrypt(InputStream in, OutputStream out)\n        {\n            System.out.println(\"decrypting\");\n            try\n                {\n                        in = new CipherInputStream(in, dcipher);\n                        int numRead = 0;\n                        while ((numRead = in.read(buf)) >= 0)\n                        {\n                                out.write(buf, 0, numRead);\n                        }\n                        out.close();\n                }\n                catch (java.io.IOException e)\n                {\n                }\n        }\n\n        public static void main(String args[])\n        {\n                try\n                {\n                        byte[] keystr ={(byte) 0x12,(byte) 0x34,0x55,(byte) 0x66,0x67,(byte)0x88,(byte)0x90,0x12,(byte) 0x23,0x45,0x67,(byte)0x89,0x12,0x33,(byte) 0x55,0x74};\n                        SecretKeySpec sks = new SecretKeySpec(keystr,\"AES\");                        \n                        AESDecrypter encrypter = new AESDecrypter(sks);\n                        encrypter.decrypt(new FileInputStream(\"sqllogenc.log\"),new FileOutputStream(\"sqllogdec.log\"));\n                }\n                catch (Exception e)\n                {\n                        e.printStackTrace();\n                }\n        }\n}\n", "idx": 1774}
{"project": "cipher", "commit_id": "Snippet37614790_19570.java", "target": 0, "func": "public String encrypt(String plainPwd)\n{\n    byte[] outputBytes = new byte[] {};\n    String returnString = \"\";\n    try\n    {\n        byte[] raw = \"XXXXX@XXXXXX.XXX\".getBytes(\"UTF-8\");\n\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        outputBytes = cipher.doFinal(plainPwd.getBytes(\"UTF-8\"));\n        if (null != outputBytes)\n        {\n            returnString = Base64Encrypter.getInstance().encode(outputBytes);\n        }\n        return returnString.trim();\n\n    }\n    catch (Exception e)\n    {\n        System.out.println(e);\n    }\n\n    return new String(outputBytes).trim();\n}\n\npublic String decrypt(String encryptedPwd)\n{\n    byte[] outputBytes = new byte[] {};\n    try\n    {\n        byte[] raw = \"XXXXX@XXXXXX.XXX\".getBytes(\"UTF-8\");\n\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        byte[] inputBytes = Base64Encrypter.getInstance().decode(encryptedPwd);\n        if (null != inputBytes)\n        {\n            outputBytes = cipher.doFinal(inputBytes);\n        }\n    }\n    catch (Exception e)\n    {\n        System.out.println(e);\n    }\n\n    return new String(outputBytes).trim();\n}\n", "idx": 1775}
{"project": "cipher", "commit_id": "Snippet34001023_16065.java", "target": 0, "func": "public class Cryptographer {\nprivate static final String ALGORITHM = \"AES\";\n\nprivate final static String ALGO_RANDOM_NUM_GENERATOR = \"SHA1PRNG\";\n\npublic static int encrypt(String key, File inputFile, File outputFile)\n        throws CryptographyException {\n    if(!outputFile.getParentFile().exists())outputFile.getParentFile().mkdir();\n    return StartCryptography(Cipher.ENCRYPT_MODE, key, inputFile, outputFile);\n}\n\npublic static int decrypt(String key, File inputFile, File outputFile)\n        throws CryptographyException {\n    if(!outputFile.getParentFile().exists())outputFile.getParentFile().mkdir();\n    return StartCryptography(Cipher.DECRYPT_MODE, key, inputFile, outputFile);\n}\n\nprivate static int StartCryptography(int cipherMode, String key, File inputFile,\n                                     File outputFile) throws CryptographyException {\n    int performance = -1;\n    try {\n        SecureRandom random = SecureRandom.getInstance(ALGO_RANDOM_NUM_GENERATOR);\n        random.setSeed(key.getBytes());\n        KeyGenerator generator = KeyGenerator.getInstance(ALGORITHM);\n        generator.init(random);\n        SecretKey key1 = generator.generateKey();\n\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(cipherMode, key1);\n\n        FileInputStream inputStream = new FileInputStream(inputFile);\n        byte[] inputBytes = new byte[(int) inputFile.length()];\n        inputStream.read(inputBytes);\n\n        byte[] outputBytes = cipher.doFinal(inputBytes);\n\n        FileOutputStream outputStream = new FileOutputStream(outputFile);\n        outputStream.write(outputBytes);\n\n        inputStream.close();\n        outputStream.close();\n        performance = 1;\n\n    } catch (NoSuchPaddingException | NoSuchAlgorithmException\n            | InvalidKeyException | BadPaddingException\n            | IllegalBlockSizeException | IOException ex) {\n        throw new CryptographyException(\"Error encrypting/decrypting file\", ex);\n    } finally {\n        return performance;\n    }\n\n }\n}\n", "idx": 1776}
{"project": "cipher", "commit_id": "Snippet15147738_38233.java", "target": 0, "func": "this.encrypter = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\", \"BC\");", "idx": 1777}
{"project": "cipher", "commit_id": "Snippet38487481_20453.java", "target": 0, "func": "public class DecryptActivity extends AppCompatActivity {\n\nEditText ed1;\nTextView tv;\nButton b1,b2;\nbyte[] decrypted;\nString decryptedText = null;\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.decrypt_activity);\n    ed1 = (EditText) findViewById(R.id.decrypteditText);\n    b1 = (Button) findViewById(R.id.decryptbutton);\n    b1.setOnClickListener(new View.OnClickListener() {\n\n        @Override\n        public void onClick(View v) {\n            Log.d(\"asd\",\"inside onclick\");\n            try {\n                Log.d(\"asd\",\"inside try of decryptActivity\");\n                KeyGenerator keygenerator = KeyGenerator.getInstance(\"Blowfish\");\n                SecretKey secretkey = keygenerator.generateKey();\n                Cipher cipher2 = Cipher.getInstance(\"Blowfish\");\n                  cipher2.init(Cipher.DECRYPT_MODE,secretkey);\n                Log.d(\"asd\",\"in decrypt key is\"+secretkey.toString());\n                Log.d(\"asd\",\"before getBytes\");\n                byte[] encrypted =ed1.getText().toString().getBytes();\n                Log.d(\"asd\",ed1.getText().toString());\n                decrypted = cipher2.doFinal(encrypted);\n                tv=(EditText)findViewById((R.id.textView));\n                tv.setText(\"Asd\");\n                Log.d(\"asd\",new String(decrypted));\n            } catch (Exception e) {\n            }\n            Toast.makeText(getApplicationContext(), \"Text Pasted\", Toast.LENGTH_SHORT).show();\n        }\n    });\n}\n", "idx": 1778}
{"project": "cipher", "commit_id": "Snippet20060563_2712.java", "target": 0, "func": "Cipher ciph = Cipher.getInstance(\"DES/ECB/NoPadding\");\nSecretKey blah = new SecretKeySpec(key, \"DES\");\n", "idx": 1779}
{"project": "cipher", "commit_id": "Snippet26698138_8825.java", "target": 0, "func": "byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,\n    0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 }; //Choose a key wisely\n\nSecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\nfis = new FileInputStream(\"some_img.png\");\ncis = new CipherInputStream(fis, cipher);\nfos = new FileOutputStream(\"encrypted_img.enc\");\nbyte[] b = new byte[8];\nint i = cis.read(b);\nwhile (i != -1) {\n    fos.write(b, 0, i);\n    i = cis.read(b);\n}\nfos.close();\n", "idx": 1780}
{"project": "cipher", "commit_id": "Snippet40390320_22257.java", "target": 0, "func": "final static byte[] KEY = {13, 92, 9, 7, 111, 84, 19, 3, 20, 76, 67, 47, 12, 2, 32, 99};\n\nfinal static Base64 ENCODER = new Base64(-1, new byte[0], true);\nfinal static Key S_KEY = new SecretKeySpec(KEY, \"AES\");\n\nstatic String encrypt(long aid) {\n    byte[] clear = Longs.toByteArray(aid);\n\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, S_KEY);\n\n        byte[] bytes = cipher.doFinal(clear);\n\n        System.out.println(\"Byte array: \" + Arrays.toString(bytes));\n\n        return ENCODER.encodeAsString(bytes);\n\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return null;\n}\n", "idx": 1781}
{"project": "cipher", "commit_id": "Snippet41167894_23131.java", "target": 0, "func": "package com.lahiru.security;\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport java.util.Base64;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AESEncryptionDecryption {\n\n    private static SecretKeySpec secretKey;\n    private static byte[] key;\n\n    public static void main(String[] args){\n        String id = \"00001\";\n        String plainText = \"This is plain text\";\n\n        String cipherText = encrypt(plainText, id);\n        System.out.println(\"Cipher Text after encrption ::: \" + cipherText);\n        System.out.println(\"Plain Text after decryption ::: \" + decrypt(cipherText, id));\n\n    }\n\n\n    public static void setKey(String myKey) \n    {\n        MessageDigest sha = null;\n        try {\n            key = myKey.getBytes(\"UTF-8\");\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n            key = Arrays.copyOf(key, 16); \n            secretKey = new SecretKeySpec(key, \"AES\");\n        } \n        catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } \n        catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static String encrypt(String strToEncrypt, String secret) \n    {\n        try\n        {\n            setKey(secret);\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\")));\n        } \n        catch (Exception e) \n        {\n            System.out.println(\"Error while encrypting: \" + e.toString());\n        }\n        return null;\n    }\n\n    public static String decrypt(String strToDecrypt, String secret) \n    {\n        try\n        {\n            setKey(secret);\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));\n        } \n        catch (Exception e) \n        {\n            System.out.println(\"Error while decrypting: \" + e.toString());\n        }\n        return null;\n    }\n}\n", "idx": 1782}
{"project": "cipher", "commit_id": "Snippet23198243_5538.java", "target": 0, "func": "KeyGenerator keygenerator;\ntry {\n    keygenerator = KeyGenerator.getInstance(\"Blowfish\");\n    SecretKey secretkey = keygenerator.generateKey();\n\n    String Key = settings.getString(\"key\", \"\");\n    byte[] KeyData = Key.getBytes();\n    SecretKeySpec KS = new SecretKeySpec(KeyData, \"Blowfish\");\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n    cipher.init(Cipher.ENCRYPT_MODE, KS);\n\n    byte[] encrypted = cipher.doFinal(message.getBytes());\n    message = new String(encrypted, \"UTF-8\");\n\n    System.out.println(\"encrypt ok\");\n} catch (Exception e){\n    System.out.println(\"encrypt error\");\n}\n", "idx": 1783}
{"project": "cipher", "commit_id": "Snippet10412771_34785.java", "target": 0, "func": "if ((len = inputStream.read(mainBuffer)) > -1) {\n                totalLength = len;\n            }\nif (totalLength > 0) {\n                byteToAscii = function.byteToAscii(mainBuffer, totalLength);\n            }\nif (byteToAscii.length() > 0) {\n                completeHexString = function.stringToHex(byteToAscii);               \n                debugInfo = \"FRAME RECV.=\" + completeHexString;\n/* FRAME RECV.=41ed34a41a9de6d270aa1e1464527e88c8bee66a00cfb308f60c105de81db0f1ce43d8c0b9bc4e8070b5ab8d4d3650b55d23223fc687bb1485945bc3228e9707a7aecda9f90657e0ac009571c6469c58a2cd9793cc433ccb5993f2*/\n            }\nbyte[] key = new byte[]{31, 30, 31, 36, 32, 11, 11, 11, 22, 26, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30};\nmyKeySpec = new DESedeKeySpec(key);\nmySecretKeyFactory = SecretKeyFactory.getInstance(\"TripleDES\");\ndekey = mySecretKeyFactory.generateSecret(myKeySpec);\nbyte[] zeros = {0, 0, 0, 0, 0, 0, 0, 0};\nIvParameterSpec iv = new IvParameterSpec(zeros);\nCipher c = Cipher.getInstance(\"TripleDES/CBC/PKCS5Padding\");\nc.init(Cipher.DECRYPT_MODE, key, iv);\nbyte[] decordedValue = new BASE64Decoder().decodeBuffer(completeHexString);\nbyte[] decValue = c.doFinal(decordedValue);\nString decryptedValue = new String(decValue);\nSystem.out.println(\"decryptedValue= \" + decryptedValue);\n", "idx": 1784}
{"project": "cipher", "commit_id": "Snippet22827221_5220.java", "target": 0, "func": "    // Decode EncryptKey with GameId\n    byte[] gameIdBytes = (\"502719605\").getBytes();\n    SecretKeySpec gameIdKeySpec = new SecretKeySpec(gameIdBytes, \"Blowfish\");\n    Cipher gameIdCipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n    gameIdCipher.init(Cipher.DECRYPT_MODE, gameIdKeySpec);\n    byte[] encryptKeyBytes = Base64.decode(\"Sf9c+zGDyyST9DtcHn2zToscfeuN4u3/\");\n    byte[] encryptkeyDecryptedByGameId = gameIdCipher.doFinal(encryptKeyBytes);\n\n    // Initialize the chunk cipher\n    SecretKeySpec chunkSpec = new SecretKeySpec(encryptkeyDecryptedByGameId, \"Blowfish\");\n    Cipher chunkCipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n    chunkCipher.init(Cipher.DECRYPT_MODE, chunkSpec);\n\n    byte[] chunkContent = getChunkContent();\n    byte[] chunkDecryptedBytes = chunkCipher.doFinal(chunkContent);\n", "idx": 1785}
{"project": "cipher", "commit_id": "Snippet19172479_2018.java", "target": 0, "func": "//Encryption \nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");  \nSecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);\n String encryptedString = Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes()));\nreturn encryptedString;\n\n//Decryption\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\nSecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\ncipher.init(Cipher.DECRYPT_MODE, secretKey);\nString decryptedString = new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt)));\nreturn decryptedString;\n", "idx": 1786}
{"project": "cipher", "commit_id": "Snippet7523169_32757.java", "target": 0, "func": "import java.security.*;\nimport java.security.cert.*;\nimport java.security.interfaces.*;\nimport java.security.spec.*;\nimport javax.crypto.*;\nimport javax.crypto.interfaces.*;\nimport javax.crypto.spec.*;\nimport java.io.*;\n/**\n *  AES\n */\npublic class SymmetricAES {\n\n    public SymmetricAES() {\n    }\n\n    public static void main(String args[]){\n        BufferedReader ch = new BufferedReader(new InputStreamReader(System.in));\n        char[] toCode;\n        byte[] toCode2;\n        byte[] Coded;\n        char[] Coded2;\n        byte[] decoded;\n        char[] deco2;\n\n        try{\n            System.out.print(\"Text to Encrypt : \");\n            String toMake = ch.readLine();\n\n            /** Arxikopoihsh antikeimenou KeyGenerator gia AES\n             *  kai dhmhourgia Kleidioy */\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n            SecretKey aesKey = keyGen.generateKey();\n\n            /* Arxikopoihsh aesCipher gia AES */\n            Cipher aesCipher = Cipher.getInstance(\"AES\");\n\n            /* Orismos aesCipher se ENCRYPT_MODE me to aesKey */\n            aesCipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            System.out.println(\"The Key : \" + aesKey.getEncoded());\n\n            /* Metatroph antikeimenou String se pinaka Char\n             * kai o ka8e xarakthras gineta Cast se Byte kai eisagwgh\n             * se pinaka Byte isou mege8ous me ton prwto pinaka */\n            toCode = toMake.toCharArray();\n            toCode2 = new byte[toCode.length];\n            Coded = new byte[toCode.length];\n            for(int i=0;i<toCode.length;i++)\n                toCode2[i] = (byte)toCode[i];\n\n            /* Teliko stadio Kryptografhshs */\n            Coded = aesCipher.doFinal(toCode2);\n\n            /* byte[] --> char[] kai ektypwsh*/\n            Coded2 = new char[Coded.length];\n            for(int i=0;i<Coded.length;i++)\n                Coded2[i] = (char)Coded[i];\n            System.out.println(\"Test Encrypt: \" + new String(Coded2));\n\n\n            Cipher aesCipher2 = Cipher.getInstance(\"AES\");\n\n            /* Orismos aesCipher2 se DECRYPT_MODE me to aesKey */\n            aesCipher2.init(Cipher.DECRYPT_MODE, aesKey);\n\n            decoded = aesCipher2.doFinal(Coded);\n\n            /* byte[] --> char[] kai ektypwsh*/\n            deco2 = new char[decoded.length];\n            for(int i=0;i<decoded.length;i++)\n                deco2[i] = (char)decoded[i];\n            System.out.println(\"Test Decrypt: \" + new String(deco2));\n        }\n        catch(Exception e){\n            System.out.println(e);\n        }   \n    }\n}\n", "idx": 1787}
{"project": "cipher", "commit_id": "Snippet38407929_20355.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"blowfish\");\n", "idx": 1788}
{"project": "cipher", "commit_id": "Snippet1009996_29850.java", "target": 0, "func": "import java.util.Random;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\n\n...\n\nbyte[] salt = new byte[8];\nRandom rand = new Random();\nrand.nextBytes(salt);\n\nPBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithSHAAndTwofish-CBC\");\nSecretKey key = keyFactory.generateSecret(keySpec);\nPBEParameterSpec paramSpec = new PBEParameterSpec(salt, 1000);\n\nCipher cipher = Cipher.getInstance(\"PBEWithSHAAndTwofish-CBC\");\ncipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\nbyte[] ciphertext = cipher.doFinal(plaintext);\n", "idx": 1789}
{"project": "cipher", "commit_id": "Snippet44048028_26114.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\n\npublic class Gen_DESAES_key{\n\n    public static void main(String[] args) {\n        byte[] message = \"Hello World\".getBytes();\n\n        KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n        SecretKey desKey = keygenerator.generateKey();\n\n        Cipher desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        desCipher.init(Cipher.ENCRYPT_MODE,desKey);\n\n        byte[] encryptedMessage = desCipher.doFinal(message);\n    }\n}\n", "idx": 1790}
{"project": "cipher", "commit_id": "Snippet37966464_19996.java", "target": 0, "func": "try {\n    String key = Password.getText();\n\n    if (key.length() < 8 || key.length() > 8 || !key.equals(\"Password\")) {\n\n        JOptionPane.showMessageDialog(null, \"Not a valid key\");\n\n    } else {\n\n        DESKeySpec dks = new DESKeySpec(key.getBytes());\n        SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey desKey = skf.generateSecret(dks);\n\n        AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);\n\n        Code.dcipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        Code.dcipher.init(Cipher.DECRYPT_MODE, desKey, paramSpec);\n\n        Code.decrypt(new FileInputStream(\"encrypted.txt\"),\n                new FileOutputStream(\"cleartext-reversed.txt\"));\n\n        BufferedReader br = new BufferedReader(new FileReader(\n                \"cleartext-reversed.txt\"));\n        try {\n            StringBuilder sb = new StringBuilder();\n            String line = br.readLine();\n\n            while (line != null) {\n                sb.append(line);\n                line = br.readLine();\n            }\n            String decrypted = sb.toString();\n            DisplayArea2.setText(decrypted);\n        } catch (IOException ex) {\n            Logger.getLogger(MainApp.class.getName()).log(Level.SEVERE,\n                    null, ex);\n        } finally {\n            try {\n                br.close();\n            } catch (IOException ex) {\n                Logger.getLogger(MainApp.class.getName()).log(\n                        Level.SEVERE, null, ex);\n            }\n        }\n\n    }\n\n} catch (InvalidKeyException | NoSuchAlgorithmException\n        | InvalidKeySpecException | NoSuchPaddingException\n        | InvalidAlgorithmParameterException | FileNotFoundException ex) {\n    Logger.getLogger(MainApp.class.getName()).log(Level.SEVERE, null,\n            ex);\n}\n", "idx": 1791}
{"project": "cipher", "commit_id": "Snippet21982389_4407.java", "target": 0, "func": "    import java.security.spec.KeySpec;\n    import javax.crypto.Cipher;\n    import javax.crypto.SecretKey;\n    import javax.crypto.SecretKeyFactory;\n    import javax.crypto.spec.DESedeKeySpec;\n\n\n    public class SecretKeyEncryptionExample\n    {\n      private static final String FORMAT = \"ISO-8859-1\";\n      public static final String DESEDE_ENCRYPTION_SCHEME = \"DESede\";\n      private KeySpec ks;\n      private SecretKeyFactory skf;\n      private Cipher cipher;\n      SecretKey key;\n\n      public SecretKeyEncryptionExample()\n        throws Exception\n      {\n        String myEncryptionKey = \"<48 chars long string>\";\n\n        this.ks = new DESedeKeySpec(myEncryptionKey.getBytes(\"ISO-8859-1\"));\n        this.skf = SecretKeyFactory.getInstance(\"DESede\");\n        this.cipher = Cipher.getInstance(\"DESede\");\n        this.key = this.skf.generateSecret(this.ks);\n      }\n", "idx": 1792}
{"project": "cipher", "commit_id": "Snippet32531509_14644.java", "target": 0, "func": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\n\n\npublic class FileManagment {\n\n    static CreateAccountFrame caf = new CreateAccountFrame();\n\n    File file = new File(\"accounts.lockedfilecausewhynot\");\n\n    Cipher desCipher;\n\n    byte[] usernameEncrypted;\n    byte[] passwordEncrypted;\n    byte[] chosenUsername;\n    byte[] chosenPassword;\n    byte[] storedUsername;\n    byte[] storedPassword;\n    byte[] decryptedUsername;\n    byte[] decryptedPassword;\n\n    public void createAccountsFile(){\n        try {\n            if(!file.exists()){\n                file.createNewFile();\n            }\n        } catch (IOException e){\n                e.printStackTrace();\n        }\n    }\n\n    public void addEncryptedAccount(){\n        try {\n            KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n            SecretKey desKey = kg.generateKey();\n\n            desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n            desCipher.init(Cipher.ENCRYPT_MODE, desKey);\n\n            chosenUsername = caf.chooseUsername.getText().getBytes(\"UTF-8\");\n            chosenPassword = caf.choosePassword.getText().getBytes(\"UTF-8\");\n            usernameEncrypted = desCipher.doFinal(chosenUsername);\n            passwordEncrypted = desCipher.doFinal(chosenPassword);\n\n            String encryptedUsername = new String(usernameEncrypted);\n            String encryptedPassword = new String(passwordEncrypted);\n\n            FileWriter fw = new FileWriter(file.getAbsoluteFile());\n            BufferedWriter bw= new BufferedWriter(fw);\n            bw.write(encryptedUsername);\n            bw.newLine();\n            bw.write(encryptedPassword);\n            bw.close(); \n        } catch (IOException | NoSuchAlgorithmException |InvalidKeyException \n            | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException e){\n            e.printStackTrace();\n    }\n}\n\n    public void readEcryptedText(){\n        try {\n            KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n            SecretKey desKey = kg.generateKey();\n\n            FileReader fr = new FileReader(file);\n            BufferedReader br = new BufferedReader(fr);\n\n            String encryptedText = br.readLine();\n            System.out.println(encryptedText);\n\n            storedUsername = encryptedText.getBytes(\"UTF-8\");\n\n            desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n            desCipher.init(Cipher.DECRYPT_MODE, desKey);\n\n            decryptedUsername = desCipher.doFinal(storedUsername);\n\n            String decryptedText = new String(decryptedUsername).toString();\n            System.out.println(\"decryptedText\");\n\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException \n            | InvalidKeyException | IOException | IllegalBlockSizeException | BadPaddingException e) {\n        e.printStackTrace();\n    }\n}\n", "idx": 1793}
{"project": "cipher", "commit_id": "Snippet45503824_27572.java", "target": 0, "func": "public class CipherServer\n{\n    public static void main(String[] args) throws Exception \n    {\n        int port = 7999;\n        ServerSocket server = new ServerSocket(port);\n        Socket s = server.accept();\n\n        // -Read the key from the file generated by the client.\n        ObjectInputStream in = new ObjectInputStream(new FileInputStream(\"KeyFile.xx\"));\n        Key key = (Key)in.readObject();\n        in.close();\n\n        // -Use the key to decrypt the incoming message from socket s.      \n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        CipherInputStream cipherIn = new CipherInputStream(s.getInputStream(), cipher);\n\n        byte[] array = new byte[44];\n        cipherIn.read(array);\n        cipherIn.close();\n        s.close();\n\n        String message = new String(array);\n        System.out.println(message);\n    }\n}\n", "idx": 1794}
{"project": "cipher", "commit_id": "Snippet44059064_26143.java", "target": 0, "func": "    byte[] pt = new byte[16];\n    SecretKeyFactory fact = SecretKeyFactory.getInstance(\"DESede\");\n    Cipher desEDE = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n\n    {\n        // usual 2-key triple DES:\n        byte[] keyData = Hex.decode(\"112233445566778811223344556677881122334455667788\");\n        SecretKey generatedSecret = fact.generateSecret(new SecretKeySpec(keyData, \"DESede\"));\n        desEDE.init(Cipher.ENCRYPT_MODE, generatedSecret);\n        byte[] ct = desEDE.doFinal(pt);\n        System.out.println(Hex.toHexString(ct)); // result: 6FB23EAD0534752B \n    }\n\n    {\n        // \"zero padded\" 2-key triple DES:\n        byte[] keyData = Hex.decode(\"112233445566778811223344556677880000000000000000\");\n        SecretKey generatedSecret = fact.generateSecret(new SecretKeySpec(keyData, \"DESede\"));\n        desEDE.init(Cipher.ENCRYPT_MODE, generatedSecret);\n        byte[] ct = desEDE.doFinal(pt);\n        System.out.println(Hex.toHexString(ct)); // result: 8ca64de9c1b123a7 \n    }\n", "idx": 1795}
{"project": "cipher", "commit_id": "Snippet25135917_7489.java", "target": 0, "func": "public static String encrypt(String input, String key) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    return DatatypeConverter.printHexBinary(cipher.doFinal(padToMultipleOf32(input.getBytes())));\n}\n\npublic static byte[] padToMultipleOf32(final byte[] bytes) {\n    int n16 = ((bytes.length + 31) / 32);\n    int paddedLen = n16 * 32;\n\n    byte[] result = new byte[paddedLen];\n\n    for (int i = 0; i < bytes.length; i++) {\n        result[i] = bytes[i];\n    }\n\n    for (int i = bytes.length; i < paddedLen; i++) {\n        result[i] = 0x00;\n    }\n\n    System.out.println(new String(result).length());\n\n    return result;\n}\n", "idx": 1796}
{"project": "cipher", "commit_id": "Snippet25760433_8054.java", "target": 0, "func": "try\n    {\n        // Get the URL for the servlet.\n        URL url = new URL(getCodeBase(), \"editCriteriaServlet\");\n\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\n        connection.setDoInput(true);\n        connection.setDoOutput(true);\n        connection.setUseCaches(false);\n        connection.setRequestMethod(\"POST\");\n        connection.setRequestProperty(\"Content-Type\", \"text/plain\");\n        connection.setRequestProperty(\"Cookie\", \"JSESSIONID=\" + sessionID);\n\n        ObjectOutputStream out = new ObjectOutputStream(connection.getOutputStream());\n        out.writeObject(\"Request criteria Object\");\n        out.flush();\n        out.close();\n\n        // Read in the search criteria object.\n        ObjectInputStream in = new ObjectInputStream(connection.getInputStream());\n        SealedObject sealedObject = (SealedObject)in.readObject();\n        in.close();\n\n        // Decrypt the sealed object and get the zipped data.\n        SecretKey key = buildSecretKey(crypKeyString);\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] baos = (byte[]) sealedObject.getObject(cipher);\n        ByteArrayInputStream gis = new ByteArrayInputStream(baos);\n\n        // Unzip and recover the original object.\n        GZIPInputStream unzipped = new GZIPInputStream(gis);\n        ObjectInputStream ois = new ObjectInputStream(unzipped);\n        tempMultipleSlideDataObject = (MultipleSlideDataObject15) ois.readObject();            \n    }\n    catch (MalformedURLException ex)\n    {\n        errorMessage = \"Submit criteria file Malformed URL.\" + ex.toString();\n        fireActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, \"showErrorMessageDialog_\"));\n        System.out.println(\"Model_CriteriaInterface: loadCriteriaObject: MalformedURLException occurred\");\n    }\n    catch (Exception e)\n    {\n        errorMessage = \"Submit criteria file ERROR exception:\" + e.toString();\n        fireActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, \"showErrorMessageDialog_\"));\n        System.out.println(\"Model_CriteriaInterface: loadCriteriaObject: Submit criteria file ERROR exception: \" + e.toString());\n    }\n", "idx": 1797}
{"project": "cipher", "commit_id": "Snippet10136585_34498.java", "target": 0, "func": "public class AES {\n\n    public static void main(String[] args) throws Exception {\n        String cleartext = \"abcdefghijklmnop\";\n        String key = \"1234567890123456\";\n        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(cleartext.getBytes());\n        System.out.println(asHex(encrypted));\n    }\n\n    public static String asHex(byte buf[]) {\n        StringBuffer strbuf = new StringBuffer(buf.length * 2);\n        int i;\n        for (i = 0; i < buf.length; i++) {\n            if (((int) buf[i] & 0xff) < 0x10)\n                strbuf.append(\"0\");\n            strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n        }\n        return strbuf.toString();\n    }\n\n}\n", "idx": 1798}
{"project": "cipher", "commit_id": "Snippet43424551_25524.java", "target": 0, "func": "package encrypt;\n\nimport java.security.Key;\nimport java.util.Scanner;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class PasswordEncrypt {\n\nString key = \"passwordencrypts\";\nCipher cipher;\nKey aesKey;\n\npublic PasswordEncrypt() {\n    try {\n        aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        cipher = Cipher.getInstance(\"AES\");\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n\npublic static void main(String[] args) {\n    PasswordEncrypt app = new PasswordEncrypt();\n    System.out.println(\"enter string\");\n    PasswordEncrypt encrypt = new PasswordEncrypt();\n    byte[] en = encrypt.encrypt(new Scanner(System.in).next());\n\n    System.out.println(en + \" encrypted\");\n    String de = encrypt.decrypt(en);\n    System.out.println(de + \"   decrypted\");\n\n}\n\nprivate String decrypt(byte[] en) {\n    String decrypted = \"\";\n    try {\n        cipher.init(Cipher.DECRYPT_MODE, aesKey);\n        decrypted = new String(cipher.doFinal(en));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return decrypted;\n}\n\nprivate byte[] encrypt(String text) {\n    byte[] en = null;\n    try {\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n        en = cipher.doFinal(text.getBytes());\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return en;\n}\n}\n", "idx": 1799}
{"project": "cipher", "commit_id": "Snippet30591269_12796.java", "target": 0, "func": "package com.example;\nimport java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\npublic class StrongAES \n{\n    public void run() \n    {\n        try \n        {\n            String text = \"Hello World\";\n            String key = \"Bar12345Bar12345\"; // 128 bit key\n            // Create key and cipher\n            Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            // encrypt the text\n            cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            byte[] encrypted = cipher.doFinal(text.getBytes());\n            System.err.println(new String(encrypted));\n            // decrypt the text\n            cipher.init(Cipher.DECRYPT_MODE, aesKey);\n            String decrypted = new String(cipher.doFinal(encrypted));\n            System.err.println(decrypted);\n        }\n        catch(Exception e) \n        {\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) \n    {\n        StrongAES app = new StrongAES();\n        app.run();\n    }\n}\n", "idx": 1800}
{"project": "cipher", "commit_id": "Snippet31560545_13702.java", "target": 0, "func": "private String DEFAULT_KEY = \"abcdwAYserXbzcSeqL/zPg==\";\nprivate String text = \"abc\";\nBase64 base64decoder = new Base64();\nbyte[] raw = base64decoder.decode(key);\n\nSecretKeySpec fSecretKeySpec = new SecretKeySpec(raw, \"AES\");\n\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, fSecretKeySpec);\nbyte[] encrypted = cipher.doFinal(text.getBytes());\n\nBase64 base64encoder = new Base64();\nresult = base64encoder.encodeToString(encrypted);\nSystem.out.println(\"result: \"+ result);\n", "idx": 1801}
{"project": "cipher", "commit_id": "Snippet19423426_2213.java", "target": 0, "func": "import javax.crypto.*;    \nimport java.security.*;  \npublic class Java {\n\nprivate static SecretKey key = null;         \n   private static Cipher cipher = null; \n\n   public static void main(String[] args) throws Exception\n   {\n\n      Security.addProvider(new com.sun.crypto.provider.SunJCE());\n\n      KeyGenerator keyGenerator =\n         KeyGenerator.getInstance(\"DESede\");\n      keyGenerator.init(168);\n      SecretKey secretKey = keyGenerator.generateKey();\n      cipher = Cipher.getInstance(\"DESede\");\n\n      String clearText = \"I am an Employee\";\n      byte[] clearTextBytes = clearText.getBytes(\"UTF8\");\n\n      cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n      byte[] cipherBytes = cipher.doFinal(clearTextBytes);\n      String cipherText = new String(cipherBytes, \"UTF8\");\n\n      cipher.init(Cipher.DECRYPT_MODE, secretKey);\n      byte[] decryptedBytes = cipher.doFinal(cipherBytes);\n      String decryptedText = new String(decryptedBytes, \"UTF8\");\n\n      System.out.println(\"Before encryption: \" + clearText);\n      System.out.println(\"After encryption: \" + cipherText);\n      System.out.println(\"After decryption: \" + decryptedText);\n   }\n}\n\n\n// Output\n\n/*\nBefore encryption: I am an Employee  \nAfter encryption: }?\uff7d?\uff7dj6?\uff7dm?\uff7dZyc?\uff7d?\uff7d*?\uff7d?\uff7dl#l?\uff7ddV  \nAfter decryption: I am an Employee  \n*/\n", "idx": 1802}
{"project": "cipher", "commit_id": "Snippet27900193_10031.java", "target": 0, "func": " public class Encrypt{\n\n\npublic static void main(String[] args) throws Exception {\n\n   String FileName = \"D:/ashok/normal.txt\";\n    String FileName1 = \"D:/ashok/encrypted.txt\";\n\n\n    KeyGenerator KeyGen = KeyGenerator.getInstance(\"AES\");\n    KeyGen.init(128);\n\n    SecretKey SecKey = KeyGen.generateKey();\n\n    Cipher AesCipher = Cipher.getInstance(\"AES\");\n\n\n\n    byte[] cipherText = Files.readAllBytes(Paths.get(FileName));\n    AesCipher.init(Cipher.ENCRYPT_MODE, SecKey);\n    byte[] byteCipherText = AesCipher.doFinal(cipherText);\n    Files.write(Paths.get(FileName1), byteCipherText);\n }\n", "idx": 1803}
{"project": "cipher", "commit_id": "Snippet30626964_12828.java", "target": 0, "func": "String passphrase = \"test\";\nKeySpec keySpec = new PBEKeySpec(passphrase.toCharArray());\nSecretKey key = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\").generateSecret(keySpec);\necipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n...\necipher.init(Cipher.ENCRYPT_MODE, ket, paramSpec);\n", "idx": 1804}
{"project": "cipher", "commit_id": "Snippet13613018_37140.java", "target": 0, "func": "44. public void onClick(View arg0) {\n45. \n46.   sp=this.getSharedPreferences(\"AccessApp\", MODE_WORLD_READABLE);\n47.   \n48.    \n49.    \n50.    \n51.   byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5 };\n52.    \n53.    \n54.   try {\n55.        String decryptedUser = decrypt(user, key);  \n56.         user = sp.getString(\"USERNAME_KEY\", decryptedUser);\n57.          \n58.   }\n59. catch (Exception e) {\n60.    // TODO Auto-generated catch block\n61.   e.printStackTrace();\n62.   }   \n63.   try {\n64.        String decryptedPass = decrypt(pass, key);  \n65.        pass = sp.getString(\"PASSWORD_KEY\", decryptedPass);\n66.         \n67.\n68.   } catch (Exception e) {\n69.     // TODO Auto-generated catch block\n70.    e.printStackTrace();\n71.   }\n72.   \n73.   if(lBttn.equals(arg0)){\n74.     \n75.      if((uname.getText().toString().equals(user))&& \n76.        (pword.getText().toString().equals(pass)))\n77.       \n78.            {\n79.          Toast.makeText(this, \"You are Logged In\", 20000).show();\n80.                 \n81.               Intent intent;\n82.                intent=new Intent(this,details.class);\n83.                startActivity(intent);\n84.              flag=1;\n85.            }\n\n\n\n\n135.         public static String decrypt(String encryptedText, byte[ ] key) throws Exception   {\n136.    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n137.    Cipher cipher = Cipher.getInstance(\"AES\");\n138.    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n139.    byte[] toDecrypt = Base64.decode(encryptedText);\n140.    byte[] encrypted = cipher.doFinal(toDecrypt);\n141.    return new String(encrypted);\n142.   }\n143.  }\n", "idx": 1805}
{"project": "cipher", "commit_id": "Snippet20796213_3386.java", "target": 0, "func": "Cipher AesCipher=Cipher.getInstance(\"AES\");\n", "idx": 1806}
{"project": "cipher", "commit_id": "Snippet39750298_21670.java", "target": 0, "func": "import java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AESHelper {\npublic static String encrypt(String seed, String cleartext)\n        throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted)\n        throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted)\n        throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\n\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length() / 2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2 * buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\n\nprivate final static String HEX = \"0123456789ABCDEF\";\n\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n}\n\n}\n", "idx": 1807}
{"project": "cipher", "commit_id": "Snippet16055100_39013.java", "target": 0, "func": "Cipher.getInstance(\"AES\");\n", "idx": 1808}
{"project": "cipher", "commit_id": "Snippet29937079_11995.java", "target": 0, "func": "public static byte[] decryptAES(SecretKey key, byte[] encrypted) {\n    try {\n\n        SecretKeySpec skeySpec = new SecretKeySpec(key.getEncoded(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return null;\n}\n", "idx": 1809}
{"project": "cipher", "commit_id": "Snippet19596002_2326.java", "target": 0, "func": "public class CryptoTranslator {\nprivate static SecretKey SEC_KEY;\n\n\n\n/**\n * @return the sEC_KEY\n */\npublic static SecretKey getSEC_KEY() {\n    return SEC_KEY;\n}\n\npublic static String getSEC_KEY_String(){\n    return Base64.encodeToString(SEC_KEY.getEncoded(), Base64.DEFAULT);\n}\n\n/**\n * @param sEC_KEY the sEC_KEY to set\n */\npublic static void setSEC_KEY(SecretKey sEC_KEY) {\n    SEC_KEY = sEC_KEY;\n}\n\npublic static void setSEC_KEY_STRING(String sEC_KEY){\n    byte[] key = Base64.decode(sEC_KEY, Base64.DEFAULT);\n    SEC_KEY = new SecretKeySpec(key, 0, key.length, \"AES\");\n}\n\npublic static void generateKey() throws NoSuchAlgorithmException {\n    // Generate a 256-bit key\n    final int outputKeyLength = 256;\n    SecureRandom secureRandom = new SecureRandom();\n    // Do *not* seed secureRandom! Automatically seeded from system entropy.\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n    keyGenerator.init(outputKeyLength, secureRandom);\n    SecretKey key = keyGenerator.generateKey();\n    SEC_KEY = key;\n}\n\nprivate static byte[] getRawKey() throws Exception {\n    if (SEC_KEY == null){\n        generateKey();\n    }\n    byte[] raw = SEC_KEY.getEncoded();\n    return raw;\n    }\n\n/**\n * \n * \n * @param clear clear text string\n * @param mode this should either be Cipher.ENCRYPT_MODE or Cipher.DECRYPT_MODE\n * @return\n * @throws Exception\n */\nprivate static String translate(String clear, int mode) throws Exception {\n    if(mode != Cipher.ENCRYPT_MODE && mode != Cipher.DECRYPT_MODE)\n        throw new IllegalArgumentException(\"Encryption invalid. Mode should be either Cipher.ENCRYPT_MODE or Cipher.DECRYPT_MODE\");\n    SecretKeySpec skeySpec = new SecretKeySpec(getRawKey(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(mode, skeySpec);\n            byte[] encrypted = cipher.doFinal(clear.getBytes());\n            return new String(encrypted);\n    }\n\npublic static String encrypt(String clear) throws Exception {\n    return translate(clear,Cipher.ENCRYPT_MODE);\n    }\npublic static String decrypt(String encrypted) throws Exception {\n    return translate(encrypted,Cipher.DECRYPT_MODE);\n    }\n\n}\n", "idx": 1810}
{"project": "cipher", "commit_id": "Snippet46576918_28705.java", "target": 0, "func": "public static KeyGenerator key_gen = null;\npublic static SecretKey sec_key = null;\npublic static byte[] raw = null;\nprivate static SecretKeySpec sec_key_spec = null;\nprivate static Cipher sec_cipher = null;\n\n//for DSA\nprivate static KeyPairGenerator keypairgen = null;\nprivate static KeyPair keypair = null;\nprivate static DSAPrivateKey private_key = null;\nprivate static DSAPublicKey public_key = null;\nprivate static Signature dsa_sig = null;\nprivate static SecureRandom secRan = null;\n\npublic static void main(String args[]){\n    FileInputStream in_file = null;\n    FileInputStream in_file2 = null;\n    FileOutputStream out_file = null;\n    byte[] sha_hash = null;\n    //byte[] hmac_hash = null;\n    byte[] aes_ciphertext = null;\n    int read_bytes = 0;\n\n    try{\n        //open files\n        in_file = new FileInputStream(args[0]);\n        out_file = new FileOutputStream(\"CipherText.txt\");\n        byte[] seed = args[1].getBytes();\n\n        //read file into a byte array\n        byte[] msg = new byte[in_file.available()];\n        read_bytes = in_file.read(msg);\n\n        //SHA-1 Hash\n        sha_hash = sha1_hash(msg);\n        byte[] concatenatedMSG = new byte[msg.length + sha_hash.length];\n\n        for (int i = 0; i < concatenatedMSG.length; i++)\n        {\n            if(i < msg.length)\n                concatenatedMSG[i] = msg[i];\n            else\n                concatenatedMSG[i] = sha_hash[i - msg.length];\n\n        }\n\n        //print out hash in hex\n        System.out.println(\"SHA-1 Hash: \" + toHexString(sha_hash));\n\n        //encrypt file with AES\n        //key setup - generate 128 bit key\n\n        SecureRandom rand = new SecureRandom();\n        rand.setSeed(seed);\n\n        key_gen = KeyGenerator.getInstance(\"AES\");\n        key_gen.init(128, rand);\n        sec_key = key_gen.generateKey();\n\n        //get key material in raw form\n        raw = sec_key.getEncoded();\n        sec_key_spec = new SecretKeySpec(raw, \"AES\");\n\n        //create the cipher object that uses AES as the algorithm\n        sec_cipher = Cipher.getInstance(\"AES\"); \n\n        //do AES encryption\n        aes_ciphertext = aes_encrypt(concatenatedMSG);\n        out_file.write(aes_ciphertext);\n        out_file.close();\n    }\n    catch(Exception e){\n        e.printStackTrace();\n    }\n    finally{\n\n        try{\n            if (in_file != null){\n                in_file.close();\n            }\n            if(out_file != null){\n                out_file.close();\n            }\n            if(in_file2 != null){\n                in_file2.close();\n            }\n        }catch(Exception e)\n        {\n            e.printStackTrace();\n        }\n\n    }\n}\n", "idx": 1811}
{"project": "cipher", "commit_id": "Snippet45085290_27212.java", "target": 0, "func": "public class EncryptUtil {\n    public static String getKey()\n    {\n        return \"somekeysomekey+)\"; //key length 16!Use this on nodejs\n    }\n\n    public static String encryptAES(String ID) throws Exception {\n\n        Key secretKeySpec = new SecretKeySpec(getKey().getBytes(), \"AES\"); \n\n\n        String transform = \"AES/ECB/ISO10126Padding\";\n        String output = \"\";\n\n        try {\n            javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(transform);\n            cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, secretKeySpec);\n            String originStr = ID;\n\n            byte[] input = originStr.getBytes(\"UTF8\");\n            byte[] output = cipher.doFinal(input);\n            sun.misc.BASE64Encoder encoder = new sun.misc.BASE64Encoder();\n            output = encoder.encode(output);\n        } catch (Exception e) {\n            System.out.println(\"ERROR: \" + e.getMessage());\n        }\n        return output;\n    }\n}\n\n//This is how to encrypt from above\n//String encryptText = (String) EncryptUtil.encryptAES(\"something\");\n//System.out.println(encryptText) ---> \"47gPeqm+0lvKb0VNXF29yQ==\";\n", "idx": 1812}
{"project": "cipher", "commit_id": "Snippet27385370_9571.java", "target": 0, "func": "import java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport java.util.Scanner;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Encrypt1\n{    \npublic static void main(String[] argv) {\n\n    try{\n\n        //KeyGenerator keygenerator = KeyGenerator.getInstance(\"AES\");\n\n        //SecretKey myAesKey = keygenerator.generateKey(key);\n\n        Scanner input = new Scanner(System.in);\n\n        System.out.println(\"Please enter a message you'd like to encrypt\");\n        String plaintext = input.nextLine();\n\n        System.out.println(\"Please enter a 16 digit password: \");\n        String pass = input.nextLine();\n\n        byte[] key = pass.getBytes();\n        SecretKeySpec aesKey = new SecretKeySpec(key, \"AES\");\n\n        Cipher aesCipher;\n\n        // Create the cipher \n        aesCipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n        // Initialize the cipher for encryption\n        aesCipher.init(Cipher.ENCRYPT_MODE, aesKey);\n\n        //sensitive information\n        byte[] text = plaintext.getBytes();\n\n        System.out.println(\"Text [Byte Format] : \" + text);\n        System.out.println(\"Text : \" + new String(text));\n\n        // Encrypt the text\n        byte[] textEncrypted = aesCipher.doFinal(text);\n\n        System.out.println(\"Text Encryted : \" + textEncrypted);\n\n        // Initialize the same cipher for decryption\n        aesCipher.init(Cipher.DECRYPT_MODE, aesKey);\n\n        // Decrypt the text\n        byte[] textDecrypted = aesCipher.doFinal(textEncrypted);\n\n        System.out.println(\"Text Decryted : \" + new String(textDecrypted));\n\n    }catch(NoSuchAlgorithmException e){\n        e.printStackTrace();\n    }catch(NoSuchPaddingException e){\n        e.printStackTrace();\n    }catch(InvalidKeyException e){\n        e.printStackTrace();\n    }catch(IllegalBlockSizeException e){\n        e.printStackTrace();\n    }catch(BadPaddingException e){\n        e.printStackTrace();\n    } \n\n}\n}\n", "idx": 1813}
{"project": "cipher", "commit_id": "Snippet38814051_20731.java", "target": 0, "func": "private static final String seed = \"This is my secret\";\n\npublic static String encrypt(String cleartext) {\n   try {\n       byte[] rawKey = getRawKey(seed.getBytes());\n       byte[] result = encrypt(rawKey, cleartext.getBytes());\n       return toHex(result);\n   }catch(Exception e){\n       e.printStackTrace();\n   }\n    return null;\n}\n\npublic static String decrypt(String encrypted){\n   try {\n       byte[] rawKey = getRawKey(seed.getBytes());\n       byte[] enc = toByte(encrypted);\n       byte[] result = decrypt(rawKey, enc);\n       return new String(result);\n   }catch(Exception e){\n       e.printStackTrace();\n   }\n    return null;\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2*buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\n\nprivate final static String HEX = \"0123456789ABCDEF\";\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n}\n", "idx": 1814}
{"project": "cipher", "commit_id": "Snippet40869756_22748.java", "target": 0, "func": "public class UUDES {\n\n    public static void main (String[] args) throws Exception\n    {                                   \n        String password = \"xxxxxx\";\n        String pathToUUEencodedEncryptedFile = \"C:\\DES\\path-to-decoded-and-encrypted-file\";\n\n        byte[] secretKey = passwordToKey(password);\n        byte[] iv = new byte[8];        \n        byte[] uuEncodedFile = Files.readAllBytes(Paths.get(pathToUUEencodedEncryptedFile));\n\n        SecretKey key = new SecretKeySpec(secretKey, \"DES\");\n\n        Cipher decryptor = Cipher.getInstance(\"DES/CBC/NoPadding\");\n        decryptor.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));          \n\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        InputStream in = null;      \n        try {\n            in = MimeUtility.decode(new ByteArrayInputStream(uuEncodedFile), \"uuencode\");\n            byte[] buf = new byte[1024];\n            int length;\n            while (true) {\n                length = in.read(buf);\n                if (length == -1) {\n                    break;\n                }\n                bout.write(buf, 0, length);\n            }\n\n            byte[] bytesDecrypted = decryptor.doFinal(bout.toByteArray());\n\n            ByteArrayInputStream bais = new ByteArrayInputStream(bytesDecrypted);\n            GZIPInputStream gzis = new GZIPInputStream(bais);\n            InputStreamReader reader = new InputStreamReader(gzis);\n            BufferedReader buffer = new BufferedReader(reader);\n\n            String readed;\n            while ((readed = buffer.readLine()) != null) {\n                System.out.println(readed);\n            }                              \n        }\n        finally {\n            if (in != null) {\n                try {\n                    in.close();\n                }\n                catch (IOException e) {\n                    System.out.println(e.getMessage());\n                }\n            }\n        }                                   \n    }\n\n    static SecretKey generateSecretKey(byte[] key) throws Exception {\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"DES\");\n        KeySpec keySpec = new DESKeySpec(key);\n        SecretKey secretKey = factory.generateSecret(keySpec);\n        return secretKey;\n    }\n\n    static byte[] passwordToKey(String password) throws Exception\n    {\n        if (password == null)\n            throw new IllegalArgumentException(\"password\");\n        if (password == \"\")\n            throw new IllegalArgumentException(\"password\");\n\n        byte[] key = new byte[8];\n\n        for (int i = 0; i < password.length(); i++)\n        {\n            int c = (int)password.charAt(i);\n            if ((i % 16) < 8)\n            {\n                key[i % 8] ^= (byte)(c << 1);\n            }\n            else\n            {\n                // reverse bits e.g. 11010010 -> 01001011\n                c = (((c << 4) & 0xf0) | ((c >> 4) & 0x0f));\n                c = (((c << 2) & 0xcc) | ((c >> 2) & 0x33));\n                c = (((c << 1) & 0xaa) | ((c >> 1) & 0x55));\n                key[7 - (i % 8)] ^= (byte)c;\n            }\n        }\n\n        addOddParity(key);\n\n        byte[] target = new byte[8];\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );\n        outputStream.write(password.getBytes(\"US-ASCII\"));\n        outputStream.write(new byte[8]);\n        byte[] temp = outputStream.toByteArray();\n        outputStream = new ByteArrayOutputStream( );\n        for (int i = 0; i < (password.length() + (8 - (password.length() % 8)) % 8); ++i) {\n            outputStream.write(temp[i]);\n        }\n        byte[] passwordBuffer = outputStream.toByteArray(); \n\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/NoPadding\");\n        byte[] iv = key;\n\n        IvParameterSpec ivspec = new IvParameterSpec(iv);\n        cipher.init(Cipher.ENCRYPT_MODE, generateSecretKey(key), ivspec);\n        for (int x = 0; x < passwordBuffer.length / 8; ++x)\n        {\n            cipher.update(passwordBuffer, 8 * x, 8, target, 0);\n        }\n\n        addOddParity(target);\n\n        return target;\n    }\n\n    static void addOddParity(byte[] buffer)\n    {\n        for (int i = 0; i < buffer.length; ++i)\n        {\n            buffer[i] = _oddParityTable[buffer[i] & 0xFF];\n        }\n    }\n\n    static byte[] _oddParityTable = {\n            (byte)1,(byte)1,(byte)2,(byte)2,(byte)4,(byte)4,(byte)7,(byte)7,(byte)8,(byte)8,(byte)11,(byte)11,(byte)13,(byte)13,(byte)14,(byte)14,\n            (byte)16,(byte)16,(byte)19,(byte)19,(byte)21,(byte)21,(byte)22,(byte)22,(byte)25,(byte)25,(byte)26,(byte)26,(byte)28,(byte)28,(byte)31,(byte)31,\n           (byte)32,(byte)32,(byte)35,(byte)35,(byte)37,(byte)37,(byte)38,(byte)38,(byte)41,(byte)41,(byte)42,(byte)42,(byte)44,(byte)44,(byte)47,(byte)47,\n           (byte)49,(byte)49,(byte)50,(byte)50,(byte)52,(byte)52,(byte)55,(byte)55,(byte)56,(byte)56,(byte)59,(byte)59,(byte)61,(byte)61,(byte)62,(byte)62,\n           (byte)64,(byte)64,(byte)67,(byte)67,(byte)69,(byte)69,(byte)70,(byte)70,(byte)73,(byte)73,(byte)74,(byte)74,(byte)76,(byte)76,(byte)79,(byte)79,\n           (byte)81,(byte)81,(byte)82,(byte)82,(byte)84,(byte)84,(byte)87,(byte)87,(byte)88,(byte)88,(byte)91,(byte)91,(byte)93,(byte)93,(byte)94,(byte)94,\n           (byte)97,(byte)(byte)97,(byte)(byte)98,(byte)(byte)98,(byte)100,(byte)100,(byte)103,(byte)103,(byte)104,(byte)104,(byte)107,(byte)107,(byte)109,(byte)109,(byte)110,(byte)110,\n           (byte)112,(byte)112,(byte)115,(byte)115,(byte)117,(byte)117,(byte)118,(byte)118,(byte)121,(byte)121,(byte)122,(byte)122,(byte)124,(byte)124,(byte)127,(byte)127,\n           (byte)128,(byte)128,(byte)131,(byte)131,(byte)133,(byte)133,(byte)134,(byte)134,(byte)137,(byte)137,(byte)138,(byte)138,(byte)140,(byte)140,(byte)143,(byte)143,\n           (byte)145,(byte)145,(byte)146,(byte)146,(byte)148,(byte)148,(byte)151,(byte)151,(byte)152,(byte)152,(byte)155,(byte)155,(byte)157,(byte)157,(byte)158,(byte)158,\n           (byte)161,(byte)161,(byte)162,(byte)162,(byte)164,(byte)164,(byte)167,(byte)167,(byte)168,(byte)168,(byte)171,(byte)171,(byte)173,(byte)173,(byte)174,(byte)174,\n           (byte)176,(byte)176,(byte)179,(byte)179,(byte)181,(byte)181,(byte)182,(byte)182,(byte)185,(byte)185,(byte)186,(byte)186,(byte)188,(byte)188,(byte)191,(byte)191,\n           (byte)193,(byte)193,(byte)194,(byte)194,(byte)196,(byte)196,(byte)199,(byte)199,(byte)200,(byte)200,(byte)203,(byte)203,(byte)205,(byte)205,(byte)206,(byte)206,\n           (byte)208,(byte)208,(byte)211,(byte)211,(byte)213,(byte)213,(byte)214,(byte)214,(byte)217,(byte)217,(byte)218,(byte)218,(byte)220,(byte)220,(byte)223,(byte)223,\n           (byte)224,(byte)224,(byte)227,(byte)227,(byte)229,(byte)229,(byte)230,(byte)230,(byte)233,(byte)233,(byte)234,(byte)234,(byte)236,(byte)236,(byte)239,(byte)239,\n           (byte)241,(byte)241,(byte)242,(byte)242,(byte)244,(byte)244,(byte)247,(byte)247,(byte)248,(byte)248,(byte)251,(byte)251,(byte)253,(byte)253,(byte)254,(byte)254};    \n}\n", "idx": 1815}
{"project": "cipher", "commit_id": "Snippet22035187_4449.java", "target": 0, "func": "private static String decrypt_data(String encData)\n        throws NoSuchAlgorithmException, NoSuchPaddingException,\n        InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    String key = \"bad8deadcafef00d\";\n    SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n    System.out.println(\"Base64 decoded: \"\n            + Base64.decode(encData.getBytes()).length);\n    byte[] original = cipher\n            .doFinal(Base64.decode(encData.getBytes()));\n    return new String(original).trim();\n}\n\nprivate static String encrypt_data(String data)\n        throws Exception {\n    String key = \"bad8deadcafef00d\";\n    SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n    System.out.println(\"Base64 encoded: \"\n            + Base64.encode(data.getBytes()).length);\n\n    byte[] original = Base64.encode(cipher.doFinal(data.getBytes()));\n    return new String(original);\n}\n", "idx": 1816}
{"project": "cipher", "commit_id": "Snippet41248700_23210.java", "target": 0, "func": "// function in Java that I need\n// javax.crypto.Cipher.getInstance(\"Blowfish/CBC/NoPadding\").doFinal(\"spamshog\")\n\n\nvar iv_vector = \"2278dc9wf_178703\";\nvar txtToEncrypt = \"spamshog\";\nvar bf = new Blowfish(\"spamshog\", \"cbc\");\n\nvar encrypted = bf.encrypt(txtToEncrypt, iv_vector);\n\nconsole.log(bf.base64Encode(encrypted));\n\nActual output: /z9/n0FzBJQ=\n What I need: /z9/n0FzBJRGS6nPXso5TQ==\n", "idx": 1817}
{"project": "cipher", "commit_id": "Snippet12591391_36361.java", "target": 0, "func": "     import java.io.*;\n     import java.util.*;\n     import javax.crypto.*;\n     import javax.crypto.spec.*;\n\n     import java.security.Provider;\n     import java.security.Security;\n     public class Test\n     {\n       public static byte[] raw =null;\n       public static SecretKeySpec skeySpec;\n       public static Cipher cipher;\n       public static void main(String ags[]) throws Exception\n       {\n           byte[] key={1,2,3,4,5,6,7};\n           skeySpec = new SecretKeySpec(key, \"Blowfish\");\n           System.out.println(\"KEY : \"+bytesToString(skeySpec.getEncoded()));\n                   String cipherInstName = \"Blowfish/ECB/PKCS5Padding\";\n           cipher = Cipher.getInstance(cipherInstName);\n           cipher.init(Cipher.ENCRYPT_MODE,skeySpec);\n           byte[] encrypted = cipher.doFinal((\"asdfgh\").getBytes());        \n           System.out.println(\"PLAIN TEXT : \"+(\"asdfgh\").getBytes());\n           System.out.println(\"ENCRYPTED TEXT : \"+bytesToString(encrypted));             \n       }\n\n           private static String bytesToString(byte [] value)\n           {\n                   StringBuffer retVal = new StringBuffer();\n                   for(int i=0; i<value.length; i++)\n                   {\n                       retVal.append(value[i]+\":\");\n                   }\n                   int inx = retVal.toString().lastIndexOf(\":\");\n                   retVal= new StringBuffer(retVal.toString().substring(0,inx));\n                   return retVal.toString();\n           }\n     }\n", "idx": 1818}
{"project": "cipher", "commit_id": "Snippet33818911_15896.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.NoSuchPaddingException;\nimport premierleague.model.FootballClub;\nimport premierleague.model.Match;\n\n/**\n *\n * @author Akila\n */\npublic class Serializing implements Serializable{\n\n    private FileInputStream fileIn;\n    private FileOutputStream fileOut;\n    private ObjectInputStream in;\n    private ObjectOutputStream out;\n\n    public ArrayList<FootballClub> FootBallInputStream() throws FileNotFoundException, IOException, ClassNotFoundException, NoSuchAlgorithmException, NoSuchPaddingException {\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        File file = new File(\"FootballClub.ser\");\n        fileIn = new FileInputStream(file);\n        CipherInputStream CipherIn = new CipherInputStream(in, cipher);\n        in = new ObjectInputStream(CipherIn);\n        ArrayList<FootballClub> e = (ArrayList<FootballClub>) in.readObject();\n        in.close();\n        fileIn.close();\n\n        return e;\n\n    }\n\n    public void FootBallOutputStream(ArrayList<FootballClub> e) throws FileNotFoundException, IOException, NoSuchAlgorithmException, NoSuchPaddingException {\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        File file = new File(\"FootballClub.ser\");\n        fileOut = new FileOutputStream(file);\n        CipherOutputStream cipherOut = new CipherOutputStream(out,cipher);\n        out = new ObjectOutputStream(cipherOut);\n        out.writeObject(e);\n        out.close();\n        fileOut.close();\n    }\n\n\n}\n", "idx": 1819}
{"project": "cipher", "commit_id": "Snippet9461115_33944.java", "target": 0, "func": "EncrypterDecrypter(SecretKey key)\n{\n    try {\n        ecipher = Cipher.getInstance(\"DES\");\n        dcipher = Cipher.getInstance(\"DES\");\n        ecipher.init(Cipher.ENCRYPT_MODE, key);\n        dcipher.init(Cipher.DECRYPT_MODE, key);\n\n    } catch (javax.crypto.NoSuchPaddingException e) {\n    } catch (java.security.NoSuchAlgorithmException e) {\n    } catch (java.security.InvalidKeyException e) {\n    }\n}   \n", "idx": 1820}
{"project": "cipher", "commit_id": "Snippet42010078_23978.java", "target": 0, "func": "    public String decode(AssetManager assets) throws GeneralSecurityException, UnsupportedEncodingException {\n    String encryptedText = null;\n    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n    SecretKeySpec key = new SecretKeySpec(\"testPass\".getBytes(), \"Blowfish\");\n    try {\n        byte[] encryptedBytes = readFile(\"RequestManager/RM.dat\", assets).getBytes(\"UTF-8\");\n        Cipher cipher = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decrypted = cipher.doFinal(org.bouncycastle.util.encoders.Base64.decode(encryptedBytes));\n        return new String(decrypted);\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null; }\n}\n", "idx": 1821}
{"project": "cipher", "commit_id": "Snippet43076644_25183.java", "target": 0, "func": "public String decodeInputString(String inputString) throws NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException {\n        byte[] salt = \"MyKey\".getBytes();\n        SecretKey secretKey = new SecretKeySpec(salt, 0, 16, \"AES\");\n        byte[] encryptedTextByte = Base64.decode(inputString);\n        cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        byte[] decryptedByte = cipher.doFinal(encryptedTextByte);\n        String decryptedText = new String(decryptedByte);\n        return decryptedText;\n\n}\n", "idx": 1822}
{"project": "cipher", "commit_id": "Snippet11687169_35706.java", "target": 0, "func": "    public static byte[] key_reg = new byte[] {1, 2, 3, 4, 5,6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7};//... secret sequence of bytes\n\n    public static String getDecryptedString(byte[] data,int i){\n    String str = null;\n    try {\n        Cipher ci = Cipher.getInstance(\"AES/ECB/PKCS5Padding\",\"SunJCE\");\n        SecretKeySpec sk =   new SecretKeySpec(key_reg, \"AES\");\n        ci.init(Cipher.DECRYPT_MODE, sk);\n        byte[] dataD = ci.doFinal(data);\n        str = new String(dataD,\"UTF-8\");\n        return str;\n    } catch (Throwable e) {\n        logger.error(\"Error in getRequestString : \"+e);\n        e.printStackTrace();\n    }\n    return str;\n}\n", "idx": 1823}
{"project": "cipher", "commit_id": "Snippet31693776_13798.java", "target": 0, "func": "    private static String algorithm = \"RC4\";\n\n            public static byte[] encryptRC4(String toEncrypt, String key) throws Exception {\n              // create a binary key from the argument key (seed)\n              SecureRandom sr = new SecureRandom(key.getBytes(\"ISO-8859-1\"));\n              KeyGenerator kg = KeyGenerator.getInstance(algorithm);\n              kg.init(sr);\n              SecretKey sk = kg.generateKey();\n\n              // create an instance of cipher\n              Cipher cipher = Cipher.getInstance(algorithm);\n\n              // initialize the \n\ncipher with the key\n          cipher.init(Cipher.ENCRYPT_MODE, sk);\n\n          // enctypt!\n          byte[] encrypted = cipher.doFinal(toEncrypt.getBytes(\"ISO-8859-1\"));\n\n          return encrypted;\n        }\n\n        public static String decryptRC4(byte[] toDecrypt, String key, int length) throws Exception {\n          // create a binary key from the argument key (seed)\n          SecureRandom sr = new SecureRandom(key.getBytes(\"ISO-8859-1\"));\n          KeyGenerator kg = KeyGenerator.getInstance(algorithm);\n          kg.init(sr);\n          SecretKey sk = kg.generateKey();\n\n          // do the decryption with that key\n          Cipher cipher = Cipher.getInstance(algorithm);\n          cipher.init(Cipher.DECRYPT_MODE, sk);\n          byte[] decrypted = cipher.doFinal(toDecrypt, 0, length);\n\n\n          return new String(decrypted, \"ISO-8859-1\");\n       }\n", "idx": 1824}
{"project": "cipher", "commit_id": "Snippet47390097_29354.java", "target": 0, "func": "    public static String desEncrypt(String text) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException \n{\n    String keyString = AESEncryption.convertToUTF8(\"8DJE7K01U8B51807B3E17D21\");\n\n    byte[] keyValue = Base64.getEncoder().encode(keyString.getBytes(StandardCharsets.UTF_8));\n    Key key = new SecretKeySpec(keyValue, \"AES\");\n    Cipher c1 = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n    c1.init(Cipher.DECRYPT_MODE, key);\n    byte[]   encodedText = Base64.getDecoder().decode(text.getBytes(StandardCharsets.UTF_8));\n    byte[] encVal = c1.doFinal(encodedText);\n\n    System.out.println(new String(encodedText));\n    return new String(encVal,StandardCharsets.UTF_8);\n\n}\n", "idx": 1825}
{"project": "cipher", "commit_id": "Snippet10275913_34632.java", "target": 0, "func": "     public byte[] encript(byte[] dataToEncrypt, byte[] key)\n            throws NoSuchAlgorithmException, NoSuchPaddingException,\n            InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    //I'm using AES encription\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec k = new SecretKeySpec(key, \"AES\");\n    c.init(Cipher.ENCRYPT_MODE, k);\n    return c.doFinal(dataToEncrypt);\n    }\n\n    public byte[] decript(byte[] encryptedData, byte[] key)\n            throws NoSuchAlgorithmException, NoSuchPaddingException,\n            InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec k = new SecretKeySpec(key, \"AES\");\n    c.init(Cipher.DECRYPT_MODE, k);\n    return c.doFinal(encryptedData);\n    }\n", "idx": 1826}
{"project": "cipher", "commit_id": "Snippet8757101_33472.java", "target": 0, "func": "SecretKeySpec skeySpec = new SecretKeySpec(pad16(pass), \"AES\");\nCipher c = Cipher.getInstance(\"AES\");\nc.init(Cipher.ENCRYPT_MODE, skeySpec);\nbyte[] out = c.doFinal( input )\n", "idx": 1827}
{"project": "cipher", "commit_id": "Snippet19286076_2110.java", "target": 0, "func": "public static byte[] decryptAES(String message) throws Exception \n{  \nString secretKey = \"JohnIsAwesome!1!\";\nSecretKeySpec key = new SecretKeySpec(secretKey.getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, key);\nreturn cipher.doFinal(message.getBytes());  \n}\n", "idx": 1828}
{"project": "cipher", "commit_id": "Snippet5244950_31517.java", "target": 0, "func": "          // create a key generator based upon the Blowfish cipher\n    KeyGenerator keygenerator = KeyGenerator.getInstance(\"Blowfish\");\n\n    // create a key\n    SecretKey secretkey = keygenerator.generateKey();\n\n    // create a cipher based upon Blowfish\n    Cipher cipher = Cipher.getInstance(\"Blowfish\");\n\n    // initialise cipher to with secret key\n    cipher.init(Cipher.ENCRYPT_MODE, secretkey);\n\n    // get the text to encrypt\n    String inputText = \"MyTextToEncrypt\";\n\n    // encrypt message\n    byte[] encrypted = cipher.doFinal(inputText.getBytes());\n", "idx": 1829}
{"project": "cipher", "commit_id": "Snippet12778174_36447.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\n\npublic class DesRun {\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n        String theKey = \"01234567\";\n        String message = \"abcdefghijklmnop\";\n        Cipher ecipher, dcipher;\n         try {\n            // generate secret key using DES algorithm\n             SecretKeySpec key = new SecretKeySpec(theKey.getBytes(\"UTF-8\"), \"DES\");\n\n                 ecipher = Cipher.getInstance(\"DES\");\n                 dcipher = Cipher.getInstance(\"DES\");\n\n                 // initialize the ciphers with the given key\n                 ecipher.init(Cipher.ENCRYPT_MODE, key);\n                 dcipher.init(Cipher.DECRYPT_MODE, key);\n\n                 byte[] encrypted = ecipher.doFinal(message.getBytes(\"UTF-8\"));\n                 System.out.println(DatatypeConverter.printHexBinary(encrypted));\n                 String decrypted = new String(dcipher.doFinal(encrypted), \"UTF-8\");\n\n                 System.out.println(\"Decrypted: \" + decrypted);\n\n             }\n             catch (Exception e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n\n    }\n}\n", "idx": 1830}
{"project": "cipher", "commit_id": "Snippet41673845_23616.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"AES\");", "idx": 1831}
{"project": "cipher", "commit_id": "Snippet2568841_30330.java", "target": 0, "func": "public static SecretKey getSecretKey(char[] password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException{\n    SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    // NOTE: last argument is the key length, and it is 256\n    KeySpec spec = new PBEKeySpec(password, salt, 1024, 256);\n    SecretKey tmp = factory.generateSecret(spec);\n    SecretKey secret = new SecretKeySpec(tmp.getEncoded(), \"AES\");\n    return(secret);\n}\n\n\npublic static byte[] encrypt(char[] password, byte[] salt, String text) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidParameterSpecException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException{\n    SecretKey secret = getSecretKey(password, salt);\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\n    // NOTE: This is where the Exception is being thrown\n    cipher.init(Cipher.ENCRYPT_MODE, secret);\n    byte[] ciphertext = cipher.doFinal(text.getBytes(\"UTF-8\"));\n    return(ciphertext);\n}\n", "idx": 1832}
{"project": "cipher", "commit_id": "Snippet35563149_17454.java", "target": 0, "func": "public static String encryptString(String string, String key){\n    try {\n        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(string.getBytes());\n        return Base64.encodeToString(encrypted, Base64.URL_SAFE);\n    } catch(Exception e){\n        return e.getMessage();\n    }\n}\n\nprivate static String decryptString(String string, String key){\n    try {\n        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(string.getBytes());\n        return Base64.decode(decrypted, Base64.DEFAULT ).toString();\n\n    } catch(Exception e){\n        return null;\n    }\n}\n", "idx": 1833}
{"project": "cipher", "commit_id": "Snippet26831860_8989.java", "target": 0, "func": "import java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.PrivateKey;\nimport java.security.PublicKey;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyAgreement;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n/**\n * Diffie-Hellman module for demonstrating KeyAgreement Algorithm\n */\npublic class DiffieHellmanModule {\n\n    private static final int AES_KEY_SIZE = 128;\n\n    public static void main(String[] args) {\n        // Generates keyPairs for Alice and Bob\n        KeyPair kp1 = DiffieHellmanModule.genDHKeyPair();\n        KeyPair kp2 = DiffieHellmanModule.genDHKeyPair();\n        // Gets the public key of Alice(g^X mod p) and Bob (g^Y mod p)\n        PublicKey pbk1 = kp1.getPublic();\n        PublicKey pbk2 = kp2.getPublic();\n        // Gets the private key of Alice X and Bob Y\n        PrivateKey prk1 = kp1.getPrivate();\n        PrivateKey prk2 = kp2.getPrivate();\n        try {\n            // Computes secret keys for Alice (g^Y mod p)^X mod p == Bob (g^X\n            // mod p)^Y mod p\n            SecretKey key1 = DiffieHellmanModule.agreeSecretKey(prk1, pbk2,\n                    true);\n            SecretKey key2 = DiffieHellmanModule.agreeSecretKey(prk2, pbk1,\n                    true);\n            // Instantiate the Cipher of algorithm \"DES\"\n            Cipher c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            // Init the cipher with Alice's key1\n            c.init(Cipher.ENCRYPT_MODE, key1);\n            // Compute the cipher text = E(key,plainText)\n            byte[] ciphertext = c.doFinal(\"Stand and unfold yourself\"\n                    .getBytes());\n            // prints ciphertext\n            System.out.println(\"Encrypted: \" + new String(ciphertext, \"utf-8\"));\n            // inits the encryptionMode\n            c.init(Cipher.DECRYPT_MODE, key2);\n            // Decrypts and print\n            System.out.println(\"Decrypted: \"\n                    + new String(c.doFinal(ciphertext), \"utf-8\"));\n            System.out.println(\"Done\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static KeyPairGenerator kpg;\n\n    static {\n        try {\n            // === Generates and inits a KeyPairGenerator ===\n\n            // changed this to use default parameters, generating your\n            // own takes a lot of time and should be avoided\n            // use ECDH or a newer Java (8) to support key generation with\n            // higher strength\n            kpg = KeyPairGenerator.getInstance(\"DH\");\n            kpg.initialize(1024);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static SecretKey agreeSecretKey(PrivateKey prk_self,\n            PublicKey pbk_peer, boolean lastPhase) throws Exception {\n        // instantiates and inits a KeyAgreement\n        KeyAgreement ka = KeyAgreement.getInstance(\"DH\");\n        ka.init(prk_self);\n        // Computes the KeyAgreement\n        ka.doPhase(pbk_peer, lastPhase);\n        // Generates the shared secret\n        byte[] secret = ka.generateSecret();\n\n        // === Generates an AES key ===\n\n        // you should really use a Key Derivation Function instead, but this is\n        // rather safe\n\n        MessageDigest sha256 = MessageDigest.getInstance(\"SHA-256\"); \n        byte[] bkey = Arrays.copyOf(\n                sha256.digest(secret), AES_KEY_SIZE / Byte.SIZE);\n\n        SecretKey desSpec = new SecretKeySpec(bkey, \"AES\");\n        return desSpec;\n    }\n\n    public static KeyPair genDHKeyPair() {\n        return kpg.genKeyPair();\n    }\n}\n", "idx": 1834}
{"project": "cipher", "commit_id": "Snippet22034269_4443.java", "target": 0, "func": "private String decrypt_data(String encData) \n                throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException\n    {\n        String key = \"bad8deadcafef00d\";\n        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        System.out.println(\"Base64 decoded: \"+Base64.decode(encData.getBytes()).length);\n        byte[] original = cipher.doFinal(Base64.decode(encData.getBytes()));\n        return new String(original).trim();     \n    }\n\n    private String encrypt_data(String data) \n                throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException\n    {\n        String key = \"bad8deadcafef00d\";\n        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        System.out.println(\"Base64 encoded: \"+ Base64.encode(data.getBytes()).length);\n\n        byte[] original = cipher.doFinal(Base64.encode(data.getBytes()));\n        return new String(original);\n    }\n", "idx": 1835}
{"project": "cipher", "commit_id": "Snippet34663554_16647.java", "target": 0, "func": "/** encrypt cipher */\nprivate static final Cipher ENCRYPT_CIPHER = generateCipher(Cipher.ENCRYPT_MODE);\n\nprivate static String ENCRYPT_KEY = \"key\";\n\n/**\n * @param val\n * @return encrypted value\n * @throws Exception\n */\npublic String encrypt(final String val) throws Exception {\n    return new String(Base64.encodeBase64(ENCRYPT_CIPHER.doFinal(val.getBytes()), true)).toString();\n}\n\n/**\n * @param encrypt\n * @return cipher\n */\nprotected static Cipher generateCipher(final int encrypt) {\n    try {\n        final Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(encrypt, SecretKeyFactory.getInstance(\"AES\").generateSecret(new IBMAESKeySpec(Base64.decodeBase64(ENCRYPT_KEY.getBytes()))));\n        return cipher;\n    } catch (final Exception e) {\n        return null;\n    }\n}\n", "idx": 1836}
{"project": "cipher", "commit_id": "Snippet27181971_9321.java", "target": 0, "func": "    public static byte[] encrypt(byte[] plaintext, String key) throws Exception {\n        char[] password = key.toCharArray();\n        byte[] salt = \"12345678\".getBytes();\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n        KeySpec spec = new PBEKeySpec(password, salt, 65536, 128);\n        SecretKey tmp = factory.generateSecret(spec);\n        SecretKey secret = new SecretKeySpec(tmp.getEncoded(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, secret);\n        byte[] ciphertext = cipher.doFinal(plaintext);  \n        return ciphertext;\n    }\n\n    public static byte[] decrypt(byte[] ciphertext, String key) throws Exception {\n        char[] password = key.toCharArray();\n        byte[] salt = \"12345678\".getBytes();\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n        KeySpec spec = new PBEKeySpec(password, salt, 65536, 128);\n        SecretKey tmp = factory.generateSecret(spec);\n        SecretKey secret = new SecretKeySpec(tmp.getEncoded(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, secret);\n        byte[] plaintext = cipher.doFinal(ciphertext);  \n        return plaintext;\n    }\n", "idx": 1837}
{"project": "cipher", "commit_id": "Snippet35106909_17045.java", "target": 0, "func": "public class AES_Cipher {\n\n    private String keyString;\n    private byte[] byteKey;\n    private SecretKey key;\n    Cipher c;\n\n    public AES_Cipher(String keyString){\n        this.keyString = keyString.toString();\n    }\n\n    public void init() throws InitializtionFailedException{\n        try{\n            c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            byteKey = keyString.getBytes(\"UTF-8\");\n            MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n            byteKey = sha.digest(byteKey);\n            byteKey = Arrays.copyOf(byteKey, 16);\n            key = new SecretKeySpec(byteKey, \"AES\");\n\n        }catch(NoSuchAlgorithmException e){\n            throw new InitializtionFailedException();\n        }\n}\n", "idx": 1838}
{"project": "cipher", "commit_id": "Snippet45502635_27557.java", "target": 0, "func": "package encryption;\n\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport javax.crypto.*;\n\npublic class CipherServer\n{\n    public static void main(String[] args) throws Exception \n    {\n        int port = 7999;\n        ServerSocket server = new ServerSocket(port);\n        Socket s = server.accept();\n\n        // -Read the key from the file generated by the client.\n        ObjectInputStream in = new ObjectInputStream(new FileInputStream(\"KeyFile.xx\"));\n        Key key = (Key)in.readObject();\n        System.out.println(key.getClass().getName());\n        in.close();\n\n        // -Use the key to decrypt the incoming message from socket s.      \n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        CipherInputStream cipherIn = new CipherInputStream(s.getInputStream(), cipher);\n        byte[] stringInBytes = new byte[44];\n        cipherIn.read(stringInBytes);\n        String string = new String(stringInBytes);\n\n        // -Print out the decrypt String to see if it matches the orignal message.\n        System.out.println(string);\n    }\n}\n", "idx": 1839}
{"project": "cipher", "commit_id": "Snippet11090193_35297.java", "target": 0, "func": "PBEKeySpec pbeKeySpec;\nPBEParameterSpec pbeParamSpec;\nSecretKeyFactory keyFac;\n\n// Salt\nbyte[] salt = {\n    (byte)0xc7, (byte)0x73, (byte)0x21, (byte)0x8c,\n    (byte)0x7e, (byte)0xc8, (byte)0xee, (byte)0x99\n};\n\n// Iteration count\nint count = 20;\n\n// Create PBE parameter set\npbeParamSpec = new PBEParameterSpec(salt, count);\n\n// Prompt user for encryption password.\n// Collect user password as char array (using the\n// \"readPasswd\" method from above), and convert\n// it into a SecretKey object, using a PBE key\n// factory.\nSystem.out.print(\"Enter encryption password:  \");\nSystem.out.flush();\npbeKeySpec = new PBEKeySpec(readPasswd(System.in));\nkeyFac = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\nSecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n\n// Create PBE Cipher\nCipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n\n// Initialize PBE Cipher with key and parameters\npbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n\n// Our cleartext\nbyte[] cleartext = \"This is another example\".getBytes();\n\n// Encrypt the cleartext\nbyte[] ciphertext = pbeCipher.doFinal(cleartext);\n", "idx": 1840}
{"project": "cipher", "commit_id": "Snippet11326716_35469.java", "target": 0, "func": "/**\n *\n * @author MUDASSIR\n */\n\nimport java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\n\npublic class AESencrp {\n\n     private static final String ALGO = \"AES\";\n//    private static final byte[] keyValue = \n//        new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't',\n//'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\npublic static String encrypt(String Data, byte[] keyValue) throws Exception {\n        Key key = generateKey(keyValue);\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encVal = c.doFinal(Data.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encVal);\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedData, byte[] keyValue) throws Exception {\n        Key key = generateKey(keyValue);\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decodedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decodedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n    private static Key generateKey(byte[] keyValue) throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n}\n\n}\n", "idx": 1841}
{"project": "cipher", "commit_id": "Snippet36708658_18601.java", "target": 0, "func": "public class CryptoFile {\n\npublic  byte[] encrypt(String seed, byte[] cleartext) throws Exception {           \n\n        byte[] rawKey = getRawKey(seed.getBytes());\n\n    byte[] result = encrypt(rawKey, cleartext);\n\n  //  return toHex(result);\n    return result;\n} \npublic  byte[] decrypt(String seed, byte[] encrypted) throws Exception {\n\n    byte[] rawKey = getRawKey(seed.getBytes());\n\n    byte[] enc = encrypted;\n\n    byte[] result = decrypt(rawKey, enc); \n\n    return result;     }\n\n//done\n private  byte[] getRawKey(byte[] seed) throws Exception {\n\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n\n    sr.setSeed(seed);\n\nkgen.init(128, sr); // 192 and 256 bits may not be available\n\nSecretKey skey = kgen.generateKey();\n\nbyte[] raw = skey.getEncoded();\n\nreturn raw;\n}\nprivate  byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\nbyte[] encrypted = cipher.doFinal(clear);\n\n    return encrypted;\n\n}\n\n private  byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\ncipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\nbyte[] decrypted = cipher.doFinal(encrypted);\n\n    return decrypted;\n\n}\n\n}\n", "idx": 1842}
{"project": "cipher", "commit_id": "Snippet11838389_35797.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n", "idx": 1843}
{"project": "cipher", "commit_id": "Snippet27147016_9300.java", "target": 0, "func": "import java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class EchoClientTest {\n\n    public static void main(String[] args) {\n        try {\n            byte[] keyB = {\n                    (byte)0x2C, (byte)0xCF, (byte)0xBC, (byte)0x81, (byte)0x99, (byte)0xB7, (byte)0x37, (byte)0x84, \n                    (byte)0xD1, (byte)0x09, (byte)0x44, (byte)0x4F, (byte)0xB6, (byte)0x66, (byte)0x69, (byte)0x1F, \n                    (byte)0x17, (byte)0x61, (byte)0xAD, (byte)0xD7, (byte)0x43, (byte)0x0E, (byte)0x80, (byte)0x6C                      \n            };\n            byte[] ivB = {\n                    (byte)0x7B, (byte)0x9B, (byte)0x5F, (byte)0x36, (byte)0xC9, (byte)0x26, (byte)0xE9, (byte)0x5E                      \n            };\n\n\n            {\n                Socket echoSocket = new Socket(\"127.0.0.1\",1423);\n                System.out.println(\"Connected\");\n\n                System.out.println(\"Setting up - Unencrypted version\");\n                OutputStream oS = echoSocket.getOutputStream();\n                DataOutputStream doS = new DataOutputStream(oS);\n                InputStream iS = echoSocket.getInputStream();\n                InputStreamReader iSR = new InputStreamReader(iS,\"UTF-8\");\n                BufferedReader bR = new BufferedReader(iSR);\n\n\n                System.out.println(\"Writing Unencrypted output\");\n                doS.write(\"Test Message\\n\".getBytes(\"UTF-8\"));\n                doS.flush();\n\n                System.out.println(\"Waiting 1 second\");\n                Thread.sleep(1000);\n\n                System.out.println(\"Reading data from socket\");\n\n                String inputLine = \"\";\n                while (bR.ready()) {\n                    int i = bR.read();\n                    inputLine += (char)i;\n                }\n                if (inputLine.length()==0) {\n                    System.out.println(\"Error nothing read from socket\");\n                } else {\n                    System.out.println(\"Recieved:\" + inputLine);\n                    inputLine = \"\";\n                };\n\n                System.out.println(\"Closing Socket\");\n                echoSocket.close();\n            }\n            System.out.println(\"Repeating but encrypting the data SENT on the socket\");\n            {\n                Socket echoSocket = new Socket(\"127.0.0.1\",1423);\n                System.out.println(\"Connected\");\n\n                System.out.println(\"Setting up Ciphers\");\n                String Algo = \"DESede\"; //DES or DESede\n\n                final SecretKey key = new SecretKeySpec(keyB, Algo);\n                final IvParameterSpec iv = new IvParameterSpec(ivB);\n                final Cipher cipherEncrypt = Cipher.getInstance(\"DESede/CFB8/NoPadding\");\n                cipherEncrypt.init(Cipher.ENCRYPT_MODE, key, iv);      \n\n                System.out.println(\"Setting up - Encrypted version\");\n                OutputStream oS = echoSocket.getOutputStream();\n                CipherOutputStream cipherOutputS = new CipherOutputStream(oS,cipherEncrypt);\n                DataOutputStream doS = new DataOutputStream(cipherOutputS);\n                InputStream iS = echoSocket.getInputStream();\n                InputStreamReader iSR = new InputStreamReader(iS,\"UTF-8\");\n                BufferedReader bR = new BufferedReader(iSR);\n\n\n                System.out.println(\"Writing Encrypted output\");\n                doS.write(\"Test Message\\n\".getBytes(\"UTF-8\"));\n                doS.flush();\n\n                System.out.println(\"Waiting 1 second\");\n                Thread.sleep(1000);\n\n                System.out.println(\"Reading data from socket\");\n\n                String inputLine = \"\";\n                while (bR.ready()) {\n                    int i = bR.read();\n                    inputLine += (char)i;\n                }\n                if (inputLine.length()==0) {\n                    System.out.println(\"Error nothing read from socket\");\n                } else {\n                    System.out.println(\"Recieved:\" + inputLine);\n                    inputLine = \"\";\n                };\n\n                System.out.println(\"Closing Socket\");\n                echoSocket.close();\n            }\n            System.out.println(\"Repeating but encrypting the data SENT and decrypting RECIEVED on the socket\");\n            {\n                Socket echoSocket = new Socket(\"127.0.0.1\",1423);\n                System.out.println(\"Connected\");\n\n                System.out.println(\"Setting up Ciphers\");\n                String Algo = \"DESede\"; //DES or DESede\n\n                final SecretKey key = new SecretKeySpec(keyB, \"DESede\");\n                final IvParameterSpec iv = new IvParameterSpec(ivB);\n                final Cipher cipherEncrypt = Cipher.getInstance(\"DESede/CFB8/NoPadding\");\n                final Cipher cipherDecrypt = Cipher.getInstance(\"DESede/CFB8/NoPadding\");\n                cipherEncrypt.init(Cipher.ENCRYPT_MODE, key, iv);      \n                cipherDecrypt.init(Cipher.DECRYPT_MODE, key, iv);      \n\n                System.out.println(\"Setting up - Encrypted version\");\n                OutputStream oS = echoSocket.getOutputStream();\n                CipherOutputStream cipherOutputS = new CipherOutputStream(oS,cipherEncrypt);\n                DataOutputStream doS = new DataOutputStream(cipherOutputS);\n                InputStream iS = echoSocket.getInputStream();\n                CipherInputStream cipherInputS =  new CipherInputStream(iS,cipherDecrypt);\n                InputStreamReader iSR = new InputStreamReader(cipherInputS,\"UTF-8\");\n                BufferedReader bR = new BufferedReader(iSR);\n\n\n                System.out.println(\"Writing Encrypted output\");\n                doS.write(\"Test Message\\n\".getBytes(\"UTF-8\"));\n                doS.flush();\n\n                System.out.println(\"Waiting 1 second\");\n                Thread.sleep(1000);\n\n                System.out.println(\"Reading data from socket (and Decrtpying)\");\n\n                String inputLine = \"\";\n                while (bR.ready()) {\n                    int i = bR.read();\n                    inputLine += (char)i;\n                }\n                if (inputLine.length()==0) {\n                    System.out.println(\"Error nothing read from socket\");\n                } else {\n                    System.out.println(\"Recieved:\" + inputLine);\n                    inputLine = \"\";\n                };\n\n                System.out.println(\"Closing Socket\");\n                echoSocket.close();\n            }           \n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n", "idx": 1844}
{"project": "cipher", "commit_id": "Snippet21955527_4375.java", "target": 0, "func": "SecretKey k = new SecretKeySpec(key.getBytes(), \"AES\");\nSecurity.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\ncipher.init(Cipher.ENCRYPT_MODE, k);\nfinalStr = new String(Base64.encode(cipher.doFinal(originalStr.getBytes())));\n", "idx": 1845}
{"project": "cipher", "commit_id": "Snippet6802368_32370.java", "target": 0, "func": "package com.messageHider;\n\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.security.spec.AlgorithmParameterSpec;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\n\npublic class DesEncrypter {\n    Cipher ecipher;\n    Cipher dcipher;\n    byte[] buf=null;\n    DesEncrypter(SecretKey key) {\n        // Create an 8-byte initialization vector\n        byte[] iv = new byte[]{\n            (byte)0x8E, 0x12, 0x39, (byte)0x9C,\n            0x07, 0x72, 0x6F, 0x5A\n        };\n        AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);\n        try {\n            ecipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n            dcipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n            // CBC requires an initialization vector\n            ecipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n            dcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n        } catch (java.security.InvalidAlgorithmParameterException e) {\n        } catch (javax.crypto.NoSuchPaddingException e) {\n        } catch (java.security.NoSuchAlgorithmException e) {\n        } catch (java.security.InvalidKeyException e) {\n        }\n    }\n\n\n    public void encrypt(InputStream in, OutputStream out,int fileSize) {\n        buf= new byte[fileSize];\n        try {\n            // Bytes written to out will be encrypted\n            out = new CipherOutputStream(out, ecipher);\n\n            // Read in the cleartext bytes and write to out to encrypt\n            int numRead = 0;\n            while ((numRead = in.read(buf)) >= 0) {\n                out.write(buf, 0, numRead);\n            }\n            out.close();\n        } catch (java.io.IOException e) {\n        }\n    }\n\n    public void decrypt(InputStream in, OutputStream out,int fileSize) {\n        buf= new byte[fileSize];\n        try {\n            // Bytes read from in will be decrypted\n            in = new CipherInputStream(in, dcipher);\n            // Read in the decrypted bytes and write the cleartext to out\n            int numRead = 0;\n            while ((numRead = in.read(buf)) >= 0) {\n                out.write(buf, 0, numRead);\n            }\n            out.close();\n        } catch (java.io.IOException e) {\n        }\n    }\n}\n", "idx": 1846}
{"project": "cipher", "commit_id": "Snippet27798812_9975.java", "target": 0, "func": "private static final String PASSWORD = \"46dkaKLKKJLjdkdk;akdjafj\";\n\nprivate static final byte[] SALT = { 0x26, 0x19, (byte) 0x81, 0x4E,\n        (byte) 0xA0, 0x6D, (byte) 0x95, 0x34 };\n\npublic static void main(String[] args) throws Exception {\n    final Cipher desEDE = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n\n    final PasswordDeriveBytes myPass = new PasswordDeriveBytes(PASSWORD, SALT);\n    final SecretKeyFactory kf = SecretKeyFactory.getInstance(\"DESede\");\n    final byte[] key = myPass.getBytes(192 / Byte.SIZE);\n    final SecretKey desEDEKey = kf.generateSecret(new DESedeKeySpec(key));\n\n    final byte[] iv = myPass.getBytes(desEDE.getBlockSize());\n\n    desEDE.init(Cipher.ENCRYPT_MODE, desEDEKey, new IvParameterSpec(iv));\n\n    final byte[] ct = desEDE.doFinal(\"owlstead\".getBytes(US_ASCII));\n}\n", "idx": 1847}
{"project": "cipher", "commit_id": "Snippet6020648_31878.java", "target": 0, "func": "Security.addProvider(new BouncyCastleProvider());\nSecretKeySpec keySpec = new SecretKeySpec(KEY.getBytes(), \"DESede\");\nIvParameterSpec iv = new IvParameterSpec(new byte[8]);\nCipher e_cipher = Cipher.getInstance(\"DESede/CBC/PKCS7Padding\", \"BC\");\ne_cipher.init(Cipher.DECRYPT_MODE, keySpec, iv);\n\nbyte[] hexdecoded = Hex.decode(ENCRYPTED.getBytes());\nbyte [] cipherText = e_cipher.doFinal(hexdecoded);\n\nreturn new String(cipherText);\n", "idx": 1848}
{"project": "cipher", "commit_id": "Snippet26493253_8618.java", "target": 0, "func": "public static byte[] decrypt(final byte[] value, final String key) throws InvalidKeyException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchPaddingException, UnsupportedEncodingException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException {\n    final DESKeySpec objDesKeySpec = new DESKeySpec(key.getBytes(\"UTF-8\"));\n    final SecretKeyFactory objKeyFactory = SecretKeyFactory.getInstance(\"DES\");\n    final SecretKey objSecretKey = objKeyFactory.generateSecret(objDesKeySpec);\n    final byte[] rgbIV = key.getBytes();\n    final IvParameterSpec iv = new IvParameterSpec(rgbIV);\n    final Cipher objCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    objCipher.init(2, objSecretKey, iv);\n    return objCipher.doFinal(value);\n}\n", "idx": 1849}
{"project": "cipher", "commit_id": "Snippet6206438_32004.java", "target": 0, "func": "<%@page contentType=\"text/html; charset=iso-8859-1\" language=\"java\" \nimport=\"java.security.*\"\nimport=\"javax.crypto.Cipher\"\nimport=\"javax.crypto.spec.SecretKeySpec\"\nimport=\"sun.misc.*\"\n%>\n\n<%\n  // Decrypt authenticated hash\n  String ALGORITHM = \"AES\";\n  byte[] keyValue = \"MY-SECRET-PASSWORD\".getBytes();\n\n  Key key = new SecretKeySpec(keyValue, ALGORITHM);\n  Cipher c = Cipher.getInstance(ALGORITHM);\n  c.init(Cipher.DECRYPT_MODE, key);\n  byte[] decodedValue = new BASE64Decoder().decodeBuffer(new String(request.getParameter(\"auth\")));\n  byte[] decValue = c.doFinal(decodedValue);\n  String decryptedValue = new String(decValue);\n%>\n\n<script type=\"text/javascript\">\n   var auth = '<%= decryptedValue%>';\n\n   function AJAX(url, callback) {\n\n      var req = init();\n      req.onreadystatechange = processRequest;\n\n      function init() {\n         if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n         } else if (window.ActiveXObject) {\n            return new ActiveXObject(\"Microsoft.XMLHTTP\");\n         }\n      }\n\n      function processRequest () {\n         // readyState of 4 signifies request is complete\n         if (req.readyState == 4) {\n            // status of 200 signifies sucessful HTTP call\n            if (req.status == 200) {\n               if (callback) callback(req.responseXML);\n            }\n         }\n      }\n\n      this.doGet = function() {\n         req.open(\"GET\", url, true);\n         req.setRequestHeader(\"Authorization\", \"Basic \" + auth);\n         req.send(null);\n      }\n   }\n\n   var url = \"/pentaho/Home\";\n   var querystr = \"\";\n   var ajax = new AJAX(url, function(){\n      window.location = url;\n   });\n\n   ajax.doGet(querystr);\n\n</script>\n", "idx": 1850}
{"project": "cipher", "commit_id": "Snippet1330032_29926.java", "target": 0, "func": "cipher = Cipher.getInstance(\"DESede/CBC/X9.23PADDING\");\n", "idx": 1851}
{"project": "cipher", "commit_id": "Snippet11987641_35944.java", "target": 0, "func": "        private void encript(byte[] data, byte[] clear) {\n\n        byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,\n        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };\n        SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n        Cipher cipher = null;\n\n        try {\n\n        cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n        }    catch (NoSuchAlgorithmException e) {\n\n        e.printStackTrace();\n        }    catch (NoSuchProviderException e) {\n\n        e.printStackTrace();\n\n        } catch (NoSuchPaddingException e) {\n\n        e.printStackTrace();\n        }\n        try {\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        } catch (InvalidKeyException e) {\n\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n        }\n\n        byte[] cipherText = new byte[cipher.getOutputSize(data.length)];\n\n       // int ctLength = cipher.update(data, 0, data.length, cipherText, 0);\n\n        byte[] input = null;\n\n        try { \n        input = cipher.doFinal(cipherText);\n        } catch (IllegalBlockSizeException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n        } catch (BadPaddingException e) {\n        // TODO Auto-generated catch block\n\n\n        e.printStackTrace();\n        }\n        try{\n        if(input.length>0){\n        Toast.makeText(getApplicationContext(), \"Image successfully encripted\", 3000).show();\n        }\n        ByteArrayInputStream bis = new ByteArrayInputStream(input);\n\n        ObjectInputStream ois = new ObjectInputStream(bis);\n\n     File encriptedfile = (File) ois.readObject();//This is the file which i want to Move to App folder\n\n            bis.close();\n        ois.close();\n        } catch (StreamCorruptedException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n       } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n       } catch (ClassNotFoundException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n       }\n    return;\n    }\n     //Code for copy  image into app folder......\n    File outputFolder = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + \".map\");\n         try {\n          FileUtils.copyFile (encriptedfile, outputFolder);\n          } \n          catch (IOException e) {\n          Log.e(\"photomover\", e.toString());\n          }\n}\n", "idx": 1852}
{"project": "cipher", "commit_id": "Snippet27305037_9478.java", "target": 0, "func": "package Test;\n import java.io.*;\n import java.security.*;\n import javax.crypto.*;\n import javax.crypto.spec.*;\n import java.util.*;\n\n public class FileDecryptor\n {\n    private static String filename;\n    private static String password;\n    private static FileInputStream inFile;\n    private static FileOutputStream outFile;\n\n    public static void main(String[] args) throws Exception\n    {\n\n       // File to decrypt.\n\n       filename = \"Test.txt.des\";\n\n       String password = \"super_secret_password\";\n\n       inFile = new FileInputStream(filename);\n       outFile = new FileOutputStream(filename + \".dcr\");\n\n       PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n       SecretKeyFactory keyFactory =\n           SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n       SecretKey passwordKey = keyFactory.generateSecret(keySpec);\n\n       byte[] salt = new byte[8];\n       inFile.read(salt);\n       int iterations = 100;\n\n       PBEParameterSpec parameterSpec = new PBEParameterSpec(salt, iterations);\n\n\n       Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n       cipher.init(Cipher.DECRYPT_MODE, passwordKey, parameterSpec);\n\n       outFile.write(salt);\n\n\n       byte[] input = new byte[64];\n       int bytesRead;\n       while ((bytesRead = inFile.read(input)) != -1)\n       {\n          byte[] output = cipher.update(input, 0, bytesRead);\n          if (output != null)\n             outFile.write(output);\n       }\n       byte[] output = cipher.doFinal();\n       if (output != null)\n          outFile.write(output);\n\n       inFile.close();\n       outFile.flush();\n       outFile.close();\n   }\n}\n", "idx": 1853}
{"project": "cipher", "commit_id": "Snippet16358035_39306.java", "target": 0, "func": "    public class Encryption {\nprivate final static String HEX = \"0123456789ABCDEF\";\nprivate final static int JELLY_BEAN_4_2 = 17;\nprivate final static byte[] key = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0 };\n\npublic static String encrypt(String seed, String cleartext)\n        throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    String fromHex = toHex(result);\n    return fromHex;\n}\n\npublic static String decrypt(String seed, String encrypted)\n        throws Exception {\n    byte[] seedByte = seed.getBytes();\n    System.arraycopy(seedByte, 0, Constants.SEED, 0,\n            ((seedByte.length < 16) ? seedByte.length : 16));\n    String base64 = new String(Base64.decode(encrypted, 0));\n    byte[] rawKey = getRawKey(seedByte);\n    byte[] enc = toByte(base64);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\npublic static byte[] encryptBytes(String seed, byte[] cleartext)\n        throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext);\n    return result;\n}\n\npublic static byte[] decryptBytes(String seed, byte[] encrypted)\n        throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = decrypt(rawKey, encrypted);\n    return result;\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = null;\n    if (android.os.Build.VERSION.SDK_INT >= JELLY_BEAN_4_2) {\n        sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n    } else {\n        sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    }\n    sr.setSeed(seed);\n    try {\n        kgen.init(256, sr);\n    } catch (Exception e) {\n        // \"This device doesn't suppor 256bits, trying 192bits.\");\n        try {\n            kgen.init(192, sr);\n        } catch (Exception e1) {\n             Log.w(LOG,\n             \"This device doesn't suppor 192bits, trying 128bits.\");\n            kgen.init(128, sr);\n        }\n    }\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted)\n        throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\n\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length() / 2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2 * buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\n\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n}\n\n}\n", "idx": 1854}
{"project": "cipher", "commit_id": "Snippet19640079_2367.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\n/**\n * @author rishad.ali\n *\n */\npublic class Security\n{\n    //The secret Key to encrypt and decrypt text\n    private SecretKey key = null;\n\n    /**\n     * Constructor of the class to generate Key\n     */\n    public Security(String secretCode)\n    {\n        try\n        {\n            DESKeySpec keySpec = new DESKeySpec(secretCode.getBytes(\"UTF8\")); \n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n            key = keyFactory.generateSecret(keySpec);\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        } \n    }\n    /**\n     * Returns the encrypted text for the given plain text.\n     * \n     * @param plainText - given plain text\n     * @return\n     */\n    public String encrypt (String plainText)\n    {\n        BASE64Encoder base64encoder = new BASE64Encoder();\n        //Encrypted Text to be sent\n        String encryptedText = \"\";\n        //Encrypt the plain text\n        try\n        {\n            byte[] cleartext = plainText.getBytes(\"UTF8\");      \n            Cipher cipher = Cipher.getInstance(\"DES\"); \n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            encryptedText = base64encoder.encode(cipher.doFinal(cleartext));\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        } \n        return encryptedText;\n    }\n\n    /**\n     * Returns the plain text for the given encrypted Text\n     * \n     * @param encryptedText - Given Encrypted Text\n     * @return\n     */\n    public String decrypt (String encryptedText)\n    {\n        sun.misc.BASE64Decoder base64decoder = new BASE64Decoder();\n        //Plain text to be sent\n        String plainText = \"\";\n        // Decrypt the  encrypted text\n        try\n        {\n            byte[] encrypedPwdBytes = base64decoder.decodeBuffer(encryptedText);\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] plainTextPwdBytes = (cipher.doFinal(encrypedPwdBytes));\n            plainText = new String(plainTextPwdBytes, \"US-ASCII\");\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        } \n        return plainText;\n    }\n\n    public static void main (String args [])\n    {\n        Security sec = new Security(\"secrtkey\");\n        String text = \"sometext\";\n        System.out.println(\"Encrypted Text : \"+sec.encrypt(text));\n    }\n}\n", "idx": 1855}
{"project": "cipher", "commit_id": "Snippet7415598_32720.java", "target": 0, "func": "byte[] input = \"6KzVyH0s3RyliBBAkcIrKOmripAUrDgBrm3VZR0VKkDlBTsHdOm/ONN1st/PBhquynxOjIPvgTfXJKx3aYDaARvCBmJwm1a0kfqFUcdpho+QSqpnqlDaBelL3taPKy2XPNmbOWlYUQtircPwcTrbOEUrQeUjEKqtataHw1tIp5c=\".getBytes();\n\n\n            String key1=\"12345891456\";\n\n           // byte[] keyBytes = new byte[] { 1234567891123456 };\n\n            byte[] keyBytes = null;\n            try {\n                keyBytes = key1.getBytes(\"UTF-16LE\");               \n\n            } catch (UnsupportedEncodingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n\n            SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n\n            //key.init(128);\n\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n            System.out.println(new String(input));\n\n            // encryption pass\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n\n            byte[] cipherText = new byte[cipher.getOutputSize(input.length)];           \n            int ctLength = cipher.update(input, 0, input.length, cipherText, 0);       \n\n            // decryption pass\n            cipher.init(Cipher.DECRYPT_MODE, key);\n\n            byte[] plainText = new byte[cipher.getOutputSize(ctLength)];\n\n            int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);\n\n            ptLength += cipher.doFinal(plainText, ptLength);\n            System.out.println(new String(plainText));\n            System.out.println(ptLength);\n          }\n", "idx": 1856}
{"project": "cipher", "commit_id": "Snippet30081041_12210.java", "target": 0, "func": "    import javax.crypto.spec.SecretKeySpec;\n\n    class Encrypter\n{\n    String alg = \"AES\";\n    Key key;\n    Cipher cipher;\n\n    public Encrypter() throws Exception\n    {\n         //key = KeyGenerator.getInstance(alg).generateKey();\nkey = new SecretKeySpec(\"C@ThA$rpma#EsP!!\".getBytes(), \"AES\");\n         cipher = Cipher.getInstance(alg);\n    }\n\n    public byte[] encrypt(String str) throws Exception\n    {\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] inBytes = str.getBytes(\"UTF-16\");\n\n        return cipher.doFinal(inBytes);\n    }\n\n    public String decrypt(byte[] enBytes) throws Exception\n    {\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] bytes = cipher.doFinal(enBytes);\n        String rData = new String(bytes, \"UTF-16\");\n\n        return rData;\n    }\n}\n", "idx": 1857}
{"project": "cipher", "commit_id": "Snippet29029410_11091.java", "target": 0, "func": "public class FileLogger {\n\n//file and folder name\npublic static String LOG_FILE_NAME = \"my_log.txt\";\npublic static String LOG_FOLDER_NAME = \"my_log_folder\";\n\nstatic SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd_HH-mm-ss_SSS\");\n\n//My secret key, 16 bytes = 128 bit\nstatic byte[] key = {1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6};\n\n//Appends to a log file, using encryption\npublic static void appendToLog(Context context, Object msg) {\n\n    String msgStr;\n    String timestamp = \"t:\" + formatter.format(new java.util.Date());\n\n    msgStr = msg + \"|\" + timestamp + \"\\n\";\n\n    File sdcard = Environment.getExternalStorageDirectory();\n    File dir = new File(sdcard.getAbsolutePath() + \"/\" + LOG_FOLDER_NAME);\n    if (!dir.exists()) {\n        dir.mkdir();\n    }\n\n    File encryptedFile = new File(dir, LOG_FILE_NAME);\n\n    try {\n\n        //Encryption using my key above defined\n        Key secretKey = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n        byte[] outputBytes = cipher.doFinal(msgStr.getBytes());\n\n        //Writing to the file using append mode\n        FileOutputStream outputStream = new FileOutputStream(encryptedFile, true);\n        outputStream.write(outputBytes);\n        outputStream.close();\n\n\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    }\n\n}\n\n}\n", "idx": 1858}
{"project": "cipher", "commit_id": "Snippet46574112_28704.java", "target": 0, "func": "public class Blowfish {\n    static SecretKey key = null;\n    static String IV = \"AAAAAAAA\";\n\n    public Blowfish(int bits, InetAddress ip) throws UnknownHostException, IOException, NoSuchAlgorithmException {\n\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"Blowfish\");\n        keyGenerator.init(bits); // 32 a 448 (default 128)\n        key = keyGenerator.generateKey();\n        String encodedKey = Base64.getEncoder().encodeToString(key.getEncoded());\n        RSA.exchangeKey(encodedKey, ip);\n\n    }\n\n    public static byte[] encrypt(byte[] plainData, int offset, int length) throws Exception {\n        Cipher cipher = Cipher.getInstance(\"Blowfish/OFB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(IV.getBytes(\"UTF-8\")));\n        return cipher.doFinal(plainData, offset, length);\n\n    }\n\n    public static byte[] decrypt(byte[] cipherSound, int offset, int length) throws Exception {\n        Cipher cipher = Cipher.getInstance(\"Blowfish/OFB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(IV.getBytes(\"UTF-8\")));\n        return cipher.doFinal(cipherSound, offset, length);\n    }\n\n}\n", "idx": 1859}
{"project": "cipher", "commit_id": "Snippet4695400_31269.java", "target": 0, "func": "\nKeySpec ks = new DESKeySpec(\"key12345\".getBytes(\"UTF-8\"));\nSecretKey key = SecretKeyFactory.getInstance(\"DES\").generateSecret(ks);\n\nIvParameterSpec iv = new IvParameterSpec(\n        Hex.decodeHex(\"1234567890ABCDEF\".toCharArray()));\n\nCipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\ncipher.init(Cipher.DECRYPT_MODE, key, iv);\n\nbyte[] decoded = cipher.doFinal(Base64.decodeBase64(\"B3xogi/Qfsc=\"));\n\nSystem.out.println(\"Decoded: \" + new String(decoded, \"UTF-8\"));\n", "idx": 1860}
{"project": "cipher", "commit_id": "Snippet35082426_17035.java", "target": 0, "func": "private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception \n{\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception     \n{\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n", "idx": 1861}
{"project": "cipher", "commit_id": "Snippet37946487_19979.java", "target": 0, "func": "package com.spencergang.fem;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Cryptographer {\n    private static final String ALGORITHM = \"AES\";\n    private static final String TRANSFORMATION = \"AES\";\n\n    //Method for cryptography\n    public static void crypto(int cipherMode, String key, File inputFile, File outputFile) throws CryptoException {\n        try{\n            Key secretKey = new SecretKeySpec(key.getBytes(), ALGORITHM);\n            Cipher cipher = Cipher.getInstance(TRANSFORMATION);\n            cipher.init(cipherMode, secretKey);\n\n            FileInputStream inputStream = new FileInputStream(inputFile);\n            byte[] inputBytes = new byte[(int) inputFile.length()];\n            inputStream.read(inputBytes);\n\n            byte[] outputBytes = cipher.doFinal(inputBytes);\n\n            FileOutputStream outputStream = new FileOutputStream(outputFile);\n            outputStream.write(outputBytes);\n\n            inputStream.close();\n            outputStream.close();\n        }catch(NoSuchPaddingException | NoSuchAlgorithmException | InvalidKeyException | BadPaddingException | IllegalBlockSizeException | IOException ex){\n            throw new CryptoException(\"ERROR ENCRYPTING / DECRYPTING FILE\", ex);\n        }\n    }\n\n    //Encryption\n    public static void encrypt(String key, File inputFile, File outputFile) throws CryptoException {\n        crypto(Cipher.ENCRYPT_MODE, key, inputFile, outputFile);\n    }\n\n    //Decryption\n    public static void decrypt(String key, File inputFile, File outputFile) throws CryptoException {\n        crypto(Cipher.DECRYPT_MODE, key, inputFile, outputFile);\n    }\n}\n", "idx": 1862}
{"project": "cipher", "commit_id": "Snippet9466307_33919.java", "target": 0, "func": " package com.acc;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.PrivateKey;\nimport java.security.Provider;\nimport java.security.PublicKey;\nimport java.security.SecureRandom;\nimport java.security.Security;\nimport java.security.Signature;\nimport java.security.spec.ECGenParameterSpec;\nimport java.security.spec.ECParameterSpec;\nimport java.security.spec.EllipticCurve;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.spec.DESKeySpec;\n\n\npublic class TestECC {\n\n    public static void main(String args[]) {\n        try {\n            Provider p[] = Security.getProviders();\n            Provider p1 = Security.getProvider(\"SunEC\");\n            System.out.println(p1.getName());\n            KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"EC\", \"SunEC\");\n            System.out.println(kpg.getAlgorithm());\n\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            System.out.println(\"provider=\" + cipher.getProvider());\n\n            ECGenParameterSpec ecsp = new ECGenParameterSpec(\"sect163r2\");\n\n            kpg.initialize(ecsp);\n            KeyPair kyp = kpg.genKeyPair();\n            PublicKey pubKey = kyp.getPublic();\n\n            PrivateKey privKey = kyp.getPrivate();\n            System.out.println(cipher.getProvider());\n\n            cipher.init(Cipher.ENCRYPT_MODE, pubKey);\n\n            String cleartextFile = \"cleartext.txt\";\n            String ciphertextFile = \"ciphertextECIES.txt\";\n\n            byte[] block = new byte[64];\n            FileInputStream fis = new FileInputStream(cleartextFile);\n            FileOutputStream fos = new FileOutputStream(ciphertextFile);\n            CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n            int i;\n            while ((i = fis.read(block)) != -1) {\n                cos.write(block, 0, i);\n            }\n            cos.close();\n\n            // Decrypt\n\n            String cleartextAgainFile = \"cleartextAgainECIES.txt\";\n\n            cipher.init(Cipher.DECRYPT_MODE, privKey, ecsp);\n\n            fis = new FileInputStream(ciphertextFile);\n            CipherInputStream cis = new CipherInputStream(fis, cipher);\n            fos = new FileOutputStream(cleartextAgainFile);\n\n            while ((i = cis.read(block)) != -1) {\n                fos.write(block, 0, i);\n            }\n            fos.close();\n\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n\n}\n", "idx": 1863}
{"project": "cipher", "commit_id": "Snippet30908637_13060.java", "target": 0, "func": "public class DESCodec {\n\n    /**\n     * Secret key that shall be used for encryption and decryption.\n     */\n    private String strSecretKey = \"12345678\";\n\n    private static final String UNICODE_FORMAT = \"UTF-8\";\n\n    private static final String DES_ENCRYPTION_SCHEME = \"DES\";\n\n    private static final String TAG = \"DESCodec\";\n\n    private Cipher cipher;\n\n    private SecretKey key;\n\n\n    public DESCodec() {\n        try {\n            this.strSecretKey = strSecretKey;\n            String myEncryptionScheme = DES_ENCRYPTION_SCHEME;\n            byte[] keyAsBytes = strSecretKey.getBytes(UNICODE_FORMAT);\n            DESKeySpec myKeySpec = new DESKeySpec(keyAsBytes);\n            SecretKeyFactory mySecretKeyFactory = SecretKeyFactory.getInstance(myEncryptionScheme);\n            cipher = Cipher.getInstance(myEncryptionScheme);\n            key = mySecretKeyFactory.generateSecret(myKeySpec);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n\n\n    public String desEncrypt(String message) {\n        String encryptedString = null;\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] plainText = message.getBytes(UNICODE_FORMAT);\n            byte[] encryptedText = cipher.doFinal(plainText);\n\n            encryptedString = Base64.encodeToString(encryptedText, Base64.DEFAULT);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return encryptedString;\n    }\n\n    public String desDecrypt(String message) {\n        String decryptedText = null;\n        try {\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] encryptedText = Base64.decode(message, Base64.DEFAULT);\n            byte[] plainText = cipher.doFinal(encryptedText);\n            decryptedText = bytes2String(plainText);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return decryptedText;\n    }\n\n    private String bytes2String(byte[] bytes) {\n        try {\n            return new String(bytes, UNICODE_FORMAT);\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n}\n", "idx": 1864}
{"project": "cipher", "commit_id": "Snippet1962976_30173.java", "target": 0, "func": " KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n kg.init(new SecureRandom());\n SecretKey key = kg.generateKey();\n SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n Class spec = Class.forName(\"javax.crypto.spec.DESKeySpec\");\n DESKeySpec ks = (DESKeySpec) skf.getKeySpec(key, spec);\n ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"keyfile\"));\n oos.writeObject(ks.getKey());\n\n Cipher c = Cipher.getInstance(\"DES/CFB8/NoPadding\");\n c.init(Cipher.ENCRYPT_MODE, key);\n CipherOutputStream cos = new CipherOutputStream(new FileOutputStream(\"ciphertext\"), c);\n PrintWriter pw = new PrintWriter(new OutputStreamWriter(cos));\n pw.println(\"Stand and unfold yourself\");\n pw.close();\n oos.writeObject(c.getIV());\n oos.close();\n", "idx": 1865}
{"project": "cipher", "commit_id": "Snippet3183462_30680.java", "target": 0, "func": "cipher = Cipher.getInstance(\"AES\");\n", "idx": 1866}
{"project": "cipher", "commit_id": "Snippet17587249_753.java", "target": 0, "func": "static boolean isPrime(long n)\n{\n    if (n%2 == 0)\n    {\n        return false;\n    }\n\n    for(int i = 3 ; i*i<=n;i+=2)\n    {\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\n\n\npublic static void main(String [] args) throws Exception\n{\n\n    Random randomGenerator = new Random();\n\n    long pValue = randomGenerator.nextInt(1000000);\n    long gValue = randomGenerator.nextInt(100000);\n    long correctPValue;\n\n    boolean checkPrime = isPrime(pValue);\n    System.out.println(\"the number generated is \"+pValue);\n    System.out.println(checkPrime);\n\n    while(checkPrime == false)\n\n    {\n        long pValue2 = randomGenerator.nextInt(1000000);\n        boolean checkPrimeInLoop = isPrime(pValue2);\n        //System.out.println(\"value in loop is \"+pValue2);\n        if(checkPrimeInLoop == true)\n        {\n            pValue=pValue2;\n            break;\n        }\n    }\n\n\n    long checkSP = (pValue*2)+1;\n    boolean checkSafePrime = isPrime(checkSP);\n    //System.out.println(checkSafePrime);\n    while(checkSafePrime==false)\n    {\n        long pValue3=randomGenerator.nextInt(1000000);\n        boolean checkPrimeInLoop = isPrime(pValue3);\n        long pValue5=(pValue3*2)+1;\n        //boolean checkSafePrimeInLoop = isPrime(pValue4);\n        boolean checkSafePrime2InLoop = isPrime(pValue5);\n\n        if(checkSafePrime2InLoop == true && checkPrimeInLoop == true)\n        {\n            pValue=pValue3;\n            break;\n        }\n\n    }\n\n    //System.out.println(\"the safe prime is\"+pValue);//safe prime\n\n    while(gValue>pValue)\n    {\n        long gValue2=randomGenerator.nextInt(100000);\n\n        if(gValue2<pValue)\n        {\n            gValue=gValue2;\n            break;\n        }\n    }\n\n    long getDivisor = (pValue-1)/2;\n    BigInteger bi1,bi2,bi3,bi4,bi10,bi11,bi12,bi13;\n\n    bi1=BigInteger.valueOf(getDivisor);\n\n    bi2 = BigInteger.valueOf(pValue);\n\n    bi3 = BigInteger.valueOf(gValue);\n\n    bi4= bi3.modPow(bi1,bi2);\n\n    String getBi1 = bi1.toString();\n\n    String getBi2 = bi2.toString();\n\n    String getBi3 = bi3.toString();\n\n    String getBi4 = bi4.toString();\n\n\n    //bi10 = new BigInteger(getBi1,64); // divisor\n    //bi11 = new BigInteger(getBi2,64); // safe prime value\n    //bi12 = new BigInteger(getBi3,64); // generator value\n    //bi13 = new BigInteger(getBi4,64); // modular value\n\n\n\n\n    long calculatedValue = bi4.longValue();\n\n\n    while(calculatedValue == 1)\n    {\n        long gValue3=randomGenerator.nextInt(100000);\n        long getDivisorInLoop = (pValue-1)/2;\n        BigInteger bi5,bi6,bi7,bi8,bi14,bi15,bi16,bi17,bi18;\n\n        bi5=BigInteger.valueOf(getDivisorInLoop);\n\n        bi6 = BigInteger.valueOf(pValue);\n\n        bi7 = BigInteger.valueOf(gValue3);\n\n        bi8= bi7.modPow(bi5,bi6);\n\n\n        String getBi5 = bi5.toString();\n\n        String getBi6 = bi6.toString();\n\n        String getBi7 = bi7.toString();\n\n        String getBi8 = bi8.toString();\n\n\n        //bi14 = new BigInteger(getBi1,64); // divisor\n        //bi15 = new BigInteger(getBi2,64); // safe prime value\n        //bi16 = new BigInteger(getBi3,64); // generator value\n        //bi17 = new BigInteger(getBi4,64); // modular value\n\n\n        long calculatedValueInLoop = bi8.longValue();\n        System.out.println(\"the proof that it is  a generator is \"+calculatedValueInLoop);\n        if(calculatedValueInLoop!=1)\n        {\n            gValue=gValue3;\n            break;\n        }\n    }\n\n    BigInteger generatorValue,primeValue,biA,biB,skA,skB,sharedKeyA,sharedKeyB;\n\n    generatorValue = BigInteger.valueOf(gValue);\n    primeValue = BigInteger.valueOf(pValue);\n    long SecretKeyA=generateSKA();\n    long SecretKeyB=generateSKB();\n    skA = BigInteger.valueOf(SecretKeyA);\n    skB = BigInteger.valueOf(SecretKeyB);\n    biA=generatePkA(generatorValue,primeValue,SecretKeyA);\n    biB=generatePkB(generatorValue,primeValue,SecretKeyB);\n    sharedKeyA = calculateSharedKey(biB,skA,primeValue);\n    sharedKeyB = calculateSharedKey(biA,skB,primeValue);\n\n    System.out.println(\"the safe prime is\"+primeValue);\n    System.out.println(\"the generator of the safe prime is \"+generatorValue);\n    System.out.println(\"the public key of A is \"+generatePkA(generatorValue,primeValue,SecretKeyA));\n    System.out.println(\"the public key of B is \"+generatePkB(generatorValue,primeValue,SecretKeyB));\n    System.out.println(\"the shared key for A is\"+calculateSharedKey(biB,skA,primeValue));\n    System.out.println(\"the shared key for B is\"+calculateSharedKey(biA,skB,primeValue));\n    System.out.println(\"The secret key for A is\"+generateSKA());\n\n    //createKey();\n    String getAValue=sharedKeyA.toString();\n    String getBValue=sharedKeyB.toString();\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n    md.update(getAValue.getBytes());\n\n    byte byteData[] = md.digest();\n    StringBuffer sb = new StringBuffer();\n\n    for(int i=0;i<byteData.length;i++)\n    {\n        sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n    }\n\n    String getHexValue = sb.toString();\n    System.out.println(\"hex format in SHA-256 is \"+getHexValue);\n\n    //createSpecificKey(biG,biP);\n\n    byte [] key = getAValue.getBytes(\"UTF-8\");\n\n    MessageDigest sha = MessageDigest.getInstance(\"SHA-256\");\n\n    key =  sha.digest(key);\n    key = Arrays.copyOf(key, 16);\n    SecretKeySpec secretKeySpec =  new SecretKeySpec(key,\"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n\n    CipherInputStream cipt = new CipherInputStream(new FileInputStream(new File(\"C:\\\\Users\\\\Larry\\\\Desktop\\\\Java\\\\diffie hellman\\\\src\\\\jessica.jpg\")),cipher); // enter your filename here\n    FileOutputStream fop=new FileOutputStream(new File(\"C:\\\\Users\\\\Larry\\\\Desktop\\\\Java\\\\diffie hellman\\\\src\\\\testEncrypt.jpg\"));\n\n\n\n    int i;\n    while((i=cipt.read())!= -1)\n    {\n        fop.write(i);\n    }\n\n    cipher.init(Cipher.DECRYPT_MODE,secretKeySpec);\n\n    CipherInputStream cipt2 = new CipherInputStream(new FileInputStream(new File(\"C:\\\\Users\\\\Larry\\\\Desktop\\\\Java\\\\diffie hellman\\\\src\\\\testEncrypt.jpg\")),cipher); // encryption of image\n    FileOutputStream fop2 = new FileOutputStream(new File(\"C:\\\\Users\\\\Larry\\\\Desktop\\\\Java\\\\diffie hellman\\\\src\\\\testDecrypt.jpg\"));//decryption of images\n\n    int j;\n    while((j=cipt2.read())!=-1)\n    {\n        fop2.write(j);\n    }\n\n\n\n\n\n}\n\npublic static BigInteger calculateSharedKey(BigInteger pk , BigInteger sk, BigInteger safePrime)\n{\n    BigInteger sharedKey;\n\n    sharedKey = pk.modPow(sk, safePrime);\n\n    return sharedKey;\n}\n\n\npublic static long generateSKA()\n{\n    Random randomGenerator2=new Random();\n    long SKa = randomGenerator2.nextInt(1000000000);\n\n    return SKa;\n}\n\npublic static long generateSKB()\n{\n    Random randomGenerator3=new Random();\n    long SKb = randomGenerator3.nextInt(10000000);\n\n    return SKb;\n}\n\n\npublic static BigInteger generatePkA(BigInteger g,BigInteger p,long skA)\n{\n    BigInteger Pka,SK;\n    long secretKeyA = skA;\n\n    SK = BigInteger.valueOf(secretKeyA);\n\n    Pka=g.modPow(SK, p);\n\n    return Pka;\n}\n\n\npublic static BigInteger generatePkB(BigInteger g,BigInteger p,long skB)\n{\n    BigInteger Pkb,SK;\n    long secretKeyB = skB;\n    SK = BigInteger.valueOf(secretKeyB);\n    Pkb=g.modPow(SK, p);\n    return Pkb;\n}\n", "idx": 1867}
{"project": "cipher", "commit_id": "Snippet22754788_5152.java", "target": 0, "func": "final Path origFile = Paths.get(\"C:\\\\3.txt\");\nfinal byte[] contents = Files.readAllBytes(origFile);\n\n// Get the KeyGenerator\n\n   KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n   kgen.init(128); // 192 and 256 bits may not be available\n\n\n// Generate the secret key specs.\n   SecretKey skey = kgen.generateKey();\n   byte[] raw = skey.getEncoded();\n\n   SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n\n// Instantiate the cipher\n\n   Cipher cipher = Cipher.getInstance(\"AES\");\n\n   cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n   byte[] encrypted = cipher.doFinal(contents.toString().getBytes());\n\n   System.out.println(\"encrypted string: \" + encrypted.toString());\n\n   cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n   byte[] original =cipher.doFinal(encrypted);\n\n   String originalString = new String(original);\n   System.out.println(\"Original string: \" +originalString);\n\n   final Path newFile = Paths.get(\"C:\\\\3encrypted.aes\");\n   Files.write(newFile, encrypted, StandardOpenOption.CREATE);\n\n     }\n", "idx": 1868}
{"project": "cipher", "commit_id": "Snippet29471097_11474.java", "target": 0, "func": " private static final String ALGORITHM = \"AES\";\n private static final byte[] keyValue =\n        new byte[] { 'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };\n\n\n public String encrypt(String valueToEnc) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGORITHM);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encValue = c.doFinal(valueToEnc.getBytes());\n    // String encryptedValue = new Base64.encoder();\n\n    return Base64.encodeToString(encValue, Base64.DEFAULT);\n}\n\npublic String decrypt(String encryptedValue) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGORITHM);\n    c.init(Cipher.DECRYPT_MODE, key);\n    //byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n    byte[] decordedValue = Base64.decode(encryptedValue, Base64.DEFAULT);\n\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    return decryptedValue;\n}\n", "idx": 1869}
{"project": "cipher", "commit_id": "Snippet45295240_27413.java", "target": 0, "func": "public static void decrypt(FileInputStream fis,FileOutputStream fos ) throws IOException, NoSuchAlgorithmException,\n            NoSuchPaddingException, InvalidKeyException {\n        // FileInputStream fis = new FileInputStream(\"data/encrypted\");\n        // FileOutputStream fos = new FileOutputStream(\"data/decrypted\");\n        String password =\"passwordProtectd\";\n        byte[] inputByte = password.getBytes(\"UTF-8\");\n        SecretKeySpec sks = new SecretKeySpec(inputByte, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, sks);\n        CipherInputStream cis = new CipherInputStream(fis, cipher);\n        int b;\n        byte[] d = new byte[8];\n        while((b = cis.read(d)) != -1) {\n            fos.write(d, 0, b);\n        }\n        fos.flush();\n        fos.close();\n        cis.close();\n    }\n", "idx": 1870}
{"project": "cipher", "commit_id": "Snippet9415469_33891.java", "target": 0, "func": "import java.awt.image.*;\nimport java.io.*;\nimport java.security.*;\nimport java.security.spec.InvalidKeySpecException;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\nimport javax.swing.*;\n\n/**\n*\n* @author Lance Gerday\n*/\npublic class Encrypt {\n\n\u00a0\u00a0\u00a0private static final String ALGORITHM = \"AES\";\n\u00a0\u00a0\u00a0public static byte[] keyValue;\n\u00a0\u00a0\u00a0// 500 KB max\n\u00a0\u00a0\u00a0public static byte[] valuesRead = new byte[512000];\n\n\u00a0\u00a0\u00a0public static void encrypt(File f) throws Exception {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FileInputStream in = null;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FileOutputStream out = null;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0in = new FileInputStream(f);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Key key = generateKey();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cipher c = Cipher.getInstance(ALGORITHM);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c.init(Cipher.ENCRYPT_MODE, key);//my code seems to fail here\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0String name = f.getName();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0String newFileName = name.substring(0, name.lastIndexOf(\".\"))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \".enc\" + name.substring(name.lastIndexOf(\".\"), name.length());\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0File newFile = new File(f.getParentFile(), newFileName);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out = new FileOutputStream(newFile);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//reads the file into valueToEnc and returns the number of bytes read\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0valuesRead = new byte[Integer.MAX_VALUE];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int numberRead = in.read(valuesRead);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyValue = new byte[numberRead];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < numberRead; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyValue[i] = valuesRead[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0byte[] encValue = c.doFinal(keyValue);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0String encryptedValue = new BASE64Encoder().encode(encValue);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out.write(encryptedValue.getBytes());\n\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0public static void decrypt(File f) throws Exception {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Key key = generateKey();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cipher c = Cipher.getInstance(ALGORITHM);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c.init(Cipher.DECRYPT_MODE, key);\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FileInputStream in = null;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FileOutputStream out = null;\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (f.canRead()) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0in = new FileInputStream(f);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0String name = f.getName();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0String newFileName = name.substring(0, name.lastIndexOf(\".enc\"));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0File newFile = new File(f.getParentFile(), newFileName);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out = new FileOutputStream(newFile);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//reads the file into valueToEnc and returns the number of bytes read\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0valuesRead = new byte[Integer.MAX_VALUE];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int numberRead = in.read(valuesRead);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyValue = new byte[numberRead];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < numberRead; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyValue[i] = valuesRead[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0String encryptedValue = new String(keyValue);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0byte[] decValue = c.doFinal(decordedValue);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out.write(decValue);\n\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0private static Key generateKey() throws Exception {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Key key = new SecretKeySpec(keyValue, ALGORITHM);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return key;\n\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0public static void setKeyValue(File f) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BufferedImage img = null;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0img = javax.imageio.ImageIO.read(f);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} catch (Exception e) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0JOptionPane.showMessageDialog(null, \"Fail error at line 92\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Raster r = img.getData();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int[] data = r.getPixels(r.getMinX(), r.getMinY(), r.getWidth(), r.getHeight(), (int[]) null);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int a : data) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int dataLength = data.length;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyValue = new byte[dataLength << 2];\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < dataLength; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int x = data[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int k = i << 2;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyValue[k++] = (byte) ((x >>> 0) & 0xff);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyValue[k++] = (byte) ((x >>> 8) & 0xff);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyValue[k++] = (byte) ((x >>> 16) & 0xff);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyValue[k++] = (byte) ((x >>> 24) & 0xff);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0}\n}\n", "idx": 1871}
{"project": "cipher", "commit_id": "Snippet26400365_8539.java", "target": 0, "func": "public class EncryptionHelper {\n\n// Encrypts string and encode in Base64\npublic static String encryptText(String plainText,String key, String IV) throws Exception {\n   // ---- Use specified 3DES key and IV from other source --------------\n    byte[] plaintext = plainText.getBytes();//input\n    byte[] tdesKeyData = key.getBytes();// your encryption key\n\n    byte[] myIV = IV.getBytes();// initialization vector\n\n    Cipher c3des = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    SecretKeySpec myKey = new SecretKeySpec(tdesKeyData, \"DESede\");\n    IvParameterSpec ivspec = new IvParameterSpec(myIV);\n\n    c3des.init(Cipher.ENCRYPT_MODE, myKey, ivspec);\n    byte[] cipherText = c3des.doFinal(plaintext);\n    String encryptedString = Base64.encodeToString(cipherText,\n            Base64.DEFAULT);\n    // return Base64Coder.encodeString(new String(cipherText));\n    return encryptedString;\n}\n", "idx": 1872}
{"project": "cipher", "commit_id": "Snippet33035035_15053.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class AES\n{\npublic static SecretKeySpec makeKey(String schl\u00fcssel) throws NoSuchAlgorithmException, UnsupportedEncodingException\n{\n    byte[] key = (schl\u00fcssel).getBytes(\"UTF-8\");\n    MessageDigest sha = MessageDigest.getInstance(\"SHA\");\n    key = sha.digest(key);\n    key = Arrays.copyOf(key, 16);\n    return new SecretKeySpec(key, \"AES\");\n}\n\n\npublic static String encryptString(String text, SecretKeySpec schl\u00fcssel) throws Exception\n{\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, schl\u00fcssel);\n    byte[] encrypted = cipher.doFinal(text.getBytes());\n\n    BASE64Encoder myEncoder = new BASE64Encoder();\n    return myEncoder.encode(encrypted);\n}\n\n\npublic static String decryptString(String text, SecretKeySpec schl\u00fcssel) throws Exception\n{    \n    BASE64Decoder myDecoder2 = new BASE64Decoder();\n    byte[] crypted2 = myDecoder2.decodeBuffer(text);\n\n    Cipher cipher2 = Cipher.getInstance(\"AES\");\n    cipher2.init(Cipher.DECRYPT_MODE, schl\u00fcssel);\n    byte[] cipherData2 = cipher2.doFinal(crypted2);\n    return new String(cipherData2);\n}\n}\n", "idx": 1873}
{"project": "cipher", "commit_id": "Snippet18979978_1878.java", "target": 0, "func": "        // Sensitive information - message to be encrypted\n        byte[] date_of_exp = \"032019\".getBytes(); // Date of Expiration in form MMYYYY\n\n        //System.out.println(\"Card Number : \" + card_number); // Print original message\n\n        // Encrypt the text\n       byte[] date_of_expEncrypted = desCipher.doFinal(date_of_exp);\n\n        System.out.println(\"\");\n        System.out.println(\"Date of Expiration Encrypted : \" + date_of_expEncrypted); // Print the encrypted message\n        System.out.println(\"\");\n\n        // Initialize the same cipher for decryption\n        desCipher.init(Cipher.DECRYPT_MODE, myDesKey_2);\n\n        String date_of_expEncrypted_;\n        date_of_expEncrypted_ = DatatypeConverter.printBase64Binary(date_of_expEncrypted); \n        // SecretKey card_numberEncrypted_key;\n        // card_numberEncrypted_key = stringToSecretKey (card_numberEncrypted_, \"DES\");\n        SecretKey date_of_expEncrypted_key;\n        date_of_expEncrypted_key = new SecretKeySpec(date_of_expEncrypted, 0, 8, \"DES\");\n        System.out.println(\"\");\n        System.out.println(\"Date of expiration as secret key :\" + date_of_expEncrypted_key);\n        System.out.println(\"\");\n\n        // Decrypt the text\n        byte[] date_of_expDecrypted = desCipher.doFinal(date_of_expEncrypted);\n\n        System.out.println(\"Original Date of Expiration (decrypted) : \" + new String(date_of_expDecrypted)); // Print the decrypted Text\n        System.out.println(\"\");\n        System.out.println(\"\");\n        System.out.println(\"-----------------------------------------------------------------------------------\");\n        System.out.println(\"Further to Step 3\"); // Print the decrypted Text\n        System.out.println(\"-----------------------------------------------------------------------------------\"); // Print the decrypted Text\n        System.out.println(\"\");\n        System.out.println(\"\");\n\n\n\n\n    SecretKey myDesKey_3 = date_of_expEncrypted_key;\n\n    //Cipher desCipher_2; // New Cipher for iteration 2\n\n        // Create the cipher \n        //desCipher_2 = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\n        // Initialize the cipher for encryption\n        desCipher.init(Cipher.ENCRYPT_MODE, myDesKey_3);\n\n        // Sensitive information - message to be encrypted\n        byte[] service_code = \"318\".getBytes(); \n\n       // Encrypt the text\n       byte[] service_codeEncrypted = desCipher.doFinal(service_code);\n        System.out.println(\"\");\n        System.out.println(\"Service Code Encrypted : \" + service_codeEncrypted); // Print the encrypted message\n        System.out.println(\"\");\n        // Initialize the same cipher for decryption\n        desCipher.init(Cipher.DECRYPT_MODE, myDesKey_3);\n\n        // Decrypt the text\n        byte[] service_codeDecrypted = desCipher.doFinal(service_codeEncrypted);\n\n        System.out.println(\"Service Code decrypted : \" + new String(service_codeDecrypted)); // Print the decrypted Text\n        System.out.println(\"\");\n        System.out.println(\"\");\n        System.out.println(\"-----------------------------------------------------------------------------------\");\n        System.out.println(\"Finish!!!\"); // Print the decrypted Text\n        System.out.println(\"-----------------------------------------------------------------------------------\"); // Print the decrypted Text\n        System.out.println(\"\");\n        System.out.println(\"\");\n\n\n        //Integer bigInt = new Integer(\"Bwwhw34\".getBytes());\n        // int service_codeEncrypted_hashed = service_codeEncrypted.hashCode();\n        // System.out.println(\"hash code for Service Code Encrypted : \" + service_codeEncrypted_hashed);\n        // int service_codeEncrypted_hashed_2 = service_codeEncrypted_hashed.hashCode();\n\n        // byte[] service_code__ = service_codeEncrypted.getBytes(); \n        //  System.out.println(\"hash code for Service Code Encrypted and baseD  : \" + service_code__);\n\n\n\n    }catch(NoSuchAlgorithmException e){\n        e.printStackTrace();\n    }catch(NoSuchPaddingException e){\n        e.printStackTrace();\n    }catch(InvalidKeyException e){\n        e.printStackTrace();\n    }catch(IllegalBlockSizeException e){\n        e.printStackTrace();\n    }catch(BadPaddingException e){\n        e.printStackTrace();\n    } \n\n}\n", "idx": 1874}
{"project": "cipher", "commit_id": "Snippet47174603_29176.java", "target": 0, "func": "  public static String decryptIt(String value) {\n    try {\n        DESKeySpec keySpec = new DESKeySpec(new byte[]{105, 107, 18, 51, 114, 83, 51, 120, 121});//cryptoPass.getBytes(\"UTF8\"));\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey key = keyFactory.generateSecret(keySpec);\n\n        byte[] encrypedPwdBytes = Base64.decode(value, Base64.DEFAULT);\n        // cipher is not thread safe\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decrypedValueBytes = (cipher.doFinal(encrypedPwdBytes));\n\n        // Log.d(\"aa\", \"Decrypted: \" + value + \" -> \" + decrypedValue);\n        return new String(decrypedValueBytes);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return value;\n}\n", "idx": 1875}
{"project": "cipher", "commit_id": "Snippet6393502_32111.java", "target": 0, "func": "/**\n * Warning, this gives a false sense of security.  If an attacker has enough access to\n * acquire your password store, then he almost certainly has enough access to acquire your\n * source binary and figure out your encryption key.  However, it will prevent casual\n * investigators from acquiring passwords, and thereby may prevent undesired negative\n * publicity.\n */\npublic class ObscuredSharedPreferences implements SharedPreferences {\n    protected static final String UTF8 = \"utf-8\";\n    private static final char[] SEKRIT = ... ; // INSERT A RANDOM PASSWORD HERE.\n                                               // Don't use anything you wouldn't want to\n                                               // get out there if someone decompiled\n                                               // your app.\n\n\n    protected SharedPreferences delegate;\n    protected Context context;\n\n    public ObscuredSharedPreferences(Context context, SharedPreferences delegate) {\n        this.delegate = delegate;\n        this.context = context;\n    }\n\n    public class Editor implements SharedPreferences.Editor {\n        protected SharedPreferences.Editor delegate;\n\n        public Editor() {\n            this.delegate = ObscuredSharedPreferences.this.delegate.edit();                    \n        }\n\n        @Override\n        public Editor putBoolean(String key, boolean value) {\n            delegate.putString(key, encrypt(Boolean.toString(value)));\n            return this;\n        }\n\n        @Override\n        public Editor putFloat(String key, float value) {\n            delegate.putString(key, encrypt(Float.toString(value)));\n            return this;\n        }\n\n        @Override\n        public Editor putInt(String key, int value) {\n            delegate.putString(key, encrypt(Integer.toString(value)));\n            return this;\n        }\n\n        @Override\n        public Editor putLong(String key, long value) {\n            delegate.putString(key, encrypt(Long.toString(value)));\n            return this;\n        }\n\n        @Override\n        public Editor putString(String key, String value) {\n            delegate.putString(key, encrypt(value));\n            return this;\n        }\n\n        @Override\n        public void apply() {\n            delegate.apply();\n        }\n\n        @Override\n        public Editor clear() {\n            delegate.clear();\n            return this;\n        }\n\n        @Override\n        public boolean commit() {\n            return delegate.commit();\n        }\n\n        @Override\n        public Editor remove(String s) {\n            delegate.remove(s);\n            return this;\n        }\n    }\n\n    public Editor edit() {\n        return new Editor();\n    }\n\n\n    @Override\n    public Map<String, ?> getAll() {\n        throw new UnsupportedOperationException(); // left as an exercise to the reader\n    }\n\n    @Override\n    public boolean getBoolean(String key, boolean defValue) {\n        final String v = delegate.getString(key, null);\n        return v!=null ? Boolean.parseBoolean(decrypt(v)) : defValue;\n    }\n\n    @Override\n    public float getFloat(String key, float defValue) {\n        final String v = delegate.getString(key, null);\n        return v!=null ? Float.parseFloat(decrypt(v)) : defValue;\n    }\n\n    @Override\n    public int getInt(String key, int defValue) {\n        final String v = delegate.getString(key, null);\n        return v!=null ? Integer.parseInt(decrypt(v)) : defValue;\n    }\n\n    @Override\n    public long getLong(String key, long defValue) {\n        final String v = delegate.getString(key, null);\n        return v!=null ? Long.parseLong(decrypt(v)) : defValue;\n    }\n\n    @Override\n    public String getString(String key, String defValue) {\n        final String v = delegate.getString(key, null);\n        return v != null ? decrypt(v) : defValue;\n    }\n\n    @Override\n    public boolean contains(String s) {\n        return delegate.contains(s);\n    }\n\n    @Override\n    public void registerOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener onSharedPreferenceChangeListener) {\n        delegate.registerOnSharedPreferenceChangeListener(onSharedPreferenceChangeListener);\n    }\n\n    @Override\n    public void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener onSharedPreferenceChangeListener) {\n        delegate.unregisterOnSharedPreferenceChangeListener(onSharedPreferenceChangeListener);\n    }\n\n\n\n\n    protected String encrypt( String value ) {\n\n        try {\n            final byte[] bytes = value!=null ? value.getBytes(UTF8) : new byte[0];\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n            SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));\n            Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n            pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID).getBytes(UTF8), 20));\n            return new String(Base64.encode(pbeCipher.doFinal(bytes), Base64.NO_WRAP),UTF8);\n\n        } catch( Exception e ) {\n            throw new RuntimeException(e);\n        }\n\n    }\n\n    protected String decrypt(String value){\n        try {\n            final byte[] bytes = value!=null ? Base64.decode(value,Base64.DEFAULT) : new byte[0];\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n            SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));\n            Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n            pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID).getBytes(UTF8), 20));\n            return new String(pbeCipher.doFinal(bytes),UTF8);\n\n        } catch( Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n", "idx": 1876}
{"project": "cipher", "commit_id": "Snippet32548248_14663.java", "target": 0, "func": "Cipher.getInstance(\"DESede/ECB/ZeroPadding\", \"BC\")", "idx": 1877}
{"project": "cipher", "commit_id": "Snippet40210451_22125.java", "target": 0, "func": "private String encrypt(String value) {\n    try {\n        final byte[] bytes = value != null ? value.getBytes(UTF8) : new byte[0];\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID).getBytes(UTF8), 20));\n        return new String(Base64.encode(pbeCipher.doFinal(bytes), Base64.NO_WRAP), UTF8);\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}\nprivate String decrypt(String value) {\n    try {\n        final byte[] bytes = value != null ? Base64.decode(value, Base64.DEFAULT) : new byte[0];\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID).getBytes(UTF8), 20));\n        return new String(pbeCipher.doFinal(bytes), UTF8);\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}\n", "idx": 1878}
{"project": "cipher", "commit_id": "Snippet37569056_19526.java", "target": 0, "func": "public class Encryptor {\n\n    private static final String ALGORITHM = \"AES\";\n    private static final byte[] keyValue =\n            new byte[] { 'M', 'y', 'S', 'u', 'p', 'e', 'r', 'S',\n            'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };\n\n    public static String encrypt(String valueToEnc) throws Exception {\n        Key key = generateKey();\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encValue = cipher.doFinal(valueToEnc.getBytes());\n        return new BASE64Encoder().encode(encValue);\n    }\n\n    public static String decrypt(String encryptedValue) throws Exception {\n        Key key = generateKey();\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decodedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n        byte[] decValue = cipher.doFinal(decodedValue);\n        return new String(decValue);\n    }\n\n    private static Key generateKey() throws Exception {\n        return new SecretKeySpec(keyValue, ALGORITHM);\n    }\n}  \n", "idx": 1879}
{"project": "cipher", "commit_id": "Snippet4896232_31379.java", "target": 0, "func": "dcipher = Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");\n", "idx": 1880}
{"project": "cipher", "commit_id": "Snippet22923586_5315.java", "target": 0, "func": "import java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.spec.InvalidKeySpecException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.xml.bind.DatatypeConverter;\npublic class DESEncryptionDecryption {\n\nprivate static Cipher encryptCipher;\nprivate static Cipher decryptCipher;\n\npublic static void main(String[] args) throws InvalidKeySpecException {\ntry {\n\nString desKey = \"0123456789abcdef\"; // value from user\nbyte[] keyBytes = DatatypeConverter.parseHexBinary(desKey);\nSystem.out.println(keyBytes);\n\nSecretKeyFactory factory = SecretKeyFactory.getInstance(\"DES\");\nSecretKey key = factory.generateSecret(new DESKeySpec(keyBytes));\n\nencryptCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\nencryptCipher.init(Cipher.ENCRYPT_MODE, key);\nbyte[] encryptedData = encryptData(\"Confidential data\"); //String from user\n\nString s=encryptedData.toString();//String input to decrypt From user\nbyte[] bb=s.getBytes();\n\ndecryptCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\ndecryptCipher.init(Cipher.DECRYPT_MODE, key);\ndecryptData(bb); //Exception\n\n}catch (NoSuchAlgorithmException e) {\n       e.printStackTrace();\n      } catch (NoSuchPaddingException e) {\n       e.printStackTrace();\n      } catch (InvalidKeyException e) {\n       e.printStackTrace();\n      } catch (IllegalBlockSizeException e) {\n       e.printStackTrace();\n      } catch (BadPaddingException e) {\n       e.printStackTrace();\n      }}\n//method for encryption\nprivate static byte[] encryptData(String data)\n       throws IllegalBlockSizeException, BadPaddingException {\n      System.out.println(\"Data Before Encryption :\" + data);\n      byte[] dataToEncrypt = data.getBytes();\n      byte[] encryptedData = encryptCipher.doFinal(dataToEncrypt);\n      System.out.println(\"Encryted Data: \" + encryptedData);\n\n      return encryptedData;\n     }\n\n//method for decryption\n\nprivate static void decryptData(byte[] data)\nthrows IllegalBlockSizeException, BadPaddingException {\nbyte[] textDecrypted = decryptCipher.doFinal(data); //Exception trigered here\nSystem.out.println(\"Decryted Data: \" + new String(textDecrypted));\n}}\n", "idx": 1881}
{"project": "cipher", "commit_id": "Snippet19534916_2288.java", "target": 0, "func": "import it.sauronsoftware.base64.Base64;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class DES {\n\n    public static void main(String [] args) throws NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException\n    {\n        String msg=\"This is a secret message\";\n        byte [] msgBytes=msg.getBytes();        \n        byte [] keyBytes  = {(byte)0xFE, (byte)0xDC, (byte)0xBA, (byte)0x98, (byte)0x76, (byte)0x54, (byte)0x32, (byte)0x10};\n        SecretKeySpec myDesKey = new SecretKeySpec(keyBytes, \"DES\");\n\n        //to encrypt a message\n        String cipher=encryptMsg(msgBytes, myDesKey);\n\n        //to decrypt a message\n        String plain = decryptMsg(cipher.getBytes(), myDesKey);\n\n        System.out.println(\"Original Message: \"+ msg);\n        System.out.println(\"Encrypted Message: \"+ cipher);\n        System.out.println(\"Decrypted Message: \"+ plain);\n\n    } //end main\n\n    //encryption function\n    public static String encryptMsg(byte [] msgBytes, SecretKey myDesKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException\n    {\n        Cipher desCipher;\n        // Create the cipher \n        desCipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n        byte[] textEncrypted = desCipher.doFinal(msgBytes);\n\n        // converts to base64 for easier display.\n        byte[] base64Cipher = Base64.encode(textEncrypted);\n        return new String(base64Cipher);\n    } //end encryptMsg\n\n    public static String decryptMsg(byte [] cipherBytes, SecretKey myDesKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException\n    {\n        Cipher desCipher; \n        desCipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        desCipher.init(Cipher.DECRYPT_MODE, myDesKey);\n        byte[] textDecrypted=desCipher.doFinal(cipherBytes);\n\n        // converts to base64 for easier display.\n        byte[] base64Plain = Base64.encode(textDecrypted);\n        return new String(base64Plain);\n    } //end decryptMsg\n} //end class\n", "idx": 1882}
{"project": "cipher", "commit_id": "Snippet42155037_23993.java", "target": 0, "func": "public static String decrypt(String strEncrypted,String strKey) throws Exception{\n    String strData=\"\";\n\n    try {\n        SecretKeySpec skeyspec=new SecretKeySpec(strKey.getBytes(),\"Blowfish\");\n        Cipher cipher=Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.DECRYPT_MODE, skeyspec);\n        byte[] decrypted=cipher.doFinal(strEncrypted.getBytes());\n        strData=new String(decrypted);\n\n    } catch (Exception e) {\n        e.printStackTrace();\n        throw new Exception(e);\n    }\n    return strData;\n}\n", "idx": 1883}
{"project": "cipher", "commit_id": "Snippet12803298_36471.java", "target": 0, "func": "package main;\n\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\n\npublic class Prueba {\n\n    private static final String keyValue = \"fd<[;.7e/OC0W!d|\";\n    private static final String ALG = \"Blowfish\";\n\n    public static void main(String[] args) {\n        String text = \"some random text\";\n\n        try {\n            SecretKeySpec key = new SecretKeySpec(keyValue.getBytes(), ALG);\n            Cipher cipher = Cipher.getInstance(ALG);\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] encryptedBytes = cipher.doFinal(text.getBytes());\n            String encrypted = new String(encryptedBytes);\n\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] recoveredBytes = cipher.doFinal(encrypted.getBytes());\n            String recovered = new String(recoveredBytes);\n\n        } catch (NoSuchAlgorithmException nsa) {\n            nsa.printStackTrace();\n        } catch (NoSuchPaddingException nspe) {\n            nspe.printStackTrace();\n        } catch (InvalidKeyException ike) {\n            ike.printStackTrace();\n        } catch (BadPaddingException bpe) {\n            bpe.printStackTrace();\n        } catch (IllegalBlockSizeException ibse) {\n            ibse.printStackTrace();\n        } \n    }\n\n\n}\n", "idx": 1884}
{"project": "cipher", "commit_id": "Snippet43205977_25343.java", "target": 0, "func": "public static String decryptString(String src) throws Exception\n    {\n        String dst = \"\";\n\n            SecretKey secret_key = KeyGenerator.getInstance(\"DES\").generateKey();\n            AlgorithmParameterSpec alogrithm_specs = new IvParameterSpec(initialization_vector);\n            //encrypt = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n            //encrypt.init(Cipher.ENCRYPT_MODE, secret_key, alogrithm_specs);\n            decrypt = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n            decrypt.init(Cipher.DECRYPT_MODE, secret_key, alogrithm_specs);\n            //encrypt(new FileInputStream(plain), new FileOutputStream(cipher));\n            //decrypt(new FileInputStream(encryptedFile), new FileOutputStream(decryptedFile));\n            //System.out.println(\"End of Encryption/Decryption procedure!\");\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            CipherOutputStream cout = new CipherOutputStream(baos,encrypt);\n            cout.write(src.getBytes());\n            cout.flush();               //ByteOutputStream -> Write Encryption Text\n            cout.close(); \n            dst = DatatypeConverter.printHexBinary(baos.toByteArray());\n            return dst;\n    }\n", "idx": 1885}
{"project": "cipher", "commit_id": "Snippet761902_29744.java", "target": 0, "func": "public InputStream decrypt(InputStream is, byte[] password)\n  throws GeneralSecurityException, IOException\n{\n  /* Parse the \"salt\" value from the stream. */\n  byte[] header = new byte[16];\n  for (int idx = 0; idx < header.length;) {\n    int n = is.read(header, idx, header.length - idx);\n    if (n < 0)\n      throw new EOFException(\"File header truncated.\");\n    idx += n;\n  }\n  String magic = new String(header, 0, 8, \"US-ASCII\");\n  if (!\"Salted__\".equals(magic))\n    throw new IOException(\"Expected salt in header.\");\n\n  /* Compute the key and IV with OpenSSL's non-standard method. */\n  SecretKey secret;\n  IvParameterSpec iv;\n  byte[] digest = new byte[32];\n  try {\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n    md5.update(password);\n    md5.update(header, 8, 8);\n    md5.digest(digest, 0, 16);\n    md5.update(digest, 0, 16);\n    md5.update(password);\n    md5.update(header, 8, 8);\n    md5.digest(digest, 16, 16);\n    iv = new IvParameterSpec(digest, 24, 8);\n    DESedeKeySpec keySpec = new DESedeKeySpec(digest);\n    SecretKeyFactory factory = SecretKeyFactory.getInstance(\"DESede\");\n    secret = factory.generateSecret(keySpec);\n  }\n  finally {\n    Arrays.fill(digest, (byte) 0);\n  }\n\n  /* Initialize the cipher. */\n  Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n  cipher.init(Cipher.DECRYPT_MODE, secret, iv);\n  return new CipherInputStream(is, cipher);\n}\n", "idx": 1886}
{"project": "cipher", "commit_id": "Snippet24231213_6515.java", "target": 0, "func": "try {\n                        KeyStore keyStore=null;\n                        keyStore= KeyStore.getInstance(KeyStore.getDefaultType());\n                        char[] passwordKS=\"network\".toCharArray();\n\n                             SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n                             sr.setSeed(\"any data used as random seed\".getBytes());\n                             KeyGenerator kg = KeyGenerator.getInstance(\"AES\");\n                             kg.init(128, sr);\n                             key= kg.generateKey();\n                             keyToSave=key.getEncoded();\n                             sks = new SecretKeySpec(keyToSave, \"AES\");\n\n                             try\n                             {\n                             keyStore.load(null,null);\n                             keyStore.setKeyEntry(\"aliasKey\",key,passwordKS, null);\n\n                             }\n                             catch(Exception ex)\n                             {\n\n                             }\n                             FileOutputStream ksout=openFileOutput(\"keyStoreName\", Context.MODE_PRIVATE);\n                             keyStore.store(ksout, passwordKS);\n                             ksout.close();\n                         }\n\n\n                     } catch (Exception e) {\n                     }\n                byte[] userLongENC = null;\n                byte[] userLatENC=null;\n                try {\n                    Cipher c = Cipher.getInstance(\"AES\");\n                    c.init(Cipher.ENCRYPT_MODE,sks ); \n                    userLatENC = c.doFinal(userLat.getBytes());\n                    userLongENC = c.doFinal(userLong.getBytes());\n                } catch (Exception e) {\n                 }\n", "idx": 1887}
{"project": "cipher", "commit_id": "Snippet37133890_19071.java", "target": 0, "func": "public static String encrypt(String strToEncrypt)\n{\n    try\n    {\n        String secretKey = \"1234567890123456\";\n        DESKeySpec keySpec = new DESKeySpec(secretKey.getBytes(\"UTF8\"));\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey key = keyFactory.generateSecret(keySpec);\n        BASE64Encoder base64encoder = new BASE64Encoder();\n        byte[] cleartext = strToEncrypt.getBytes(\"UTF8\");\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        String encrypted = base64encoder.encode(cipher.doFinal(cleartext));\n        return encrypted;\n\n    }\n    catch (Exception e)\n    {\n        return e.getMessage();\n    }\n}\n", "idx": 1888}
{"project": "cipher", "commit_id": "Snippet9907052_34317.java", "target": 0, "func": "import java.io.*;\nimport java.security.*;\nimport javax.crypto.*;\nimport sun.misc.BASE64Encoder;\n\n\npublic class RCCC4 {\npublic static void main(String[] args) {\n    String strDataToEncrypt = new String();\n    String strCipherText = new String();\n    String strDecryptedText = new String();\n\n    try{ \n    KeyGenerator keyGen = KeyGenerator.getInstance(\"RC4\");\n    SecretKey secretKey = keyGen.generateKey();\n    Cipher aesCipher = Cipher.getInstance(\"RC4\");\n    aesCipher.init(Cipher.ENCRYPT_MODE,secretKey);\n    strDataToEncrypt = \"Hello World of Encryption using RC4 \";\n    byte[] byteDataToEncrypt = strDataToEncrypt.getBytes();\n    byte[] byteCipherText = aesCipher.doFinal(byteDataToEncrypt); \n    strCipherText = new BASE64Encoder().encode(byteCipherText);\n    System.out.println(\"Cipher Text generated using RC4 is \" +strCipherText);\n    aesCipher.init(Cipher.DECRYPT_MODE,secretKey,aesCipher.getParameters());\n    byte[] byteDecryptedText = aesCipher.doFinal(byteCipherText);\n    strDecryptedText = new String(byteDecryptedText);\n    System.out.println(\" Decrypted Text message is \" +strDecryptedText);\n    }\n    catch (NoSuchPaddingException noSuchPad)\n        {\n            System.out.println(\" No Such Padding exists \" + noSuchPad);\n        }\n\n    catch (InvalidKeyException invalidKey)\n        {\n                System.out.println(\" Invalid Key \" + invalidKey);\n        }\n\n    catch (BadPaddingException badPadding)\n        {\n                System.out.println(\" Bad Padding \" + badPadding);\n        }\n\n    catch (IllegalBlockSizeException illegalBlockSize)\n        {\n                System.out.println(\" Illegal Block Size \" + illegalBlockSize);\n        }\n\n    catch (InvalidAlgorithmParameterException invalidParam)\n        {\n                System.out.println(\" Invalid Parameter \" + invalidParam);\n        }\n\n}\n   }\n", "idx": 1889}
{"project": "cipher", "commit_id": "Snippet40485518_22333.java", "target": 0, "func": "  package encypt.com;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.security.*;\nimport java.security.spec.InvalidKeySpecException;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\n\npublic class Testing {\n\nprivate static final String ALGORITHM = \"AES\";\nprivate static final int ITERATIONS = 2;\nprivate static final byte[] keyValue = \n    new byte[] { 'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'};\n\npublic static String encrypt(String value, String salt) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGORITHM);  \n    c.init(Cipher.ENCRYPT_MODE, key);\n\n    String valueToEnc = null;\n    String eValue = value;\n    for (int i = 0; i < ITERATIONS; i++) {\n        valueToEnc = salt + eValue;\n        byte[] encValue = c.doFinal(valueToEnc.getBytes());\n        eValue = new BASE64Encoder().encode(encValue);\n    }\n    return eValue;\n}\n\npublic static String decrypt(String value, String salt) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGORITHM);\n    c.init(Cipher.DECRYPT_MODE, key);\n\n    String dValue = null;\n    String valueToDecrypt = value;\n    for (int i = 0; i < ITERATIONS; i++) {\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(valueToDecrypt);\n        byte[] decValue = c.doFinal(decordedValue);\n        dValue = new String(decValue).substring(salt.length());\n        valueToDecrypt = dValue;\n    }\n    return dValue;\n}\n\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, ALGORITHM);\n    // SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(ALGORITHM);\n    // key = keyFactory.generateSecret(new DESKeySpec(keyValue));\n    return key;\n}\n", "idx": 1890}
{"project": "cipher", "commit_id": "Snippet13067141_36690.java", "target": 0, "func": "public class Crypto {\n   public static String encrypt(String value, String key) throws GeneralSecurityException {\n    SecretKeySpec sks = new SecretKeySpec(hexStringToByteArray(key), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks, cipher.getParameters());\n    byte[] encrypted = cipher.doFinal(value.getBytes());\n    return byteArrayToHexString(encrypted);\n}\n\npublic static String decrypt(String message, String key) throws GeneralSecurityException {\n    SecretKeySpec sks = new SecretKeySpec(hexStringToByteArray(key), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    byte[] decrypted = cipher.doFinal(hexStringToByteArray(message));\n    return new String(decrypted);\n}   \n\nprivate static String byteArrayToHexString(byte[] b){\n    StringBuffer sb = new StringBuffer(b.length * 2);\n    for (int i = 0; i < b.length; i++){\n        int v = b[i] & 0xff;\n        if (v < 16) {\n            sb.append('0');\n        }\n        sb.append(Integer.toHexString(v));\n    }\n    return sb.toString().toUpperCase();\n}\n\nprivate static byte[] hexStringToByteArray(String s) {\n    byte[] b = new byte[s.length() / 2];\n    for (int i = 0; i < b.length; i++){\n        int index = i * 2;\n        int v = Integer.parseInt(s.substring(index, index + 2), 16);\n        b[i] = (byte)v;\n    }\n    return b;\n}\n  }\n", "idx": 1891}
{"project": "cipher", "commit_id": "Snippet37274768_19209.java", "target": 0, "func": "public class VincentFileCrypto {\n\npublic  byte[] encrypt(String seed, byte[] cleartext) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext);\n    //  return toHex(result);\n    return result;\n}\n\npublic  byte[] decrypt(String seed, byte[] encrypted) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = encrypted;\n    byte[] result = decrypt(rawKey, enc);\n    return result;\n}\n\n//done\nprivate  byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\nprivate  byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate  byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n", "idx": 1892}
{"project": "cipher", "commit_id": "Snippet39509662_21432.java", "target": 0, "func": "import java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.nio.charset.StandardCharsets;\nimport java.util.prefs.Preferences;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.xml.bind.DatatypeConverter;\n\npublic class Test {\n    private Test() {  } \n    /**\n     * gets the AES encryption key. \n     * @return\n     * @throws Exception\n     */\n    public static SecretKey getSecretEncryptionKey() throws Exception \n    {\n        KeyGenerator generator = KeyGenerator.getInstance(\"AES\");\n        generator.init(128); \n        SecretKey secKey = generator.generateKey();\n        return secKey;\n    } \n    /**\n     * Encrypts password in AES using the secret key.\n     * @param passWord\n     * @param secKey\n     * @return\n     * @throws Exception\n     */\n    public static byte[] encryptText(String passWord,SecretKey secKey) throws Exception \n    {        \n        Cipher aesCipher = Cipher.getInstance(\"AES\");\n        aesCipher.init(Cipher.ENCRYPT_MODE, secKey);\n        byte[] byteCipherText = aesCipher.doFinal(passWord.getBytes());\n        return byteCipherText;\n    }\n    /**\n     * Decrypts encrypted byte array using the key used for encryption.\n     * @param byteCipherText\n     * @param secKey\n     * @return\n     * @throws Exception\n     */\n    public static String decryptText(byte[] byteCipherText, SecretKey secKey) throws Exception \n    {\n        Cipher aesCipher = Cipher.getInstance(\"AES\");\n        aesCipher.init(Cipher.DECRYPT_MODE, secKey);\n        byte[] bytePlainText = aesCipher.doFinal(byteCipherText);\n        return new String(bytePlainText);\n    }\n    //converting byte[] to string\n    private static String bytesToString(byte[] bytesArray)\n    {         \n        StringBuffer stringBuffer = new StringBuffer();         \n        for (int i = 0; i < bytesArray.length; i++) {             \n            stringBuffer.append((char) bytesArray[i]);         \n        }         \n        return stringBuffer.toString();     \n    }\n\n    public static void main(String args[]) throws Exception \n    {\n        SecretKey secKey = getSecretEncryptionKey();        \n        String s = null;        \n        String Username = null;\n        String Password = null;     \n        String value = null;    \n        try \n        {\n            if(args[0] != null)\n                Username = args[0];\n            if(args[1] != null)\n                Password = args[1];     \n        }\n        catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"ArrayIndexOutOfBoundsException caught\");\n        }\n        finally {           \n        } \n        byte[] cipherText = encryptText(Password, secKey);\n        s = bytesToString(cipherText);      //junk value getting here, i'm expecting same encrypted value here even after converting byte[] to string\n        System.out.println(\"Encrypted cipherText = \" + cipherText);\n        System.out.println(\"Encrypted Password = \" + s);        \n        System.out.println(\"Done.\" );\n    }\n}\n", "idx": 1893}
{"project": "cipher", "commit_id": "Snippet20071012_2739.java", "target": 0, "func": "import java.net.URLEncoder;\nimport java.security.MessageDigest;\nimport java.util.Arrays;\nimport java.io.*;\nimport java.lang.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n\n    public class TRIPPLE_DES {\n\n\n        public static void main(String[] args) throws Exception {\n\n\n    String text = \"cardNumber=28293939493330&securityCode=123&cardExpiryMonth=07&cardExpiryYear=2013&cardHolderName=Test&transactionAmount=50.00&currencyCode=356&customerReferenceNo=9393938393938&cardProvider=VISA&name=Test&mobileNo=983345123412&email=test@test.com&contactNo=983345123412&password=wyzgames&amount=100&remoteIP=10.10.10.50&checkSum=92be84d25b60b3f9f233c074d12ade1ddef158cb369a0734afff3fb6adc9d7ddb4b26f7e6001563747a8d47457e713750e5802b4871cfbe70baca9304d4c385f\";\n\n\n         String codedtext = new TRIPPLE_DES().encrypt(text);\n         String decodedtext = new TRIPPLE_DES().decrypt(codedtext);\n\n\n         String encodedurl = URLEncoder.encode(codedtext,\"UTF-8\");\n         System.out.println(encodedurl);\n         System.out.println(decodedtext);\n        }\n\n\n        public String encrypt(String message) throws Exception {\n         final MessageDigest md = MessageDigest.getInstance(\"md5\");\n         final byte[] digestOfPassword = md.digest(\"HG58YZ3CR9\".getBytes(\"utf-8\"));\n         final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n\n\n         for (int j = 0, k = 16; j < 8;) {\n          keyBytes[k++] = keyBytes[j++];\n         }\n\n\n         final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n         final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n         final Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n         cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n\n         final byte[] plainTextBytes = message.getBytes(\"utf-8\");\n         final byte[] cipherText = cipher.doFinal(plainTextBytes);\n\n         return Base64.encodeBase64String(cipherText);\n        }\n\n\n        public String decrypt(String message) throws Exception\n        {\n         final MessageDigest md = MessageDigest.getInstance(\"md5\");\n         final byte[] digestOfPassword = md.digest(\"HG58YZ3CR9\".getBytes(\"utf-8\"));\n         final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n         for (int j = 0, k = 16; j < 8;) {\n          keyBytes[k++] = keyBytes[j++];\n         }\n\n\n         final SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n         final IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n         final Cipher decipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n         decipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n\n\n         byte[] byteMessage= Base64.decodeBase64(message);\n         final byte[] plainText = decipher.doFinal(byteMessage);\n\n\n         return new String(plainText, \"UTF-8\");\n        }\n    }\n", "idx": 1894}
{"project": "cipher", "commit_id": "Snippet22109799_4535.java", "target": 0, "func": " public static void desdecrypt(IOLogger log, byte[] datablock, String grouppw, ArrayList<byte[]> resp)\n      {\n        try\n          {\n            SecretKey ks = generatedessecretkey(grouppw);\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            cipher.init(Cipher.DECRYPT_MODE, ks);\n            byte[] b = cipher.doFinal(datablock);\n            resp.clear();\n            resp.add(b);\n            return;\n          }\n        catch (Exception e)\n          {\n          }\n      }\n", "idx": 1895}
{"project": "cipher", "commit_id": "Snippet10266078_34617.java", "target": 0, "func": "public class EncryptDecrypt \n\n{\npublic static String Password;\npublic static FileInputStream fileIn;\npublic static FileOutputStream fileOut;\npublic static boolean a = true;\n\npublic static void  Encrypt(String FileInName, String FileOutName ) throws    IOException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException\n{\n\n    //There are three methods via which u can give a password. First direct input, second random text;\n    //third given by user during execution of the program.\n    //Password = \"ThisShoouldWork\"; // to Use the first method, un-comment this line and comment the rest of the methods.\n\n    Password = JOptionPane.showInputDialog(\"Set The Password\"); //To use second method , un-comment this line and comment the rest of the methods.\n\n    /*while(a)                      //to use third method, un-comment this \"block\" and comment the rest of the methods.\n    {\n\n    String setPassword = JOptionPane.showInputDialog(null, \"Enter Your Password\");\n    String confirmPassword = JOptionPane.showInputDialog(null, \"Re-Enter Your Password\");\n\n    if(setPassword.equals(confirmPassword))\n    {\n\n        Password = confirmPassword;\n        a = false;\n    }\n\n\n    else\n        JOptionPane.showMessageDialog(null, \"Passwords Dont Match !!\");\n\n    }*/\n\n\n    fileIn = new FileInputStream(FileInName);\n    fileOut = new FileOutputStream(FileOutName);\n\n    PBEKeySpec keySpec = new PBEKeySpec(Password.toCharArray());\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n    SecretKey passwordKey = keyFactory.generateSecret(keySpec);\n\n    byte[] salt = new byte[8];\n    Random rnd = new Random();\n    rnd.nextBytes(salt);\n    int iterations = 100;\n\n    PBEParameterSpec parameterSpec = new PBEParameterSpec(salt, iterations);\n\n    Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n    cipher.init(Cipher.ENCRYPT_MODE, passwordKey, parameterSpec);\n    fileOut.write(salt);\n\n    byte[] input = new byte[64];\n    int bytesRead;\n\n        while ((bytesRead = fileIn.read(input)) != -1)\n        {\n\n             byte[] output = cipher.update(input, 0, bytesRead);\n             if (output != null) fileOut.write(output);\n        }\n\n    byte[] output = cipher.doFinal();\n\n        if (output != null) fileOut.write(output);\n\n    fileIn.close();\n    fileOut.flush();\n    fileOut.close();\n\n}\n", "idx": 1896}
{"project": "cipher", "commit_id": "Snippet28024135_10157.java", "target": 0, "func": "// bytes to encrypt\nbyte[] input;\n\n// the key and the initialization vector\nbyte[] keyBytes;\nbyte[] ivBytes;\n\n// initialize the Cipher\nSecretKeySpec key = new SecretKeySpec(keyBytes, \"DES\");\nIvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\nCipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n// encryption\ncipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);\nbyte[] encrypted= new byte[cipher.getOutputSize(input.length)];\nint enc_len = cipher.update(input, 0, input.length, encrypted, 0);\nenc_len += cipher.doFinal(encrypted, enc_len);\n\n// decryption\ncipher.init(Cipher.DECRYPT_MODE, key, ivSpec);\nbyte[] decrypted = new byte[cipher.getOutputSize(enc_len)];\nint dec_len = cipher.update(encrypted, 0, enc_len, decrypted, 0);\ndec_len += cipher.doFinal(decrypted, dec_len);\n", "idx": 1897}
{"project": "cipher", "commit_id": "Snippet23387143_5755.java", "target": 0, "func": "public static String encryptPassword(String pass) {\n\n        public static final String DESKEY = \"REPPIFY_ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n            System.out.println(\"Here is my password = \"+pass);\n        DESKeySpec keySpec = null;\n        SecretKeyFactory keyFactory = null;\n        SecretKey key = null;\n        Cipher cipher = null;\n        BASE64Encoder base64encoder = new BASE64Encoder();\n\n        byte[] cleartext = null;\n        String encrypedPwd = null;\n            String pass = \"ankit@123\";\n\n        try {\n            keySpec = new DESKeySpec(DESKEY.getBytes(\"UTF8\"));\n            keyFactory = SecretKeyFactory.getInstance(\"DES\");\n            key = keyFactory.generateSecret(keySpec);\n            if(pass!=null) {\n                cleartext = pass.getBytes(\"UTF8\");\n                cipher = Cipher.getInstance(\"DES\");\n                cipher.init(Cipher.ENCRYPT_MODE, key);\n                encrypedPwd = base64encoder.encode(cipher.doFinal(cleartext));\n            }\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (InvalidKeySpecException e) {\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        } // cipher is not thread safe \n        catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"Here I am printing encrypted pwd = \"+encrypedPwd);\n        return encrypedPwd;\n    }\n", "idx": 1898}
{"project": "cipher", "commit_id": "Snippet11932162_35911.java", "target": 0, "func": " package encypt.com;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.security.*;\nimport java.security.spec.InvalidKeySpecException;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\n\npublic class Testing {\n\nprivate static final String ALGORITHM = \"AES\";\nprivate static final int ITERATIONS = 2;\nprivate static final byte[] keyValue = \n    new byte[] { 'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'};\n\npublic static String encrypt(String value, String salt) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGORITHM);  \n    c.init(Cipher.ENCRYPT_MODE, key);\n\n    String valueToEnc = null;\n    String eValue = value;\n    for (int i = 0; i < ITERATIONS; i++) {\n        valueToEnc = salt + eValue;\n        byte[] encValue = c.doFinal(valueToEnc.getBytes());\n        eValue = new BASE64Encoder().encode(encValue);\n    }\n    return eValue;\n}\n\npublic static String decrypt(String value, String salt) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGORITHM);\n    c.init(Cipher.DECRYPT_MODE, key);\n\n    String dValue = null;\n    String valueToDecrypt = value;\n    for (int i = 0; i < ITERATIONS; i++) {\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(valueToDecrypt);\n        byte[] decValue = c.doFinal(decordedValue);\n        dValue = new String(decValue).substring(salt.length());\n        valueToDecrypt = dValue;\n    }\n    return dValue;\n}\n\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, ALGORITHM);\n    // SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(ALGORITHM);\n    // key = keyFactory.generateSecret(new DESKeySpec(keyValue));\n    return key;\n}\n\n\npublic static void main(String[] args) throws Exception {\n\n\n    String password = \"mypassword\";\n    String salt = \"this is a simple clear salt\";\n    String passwordEnc = Testing.encrypt(password, salt);\n    String passwordDec = Testing.decrypt(passwordEnc, salt);\n\n   System.out.println(\"Salt Text : \" + salt);\n   System.out.println(\"Plain Text : \" + password);\n   System.out.println(\"Encrypted : \" + passwordEnc);\n   System.out.println(\"Decrypted : \" + passwordDec);\n}\n}\n", "idx": 1899}
{"project": "cipher", "commit_id": "Snippet39271415_21152.java", "target": 0, "func": "public class Encrypter {\n\n    Cipher ecipher;\n    Cipher dcipher;\n\n    SecretKeySpec key = new SecretKeySpec(\"missyou1\".getBytes(), \"DES\");\n\n    public DesEncrypter() throws Exception {\n        ecipher = Cipher.getInstance(\"DES\");\n        dcipher = Cipher.getInstance(\"DES\");\n        ecipher.init(Cipher.ENCRYPT_MODE, key);\n        dcipher.init(Cipher.DECRYPT_MODE, key);\n    }\n\n    public String encrypt(String str) throws Exception {\n        byte[] utf8 = str.getBytes(\"UTF8\");\n        byte[] enc = ecipher.doFinal(utf8);\n        return new sun.misc.BASE64Encoder().encode(enc);\n    }\n\n    public String decrypt(String str) throws Exception {\n        byte[] dec = new sun.misc.BASE64Decoder().decodeBuffer(str);\n\n        byte[] asd = new byte[(dec.length/8+1)*8];\n        for(int i = 0; i < dec.length; i++){\n            asd[i] = dec[i];\n        }\n        byte[] utf8 = dcipher.doFinal(asd);\n\n        return new String(utf8, \"UTF8\");\n    }\n}\n", "idx": 1900}
{"project": "cipher", "commit_id": "Snippet42683230_24716.java", "target": 0, "func": "    // Generate double length 3DES Master Key\n    KeyGenerator masterEncKeyGenerator = KeyGenerator.getInstance(\"DESede\");\n    masterEncKeyGenerator.init(112);\n    SecretKey masterKey = masterEncKeyGenerator.generateKey();\n\n    //Prepare random bytes\n    byte[] randomKeyValue = \"rn4yrbdy\".getBytes();\n\n    // Encrypt random bytes with the 3DES Master key\n    final Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, masterKey);\n    byte[] encryptedRandomValue = cipher.doFinal(randomKeyValue);\n\n    // Derive new key 3DES Key\n    SecretKeyFactory mySecretKeyFactory = SecretKeyFactory.getInstance(\"DESede\");\n    DESedeKeySpec myKeySpec = new DESedeKeySpec(encryptedRandomValue);\n    SecretKey derivedKey = mySecretKeyFactory.generateSecret(myKeySpec);\n", "idx": 1901}
{"project": "cipher", "commit_id": "Snippet4951865_31415.java", "target": 0, "func": "public String Encryption(String toEncrypt) throws Exception\n{\n    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n    EditText et = (EditText) findViewById(R.id.entry);\n    byte[] input = toEncrypt.getBytes();\n    byte[] keyBytes = \"hello\".getBytes();\n    // et.setText(\"in encryption\");\n    SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n    // et.setText(\"in encryption\");\n\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n\n    et.setText(\"in encryption\");\n    byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n    int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n    ctLength += cipher.doFinal(cipherText, ctLength);\n    // et.setText(\"in encryption\");\n    // return \"abc\";\n    return cipherText.toString();\n", "idx": 1902}
{"project": "cipher", "commit_id": "Snippet40527375_22371.java", "target": 0, "func": "private static byte[] encryptData(ByteArrayOutputStream data, byte[] symmetricKey) throws EncryptionException {\n        try {\n            SecretKey secKey = new SecretKeySpec(symmetricKey, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, secKey);\n            return cipher.doFinal(data.toByteArray());\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException | IllegalBlockSizeException |\n                InvalidKeyException |\n                BadPaddingException e) {\n            throw new EncryptionException(e);\n        }\n    }\n", "idx": 1903}
{"project": "cipher", "commit_id": "Snippet41332833_23299.java", "target": 0, "func": "public static String encrypt(String encodeKey, String inputFile) throws Exception {\n\n    byte[] input = getStringFromFile(inputFile).toString().getBytes(\"utf-8\");\n\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    byte[] thedigest = md.digest(encodeKey.getBytes(\"UTF-8\"));\n    SecretKeySpec skc = new SecretKeySpec(thedigest, \"AES/ECB/PKCS5Padding\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skc);\n\n    byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n    int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n    String data = Base64.encodeToString(cipherText, Base64.DEFAULT);\n\n    Log.d(\"Crypto | Length\", String.valueOf(ctLength));\n    Log.d(\"Crypto | Keypass\", encodeKey);\n\n    return data;\n}\n", "idx": 1904}
{"project": "cipher", "commit_id": "Snippet19875489_2549.java", "target": 0, "func": "    public class MainActivity extends Activity {\n\n//@SuppressWarnings(\"unchecked\")\nprivate static final String TAG = \"MyActivity\";\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);       \n\n     AlertDialog.Builder alert = new AlertDialog.Builder(this);\n\n        alert.setTitle(\"Title\");\n        alert.setMessage(\"Message\");\n\n        // Set an EditText view to get user input \n        final EditText input = new EditText(this);\n        alert.setView(input);\n\n        alert.setPositiveButton(\"Ok\", new\n      DialogInterface.OnClickListener()   {\n        public void onClick(DialogInterface dialog, int whichButton) {\n        String value = input.getText().toString();\n        try {\n                encrypt(value);\n            } catch (InvalidKeyException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (NoSuchAlgorithmException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (NoSuchPaddingException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }});\n\n        alert.setNegativeButton(\"Cancel\", new\n                   DialogInterface.OnClickListener() {\n             public void onClick(DialogInterface dialog, int\n          whichButton) {\n                 // Canceled.\n            }\n            });\n\n             alert.show();  }               \n    static void encrypt(String Value) throws IOException,\n       NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n\n    final String libPath = Environment.getExternalStorageDirectory() + \"/shoaib.jar\";\n    // Here you read the cleartext.\n    FileInputStream fis = new FileInputStream(libPath);\n    // This stream write the encrypted text. \n    FileOutputStream fos = new \n    FileOutputStream(Environment.getExternalStorageDirectory() + \"/encrypted.jar\");\n\n    // Length is 16 byte\n    SecretKeySpec sks = new SecretKeySpec(Value.getBytes(), \"AES\");\n    Log.d(TAG,Value);\n    // Create cipher\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    // Wrap the output stream\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    // Write bytes\n    int b;\n    byte[] d = new byte[8];\n    while((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    cos.flush();\n    cos.close();\n    fis.close();\n    }\n", "idx": 1905}
{"project": "cipher", "commit_id": "Snippet33640751_15705.java", "target": 0, "func": "public class PasswordEncryption {\n\n    public static final String AES = \"AES\";\n\n    public static String encrypt(String value, File keyFile)\n            throws GeneralSecurityException, IOException {\n        if (!keyFile.exists()) {\n            KeyGenerator keyGen = KeyGenerator\n                    .getInstance(PasswordEncryption.AES);\n\n            keyGen.init(128);\n            SecretKey sk = keyGen.generateKey();\n            FileWriter fw = new FileWriter(keyFile);\n            fw.write(byteArrayToHexString(sk.getEncoded()));\n            fw.flush();\n            fw.close();\n        }\n\n        SecretKeySpec sks = getSecretKeySpec(keyFile);\n        Cipher cipher = Cipher.getInstance(PasswordEncryption.AES);\n        cipher.init(Cipher.ENCRYPT_MODE, sks, cipher.getParameters());\n        byte[] encrypted = cipher.doFinal(value.getBytes());\n        return byteArrayToHexString(encrypted);\n    }\n\n    public static String decrypt(String message, File keyFile)\n            throws GeneralSecurityException, IOException {\n        SecretKeySpec sks = getSecretKeySpec(keyFile);\n        Cipher cipher = Cipher.getInstance(PasswordEncryption.AES);\n        cipher.init(Cipher.DECRYPT_MODE, sks);\n        byte[] decrypted = cipher.doFinal(hexStringToByteArray(message));\n        return new String(decrypted);\n    }\n\n    private static SecretKeySpec getSecretKeySpec(File keyFile)\n            throws NoSuchAlgorithmException, IOException {\n        byte[] key = readKeyFile(keyFile);\n        SecretKeySpec sks = new SecretKeySpec(key, PasswordEncryption.AES);\n        return sks;\n    }\n\n    private static byte[] readKeyFile(File keyFile)\n            throws FileNotFoundException {\n        @SuppressWarnings(\"resource\")\n        Scanner scanner = new Scanner(keyFile).useDelimiter(\"\\\\Z\");\n        String keyValue = scanner.next();\n        scanner.close();\n        return hexStringToByteArray(keyValue);\n    }\n\n    private static String byteArrayToHexString(byte[] b) {\n        StringBuffer sb = new StringBuffer(b.length * 2);\n        for (int i = 0; i < b.length; i++) {\n            int v = b[i] & 0xff;\n            if (v < 16) {\n                sb.append('0');\n            }\n            sb.append(Integer.toHexString(v));\n        }\n        return sb.toString().toUpperCase();\n    }\n\n    private static byte[] hexStringToByteArray(String s) {\n        byte[] b = new byte[s.length() / 2];\n        for (int i = 0; i < b.length; i++) {\n            int index = i * 2;\n            int v = Integer.parseInt(s.substring(index, index + 2), 16);\n            b[i] = (byte) v;\n        }\n        return b;\n    }\n\n    public static void main(String[] args) throws Exception {\n        final String KEY_FILE = \"/Users/xxx/key\";\n        final String PASSWORD_FILE = \"/Users/xxx/properties\";\n\n        String openPwd = \"my password is datasecurity\";\n        String openUser = \"a user is ME\";\n\n        Properties p1 = new Properties();\n\n        String encryptedPwd = PasswordEncryption.encrypt(openPwd, new File(\n                KEY_FILE));\n        String encryptedUser = PasswordEncryption.encrypt(openUser, new File(\n                KEY_FILE));\n        p1.put(\"password\",encryptedPwd);\n        p1.put(\"user\",encryptedUser);\n        p1.store(new FileWriter(PASSWORD_FILE),\"\");\n\n        // ==================\n        Properties p2 = new Properties();\n\n        p2.load(new FileReader(PASSWORD_FILE));\n        encryptedPwd = p2.getProperty(\"password\");\n        encryptedUser = p2.getProperty(\"user\");\n        System.out.println(encryptedPwd);\n        System.out.println(encryptedUser);\n        System.out.println(PasswordEncryption.decrypt(encryptedPwd, new File(\n                KEY_FILE)));\n        System.out.println(PasswordEncryption.decrypt(encryptedUser, new File(\n                KEY_FILE)));\n    }\n}\n", "idx": 1906}
{"project": "cipher", "commit_id": "Snippet19675946_2406.java", "target": 0, "func": "private void performDecryption(DocumentModel document)\n    {                               \n        byte[] keyBytes = generateByteArray(document.getEncryptionKey());\n\n\n        SecretKeySpec skeySpec = new SecretKeySpec(keyBytes, \"AES\");\n\n        File encryptedDocument = new File(getBookFolderDocumentName(document, document.getFileSuffix()));\n        File decryptedDocument = new File(BOOK_FOLDER + document.getGeneratedAssetName() + \"_decrypted\" + \".\" + document.getFileSuffix());\n\n        decryptedDocument.mkdirs();\n        if (decryptedDocument.exists())\n            decryptedDocument.delete();\n\n\n        Cipher cipher = null;    \n\n        try\n        {\n\n            cipher = Cipher.getInstance(\"AES/ECB/ZeroBytePadding\");\n            cipher.init(Cipher.DECRYPT_MODE, skeySpec);         \n        } \n        catch (NoSuchAlgorithmException noSuchAlgorithmEx)\n        {\n            Log.e(\"Decryption\", \"NoSuchAlgorithmException: \" + noSuchAlgorithmEx.getMessage());\n        }\n        catch (NoSuchPaddingException noSuchPaddingEx)\n        {\n            Log.e(\"Decryption\", \"NoSuchPaddingException: \" + noSuchPaddingEx.getMessage());\n        }\n        catch (InvalidKeyException invalidKeyEx)\n        {\n            Log.e(\"Decryption\", \"InvalidKeyException: \" + invalidKeyEx.getMessage());\n        } \n\n        FileInputStream encryptedFileStream = null;\n        FileOutputStream decryptedFileStream = null;\n\n\n        try\n        {\n\n            encryptedFileStream = new FileInputStream(encryptedDocument);\n            decryptedFileStream = new FileOutputStream(decryptedDocument);\n\n\n\n            long totalFileSize = encryptedDocument.length();\n            long totalDecrypted = 0;\n            int lastPercentage = -1;\n            int currentPercentage = 0;\n\n            byte[] encryptedBuffer = new byte[4096];\n            byte[] decryptedBuffer = new byte[4096];\n            int encryptedLength = 0;\n            int decryptedLength = 0;\n\n            while((encryptedLength = encryptedFileStream.read(encryptedBuffer)) > 0)\n            {   \n                while (encryptedLength % 16 != 0) // the code never lands in this loop\n                {                   \n                    encryptedBuffer[encryptedLength] = 0;\n                    encryptedLength++;\n                }\n\n                decryptedLength = cipher.update(encryptedBuffer, 0, encryptedLength, decryptedBuffer);\n\n\n                while (decryptedLength % 16 != 0) // the code never lands in this loop\n                {\n                    decryptedBuffer[decryptedLength] = 0;\n                    decryptedLength++;\n                }\n\n                decryptedFileStream.write(decryptedBuffer, 0, decryptedLength);\n\n\n                totalDecrypted += encryptedLength;\n\n                currentPercentage = (int)(((float)totalDecrypted / (float)totalFileSize) * 100f);\n\n                if (currentPercentage != lastPercentage)\n                {\n                    lastPercentage = currentPercentage;\n                    Log.i(\"Decryption\", \"Decrypting... \" + currentPercentage + \"%\");\n                }\n            }\n\n\n\n\n            Log.i(\"Decryption\", \"Finished decrypting!\");\n        }\n        catch (FileNotFoundException fileNotFoundEx)\n        {\n            Log.e(\"Decryption\", \"FileNotFoundException: \" + fileNotFoundEx.getMessage());\n        }\n        catch (IOException ioEx)\n        {\n            Log.e(\"Decryption\", \"IOException: \" + ioEx.getMessage());\n        } \n        catch (ShortBufferException e) \n        {       \n            e.printStackTrace();\n        }\n        finally\n        {\n\n        }\n\n        try \n        {                   \n            encryptedFileStream.close();\n            decryptedFileStream.close();\n            cipherOutputStream.close();         \n        } \n        catch (IOException e1) \n        {\n\n        }\n\n\n        document.setDecryptedFilePath(decryptedDocument.getAbsolutePath());\n\n\n\n        Log.i(\"Decryption\", \"Finished!\");\n    }\n", "idx": 1907}
{"project": "cipher", "commit_id": "Snippet45503448_27563.java", "target": 0, "func": "public class FileEncryptor {    \n    private static String filename;\n    private static String password;\n    private static FileInputStream inFile;\n    private static FileOutputStream outFile;\n    public static String tempFilename;\n    public static File tempFile;\n\n    public static File encryptFile(File f, String passkey) throws Exception {\n        if(f.isDirectory()) {\n            JOptionPane.showMessageDialog(null, \"file object is a directory\");\n            return null;\n        }\n        filename = f.getPath();\n        password = passkey;     \n        //Need to create a temporary file which is filled with the encrypted data.\n        tempFilename = filename + \".des\";\n        tempFile = new File(tempFilename);      \n        inFile = new FileInputStream(f);\n        outFile = new FileOutputStream(tempFile);       \n        // Use PBEKeySpec to create a key based on a password.\n        // The password is passed as a character array.\n        PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n        SecretKeyFactory sKeyFac = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey sKey = sKeyFac.generateSecret(keySpec);       \n        byte[] salt = new byte[8];\n        Random rnd = new Random();\n        rnd.nextBytes(salt);\n        int iterations = 100;       \n         //Create the parameter spec for this salt and iteration count\n        PBEParameterSpec parameterSpec = new PBEParameterSpec(salt, iterations);\n        //Create the cipher and initiate it for encryption\n        Cipher c = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        c.init(Cipher.ENCRYPT_MODE, sKey, parameterSpec);\n\n        //Need to write the salt into the file. It is required for decryption\n        outFile.write(salt);\n\n        //Read the file and encrypt its bytes\n        byte[] input = new byte[64];\n        int bytesRead;\n        while((bytesRead = inFile.read(input)) != -1) {\n            byte[] output = c.update(input, 0, bytesRead);\n            if(output != null) { outFile.write(output); }           \n        }\n\n        byte[] output = c.doFinal();\n        if(output != null) { outFile.write(output); }\n\n        //Closing the streams before exiting.\n        inFile.close();\n        outFile.flush();\n        outFile.close();\n\n        return tempFile;\n    }\n\n}\n", "idx": 1908}
{"project": "cipher", "commit_id": "Snippet4851361_31341.java", "target": 0, "func": "// Create Key\nDESKeySpec desKeySpec = new DESKeySpec(key);\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\nSecretKey secretKey = keyFactory.generateSecret(desKeySpec);\n\n// Create Cipher\nCipher desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\ndesCipher.init(Cipher.ENCRYPT_MODE, secretKey);\n", "idx": 1909}
{"project": "cipher", "commit_id": "Snippet24124091_6423.java", "target": 0, "func": "byte[] keyStart = \"qweroiwejrwoejlsifeoisrn\".getBytes(); // Random character string\n\nbyte[] toEncrypt = myMessageString.getBytes();\n\nkeyGen = KeyGenerator.getInstance(\"AES\");\nsr = SecureRandom.getInstance(\"SHA1PRNG\");\nsr.setSeed(keyStart);\nkeyGen.init(128, sr);\nSecretKey secretKey = keyGen.generateKey();\nbyte[] secretKeyByte = secretKey.getEncoded();\n\nSecretKeySpec skeySpec = new SecretKeySpec(secretKeyByte, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec);\ncipher.doFinal(toEncrypt);\n", "idx": 1910}
{"project": "cipher", "commit_id": "Snippet14260734_37598.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\npublic class EncryptDecryptExample\n{\n    // \"thisIsASecretKey\";\n    private static byte[] key = { 0x74, 0x68, 0x69, 0x73, 0x49, 0x73, 0x41, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,\n            0x79 };\n\n    public static void main(String[] args) throws Exception\n    {\n        //********************WORKS**********************\n        String x = \"Hello\";\n        System.out.println(\"Plain Text: \" + x);\n        String e = EncryptString(x);\n        System.out.println(\"Encrypted: \" + e);\n        String d = decryptString(e);\n        System.out.println(\"Deccypted: \" + d);\n\n        //********************WORKS**********************\n        Byte b = 124;\n        System.out.println(\"Plain Byte: \"+b.toString());\n        String eb = EncryptString(b.toString());\n        System.out.println(\"Encrypted Byte: \"+eb);\n        String bd = decryptString(eb);\n        System.out.println(\"Decrypted Byte: \"+bd);\n\n        //********************DOESNT*WORK*********************\n        Byte[] bArray = {23, 42, 55};\n        System.out.println(\"Plain Byte Array: \"+bArray[0].toString()+\",\"+bArray[1].toString()+\",\"+bArray[2].toString());\n        String eba = EncryptString(bArray.toString());\n        System.out.println(\"Encrypted Byte Array: \"+eba.toString());\n        String deba = decryptString(eba.toString());\n        System.out.println(\"Decrypted Byte Array: \"+deba.getBytes()[0]);  //<--- Doesn't work\n        //*********************************************\n    }\n\n    public static String EncryptString(String strToEncrypt) throws Exception\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        String encryptedString = Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes()));\n        return encryptedString;\n    }\n\n    public static String decryptString(String strToDecrypt) throws Exception\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        String decryptedString = new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt)));\n        return decryptedString;\n    }\n\n}\n", "idx": 1911}
{"project": "cipher", "commit_id": "Snippet13869034_37321.java", "target": 0, "func": "/* class for crypting and decrypting a file */\nclass DESEncrypter\n{\nprivate Cipher encryptionCipher;\nprivate Cipher decryptionCipher;\n\npublic DESEncrypter (SecretKey key) throws Exception\n{\nencryptionCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\nencryptionCipher.init(Cipher.ENCRYPT_MODE, key);\ndecryptionCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\ndecryptionCipher.init(Cipher.DECRYPT_MODE, key);\n}\n\n/* write to 'out' the encryption of the information read from 'in' */\npublic String encrypt(String unencryptedString)\n{\n    String encryptedString = \"\";\n\n    try {\n        byte[] unencryptedByteArray = unencryptedString.getBytes(\"UTF8\");\n\n        byte[] encryptedBytes = this.encryptionCipher.doFinal(unencryptedByteArray);\n\n        encryptedString = new sun.misc.BASE64Encoder().encode(encryptedBytes);\n\n    } catch (Exception ex) {\n        Logger.getLogger(DESEncrypter.class.getName()).log(Level.SEVERE, null, ex);\n    }\n\n    return encryptedString;\n}\n\nprivate static String bytes2String(byte[] bytes)\n{\n\n    StringBuffer stringBuffer = new StringBuffer();\n    for (int i = 0; i < bytes.length; i++) \n    {\n        stringBuffer.append((char) bytes[i]);\n    }\n\n    return stringBuffer.toString();\n}\n\n/* write to 'out' the information obtained by decrypting the information read from 'in' */\npublic String decrypt (String encryptedString) throws UnsupportedEncodingException\n{\n    byte[] unencryptedByteArray = new byte[4096];\n\n    try {\n        // Encode bytes to base64 to get a string\n        byte[] decodedBytes = new sun.misc.BASE64Decoder().decodeBuffer(encryptedString);\n\n       // Decrypt\n       unencryptedByteArray = this.decryptionCipher.doFinal(decodedBytes);     \n    } catch (Exception ex) {\n        Logger.getLogger(DESEncrypter.class.getName()).log(Level.SEVERE, null, ex);\n    }\n\n    return bytes2String(unencryptedByteArray);\n}\n} \n", "idx": 1912}
{"project": "cipher", "commit_id": "Snippet27839578_9993.java", "target": 0, "func": "public AES()\n    {\n        try\n        {\n            Security.addProvider(new BouncyCastleProvider());\n            cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n        } catch (NoSuchProviderException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    public String doDecrypt(String key, String cipherText)\n    {\n        try\n        {\n            byte[] raw = key.getBytes(Charset.forName(\"UTF-8\"));\n            SecretKeySpec skey = new SecretKeySpec(raw, \"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, skey );\n            return new String(cipher.doFinal(Base64.decode(cipherText,Base64.DEFAULT)), Charset.forName(\"UTF-8\"));\n\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public String doEncrypt(String key, String plainText)\n    {\n        try\n        {\n            byte[] raw = key.getBytes(Charset.forName(\"UTF-8\"));\n            SecretKeySpec skey = new SecretKeySpec(raw, \"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skey );\n            return Base64.encodeToString(cipher.doFinal(plainText.getBytes(Charset.forName(\"UTF-8\"))),Base64.DEFAULT);\n\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n", "idx": 1913}
{"project": "cipher", "commit_id": "Snippet31570354_13707.java", "target": 0, "func": "public class EncryptDecrypt {\n\n    public void encryptor(String inputFilePath) {\n\n        FileOutputStream fos = null;\n        File file = new File(inputFilePath);\n        String keyString = \"140405PX_0.$88\";\n        String algorithm = \"DESede\";\n        try {\n            FileInputStream fileInputStream = new FileInputStream(file);\n            byte[] fileByteArray = new byte[fileInputStream.available()];\n            fileInputStream.read(fileByteArray);\n            for (byte b : fileByteArray) {\n                System.out.println(b);\n            }\n            SecretKey secretKey = getKey(keyString);\n            Cipher cipher = Cipher.getInstance(algorithm);\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            ObjectOutputStream objectOutputStream = new ObjectOutputStream(new CipherOutputStream(new FileOutputStream(\"encrypt.file\"), cipher));\n            objectOutputStream.writeObject(fileByteArray);\n            objectOutputStream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void decryptor(String inputFilePath) {\n\n        String outputFilePath = \"decrypt.txt\";\n\n        String keyString = \"140405PX_0.$88\";\n        String algorithm = \"DESede\";\n        try {\n            File inputFileNAme = new File(inputFilePath);\n            FileInputStream fileInputStream = new FileInputStream(inputFileNAme);\n            FileOutputStream fileOutputStream = new FileOutputStream(outputFilePath);\n            SecretKey secretKey = getKey(keyString);\n            Cipher cipher = Cipher.getInstance(algorithm);\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            ObjectInputStream objectInputStream = new ObjectInputStream(new CipherInputStream(fileInputStream, cipher));\n            System.out.println(objectInputStream.available());\n            fileOutputStream.write((byte[]) objectInputStream.readObject());\n            fileOutputStream.flush();\n            fileOutputStream.close();\n            fileInputStream.close();\n            objectInputStream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public static SecretKey getKey(String message) throws Exception {\n        String messageToUpperCase = message.toUpperCase();\n        byte[] digestOfPassword = messageToUpperCase.getBytes();\n        byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n        return key;\n    }\n\n\n}\n", "idx": 1914}
{"project": "cipher", "commit_id": "Snippet41223999_23189.java", "target": 0, "func": "public class AESCrypt\n{\n    private static final String ALGORITHM = \"AES\";\n    private static final String KEY = \"1Hbfh667adfDEJ78\";\n\n    public static String encrypt(String value) throws Exception\n    {\n        Key key = generateKey();\n        Cipher cipher = Cipher.getInstance(AESCrypt.ALGORITHM);\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte [] encryptedByteValue = cipher.doFinal(value.getBytes(\"utf-8\"));\n        String encryptedValue64 = Base64.encodeToString(encryptedByteValue, Base64.DEFAULT);\n        return encryptedValue64;\n\n    }\n\n    public static String decrypt(String value) throws Exception\n    {\n        Key key = generateKey();\n        Cipher cipher = Cipher.getInstance(AESCrypt.ALGORITHM);\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decryptedValue64 = Base64.decode(value, Base64.DEFAULT);\n        byte [] decryptedByteValue = cipher.doFinal(decryptedValue64);\n        String decryptedValue = new String(decryptedByteValue,\"utf-8\");\n        return decryptedValue;\n\n    }\n\n    private static Key generateKey() throws Exception\n    {\n        Key key = new SecretKeySpec(AESCrypt.KEY.getBytes(),AESCrypt.ALGORITHM);\n        return key;\n    }\n}\n", "idx": 1915}
{"project": "cipher", "commit_id": "Snippet13300310_36848.java", "target": 0, "func": "private SharedPreferences sp;\n\n\nIntent i;\nButton regBttn,rtnBttn;\nEditText rName,rPwd;\nString user, pass, chk;\nString stat=\"a\";\nString key = \"N@!an@jajpn!==\";\n\n\n/** Called when the activity is first created. */\n@Override\npublic void onCreate(Bundle savedInstanceState)\n{\n\n\n     super.onCreate(savedInstanceState);\n     setContentView(R.layout.register);\n\n    rName=(EditText)findViewById(R.id.reg_uname);\n    rPwd=(EditText)findViewById(R.id.reg_pswd);\n    regBttn=(Button)findViewById(R.id.reg_button);\n    rtnBttn=(Button)findViewById(R.id.rtn_button); \n    regBttn.setOnClickListener(this);\n    rtnBttn.setOnClickListener(this);\n\n    sp=this.getSharedPreferences(\"AccessApp\", MODE_WORLD_READABLE);\n    chk=sp.getString(\"USERNAME_KEY\", \"\");\n    if(chk.length()!=0){\n    sp=getSharedPreferences(\"AccessApp\",MODE_WORLD_WRITEABLE); \n\n    i=new Intent(this,AccessApp.class);\n    startActivity(i); \n\n    }     \n   }\n\npublic void onClick(View arg0) {\n    user=rName.getText().toString().trim();\n    pass=rPwd.getText().toString().trim();\n\n    if(arg0==regBttn){     \n       if((user.length()!=0))\n        {\n         if((pass.length()!=0))\n            {\n\n        sp=getSharedPreferences(\"AccessApp\",MODE_WORLD_WRITEABLE);\n        Editor myEditor=sp.edit();\n\n        try {\n\n            byte[ ] superSecretKeyBytes = Base64.decode(user);\n            byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6 };\n            for (int i = 0; i < superSecretKeyBytes.length && i < key.length; i++) {\n                key[i] = superSecretKeyBytes[i];\n                myEditor.putString(\"USERNAME_KEY\", user);\n            }\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }   \n        try {\n\n            byte[ ] superSecretKeyBytes = Base64.decode(pass);\n            byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6 };\n            for (int i = 0; i < superSecretKeyBytes.length && i < key.length; i++) {\n                key[i] = superSecretKeyBytes[i];\n                myEditor.putString(\"PASSWORD_KEY\", pass);\n            }\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        myEditor.commit();\n        Toast.makeText(this, \"Registration is successfull\",10000).show();\n        i=new Intent(this,AccessApp.class);\n        startActivity(i);\n        }\n        else\n         {\n          Toast.makeText(this, \"Please Enter password\", 10000).show();  \n         }\n         }\n        else{\n            Toast.makeText(this,\"Please Enter Username\",10000).show();\n         }\n        }\n\n    else if(arg0==rtnBttn){\n        AlertDialog.Builder builder=new AlertDialog.Builder(this);\n         builder.setTitle(\"Exit\");\n         builder.setMessage(\"Do you want to exit\");\n         builder.setCancelable(false);\n         builder.setPositiveButton(\"Yes\",new DialogInterface.OnClickListener() {\n\n  public void onClick(DialogInterface dialog, int which) {\n  // TODO Auto-generated method stub\n  finish();\n  }\n  });\n    builder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\n\n            public void onClick(DialogInterface arg0, int arg1) {\n               arg0.cancel();\n            }\n        });\n    AlertDialog alert=builder.create();\n    alert.show();\n\n    }\n}\npublic String encrypt(String toencrypt, byte key[]) throws Exception {\n    SecretKeySpec secret = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secret);\n    byte[] encryptedbytes = cipher.doFinal(toencrypt.getBytes());\n    String encrypted = Base64.encodeBytes(encryptedbytes, 0);\n    return encrypted;\n\n}\n\n}\n", "idx": 1916}
{"project": "cipher", "commit_id": "Snippet10427205_34794.java", "target": 0, "func": "byte[] key = new byte[]{31, 30, 31, 36, 32, 11, 11, 11, 22, 26,\n               30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30};\nmyKeySpec = new DESedeKeySpec(key);\nmySecretKeyFactory = SecretKeyFactory.getInstance(\"TripleDES\");\nde = mySecretKeyFactory.generateSecret(myKeySpec);\n\n    Cipher c = Cipher.getInstance(\"TripleDES\");\nc.init(Cipher.DECRYPT_MODE, key);\n\n    int l = completeHexStr.length();\n\n    if (l%8==1){\n        completeHexStr = completeHexStr + \"0000000\";\n    }else if (l%8==7){\n        completeHexStr = completeHexStr + \"0\";\n    }\nbyte decordedValue[] =completeHexString.getBytes();\nbyte[] decValue = c.doFinal(decordedValue);\nString decryptedValue = new String(decValue);\nSystem.out.println(\"decryptedValue= \" + decryptedValue);\n", "idx": 1917}
{"project": "cipher", "commit_id": "Snippet43456590_25572.java", "target": 0, "func": "public class EncryptionDecrption {\n\n    private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = new byte[]{'T', 'h', 'e', 'R', 'o', 'o', 'K', 'n', 'a', 't','E','n', 'i', 'r','i','n'};\n\n    public EncryptionDecrption(){\n\n    }\n\n    public static String setEncryptedString(String data) throws Exception {\n        Key key = getKey();\n        Cipher cipher = Cipher.getInstance(ALGO);\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encryptedValue = cipher.doFinal(data.getBytes(\"UTF-8\"));\n\n        return Base64.encodeToString(encryptedValue, Base64.DEFAULT);\n    }\n\n    public static String getDecryptedValue(String data) throws Exception {\n\n        if(data != null) {\n            Key key = getKey();\n            Cipher cipher = Cipher.getInstance(ALGO);\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] decodebyte = Base64.decode(data.getBytes(\"UTF-8\"), Base64.DEFAULT);\n            byte[] decValue = cipher.doFinal(decodebyte);\n\n            return new String(decValue);\n        }\n\n        return null;\n    }\n\n    private static Key getKey() throws Exception {\n        return new SecretKeySpec(keyValue, ALGO);\n    }\n}\n", "idx": 1918}
{"project": "cipher", "commit_id": "Snippet38407929_20342.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class BlowfishTest {\n\n    public static void main(String[] args) throws Exception {\n        encrypt(\"1234567\");\n        decrypt(\"In6uDpDqt1g=\");\n    }\n\n    private static void encrypt(String password) throws Exception {\n        byte[] keyData = (\"ABC\").getBytes();\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyData, \"Blowfish\");\n        Cipher cipher = Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n        byte[] hasil = cipher.doFinal(password.getBytes());\n        System.out.println(new BASE64Encoder().encode(hasil));\n    }\n\n    private static void decrypt(String string) throws Exception {\n        byte[] keyData = (\"ABC\").getBytes();\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyData, \"Blowfish\");\n        Cipher cipher = Cipher.getInstance(\"blowfish/ecb/nopadding\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n        byte[] hasil = cipher.doFinal(new BASE64Decoder().decodeBuffer(string));\n        System.out.println(new String(hasil));\n    }\n}\n", "idx": 1919}
{"project": "cipher", "commit_id": "Snippet18282593_1325.java", "target": 0, "func": "package Chat.Application;\n\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\n\nimport javax.swing.JFrame;\nimport javax.swing.JOptionPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\n\nimport java.security.GeneralSecurityException;\nimport java.security.InvalidKeyException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.omg.PortableInterceptor.SYSTEM_EXCEPTION;\n/**\n * A simple Swing-based client for the chat server.  Graphically\n * it is a frame with a text field for entering messages and a\n * textarea to see the whole dialog.\n *\n * The client follows the Chat Protocol which is as follows.\n * When the server sends \"SUBMITNAME\" the client replies with the\n * desired screen name.  The server will keep sending \"SUBMITNAME\"\n * requests as long as the client submits screen names that are\n * already in use.  When the server sends a line beginning\n * with \"NAMEACCEPTED\" the client is now allowed to start\n * sending the server arbitrary strings to be broadcast to all\n * chatters connected to the server.  When the server sends a\n * line beginning with \"MESSAGE \" then all characters following\n * this string should be displayed in its message area.\n */\npublic class ChatClient {\n\n    BufferedReader in;\n    PrintWriter out;\n    JFrame frame = new JFrame(\"ELECTRON Chatroom\");\n    JTextField textField = new JTextField(40);\n    JTextArea messageArea = new JTextArea(8, 40);\n\n    /**\n     * Constructs the client by laying out the GUI and registering a\n     * listener with the textfield so that pressing Return in the\n     * listener sends the textfield contents to the server.  Note\n     * however that the textfield is initially NOT editable, and\n     * only becomes editable AFTER the client receives the NAMEACCEPTED\n     * message from the server.\n     */\n    public ChatClient() {\n\n        // Layout GUI\n        textField.setEditable(false);\n        messageArea.setEditable(false);\n        messageArea.setWrapStyleWord(true);\n        messageArea.setLineWrap(true);\n        frame.getContentPane().add(textField, \"North\");\n        frame.getContentPane().add(new JScrollPane(messageArea), \"Center\");\n        frame.pack();\n        // Add Listeners\n        textField.addActionListener(new ActionListener() {\n            /**\n             * Responds to pressing the enter key in the textfield by sending\n             * the contents of the text field to the server.    Then clear\n             * the text area in preparation for the next message.\n             */\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            try {\n                String input = (textField.getText());\n                //ENCRYPTION\n                MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n                md5.update(\"So What's Up Doc?\".getBytes());\n\n                SecretKeySpec key = new SecretKeySpec(md5.digest(), \"AES\");\n\n                Cipher cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.ENCRYPT_MODE, key);\n\n                byte encryptedMessage[] = cipher.doFinal(input.getBytes());\n                //Sends the encrypted version of message\n                System.out.println(encryptedMessage);\n                out.println(encryptedMessage);\n                //Clears the input box\n                textField.setText(\"\");\n            } catch (    NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException ex) {\n                Logger.getLogger(ChatClient.class.getName()).log(Level.SEVERE, null, ex);\n            }\n            }\n        });\n    }\n\n    /**\n     * Prompt for and return the address of the server.\n     */\n    private String getServerAddress() {\n        return JOptionPane.showInputDialog(\n            frame,\n            \"Enter IP Address of the Server:\",\n            \"ELECTRON Chatroom\",\n            JOptionPane.QUESTION_MESSAGE);\n    }\n\n    /**\n     * Prompt for and return the desired screen name.\n     */\n    private String getName() {\n        return JOptionPane.showInputDialog(\n            frame,\n            \"Choose a screen name:\",\n            \"Screen name selection\",\n            JOptionPane.PLAIN_MESSAGE);\n    }\n\n    /**\n     * Connects to the server then enters the processing loop.\n     */\n    public void run() throws IOException {\n\n        // Make connection and initialize streams\n        String serverAddress = getServerAddress();\n        Socket socket = new Socket(serverAddress, 9001);\n        in = new BufferedReader(new InputStreamReader(\n            socket.getInputStream()));\n        out = new PrintWriter(socket.getOutputStream(), true);\n        // Process all messages from server, according to the protocol.\n        while (true) {\n            String line = in.readLine();\n         if (line.startsWith(\"SUBMITNAME\")) {\n                out.println(getName());\n            } else if (line.startsWith(\"NAMEACCEPTED\")) {\n                textField.setEditable(true);\n            } else if (line.startsWith(\"MESSAGE\")) {\n                       //DECRYPTION\n                        messageArea.append(line.substring(8) + \"\\n\");\n                        cipher.init(Cipher.DECRYPT_MODE, key);\n                        line = new String(cipher.doFinal(line));\n                        System.out.println(line);\n            }\n        }\n    }\n\n    /**\n     * Runs the client as an application with a closeable frame.\n     */\n    public static void main(String[] args) throws Exception {\n        ChatClient client = new ChatClient();\n        client.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        client.frame.setVisible(true);\n        client.run();\n    }\n}\n", "idx": 1920}
{"project": "cipher", "commit_id": "Snippet30151424_12303.java", "target": 0, "func": "package blowfish;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class Blowfish {\n\npublic static void main(String[] args) throws Exception {\n    encrypt(\"1234\",\"some data\");\n    decrypt(\"1234\",\"A+oDE+RfTx11nT3iGgUvCw==\");\n}\n\nprivate static void encrypt(String key, String string) throws Exception {\n\n        byte[] keyData = (key).getBytes();\n        //System.out.println(keyData);\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyData, \"Blowfish\");\n        Cipher cipher = Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n        byte[] hasil = cipher.doFinal(string.getBytes());\n        System.out.println(new BASE64Encoder().encode(hasil));\n    }\n\nprivate static void decrypt(String key, String string) throws Exception {\n        byte[] keyData = (key).getBytes();\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyData, \"Blowfish\");\n        Cipher cipher = Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n        byte[] hasil = cipher.doFinal(new BASE64Decoder().decodeBuffer(string));\n        System.out.println(new String(hasil));\n    }\n}\n", "idx": 1921}
{"project": "cipher", "commit_id": "Snippet29756654_11828.java", "target": 0, "func": "   import java.io.*;\n   import java.net.*;\n   import java.security.*;\n   import javax.crypto.*;\n   import javax.crypto.spec.*;\n   import java.util.*;\n\n class RealSocketTest {\n public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n\n    String str = \"\";\n    String str2 = \"\";\n    DataOutputStream out;\n    DataInputStream in;\n\n    try {\n        Socket t = new Socket(\"127.0.0.1\", 9003);\n        in = new DataInputStream(t.getInputStream());\n        out = new DataOutputStream(t.getOutputStream());\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n        boolean more = true;\n        System.out.println(in.readUTF());\n\n        while (more) {\n            str = in.readUTF();\n            System.out.print(str);\n            str2 = br.readLine();\n            out.writeUTF(str2);\n            out.flush();\n            str = in.readUTF();\n\n            System.out.println(\"Encrypted Info: \" + str);\n\n            try {\n\n                String key1 = \"1234567812345678\";\n                byte[] key2 = key1.getBytes();\n                SecretKeySpec secret = new SecretKeySpec(key2, \"AES\");\n                Cipher cipher = Cipher.getInstance(\"AES\");\n                cipher.init(Cipher.DECRYPT_MODE, secret);\n                byte[] decrypted = cipher.doFinal(str.getBytes());\n                System.out.println(\"Decrypted Info: \" + new String(decrypted));\n            } catch (BadPaddingException e) {\n                System.out.println(\"Wrong Key!\");\n            } catch (InvalidKeyException f) {\n                System.out.println(\"Invalid Key!\");\n            }\n        }\n    } catch (IOException e) {\n        System.out.println(\"Error\");\n    }\n  }\n}\n", "idx": 1922}
{"project": "cipher", "commit_id": "Snippet19760634_2475.java", "target": 0, "func": "static void encrypt(String strInput , String strOutput) throws IOException,\n    NoSuchAlgorithmException,NoSuchPaddingException, InvalidKeyException {\n    FileInputStream fis = new FileInputStream(strInput);\n    FileOutputStream fos = new FileOutputStream(strOutput);\n\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(),\n            \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n    CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while ((b = fis.read(d)) != -1) {\n        cos.write(d, 0, b);\n    }\n    // Flush and close streams.\n    cos.flush();\n    cos.close();\n    fis.close();\n}\n", "idx": 1923}
{"project": "cipher", "commit_id": "Snippet9684114_34158.java", "target": 0, "func": "    public static String decrypt(String seed, String encrypted) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n\n    SecretKeySpec Spec = new SecretKeySpec(rawKey, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, Spec);\n\n\n    byte[] result = cipher.doFinal(enc);\n\n    return new String(result);\n}\n", "idx": 1924}
{"project": "cipher", "commit_id": "Snippet10451068_34809.java", "target": 0, "func": "// Java - Encrypt\nprivate String EncryptAES(String text,String key) throws Exception\n    {\n      SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n\n      // Instantiate the cipher\n      Cipher cipher = Cipher.getInstance(\"AES\");\n\n      cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n      byte[] encrypted = cipher.doFinal(text.getBytes());\n\n      String encrypttext = new BASE64Encoder().encode(encrypted);\n\n      return encrypttext;\n    }\n\nRESULT: TeUZAFxoFoQy/roPm5tXyPzJP/TLAwR1aIGn2xHbZpsbY1qrKwXfO+F/DAqmeTwB0b8e6dsSM+Yy0zrQt22E2Q== \n", "idx": 1925}
{"project": "cipher", "commit_id": "Snippet24811837_7138.java", "target": 0, "func": "public class SimpleCrypto {\n\npublic static String encrypt(String seed, String cleartext) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    final SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2*buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\nprivate final static String HEX = \"0123456789ABCDEF\";\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n}\n\n}\n", "idx": 1926}
{"project": "cipher", "commit_id": "Snippet27665096_9849.java", "target": 0, "func": "SecretKey deskey = new SecretKeySpec(keybyte, \"DESede/ECB/NOPADDING\");\nCipher c1 = Cipher.getInstance(\"DESede/ECB/NOPADDING\");\nc1.init(Cipher.ENCRYPT_MODE, deskey);\n", "idx": 1927}
{"project": "cipher", "commit_id": "Snippet11924988_35903.java", "target": 0, "func": " byte[] keyBytes = \"vikoAmrPass12345\".getBytes(); \n SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\"); \n Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\"); \n cipher.init(Cipher.DECRYPT_MODE, key); \n byte [] out = cipher.doFinal(inv); \n System.out.println(\"Decrypted: \" +new String(out));\n", "idx": 1928}
{"project": "cipher", "commit_id": "Snippet32932928_14955.java", "target": 0, "func": "cipher = Cipher.getInstance(\"DES/CTR/NoPadding\", \"BC\");", "idx": 1929}
{"project": "cipher", "commit_id": "Snippet39276955_21065.java", "target": 0, "func": "import java.security.KeyPairGenerator;\nimport java.security.KeyPair;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.PublicKey;\nimport java.security.PrivateKey;\nimport java.security.Signature;\nimport java.io.*;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\n\n\n\nclass Q5 { //Queue/Buffer   \n    byte[] shipmentConfirmation;//will include the actual message content been delivered\n    boolean valueSet = false;\n    synchronized byte[] get() \n    {       \n        while(!valueSet) \n        try \n        {\n            wait();\n        } \n        catch(InterruptedException e) \n        {\n            System.out.println(\"InterruptedException caught\");\n        }\n        //System.out.println(\"Got: \" + n);\n        valueSet = false;\n        notify();\n        return shipmentConfirmation;\n    }\n    synchronized void put(byte[] shipmentCinfirm) \n    {\n        while(valueSet)\n        try \n        {\n            wait();\n        } \n        catch(InterruptedException e) \n        {\n            System.out.println(\"InterruptedException caught\");\n        }\n        this.shipmentConfirmation = shipmentCinfirm;\n        valueSet = true;\n        //System.out.println(\"Put: \" + n);\n        notify();\n    }\n}\n\nclass Global5{\n    public static int sendcouter = 0;\n    public static SecretKey secret_Key;\n    public static Cipher desCipher;\n}\n\n\n//<<security pattern>> SymmetricEncryptionEncryptor\nclass SecurityEncryptor//<<security>> Encryptor\n{\n    static byte[] Encryptor(byte shipmentConfirmation[],Cipher c) throws Exception //Encryptor\n    {       \n        byte[] ciphertext = SecurityEncryptionAlgorithm.EncryptionAlgorithm(shipmentConfirmation,c,Global5.secret_Key);\n        return ciphertext;\n    }   \n}\nclass SecurityEncryptionAlgorithm//<<security>> EncryptionAlgorithm\n{\n    static byte[] EncryptionAlgorithm(byte shipmentConfirmation[],Cipher c,SecretKey sk) throws Exception \n    {\n        c.init(Cipher.ENCRYPT_MODE, sk);\n        return c.doFinal(shipmentConfirmation);\n    }\n}\n\n\n\n//<<security pattern>> aSecureAsynchronousMCReceiverConnector\nclass SecurityDecryptor//<<Security>> Decryptor\n{\n    static byte[] Decryptor(byte EncryptedShipmentConfirmation[],Cipher c,SecretKey sk) throws Exception //Decryptor\n    {\n        byte[] ct = SecurityDecryptionAlgorithm.DecryptionAlgorithm(EncryptedShipmentConfirmation,c,sk);\n        return ct;\n    }   \n}\nclass SecurityDecryptionAlgorithm//<<Security>> DecryptionAlgorithm\n{\n    static byte[] DecryptionAlgorithm(byte EncryptedShipmentConfirmation[],Cipher c,SecretKey sk) throws Exception \n    {\n        c.init(Cipher.DECRYPT_MODE, sk);\n        return c.doFinal(EncryptedShipmentConfirmation);\n    }\n}\n\n\n\npublic class testFigure1 { //Main\n       public static void main(String args[]) throws Exception {          \n            Q5 q1 = new Q5();//creating buffer/queue\n            Q5 q2 = new Q5();\n\n            System.out.println(\"How many messages to send: \");\n            Scanner in = new Scanner(System.in);\n            int input = in.nextInt();//Get input from the supplier          \n\n            aSupplierInterface Supplier = new aSupplierInterface(q1, input);    \n            aSecuritySenderCoordinator SenderCoordinator = new aSecuritySenderCoordinator(q1, input, q2);           \n            aSecurityReceiverCoordinator receive = new aSecurityReceiverCoordinator(q2, input);   \n            Supplier.t_pro.join();\n            SenderCoordinator.t_coordinator5.join();\n            receive.t_SecurityReceiverCoordinator5.join();\n            System.out.println(\"End of Program!\");\n       }   \n}\n\nclass aSupplierInterface  implements Runnable //<<application Component>> aSupplierInterface\n{\n    Q5 q;   \n    int supinput;\n    Thread t_pro;//pro to represent producer or suppler\n    aSupplierInterface(Q5 qq, int input)\n    {\n        supinput = input;\n        this.q = qq;\n        t_pro = new Thread(this, \"Producer\");\n        t_pro.start();\n    }\n    public void run() \n    {\n        int i = 0;\n        String shipment;\n        byte[] shipmentConfirmation;\n        while(i<supinput)\n        {\n            i++;\n            shipment = \"This is the Delivery Number: \"+ i;\n            shipmentConfirmation = shipment.getBytes();\n\n            q.put(shipmentConfirmation);//Putting supplier's goods in a queue/buffer            \n        }   \n    }       \n}\n\nclass aSecuritySenderCoordinator implements Runnable //<<security coordinator>> aSecuritySenderCoordinator\n{\n    Q5 q;\n    Q5 q2;\n    Thread t_coordinator5;\n    int supinput;\n\n    public aSecuritySenderCoordinator(Q5 qq, int input, Q5 q2) throws Exception\n    {       \n        supinput=input;\n        this.q = qq;    \n        this.q2=q2;\n        t_coordinator5 = new Thread(this, \"coordinator5\");\n        t_coordinator5.start();\n    }\n\n    public void run() \n    {\n        byte[] pkShipmentConfirmation;\n        byte[] shipmentConfirmation;\n        int i = 0;\n        while(i<supinput) \n        {               \n            i++;\n\n                //Getting goods that supplier has put in the queue previously\n            pkShipmentConfirmation=q.get();//This will contain content of the message/delivery you are sending\n            KeyGenerator keygen;\n            try {\n            keygen = KeyGenerator.getInstance(\"DES\");\n            Global5.sendcouter++;//To Create the key once\n            if(Global5.sendcouter==1)//Create once\n            {\n                Global5.secret_Key = keygen.generateKey();\n                Global5.desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n            }           \n            //String st1 = new String(pkShipmentConfirmation);//just to print a message\n            //System.out.println(\"*ORIGINAL MESSAGE:\"+st1);    \n            shipmentConfirmation = SecurityEncryptor.Encryptor(pkShipmentConfirmation,Global5.desCipher);//Encrypting \n\n\n            new anAsynchronousMCReceiver(q2, shipmentConfirmation);     \n\n            } catch (NoSuchAlgorithmException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (Exception e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n\n\n\nclass anAsynchronousMCReceiver \n{ //<<communication pattern>> anAsynchronousMCReceiver\n       Q5 q;\n\n       anAsynchronousMCReceiver( Q5 q2, byte[] shipmentConfirm) throws Exception\n       {\n           this.q = q2;\n           q.put(shipmentConfirm);  //Entering received data in to the Queue/Buffer \n       }\n}\n\n\n\nclass aSecurityReceiverCoordinator implements Runnable//<<security coordinator>> aSecurityReceiverCoordinator\n{       \n    Thread t_SecurityReceiverCoordinator5;  \n    Q5 q;\n    int supinput;\n    byte[]encryptedShipmentConfirmation;\n    public aSecurityReceiverCoordinator(Q5 q2, int input) throws Exception\n    {  \n        this.q = q2;    \n        supinput = input;\n        t_SecurityReceiverCoordinator5 = new Thread(this, \"SecurityReceiverCoordinator5\");\n        t_SecurityReceiverCoordinator5.start();\n\n    }\n    public void run() \n    {\n        try {\n            int i = 0;\n            while(i<supinput) \n            {           \n                i++;\n                encryptedShipmentConfirmation = q.get();                \n                byte[] confirmation = SecurityDecryptor.Decryptor(encryptedShipmentConfirmation,Global5.desCipher,Global5.secret_Key);//ERROR HAPPENS HERE              \n                String shipConfirmation = new String(confirmation);\n\n                System.out.println(\"AT DelivertyOrder: \" +  shipConfirmation);\n            }\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 1930}
{"project": "cipher", "commit_id": "Snippet5118375_31468.java", "target": 0, "func": "private static byte[] getPasswordMessageDigest(String password) throws NoSuchAlgorithmException {\n    MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-512\");\n    byte[] passwordMessageDigest = messageDigest.digest(password.getBytes());\n\n    return passwordMessageDigest;\n}\n\npublic static SecretKey createSecretKey(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    byte[] passwordMessageDigest = getPasswordMessageDigest(password);\n\n    SecureRandom secureRandom = SecureRandom.getInstance(\"SHA1PRNG\");\n    secureRandom.setSeed(passwordMessageDigest);\n\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n    keyGenerator.init(128, secureRandom);\n\n    SecretKey secretKey = keyGenerator.generateKey();\n\n    return secretKey;\n}\n\npublic static byte[] encrypt(String password, byte[] plainText) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\n    SecretKey secretKey = createSecretKey(password);\n\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n    byte[] cipherText = cipher.doFinal(plainText);\n\n    return cipherText;\n}\n\npublic static byte[] decrypt(String password, byte[] cipherText) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    Cipher cipher = Cipher.getInstance(\"AES\");\n\n    SecretKey secretKey = createSecretKey(password);\n\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n    byte[] plainText = cipher.doFinal(cipherText);\n\n    return plainText;\n}\n", "idx": 1931}
{"project": "cipher", "commit_id": "Snippet13175598_36767.java", "target": 0, "func": "public class Main {\n    public static void main(String[] args) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        byte[] keyByte = new byte[8];\n        byte[] data = new byte[8];\n        Key key = new SecretKeySpec(keyByte, \"DES\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] result = cipher.doFinal(data);\n        StringBuilder str = new StringBuilder();\n        for (byte b : result) {\n             str.append(Integer.toHexString(0xff & b)).append(' ');\n        }\n        System.out.println(str);\n    }\n}\n", "idx": 1932}
{"project": "cipher", "commit_id": "Snippet20811912_3418.java", "target": 0, "func": "public static String encrypt(String content, String sKey) {\n  try {\n    SecretKey secretKey = null;\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom secureRandom = SecureRandom.getInstance(\"SHA1PRNG\");\n    secureRandom.setSeed(sKey.getBytes());\n    kgen.init(128, secureRandom);\n    secretKey = kgen.generateKey();\n    byte[] enCodeFormat = secretKey.getEncoded();\n    SecretKeySpec key = new SecretKeySpec(enCodeFormat, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n\n    byte[] byteContent = content.getBytes(\"utf-8\");\n    byte[] result = cipher.doFinal(byteContent);\n\n    return ByteUtil.parseByte2HexStr(result);\n  } catch (Exception e) {\n    e.printStackTrace();\n  }\n  return content;\n}\n\n\n## ByteUtil.java\n...\npublic static String parseByte2HexStr(byte buf[]) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < buf.length; i++) {\n        String hex = Integer.toHexString(buf[i] & 0xFF);\n        if (hex.length() == 1) {\n            hex = '0' + hex;\n        }\n        sb.append(hex.toUpperCase());\n    }\n    return sb.toString();\n}\n", "idx": 1933}
{"project": "cipher", "commit_id": "Snippet16192140_39150.java", "target": 0, "func": "Cipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\naes.init(Cipher.DECRYPT_MODE, generateKey());\nbyte[] ciphertext = aes.doFinal(rawPassword.getBytes());\n", "idx": 1934}
{"project": "cipher", "commit_id": "Snippet30302000_12443.java", "target": 0, "func": "package blowfishcbc;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class BlowfishCBC {\n\n    public static void main(String[] args) throws Exception {\n\n        String keyString = \"7890\";\n        String input = \"some data\";\n\n        Cipher cipher = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\");\n\n        // for IV\n        byte[] iv = new byte[cipher.getBlockSize()];\n        new SecureRandom().nextBytes(iv);\n        IvParameterSpec ivSpec = new IvParameterSpec(iv);\n\n        // for key\n        byte[] keyData = (keyString).getBytes();\n        SecretKeySpec keySpec = new SecretKeySpec(keyData, \"Blowfish\");\n\n        // encrypt\n        cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec);\n        byte[] encrypted = cipher.doFinal(input.getBytes(\"UTF-8\"));\n        String enc = new BASE64Encoder().encode(encrypted);\n        System.out.println(\"encrypted: \" + new String(enc));\n\n        // decrypt\n        cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);\n        byte[] dec = new BASE64Decoder().decodeBuffer(enc);\n        byte[] decrypted = cipher.doFinal(dec);\n        System.out.println(\"decrypted: \" + new String(decrypted, \"UTF-8\"));\n    }\n}\n", "idx": 1935}
{"project": "cipher", "commit_id": "Snippet21710067_4148.java", "target": 0, "func": "    public class EncryptionClass {\n\npublic static SecretKey mainKey=null;\n\n\n\npublic static SecretKey GenerateKey() throws NoSuchAlgorithmException\n{\n\n    KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n    SecretKey myDesKey = keygenerator.generateKey();\n    return myDesKey;\n\n    }\n\n\npublic static String Encrypt(String plainText) {\n\n    String encryptedText = \"\";\n\n    try {\n        mainKey=GenerateKey();\n            Cipher desCipher;\n\n            // Create the cipher \n            desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\n            // Initialize the cipher for encryption\n            desCipher.init(Cipher.ENCRYPT_MODE,mainKey);\n\n            //sensitive information\n            byte[] plainTextAsBytes =plainText.getBytes();\n            Log.d(\"Text [Byte Format] : \" , plainTextAsBytes.toString());\n            Log.d(\"Text : \" ,new String(plainTextAsBytes));\n\n           // Encrypt the text\n            byte[] cipherText = desCipher.doFinal(plainTextAsBytes);\n\n            Log.d(\"Text Encryted : \" ,cipherText.toString());\n\n            encryptedText=cipherText.toString();\n\n    }catch(NoSuchAlgorithmException e){\n        Log.d(\"NoSuchAlgorithmException :\", e.toString());\n    }catch(NoSuchPaddingException e){\n        Log.d(\"NoSuchPaddingException  :\", e.toString());\n    }catch(InvalidKeyException e){\n        Log.d(\"InvalidKeyException:\", e.toString());\n    }catch(IllegalBlockSizeException e){\n        Log.d(\"IllegalBlockSizeException:\", e.toString());\n    }catch(BadPaddingException e){\n        Log.d(\"BadPaddingException:\", e.toString());\n    } \n    finally{\n\n    }\n\n    return encryptedText;\n\n}\n\npublic static String Decrypt(String cipherText) {\n\n    String decryptedText = \"\";\n\n    try {\n\n            Log.d(\"Decrypt MAin Key:\",mainKey.getEncoded().toString());\n            Cipher desCipher;\n\n            // Create the cipher \n            desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\n            // Initialize the cipher for encryption\n            desCipher.init(Cipher.DECRYPT_MODE,mainKey);\n\n\n           // Encrypt the text\n\n            byte[] cipherTextBytes=cipherText.getBytes();\n            byte[]  plainText= desCipher.doFinal(cipherTextBytes);\n\n            Log.d(\"Text Decryted : \" ,plainText.toString());\n\n            decryptedText=plainText.toString();\n\n    }catch(NoSuchAlgorithmException e){\n        Log.d(\"NoSuchAlgorithmException :\", e.toString());\n    }catch(NoSuchPaddingException e){\n        Log.d(\"NoSuchPaddingException  :\", e.toString());\n    }catch(InvalidKeyException e){\n        Log.d(\"InvalidKeyException:\", e.toString());\n    }catch(IllegalBlockSizeException e){\n        Log.d(\"IllegalBlockSizeException:\", e.toString());\n    }catch(BadPaddingException e){\n        Log.d(\"BadPaddingException:\", e.toString());\n    } \n    finally{\n\n    }\n\n\n    return decryptedText;\n}\n\n}\n", "idx": 1936}
{"project": "cipher", "commit_id": "Snippet24968466_7298.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Test {\n\n    private byte[] encrypted;\n\n    private String encryptedtext;\n    private String decrypted;\n\n\n\n    public String Encrypt (String pInput) {\n\n\n      try {\n\n         String Input = pInput;\n         String key = \"Bar12345Bar12345Bar12345Bar12345\"; \n\n         // Erstelle key and cipher\n         SecretKeySpec aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n         Cipher cipher = Cipher.getInstance(\"AES\");\n\n         // Verschl\u00fcsselung\n         cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n         byte[] encrypted = cipher.doFinal(Input.getBytes());\n         encryptedtext = new String(encrypted);\n         System.err.println(\"encrypted:\" + encryptedtext);\n\n\n      }catch(Exception e) {\n         e.printStackTrace();\n      }\n\n        return encrypted;\n    }\n\n\n\n    public String Decrypt (String pInput) {\n\n\n       try {\n\n           String Input = pInput; \n\n           String key = \"Bar12345Bar12345Bar12345Bar12345\"; \n\n           // Erstelle key and cipher\n           SecretKeySpec aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n           Cipher cipher = Cipher.getInstance(\"AES\");\n\n           // Entschl\u00fcsselung\n           cipher.init(Cipher.DECRYPT_MODE, aesKey);\n           decrypted = new String(cipher.doFinal(encryptedtext)); // HERE IS THE PROBLEM IT WANT BYTE BUT I WANT TO ENCRYPT FROM A STRING\n           System.err.println(\"decrypted: \" + decrypted);\n\n        }catch(Exception e) {\n           e.printStackTrace();\n        }\n        return pInput;\n      }\n\n}\n", "idx": 1937}
{"project": "cipher", "commit_id": "Snippet24626781_6978.java", "target": 0, "func": "import java.security.GeneralSecurityException;\nimport java.security.Key;\nimport java.security.Security;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport android.util.Base64;\n\npublic class AESTest {\n\n    public enum Mode {\n        CBC, ECB, CFB, OFB, PCBC\n    };\n\n    public enum Padding {\n        NoPadding, PKCS5Padding, PKCS7Padding, ISO10126d2Padding, X932Padding, ISO7816d4Padding, ZeroBytePadding\n    }\n\n    private static final String ALGORITHM = \"AES\";\n\n    private static final byte[] keyValue =\"myKey\".getBytes();\n\n\n    String decrypt(String valueToDec, Mode modeOption,\n            Padding paddingOption) throws GeneralSecurityException {\n\n\n\n        byte[] decodeBase64 = Base64.decode(valueToDec.getBytes(),0);\n\n        Key key = new SecretKeySpec(keyValue, ALGORITHM); \n        Cipher c = Cipher.getInstance(\"AES/ECB/NoPadding\"); \n        c.init(Cipher.DECRYPT_MODE, key); \n        byte[] encValue = c.doFinal(decodeBase64); \n        return new String(encValue).trim();\n\n    }\n\n}\n", "idx": 1938}
{"project": "cipher", "commit_id": "Snippet20803436_3408.java", "target": 0, "func": "    int k=i;\n\n    String questionImage[]={\"\",\"B001\",\"B002\",\"B003\"};\n\n    String questionDecryptImageName=questionImage[k];\n\n    String afterDrcryptName[]={\"A.jpg\",\"B.jpg\",\"C.jpg\",\"D.jpg\"};\n\n    try{\n\n        FileInputStream file = new FileInputStream(\"src/learning/dvd/Temp2/\"+questionDecryptImageName+\".jpg\");\n\n    FileOutputStream output = new FileOutputStream(\"src/learning/dvd/Temp2/\"+afterDrcryptName[k]);\n\n        byte j[]=\"NiTh5252\".getBytes();\n\n        SecretKeySpec kye = new SecretKeySpec(j,\"DES\");\n\n        System.out.println(kye);\n\n        Cipher enc = Cipher.getInstance(\"DES\");\n\n        enc.init(Cipher.DECRYPT_MODE,kye);\n\n        CipherOutputStream cos = new CipherOutputStream(output, enc);\n\n        byte[] buf = new byte[1024];\n\n        int read;\n\n        while((read=file.read(buf))!=-1){\n\n            cos.write(buf,0,read);\n\n        }\n\n        file.close();\n\n        cos.close();\n\n        output.flush();  \n\n    }catch(Exception e){\n\n        JOptionPane.showMessageDialog(null, e);\n\n    }\n\n}  \n", "idx": 1939}
{"project": "cipher", "commit_id": "Snippet18906161_1824.java", "target": 0, "func": "        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBEWithMD5AndTripleDES\");\n        SecretKey key = factory.generateSecret(keySpec);\n\n        // instead of key.getAlgorithm(). For compatibility with JDK 1.5\n        String newAlgorithm = \"PBEWithMD5AndDES\"; // the same value as in JDK 1.5\n\n        ecipher = Cipher.getInstance(newAlgorithm);\n", "idx": 1940}
{"project": "cipher", "commit_id": "Snippet27375908_9566.java", "target": 0, "func": "private static final String AES_CIPHER_METHOD = \"AES\";\n\npublic static SecretKeySpec createAesKeySpec(byte[] aesKey) {\n    return new SecretKeySpec(aesKey, AES_CIPHER_METHOD);\n}\n\npublic static String aesEncrypt(String data, SecretKeySpec aesKeySpec) throws EncryptionException {\n    try {\n        Cipher aesCipher = Cipher.getInstance(AES_CIPHER_METHOD);\n        aesCipher.init(Cipher.ENCRYPT_MODE, aesKeySpec);\n        byte[] encVal = aesCipher.doFinal(data.getBytes(\"UTF8\"));\n        return new BASE64Encoder().encode(encVal);\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IOException | BadPaddingException| IllegalBlockSizeException e) {\n        throw new EncryptionException(e.getMessage(), e);\n    }\n}\n\npublic static void aesEncryptFile(File in, File out, SecretKeySpec aesKeySpec) throws EncryptionException {\n    try {\n        Cipher aesCipher = Cipher.getInstance(AES_CIPHER_METHOD);\n        aesCipher.init(Cipher.ENCRYPT_MODE, aesKeySpec);\n\n        try (InputStream inputStream = new FileInputStream(in)) {\n            try (OutputStream outputStream = new CipherOutputStream(new FileOutputStream(out), aesCipher)){\n                IOUtils.copy(inputStream, outputStream);\n            }\n        }\n    } catch (InvalidKeyException | NoSuchAlgorithmException | NoSuchPaddingException | IOException e){\n        throw new EncryptionException(e.getMessage(), e);\n    }\n}\n", "idx": 1941}
{"project": "cipher", "commit_id": "Snippet38369043_20324.java", "target": 0, "func": "public final class Encryption {\n    private static final String CHIPHER_TRANSFORMATION = \"AES/ECB/PKCS5Padding\";\n    private static final String GENERATE_KEY__ALGORITHM = \"PBKDF2WithHmacSHA1\";\n    private static final String GENERATE_KEY_ALGORITHM = \"AES\";\n    public static final int CRYPTO_TYPE_ENCRYPT = 0;\n    public static final int CRYPTO_TYPE_DECRYPT = 1;\n\n    public static String crypto(String inString, int type, String hashKey, String salt, String charset) {\n        Cipher cipher = null;\n        try {\n            cipher = Cipher.getInstance(CHIPHER_TRANSFORMATION);\n            byte[] inputByte = inString.getBytes(charset);\n            switch (type) {\n                case CRYPTO_TYPE_DECRYPT:\n                    cipher.init(Cipher.DECRYPT_MODE, initKey(hashKey, salt));\n                    return new String(cipher.doFinal(Base64.decode(inputByte, Base64.DEFAULT)));\n                case CRYPTO_TYPE_ENCRYPT:\n                    cipher.init(Cipher.ENCRYPT_MODE, initKey(hashKey, salt));\n                    return new String(Base64.encode(cipher.doFinal(inputByte), Base64.DEFAULT));\n            }\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    private static SecretKey getSecretKey(char[] password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(GENERATE_KEY__ALGORITHM);\n        KeySpec spec = new PBEKeySpec(password, salt, 1024, 128);\n        SecretKey tmp = factory.generateSecret(spec);\n        return (new SecretKeySpec(tmp.getEncoded(), GENERATE_KEY_ALGORITHM));\n    }\n\n    private static SecretKey initKey(String hashKey, String salt) {\n        try {\n            return getSecretKey(hashKey.toCharArray(), salt.getBytes());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (InvalidKeySpecException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n", "idx": 1942}
{"project": "cipher", "commit_id": "Snippet33818911_15901.java", "target": 0, "func": "public ArrayList<FootballClub> FootBallInputStream() throws FileNotFoundException, IOException, ClassNotFoundException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n\n        File file = new File(\"FootballClub.ser\");\n        fileIn = new FileInputStream(file);\n\n        SecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n        CipherInputStream cipherIn = new CipherInputStream(fileIn, cipher);\n        in = new ObjectInputStream(cipherIn);\n\n        SealedObject sealed = (SealedObject) in.readObject();\n\n        ArrayList<FootballClub> e = (ArrayList<FootballClub>) sealed.getObject(cipher);\n\n        in.close();\n\n        fileIn.close();\n\n        return e;\n\n    }\n\n    public void FootBallOutputStream(ArrayList<FootballClub> e) throws FileNotFoundException, IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException {\n        File file = new File(\"FootballClub.ser\");\n        fileOut = new FileOutputStream(file);\n\n\n        SecretKey key = KeyGenerator.getInstance(\"AES\").generateKey();\n        Cipher cipher = (Cipher.getInstance(\"AES\"));\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        SealedObject sealed = new SealedObject(e, cipher);\n\n        CipherOutputStream cipherOut = new CipherOutputStream(fileOut, cipher);\n        out = new ObjectOutputStream(cipherOut);\n        out.writeObject(sealed);\n        out.close();\n        fileOut.close();\n    }\n", "idx": 1943}
{"project": "cipher", "commit_id": "Snippet32456028_14524.java", "target": 0, "func": "/**\n * Warning, this gives a false sense of security.  If an attacker has enough access to\n * acquire your password store, then he almost certainly has enough access to acquire your\n * source binary and figure out your encryption key.  However, it will prevent casual\n * investigators from acquiring passwords, and thereby may prevent undesired negative\n * publicity.\n */\npublic class ObscuredSharedPreferences implements SharedPreferences {\n    protected static final String UTF8 = \"utf-8\";\n    private static final char[] SEKRIT = ... ; // INSERT A RANDOM PASSWORD HERE.\n                                               // Don't use anything you wouldn't want to\n                                               // get out there if someone decompiled\n                                               // your app.\n\n\n    protected SharedPreferences delegate;\n    protected Context context;\n\n    public ObscuredSharedPreferences(Context context, SharedPreferences delegate) {\n        this.delegate = delegate;\n        this.context = context;\n    }\n\n    public class Editor implements SharedPreferences.Editor {\n        protected SharedPreferences.Editor delegate;\n\n        public Editor() {\n            this.delegate = ObscuredSharedPreferences.this.delegate.edit();                    \n        }\n\n        @Override\n        public Editor putBoolean(String key, boolean value) {\n            delegate.putString(key, encrypt(Boolean.toString(value)));\n            return this;\n        }\n\n        @Override\n        public Editor putFloat(String key, float value) {\n            delegate.putString(key, encrypt(Float.toString(value)));\n            return this;\n        }\n\n        @Override\n        public Editor putInt(String key, int value) {\n            delegate.putString(key, encrypt(Integer.toString(value)));\n            return this;\n        }\n\n        @Override\n        public Editor putLong(String key, long value) {\n            delegate.putString(key, encrypt(Long.toString(value)));\n            return this;\n        }\n\n        @Override\n        public Editor putString(String key, String value) {\n            delegate.putString(key, encrypt(value));\n            return this;\n        }\n\n        @Override\n        public void apply() {\n            delegate.apply();\n        }\n\n        @Override\n        public Editor clear() {\n            delegate.clear();\n            return this;\n        }\n\n        @Override\n        public boolean commit() {\n            return delegate.commit();\n        }\n\n        @Override\n        public Editor remove(String s) {\n            delegate.remove(s);\n            return this;\n        }\n    }\n\n    public Editor edit() {\n        return new Editor();\n    }\n\n\n    @Override\n    public Map<String, ?> getAll() {\n        throw new UnsupportedOperationException(); // left as an exercise to the reader\n    }\n\n    @Override\n    public boolean getBoolean(String key, boolean defValue) {\n        final String v = delegate.getString(key, null);\n        return v!=null ? Boolean.parseBoolean(decrypt(v)) : defValue;\n    }\n\n    @Override\n    public float getFloat(String key, float defValue) {\n        final String v = delegate.getString(key, null);\n        return v!=null ? Float.parseFloat(decrypt(v)) : defValue;\n    }\n\n    @Override\n    public int getInt(String key, int defValue) {\n        final String v = delegate.getString(key, null);\n        return v!=null ? Integer.parseInt(decrypt(v)) : defValue;\n    }\n\n    @Override\n    public long getLong(String key, long defValue) {\n        final String v = delegate.getString(key, null);\n        return v!=null ? Long.parseLong(decrypt(v)) : defValue;\n    }\n\n    @Override\n    public String getString(String key, String defValue) {\n        final String v = delegate.getString(key, null);\n        return v != null ? decrypt(v) : defValue;\n    }\n\n    @Override\n    public boolean contains(String s) {\n        return delegate.contains(s);\n    }\n\n    @Override\n    public void registerOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener onSharedPreferenceChangeListener) {\n        delegate.registerOnSharedPreferenceChangeListener(onSharedPreferenceChangeListener);\n    }\n\n    @Override\n    public void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener onSharedPreferenceChangeListener) {\n        delegate.unregisterOnSharedPreferenceChangeListener(onSharedPreferenceChangeListener);\n    }\n\n\n\n\n    protected String encrypt( String value ) {\n\n        try {\n            final byte[] bytes = value!=null ? value.getBytes(UTF8) : new byte[0];\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n            SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));\n            Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n            pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(),Settings.System.ANDROID_ID).getBytes(UTF8), 20));\n            return new String(Base64.encode(pbeCipher.doFinal(bytes), Base64.NO_WRAP),UTF8);\n\n        } catch( Exception e ) {\n            throw new RuntimeException(e);\n        }\n\n    }\n\n    protected String decrypt(String value){\n        try {\n            final byte[] bytes = value!=null ? Base64.decode(value,Base64.DEFAULT) : new byte[0];\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n            SecretKey key = keyFactory.generateSecret(new PBEKeySpec(SEKRIT));\n            Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n            pbeCipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(Settings.Secure.getString(context.getContentResolver(),Settings.System.ANDROID_ID).getBytes(UTF8), 20));\n            return new String(pbeCipher.doFinal(bytes),UTF8);\n\n        } catch( Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n", "idx": 1944}
{"project": "cipher", "commit_id": "Snippet13420065_36947.java", "target": 0, "func": "Cipher localCipher = Cipher.getInstance(\"AES\");", "idx": 1945}
{"project": "cipher", "commit_id": "Snippet42547298_24573.java", "target": 0, "func": "    String content = \"some content\";\n    String privateKey = \"secret key\";\n    Key key = new SecretKeySpec(privateKey.getBytes(), \"AES/ECB/PKCS7Padding\");\n    try {\n        Cipher localCipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n        localCipher.init(2, key);\n        Log.e(\"error\", new String(localCipher.doFinal(Base64.decode(content, 0))));\n    } catch (NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException | BadPaddingException | IllegalBlockSizeException | InvalidKeyException e) {\n        e.printStackTrace();\n    }\n", "idx": 1946}
{"project": "cipher", "commit_id": "Snippet2279317_30274.java", "target": 0, "func": "package org.dpdouran.attach;\nimport java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.security.InvalidAlgorithmParameterException;import java.security.InvalidKeyException;import java.security.NoSuchAlgorithmException;import java.security.spec.AlgorithmParameterSpec;import javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class CustomClassLoader extends ClassLoader {\n    private static final int BUFFER_SIZE = 8192;\n    @Override\n    protected Class<?> findClass(String className) throws ClassNotFoundException {\n        System.out.println(\"loading...  \"+className);\n        String clsFile = className.replace('.', '/') + \".class\";\n        InputStream in = getResourceAsStream(clsFile);\n        if(in==null)\n            return null;\n        byte[] buffer = new byte[BUFFER_SIZE];\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        int n = -1;\n        try {\n            while ((n = in.read(buffer, 0, BUFFER_SIZE)) != -1) {\n                out.write(buffer, 0, n);\n            }\n        } catch (IOException e1) {\n            // TODO Auto-generated catch block\n            e1.printStackTrace();\n        }\n        //do decrypt\n        byte[] classBytes = out.toByteArray();\n        byte[] iv = new byte[] { (byte) 0x8E, 0x12, 0x39, (byte) 0x9C,\n                0x07, 0x72, 0x6F, 0x5A };\n        AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);\n        Cipher dcipher=null;\n        try {\n            dcipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        } catch (NoSuchAlgorithmException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        byte keyBytes[] = \"abcdEFGH\".getBytes();\n        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, \"DES\");\n        try {\n            dcipher.init(Cipher.DECRYPT_MODE, secretKey, paramSpec);\n        } catch (InvalidKeyException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (InvalidAlgorithmParameterException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        byte[] dbytes = null;\n        try {\n            dbytes = dcipher.doFinal(classBytes);\n        } catch (IllegalBlockSizeException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        return defineClass(className, dbytes, 0, dbytes.length);\n    }\n    public CustomClassLoader( ClassLoader parent){\n        super(sun.misc.Launcher.getLauncher().getClassLoader());\n    }\n}\n", "idx": 1947}
{"project": "cipher", "commit_id": "Snippet42266168_24254.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\n\npublic class DoDecode {\n    private static final String DES_TYPE = \"DES\";\n//    private static final String DES_TYPE = \"DES/CBC/NoPadding\";\n//    private static final String DES_TYPE = \"DES/CBC/PKCS5Padding\";\n//    private static final String DES_TYPE = \"DES/ECB/NoPadding\";\n//    private static final String DES_TYPE = \"DES/ECB/PKCS5Padding\"; //Use this\n//    private static final String DES_TYPE = \"DESede/CBC/NoPadding\";\n//    private static final String DES_TYPE = \"DESede/CBC/PKCS5Padding\";\n//    private static final String DES_TYPE = \"DESede/ECB/NoPadding\";\n//    private static final String DES_TYPE = \"DESede/ECB/PKCS5Padding\";\n\n    public synchronized static String encode(String unencodedString, String key) {\n        String ret = null;\n\n        try {\n            DESKeySpec keySpec = new DESKeySpec(key.getBytes(\"UTF8\"));\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n            SecretKey skey = keyFactory.generateSecret(keySpec);\n            sun.misc.BASE64Encoder base64encoder = new BASE64Encoder();\n\n            byte[] cleartext = unencodedString.getBytes(\"UTF8\");\n\n            Cipher cipher = Cipher.getInstance(DES_TYPE);\n            cipher.init(Cipher.ENCRYPT_MODE, skey);\n\n            ret = base64encoder.encode(cipher.doFinal(cleartext));\n        } catch (Exception ex) {\n            System.err.println(\"Encode exception: \"+ex.getMessage());\n        }\n\n        return ret;\n    }\n\n    public static String decode(String encodedString, String key) {\n        String ret = null;\n\n        try {\n            DESKeySpec keySpec = new DESKeySpec(key.getBytes(\"UTF8\"));\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n            SecretKey skey = keyFactory.generateSecret(keySpec);\n            sun.misc.BASE64Decoder base64decoder = new BASE64Decoder();\n\n            byte[] encrypedPwdBytes = base64decoder.decodeBuffer(encodedString);\n\n            Cipher cipher = Cipher.getInstance(DES_TYPE);\n            cipher.init(Cipher.DECRYPT_MODE, skey);\n            byte[] plainTextPwdBytes = (cipher.doFinal(encrypedPwdBytes));\n\n            ret = new String(plainTextPwdBytes);\n        } catch (Exception ex) {\n            System.err.println(\"Decode exception: \" + ex.getMessage());\n        }\n\n        return ret;\n    }\n\n    private static final String wasValidStr = \"h1JTFcRjW6vveQUrQqPUgnjGXo3NEZKDnBThZQN7uLfzPEpeFFONV4mvL71cT/xQb1mz5Xa/XZ/aW2GawZNumgO0reUZSDh30F7NfK0S/rMWM8FxcjBCkfFWAbLZHcyDJ5wW3F1yl5g=\";\n\n    public static void main(String[] args) {\n        System.out.println(DoDecode.decode(wasValidStr, \"invpwd~~\"));\n\n        String encoded = DoDecode.encode(\"This has worked in the past!\", \"invpwd~~\");\n        System.out.println(encoded);\n        System.out.println(DoDecode.decode(encoded, \"invpwd~~\"));\n    }\n}\n", "idx": 1948}
{"project": "cipher", "commit_id": "Snippet15508784_38561.java", "target": 0, "func": "import java.io.File;\n\npublic class ProgressBarExa extends Activity {\n\nButton btnStartProgress;\nProgressDialog progressBar;\nprivate int progressBarStatus = 0;\nprivate Handler progressBarHandler = new Handler();\n\n// private long fileSize = 0;\n\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.progressbar_view);\n\n    addListenerOnButton();\n\n}\n\npublic void addListenerOnButton() {\n\n    btnStartProgress = (Button) findViewById(R.id.btnStartProgress);\n    btnStartProgress.setOnClickListener(\n             new OnClickListener() {\n\n       @Override\n       public void onClick(View v) {\n\n        // prepare for a progress bar dialog\n        progressBar = new ProgressDialog(v.getContext());\n        progressBar.setCancelable(true);\n        progressBar.setMessage(\"File encrypting...\");\n        progressBar.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n        progressBar.setProgress(0);\n        progressBar.setMax(100);\n        progressBar.show();\n\n        //reset progress bar status\n        progressBarStatus = 0;\n\n        //reset filesize\n        // fileSize = 0;\n\n        new Thread(new Runnable() {\n          public void run() {\n            while (progressBarStatus < 100) {\n\n              // process some tasks\n              progressBarStatus = doSomeTasks();\n\n              // your computer is too fast, sleep 1 second\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n                e.printStackTrace();\n              }\n\n              // Update the progress bar\n              progressBarHandler.post(new Runnable() {\n                public void run() {\n                  progressBar.setProgress(progressBarStatus);\n                }\n              });\n            }\n\n            // ok, file is downloaded,\n            if (progressBarStatus >= 100) {\n\n                // sleep 2 seconds, so that you can see the 100%\n                try {\n                    Thread.sleep(2000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n\n                // close the progress bar dialog\n                progressBar.dismiss();\n            }\n          }\n           }).start();\n\n           }\n\n            });\n\n    }\n\n// file download simulator... a really simple\npublic int doSomeTasks() {\n\n    try{\n        String baseDir = Environment.getExternalStorageDirectory().getAbsolutePath();\n        String fileName = \"a.wmv\";\n        String newFileNEE = \"b.wmv\";\n        String newFileNED = \"c.wmv\";\n\n        FileInputStream fis = new FileInputStream(new File(baseDir + File.separator + fileName));\n\n        File outfile = new File(baseDir + File.separator + newFileNEE);\n            int read;\n            if(!outfile.exists())\n                outfile.createNewFile();\n\n            // long outfile_size = outfile.length();\n\n            File decfile = new File(baseDir + File.separator + newFileNED);\n            if(!decfile.exists())\n                decfile.createNewFile();\n\n\n            FileOutputStream fos = new FileOutputStream(outfile);\n            FileInputStream encfis = new FileInputStream(outfile);\n            FileOutputStream decfos = new FileOutputStream(decfile);\n\n            Cipher encipher = Cipher.getInstance(\"AES\");\n            Cipher decipher = Cipher.getInstance(\"AES\");\n\n            KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n            SecretKey skey = kgen.generateKey();\n            encipher.init(Cipher.ENCRYPT_MODE, skey);\n            CipherInputStream cis = new CipherInputStream(fis, encipher);\n            decipher.init(Cipher.DECRYPT_MODE, skey);\n            CipherOutputStream cos = new CipherOutputStream(decfos,decipher);\n\n            while((read = cis.read())!=-1)\n                    {\n                        fos.write((char)read);\n                        fos.flush();\n                    }   \n            fos.close();\n            while((read=encfis.read())!=-1)\n            {\n                cos.write(read);\n                cos.flush();\n            }\n            cos.close();\n\n    }catch (Exception e) {\n        // TODO: handle exceptione\n        e.printStackTrace();\n    }\n    return 100;\n}\n", "idx": 1949}
{"project": "cipher", "commit_id": "Snippet38407929_20358.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"blowfish\");\n", "idx": 1950}
{"project": "cipher", "commit_id": "Snippet16613819_27.java", "target": 0, "func": "try{\n   Cipher c = Cipher.getInstance(\"AES\");\n}\ncatch(Exception e){\n   //do something about it\n}\n", "idx": 1951}
{"project": "cipher", "commit_id": "Snippet40820396_22707.java", "target": 0, "func": "import java.security.Security;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class EncryptTests {\n  public static void main(String[] args) throws Exception {\n        byte[] input = \"www.java2s.com\".getBytes();\n        byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,\n            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };\n\n        SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        System.out.println(new String(input));\n\n        // encryption pass\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n        int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n        ctLength += cipher.doFinal(cipherText, ctLength);\n        System.out.println(new String(cipherText));\n        System.out.println(ctLength);\n\n        // decryption pass\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] plainText = new byte[cipher.getOutputSize(ctLength)];\n        int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);\n        ptLength += cipher.doFinal(plainText, ptLength);\n        System.out.println(new String(plainText));\n        System.out.println(ptLength);\n      }\n    }   \n", "idx": 1952}
{"project": "cipher", "commit_id": "Snippet27353260_9546.java", "target": 0, "func": "public class Encryptor {\n    private static String inputFilePath = \"D:/1.txt\";\n    public static void main(String[] args) {\n        FileOutputStream fos = null;\n        File file = new File(inputFilePath);\n        String keyString = \"140405PX_0.$88\";\n        String algorithm = \"DESede\";\n        try {\n            FileInputStream fileInputStream = new FileInputStream(file);\n            byte[] fileByteArray = new byte[fileInputStream.available()];\n            fileInputStream.read(fileByteArray);\n            for (byte b : fileByteArray) {\n            System.out.println(b);\n            }\n            SecretKey secretKey = getKey(keyString);\n            Cipher cipher = Cipher.getInstance(algorithm);\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            ObjectOutputStream objectOutputStream = new ObjectOutputStream\n                    (new CipherOutputStream\n                            (new FileOutputStream\n                                    (\"D:/Secret.file\"), cipher));\n            objectOutputStream.writeObject(fileByteArray);\n            objectOutputStream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    public static SecretKey getKey(String message) throws Exception {\n        String messageToUpperCase = message.toUpperCase();\n        byte[] digestOfPassword = messageToUpperCase.getBytes();\n        byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n        return key;\n    }\n}\n", "idx": 1953}
{"project": "cipher", "commit_id": "Snippet24569286_6934.java", "target": 0, "func": "byte data[] = new byte[1024];\n\n            String seed = \"password\";\n\n            byte[] rawKey = getRawKey(seed.getBytes());\n            SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n            output = new CipherOutputStream(output, cipher);\n\n\n            long total = 0;\n\n            while ((count = input.read(data)) != -1) {\n                total += count;\n                publishProgress(\"\" + (int) ((total * 100) / lenghtOfFile));\n\n\n                output.write(data, 0, count);\n\n            }\n", "idx": 1954}
{"project": "cipher", "commit_id": "Snippet27781179_9947.java", "target": 0, "func": "public final String encryptAES(final String plaintext, SecretKey key) {\n        String ciphertext = new String();\n\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] bytePlaintext = plaintext.getBytes();\n            byte[] byteCiphertext = cipher.doFinal(bytePlaintext);\n            ciphertext = new BASE64Encoder().encode(byteCiphertext);\n\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"NoSuchAlgorithmException: \" + e);\n        } catch (NoSuchPaddingException e) {\n            System.out.println(\"NoSuchPaddingException: \" + e);\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n            System.out.println(\"InvalidKeyException: \" + e);\n        } catch (IllegalBlockSizeException e) {\n            System.out.println(\"IllegalBlockSizeException: \" + e);\n        } catch (BadPaddingException e) {\n            System.out.println(\"BadPaddingException: \" + e);\n        }\n        return ciphertext;\n    }\n\npublic final String decryptedPlain(String ciphertext, SecretKey key) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, key);\n\n\n            byte [] decodedValue = new Base64().decode(ciphertext.getBytes());\n            plaintext = cipher.doFinal(decodedValue);\n\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"NoSuchAlgorithmException: \" + e);\n        } catch (NoSuchPaddingException e) {\n            System.out.println(\"NoSuchPaddingException: \" + e);\n        } catch (InvalidKeyException e) {\n            System.out.println(\"InvalidKeyException: \" + e);\n        } catch (IllegalBlockSizeException e) {\n            System.out.println(\"IllegalBlockSizeException: \" + e);\n        } catch (BadPaddingException e) {\n            System.out.println(\"BadPaddingException: \" + e);\n        }\n\n        return new String(plaintext);\n    }\n", "idx": 1955}
{"project": "cipher", "commit_id": "Snippet1226083_29894.java", "target": 0, "func": "decryptCipher = Cipher.getInstance(\"AES\");\ndecryptCipher.init(Cipher.DECRYPT_MODE, aesKey);\n", "idx": 1956}
{"project": "cipher", "commit_id": "Snippet37204839_19151.java", "target": 0, "func": "public class ata {\npublic static byte[] a(byte[] bArr, String str) {\n    try {\n        return ata.a(bArr, str.getBytes(\"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n\npublic static byte[] a(byte[] bArr, byte[] bArr2) {\n    try {\n        Cipher instance = Cipher.getInstance(\"RC4\");\n        instance.init(2, new SecretKeySpec(bArr2, \"RC4\"));\n        return instance.update(bArr);\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n        return null;\n    } catch (NoSuchPaddingException e2) {\n        e2.printStackTrace();\n        return null;\n    } catch (InvalidKeyException e3) {\n        e3.printStackTrace();\n        return null;\n    }\n  }\n}\n", "idx": 1957}
{"project": "cipher", "commit_id": "Snippet39805168_21692.java", "target": 0, "func": "public static String decrypt(String input, String key) {\n        byte[] output = null;\n        try {\n            SecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, skey);\n            output = cipher.doFinal(Base64.decode(input,Base64.NO_WRAP));\n        } catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        return new String(output);\n}\n", "idx": 1958}
{"project": "cipher", "commit_id": "Snippet13973662_37402.java", "target": 0, "func": "SecretKeyFactory kf = SecretKeyFactory.getInstance(\"DES\");\nString key = \"abcdefg\";\nDESKeySpec keySpec = new DESKeySpec(key.getBytes());\nSecretKey _key = kf.generateSecret(keySpec);\nString xform = \"DES\";\nCipher cipher = Cipher.getInstance(xform);\nbyte[] IV = { 11, 22, 33, 44, 55, 66, 77, 88, 99, 18, 69, 17, 72, 94, 18, 30 };\nIvParameterSpec ips = new IvParameterSpec(IV);\ncipher.init(Cipher.ENCRYPT_MODE, _key, ips);\nString plainText = \"abcdeffdkflsdkf\";\nbyte[] cipherText = cipher.doFinal(plainText.getBytes());\n", "idx": 1959}
{"project": "cipher", "commit_id": "Snippet27124931_9284.java", "target": 0, "func": "public final class CipherSpike2 {\n\n  private static final byte[] SECRET_KEY = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n\n  public static void main(String[] args)\n  throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException {\n    encryptDecrypt(511);\n    encryptDecrypt(512);\n  }\n\n  private static void encryptDecrypt(int i)\n  throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException {\n\n    byte[] clearText = generateClearText(i);\n    System.out.println(\"Clear text length: \" + clearText.length);\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    CipherOutputStream cos = new CipherOutputStream(bos, getCipher(Cipher.ENCRYPT_MODE));\n    cos.write(clearText);\n    cos.close();\n\n    final byte[] content = bos.toByteArray();\n    System.out.println(\"written bytes: \" + content.length);\n\n    CipherInputStream\n    inputStream =\n    new CipherInputStream(new ByteArrayInputStream(content), getCipher(Cipher.DECRYPT_MODE));\n\n    inputStream.read();\n    inputStream.close();\n }\n\n private static byte[] generateClearText(int size) {\n    return new byte[size];\n  }\n\n  private static Cipher getCipher(int encryptMode)\n  throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    SecretKeySpec key = new SecretKeySpec(SECRET_KEY, \"AES\");\n    cipher.init(encryptMode, key);\n    return cipher;\n  }\n}\n", "idx": 1960}
{"project": "cipher", "commit_id": "Snippet10986930_35227.java", "target": 0, "func": "public String Decrypt(String strText)\n{\n    try\n    {\n        // Text to decrypt\n        byte[] test = strText.getBytes();\n\n        //bytKey is the same key as Python app\n        SecretKeySpec objKey = new SecretKeySpec(bytKey, \"AES\");\n        Cipher objCipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n        objCipher.init(Cipher.DECRYPT_MODE, objKey);\n\n        // Here I got an exception >>\n        byte[] bytValue = objCipher.doFinal(test);\n\n        return new String(bytValue);\n    }\n    catch (Exception exc)\n    {\n        exc.printStackTrace();\n    }\n\n    return \"\";\n\n}\n", "idx": 1961}
{"project": "cipher", "commit_id": "Snippet20906264_3510.java", "target": 0, "func": "public class Cryptooo {\n\nSecretKeySpec key = null;\nbyte[] ciphertext;\n\n public void generateKey()  {\n\n String passphrase = \"3xtr3meDiFficUltp@ss\";\n\n MessageDigest digest = null;\n try {\n     digest = MessageDigest.getInstance(\"SHA\");\n } catch (NoSuchAlgorithmException e) {\n     e.printStackTrace();\n }\n\n digest.update(passphrase.getBytes());\n key = new SecretKeySpec(digest.digest(), 0, 16, \"AES\");\n\n byte[] keyBytes = key.getEncoded();\n\n\n\n }\n\n\npublic byte[] encrypt(String string)    {\n    Cipher aes = null;\n    try {\n        aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n    aes.init(Cipher.ENCRYPT_MODE, key);\n    ciphertext = aes.doFinal(string.getBytes());\n\n\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    }\n\n    return ciphertext;\n}\n\npublic String decrypt(byte[] ciphertext)    {\n\n    Cipher aes = null;\n    String cleartext =null;\n\n\n    try {\n        aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        aes.init(Cipher.DECRYPT_MODE, key);\n        cleartext = new String(aes.doFinal(ciphertext));\n\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    }\n\n    return cleartext;\n}\n\n}\n", "idx": 1962}
{"project": "cipher", "commit_id": "Snippet11719743_35731.java", "target": 0, "func": "KeyGenerator kgen = KeyGenerator.getInstance(\"Blowfish\");\nSecretKey skey = kgen.generateKey();\nbyte[] raw = skey.getEncoded();\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"Blowfish\");\n\nCipher cipher = Cipher.getInstance(\"Blowfish\");\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec);\nString inputString = \"This is just an example\";\nbyte[] encrypted = cipher.doFinal(inputString.getBytes());\n\nCipher decCipher = Cipher.getInstance(\"Blowfish\");\ndecCipher.init(Cipher.DECRYPT_MODE, skeySpec);\nbyte[] decrypted = decCipher.doFinal(encrypted);\n\nassertEquals(inputString, new String(decrypted));\n", "idx": 1963}
{"project": "cipher", "commit_id": "Snippet12775575_36442.java", "target": 0, "func": "import java.security.*;\nimport java.security.spec.InvalidKeySpecException;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\n\n\nimport sun.misc.*;\n\npublic class AESencrp {\nprivate static final String ALGO = \"AES\";\nprivate static final byte[] keyValue = \n    new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't','S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\npublic static String encrypt(String Data) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(Data.getBytes());\n    String encryptedValue = new BASE64Encoder().encode(encVal);\n    return encryptedValue;\n}\n\npublic static String decrypt(String encryptedData) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    return decryptedValue;\n}\n\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, ALGO);\n    return key;\n}\n\n\n\n}\n", "idx": 1964}
{"project": "cipher", "commit_id": "Snippet42044614_24019.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DESede\");\nbyte[] bytes = cipher.doFinal(value.getBytes());\nString decrypted = new String(bytes);[code]\n", "idx": 1965}
{"project": "cipher", "commit_id": "Snippet26581748_8725.java", "target": 0, "func": "public class MainActivity extends Activity {\n\nButton button1, button2;\n\nString KEY = \"MyKey\";\nSparseArray<byte[]> array = new SparseArray<byte[]>();\nSparseArray<byte[]> decryptArray = new SparseArray<byte[]>();\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    button1 = (Button) findViewById(R.id.button1);\n    button1.setOnClickListener(new OnClickListener() {\n\n        @Override\n        public void onClick(View v) {\n           try {\n               new EncryptAsyncTask().execute();\n           } catch (Exception e) {  \n               e.printStackTrace();\n           }\n        }\n    });\n\n    button2 = (Button) findViewById(R.id.button2);\n    button2.setOnClickListener(new OnClickListener() {\n\n        @Override\n        public void onClick(View v) {\n            try {\n                new DecryptAsyncTask().execute();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n\n\n   public class EncryptAsyncTask extends AsyncTask<String, String, String>{\n\n   ProgressDialog mDialog;\n\n   @Override\n   protected void onPreExecute() {\n        super.onPreExecute();\n        mDialog = ProgressDialog.show(MainActivity.this, \"\", \"Please wait\");\n   }\n\n    @Override\n    protected String doInBackground(String... params) {\n         byte[] incrept = null;\n        try {\n            getImageFile();\n            if(array!=null && array.size()>0){\n                for(int i=0 ; i<array.size() ; i++){\n                    byte[] byteArray = array.get(i);\n                    incrept = encrypt(KEY, byteArray);\n                     FileOutputStream fos = null;\n                        try {\n                            fos = new FileOutputStream(new File(\n                                   Environment.getExternalStorageDirectory()+File.separator\n                                    +\"EncryptedImages\"+File.separator+i+\"_Image.jpg\"));\n                        } catch (FileNotFoundException e) {\n                            e.printStackTrace();\n                        }\n                        try {\n                            fos.write(incrept);\n                        } catch (IOException e1) {\n                            e1.printStackTrace();\n                        }\n                        try {\n                            fos.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                }\n            }               \n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    @Override\n    protected void onPostExecute(String result) {\n        super.onPostExecute(result);\n\n        if(mDialog.isShowing()){\n            mDialog.dismiss();\n        }\n    }\n }\n\n public class DecryptAsyncTask extends AsyncTask<String, String, String>{\n\n   ProgressDialog mDialog;\n\n   @Override\nprotected void onPreExecute() {\nsuper.onPreExecute();\n    mDialog = ProgressDialog.show(MainActivity.this, \"\", \"Please wait\");\n}\n\n    @Override\n    protected String doInBackground(String... params) {\n         byte[] incrept = null;\n        try {\n            getImageFileFromSdCard();\n            if(decryptArray!=null && decryptArray.size()>0){\n                for(int i=0 ; i<decryptArray.size() ; i++){\n                    byte[] byteArray = decryptArray.get(i);\n                    incrept = decrypt(KEY, byteArray);                        \n                     FileOutputStream fos = null;\n                        try {\n                            fos = new FileOutputStream(new File(\n                                   Environment.getExternalStorageDirectory()+File.separator\n                                    +\"DecryptedImages\"+File.separator+i+\"_Image.jpg\"));\n                        } catch (FileNotFoundException e) {\n                            e.printStackTrace();\n                        }\n                        try {\n                            fos.write(incrept);\n                        } catch (IOException e1) {\n                            e1.printStackTrace();\n                        }\n                        try {\n                            fos.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                }\n            }               \n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    public byte[]   getImageFile() throws FileNotFoundException\n{\n  byte[] Image_data = null;\n  byte[] arry = null;\n    try {\n        File file = new File(Environment.getExternalStorageDirectory()+File.separator+\"Images\"+File.separator);\n        if(file.exists() && file.isDirectory()){\n            File[] listOfImages = file.listFiles();\n            if(listOfImages.length>0){\n                 for(int i=0; i<listOfImages.length; i++){\n                     byte[] inarry = null;\n                     InputStream is = new BufferedInputStream(new FileInputStream(listOfImages[i]));\n                     int length = is.available();\n                        Image_data = new byte[length];\n\n                        int bytesRead;\n                        ByteArrayOutputStream output = new ByteArrayOutputStream();\n                        while ((bytesRead = is.read(Image_data)) != -1)\n                        {\n                            output.write(Image_data, 0, bytesRead);\n                        }\n                      inarry = output.toByteArray();\n                      array.put(i, inarry);\n                      is.close();\n                 }\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\nreturn arry;\n}\n\npublic void getImageFileFromSdCard() throws FileNotFoundException\n{\ntry {\n    File file = new            File(Environment.getExternalStorageDirectory()+File.separator+\"EncryptedImages\"+File.separator);\n    if(file.exists() && file.isDirectory()){\n        File[] listOfFiles = file.listFiles();\n        if(listOfFiles.length>0){\n            for(int i=0 ; i<listOfFiles.length ; i++){\n                FileInputStream fileInputStream = new FileInputStream(listOfFiles[i]);\n                byte[] bFile = new byte[(int) listOfFiles[i].length()];\n                fileInputStream.read(bFile);\n                fileInputStream.close();\n                decryptArray.put(i, bFile);\n            }\n        }\n    }\n} catch (IOException e) {\n    e.printStackTrace();\n}\n}\n\npublic  byte[] encrypt(String seed, byte[] cleartext) throws Exception {\n\n    byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext);\n        return result;\n}\n\npublic  byte[] decrypt(String seed, byte[] encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = encrypted;\n        byte[] result = decrypt(rawKey, enc);\n\n        return result;\n}\n\nprivate  byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n    kgen.init(128, sr); \n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n} \n\n\nprivate  byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.update(clear);\n        return encrypted;\n}\n\nprivate  byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.update(encrypted);\n        return decrypted;\n}\n }\n", "idx": 1966}
{"project": "cipher", "commit_id": "Snippet28793353_10934.java", "target": 0, "func": "public void decrypt(Cipher c) throws ClassNotFoundException, IllegalBlockSizeException, BadPaddingException, IOException{\n\n    //decrypting the AES key (CryptoStack.java:110)\n    keyCache = (SecretKey) key.getObject(c);\n\n    //generating Cipher for decryption\n    Cipher c1 = null;\n    try {\n        c1 = Cipher.getInstance(\"AES\");\n        c1.init(Cipher.DECRYPT_MODE, keyCache);\n    } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    //decrypting Object with previous generated Cipher\n    stackCache = (Stack) stack.getObject(c1);\n}\n", "idx": 1967}
{"project": "cipher", "commit_id": "Snippet4673158_31257.java", "target": 0, "func": "import java.io.ByteArrayOutputStream;\nimport java.text.SimpleDateFormat;\nimport java.util.StringTokenizer;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\n\n// TODO: Auto-generated Javadoc\n\n/**\n * The Class SymmetricEncryption.\n */\n\npublic class SymmetricEncryption {\n\n    public static void main(String args[]) {\n\n        String signatureKey = \"185-188-32-81-185-2-188-103-248-127-38-173-109-200-56-32-81-47-234-4-191-157-26-247\";\n        String serverTime = \"2011-01-12 18:48:43.000\";\n        String encryptedSignatureKey = \"240-230-243-218-251-103-145-3-156-109-41-25-127-185-149-150-36-96-176-154-83-24-20-89\";\n\n        SymmetricEncryption sE = new SymmetricEncryption();\n        String result1 = sE.genericencrypt(serverTime, signatureKey);\n\n        System.out.println(result1);\n    }\n\n    /**\n     * The d format.\n     */\n    public final SimpleDateFormat dFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\n    /**\n     * The ivbytes.\n     */\n    public byte[] ivbytes = new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};\n\n    /**\n     * The iv.\n     */\n    public IvParameterSpec iv = new IvParameterSpec(ivbytes);\n\n    /**\n     * Genericencrypt.\n     *\n     * @param source    the source\n     * @param keyString the key string\n     * @return the string\n     */\n    public String genericencrypt(String source, String keyString) {\n        try {\n\n            // Generate key\n            SecretKey key = getKey(keyString);\n\n            // Create the cipher\n            Cipher desCipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n\n            // Initialize the cipher for encryption\n            desCipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n            // Our cleartext as bytes\n            byte[] cleartext = source.getBytes();\n\n            System.out.println(\"Server Time ASCII \" + new String(cleartext));\n\n            // Encrypt the cleartext\n            byte[] ciphertext = desCipher.doFinal(cleartext);\n\n            System.out.println(\"ciphertext ASCII \" + new String(ciphertext));\n\n            // Return a String representation of the cipher text\n            return getString(ciphertext);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     * Gets the key.\n     *\n     * @param keyString the key string\n     * @return the key\n     */\n    private SecretKey getKey(String keyString) {\n        try {\n            byte[] bytes = getBytes(keyString);\n            return new SecretKeySpec(bytes, \"DESede\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     * Gets the string.\n     *\n     * @param bytes the bytes\n     * @return the string\n     */\n    public String getString(byte[] bytes) {\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < bytes.length; i++) {\n            byte b = bytes[i];\n            sb.append((int) (0x00FF & b));\n            if (i + 1 < bytes.length) {\n                sb.append(\"-\");\n            }\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Gets the bytes.\n     *\n     * @param str the str\n     * @return the bytes\n     */\n    public byte[] getBytes(String str) {\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        StringTokenizer st = new StringTokenizer(str, \"-\", false);\n        while (st.hasMoreTokens()) {\n            int i = Integer.parseInt(st.nextToken());\n            bos.write((byte) i);\n        }\n        return bos.toByteArray();\n    }\n}\n", "idx": 1968}
{"project": "cipher", "commit_id": "Snippet39093489_20971.java", "target": 0, "func": "Key key = new SecretKeySpec(keyValue, \"AES\");\nCipher c = Cipher.getInstance(\"AES\");\nc.init(1, key);\nbyte[] encVal = c.doFinal(Data.getBytes());\nencryptedValue = new BASE64Encoder().encode(encVal);\n", "idx": 1969}
{"project": "cipher", "commit_id": "Snippet45276056_27401.java", "target": 0, "func": "try\n{\n\n    FileInputStream encfis = new FileInputStream(Encrypted_File_Path);\n    FileOutputStream decfos = new FileOutputStream(Decrypted_File_Path);\n\n    Cipher decipher = Cipher.getInstance(\"AES\");\n\n    String encode =\"8888888888888888\";\n    byte[] decodedKey = encode.getBytes();\n    SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\");\n\n    decipher.init(Cipher.DECRYPT_MODE, originalKey);\n    CipherOutputStream cos = new CipherOutputStream(decfos,decipher);\n\n    int c;\n    byte[] d1 = new byte[4096 * 2048];\n    while((c = encfis.read(d1)) != -1)\n    {\n        cos.write(d1, 0, c);\n        cos.flush();\n    }\n    cos.close();\n}\ncatch(Exception e)\n{\n    e.printStackTrace();\n}\n", "idx": 1970}
{"project": "cipher", "commit_id": "Snippet34692737_16692.java", "target": 0, "func": "import java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Security {\n    private static byte[] IV_64 = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 };\n    private static byte[] KEY_64 = new byte[] { 7, 1, 7, 7, 5, 5, 4, 7 };\n\n    private static String KEY_TYPE = \"DES\";\n    private static String ALGORITHM = \"DES/CBC/PKCS5Padding\";\n\n    public static String GetString(byte[] value) {\n        StringBuilder builder = new StringBuilder();\n        for (byte i : value) {\n            builder.append(String.format(\"%02X\", i & 0xff));\n        }\n        return builder.toString();\n    }\n\n    public static byte[] GetByte(String value) {\n        StringBuilder builder = new StringBuilder();\n        for (char i : value.toCharArray()) {\n            builder.append(String.format(\"%02X\", i & 0xff));\n        }\n        return String.valueOf(builder).getBytes();\n    }\n\n    public static byte[] Encrypt(byte[] value) {\n        try {\n            Cipher cipher = Cipher.getInstance(ALGORITHM);\n            cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(KEY_64, KEY_TYPE), new IvParameterSpec(IV_64));\n            return cipher.doFinal(value);\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (InvalidAlgorithmParameterException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public static byte[] Decrypt(byte[] value) {\n        try {\n            Cipher cipher = Cipher.getInstance(ALGORITHM);\n            cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(KEY_64, KEY_TYPE), new IvParameterSpec(IV_64));\n            return cipher.doFinal(value);\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (InvalidAlgorithmParameterException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n", "idx": 1971}
{"project": "cipher", "commit_id": "Snippet31398170_13512.java", "target": 0, "func": "public String encrypt (String str,String key) throws EncryptException {\n\n    try{\n        javax.crypto.spec.SecretKeySpec keyspec = new javax.crypto.spec.SecretKeySpec(key.getBytes(), \"AES\");\n        javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"AES\");\n        c.init(javax.crypto.Cipher.ENCRYPT_MODE, keyspec);\n        byte[] src = str.getBytes(\"UTF-8\");\n        byte[] encrypt = c.doFinal(src);\n        return new sun.misc.BASE64Encoder().encode(encrypt).replaceAll(\"\\r|\\n\", \"\");\n    }catch(Exception e){\n        throw new EncryptException(\"Encrypt failed.\",e);\n    }\n}\n", "idx": 1972}
{"project": "cipher", "commit_id": "Snippet31720188_13813.java", "target": 0, "func": "IvParameterSpec localIvParameterSpec = new IvParameterSpec(new byte[] { 12, 34, 34, 11, 64, 23, 89, 27 });\n\nDESKeySpec localDESKeySpec = new DESKeySpec(paramString2.getBytes());\n\nSecretKey localSecretKey = SecretKeyFactory.getInstance(\"DES\").generateSecret(localDESKeySpec);\n\nCipher localCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\nlocalCipher.init(1, localSecretKey, localIvParameterSpec);\n\nreturn new String(Base64.encode(localCipher.doFinal(paramString1.getBytes()), 0));\n", "idx": 1973}
{"project": "cipher", "commit_id": "Snippet19223599_2060.java", "target": 0, "func": "SecretKeySpec keySpec = new SecretKeySpec(keyBytes, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, keySpec);\nbyte[] encrypted = cipher.doFinal(clearTextBytes);\n", "idx": 1974}
{"project": "cipher", "commit_id": "Snippet5136279_31475.java", "target": 0, "func": "SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\ncipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec );\n", "idx": 1975}
{"project": "cipher", "commit_id": "Snippet32156462_14252.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 1976}
{"project": "cipher", "commit_id": "Snippet43415059_25512.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\nbyte[] stringBytes = message.getBytes(\"UTF8\");\nbyte[] raw = cipher.doFinal(stringBytes);\n\nBASE64Encoder encoder = new BASE64Encoder();\nString base64 = encoder.encode(raw);\nreturn base64;\n", "idx": 1977}
{"project": "cipher", "commit_id": "Snippet18106542_1138.java", "target": 0, "func": "public void login() {\n        LoginData loginData = this.fragmentBox.getUpdatedLoginData();\n\n        String finishString = new String();\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            byte[] output = null;\n\n            SecretKeySpec secretKey = new SecretKeySpec(\n                    Globals.ENCRYPTPW.getBytes(), \"AES\");\n\n            System.out.println(secretKey.getEncoded().toString() +  \"----\" + Globals.ENCRYPTPW);\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n            output = cipher.doFinal(loginData.getPassword().getBytes());\n\n            byte[] encryptedUsernameString = Base64.encode(output, 0);\n            finishString = new String(encryptedUsernameString, \"UTF-8\");\n\n        } catch (InvalidKeyException e) {\n            e.getStackTrace();\n            Log.v(\"Fehler im Code\",\"\");\n        } catch(Exception e){}\n\n\n        System.out.println(\"Code: \" + finishString);\n}\n", "idx": 1978}
{"project": "cipher", "commit_id": "Snippet28154780_10319.java", "target": 0, "func": "package test;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.security.InvalidKeyException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class TestCrypt{\n\n    private static final String salt = \"t784\";\n    private static final String cryptPassword = \"873147cbn9x5'2 79'79314\";\n    private static final String fileToBeCrypted = \"c:\\\\Temp\\\\sampleFile.conf\";\n    private static final String fileToBeDecrypted = \"c:\\\\Temp\\\\sampleFile.conf.crypt\";\n    private static final String fileDecryptedOutput = \"c:\\\\Temp\\\\sampleFile.conf.decrypted\";\n\n    public static void main(String[] args) throws Exception\n    {\n        for (int i=0; i<100; i++)\n        {\n            encryptfile(fileToBeCrypted, cryptPassword);\n            decrypt(fileToBeDecrypted, cryptPassword, fileDecryptedOutput);\n            System.out.println(i);\n        }\n    }\n\n    public static void encryptfile(String path,String password) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n        FileInputStream fis = new FileInputStream(path);\n        FileOutputStream fos = new FileOutputStream(path.concat(\".crypt\"));\n        byte[] key = (salt + password).getBytes(\"UTF-8\");\n        MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n        key = sha.digest(key);\n        key = Arrays.copyOf(key,16);\n        SecretKeySpec sks = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, sks);\n        CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n        int b;\n        byte[] d = new byte[8];\n        while((b = fis.read(d)) != -1) {\n            cos.write(d, 0, b);\n        }\n        cos.flush();\n        cos.close();\n        fis.close();\n    }\n\n    public static void decrypt(String path,String password, String outPath) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n        FileInputStream fis = new FileInputStream(path);\n        FileOutputStream fos = new FileOutputStream(outPath);\n        byte[] key = (salt + password).getBytes(\"UTF-8\");\n        MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n        key = sha.digest(key);\n        key = Arrays.copyOf(key,16);\n        SecretKeySpec sks = new SecretKeySpec(key, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, sks);\n        CipherInputStream cis = new CipherInputStream(fis, cipher);\n        int b;\n        byte[] d = new byte[8];\n        while((b = cis.read(d)) != -1) {\n            fos.write(d, 0, b);\n        }\n        fos.flush();\n        fos.close();\n        cis.close();\n    }\n\n}\n", "idx": 1979}
{"project": "cipher", "commit_id": "Snippet4259082_31061.java", "target": 0, "func": "  final byte[] rawKey = hexStringToByteArray(\"9c361fec3ac1ebe7b540487c9c25e24e\");\n  final SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\n  // Instantiate the cipher\n  final Cipher cipher = Cipher.getInstance(\"AES\");\n  cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n  final byte[] encrypted = cipher.doFinal(plainText.getBytes());\n", "idx": 1980}
{"project": "cipher", "commit_id": "Snippet27785263_9951.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Base64;\n/**\nAes encryption\n*/\npublic class AES\n{\n\n    private static SecretKeySpec secretKey ;\n    private static byte[] key ;\n\n    private static String decryptedString;\n    private static String encryptedString;\n\n    public static void setKey(String myKey){\n\n\n        MessageDigest sha = null;\n        try {\n            key = myKey.getBytes(\"UTF-8\");\n            System.out.println(key.length);\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            key = sha.digest(key);\n            key = Arrays.copyOf(key, 16); // use only first 128 bit\n            System.out.println(key.length);\n            System.out.println(new String(key,\"UTF-8\"));\n            secretKey = new SecretKeySpec(key, \"AES\");\n\n\n        } catch (NoSuchAlgorithmException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n\n\n    }\n\n    public static String getDecryptedString() {\n        return decryptedString;\n    }\n    public static void setDecryptedString(String decryptedString) {\n        AES.decryptedString = decryptedString;\n    }\n    public static String getEncryptedString() {\n        return encryptedString;\n    }\n    public static void setEncryptedString(String encryptedString) {\n        AES.encryptedString = encryptedString;\n    }\n    public static String encrypt(String strToEncrypt)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n\n            setEncryptedString(Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))));\n\n        }\n        catch (Exception e)\n        {\n\n            System.out.println(\"Error while encrypting: \"+e.toString());\n        }\n        return null;\n    }\n    public static String decrypt(String strToDecrypt)\n    {\n        try\n        {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            setDecryptedString(new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt))));\n\n        }\n        catch (Exception e)\n        {\n\n            System.out.println(\"Error while decrypting: \"+e.toString());\n        }\n        return null;\n    }\n    public static void main(String args[])\n    {\n                final String strToEncrypt = \"My text to encrypt\";\n                final String strPssword = \"encryptor key\";\n                AES.setKey(strPssword);\n\n                AES.encrypt(strToEncrypt.trim());\n\n                System.out.println(\"String to Encrypt: \" + strToEncrypt); \n                System.out.println(\"Encrypted: \" + AES.getEncryptedString());\n\n                final String strToDecrypt =  AES.getEncryptedString();\n                AES.decrypt(strToDecrypt.trim());\n\n                System.out.println(\"String To Decrypt : \" + strToDecrypt);\n                System.out.println(\"Decrypted : \" + AES.getDecryptedString());\n\n    }\n\n}\n", "idx": 1981}
{"project": "cipher", "commit_id": "Snippet13525299_37083.java", "target": 0, "func": "\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class Encryption {\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2*buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n    private final static String HEX = \"0123456789ABCDEF\";\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n    }\n\n\n}\n", "idx": 1982}
{"project": "cipher", "commit_id": "Snippet20503465_3111.java", "target": 0, "func": "public class testCipher \n{\n    public static final String PROVIDER = \"SunJCE\";\n    private static final String ALGORITHM = \"AES\";\n    private static final String aesKey = \"some long key\";\n    static Cipher ecipher;\n    static Cipher dcipher;\n\n    public static void main(String[] args)  \n    {\n\n    try {\n\n    byte[] buf1 = aesKey.getBytes(\"UTF-8\");\n    MessageDigest sha = MessageDigest.getInstance(\"SHA-256\");\n    buf1 = sha.digest(buf1);\n    buf1 = Arrays.copyOf(buf1, 16);\n    SecretKeySpec keySpec = null;\n    keySpec = new SecretKeySpec(buf1, \"AES\");\n\n    ecipher = Cipher.getInstance(ALGORITHM, PROVIDER);\n    dcipher = Cipher.getInstance(ALGORITHM, PROVIDER);\n\n    ecipher.init(1, keySpec);\n    dcipher.init(2, keySpec, ecipher.getParameters());\n\n    if (args[0].equals(\"encrypt\"))\n    System.out.println(encrypt(args[1]));\n    else if (args[0].equals(\"decrypt\"))\n    System.out.println(decrypt(args[1]));\n    else {\n    System.out.println(\"USAGE: encrypt/decrypt '<string>'\");\n    System.exit(15);\n   }\n\n} catch (Exception e) {\n    System.exit(5);\n} \n\n}\n\npublic static String encrypt(String str) \n{\n    try {\n\n        byte[] utf8 = str.getBytes(\"UTF8\");\n        byte[] enc = ecipher.doFinal(utf8);\n        return new sun.misc.BASE64Encoder().encode(enc);\n\n    } catch (Exception e) {\n        System.exit(7);\n    }\n\n    return null;\n}\n\npublic static String decrypt(String str) \n{\n    try {\n        // Decode base64 to get bytes\n        byte[] dec = new sun.misc.BASE64Decoder().decodeBuffer(str);\n\n        // Decrypt\n        byte[] utf8 = dcipher.doFinal(dec);\n\n        // Decode using utf-8\n        return new String(utf8, \"UTF8\");\n    } catch (Exception e) {\n        System.exit(7);\n    } \n    return null;\n}\n}\n", "idx": 1983}
{"project": "cipher", "commit_id": "Snippet24839323_7160.java", "target": 0, "func": "public static byte[] encryptLB(byte[] key, byte[] iv, byte[] unencrypted)\n               throws NoSuchAlgorithmException, ... {\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(key);\n            byte[] hash = digest.digest(); //build the hash (128 bit)\n\n              Cipher cipher = Cipher.getInstance(\"RC2/CBC/PKCS5Padding\");\n              cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(hash, \"RC2\"));\n              byte[] unByte = unencrypted;\n              byte[] encrypted = cipher.doFinal(unencrypted);\n              return encrypted;\n             }\n", "idx": 1984}
{"project": "cipher", "commit_id": "Snippet42708450_24747.java", "target": 0, "func": "    private static byte[] seedValue = {\n        0x2d, 0x2a, 0x2d, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x41, 0x43, 0x4f, 0x44, 0x45, 0x2d, 0x2a, 0x2d\n};\nprivate static String ALGORITHM = \"AES\";\nprivate static SecretKeySpec secretKey = new SecretKeySpec(seedValue, \"AES\");\n\n\npublic static String encrypt( String data ) throws Exception {\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] cipherText = cipher.doFinal(data.getBytes(\"UTF8\"));\n        String encryptedString = new String(Base64.encode(cipherText ,Base64.DEFAULT ) );\n        return encryptedString;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n\npublic static String decrypt(String data) throws Exception {\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        byte[] cipherText = Base64.decode(data.getBytes(\"UTF8\"), Base64.DEFAULT);\n        String decryptedString = new String(cipher.doFinal(cipherText),\"UTF-8\");\n        return decryptedString;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 1985}
{"project": "cipher", "commit_id": "Snippet10709830_35006.java", "target": 0, "func": "Security.addProvider(new BouncyCastleProvider());\n\n    DuncanCipherSecond cipherSecond = new DuncanCipherSecond();\n\n    RSAKeyXMLReader rsaKeyXMLReader = new RSAKeyXMLReader();\n    InputStream inputStream = new ByteArrayInputStream(rsaKeyInXMLString.getBytes());\n    RSAData rsaData = rsaKeyXMLReader.parse(inputStream);\n\n    if (rsaData != null) {\n        byte[] expBytes = Base64.decodeBase64(rsaData.getExponent().trim());\n        byte[] modBytes = Base64.decodeBase64(rsaData.getModulus().trim());\n        byte[] dBytes = Base64.decodeBase64(rsaData.getD().trim());\n\n\n        String nameFromDB = \"8B-FE-BE-28-27-94-0B-32-CE-86-24-9E-F1-DA-86-0F-E1-31-B7-2B-7A-58-2C-E2-3A-6F-05-E9-40-70-48-1D-73-6B-30-E5-95-B9-2A-8A-3F-6E-66-94-DF-8F-7C-11-77-C6-A1-E9-09-04-3B-19-C2-AF-19-CE-EE-22-A3-F9-17-D5-C8-C5-9F-12-F2-C5-72-25-D6-C3-D9-4B-E0-E5-46-19-27-80-9A-11-EC-0F-85-4D-13-0B-94-DB-1B-64-21-95-68-7B-A3-C9-1B-AA-94-E7-26-48-49-BA-CD-97-9D-41-23-1E-B6-F9-26-3C-1E-67-84-98-83-A7-3C-06\";\n        nameFromDB = nameFromDB.replace(\"-\", \"\");\n\n        byte[] newNameFromDB = hexStringToByteArray(nameFromDB);\n\n        BigInteger modules = new BigInteger(1, modBytes);\n        BigInteger exponent = new BigInteger(1, expBytes);\n        BigInteger d = new BigInteger(1, dBytes);\n\n        KeyFactory factory = KeyFactory.getInstance(\"RSA\");\n        Cipher cipher = Cipher.getInstance(\"RSA/None/OAEPWithSHA1AndMGF1Padding\", \"BC\");\n\n        System.out.println(\"\");\n        RSAPrivateKeySpec privSpec = new RSAPrivateKeySpec(modules, d);\n        PrivateKey privKey = factory.generatePrivate(privSpec);\n        cipher.init(Cipher.DECRYPT_MODE, privKey);\n        byte[] decrypted = cipher.doFinal(newNameFromDB);\n        System.out.println(\"decrypted: \" + new String(decrypted));\n", "idx": 1986}
{"project": "cipher", "commit_id": "Snippet29688911_11752.java", "target": 0, "func": "byte[] key = (\"Sh\").getBytes(\"UTF-8\");\nMessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\nkey = sha.digest(key);\nkey = Arrays.copyOf(key, 16);\n\nsecretKeySpec = new SecretKeySpec(key, \"AES\");\ncipher = Cipher.getInstance(\"AES\");\n\npublic void dec (String dir)\n{       \n    try{            \n        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);            \n        String cleartextFile = dir;         \n        FileInputStream fis = new FileInputStream(cleartextFile);                   \n        CipherInputStream cis = new CipherInputStream(fis, cipher);\n        FileOutputStream fos = new FileOutputStream(dir);\n\n        block = new byte[6];\n        while ((i = cis.read(block)) != -1) {\n            fos.write(block, 0, i);\n        }\n        fos.close();        \n    }\n    catch(Exception ex)\n    {\n        Toast.makeText(MainActivity.this, \"Chiper Error\"+ex, Toast.LENGTH_LONG).show();\n    }\n}\n", "idx": 1987}
{"project": "cipher", "commit_id": "Snippet25058903_7394.java", "target": 0, "func": "public static String decrypt3DES(String Key, String data) throws Exception\n{\n    Cipher cipher = null;\n    byte[] text = null;\n    byte[] desKey = null;\n    Key keySpec = null;\n    try {\n\n        if (Key.length() <= 16) {\n            cipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n            desKey = byteConvertor(Key);\n            keySpec = new SecretKeySpec(desKey, \"DES\");\n        } else if (Key.length() >= 32) {\n            cipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n            desKey = byteConvertor(Key);\n            keySpec = new SecretKeySpec(desKey, \"DESede\");\n        }\n        cipher.init(Cipher.DECRYPT_MODE, keySpec);\n\n        text = cipher.doFinal(byteConvertor(data));\n\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n    }\n\n    return alpha2Hex(byteArr2String(text));\n}\n", "idx": 1988}
{"project": "cipher", "commit_id": "Snippet10782267_35046.java", "target": 0, "func": "static void decrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    FileInputStream fis = new FileInputStream(\"data/encrypted\");\n\n    FileOutputStream fos = new FileOutputStream(\"data/decrypted\");\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while((b = cis.read(d)) != -1) {\n        fos.write(d, 0, b);\n    }\n    fos.flush();\n    fos.close();\n    cis.close();\n}\n", "idx": 1989}
{"project": "cipher", "commit_id": "Snippet42738641_24771.java", "target": 0, "func": "    try {\n        String english = \"Rastapopoulos\";\n        String chinese = \"\u6843\u8349\u5939\u82a5\u4eba\u8549\u82a5\u7389\u82a5\u82b1\u8377\u5b50\u8863\u5170\u82a5\u82b1\";\n        String transformationKey = \"asdewqayxswedcvf\";\n        Key aesKey = new SecretKeySpec(transformationKey.getBytes(\"UTF-8\"), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n\n        byte[] encrypted1 = cipher.doFinal(english.getBytes(\"UTF-8\"));\n        String encoded1 = Base64.encodeBase64String(encrypted1);\n\n        byte[] encrypted2 = cipher.doFinal(chinese.getBytes(\"UTF-8\"));\n        String encoded2 = Base64.encodeBase64String(encrypted2);\n\n        System.out.println(\"Original length: \" + english.length() + \"\\tEncrypted length: \" + encoded1.length() + \"\\t\" + encoded1);\n        System.out.println(\"Original length: \" + chinese.length() + \"\\tEncrypted length: \" + encoded2.length() + \"\\t\" + encoded2);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n", "idx": 1990}
{"project": "cipher", "commit_id": "Snippet25587557_7910.java", "target": 0, "func": "import java.security.NoSuchAlgorithmException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.management.openmbean.InvalidKeyException;\nimport javax.xml.bind.DatatypeConverter;\n\npublic class Test11 {\n\n    public static String brutToHexa(byte[] t) {\n        StringBuilder sb = new StringBuilder(t.length * 2);\n        for (int i = 0; i < t.length; i++) {\n\n            int v = t[i] & 0xff;\n            if (v < 16) {\n\n                sb.append('0');\n\n            }\n\n            sb.append(Integer.toHexString(v));//.append(\"-\");\n\n        }\n\n        return sb.toString();\n    }\n\n    public static byte[] hexStringToByteArray(String s) {\n        int len = s.length();\n        byte[] data = new byte[len / 2];\n        for (int i = 0; i < len; i += 2) {\n            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)\n                            + Character.digit(s.charAt(i + 1), 16));\n        }\n        return data;\n    }\n\n    public static byte[] encrypter(final String message, SecretKey cle)\n                    throws NoSuchAlgorithmException, NoSuchPaddingException,\n                    InvalidKeyException, IllegalBlockSizeException, BadPaddingException, java.security.InvalidKeyException {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, cle);\n        byte[] donnees = message.getBytes();\n\n        return cipher.doFinal(donnees);\n    }\n\n    public static String decrypter(final byte[] donnees, SecretKey cle)\n                    throws NoSuchAlgorithmException, NoSuchPaddingException,\n                    InvalidKeyException, IllegalBlockSizeException, BadPaddingException, java.security.InvalidKeyException {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, cle);\n\n        return new String(cipher.doFinal(donnees));\n    }\n\n    public static void main(String[] args) throws java.security.InvalidKeyException {\n\n        final String message = \"Java is the best\";\n\n        KeyGenerator keyGen;\n        try {\n            keyGen = KeyGenerator.getInstance(\"AES\");\n            SecretKey cle = keyGen.generateKey();\n\n            String hexKey = brutToHexa(cle.getEncoded());\n\n            byte[] enc = encrypter(message, cle);\n            System.out.print(\"encrypted text : \");\n            System.out.println(DatatypeConverter.printBase64Binary(enc));\n\n            String dec = decrypter(enc, cle);\n            System.out.println(\"decrypted text : \" + dec);\n\n            decryptWith(hexKey, brutToHexa(enc));\n\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException |\n                        IllegalBlockSizeException | BadPaddingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void decryptWith(String hexKey, String hexMessage) throws java.security.InvalidKeyException {\n        try {\n\n            byte[] byteKey = hexStringToByteArray(hexKey);\n            SecretKey secretKey = new SecretKeySpec(byteKey, \"AES\");\n\n            byte[] message = hexStringToByteArray(hexMessage);\n\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            String dec = new String(cipher.doFinal(message));\n            System.out.println(\"texte decrypte : \" + dec);\n\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 1991}
{"project": "cipher", "commit_id": "Snippet12350865_36239.java", "target": 0, "func": "    private static final String ALGORITHM = \"AES\";\n    ....\n    ....\n    Key key = new SecretKeySpec(new String(\"here is your symmetric key\").getBytes(), ALGORITHM);\n    Cipher c = Cipher.getInstance(ALGORITHM);\n    //dencript mode (passes the key)\n    c.init(Cipher.DECRYPT_MODE, key);\n    //Decode base64 to get bytes \n    byte[] encBytes  = new BASE64Decoder().decodeBuffer(encryptedValue);\n    // Decrypt \n    byte[] plainTxtBytes  = c.doFinal(encBytes);\n    // Decode\n    String decryptedValue = new String(plainTxtBytes , \"UTF-8\");\n", "idx": 1992}
{"project": "cipher", "commit_id": "Snippet45693335_27704.java", "target": 0, "func": "private static final String UNICODE_FORMAT = \"UTF8\";\npublic static final String DESEDE_ENCRYPTION_SCHEME = \"DESede\";\nprivate KeySpec myKeySpec;\nprivate SecretKeyFactory mySecretKeyFactory;\nprivate Cipher cipher;\nbyte[] keyAsBytes;\nprivate String myEncryptionKey;\nprivate String myEncryptionScheme;\nSecretKey key;\n\npublic DESedeEncryption() throws Exception\n{\n    myEncryptionKey = \"YOURPRIVATEKEY\";\n    myEncryptionScheme = DESEDE_ENCRYPTION_SCHEME;\n    keyAsBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n    myKeySpec = new DESedeKeySpec(keyAsBytes);\n    mySecretKeyFactory = SecretKeyFactory.getInstance(myEncryptionScheme);\n    cipher = Cipher.getInstance(myEncryptionScheme);\n    key = mySecretKeyFactory.generateSecret(myKeySpec);\n}\n\n/**\n * Method To Encrypt The String\n */\npublic String encrypt(String unencryptedString) {\n    String encryptedString = null;\n    try {\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);\n        byte[] encryptedText = cipher.doFinal(plainText);\n        encryptedString = Base64.encodeToString(encryptedText, Base64.DEFAULT);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return encryptedString.endsWith(\"\\n\") ? encryptedString.replace(\"\\n\",\"\") : encryptedString;\n}\n/**\n * Method To Decrypt An Ecrypted String\n */\npublic String decrypt(String encryptedString) {\n    String decryptedText=null;\n    try {\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] encryptedText = Base64.decode(encryptedString, Base64.DEFAULT);\n        byte[] plainText = cipher.doFinal(encryptedText);\n        decryptedText= bytes2String(plainText);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return decryptedText;\n}\n/**\n * Returns String From An Array Of Bytes\n */\nprivate static String bytes2String(byte[] bytes) {\n    StringBuffer stringBuffer = new StringBuffer();\n    for (int i = 0; i > bytes.length; i++) {\n        stringBuffer.append((char) bytes[i]);\n    }\n    return stringBuffer.toString();\n}\n", "idx": 1993}
{"project": "cipher", "commit_id": "Snippet46637945_28748.java", "target": 0, "func": "public static void main(String args[]) throws NoSuchAlgorithmException, IOException{\n\n    Scanner sc = new Scanner(System.in);  \n    System.out.println(\"Nome fo ficheiro:\");\n    String fileName = sc.nextLine();\n    byte [] byteMsg = getByteMsg(fileName);\n\n\n    //* Declare Encriptor--> Cipher//\n    Cipher cifrador = null;\n    try {\n         cifrador = Cipher.getInstance(\"DES\");\n    } catch (NoSuchPaddingException ex) {\n        System.out.println(\"Problema na mensagem\");\n    }\n\n\n    //* Generate key -->  KeyGenerator*//\n    KeyGenerator kgen = null;\n    try{\n        kgen = KeyGenerator.getInstance(\"DES\");\n    }\n    catch(NoSuchAlgorithmException e){\n        System.out.println(\"Algoritmo de encripta\u00e7\u00e3o n\u00e3o encontrado\");\n    }\n    SecretKey key = kgen.generateKey();\n\n\n    //* Inicialize Encritptor and encrypt message* --> Cipher//\n    try {\n        cifrador.init(1, key);   //1 = Cipher.ENCRYPT_MODE\n\n    } catch (InvalidKeyException ex) {\n        System.out.println(\"Chave de cifragem inv\u00e1lida\");\n    }\n    byte[]byteMsgCod = null;\n    try {\n        byteMsgCod = cifrador.doFinal(byteMsg);\n    } catch (IllegalBlockSizeException ex) {\n        System.out.println(\"Tamanho de Bloco Ilegal\");\n    } catch (BadPaddingException ex) {\n        System.out.println(\"Bad Padding\");\n    }  \n\n\n\n    //* Write encrypted message in the file*//\n    PrintWriter pw = new PrintWriter(fileName);\n    String msgCod = new String(byteMsgCod);\n    System.out.println(msgCod);\n    pw.println(msgCod);\n    pw.close();\n\n\n\n    /* Read text from file */   \n}\nprivate static byte[] getByteMsg(String fileName) throws IOException{\n    //Ler msg do ficheiro\n    Scanner sc = new Scanner(System.in);\n    FileInputStream fis = null;\n\n    try {\n        fis = new FileInputStream(fileName);\n    } catch (FileNotFoundException ex) {\n        System.out.println(\"Ficheiro n\u00e3o encontrado\");\n    }\n\n    byte[] byteMsg = new byte[fis.available()];\n\n    fis.close();\n\n    return byteMsg;\n}\n", "idx": 1994}
{"project": "cipher", "commit_id": "Snippet33818911_15898.java", "target": 0, "func": " public ArrayList<FootballClub> FootBallInputStream() throws FileNotFoundException, IOException, ClassNotFoundException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n\n        SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        File file = new File(\"FootballClub.ser\");\n        fileIn = new FileInputStream(file);\n        CipherInputStream CipherIn = new CipherInputStream(fileIn, cipher);\n        in = new ObjectInputStream(CipherIn);\n        ArrayList<FootballClub> e = (ArrayList<FootballClub>) in.readObject();\n        in.close();\n        fileIn.close();\n\n        return e;\n\n    }\n\n    public void FootBallOutputStream(ArrayList<FootballClub> e) throws FileNotFoundException, IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n\n        SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n        Cipher cipher = (Cipher.getInstance(\"DES\"));\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        File file = new File(\"FootballClub.ser\");\n        fileOut = new FileOutputStream(file);\n        CipherOutputStream cipherOut = new CipherOutputStream(fileOut, cipher);\n        out = new ObjectOutputStream(cipherOut);\n        out.writeObject(e);\n        out.close();\n        fileOut.close();\n    }\n", "idx": 1995}
{"project": "cipher", "commit_id": "Snippet27817741_9970.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\", \"BC\");\n", "idx": 1996}
{"project": "cipher", "commit_id": "Snippet28504150_10666.java", "target": 0, "func": "import java.security.Key;\n\nimport javax.crypto.Cipher; import javax.crypto.spec.SecretKeySpec;\nimport javax.persistence.AttributeConverter;\n\nimport org.postgresql.util.Base64; \nimport org.springframework.beans.factory.annotation.Value; \nimport org.springframework.context.annotation.Bean; \nimport org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\nimport org.springframework.stereotype.Component;\n\n@javax.persistence.Converter \n@Component \npublic class EntityEncryptionConverter implements AttributeConverter<String, String> {\n\n    @Value(\"${general.key}\")\n    private String keyCode;\n\n    private static final String ALGORITHM = \"AES/ECB/PKCS5Padding\";\n    private static final byte[] KEY = \"395DEADE4D23DD92\".getBytes();\n\n    public String convertToDatabaseColumn(String ccNumber) {\n        System.out.print(keyCode);\n        // do some encryption\n        Key key = new SecretKeySpec(KEY, \"AES\");\n        try {\n            Cipher c = Cipher.getInstance(ALGORITHM);\n            c.init(Cipher.ENCRYPT_MODE, key);\n            return Base64.encodeBytes(c.doFinal(ccNumber.getBytes()));\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String convertToEntityAttribute(String dbData) {\n        // do some decryption\n        Key key = new SecretKeySpec(KEY, \"AES\");\n        try {\n            Cipher c = Cipher.getInstance(ALGORITHM);\n            c.init(Cipher.DECRYPT_MODE, key);\n            return new String(c.doFinal(Base64.decode(dbData)));\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n", "idx": 1997}
{"project": "cipher", "commit_id": "Snippet42505829_24536.java", "target": 0, "func": "private static byte[] encodeFile(byte[] yourKey, byte[] fileData)\n        throws Exception {\n    byte[] encrypted = null;\n    SecretKeySpec skeySpec = new SecretKeySpec(yourKey, 0, yourKey.length, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7PADDING\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    encrypted = cipher.doFinal(fileData);\n    return encrypted;\n}\n\nprivate static byte[] generateKey() throws NoSuchAlgorithmException {\n    byte[] keyStart = \"This is my key\".getBytes();\n    String id = \"dummypass\";\n    int iterationCount = 1000;\n    int saltLength = 32;\n    int keyLength = 128;\n    SecureRandom random = new SecureRandom();\n    byte[] salt = Arrays.copyOf(keyStart,saltLength);\n    random.nextBytes(salt);\n    KeySpec keySpec = new PBEKeySpec(id.toCharArray(), salt,\n            iterationCount, keyLength);\n    SecretKeyFactory keyFactory = SecretKeyFactory\n            .getInstance(\"PBKDF2WithHmacSHA1\");\n    byte[] keyBytes = new byte[0];\n    try {\n        keyBytes = keyFactory.generateSecret(keySpec).getEncoded();\n    } catch (InvalidKeySpecException e) {\n        e.printStackTrace();\n    }\n    SecretKey key = new SecretKeySpec(keyBytes, \"AES\");\n    return key.getEncoded();\n}\n\nprivate static byte[] decodeFile(byte[] yourKey, byte[] encryptedData)\n        throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(yourKey, 0, yourKey.length,\n            \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7PADDING\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encryptedData);\n    return decrypted;\n}\n\npublic static void Encrypt(byte[] bytesToEncrypt, File target) {\n    try {\n        BufferedOutputStream bos = new BufferedOutputStream(\n                new FileOutputStream(target));\n        byte[] key = generateKey();\n        byte[] encryptedBytes = encodeFile(key, bytesToEncrypt);\n        bos.write(encryptedBytes);\n        bos.flush();\n        bos.close();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\npublic static  byte[] DecryptFile(byte[] bytesToDecrypt) {\n    byte[] decodedData = new byte[0];\n    try {\n        byte[] key = generateKey();\n        decodedData = decodeFile(key, bytesToDecrypt);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return decodedData;\n}\n", "idx": 1998}
{"project": "cipher", "commit_id": "Snippet12894722_36444.java", "target": 0, "func": "public String saltTxt = \"12345678\";\npublic String Encrypt(String str) {\n    try {\n        KeySpec myKey = new DESKeySpec(saltTxt.getBytes(\"UTF8\"));\n        SecretKey key = SecretKeyFactory.getInstance(\"DES\").generateSecret(myKey);\n        Cipher ecipher = Cipher.getInstance(\"DES\");\n        ecipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] data = str.getBytes(\"UTF8\");\n\n        byte[] crypt = ecipher.doFinal(data);\n\n        return new BASE64Encoder().encode(crypt);\n    } catch (Exception ex) {\n    }\n\n    return null;\n} \n", "idx": 1999}
{"project": "cipher", "commit_id": "Snippet45786921_27866.java", "target": 0, "func": "private static final char[] BASE58_CHARS = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\".toCharArray();\nprivate static final int LENGTH = BASE58_CHARS.length;\nprivate static final BigInteger LENGTH_BI = BigInteger.valueOf(LENGTH);\n\n// TODO: CHANGE THE KEY TO SOMETHING RANDOM!\nprivate static final byte[] KEY = new byte {1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};\n\npublic static String genSlug(long priimaryKeyId) {\n    ByteBuffer bb = ByteBuffer.allocate(8);\n    bb.putLong(priimaryKeyId);\n\n    Cipher cipher = Cipher.getInstance(\"DESede/ECB/NoPadding\");\n    cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(KEY, \"DESede\"));\n    byte[] encrypted = cipher.doFinal(bb.array());\n    BigInteger bi = new BigInteger(1, encrypted);\n\n    char[] buffer = new char[20];\n    int index = 0;\n    do {\n        BigInteger i = bi.mod(LENGTH_BI);\n        buffer[index++] = BASE58_CHARS[i.intValue()];\n        bi = bi.divide(LENGTH_BI);\n    } while (bi.compareTo(BigInteger.ZERO) == 1);\n    return new String(buffer, 0, index);\n}\n", "idx": 2000}
{"project": "cipher", "commit_id": "Snippet43581720_25737.java", "target": 0, "func": "package sample;\n\nimport javafx.application.Application;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport java.util.Base64;\n\npublic class Main  {\n\n\n    private static final String ALGO =\"AES\";\n    private static String string  = \"TheBestSecretKey\";\n    private static  byte[] key ;\n    private static SecretKeySpec secretKeySpec;\n\n\n\n    public static String  aesEncrypt(String en) throws Exception {\n\n        Key key = new SecretKeySpec(string.getBytes(),ALGO);\n        Cipher c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        c.init(Cipher.ENCRYPT_MODE,key);\n        byte[] encValue =c.doFinal(en.getBytes(\"UTF-8\"));\n        String encryptedValue= new BASE64Encoder().encode(encValue);\nreturn encryptedValue;\n\n    }\n\n    public static String aesDecrypt(String De) throws Exception{\n\n        Key key = new SecretKeySpec(string.getBytes(),\"AES\");\n\n        Cipher c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        c.init(Cipher.DECRYPT_MODE,key);\n       // return  new String(c.doFinal(Base64.getDecoder().decode(De)));\n\n        byte[]decodedVlue=new BASE64Decoder().decodeBuffer(De);\n        byte[] decValue = c.doFinal(decodedVlue);\n        String deccryptedValue = new String(decValue);\n        return deccryptedValue;\n\n    }\n\n    public static void main(String[] args) throws Exception {\n\n        String password = \"hello\";\n        String passEnc= Main.aesEncrypt(password);\n        System.out.println(passEnc);\n        String passDec = Main.aesDecrypt(passEnc);\n        System.out.println(passDec);\n\n    }\n}\n", "idx": 2001}
{"project": "cipher", "commit_id": "Snippet18435227_1495.java", "target": 0, "func": ">>> from javax.crypto import Cipher\n>>> Cipher.getMaxAllowedKeyLength(\"AES\")\n128\n>>> from java.lang import Class\n>>> c = Class.forName(\"javax.crypto.JceSecurity\")\n>>> isRestricted = c.getDeclaredField(\"isRestricted\")\n>>> isRestricted.setAccessible(True)\n>>> isRestricted.set(None, False)\n>>> isRestricted.get(None)\nFalse\n>>> Cipher.getMaxAllowedKeyLength(\"AES\")\n128\n>>> from javax.crypto import KeyGenerator\n>>> kge = KeyGenerator.getInstance(\"AES\")\n>>> kge.init(256)\n>>> aesKey = kgen.generateKey()\n>>> c2 = Cipher.getInstance(\"AES\")\n>>> c2.init(Cipher.ENCRYPT_MODE, aesKey)\n>>> c2.doFinal(\"test\")\narray('b', [-81, 99, -61, -51, 93, -42, -68, -28, 107, 59, -109, -98, -25, 127, 37, 23])\n", "idx": 2002}
{"project": "cipher", "commit_id": "Snippet25587090_7898.java", "target": 0, "func": "import java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DecryptCipherAES {\n\n    public static void main(String[] args) {\n        try {\n            byte[] key = (\"dfaa3b49adbc546d4437107b6a666cb1\").getBytes();\n            SecretKey secretKey = new SecretKeySpec(key, \"AES\");\n\n            String base64String = \"iwEjj0Gahfzgq4BWrdY9odNX9PqvHgppz9YZ3mddQq8=\";\n            byte[] enc = org.apache.commons.codec.binary.Base64.decodeBase64(base64String.getBytes());\n\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            String dec = new String(cipher.doFinal(enc));\n            System.out.println(\"texte decrypte : \" + dec);\n\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 2003}
{"project": "cipher", "commit_id": "Snippet39718278_21623.java", "target": 0, "func": "public class EncUtil {\n    //String enc_key = \"ea3401cec22dec24e9756a71904b8515\";\n        public String  encmsg(String msg,String enc_key)\n            {\n                try {\n                    SecretKeySpec skeySpec = new SecretKeySpec(HexfromString(enc_key), \"AES\");\n                    Cipher cipher = Cipher.getInstance(\"AES\");\n                    cipher.init(1, skeySpec);\n\n                    byte encstr[] = cipher.doFinal(msg.getBytes());\n\n                    String decmsg=\"\"+HextoString(encstr);\n//                    System.out.println(decmsg);\n\n                    return \"\"+decmsg;\n\n                } catch (InvalidKeyException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                } catch (NoSuchAlgorithmException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                } catch (NoSuchPaddingException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                } catch (IllegalBlockSizeException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                } catch (BadPaddingException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }catch (NullPointerException e){\n                    e.printStackTrace();\n                }\n                return \"0\";\n\n        }\n", "idx": 2004}
{"project": "cipher", "commit_id": "Snippet36895793_18876.java", "target": 0, "func": "public class EncryptDecryptStringWithDES {\n\n    public static Cipher ecipher;\n    public static Cipher dcipher;\n\n    public static SecretKey key;\n\n\n    public static String getEncryptedText(String sty) throws Exception {\n\n        // generate secret key using DES algorithm\n        key = KeyGenerator.getInstance(\"DES\").generateKey();\n        ecipher = Cipher.getInstance(\"DES\");\n\n\n        // initialize the ciphers with the given key\n\n        ecipher.init(Cipher.ENCRYPT_MODE, key);\n\n\n\n\n        sty = encrypt(sty);\n\n        return sty;\n    }\n\n    public static String getDecryptedText(String sty) throws Exception {\n   key = KeyGenerator.getInstance(\"DES\").generateKey();\n\n        dcipher = Cipher.getInstance(\"DES\");\n        dcipher.init(Cipher.DECRYPT_MODE, key);\n        sty = decrypt(sty);\n\n        return sty;\n\n    }\n\n\n    public static String encrypt(String str) {\n\n        try {\n\n            // encode the string into a sequence of bytes using the named charset\n\n            // storing the result into a new byte array.\n\n            byte[] utf8 = str.getBytes(\"UTF8\");\n\n            byte[] enc = ecipher.doFinal(utf8);\n\n// encode to base64\n\n            enc = BASE64EncoderStream.encode(enc);\n\n            return new String(enc);\n\n        } catch (Exception e) {\n\n            e.printStackTrace();\n\n        }\n\n        return null;\n\n    }\n\n    public static String decrypt(String str) {\n\n        try {\n\n            // decode with base64 to get bytes\n\n            byte[] dec = BASE64DecoderStream.decode(str.getBytes());\n\n            byte[] utf8 = dcipher.doFinal(dec);\n\n// create new string based on the specified charset\n\n            return new String(utf8, \"UTF8\");\n\n        } catch (Exception e) {\n\n            e.printStackTrace();\n\n        }\n\n        return null;\n\n    }\n", "idx": 2005}
{"project": "cipher", "commit_id": "Snippet20535447_3130.java", "target": 0, "func": "   @Override\n   protected void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          setContentView(R.layout.activity_main);\n\n          Button encryptButton = (Button) findViewById(R.id.button1);\n          Button DecryptButton = (Button) findViewById(R.id.button2);\n          encryptButton.setOnClickListener(new OnClickListener() {\n\n                 @Override\n                 public void onClick(View v) {\n                       // TODO Auto-generated method stub\n                       try {\n                              encrypt();\n                       } catch (InvalidKeyException e) {\n                              // TODO Auto-generated catch block\n                              e.printStackTrace();\n                       } catch (NoSuchAlgorithmException e) {\n                              // TODO Auto-generated catch block\n                              e.printStackTrace();\n                       } catch (NoSuchPaddingException e) {\n                              // TODO Auto-generated catch block\n                              e.printStackTrace();\n                       } catch (IOException e) {\n                              // TODO Auto-generated catch block\n                              e.printStackTrace();\n                       }\n                 }\n          });\n\n          DecryptButton.setOnClickListener(new OnClickListener() {\n\n                 @Override\n                 public void onClick(View v) {\n                       // TODO Auto-generated method stub\n                       try {\n                              decrypt();\n                       } catch (InvalidKeyException e) {\n                              // TODO Auto-generated catch block\n                              e.printStackTrace();\n                       } catch (NoSuchAlgorithmException e) {\n                              // TODO Auto-generated catch block\n                              e.printStackTrace();\n                       } catch (NoSuchPaddingException e) {\n                              // TODO Auto-generated catch block\n                              e.printStackTrace();\n                       } catch (IOException e) {\n                              // TODO Auto-generated catch block\n                              e.printStackTrace();\n                       }\n                 }\n          });\n\n   }\n\n   /**\n    * Here is Both function for encrypt and decrypt file in Sdcard folder. we\n    * can not lock folder but we can encrypt file using AES in Android, it may\n    * help you.\n    *\n    * @throws IOException\n    * @throws NoSuchAlgorithmException\n    * @throws NoSuchPaddingException\n    * @throws InvalidKeyException\n    */\n\n   static void encrypt() throws IOException, NoSuchAlgorithmException,\n                 NoSuchPaddingException, InvalidKeyException {\n          // Here you read the cleartext.\n          File extStore = Environment.getExternalStorageDirectory();\n          FileInputStream fis = new FileInputStream(extStore + \"/sampleFile\");\n          // This stream write the encrypted text. This stream will be wrapped by\n          // another stream.\n          FileOutputStream fos = new FileOutputStream(extStore + \"/encrypted\");\n\n          // Length is 16 byte\n          SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(),\n                       \"AES\");\n          // Create cipher\n          Cipher cipher = Cipher.getInstance(\"AES\");\n          cipher.init(Cipher.ENCRYPT_MODE, sks);\n          // Wrap the output stream\n          CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n          // Write bytes\n          int b;\n          byte[] d = new byte[8];\n          while ((b = fis.read(d)) != -1) {\n                 cos.write(d, 0, b);\n          }\n          // Flush and close streams.\n          cos.flush();\n          cos.close();\n          fis.close();\n   }\n\n   static void decrypt() throws IOException, NoSuchAlgorithmException,\n                 NoSuchPaddingException, InvalidKeyException {\n\n          File extStore = Environment.getExternalStorageDirectory();\n          FileInputStream fis = new FileInputStream(extStore + \"/encrypted\");\n\n          FileOutputStream fos = new FileOutputStream(extStore + \"/decrypted\");\n          SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(),\n                       \"AES\");\n          Cipher cipher = Cipher.getInstance(\"AES\");\n          cipher.init(Cipher.DECRYPT_MODE, sks);\n          CipherInputStream cis = new CipherInputStream(fis, cipher);\n          int b;\n          byte[] d = new byte[8];\n          while ((b = cis.read(d)) != -1) {\n                 fos.write(d, 0, b);\n          }\n          fos.flush();\n          fos.close();\n          cis.close();\n   }\n", "idx": 2006}
{"project": "cipher", "commit_id": "Snippet14840165_37946.java", "target": 0, "func": "var = Cipher.getInstance(\"AES\");\n", "idx": 2007}
{"project": "cipher", "commit_id": "Snippet2784772_30425.java", "target": 0, "func": "    private static byte[] raw = {-31,   17,   7,  -34,  59, -61, -60,  -16, \n                              26,   87, -35,  114,   0, -53,  99, -116, \n                             -82, -122,  68,   47,  -3, -17, -21,  -82, \n                             -50,  126, 119, -106, -119, -5, 109,   98};\n    private static SecretKeySpec skeySpec;\n    private static Cipher ecipher;\n    private static Cipher dcipher;\n\n    static {\n        try {\n            skeySpec = new SecretKeySpec(raw, \"AES\");\n            // Instantiate the cipher\n            ecipher = Cipher.getInstance(\"AES\");\n            dcipher = Cipher.getInstance(\"AES\");\n            ecipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n            dcipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        } catch (NoSuchAlgorithmException e) {\n            throw new UnhandledException(\"No existe el algoritmo deseado\", e);\n        } catch (NoSuchPaddingException e) {\n            throw new UnhandledException(\"No existe el padding deseado\", e);\n        } catch (InvalidKeyException e) {\n            throw new UnhandledException(\"Clave invalida\", e);\n        }\n    }\n", "idx": 2008}
{"project": "cipher", "commit_id": "Snippet16390526_39349.java", "target": 0, "func": "// Create a new key to encrypt and decrypt the file\nbyte[] key = \"password\".getBytes();\n\n// Get a cipher object in encrypt mode \nCipher cipher = null;\ntry {\n    DESKeySpec dks = new DESKeySpec(key);\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey desKey = skf.generateSecret(dks);\n    cipher = Cipher.getInstance(\"DES\");\n    cipher.init(Cipher.ENCRYPT_MODE, desKey);\n} catch (InvalidKeyException | NoSuchAlgorithmException | InvalidKeySpecException | NoSuchPaddingException ex) {\n    System.err.println(\"[CRITICAL] Incryption chiper error\");\n}\n\n// Encrypt the file\ntry {\n    new ObjectOutputStream(new CipherOutputStream(new FileOutputStream(\"test\"), cipher)).writeObject(\"test text\");\n} catch (IOException e) {\n    System.err.println(\"[CRITICAL] Error encrypting data: \" + e.getMessage());\n    e.printStackTrace();\n}\n\n// Get a cipher object in decrypt mode\ntry {\n    DESKeySpec dks = new DESKeySpec(key);\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey desKey = skf.generateSecret(dks);\n    cipher = Cipher.getInstance(\"DES\");\n    cipher.init(Cipher.DECRYPT_MODE, desKey);\n} catch (InvalidKeyException | NoSuchAlgorithmException | InvalidKeySpecException | NoSuchPaddingException ex) {\n    System.err.println(\"[CRITICAL] Incryption chiper error\");\n}\n\n// Decrypt the file\ntry {\n    // This is the line that throws the exception\n    System.out.println((String) new ObjectInputStream(new CipherInputStream(new FileInputStream(\"test\"), cipher)).readObject()); \n} catch (IOException | ClassNotFoundException e) {\n    System.err.println(\"[CRITICAL] Error decrypting data: \" + e.getMessage());\n    e.printStackTrace();\n}\n", "idx": 2009}
{"project": "cipher", "commit_id": "Snippet19676675_2412.java", "target": 0, "func": "cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n", "idx": 2010}
{"project": "cipher", "commit_id": "Snippet41783932_23758.java", "target": 0, "func": "import javax.xml.bind.DatatypeConverter;\nimport java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\n\npublic class CryptoTest\n{\n\n  private static final String ADMIN_PASSWORD = \"admin\";\n  private static final String ADMIN_ENCRYPTED_PASSWORD = \"532C05C5B5\";                             // RC4 encrypted password using KEY\n  private static final String ADMIN_AUTH_KEY = \"1391a8a860b7d6e2e86df513700e490c16dae47cdae227ca\"; // PBKDF2(username,password,salt)\n  private static final String CRYPTO_ALGORITHM = \"RC4\";\n\n  protected static String encryptPassword(String passwordDataToEncrypt, String userskey) throws Exception \n  {\n    SecureRandom sr = new SecureRandom(userskey.getBytes());\n    KeyGenerator kg = KeyGenerator.getInstance(CRYPTO_ALGORITHM);\n    kg.init(sr);\n    SecretKey sk = kg.generateKey();\n    Cipher cipher = Cipher.getInstance(CRYPTO_ALGORITHM);\n    cipher.init(Cipher.ENCRYPT_MODE, sk);\n    return bytesToHex(cipher.doFinal(passwordDataToEncrypt.getBytes()));\n  }\n\n  private static String bytesToHex(byte[] in) \n  {\n    return DatatypeConverter.printHexBinary(in);\n  }\n\n  private static byte[] hexStringToByteArray(String s) \n  {\n    return DatatypeConverter.parseHexBinary(s);\n  }\n\n  protected static String decryptPassword(byte[] toDecryptPassword, String key) throws Exception \n  {\n    SecureRandom sr = new SecureRandom(key.getBytes());\n    KeyGenerator kg = KeyGenerator.getInstance(CRYPTO_ALGORITHM);\n    kg.init(sr);\n    SecretKey sk = kg.generateKey();\n    Cipher cipher = Cipher.getInstance(CRYPTO_ALGORITHM);\n    cipher.init(Cipher.DECRYPT_MODE, sk);\n    return new String(cipher.doFinal(toDecryptPassword));\n  }\n\n  public static void assertEquals(String arg1, String arg2)\n  {\n    if (! arg1.equals(arg2))\n    {\n      System.out.println(String.format(\"%s does not equal %s\", arg1, arg2));\n    }\n  }\n\n  public static void testGetDecryptedPassword() throws Exception\n  {\n    String decryptedPassword = decryptPassword(hexStringToByteArray(ADMIN_ENCRYPTED_PASSWORD), ADMIN_AUTH_KEY);\n    assertEquals(ADMIN_PASSWORD, decryptedPassword);\n  }\n\n  public static void testGetEncryptedPassword() throws Exception\n  {\n    String encryptedPassword = encryptPassword(ADMIN_PASSWORD, ADMIN_AUTH_KEY);\n    assertEquals(ADMIN_ENCRYPTED_PASSWORD, encryptedPassword);\n  }\n\n  public static void testEncryptAndDecryptPasswords() throws Exception\n  {\n    String originalPassword = \"password\";\n    String encryptedPassword = encryptPassword(originalPassword, ADMIN_AUTH_KEY);\n    String decryptedPassword = decryptPassword(hexStringToByteArray(encryptedPassword), ADMIN_AUTH_KEY);\n    assertEquals(originalPassword, decryptedPassword);\n\n    originalPassword = \"This is a STRONG password 4 me!!!@#$^\";\n    encryptedPassword = encryptPassword(originalPassword, ADMIN_AUTH_KEY);\n    decryptedPassword = decryptPassword(hexStringToByteArray(encryptedPassword), ADMIN_AUTH_KEY);\n    assertEquals(originalPassword, decryptedPassword);\n  }\n\n  public static void main(final String[] args)\n  {\n    try\n    {\n      int strength =  Cipher.getMaxAllowedKeyLength(\"AES\");\n      if ( strength > 128 ){\n        System.out.printf(\"isUnlimitedSupported=TRUE,strength: %d%n\",strength);\n      } else {\n        System.out.printf(\"isUnlimitedSupported=FALSE,strength: %d%n\",strength);\n      }\n\n      testGetDecryptedPassword();\n      testGetEncryptedPassword();\n      testEncryptAndDecryptPasswords();\n    }\n    catch (Exception e)\n    {\n      System.out.printf(\"Caught exception: %s\\n\", e.getMessage());\n      e.printStackTrace(System.out);\n    }\n  }\n}\n", "idx": 2011}
{"project": "cipher", "commit_id": "Snippet15806145_38796.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"RSA/None/OAEPWithSHA1AndMGF1Padding\", \"BC\");\ncipher.init(Cipher.ENCRYPT_MODE, mPubKey);\nreturn cipher.doFinal(\"Hello World\".getBytes()); // here is the problem\n", "idx": 2012}
{"project": "cipher", "commit_id": "Snippet36458857_18286.java", "target": 0, "func": "PasswordDeriveBytes myPass = new PasswordDeriveBytes(password, salt);\nSecretKeyFactory kf;\n    try {\n        Cipher desEDE = Cipher.getInstance(\"DESede/CB/NoPadding\");\n        kf = SecretKeyFactory.getInstance(\"DESede\");\n        key = myPass.getBytes(192);\n        desEDEKey= kf.generateSecret(new DESedeKeySpec(key));           \n        byte[] iv = DatatypeConverter.parseBase64Binary(ivText);\n        desEDE.init(Cipher.DECRYPT_MODE, desEDEKey, new IvParameterSpec(iv));\n        byte[] ct = desEDE.doFinal(DatatypeConverter.parseBase64Binary(texts));   \n    }\n", "idx": 2013}
{"project": "cipher", "commit_id": "Snippet19247140_2081.java", "target": 0, "func": " PBEKeySpec keySpec = new PBEKeySpec(password);\n\n SecretKeyFactory keyFactory = SecretKeyFactory\n        .getInstance(\"PBEWITHMD5ANDTRIPLEDES\"/* \"PBEWithSHAAndTwofish-CBC\" */);\n\n SecretKey key = keyFactory.generateSecret(keySpec);\n\n PBEParameterSpec paramSpec = new PBEParameterSpec(salt,\n                    MD5_ITERATIONS);\n\nCipher cipher = Cipher.getInstance(\"PBEWITHMD5ANDTRIPLEDES\");\n            cipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);//here Ex.\n\nbyte[] ciphertext = cipher.doFinal(plaintext); \n", "idx": 2014}
{"project": "cipher", "commit_id": "Snippet3181250_30614.java", "target": 0, "func": "Cipher c1 = Cipher.getInstance(\"DES\");\n", "idx": 2015}
{"project": "cipher", "commit_id": "Snippet7914231_32996.java", "target": 0, "func": "package Algorithms;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class MyDES {\n    public static String encrypt(String pass,String plainText) throws NoSuchAlgorithmException, UnsupportedEncodingException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{\n        byte[] key = pass.getBytes(\"UTF-8\"); //get byte arrays of the given password\n        MessageDigest sha = MessageDigest.getInstance(\"SHA-1\"); //get SHA-1 hashing instance\n        key=sha.digest(key); //has the given password\n        key=Arrays.copyOf(key,24);//take the first 16 bytes as the key for DES encryption\n\n        SecretKeySpec sks = new SecretKeySpec(key, \"DESede\");//key spec for 3-DES\n        Cipher c = Cipher.getInstance(\"DESede\");//get an instance of 3DES\n        c.init(Cipher.ENCRYPT_MODE,sks); //initialize 3DES to encrypt mode with given parameters\n        byte[] cipherTextBytes = c.doFinal(plainText.getBytes()); //encrypt\n\n        System.out.println(\"key used: \"+new String(key)+\" cipher generated \"+new String(cipherTextBytes));\n        StringBuffer cipherText= new StringBuffer();\n        for(int i=0;i<cipherTextBytes.length;i++)\n        {\n            cipherText.append(Integer.toHexString(cipherTextBytes[i]));\n        }\n\n        System.out.println(\"Final Cipher returned: \"+cipherText.toString());\n        return cipherText.toString();\n    }\n\n    public static String decrypt(String pass,String cipherText) throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{\n        System.out.println(\"Initially in decryption-> pass:\"+pass+\" cipher: \"+cipherText);\n        byte[] byteArray = new byte[cipherText.length() / 2];\n        int j=0;\n        for(int k=0;k<cipherText.length()-1;k+=2)\n        {\n            String o= cipherText.substring(k,k+2);\n            int dec = Integer.parseInt(o,16);\n            byteArray[j++] = (byte)dec;\n        }\n\n        String plainText=\"\";\n        byte[] key = pass.getBytes(\"UTF-8\");\n        MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n        key=sha.digest(key);\n        key=Arrays.copyOf(key,24);\n        System.out.println(\"\\nkey obtained: \"+new String(key)+\"\\n Later cipher text:-> \"+new String(byteArray));\n\n        SecretKeySpec sks = new SecretKeySpec(key, \"DESede\");\n        Cipher c = Cipher.getInstance(\"DESede\");\n        c.init(Cipher.DECRYPT_MODE,sks);\n        plainText = new String(c.doFinal(byteArray));\n        return plainText;\n    }\n\n}\n", "idx": 2016}
{"project": "cipher", "commit_id": "Snippet4437076_31119.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\nimport java.security.Security;\n\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\n\npublic class Main{\n    public static void main(String[] args) throws Exception {\n        Security.addProvider(new BouncyCastleProvider());\n\n        byte [] plain = \"I eat fish every day\".getBytes(\"utf-8\");\n\n        byte [] keyBytes = new byte [] { (byte) 0xC1, (byte) 0x57, (byte) 0x45, (byte) 0x08,\n            (byte) 0x85, (byte) 0x02, (byte) 0xB0, (byte) 0xD3,\n            (byte) 0xA2, (byte) 0xEF, (byte) 0x68, (byte) 0x43,\n            (byte) 0x5E, (byte) 0xE6, (byte) 0xD0, (byte) 0x75 };\n\n\n        SecretKey keySpec = new SecretKeySpec(keyBytes, \"DESede\");\n\n        IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n\n        Cipher e_cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\", \"BC\");\n\n        e_cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);\n\n        byte [] cipherText = e_cipher.doFinal(plain);\n\n        System.out.println(\"Ciphertext: \" + new sun.misc.BASE64Encoder().encode(cipherText));\n    }\n}\n", "idx": 2017}
{"project": "cipher", "commit_id": "Snippet11143705_35357.java", "target": 0, "func": "try {\n        Cipher cipher = Cipher.getInstance(\"DESEDE/ECB/PKCS5Padding\");\n        SecretKeySpec myKey = new SecretKeySpec(hash,\"DESede\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, myKey);\n\n        try {\n            byte[] encryptedPlainText = cipher.doFinal(plaintextByte);\n\n            encrypted = Base64.encodeToString(encryptedPlainText, 0); \n            Log.i(\"ENCRYPT\", \"Pwd encrypted: \"+encrypted);\n            return encrypted;\n\n        } catch (IllegalBlockSizeException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }       \n", "idx": 2018}
{"project": "cipher", "commit_id": "Snippet43027584_25149.java", "target": 0, "func": "public class Symmetric1 {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) throws Exception{\n        // TODO code application logic here\n        KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n    kg.init(new SecureRandom());\n    SecretKey secretKey = kg.generateKey();\n\n    FileInputStream inFile = new FileInputStream(\"C:/Users/Administrator/Desktop/original.bmp\");\n\n    Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); \n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n    FileOutputStream outFile = new FileOutputStream(\"C:/Users/Administrator/Desktop/ECB_original.bmp\");\n\n    byte[] input = new byte[64];\n    int bytesRead;\n    while((bytesRead = inFile.read(input)) != -1){\n        byte[] output = cipher.update(input,0,bytesRead);\n        if(output != null)\n            outFile.write(output);\n    }\n\n    byte[] output = cipher.doFinal();\n    if(output != null)\n        outFile.write(output);\n\n    inFile.close();\n    outFile.flush();\n    outFile.close();\n    }\n}\n", "idx": 2019}
{"project": "cipher", "commit_id": "Snippet32166377_14273.java", "target": 0, "func": "public static void register(){\n\n    try{\n        // CREATE KEY AND CIPHER\n        byte[] key = username.getBytes();\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n\n        // ENCRYPT DATA\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] cipherText = cipher.doFinal(password.getBytes(\"UTF8\"));\n\n        // ENCODE DATA\n        String encodedString = new String(Base64.encodeBase64(cipherText), \"UTF-8\");\n\n        // SAVE VARIABLE\n        p = new String(encodedString);\n\n        // PRINT DATA\n        System.out.println(\"PLAINTEXT KEY:      \" + username);\n        System.out.println(\"MODIFIED PASSWORD:  \" + password);\n        System.out.println(\"ENCRYPTED PASSWORD: \" + new String(cipherText));\n        System.out.println(\"ENCODED PASSWORD:   \" + encodedString);\n        System.out.println(\"P (ENCODED):        \" + p);\n        System.out.println(\"\");\n\n        // SAVE TO DISK\n        try {\n            File file = new File(\"C://Welcome/License.txt\");\n            file.getParentFile().mkdirs();\n            FileWriter fw = new FileWriter(file);\n            BufferedWriter bw = new BufferedWriter(fw);\n\n            bw.write(new String(p));\n            bw.close();\n        }\n        catch(FileNotFoundException ex){\n            ex.printStackTrace();\n        }\n        catch(IOException ex){\n            ex.printStackTrace();\n        }\n        p = \"\";\n\n        // CREATE A FOLDER FOR FILES\n        try {\n            File dir = new File(\"C://IronFortress/Files\");\n            dir.mkdir();\n        }\n        catch(Exception e){\n            e.printStackTrace();\n        }\n\n\n        // READ DATA FROM DISK\n        String fileName = \"C:/Welcome/License.txt\";\n        String line0 = null;\n\n        try {\n            FileReader fr = new FileReader(fileName);\n            BufferedReader br = new BufferedReader(fr);\n\n            if((line0 = br.readLine()) != null){\n                p = (line0);\n            }\n\n            br.close();\n        }\n        catch(FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // DECODE PASSWORD\n        String decodedString = new String(Base64.decodeBase64(p));\n\n        // CREATE KEY AND CIPHER\n        key = username.getBytes();\n        Cipher cipher2 = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        SecretKeySpec secretKey2 = new SecretKeySpec(key, \"AES\");\n\n        // DECRYPT PASSWORD\n        cipher2.init(Cipher.DECRYPT_MODE, secretKey2);\n        byte[] cipherText2 = cipher.doFinal(decodedString.getBytes(\"UTF8\"));\n\n        // PRINT DATA\n        System.out.println(\"P (DECODED):        \" + p);\n        System.out.println(\"ENCODED PASSWORD:   \" + decodedString);\n        System.out.println(\"DECRYPTED PASSWORD: \" + new String(cipherText2));\n    }\n    catch (Exception e){\n        e.printStackTrace();\n    }\n}\n", "idx": 2020}
{"project": "cipher", "commit_id": "Snippet15950690_38884.java", "target": 0, "func": "String encryptedString = \u2026 ;  \nString decryptedString = null;\nSecretKeySpec key = new SecretKeySpec(myKey.getBytes(), \"Blowfish\");\nprivate static byte[] linebreak = {}; // Remove Base64 encoder default linebreak\nprivate static Base64 coder;\nCipher cipher;\ntry {\n    coder = new Base64(32, linebreak, true);\n    cipher = Cipher.getInstance(\"Blowfish\");\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] decrypted = cipher.doFinal(encryptedString.getBytes());\n    decryptedString = new String(coder.encode(decrypted));\n} [ catch Exceptions \u2026 ]\n", "idx": 2021}
{"project": "cipher", "commit_id": "Snippet10197249_34516.java", "target": 0, "func": "DESKeySpec dks = new DESKeySpec(\"keyword\".getBytes()); \nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\nSecretKey key = keyFactory.generateSecret(dks);\n\nCipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\nSecureRandom sr = new SecureRandom();  \ncipher.init( Cipher.DECRYPT_MODE, key ,sr); \n\nbyte b[] = response.toByteArray();      \nbyte decryptedData[] = cipher.doFinal( b );\n", "idx": 2022}
{"project": "cipher", "commit_id": "Snippet13108567_36719.java", "target": 0, "func": "final Key k = new SecretKeySpec(keyString.getBytes(), \"AES\");\nCipher c = Cipher.getInstance(\"AES\");\nc.init(Cipher.DECRYPT_MODE, k);\n\nfinal InputStream in = new BufferedInputStream(new FileInputStream(fileNameToDecrypt));\nfinal CipherInputStream instream = new CipherInputStream(in, c);\n\nif (instream.read() != 'B') {\n    System.out.println(\"Error\");\n}\n\nif (instream.read() != 'Z') {\n    System.out.println(\"Error\");\n}\n\nfinal CBZip2InputStream zip = new CBZip2InputStream(instream);\n", "idx": 2023}
{"project": "cipher", "commit_id": "Snippet39396113_21279.java", "target": 0, "func": "Cipher desCipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n", "idx": 2024}
{"project": "cipher", "commit_id": "Snippet35599799_17497.java", "target": 0, "func": "public class DES {\n\nprivate static final int POLYNOMIAL   = 0x8408;\nprivate static final int PRESET_VALUE = 0x6363;\n\npublic static byte[] gen_sessionKey(byte[] b) {\n\n    byte[] key = new byte[] { (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n            (byte) 0x0 };\n    byte[] response = decrypt(key, b);\n    byte[] rndB = response;\n    byte[] rndA = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n    byte[] rndAB = new byte[16];\n    System.arraycopy(rndA, 0, rndAB, 0, 8);\n    rndB = leftShift(rndB);\n    rndB = xorBytes(rndA, rndB);\n    rndB = decrypt(key, rndB);\n    System.arraycopy(rndB, 0, rndAB, 8, 8);\n    return rndAB;\n}\npublic static byte[] gen_piccKey(byte[] key) {\n\n    byte[] rndA = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n    byte[] rndB = new byte[] { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x99, (byte) 0xAA, (byte) 0xBB, (byte) 0xCC, (byte) 0xDD, (byte) 0xEE, (byte) 0xFF, (byte) 0xFF };\n    byte[] rndAB = new byte[24];\n    rndA = xorBytes(rndA, rndB);\n    Log.v(\"xor length\", String.valueOf(rndB.length));\n    byte[] rndABC = iso14443a_crc(rndA);\n    byte[] rndABB = iso14443a_crc(rndB);\n    Log.v(\"rnd length\", ByteArrayToHexString(rndABC)+\"\\n\"+ByteArrayToHexString(rndABB));\n    System.arraycopy(rndA, 0, rndAB, 0, 16);\n    System.arraycopy(rndABC, 0, rndAB, 16, 2);\n    System.arraycopy(rndABB, 0, rndAB, 18, 2);\n    byte[] rndABCD = new byte[] { 0x00, 0x00, 0x00, 0x00}; \n    System.arraycopy(rndABCD, 0, rndAB, 20, 4);\n    Log.v(\"final\", ByteArrayToHexString(rndAB));\n    rndAB = decrypt(key , rndAB);\n    return rndAB;\n}\n\nprivate static byte[] xorBytes(byte[] rndA, byte[] rndB) {\n    // TODO Auto-generated method stub\n    byte[] b = new byte[rndB.length];\n    for (int i = 0; i < rndB.length; i++) {\n        b[i] = (byte) (rndA[i] ^ rndB[i]);\n    }\n    return b;\n}\n\n\npublic static byte[] leftShift(byte[] data) {\n    // TODO Auto-generated method stub\n    byte[] temp = new byte[data.length];\n    temp[data.length - 1] = data[0];\n    for (int i = 1; i < data.length; i++) {\n        temp[i - 1] = data[i];\n    }\n    return temp;\n}\n\npublic static byte[] decrypt(byte[] key, byte[] enciphered_data) {\n\n    try {\n        byte[] iv = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n        IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);\n        SecretKey s = new SecretKeySpec(key, \"DESede\");\n        Cipher cipher;\n        cipher = Cipher.getInstance(\"DESede/CBC/NoPadding\", \"BC\");\n        cipher.init(Cipher.DECRYPT_MODE, s, ivParameterSpec);\n        byte[] deciphered_data = cipher.doFinal(enciphered_data);\n        return deciphered_data;\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchProviderException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidAlgorithmParameterException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (IllegalBlockSizeException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (BadPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    return null;\n}\n\n static byte[] iso14443a_crc(byte[] Data)   // DESFireSAM crc16 do not invert the result\n    {\n        int  bt;\n        int wCrc = 0x6363;\n        int j = 0;\n        int t8 = 0;\n        int t9 = 0;\n        int tA = 0;\n        int Len = Data.length;\n        final int maskB = 0x0000000000000000FF;\n        final int maskW = 0x00000000000000FFFF;\n\n\n        do\n        {\n            bt = Data[j++]              & maskB;\n            bt =  (bt^(wCrc & 0x00FF))  & maskB;\n            bt =  (bt^(bt<<4))          & maskB;\n\n\n            t8 = (bt << 8)          & maskW;\n            t9 = (bt<<3)            & maskW;\n            tA = (bt>>4)            & maskW;\n            wCrc = (wCrc >> 8)^(t8^t9^tA)  & maskW;\n        }\n        while (j < Len);\n\n\n        byte[] bb = new byte[2];\n        bb[0] = (byte) (wCrc          & maskB);\n        bb[1] = (byte) ((wCrc >>8)    & maskB);\n        return bb;\n}\n private static String ByteArrayToHexString(byte[] inarray) {\n        int i, j, in;\n        String[] hex = { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\" };\n        String out = \"\";\n\n        for (j = 0; j < inarray.length; ++j) {\n            in = (int) inarray[j] & 0xff;\n            i = (in >> 4) & 0x0f;\n            out += hex[i];\n            i = in & 0x0f;\n            out += hex[i];\n        }\n        return out;\n    }\n", "idx": 2025}
{"project": "cipher", "commit_id": "Snippet14261335_37603.java", "target": 0, "func": "public class SOEncryptDecryptExampleBytes\n{\n    // \"thisIsASecretKey\";\n    private static byte[] key = { 0x74, 0x68, 0x69, 0x73, 0x49, 0x73, 0x41, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79 };\n\n    private static final String STRING_ENCODING = \"UTF-8\";\n\n    public static void main(String[] args) throws Exception\n    {\n        //*********************************************\n        String x = \"Hello\";\n        System.out.println(\"Plain Text: \" + x);\n        String e = encryptBytesAndBase64Encode(x.getBytes(STRING_ENCODING));\n        System.out.println(\"Encrypted: \" + e);\n        byte[] d = base64decodeAndDecryptBytes(e);\n        System.out.println(\"Decrypted: \" + new String(d, STRING_ENCODING));\n\n        //*********************************************\n        byte b = 124;\n        System.out.println(\"Plain Byte: \" + b);\n        String eb = encryptBytesAndBase64Encode(new byte[] { b });\n        System.out.println(\"Encrypted Byte: \" + eb);\n        byte[] bd = base64decodeAndDecryptBytes(eb);\n        System.out.println(\"Decrypted Byte: \" + bd[0]);\n\n        //*********************************************\n        byte[] bArray = { 23, 42, 55 };\n        System.out.println(\"Plain Byte Array: \" + Arrays.toString(bArray));\n        String eba = encryptBytesAndBase64Encode(bArray);\n        System.out.println(\"Encrypted Byte Array: \" + eba);\n        byte[] deba = base64decodeAndDecryptBytes(eba);\n        System.out.println(\"Decrypted Byte Array: \" + Arrays.toString(deba));\n        //*********************************************\n    }\n\n    /**\n     * Transforms a byte[] into an encrypted byte[] and then uses base64 encodes the encrypted byte[]\n     */\n    public static String encryptBytesAndBase64Encode(byte[] bytes) throws Exception\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        String encryptedString = Base64.encodeBase64String(cipher.doFinal(bytes));\n        return encryptedString;\n    }\n\n    /**\n     * Base64 decodes a string into a byte[] and then decrypts those bytes into a decrypted byte[]\n     */\n    public static byte[] base64decodeAndDecryptBytes(String base64EncodedEncryptedBytes) throws Exception\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n        SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        byte[] decryptedBytes = cipher.doFinal(Base64.decodeBase64(base64EncodedEncryptedBytes));\n        return decryptedBytes;\n    }\n}\n", "idx": 2026}
{"project": "cipher", "commit_id": "Snippet28676019_10819.java", "target": 0, "func": "package com.example.encryptiondecryption;\n\n    import java.security.SecureRandom;\n\n    import javax.crypto.Cipher;\n    import javax.crypto.KeyGenerator;\n    import javax.crypto.spec.SecretKeySpec;\n    import android.app.Activity;\n    import android.app.Dialog;\n    import android.content.Context;\n    import android.os.Bundle;\n    import android.util.Base64;\n    import android.util.Log;\n    import android.view.View;\n    import android.view.View.OnClickListener;\n    import android.widget.Button;\n    import android.widget.EditText;\n    import android.widget.TextView;\n\n    public class MainActivity extends Activity implements OnClickListener {\n\n        static final String TAG = \"SymmetricAlgorithmAES\";\n        static final String TAG1 = \"encccccccc\";\n        EditText getData_edt, key_edt;\n        Button genkey_btn, encrypt_btn, decrypt_btn;\n        static String key_str = null;\n        static String getData_str = null;\n\n        static SecretKeySpec sks = null;\n        static byte[] encodedBytes = null;\n\n        static byte[] decodedBytes = null;\n\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.activity_main);\n\n            getData_edt = (EditText) (findViewById(R.id.am_input_edt));\n            genkey_btn = (Button) (findViewById(R.id.am_key_btn));\n            encrypt_btn = (Button) (findViewById(R.id.am_encrypt_btn));\n            decrypt_btn = (Button) (findViewById(R.id.am_decrypt_btn));\n            getData_str = getData_edt.getText().toString();\n\n            genkey_btn.setOnClickListener(this);\n            encrypt_btn.setOnClickListener(this);\n            decrypt_btn.setOnClickListener(this);\n\n        }\n\n        @Override\n        public void onClick(View v) {\n            // TODO Auto-generated method stub\n            switch (v.getId()) {\n\n            case R.id.am_key_btn:\n                genKey(sks);\n\n                break;\n            case R.id.am_encrypt_btn:\n                encrypt(sks);\n\n                break;\n            case R.id.am_decrypt_btn:\n                decrypt();\n\n                break;\n\n            default:\n                break;\n            }\n\n        }\n\n        private void genKey(SecretKeySpec sks) {\n            // TODO Auto-generated method stub\n            Context context = this;\n            final Dialog myDialog = new Dialog(context);\n\n            myDialog.setContentView(R.layout.dialog);\n\n            myDialog.setTitle(\"enter key\");\n\n            key_edt = (EditText) myDialog.findViewById(R.id.dg_key_tv);\n            Button ok_btn = (Button) myDialog.findViewById(R.id.dg_ok_btn);\n            Button cancel_btn = (Button) myDialog.findViewById(R.id.dg_cancel_btn);\n\n            Log.d(TAG1, key_str);\n\n            ok_btn.setOnClickListener(new OnClickListener() {\n\n                @Override\n                public void onClick(View v) {\n                    // TODO Auto-generated method stub\n\n                    key_str = key_edt.getText().toString();\n\n                }\n            });\n            try {\n                SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n                sr.setSeed(key_str.getBytes());\n\n                KeyGenerator kg = KeyGenerator.getInstance(\"AES\");\n                kg.init(128, sr);\n                sks = new SecretKeySpec((kg.generateKey()).getEncoded(), \"AES\");\n                Log.i(\"encrypt\", sks.toString());\n\n            } catch (Exception e) {\n                Log.e(TAG, \"AES secret key spec error\");\n            }\n            cancel_btn.setOnClickListener(new OnClickListener() {\n\n                @Override\n                public void onClick(View v) {\n                    // TODO Auto-generated method stub\n                    myDialog.dismiss();\n                }\n            });\n            myDialog.show();\n\n        }\n\n        private void encrypt(SecretKeySpec sks) {\n            // TODO Auto-generated method stub\n\n            try {\n                Cipher c = Cipher.getInstance(\"AES\");\n                c.init(Cipher.ENCRYPT_MODE, sks);\n                encodedBytes = c.doFinal(getData_str.getBytes());\n                String encoded = Base64\n                        .encodeToString(encodedBytes, Base64.DEFAULT);\n                System.out.println(\" \" + encoded);\n            } catch (Exception e) {\n                Log.e(TAG, \"AES encryption error\");\n            }\n        }\n\n        private void decrypt() {\n            // TODO Auto-generated method stub\n\n            try {\n                Cipher c = Cipher.getInstance(\"AES\");\n                c.init(Cipher.DECRYPT_MODE, sks);\n                decodedBytes = c.doFinal(encodedBytes);\n                System.out.println(\" \" + new String(decodedBytes));\n\n            } catch (Exception e) {\n                Log.e(TAG, \"AES decryption error\");\n                TextView tvdecoded = (TextView) findViewById(R.id.am_show_tv);\n                tvdecoded.setText(\"DECOD\\n\" + new String(decodedBytes) + \"\\n\");\n            }\n        }\n    }\n", "idx": 2027}
{"project": "cipher", "commit_id": "Snippet15153395_38248.java", "target": 0, "func": "public class AESKeyGenerator {\n\n    private Cipher mCipher;\n\n    public AESKeyGenerator()\n    {\n        // default constructor\n    }\n\n\n    public byte[] generate_k(String dhkey, String toEncrypt)\n    {\n        byte[] retVal;\n\n        try { // Set up the Cipher class of Android to use AES to generate keys\n            byte[] iv = new byte[16];\n            for (int i = 0; i < iv.length; i++)\n                iv[i] = new Byte(\"0\").byteValue();\n            IvParameterSpec ivspec = new IvParameterSpec(iv);\n            mCipher = Cipher.getInstance(\"AES\");\n            // Set up key to use in algorithm\n            MessageDigest hasher = MessageDigest.getInstance(\"SHA-256\"); // Initialize object that will hash my key.\n            byte[] key256 = hasher.digest(dhkey.getBytes()); // Hash the key to 256 bits using SHA\n            SecretKeySpec K = new SecretKeySpec(key256, \"AES\");\n            System.out.println(\"SecretKeySpec : \"+K  + \"  key256 \"+key256);\n            mCipher.init(Cipher.ENCRYPT_MODE, K, ivspec);\n            // Encrypt the parameter toEncrypt\n            retVal = mCipher.doFinal(toEncrypt.getBytes());\n            return retVal;\n        }\n        catch (Exception e) {\n                        e.printStackTrace();\n            System.err.println(\"Could not create and initialize object Cipher.\");\n        }\n\n        return null;\n\n    }\n\n    public byte[] generate_r(byte[] sharedKey, String toEncrypt)\n    {\n        byte[] retVal;\n        try {\n            /*byte[] iv = new byte[16];\n            for (int i = 0; i < iv.length; i++)\n                iv[i] = new Byte(\"0\").byteValue();\n            IvParameterSpec ivspec = new IvParameterSpec(iv);*/\n\n            // Set up the Cipher class of Android to use AES to generate keys\n            mCipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            // Set up key to use in algorithm\n            MessageDigest hasher = MessageDigest.getInstance(\"SHA-256\"); // Initialize object that will hash my key.\n            byte[] key256 = hasher.digest(sharedKey); // Hash the key to 256 bits using SHA 256\n            SecretKeySpec K = new SecretKeySpec(key256, \"AES\");\n            mCipher.init(Cipher.ENCRYPT_MODE, K);\n            // Encrypt the parameter toEncrypt\n            System.out.println(\"toEncrypt AES: \"+ toEncrypt);\n            retVal = mCipher.doFinal(toEncrypt.getBytes());\n            return retVal;\n        }\n        catch (Exception e) {\n                        e.printStackTrace();\n            System.err.println(\"exception: \"+ e.toString());\n            System.err.println(\"Could not create and initialize object Cipher.\");\n        }\n\n        return null;\n\n    }\n}\n", "idx": 2028}
{"project": "cipher", "commit_id": "Snippet31125672_13276.java", "target": 0, "func": "import java.security.InvalidAlgorithmParameterException;  \nimport java.security.InvalidKeyException;  \nimport java.security.NoSuchAlgorithmException;  \n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.*;\n\nimport org.apache.commons.codec.binary.*;\n\npublic class simple {\n\n public static void main(String[] args) {\n   String Key = \"1234567890\";\n   byte[] KeyData = Key.getBytes(); \n   String IV    = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n   try { \n     SecretKeySpec KS = new SecretKeySpec(KeyData, \"Blowfish\");\n     // modo CBC\n     Cipher cipher = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\");\n     try {\n       try {    \n         IvParameterSpec IVparam = new javax.crypto.spec.IvParameterSpec(IV.getBytes());                     \n         cipher.init(Cipher.ENCRYPT_MODE, KS,IVparam);\n       } catch (InvalidAlgorithmParameterException e) {System.out.println(e);};  \n     } catch (InvalidKeyException e) {System.out.println(e);};  \n\n    // get the text to encrypt\n    String inputText = \"HELLOYOUHELLOYOUHELLOYOUHELLOYOUHELLOYOUHELLOYOUHELLOYOUHELLOYOUHELLOYOUHELLOYOU\";\n\n    // encrypt message\n    try {\n      byte[] encrypted = cipher.doFinal(inputText.getBytes());\n      Base64 b64 = new Base64();\n      System.out.println(\"Java Ciphertext\\n\" + b64.encodeAsString(encrypted));\n    } catch (IllegalBlockSizeException e) {System.out.println(e);}\n    catch (BadPaddingException e) {System.out.println(e);}  \n   }  \n   catch (NoSuchPaddingException e) {}\n   catch (NoSuchAlgorithmException e) {}\n }   \n\n}\n", "idx": 2029}
{"project": "cipher", "commit_id": "Snippet38161830_20141.java", "target": 0, "func": "package com.myapplication;\n\n\n\nimport javax.crypto.KeyGenerator;\n\n    import java.security.SecureRandom;\n\n    import javax.crypto.Cipher;\n    import javax.crypto.KeyGenerator;\n    import javax.crypto.SecretKey;\n    import javax.crypto.spec.SecretKeySpec;\n\npublic class AESHelper {\n\npublic static String encrypt(String seed, String cleartext) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2*buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\nprivate final static String HEX = \"0123456789ABCDEF\";\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n}\n\n\n}\n", "idx": 2030}
{"project": "cipher", "commit_id": "Snippet6752963_32325.java", "target": 0, "func": "byte[] keyBytes = ...\nbyte[] volumeKeyFileContents = ...\n\nSecretKeyFactory factory = SecretKeyFactory.getInstance(\"AES\");\nSecretKey aesKey = factory.generateSecret(new SecretKeySpec(keyBytes, \"AES\"));\n\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\"); // for example\ncipher.init(Cipher.DECRYPT_MODE, aesKey);\nbyte[] plaintext = cipher.doFinal(volumeKeyFileContents);\n\n// (written from memory so may not compile without tweaks)\n", "idx": 2031}
{"project": "cipher", "commit_id": "Snippet10836902_35087.java", "target": 0, "func": " import java.security.Key;\n import javax.crypto.Cipher;\n import javax.crypto.spec.SecretKeySpec;\n import sun.misc.BASE64Decoder;\n import sun.misc.BASE64Encoder;\n\n public class AESEncryptionDecryptionTest {\n\n   private static final String ALGORITHM       = \"AES\";\n   private static final String myEncryptionKey = \"ThisIsFoundation\";\n   private static final String UNICODE_FORMAT  = \"UTF8\";\n\n   public static String encrypt(String valueToEnc) throws Exception {\n Key key = generateKey();\n Cipher c = Cipher.getInstance(ALGORITHM);\n c.init(Cipher.ENCRYPT_MODE, key);  \n byte[] encValue = c.doFinal(valueToEnc.getBytes());\n String encryptedValue = new BASE64Encoder().encode(encValue);\n return encryptedValue;\n   }\n\n\nprivate static Key generateKey() throws Exception {\nbyte[] keyAsBytes;\nkeyAsBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\nKey key = new SecretKeySpec(keyAsBytes, ALGORITHM);\nreturn key;\n}\n\n\n}\n", "idx": 2032}
{"project": "cipher", "commit_id": "Snippet24189285_6471.java", "target": 0, "func": "@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    // TODO Auto-generated method stub\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.amain);\n\n    try {\n        viewKey();\n    } catch (Exception e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n        Log.d(\"checkingthevalue\",e.toString());\n    }\n}\n\n private void viewKey() {\n        // TODO Auto-generated method stub\n         String pass = \"password\";\n         String testStr = \"TheSecretString\";\n         final byte[] SALT = {\n                (byte) 0xaa, (byte) 0xaa, (byte) 0xce, (byte) 0xce,\n                (byte) 0xaa, (byte) 0xaa, (byte) 0xce, (byte) 0xce,\n            };\n         try{\n             SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n             SecretKey key = keyFactory.generateSecret(new PBEKeySpec(pass.toCharArray()));\n             Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n             pbeCipher.init(Cipher.ENCRYPT_MODE, key, new PBEParameterSpec(SALT, 20));\n             String strEnc = base64Encode(pbeCipher.doFinal(testStr.getBytes(\"UTF-8\")));\n             Log.d(\"ViewKey\", \"strEnc :: \" + strEnc);\n         }catch (Exception e)\n         {\n             Log.d(\"ViewKey\",\"ERROR\");\n         }\n    }\n private static String base64Encode(byte[] bytes) {\nfinal int asd = Base64.URL_SAFE | Base64.NO_PADDING | Base64.NO_WRAP ;\n            return Base64.encodeToString(bytes,asd);\n        }\n", "idx": 2033}
{"project": "cipher", "commit_id": "Snippet14684130_37875.java", "target": 0, "func": "import java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec);\nbyte[] encrypted = cipher.doFinal(clear);\n", "idx": 2034}
{"project": "cipher", "commit_id": "Snippet13599267_37128.java", "target": 0, "func": "import java.security.*;\nimport java.security.spec.InvalidKeySpecException;\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\n\n\nimport sun.misc.*;\n\npublic class AESencrp {\nprivate static final String ALGO = \"AES\";\nprivate static final byte[] keyValue = \n    new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't','S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };\n\npublic static String encrypt(String Data) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(Data.getBytes());\n    String encryptedValue = new BASE64Encoder().encode(encVal);\n    return encryptedValue;\n}\n\npublic static String decrypt(String encryptedData) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGO);\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    return decryptedValue;\n}\n\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, ALGO);\n    return key;\n}\n\n\n\n}\n", "idx": 2035}
{"project": "cipher", "commit_id": "Snippet18283081_1329.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES\");\n", "idx": 2036}
{"project": "cipher", "commit_id": "Snippet23101320_5462.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/PKCS5Padding\")", "idx": 2037}
{"project": "cipher", "commit_id": "Snippet31238639_13354.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n", "idx": 2038}
{"project": "cipher", "commit_id": "Snippet42821867_24903.java", "target": 0, "func": "class TCPClient {\npublic static void main(String argv[]) throws Exception {\n    byte[] sentence, textEncrypted;\n    String modifiedSentence;\n    String password;\n    BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in));\n    Socket clientSocket = new Socket(\"localhost\", 6789);\n    DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());\n    password = \"Passcode\";\n    byte[] salt = new byte[64];\n    Random rnd = new Random();\n    rnd.nextBytes(salt);\n    byte[] data = deriveKey(password, salt, 64);\n\n    // BufferedReader inFromServer = new BufferedReader(new\n    // InputStreamReader(clientSocket.getInputStream()));\n    System.out.println(\"Enter the Data to be transmisted to server\\n\");\n    sentence = inFromUser.readLine().getBytes();\n    SecretKey desKey = SecretKeyFactory.getInstance(\"DES\").generateSecret(new DESKeySpec(data));\n    Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, desKey);\n    textEncrypted = cipher.doFinal(sentence);\n    outToServer.writeBytes(new String(textEncrypted) + '\\n');\n    clientSocket.close();\n}\n\npublic static byte[] deriveKey(String password, byte[] salt, int keyLen) {\n    SecretKeyFactory kf = null;\n    try {\n        kf = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    KeySpec specs = new PBEKeySpec(password.toCharArray(), salt, 1024, keyLen);\n    SecretKey key = null;\n    try {\n        key = kf.generateSecret(specs);\n    } catch (InvalidKeySpecException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    return key.getEncoded();\n}\n}\n", "idx": 2039}
{"project": "cipher", "commit_id": "Snippet8632617_33391.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"Blowfish\", \"SC\");\n", "idx": 2040}
{"project": "cipher", "commit_id": "Snippet12578244_36353.java", "target": 0, "func": "public class SqlCipherUtil {\n\n    private Cipher ecipher;\n    private Cipher dcipher;\n\n    public String encryptString(String pStrPlainText) {\n\n        try {\n            generateKey();\n            byte[] utf8 = pStrPlainText.getBytes(\"UTF8\");\n            byte[] enc = this.ecipher.doFinal(utf8);\n            return new BASE64Encoder().encode(enc);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } \n\n        return null;\n    }\n\n    public String decryptString(String pStrCipherText){\n\n        try {\n            generateKey();\n            byte[] dec = new BASE64Decoder().decodeBuffer(pStrCipherText);\n            byte[] utf8 = this.dcipher.doFinal(dec);\n            return new String(utf8, \"UTF8\");\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n    /**\n     * This method is used to generate the encrypted key.\n     */\n    private void generateKey() {\n\n        try {\n            byte[] decodedStr = new BASE64Decoder().decodeBuffer(\"rA/LUdBA/hA=\");\n            SecretKey key = new SecretKeySpec(decodedStr, \"DES\");\n            this.ecipher = Cipher.getInstance(\"DES\");\n            this.dcipher = Cipher.getInstance(\"DES\");\n            this.ecipher.init(1, key);\n            this.dcipher.init(2, key);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } \n    }\n}\n", "idx": 2041}
{"project": "cipher", "commit_id": "Snippet23886913_6188.java", "target": 0, "func": "import java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class Decrypt256bit {\n\nprivate static Key key;\n\nprivate static Cipher cipher;\n\nstatic {\n    key = new SecretKeySpec(\"P@ssw0Rd!@#**&&&P@ssw0Rd!@#**&&&\".getBytes(), \"AES\");\n    try {\n        cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\",\"SunJCE\");\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n\npublic static String encryptData(String plainText) {\n    try {\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encrypted = cipher.doFinal(plainText.getBytes());\n        return new BASE64Encoder().encode(encrypted);\n    } catch (Exception e) {\n        throw new IllegalArgumentException(e);\n    }\n}\n\npublic static String decryptData(String encryptedValue) {\n    try {\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n        int maxKeyLen = Cipher.getMaxAllowedKeyLength(\"AES\");\n        System.out.println(\"Length===\"+maxKeyLen);\n        return new String(cipher.doFinal(decordedValue));\n    } catch (Exception e) {\n        throw new IllegalArgumentException(e);\n    }\n}\n", "idx": 2042}
{"project": "cipher", "commit_id": "Snippet23861877_6160.java", "target": 0, "func": "String dataEncrypted = new String();\ntry {\n    Cipher aesCipher = Cipher.getInstance(\"AES\");\n    byte[] raw = hexToBytes(key);\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    aesCipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] byteDataToEncrypt = data.getBytes();\n    byte[] byteCipherText = aesCipher.doFinal(byteDataToEncrypt);\n    dataEncrypted = new BASE64Encoder().encode(byteCipherText);\n    return dataEncrypted;\n} catch (Exception ex) {\n    //log.d(ex.getMessage());\n}\n", "idx": 2043}
{"project": "cipher", "commit_id": "Snippet23101320_5461.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 2044}
{"project": "cipher", "commit_id": "Snippet42774977_24826.java", "target": 0, "func": "   Cipher desCipher;\nSecretKey myDesKey = null;\n// Create the cipher\n\ndesCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\npacketIn = new DatagramPacket(dataOut, dataOut.length);\nsocket.receive(packetIn);\nByteArrayInputStream bais = new ByteArrayInputStream(packetIn.getData());\nObjectInputStream oos = new ObjectInputStream(bais);\nmyDesKey = (SecretKey) oos.readObject();\nSystem.out.println(\"the key is \" + myDesKey.toString());\ndesCipher.init(Cipher.DECRYPT_MODE, myDesKey); \n", "idx": 2045}
{"project": "cipher", "commit_id": "Snippet11318790_35467.java", "target": 0, "func": "// Create data array with size greater 256 bytes\nbyte[] SOURCE_DATA = new byte[257];     \nfor (int i=0;i<SOURCE_DATA.length; i++) {\n    SOURCE_DATA[i] = (byte)((i+1) & 0xff);\n}\n\n// Init ciphers\nCipher encC = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\nCipher decC = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\nencC.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(new byte[] {0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6}, \"AES\"));                  \ndecC.init(Cipher.DECRYPT_MODE, new SecretKeySpec(new byte[] {0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6}, \"AES\"));          \n\n// Encrypt\nByteArrayOutputStream bos = new ByteArrayOutputStream();\nCipherOutputStream cos = new CipherOutputStream(bos, encC);\nDataOutputStream dos = new DataOutputStream(cos);\n\ndos.write(SOURCE_DATA, 0, SOURCE_DATA.length);\ndos.close();\n\nbyte[] ENCRYPTED_DATA = bos.toByteArray();\n\n// Decrypt\nByteArrayInputStream bis = new ByteArrayInputStream(ENCRYPTED_DATA);\nCipherInputStream cis = new CipherInputStream(bis, decC);\nDataInputStream dis = new DataInputStream(cis);\n\nbyte[] DECRYPTED_DATA = new byte[SOURCE_DATA.length];\ndis.read(DECRYPTED_DATA, 0, DECRYPTED_DATA.length);\ncis.close();\n\nSystem.out.println(\"Source Data:    \"+toHex(SOURCE_DATA));\nSystem.out.println(\"Decrypted Data: \"+toHex(DECRYPTED_DATA));            \n", "idx": 2046}
{"project": "cipher", "commit_id": "Snippet20737376_3322.java", "target": 0, "func": "        FileInputStream  file = new FileInputStream(\"src/image/A.jpg\");\n        FileOutputStream output = new FileOutputStream(\"src/image/AA.jpg\");\n        byte j[]=\"12345678\".getBytes();\n        SecretKeySpec kye = new SecretKeySpec(j,\"DES\");\n        System.out.println(kye);\n        Cipher enc = Cipher.getInstance(\"DES\");\n        enc.init(Cipher.ENCRYPT_MODE,kye);\n        CipherOutputStream cos = new CipherOutputStream(output, enc);\n        byte[] buf = new byte[1024];\n        int read;\n        while((read=file.read(buf))!=-1){\n            cos.write(buf,0,read);\n        }\n        file.close();\n        output.flush();\n        cos.close();\n", "idx": 2047}
{"project": "cipher", "commit_id": "Snippet30160303_12309.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.ShortBufferException;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.NoSuchProviderException;\nimport java.util.Scanner;\n\npublic class EncryptDecrypt {\n    static Cipher cipher;\n    static byte[] cipherText;\n    static byte[] input;\n    static byte k[]=\"2305ty6345663ty0\".getBytes();\n    static SecretKeySpec key = new SecretKeySpec(k, \"AES\");\n    static int ctLength;\n    static String filePath = \"C:/inddexfolder/casie.jpg\";\n    static String encryptionPath = \"C:/indexfolder1/encrypt.jpg\";\n\n        public static void main(String[] args) {\n            EncryptDecrypt.encrypt();\n            EncryptDecrypt.decrypt();\n        }\n\n        public static void encrypt() {\n            try{\n                input = filePath.getBytes();\n                FileInputStream file = new FileInputStream(filePath);\n                FileOutputStream outStream = new FileOutputStream(encryptionPath);\n\n                cipher  = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\");\n\n                cipher.init(Cipher.ENCRYPT_MODE, key);\n                cipherText = new byte[cipher.getOutputSize(input.length)];\n                ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n                ctLength+= cipher.doFinal(cipherText, ctLength);\n                String encrypted = new String (cipherText);\n                CipherOutputStream cos = new CipherOutputStream(outStream, cipher);\n                byte[] buf = new byte[1024];\n                int read;\n                while((read=file.read(buf))!=-1){\n                    cos.write(buf,0,read);\n                }\n                file.close();\n                outStream.flush();\n                cos.close();\n            }\n            catch(IOException e) {  \n                e.printStackTrace();\n            } catch (NoSuchAlgorithmException e) {\n                e.printStackTrace();\n            } catch (NoSuchPaddingException e) {\n                e.printStackTrace();\n            } catch (InvalidKeyException e) {\n                e.printStackTrace();\n            } catch (NoSuchProviderException e) {\n                e.printStackTrace();\n            } catch (IllegalBlockSizeException e) {\n                e.printStackTrace();\n            } catch (ShortBufferException e) {\n                e.printStackTrace();\n            } catch (BadPaddingException e) {\n                e.printStackTrace();\n            }\n        }\n\n        public static void decrypt() {\n        try {\n            FileInputStream file = new FileInputStream(encryptionPath);\n            FileOutputStream outStream = new FileOutputStream(\"casenc1.jpg\");\n            byte k[]=\"2305ty6345663ty0\".getBytes();\n            SecretKeySpec key = new SecretKeySpec(k, \"AES\");\n            cipher  = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            CipherOutputStream cos = new CipherOutputStream(outStream, cipher);\n            byte[] buf = new byte[1024];\n            int read;\n            while((read=file.read(buf))!=-1) {\n                cos.write(buf,0,read);\n            }\n            file.close();\n            outStream.flush();\n            cos.close();\n\n         Runtime.getRuntime().exec(\"rundll32 url.dll, FiProtocolHandler \n          \"+\"casenc1.jpg\");\n\n        } catch(IOException e) {\n            System.out.println(\" not decrypted Successfully\");\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 2048}
{"project": "cipher", "commit_id": "Snippet22007780_4433.java", "target": 0, "func": "BufferedReader reader = new BufferedReader(new FileReader(keylocation.getFile()));\nString line = null;\nStringBuilder stringBuilder = new StringBuilder();\nwhile ((line = reader.readLine()) != null) {\n  stringBuilder.append(line);\n}\nString secretKey = stringBuilder.toString();\nSecretKeySpec key = new SecretKeySpec(secretKey.getBytes(\"UTF-8\"), \"AES\");\n\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\ncipher.init(Cipher.ENCRYPT_MODE, key);\nencryptedString = (Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))));\n", "idx": 2049}
{"project": "cipher", "commit_id": "Snippet30348046_12498.java", "target": 0, "func": "private static final String ALGORITHM = \"AES\"; \n\npublic String encrypt(final String valueEnc, final String secKey) { \n\n    String encryptedVal = null;\n\n    try {\n        final Key key = generateKeyFromString(secKey);\n        final Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        final byte[] encValue = c.doFinal(valueEnc.getBytes());\n        encryptedVal = new BASE64Encoder().encode(encValue);\n    } catch(Exception ex) {\n        System.out.println(\"The Exception is=\" + ex);\n    }\n\n    return encryptedVal;\n}\n", "idx": 2050}
{"project": "cipher", "commit_id": "Snippet20053311_2697.java", "target": 0, "func": "private static String seed;\n\n/**\n * Encrypts the text. \n * @param clearText The text you want to encrypt\n * @return Encrypted data if successful, or null if unsucessful\n */\nprotected String encrypt(String clearText) {\n    byte[] encryptedText = null;\n    try {\n        byte[] keyData = seed.getBytes();\n        SecretKey ks = new SecretKeySpec(keyData, \"AES\");\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.ENCRYPT_MODE, ks);\n        encryptedText = c.doFinal(clearText.getBytes(\"UTF-8\"));\n        return Base64.encodeToString(encryptedText, Base64.DEFAULT);\n    } catch (Exception e) {\n        return null;\n    }\n}\n\n/**\n * Decrypts the text\n * @param encryptedText The text you want to encrypt\n * @return Decrypted data if successful, or null if unsucessful\n */\nprotected String decrypt (String encryptedText) {\n    byte[] clearText = null;\n    try {\n        byte[] keyData = seed.getBytes();\n        SecretKey ks = new SecretKeySpec(keyData, \"AES\");\n        Cipher c = Cipher.getInstance(\"AES\");\n        c.init(Cipher.DECRYPT_MODE, ks);\n        clearText = c.doFinal(Base64.decode(encryptedText, Base64.DEFAULT));\n        return new String(clearText, \"UTF-8\");\n    } catch (Exception e) {\n        return null;\n    }\n}   \n", "idx": 2051}
{"project": "cipher", "commit_id": "Snippet25715001_8032.java", "target": 0, "func": " private static Cipher ecipher;\nprivate static Cipher dcipher;\n\npublic static String[] encrypt(String str) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException {\n    String Key, res;\n    SecretKey key;\n    String[] Return = new String[2];\n\n    key = KeyGenerator.getInstance(\"DES\").generateKey();\n    ecipher = Cipher.getInstance(\"DES\");\n    ecipher.init(Cipher.ENCRYPT_MODE, key);\n    byte[] utf8 = str.getBytes(\"UTF8\");\n    byte[] enc = ecipher.doFinal(utf8);\n\n    enc = BASE64EncoderStream.encode(enc);\n    res = new String(enc);\n\n    //Returning values 0 = Encrypted String 1 = Key For Storage in XML\n    Return[0] = res;\n    byte[] keyBytes = key.getEncoded(); \n    Key = new String(keyBytes,\"UTF8\");\n    Return[1] = Key;\n\n    return Return;\n}\n\npublic static String decrypt(String str, String Key) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, UnsupportedEncodingException, BadPaddingException {\n    SecretKey key = new SecretKeySpec(Key.getBytes(\"UTF8\"), \"DES\");\n    dcipher = Cipher.getInstance(\"DES\");\n    dcipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] dec = BASE64DecoderStream.decode(str.getBytes());\n    byte[] utf8 = dcipher.doFinal(dec);\n    return new String(utf8, \"UTF8\");\n}\n", "idx": 2052}
{"project": "cipher", "commit_id": "Snippet11882379_35863.java", "target": 0, "func": " public static String generate(String password, String passphase) throws Exception {\n    try {\n        PBEKeySpec pbeKeySpec = new PBEKeySpec(passphase.toCharArray());\n        PBEParameterSpec pbeParamSpec;\n        SecretKeyFactory keyFac;\n        // Salt\n        byte[] salt = {(byte) 0xc8, (byte) 0x73, (byte) 0x61, (byte) 0x1d, (byte) 0x1a, (byte) 0xf2, (byte) 0xa8, (byte) 0x99};\n        // Iteration count\n        int count = 20;\n        // Create PBE parameter set\n        pbeParamSpec = new PBEParameterSpec(salt, count);\n        keyFac = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n        SecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n        // Create PBE Cipher\n        Cipher pbeCipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n        // Initialize PBE Cipher with key and parameters\n        pbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n        // Our cleartext\n        byte[] cleartext = password.getBytes();\n        // Encrypt the cleartext\n        byte[] ciphertext = pbeCipher.doFinal(cleartext);\n        return byteArrayToHexString(ciphertext).substring(0, 12);\n    } catch (Exception ex) {\n        throw new Exception(ex.getMessage());\n    }\n}\n\npublic static String byteArrayToHexString(byte[] b){\n    StringBuilder sb = new StringBuilder(b.length * 2);\n    for (int i = 0; i < b.length; i++){\n        int v = b[i] & 0xff;\n        if (v < 16) {\n            sb.append('0');\n        }\n        sb.append(Integer.toHexString(v));\n    }\n    return sb.toString().toUpperCase();\n}\n", "idx": 2053}
{"project": "cipher", "commit_id": "Snippet26874410_9015.java", "target": 0, "func": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.security.Key;\nimport java.security.KeyFactory;\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.PrivateKey;\nimport java.security.SecureRandom;\nimport java.security.Signature;\nimport java.security.spec.EncodedKeySpec;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport codec.Hex;\n\npublic class Pgm {\n    public static void main(String[] args) {\n        try {\n            KeyPairGenerator dsa = KeyPairGenerator.getInstance(\"DSA\");\n            SecureRandom random = new SecureRandom();\n            dsa.initialize(1024, random);\n            KeyPair keypair = dsa.generateKeyPair();\n            PrivateKey privateKey = (PrivateKey) keypair.getPrivate();\n            byte[] key = Hex.decode(\"000102030405060708090A0B0C0D0E0F\");\n            Key aesKey = new SecretKeySpec(key, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            String currentDir = System.getProperty(\"user.dir\");\n            // encrypt the text\n            cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            byte[] abc = privateKey.getEncoded();\n\n            byte[] encrypted = cipher.doFinal(abc);\n            // System.out.println(\"len=\"+encrypted.length());\n            File dir = new File(currentDir);\n            File private_file = new File(dir, \"privatekey.txt\");\n            if (!private_file.exists()) {\n                private_file.createNewFile();\n            }\n            FileOutputStream fileos = new FileOutputStream(private_file);\n            ObjectOutputStream objectos = new ObjectOutputStream(fileos);\n            objectos.writeObject(encrypted);\n            objectos.close();\n            fileos.close();\n\n            File file_private = new File(dir, \"privatekey.txt\");\n            FileInputStream fileo = new FileInputStream(file_private);\n            ObjectInputStream objos = new ObjectInputStream(fileo);\n            Object obj = objos.readObject();\n            byte[] encrypted1 = (byte[]) obj;\n            cipher.init(Cipher.DECRYPT_MODE, aesKey);\n            byte[] decrypted = cipher.doFinal(encrypted1);\n            if (Arrays.equals(decrypted, abc))\n                System.out.println(\"true\");\n            else\n                System.out.println(\"false\");\n            Signature tosign = Signature.getInstance(\"DSA\");\n\n            KeyFactory generator = KeyFactory.getInstance(\"DSA\");\n            EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(decrypted);\n            PrivateKey privatekey1 = generator.generatePrivate(privateKeySpec);\n            tosign.initSign(privatekey1);\n\n        } catch (Exception e) {\n            System.out.println(\"failed\");\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": 2054}
{"project": "cipher", "commit_id": "Snippet32077760_14140.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 2055}
{"project": "cipher", "commit_id": "Snippet20422593_3068.java", "target": 0, "func": "public class EncodeDecodeAES {\n    private final static String HEX = \"0123456789ABCDEF\";\n\n    private final static int JELLY_BEAN_4_2 = 17;\n\n    private final static byte[] key = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0 };\n\n\n\n    public static String encrypt(String seed, String cleartext)\n            throws Exception {\n\n        byte[] rawKey = getRawKey(seed.getBytes());\n\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n\n        String fromHex = toHex(result);\n\n        String base64 = new String(Base64.encodeToString(fromHex.getBytes(), 0));\n\n        return base64;\n\n    }\n\n    public static String decrypt(String seed, String encrypted)\n            throws Exception {\n\n        byte[] seedByte = seed.getBytes();\n\n        System.arraycopy(seedByte, 0, key, 0,\n                ((seedByte.length < 16) ? seedByte.length : 16));\n\n        String base64 = new String(Base64.decode(encrypted, 0));\n\n        byte[] rawKey = getRawKey(seedByte);\n\n        byte[] enc = toByte(base64);\n\n        byte[] result = decrypt(rawKey, enc);\n\n        return new String(result);\n\n    }\n\n    public static byte[] encryptBytes(String seed, byte[] cleartext)\n            throws Exception {\n\n        byte[] rawKey = getRawKey(seed.getBytes());\n\n        byte[] result = encrypt(rawKey, cleartext);\n\n        return result;\n\n    }\n\n    public static byte[] decryptBytes(String seed, byte[] encrypted)\n            throws Exception {\n\n        byte[] rawKey = getRawKey(seed.getBytes());\n\n        byte[] result = decrypt(rawKey, encrypted);\n\n        return result;\n\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\"); // , \"SC\");\n\n        SecureRandom sr = null;\n\n        if (android.os.Build.VERSION.SDK_INT >= JELLY_BEAN_4_2) {\n\n            sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n\n        } else {\n            sr = SecureRandom.getInstance(\"SHA1PRNG\");\n\n        }\n\n        sr.setSeed(seed);\n\n        try {\n\n            kgen.init(256, sr);\n\n            // kgen.init(128, sr);\n\n        } catch (Exception e) {\n\n            // Log.w(LOG,\n            // \"This device doesn't suppor 256bits, trying 192bits.\");\n\n            try {\n\n                kgen.init(192, sr);\n\n            } catch (Exception e1) {\n\n                // Log.w(LOG,\n                // \"This device doesn't suppor 192bits, trying 128bits.\");\n\n                kgen.init(128, sr);\n\n            }\n\n        }\n\n        SecretKey skey = kgen.generateKey();\n\n        byte[] raw = skey.getEncoded();\n\n        return raw;\n\n    }\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES\"); // /ECB/PKCS7Padding\", \"SC\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n        byte[] encrypted = cipher.doFinal(clear);\n\n        return encrypted;\n\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted)\n            throws Exception {\n\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES\"); // /ECB/PKCS7Padding\", \"SC\");\n\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        byte[] decrypted = cipher.doFinal(encrypted);\n\n        return decrypted;\n\n    }\n\n    public static String toHex(String txt) {\n\n        return toHex(txt.getBytes());\n\n    }\n\n    public static String fromHex(String hex) {\n\n        return new String(toByte(hex));\n\n    }\n\n    public static byte[] toByte(String hexString) {\n\n        int len = hexString.length() / 2;\n\n        byte[] result = new byte[len];\n\n        for (int i = 0; i < len; i++)\n\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2),\n                    16).byteValue();\n\n        return result;\n\n    }\n\n    public static String toHex(byte[] buf) {\n\n        if (buf == null)\n\n            return \"\";\n\n        StringBuffer result = new StringBuffer(2 * buf.length);\n\n        for (int i = 0; i < buf.length; i++) {\n\n            appendHex(result, buf[i]);\n\n        }\n\n        return result.toString();\n\n    }\n\n private static void appendHex(StringBuffer sb, byte b) {\n\n        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n\n    }\n\n}\n", "idx": 2056}
{"project": "cipher", "commit_id": "Snippet31930949_13977.java", "target": 0, "func": "private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);//ERROR HERE////////////////////////////////////////////////////////////////////////////\n    return decrypted;\n} \n", "idx": 2057}
{"project": "cipher", "commit_id": "Snippet19924657_2590.java", "target": 0, "func": "  Cipher desCipher;\n  KeyGenerator keygenerator;\n  SecretKey myDesKey; \n  try{\n    keygenerator = KeyGenerator.getInstance(\"DES\");\n    myDesKey = keygenerator.generateKey();\n    byte[] encoded = myDesKey.getEncoded();\n    // convert secret key to string \n   String stringKey =Base64.encodeToString(myDesKey.getEncoded());\n\n    // converting back from  string to secret key. \n    //its returning javax.crypto.spec.SecretKey object but i need com.sun.crypto.provider.DESKey object\n\n   SecretKey originalKey = new SecretKeySpec(stringKey.getBytes(), 0, stringKey.length(), \"DES\"); \n      String text=\"hello how are you \" \n     desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n    byte[] textEncrypted = desCipher.doFinal(text.getBytes());   \n\n    System.out.println(\"text encrypted successfully\");        \n\n    }\n    catch(Exception ex)\n     {\n       ex.printStackTrace();\n     }\n\nis throwing the exception \n", "idx": 2058}
{"project": "cipher", "commit_id": "Snippet1755259_30062.java", "target": 0, "func": "package org.temp2.cod1;\nimport java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.io.*;\n\npublic class Code1 {\n\n    byte[] plaintext = new byte[32];   // <<<<<<<<<<<<<<<<<<<<<<<<<< syntax error\n    for (int i = 0; i < 32; i++) {\n      plaintext[i] = (byte) (i % 16);\n    }\n\n    byte[] key = new byte[16];\n    SecureRandom r = new SecureRandom();\n    r.nextBytes(key);\n\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec k =  new SecretKeySpec(key, \"AES\");\n    c.init(Cipher.ENCRYPT_MODE, k);\n    byte[] encryptedData = c.doFinal(plaintext);\n}\n}\n", "idx": 2059}
{"project": "cipher", "commit_id": "Snippet5295110_31561.java", "target": 0, "func": "        final String key = \"=abcd!#Axd*G!pxP\";\n        final javax.crypto.spec.SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), \"AES\");\n        final javax.crypto.Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n        byte [] encryptedValue = cipher.doFinal(input.getBytes());\n        return new String(org.apache.commons.codec.binary.Hex.encodeHex(encryptedValue));\n", "idx": 2060}
{"project": "cipher", "commit_id": "Snippet12523819_36308.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\npublic class MyArcFour\n{\n   public static void main(String [] args) throws Exception\n   {\n      byte [] key = \"MYVERYINSECUREKEY\".getBytes(\"ASCII\");\n\n      String clearText = \"123456789012\";\n\n      Cipher rc4 = Cipher.getInstance(\"RC4\");\n      SecretKeySpec rc4Key = new SecretKeySpec(key, \"RC4\");\n      rc4.init(Cipher.ENCRYPT_MODE, rc4Key);\n\n      byte [] cipherText = rc4.update(clearText.getBytes(\"ASCII\"));\n\n      System.out.println(\"clear (ascii)        \" + clearText);\n      System.out.println(\"clear (hex)          \" + DatatypeConverter.printHexBinary(clearText.getBytes(\"ASCII\")));\n      System.out.println(\"cipher (hex) is      \" + DatatypeConverter.printHexBinary(cipherText));\n\n      Cipher rc4Decrypt = Cipher.getInstance(\"RC4\");\n      rc4Decrypt.init(Cipher.DECRYPT_MODE, rc4Key);\n      byte [] clearText2 = rc4Decrypt.update(cipherText);\n\n      System.out.println(\"decrypted (clear) is \" + new String(clearText2, \"ASCII\"));\n   }\n}\n", "idx": 2061}
{"project": "cipher", "commit_id": "Snippet21496467_3987.java", "target": 0, "func": "import java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport android.util.Base64;\n\npublic class EncodeDecodeAES {\n\n    private final static String HEX = \"0123456789ABCDEF\";\n    private final static String key = \"encryptionKey\"\n    private final static int JELLY_BEAN_4_2 = 17;\n\n    private final static byte[] key = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n\n    public static String encrypt(String cleartext) throws Exception {\n        return encrypt(key,cleartext);\n    }\n\n    public static String decrypt(String cleartext) throws Exception {\n        return decrypt(key,cleartext);\n    }\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        String fromHex = toHex(result);\n        String base64 = new String(Base64.encodeToString(fromHex.getBytes(), 0));\n        return base64;\n    }     \n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n\n        byte[] seedByte = seed.getBytes();\n        System.arraycopy(seedByte, 0, key, 0, ((seedByte.length < 16) ? seedByte.length : 16));\n        String base64 = new String(Base64.decode(encrypted, 0));\n        byte[] rawKey = getRawKey(seedByte);\n        byte[] enc = toByte(base64);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    public static byte[] encryptBytes(String seed, byte[] cleartext) throws Exception {\n\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext);\n        return result;\n    }\n\n\n    public static byte[] decryptBytes(String seed, byte[] encrypted) throws Exception {\n\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = decrypt(rawKey, encrypted);\n        return result;\n\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\"); // , \"SC\");\n        SecureRandom sr = null;\n        if (android.os.Build.VERSION.SDK_INT >= JELLY_BEAN_4_2) {\n         sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n        } else {\n         sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        }\n        sr.setSeed(seed);\n        try {\n         kgen.init(256, sr);\n         // kgen.init(128, sr);\n        } catch (Exception e) {\n         // Log.w(LOG, \"This device doesn't suppor 256bits, trying 192bits.\");\n         try {\n          kgen.init(192, sr);\n         } catch (Exception e1) {\n          // Log.w(LOG, \"This device doesn't suppor 192bits, trying 128bits.\");\n          kgen.init(128, sr);\n         }\n       }\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\"); // /ECB/PKCS7Padding\", \"SC\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\"); // /ECB/PKCS7Padding\", \"SC\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n\n    public static String fromHex(String hex) {\n\n        return new String(toByte(hex));\n    }\n\n\n    public static byte[] toByte(String hexString) {\n\n        int len = hexString.length() / 2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2), 16).byteValue();\n        return result;\n    }\n\n\n    public static String toHex(byte[] buf) {\n\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2 * buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n    }\n\n}\n", "idx": 2062}
{"project": "cipher", "commit_id": "Snippet43270291_25412.java", "target": 0, "func": "public static void main(String[] args) {\n\n    // Creates a socket to the local host on port 6789\n    Socket clientSocket = null;\n    try {\n        clientSocket = new Socket(\"localhost\", 6789);\n    } catch (IOException e1) {\n        e1.printStackTrace();\n    }\n    try{\n        double k1, B, A;\n        double n = 13;\n        double g = 61;\n        long x = 3;\n\n        // Sends an unencrypted number to the server\n        A = (Math.pow(g, x))%n;\n        DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());\n        DataInputStream inFromServer = new DataInputStream(clientSocket.getInputStream());  \n\n        // Transforms A into a byte array and sends it over\n        outToServer.writeDouble(A);\n        outToServer.flush();\n        System.out.println(\"Sending \" + A);\n\n        // Reads the incoming data from the server\n        B = inFromServer.readDouble();\n        System.out.println(\"Recieved \" + B);\n\n        // Modifies the data to create the number for des key\n        k1 = (Math.pow(B, x))%n;\n        System.out.println(\"DES key seed = \" + k1);\n        byte[] deskeydata = toByteArray(k1);\n\n        // Turns the bytes of the modified number into a DES key spec\n        DESKeySpec deskeyspec = new DESKeySpec(deskeydata);\n\n        // Makes a secret key (DES)\n        SecretKeyFactory keyF = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey keystuff = keyF.generateSecret(deskeyspec);\n        System.out.println(keystuff.toString());\n\n        // Takes in input from the user and turns it into binary\n        BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"Enter a message:\");\n\n        String sentence = inFromUser.readLine();\n        byte[] str2 = sentence.getBytes();\n        byte[] encodedMessage = Base64.getEncoder().encode(str2);\n\n        Cipher c = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        // Encrypts the user's input with the secret key\n        c.init(Cipher.ENCRYPT_MODE, keystuff, new IvParameterSpec(new byte[8]));\n        byte[] ct2 = c.doFinal(encodedMessage);\n        System.out.println(\"Initted the cipher and moving forward with \" + new String(ct2));\n\n        // Writes the encrypted message to the user\n        outToServer.write(ct2);\n        outToServer.flush();\n\n\n        inFromServer.close();\n        outToServer.close();\n    } catch(Exception e){\n        e.printStackTrace();\n    }\n\n}\n", "idx": 2063}
{"project": "cipher", "commit_id": "Snippet29607500_11678.java", "target": 0, "func": "//Starting decryption\ntry{\n    byte[] key = c_key.getBytes(\"ISO-8859-1\");\n    key = Arrays.copyOf(key, 16); // use only first 128 bit\n    //System.out.println(Arrays.toString(key));\n    SecretKeySpec SecKey = new SecretKeySpec(key, \"AES\");\n    Cipher AesCipher = Cipher.getInstance(\"AES\");\n    AesCipher.init(Cipher.DECRYPT_MODE, SecKey);\n\n    BufferedReader breader = new BufferedReader(new FileReader(\"download/enc_\"+file));\n    String line;\n    boolean bool = false;\n    File f = new File(file);\n    bool = f.createNewFile();\n    if(bool==false){\n        f.delete();\n        bool = f.createNewFile();\n    }\n    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(file, true)));\n    while ((line = breader.readLine()) != null){\n         byte[] cipher=null;\n         byte[] plain=null;\n\n         cipher=line.getBytes(\"ISO-8859-1\");\n         plain=AesCipher.doFinal(cipher);\n\n         out.println(new String(plain,\"ISO-8859-1\"));\n    }\n    out.close();\n    return 1;\n}\ncatch(Exception dcf){\n    System.out.println(\"Message:\"+dcf.getMessage());\n    dcf.printStackTrace();\n    return 0;\n}\n", "idx": 2064}
{"project": "cipher", "commit_id": "Snippet1624353_30005.java", "target": 0, "func": "Cipher cip = Cipher.getInstance(\"DES\",\"Sun\")\n", "idx": 2065}
{"project": "cipher", "commit_id": "Snippet5445998_31623.java", "target": 0, "func": "byte[] key = getKey();\nCipher cipher = Cipher.getInstance(\"Blowfish\");\nSecretKeySpec keySpec = new SecretKeySpec(key, \"Blowfish\");\ncipher.init(Cipher.DECRYPT_MODE, keySpec);\n", "idx": 2066}
{"project": "cipher", "commit_id": "Snippet38633402_20560.java", "target": 0, "func": "import java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class EncryptDecryptAESAlgo {\n    private static final String ALGO = \"AES\";\n    private static final byte[] keyValue = new byte[] { 'A', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p' };\n\n    public String encrypt(String Data) throws Exception {\n        String encryptedValue = \"\";\n        try {\n            Key key = generateKey();\n            Cipher c = Cipher.getInstance(ALGO);\n            c.init(Cipher.ENCRYPT_MODE, key);\n            byte[] encVal = c.doFinal(Data.getBytes());\n            encryptedValue = new BASE64Encoder().encode(encVal);\n            return encryptedValue;\n        } catch (Exception e) {\n        }\n        return encryptedValue;\n    }\n\n    public String decrypt(String encryptedData) throws Exception {\n        String decryptedValue = \"\";\n        try {\n            Key key = generateKey();\n            Cipher c = Cipher.getInstance(ALGO);\n            c.init(Cipher.DECRYPT_MODE, key);\n            byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n            byte[] decValue = c.doFinal(decordedValue);\n            decryptedValue = new String(decValue);\n            return decryptedValue;\n        } catch (Exception e) {\n        }\n        return decryptedValue;\n    }\n\n    private Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n    }\n}\n", "idx": 2067}
{"project": "cipher", "commit_id": "Snippet32544436_14659.java", "target": 0, "func": "package experiment;\n\npublic class Experiment implements Serializable {\n    public static void main(String[] args) throws Exception {\n        File data = new File(\"C:\\\\Users\\\\Furze\\\\Desktop\\\\experiment.dat\");   \n        // I only execute the following to encrypt the file, which works fine:\n        Test test = new Test(new VariableMap<String, String>() {{\n            put(\"Name\", \"Furze\");\n        }});   \n        Cipher cipher = Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(new byte[] {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07}, \"Blowfish\"));\n        SealedObject sealedObject = new SealedObject(test, cipher);\n        CipherOutputStream outputStream = new CipherOutputStream(new BufferedOutputStream(new FileOutputStream(data.getPath())), cipher);\n        ObjectOutputStream objectOutput = new ObjectOutputStream(outputStream);\n        objectOutput.writeObject(sealedObject);     \n        objectOutput.close();\n        // I then comment out the above code to test the file, which fails.\n        Cipher cipher = Cipher.getInstance(\"Blowfish\");\n        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(new byte[] {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07}, \"Blowfish\"));\n        CipherInputStream inputStream = new CipherInputStream(new BufferedInputStream(new FileInputStream(data.getPath())), cipher);\n        ObjectInputStream objectInput = new ObjectInputStream(inputStream);\n        SealedObject sealedObject = (SealedObject) objectInput.readObject();\n        Test test = (Test) sealedObject.getObject(cipher);\n        System.out.println(test.variables.get(\"Name\"));\n    }\n}\n", "idx": 2068}
{"project": "cipher", "commit_id": "Snippet9759283_34190.java", "target": 0, "func": "import javax.crypto.spec.DESedeKeySpec\nimport javax.crypto.spec.IvParameterSpec\nimport javax.crypto.Cipher\nimport javax.crypto.SecretKeyFactory\n\n\n...\nDESedeKeySpec k;\nCipher c;\n\n...\nk = new DESedeKeySpec(\"abcdefghabcdefgh\".getBytes());\nc = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\nc.init(Cipher.DECRYPT_MODE, k);\ndecrypted = c.doFinal(\"jEUQrH58Ulk=\\n\".getBytes());\n", "idx": 2069}
{"project": "cipher", "commit_id": "Snippet41202589_23173.java", "target": 0, "func": " // We must use a PasswordBasedEncryption algorithm in order to encrypt the private key, you may use any common algorithm supported by openssl, you can check them in the openssl documentation http://www.openssl.org/docs/apps/pkcs8.html\nString MYPBEALG = \"PBEWithSHA1AndDESede\";\nString password = \"pleaseChangeit!\";\n\nint count = 20;// hash iteration count\nSecureRandom random = new SecureRandom();\nbyte[] salt = new byte[8];\nrandom.nextBytes(salt);\n\n// Create PBE parameter set\nPBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, count);\nPBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());\nSecretKeyFactory keyFac = SecretKeyFactory.getInstance(MYPBEALG);\nSecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n\nCipher pbeCipher = Cipher.getInstance(MYPBEALG);\n\n// Initialize PBE Cipher with key and parameters\npbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n\n// Encrypt the encoded Private Key with the PBE key\nbyte[] ciphertext = pbeCipher.doFinal(encodedPrivateKey);\n\n// Now construct  PKCS #8 EncryptedPrivateKeyInfo object\nAlgorithmParameters algparms = AlgorithmParameters.getInstance(MYPBEALG);\nalgparms.init(pbeParamSpec);\nEncryptedPrivateKeyInfo encinfo = new EncryptedPrivateKeyInfo(algparms, ciphertext);\n\n// and here we have it! a DER encoded PKCS#8 encrypted key!\nbyte[] encryptedPkcs8 = encinfo.getEncoded();\n", "idx": 2070}
{"project": "cipher", "commit_id": "Snippet9907052_34315.java", "target": 0, "func": "Cipher aesCipher = Cipher.getInstance(\"RC4\");\n", "idx": 2071}
{"project": "cipher", "commit_id": "Snippet42910006_25030.java", "target": 0, "func": "public static byte[] encryptWithAES(byte[] message, Key AESkey) throws Exception {\nbyte[] decryptedMessage = null;\ntry {\n    Cipher encrypt = Cipher.getInstance(\"AES/ECB/PKCS5Padding\"); // here is the change\n    encrypt.init(Cipher.ENCRYPT_MODE, AESkey);\n    decryptedMessage = encrypt.doFinal(message);\n} catch (Exception ex) {\n    System.err.println(ex.getMessage());\n    throw ex;\n}\nreturn decryptedMessage;\n}\n", "idx": 2072}
{"project": "cipher", "commit_id": "Snippet5124438_31469.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"RC5/CBC/PKCS5Padding\");", "idx": 2073}
{"project": "cipher", "commit_id": "Snippet32583766_14711.java", "target": 0, "func": "import java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\npublic class StrongAES \n{\n    public void run() \n    {\n        try \n        {\n            String text = \"Hello World\";\n            String key = \"Bar12345Bar12345\"; // 128 bit key\n            // Create key and cipher\n            Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            // encrypt the text\n            cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            byte[] encrypted = cipher.doFinal(text.getBytes());\n\n            StringBuilder sb = new StringBuilder();\n            for (byte b: encrypted) {\n                sb.append((char)b);\n            }\n\n            // the encrypted String\n            String enc = sb.toString();\n            System.out.println(\"encrypted:\" + enc);\n\n            // now convert the string to byte array\n            // for decryption\n            byte[] bb = new byte[enc.length()];\n            for (int i=0; i<enc.length(); i++) {\n                bb[i] = (byte) enc.charAt(i);\n            }\n\n            // decrypt the text\n            cipher.init(Cipher.DECRYPT_MODE, aesKey);\n            String decrypted = new String(cipher.doFinal(bb));\n            System.err.println(\"decrypted:\" + decrypted);\n\n        }\n        catch(Exception e) \n        {\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) \n    {\n        StrongAES app = new StrongAES();\n        app.run();\n    }\n}\n", "idx": 2074}
{"project": "cipher", "commit_id": "Snippet339769_29697.java", "target": 0, "func": "// only the first 8 Bytes of the constructor argument are used \n// as material for generating the keySpec\nDESKeySpec keySpec = new DESKeySpec(\"YourSecr\".getBytes(\"UTF8\")); \nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\nSecretKey key = keyFactory.generateSecret(keySpec);\nsun.misc.BASE64Encoder base64encoder = new BASE64Encoder();\nsun.misc.BASE64Decoder base64decoder = new BASE64Decoder();\n.........\n\n// ENCODE plainTextPassword String\nbyte[] cleartext = plainTextPassword.getBytes(\"UTF8\");      \n\nCipher cipher = Cipher.getInstance(\"DES\"); // cipher is not thread safe\ncipher.init(Cipher.ENCRYPT_MODE, key);\nString encrypedPwd = base64encoder.encode(cipher.doFinal(cleartext));\n// now you can store it \n......\n\n// DECODE encryptedPwd String\nbyte[] encrypedPwdBytes = base64decoder.decodeBuffer(encryptedPwd);\n\nCipher cipher = Cipher.getInstance(\"DES\");// cipher is not thread safe\ncipher.init(Cipher.DECRYPT_MODE, key);\nbyte[] plainTextPwdBytes = (cipher.doFinal(encrypedPwdBytes));\n", "idx": 2075}
{"project": "cipher", "commit_id": "Snippet18700095_1663.java", "target": 0, "func": "   public String decrypt(){\n       String keyStr = \"password\";\n       String msg = \"KGFL1GG5VLQ=\";\n       String erg = \"\";\n       try{\n\n\n       KeySpec ks = new DESKeySpec(keyStr.getBytes(\"UTF-8\"));\n       SecretKey key = SecretKeyFactory.getInstance(\"DES\").generateSecret(ks);\n       IvParameterSpec iv = new IvParameterSpec(Hex.decodeHex(\"1234567890ABCDEF\".toCharArray()));\n       Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n       cipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n       byte[] decoded = cipher.doFinal(Base64.decodeBase64(msg));\n       erg = new String(decoded);\n       } catch (Exception e){\n           erg = \"error\";\n       }\n       return erg;\n\n   }\n", "idx": 2076}
{"project": "cipher", "commit_id": "Snippet30358788_12511.java", "target": 0, "func": "public class AESUtils {\n\n    public static byte[] encrypt(SecretKeySpec skeySpec, byte[] clear) throws Exception {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    public static byte[] decrypt(SecretKeySpec skeySpec, byte[] encrypted) throws Exception {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static SecretKeySpec getKey(String key) throws NoSuchAlgorithmException {\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(key.getBytes());\n        KeyGenerator kg = KeyGenerator.getInstance(\"AES\");\n        kg.init(128, sr);\n        return new SecretKeySpec((kg.generateKey()).getEncoded(), \"AES\");\n    }\n}\n", "idx": 2077}
{"project": "cipher", "commit_id": "Snippet16231224_39187.java", "target": 0, "func": "public class DecryptFinal {\nprivate static Cipher dcipher;\n\nprivate static byte[] iv = {\n    (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,\n    (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3\n    };\n\n\npublic static void main(String[] args){\n\n    try {\n        String s = \"123456789123456789111234\";\n        AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);\n\n        SecretKeyFactory keyfactory=SecretKeyFactory.getInstance(\"DESede\");\n        byte[] encodedkey=s.getBytes();\n        System.out.println();\n         SecretKey key = keyfactory.generateSecret(new DESedeKeySpec(encodedkey));\n         System.out.println(new DESedeKeySpec(encodedkey));\n        SecretKeySpec(encodedKey,0,encodedKey.length,\"DESede\" );\n\n        dcipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        dcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n        FileInputStream fs =new FileInputStream(\"E:\\\\Test1\\\\Test1\\\\Encrypted Files\\\\Wedding bells.akr\");\n        FileOutputStream os= new FileOutputStream(\"E:\\\\Test1\\\\Test1\\\\Encrypted Files\\\\Encrypted Files\\\\E-pub Totorials\");\n        byte[] buf = new byte[1024];// bytes read from stream will be decrypted\n        CipherInputStream cis = new CipherInputStream(fs, dcipher);// read in the decrypted bytes and write the clear text to out\n        int numRead = 0;\n        while ((numRead = cis.read(buf)) >= 0) {\n            os.write(buf, 0, numRead);\n        }\n        cis.close();// close all streams\n        fs.close();\n        os.close();\n\n    }\n    catch(FileNotFoundException e) {\n        System.out.println(\"File Not Found:\" + e.getMessage());\n        return;\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidAlgorithmParameterException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    catch (IOException e) {\n        System.out.println(\"I/O Error:\" + e.getMessage());\n    }\n    catch (InvalidKeySpecException e) {\n        // TODO: handle exception\n        e.printStackTrace();\n    }\n", "idx": 2078}
{"project": "cipher", "commit_id": "Snippet46861817_28906.java", "target": 0, "func": "private String _encrypt2(String clearText,String key )\n{\n    try\n    {\n        /**\n         * create md5\n         */\n        MessageDigest md = MessageDigest.getInstance(\"md5\");\n        byte[] digestOfPassword = md.digest(key.getBytes(\"UTF-16LE\"));\n        byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        for (int j = 0, k = 16; j < 8; )\n        {\n            keyBytes[k++] = keyBytes[j++];\n        }\n\n\n        SecretKey secretKey = new SecretKeySpec(keyBytes, 0, 24, \"DESede\");\n        IvParameterSpec iv = new IvParameterSpec(new byte[8]);\n        Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey, iv);\n\n        byte[] plainTextBytes = clearText.getBytes(\"UTF-16LE\");\n        byte[] cipherText = cipher.doFinal(plainTextBytes);\n\n        String output = Base64.encodeToString(cipherText,Base64.DEFAULT);\n        return output;\n    }\n    catch (Exception ex) {}\n    return \"\";\n}\n", "idx": 2079}
{"project": "cipher", "commit_id": "Snippet11898139_35879.java", "target": 0, "func": "package com.kushal.utils;\n\nimport java.security.spec.KeySpec;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class DESEncryption {\n\nprivate static final String UNICODE_FORMAT = \"UTF8\";\npublic static final String DES_ENCRYPTION_SCHEME = \"DES\";\nprivate KeySpec myKeySpec;\nprivate SecretKeyFactory mySecretKeyFactory;\nprivate Cipher cipher;\nbyte[] keyAsBytes;\nprivate String myEncryptionKey;\nprivate String myEncryptionScheme;\nSecretKey key;\n\npublic DESEncryption() throws Exception\n{\n    myEncryptionKey = \"ThisIsSecretEncryptionKey\";\n    myEncryptionScheme = DES_ENCRYPTION_SCHEME;\n    keyAsBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n    myKeySpec = new DESKeySpec(keyAsBytes);\n    mySecretKeyFactory = SecretKeyFactory.getInstance(myEncryptionScheme);\n    cipher = Cipher.getInstance(myEncryptionScheme);\n    key = mySecretKeyFactory.generateSecret(myKeySpec);\n}\n\n/**\n * Method To Encrypt The String\n */\npublic String encrypt(String unencryptedString) {\n    String encryptedString = null;\n    try {\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);\n        byte[] encryptedText = cipher.doFinal(plainText);\n        BASE64Encoder base64encoder = new BASE64Encoder();\n        encryptedString = base64encoder.encode(encryptedText);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return encryptedString;\n}\n/**\n * Method To Decrypt An Ecrypted String\n */\npublic String decrypt(String encryptedString) {\n    String decryptedText=null;\n    try {\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        BASE64Decoder base64decoder = new BASE64Decoder();\n        byte[] encryptedText = base64decoder.decodeBuffer(encryptedString);\n        byte[] plainText = cipher.doFinal(encryptedText);\n        decryptedText= bytes2String(plainText);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return decryptedText;\n}\n/**\n * Returns String From An Array Of Bytes\n */\nprivate static String bytes2String(byte[] bytes) {\n    StringBuffer stringBuffer = new StringBuffer();\n    for (int i = 0; i &lt; bytes.length; i++) {\n        stringBuffer.append((char) bytes[i]);\n    }\n    return stringBuffer.toString();\n}\n\n/**\n * Testing the DES Encryption And Decryption Technique\n */\npublic static void main(String args []) throws Exception\n{\n    DESEncryption myEncryptor= new DESEncryption();\n\n    String stringToEncrypt=\"Sanjaal.com\";\n    String encrypted=myEncryptor.encrypt(stringToEncrypt);\n    String decrypted=myEncryptor.decrypt(encrypted);\n\n    System.out.println(\"String To Encrypt: \"+stringToEncrypt);\n    System.out.println(\"Encrypted Value :\" + encrypted);\n    System.out.println(\"Decrypted Value :\"+decrypted);\n\n}   \n\n}\n", "idx": 2080}
{"project": "cipher", "commit_id": "Snippet43703523_25833.java", "target": 0, "func": "public static String generateSalt() {\n    SecureRandom random = new SecureRandom();\n    String salt = new BigInteger(130, random).toString(32);\n    return salt;\n}\npublic static String hashKey(String key, String salt) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n    String combinedKey = key + salt;\n    MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n    digest.update(combinedKey.getBytes(\"UTF-8\"));\n    byte[] hash = digest.digest();\n    String hashedKey = String.format(\"%032X\", new BigInteger(+1, hash));\n    return hashedKey;\n}\nprivate static SecretKeySpec getSecretKey(String myKey) {\n    SecretKeySpec secretKey = null;\n    byte[] key;\n    MessageDigest sha = null;\n    try {\n        key = myKey.getBytes(\"UTF-8\");\n        sha = MessageDigest.getInstance(\"SHA-1\");\n        key = sha.digest(key);\n        System.out.println(Base64.encode(key));\n        key = Arrays.copyOf(key, 16);\n        String a = Base64.encode(key);\n        System.out.println(\"key:\"+a);\n        secretKey = new SecretKeySpec(key, \"AES\");\n\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n    }\n\n    return secretKey;\n}\npublic static String encrypt(String stringToEncrypt, String secret) {\n    String encodedEncryptedData = null;\n\n    try {\n        SecretKeySpec secretKey = getSecretKey(secret);\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] encryptedData = cipher.doFinal(stringToEncrypt.getBytes(\"UTF-8\"));\n        //System.out.println(encryptedData);\n        encodedEncryptedData = Base64.encode(encryptedData);\n    } catch (Exception e) {\n        System.out.println(\"Error while encrypting: \" + e.toString());\n    }\n    return encodedEncryptedData;\n}\n\npublic static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    String salt = generateSalt();\n    String hash = hashKey(\"FEAD286FF2678F57C7865B6D6935C0C3\",salt);\n    //System.out.println(hash);\n    String message = \"60;50;28042017080701\";\n    String encryptedData = encrypt(message,hash);\n    System.out.println(encryptedData);\n}\n", "idx": 2081}
{"project": "cipher", "commit_id": "Snippet36505038_18339.java", "target": 0, "func": "test.java:43: error: unreported exception NoSuchAlgorithmException; must be caught or declared to be thrown\n        Cipher cip = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n", "idx": 2082}
{"project": "cipher", "commit_id": "Snippet18433119_1493.java", "target": 0, "func": "KeyGenerator keyGenerator = KeyGenerator.getInstance(\"Blowfish\");\nSecretKey secretKey = keyGenerator.generateKey();\nCipher cipher = Cipher.getInstance(\"Blowfish\"); \ncipher.init(Cipher.ENCRYPT_MODE, secretKey);\nString input = \"password\";\nbyte encrypted[] = cipher.doFinal(input.getBytes());\n\nStringBuilder str = new StringBuilder();\n\nfor(byte b:encrypted){\n     str.append(String.format(\"%02x\", b));\n}\n\nString encData = str.toString();\nSystem.out.println(encData);\n", "idx": 2083}
{"project": "cipher", "commit_id": "Snippet20087963_2727.java", "target": 0, "func": "static void decrypt() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n    FileInputStream fis = new FileInputStream(\"data/encrypted\");\n\n    FileOutputStream fos = new FileOutputStream(\"data/decrypted\");\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(), \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, sks);\n    CipherInputStream cis = new CipherInputStream(fis, cipher);\n    int b;\n    byte[] d = new byte[8];\n    while((b = cis.read(d)) != -1) {\n        fos.write(d, 0, b);\n    }\n    fos.flush();\n    fos.close();\n    cis.close();\n}\n", "idx": 2084}
{"project": "cipher", "commit_id": "Snippet10012918_34377.java", "target": 0, "func": "static Cipher createCipher(int mode, String password) throws Exception {\n            PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n            SecretKey key = keyFactory.generateSecret(keySpec);\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(\"input\".getBytes());\n            byte[] digest = md.digest();\n            byte[] salt = new byte[8];\n            for (int i = 0; i < 8; ++i)\n              salt[i] = digest[i];\n            PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 20);\n            Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n            cipher.init(mode, key, paramSpec);\n            return cipher;\n    }\n\n     static void applyCipher(String inFile, String outFile, Cipher cipher) throws Exception {\n            String decryption = \"\";\n            CipherInputStream in = new CipherInputStream(new FileInputStream(inFile), cipher);\n            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(outFile));\n            int BUFFER_SIZE = 8;\n            byte[] buffer = new byte[BUFFER_SIZE];\n            int numRead = 0;\n            do {\n              numRead = in.read(buffer);\n              System.out.println(buffer + \", 0, \" + numRead);\n              if (numRead > 0){\n                out.write(buffer, 0, numRead);\n                System.out.println(toHexString(buffer, 0, numRead));\n              }\n             } while (numRead == 8);\n            in.close();\n            out.flush();\n            out.close();\n          }\n     private static char[] hex_table = {\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \n            'a', 'b', 'c', 'd', 'e', 'f'};\n\n     public static String toHexString(byte[] data, int offset, int length)\n     {\n       StringBuffer s = new StringBuffer(length*2);\n       int end = offset+length;\n\n       for (int i = offset; i < end; i++)\n       {\n         int high_nibble = (data[i] & 0xf0) >>> 4;\n         int low_nibble = (data[i] & 0x0f);\n         s.append(hex_table[high_nibble]);\n         s.append(hex_table[low_nibble]);\n       }\n\n       return s.toString();\n     }\n", "idx": 2085}
{"project": "cipher", "commit_id": "Snippet12957022_36585.java", "target": 0, "func": "public String encrypt(SecretKey key, String stringIn){\n\n    String outString = \"\";      \n\n    if (stringIn.isEmpty() || stringIn.toUpperCase().equals(\"NULL\")){\n        return \"\";\n    }\n\n\n    try {   \n\n        if (key == null)\n            key = this.key;\n\n        Cipher ecipher = Cipher.getInstance(\"DESede\");\n\n        ecipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] bytes = stringIn.getBytes(\"UTF8\");\n\n        byte[] encVal = ecipher.doFinal(bytes);\n\n        outString = new sun.misc.BASE64Encoder().encode(encVal);\n\n    } catch (UnsupportedEncodingException e) {\n\n        e.printStackTrace();\n\n    } catch (NoSuchAlgorithmException e) {\n\n        e.printStackTrace();\n\n    } catch (NoSuchPaddingException e) {\n\n        e.printStackTrace();\n\n    } catch (InvalidKeyException e) {\n\n        e.printStackTrace();\n\n    } catch (IOException e) {\n\n        e.printStackTrace();\n\n    } finally {\n\n        return outString;\n    }\n\n}\n", "idx": 2086}
{"project": "cipher", "commit_id": "Snippet38861869_20769.java", "target": 0, "func": "/**\n * \n */\npackage com.ebiznext.utils\n\nimport java.io.Serializable;\nimport java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\n/**\n * @version $Id $\n *\n */\nclass ByteSerializer\n{\n    def static Object deserialize(String string) throws IOException, ClassNotFoundException\n    {\n        byte[] data = DatatypeConverter.parseBase64Binary(string)\n        ObjectInputStream objectInputStream =\n            new ObjectInputStream(new ByteArrayInputStream(data))\n        Object object = objectInputStream.readObject()\n        objectInputStream.close()\n        return object\n    }\n\n    def static String serialize(Serializable object) throws IOException\n    {\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()\n        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream)\n        objectOutputStream.writeObject(object)\n        objectOutputStream.close()\n        return new String(DatatypeConverter.printBase64Binary(byteArrayOutputStream\n            .toByteArray()))\n    }\n\n    def static String toEncryptedString(Serializable object)\n            throws Exception {\n        return encrypt(toString(object));\n    }\n\n    def static Object fromEncryptedString(String encryptedObject)\n            throws Exception {\n        return fromString(decrypt(encryptedObject));\n    }\n\n    private static final String ALGORITHM = \"AES\";\n\n    private static final byte[] keyValue = \"ThisKeyIsVeryPrivateNobodyKnowsAboutItYeah!!\"\n            .substring(0, 32).getBytes();\n\n    def static String encrypt(String valueToEnc) throws Exception {\n\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encValue = c.doFinal(valueToEnc.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encValue);\n        return encryptedValue;\n    }\n\n    def static String decrypt(String encryptedValue) throws Exception {\n\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGORITHM);\n        // SecretKeyFactory keyFactory =\n        // SecretKeyFactory.getInstance(ALGORITHM);\n        // key = keyFactory.generateSecret(new DESKeySpec(keyValue));\n        return key;\n    }\n}\n", "idx": 2087}
{"project": "cipher", "commit_id": "Snippet14631582_37856.java", "target": 0, "func": "public class AES_Encryption  {\npublic static void main(String[] args) throws Exception {\n    String str = new Scanner(new File(\"plainText.txt\")).useDelimiter(\"\\\\t\").next();\n    FileOutputStream fstream = new FileOutputStream(\"cipherText.txt\");\n    BufferedOutputStream out = new BufferedOutputStream(fstream);\n    FileOutputStream fstream2 = new FileOutputStream(\"decrpytedText.txt\");\n    BufferedOutputStream out2 = new BufferedOutputStream(fstream2);\n    System.out.println(\"INPUT String:\\n\" + str);\n\n\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n    keyGen.init(128);\n    Key key = keyGen.generateKey();\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    byte[] cipherText = cipher.doFinal(str.getBytes());\n    System.out.println(\"ENCRYPTED String:\\n\"+new String(cipherText, \"UTF8\") );\n    out.write(cipherText);\n    out.flush();\n    out.close();\n\n\n    //String cipherT = new Scanner(new File(\"cipherText.txt\")).nextLine();\n    BufferedInputStream bfin = new BufferedInputStream(new FileInputStream(new File(\"cipherText.txt\")));//To read the file in Binary Mode.\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    int BUFFERSIZE = 1024;\n    byte[] readBytes = new byte[BUFFERSIZE];\n    byte[] data = null;\n    int totalRead = -1;\n    while( (totalRead = bfin.read(readBytes))!=-1)\n    {\n        byte[] temp = new byte[(data == null ? totalRead : data.length)];\n        System.arraycopy((data==null ? readBytes : data),0,temp,0, temp.length); \n        data = new byte[(data == null ? 0 : data.length) + totalRead];\n        System.arraycopy(temp, 0, data, 0, temp.length);\n        System.arraycopy(readBytes, 0, data, data.length - temp.length, totalRead);\n    }\n    if (data!=null)\n    {\n        byte[] newPlainText = cipher.doFinal(data);\n        out2.write(newPlainText);\n        out2.flush();\n        System.out.println(\"DECRYPTED String:\\n\"+new String(newPlainText,\"UTF8\"));\n    }\n    else\n    {\n        System.out.println(\"No Data Found\");\n    }\n    //String dt = new String(newPlainText, \"UTF8\");\n    out2.close();\n}\n}\n", "idx": 2088}
{"project": "cipher", "commit_id": "Snippet38487481_20452.java", "target": 0, "func": "public class EncryptActivity extends AppCompatActivity {\n\nEditText ed1;\nButton b1;\n\nprivate ClipboardManager myClipboard;\nprivate ClipData myClip;\nKeyGenerator keygenerator;\nstatic SecretKey secretkey;\n\nCipher cipher;\nbyte[] encrypted;\nString encryptedText = null;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.encrypt_activity);\n    ed1 = (EditText) findViewById(R.id.editText);\n    b1 = (Button) findViewById(R.id.button);\n    myClipboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);\n    b1.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            String text = ed1.getText().toString();//now encrypt the message\n            try {\n                keygenerator = KeyGenerator.getInstance(\"Blowfish\");\n                secretkey = keygenerator.generateKey();\n                Log.d(\"asd\", secretkey.toString());\n                cipher = Cipher.getInstance(\"Blowfish\");\n                cipher.init(Cipher.ENCRYPT_MODE, secretkey);\n                encrypted = cipher.doFinal(text.getBytes());\n                encryptedText = encrypted.toString();\n                myClip = ClipData.newPlainText(\"text\", encryptedText);\n                myClipboard.setPrimaryClip(myClip);\n\n                Toast.makeText(getApplicationContext(), \"Text Copied\", Toast.LENGTH_SHORT).show();\n            } catch (Exception e) {\n            }\n        }\n    });\n}\n", "idx": 2089}
{"project": "cipher", "commit_id": "Snippet23027359_5413.java", "target": 0, "func": "package custom_enc;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.util.Scanner;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.spec.SecretKeySpec;\npublic class Custom_enc {\n\nString ekey=\"\";\nString algorithm=\"\";\nString path1=\"\";\nFile f;\n\npublic void Custom_enc()\n{\n    System.out.println(\"Enter the file name with extension and path : \\n\");\n    Scanner s = new Scanner(System.in);\n    String path1 = s.nextLine();\n    f = new File(path1);\n    System.out.println(\"Enter secret key : \\n\");\n    ekey = s.nextLine();\n}\n\npublic void encrypt() throws Exception\n{\n   Custom_enc();\n   this.algorithm=\"DES/ECB/PKCS5Padding\";\n    FileInputStream fis =new FileInputStream(f);\n    f=new File(f.getAbsolutePath()+\"_encrypted_file.txt\");\n    FileOutputStream fos =new FileOutputStream(f);\n\n    byte k[] = ekey.getBytes();\n    SecretKeySpec key = new SecretKeySpec(k,\"DES\");\n    Cipher encrypt = Cipher.getInstance(algorithm);\n\n    encrypt.init(Cipher.ENCRYPT_MODE, key);\n    CipherOutputStream cout=new CipherOutputStream(fos, encrypt);\n    byte[] buf = new byte[1024];\n    int read;\n\n    while((read=fis.read(buf))!=-1) //reading data\n        cout.write(buf,0,read); //writing encrypted data\n\n    fis.close();\n    cout.flush();\n    cout.close();\n    System.out.println(\"Encryption Done!!\");\n    //exit();\n}\n\npublic void decrypt() throws Exception\n{\n    Custom_enc();\n    this.algorithm=\"DES/ECB/PKCS5Padding\";\n    FileInputStream fis =new FileInputStream(f);\n    f=new File(f.getAbsolutePath()+\"_decrypted_file.txt\");\n    FileOutputStream fos =new FileOutputStream(f);\n\n    byte k[] = ekey.getBytes();\n    SecretKeySpec key = new SecretKeySpec(k,\"DES\");\n\n    Cipher decrypt = Cipher.getInstance(algorithm);\n    decrypt.init(Cipher.DECRYPT_MODE, key);\n    CipherInputStream cin=new CipherInputStream(fis, decrypt);\n\n    byte[] buf = new byte[1024];\n    int read=0;\n\n    while((read=cin.read(buf))!=-1) //reading encrypted data\n    {\n        fos.write(buf,0,read); //writing decrypted data\n    }\n\n    cin.close();\n    fos.flush();\n    fos.close();\n\n    System.out.println(\"Encryption Done!!\");\n    //1exit();\n\n}\n\npublic static void main(String[] args) throws Exception,     java.security.InvalidKeyException {\n    Custom_enc obj = new Custom_enc();\n    System.out.println(\"Enter your choice : \\n 1 For Encryption \\n 2 For Decryption\");\n    Scanner s1 = new Scanner(System.in);\n    int choice = s1.nextInt();\n    if(choice==1)\n    {\n        System.out.println(\"You've chosen to Encrypt\\n\");\n        obj.encrypt();\n    }\n    else if(choice==2)\n    {\n        System.out.println(\"You've chosen to Decrypt\\n\");\n        obj.decrypt();\n    }\n    else\n    {\n        System.out.println(\"Invalid Choice, Try again...\");\n    }\n}\n\n}\n", "idx": 2090}
{"project": "cipher", "commit_id": "Snippet10782187_35039.java", "target": 0, "func": "public static String encrypt(String seed, String cleartext) throws Exception  \n{\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes()); \n    return toHex(result);\n}\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception \n{\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n", "idx": 2091}
{"project": "cipher", "commit_id": "Snippet25087094_7436.java", "target": 0, "func": "Cipher ciph = Cipher.getInstance(\"AES\");\n\nSecretKeySpec AESkeySpec = new SecretKeySpec(keyPass, \"AES\");\nciph.init(ENCRYPT_MODE,AESkeySpec);\n//ciph.update(s.getBytes());\n\nbyte[] encryptedData = ciph.doFinal(s.getBytes());\nreturn encryptedData;\n", "idx": 2092}
{"project": "cipher", "commit_id": "Snippet22185728_4576.java", "target": 0, "func": "String f=\"A000000000000000\";\nFileInputStream fis = new FileInputStream(\"C:\\\\Users\\\\original.txt\");\nbyte[] bytes = DatatypeConverter.parseHexBinary(f);\nSecretKey key = new SecretKeySpec(bytes, 0, bytes.length, \"DES\");\n\nString strDataToEncrypt = new String();\nString strCipherText = new String();\nString strDecryptedText = new String();\n\n    try{\n\n    Cipher desCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    desCipher.init(Cipher.ENCRYPT_MODE,key);\n\n            //read from file and transform to String\n            try{\n            builder = new StringBuilder();\n            int ch;\n            while((ch = fis.read()) != -1){\n            builder.append((char)ch);\n            }\n            }catch (IOException e){\n\n            }\n\n    byte[] byteDataToEncrypt = builder.toString().getBytes();\n    byte[] byteCipherText = desCipher.doFinal(byteDataToEncrypt); \n    strCipherText = new BASE64Encoder().encode(byteCipherText);\n\n    System.out.println(strCipherText);\n", "idx": 2093}
{"project": "cipher", "commit_id": "Snippet38356450_20322.java", "target": 0, "func": "val encrypted = encrypt(zipped.toString)\n\ndef encrypt(value: String): String = {\n  val cipher: Cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\")\n  cipher.init(Cipher.ENCRYPT_MODE, keyToSpec(encryptionPassword))\n  Base64.encodeBase64String(cipher.doFinal(value.getBytes(\"UTF-8\")))\n}\n", "idx": 2094}
{"project": "cipher", "commit_id": "Snippet40209218_22124.java", "target": 0, "func": "boolean dbase64 = true;\ndkey = \"thisiskey\";\nmessageToDecrypt = \"m\u00f1q\u00e8\u2022\u00c0P\u0152\ufffd\u00f8f\\\"\u00df\u00a6\\\u00b1\u00f5\u00a4\u00f9'\u00c89\u00a2\u00ebyT \u00cdQE\u00c1|;\u00eb\u00e2\u00c9\u00f7JW\u00fa\"; // Message from above code\n\nSecretKeyFactory MyKeyFactory = SecretKeyFactory.getInstance(\"DES\");\nbyte[] dkeyBytes = dkey.getBytes();\n\nDESKeySpec generatedKeySpec = new DESKeySpec(dkeyBytes);\nSecretKey generatedSecretKey = MyKeyFactory.generateSecret(generatedKeySpec);\n\nCipher generatedCipher = Cipher.getInstance(\"DES\");\ngeneratedCipher.init(Cipher.DECRYPT_MODE, generatedSecretKey);\n\nif (dbase64) {\n    byte[] decodedBytes = Base64.getDecoder().decode(dencryptedText);\n    dencryptedText = new String(decodedBytes, \"utf-8\");\n}\n\nbyte[] messsageStringBytes = dencryptedText.getBytes();\nbyte[] encryptedMessage = generatedCipher.doFinal(messsageStringBytes);\n\nString decryptedMessageString = new String(encryptedMessage);\n\nreturn decryptedMessageString;\n", "idx": 2095}
{"project": "cipher", "commit_id": "Snippet20121076_2785.java", "target": 0, "func": "    public class TripleDesTest {\n\nprivate KeySpec keySpec;\nprivate SecretKey key;\nprivate IvParameterSpec iv;\n\npublic TripleDesTest() {\n    String keyString = \"THE_KEY\";\n    String ivString = \"THE_IV\";\n\n    try {\n        final MessageDigest md = MessageDigest.getInstance(\"md5\");\n        final byte[] digestOfPassword = md.digest(Base64.decodeBase64(keyString.getBytes(\"UTF-8\")));            \n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        for (int j = 0, k = 16; j < 8;) {\n            keyBytes[k++] = keyBytes[j++];\n        }\n\n        keySpec = new DESedeKeySpec(keyBytes);\n\n        key = SecretKeyFactory.getInstance(\"DESede\").generateSecret(keySpec);\n\n        iv = new IvParameterSpec(ivString.getBytes(\"UTF-8\"));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n}\n\n\npublic String decrypt(String value) {\n\n    try {\n        Cipher dcipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\", \"SunJCE\");\n        dcipher.init(Cipher.DECRYPT_MODE, key, iv);\n\n        if (value == null)\n            return null;\n\n        // Decode base64 to get bytes\n        byte[] dec = Base64.decodeBase64(value.getBytes(\"UTF-8\"));\n\n        // Decrypt\n        byte[] utf8 = dcipher.doFinal(dec);\n\n        // Decode using UTF-8\n        return new String(utf8, \"UTF-8\");\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n\n}\n    }\n", "idx": 2096}
{"project": "cipher", "commit_id": "Snippet19676675_2413.java", "target": 0, "func": "cipher = Cipher.getInstance(\"AES/ECB/ZeroBytePadding\");\n", "idx": 2097}
{"project": "cipher", "commit_id": "Snippet41414233_23378.java", "target": 0, "func": "public class CipherStreams {\n    public static void main(String[] args) {\n        try {\n            KeyGenerator keygen = KeyGenerator.getInstance(\"AES\");\n            Key k = keygen.generateKey();\n\n            Cipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            aes.init(Cipher.ENCRYPT_MODE, k);\n            String fileName = \"Encrypted.txt\";\n            FileOutputStream fs = new FileOutputStream(fileName);\n            CipherOutputStream out = new CipherOutputStream(fs, aes);\n            out.write(\"[Hello:Okay]\\nOkay\".getBytes());\n            out.flush();\n            out.close();\n\n            Cipher aes2 = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            aes2.init(Cipher.DECRYPT_MODE, k);\n\n            FileInputStream fis = new FileInputStream(fileName);\n            CipherInputStream in = new CipherInputStream(fis, aes2);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n            byte[] b = new byte[1024];\n            int numberOfBytedRead;\n            while ((numberOfBytedRead = in.read(b)) >= 0) {\n                baos.write(b, 0, numberOfBytedRead);\n            }\n            System.out.println(new String(baos.toByteArray()));\n        }\n        catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IOException ex) {\n            ex.printStackTrace();\n            ;\n        }\n    }\n}\n", "idx": 2098}
{"project": "cipher", "commit_id": "Snippet20061563_2725.java", "target": 0, "func": "public class Test {\n\n    static ReadableByteChannel readChannel = null;\n    static WritableByteChannel writeChannel = null;\n    static SecretKey key = makeKeyFromPassword(\"abcdefghi\".getBytes()); \n    static byte b[];\n\n    public static SecretKey makeKeyFromPassword(byte[] password) {\n        try {\n            DESKeySpec dks = new DESKeySpec(password);\n            SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n            return skf.generateSecret(dks);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public static void run(int mode) throws Exception {\n        ByteBuffer readBuffer = ByteBuffer.allocate(1024);\n        ByteBuffer writeBuffer = ByteBuffer.allocate(1024);\n\n        // initializing cipher...\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        cipher.init(mode, key);\n\n        while (readChannel.read(readBuffer) != -1) {\n            readBuffer.flip();\n            cipher.doFinal(readBuffer, writeBuffer);\n            writeBuffer.flip();\n            writeChannel.write(writeBuffer);\n            readBuffer.clear();\n            writeBuffer.clear();\n        }\n    }\n\n    static void f(String inFileString, String fileString, int mode) {\n        FileOutputStream fos = null;\n        FileSystem fs = FileSystems.getDefault();\n        Path fp = fs.getPath(inFileString);\n\n        try {\n            readChannel = FileChannel.open(fp,\n                    EnumSet.of(StandardOpenOption.READ));\n            fos = new FileOutputStream(fileString);\n            writeChannel = Channels.newChannel(fos);\n            run(mode);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        f(\"C:\\\\test.txt\", \"C:\\\\des.txt\", Cipher.ENCRYPT_MODE);\n        System.out.println(\"Encrypted.\");\n        f(\"C:\\\\des.txt\", \"C:\\\\undes.txt\", Cipher.DECRYPT_MODE);\n        System.out.println(\"Decrypted.\");\n    }\n\n}\n", "idx": 2099}
{"project": "cipher", "commit_id": "Snippet21083313_3678.java", "target": 0, "func": "public class myDesCbc2 {\n\npublic static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException, IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n\n\n        JFrame frame = null;\n        JFileChooser fChoose = new JFileChooser(System.getProperty(\"user.home\"));\n        int returnVal = fChoose.showOpenDialog(frame);\n        File myFile = fChoose.getSelectedFile();\n\n        FileInputStream fis = new FileInputStream(myFile);\n        BufferedReader stream = new BufferedReader(new InputStreamReader(fis, \"ISO-8859-1\"));\n        String file;\n        while ((file = stream.readLine()) != null) {\n\n            JOptionPane.showOptionDialog(\n                    null, \"Generating a 56-bit DES key...\", \"Processing...\", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{}, null);\n\n        }\n        // Create an 8-byte initialization vector\n        SecureRandom sr = new SecureRandom();\n        byte[] iv = new byte[8];\n        sr.nextBytes(iv);\n        IvParameterSpec IV = new IvParameterSpec(iv);\n\n        // Create a 56-bit DES key\n        KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n\n        // Initialize with keysize\n        kg.init(56);\n        Key mykey = kg.generateKey();\n\n        JOptionPane.showOptionDialog(\n                null, \"Your key has been generated!\", \"Processing...\", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{}, null);\n\n        // Create a cipher object and use the generated key to initialize it\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, mykey, IV);\n\n        byte[] plaintext = file.getBytes(\"UTF8\");\n\n        // Encrypt the text\n        byte[] ciphertext = cipher.doFinal(plaintext);\n\n        JOptionPane.showMessageDialog(\n                null, \"Your ciphertext is\" + asHex(ciphertext), \"Done!\", JOptionPane.PLAIN_MESSAGE);\n\n    }\n}\n", "idx": 2100}
{"project": "cipher", "commit_id": "Snippet20877251_3469.java", "target": 0, "func": "public static boolean exportDB(int wellnessDayId) {\n    Serializer serializer = new Persister();\n    WellnessDay backToXMLWellnesday = ExportDbToXml.buildXmlDataModel(wellnessDayId);\n    if (backToXMLWellnesday == null) {\n        return false;\n    }\n    StringWriter sw = new StringWriter();\n    FileOutputStream fos = null;\n    FileOutputStream fosbackup = null;\n    try {\n        serializer.write(backToXMLWellnesday, sw);\n        DesHelper des = new DesHelper(\"12345678\");\n        byte[] decryptedBytes = sw.toString().getBytes();\n\n        //Calculating the size that the array should be (ie multiples of 8)\n        Double len = Math.ceil(((double) decryptedBytes.length) / EIGHT) * EIGHT;\n        byte[] decryptedBytesPadded = new byte[len.intValue()];\n\n        //Initializing to whitespace character\n        byte whiteSpaceBytevalue = 32;\n        for (int k=0; k< decryptedBytesPadded.length; k++){\n            decryptedBytesPadded[k]= whiteSpaceBytevalue;\n        }\n\n        //Copying the array into the byte array that is the correct length (ie multiples of 8)\n        System.arraycopy(decryptedBytes, 0, decryptedBytesPadded, 0, Math.min(decryptedBytes.length, len.intValue()));\n\n        byte[] encryptedBytes = des.encrypt(decryptedBytesPadded);\n        String filename = \"Export.blb\";\n        File sdCard = Environment.getExternalStorageDirectory();\n        File dir = new File(sdCard.getAbsolutePath() + \"/export\");\n        dir.mkdirs();\n\n        File file = new File(dir, filename);\n        file.createNewFile();\n        fos = new FileOutputStream(file);\n\n        for (int p = 0; p < encryptedBytes.length; p++) {\n            fos.write(encryptedBytes[p]);\n        }\n\n        Format formatter;\n        Date date = Calendar.getInstance().getTime();\n        formatter = new SimpleDateFormat(\"dd-MM-yyyy HH-mm-ss\");\n        String dateFormatted = formatter.format(date);\n        //Create Backup file in /Wellnessdays/archive\n         File dirBackup = new File(sdCard.getAbsolutePath() + \"/archive\");\n        dirBackup.mkdirs();\n        File filebackup = new File(dirBackup, dateFormatted + \" - \" + filename);\n        filebackup.createNewFile();\n        fosbackup = new FileOutputStream(filebackup);\n        for (int p = 0; p < encryptedBytes.length; p++) {\n            fosbackup.write(encryptedBytes[p]);\n        }\n\n\n    } catch (FileNotFoundException e) {\n        Log.e(TAG, e.getMessage());\n        return false;\n    } catch (IOException e) {\n        Log.e(TAG, e.getMessage());\n        return false;\n    } catch (GeneralSecurityException e) {\n        Log.e(TAG, e.getMessage());\n        return false;\n    } catch (Exception e) {\n        Log.e(TAG, e.getMessage());\n        return false;\n    } finally {\n        if (fos != null) {\n            try {\n                fos.close();\n            } catch (IOException e) {\n                Log.e(\"DatabaseExportToXML\", e.getMessage());\n            }\n        }\n        if (fosbackup!=null){\n            try {\n                fosbackup.close();\n            } catch (IOException e) {\n                Log.e(\"DatabaseExportToXML\", e.getMessage());\n            }\n        }\n    }\n    return true;\n}\n\npublic class DesHelper {\n\npublic static int MAX_KEY_LENGTH = DESKeySpec.DES_KEY_LEN;\n//private static String ENCRYPTION_ALGORITHM = \"DES/CBC/PKCS5Padding\";\nprivate static String ENCRYPTION_ALGORITHM = \"DES/ECB/NoPadding\";\nprivate static String ENCRYPTION_KEY_TYPE = \"DES\";\n\nprivate final SecretKeySpec keySpec;\n\npublic DesHelper(String passphrase) {\n    byte[] key;\n    try {\n        key = passphrase.getBytes(\"UTF8\");\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalArgumentException(e);\n    }\n    //The key is always 8 bytes, no need to pad the key\n    keySpec = new SecretKeySpec(key, ENCRYPTION_KEY_TYPE);\n}\n\nprivate byte[] padKeyToLength(byte[] key, int len) {\n    byte[] newKey = new byte[len];\n    System.arraycopy(key, 0, newKey, 0, Math.min(key.length, len));\n    return newKey;\n}\n\npublic byte[] encrypt(byte[] unencrypted) throws GeneralSecurityException {\n    return doCipher(unencrypted, Cipher.ENCRYPT_MODE);\n}\n\npublic byte[] decrypt(byte[] encrypted) throws GeneralSecurityException {\n    return doCipher(encrypted, Cipher.DECRYPT_MODE);\n}\n\nprivate byte[] doCipher(byte[] original, int mode) throws GeneralSecurityException {\n    Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);\n    cipher.init(mode, keySpec);\n    return cipher.doFinal(original);\n}\n\n}\n", "idx": 2101}
{"project": "cipher", "commit_id": "Snippet9038298_33615.java", "target": 0, "func": "    String secretKey = \"abcdefghijklmnopqrstuvwx\";\n\n    byte[] bytes = secretKey.getBytes(\"UTF-8\");\n    SecretKey key = new SecretKeySpec(bytes, \"DESede\");\n\n    Cipher ecipher = Cipher.getInstance(\"DESede\");\n    ecipher.init(Cipher.ENCRYPT_MODE, key);\n\n    String input = \"holahola1\"; \n\n    byte[] utf8 = input.getBytes(\"UTF8\");\n    byte[] enc = ecipher.doFinal(utf8); // Encrypt\n", "idx": 2102}
{"project": "cipher", "commit_id": "Snippet14398287_37704.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\n\n\npublic class Encryption \n{\n    private static final String ALGORITHME = \"Blowfish\";\n    private static final String TRANSFORMATION = \"Blowfish/ECB/PKCS5Padding\";\n    private static final String SECRET = \"kjkdfjslm\";\n    private static final String CHARSET = \"ISO-8859-1\";\n\n\n    public static void main(String[] argv) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException\n    {\n        Encryption main = new Encryption();\n\n        String plain = \"trallalla\";\n        System.out.println(\"initial : \" + plain);\n\n        String encrypted = main.encrypt(plain);\n        System.out.println(\"after encryption : \" + encrypted);\n\n        String decrypted = main.decrypt(encrypted);\n        System.out.println(\"after decryption : \" + decrypted);\n    }\n\n    public String encrypt(String plaintext) \n    throws NoSuchAlgorithmException, \n    NoSuchPaddingException, \n    InvalidKeyException, \n    UnsupportedEncodingException, \n    IllegalBlockSizeException, \n    BadPaddingException\n    {\n\n            Cipher cipher = Cipher.getInstance(TRANSFORMATION);\n            cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(SECRET.getBytes(CHARSET), ALGORITHME));\n            return new String(cipher.doFinal(plaintext.getBytes()), CHARSET);    \n    }\n\n    public String decrypt(String ciphertext) \n    throws NoSuchAlgorithmException, \n    NoSuchPaddingException, \n    InvalidKeyException, \n    UnsupportedEncodingException, \n    IllegalBlockSizeException, \n    BadPaddingException \n    {\n      Cipher cipher = Cipher.getInstance(TRANSFORMATION);\n      cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(SECRET.getBytes(), ALGORITHME));\n      return new String(cipher.doFinal(ciphertext.getBytes(CHARSET)), CHARSET);\n    }\n}\n", "idx": 2103}
{"project": "cipher", "commit_id": "Snippet30772674_12952.java", "target": 0, "func": " public String encrypt(String textToEncrypt) {\n    String encryptedpassword = null;\n    try {\n        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n        password1 = textToEncrypt.getBytes();\n        SecretKeySpec key = new SecretKeySpec(keyBytes, \"DES\");\n        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n        cipherpass = Cipher.getInstance(\"DES/CTR/NoPadding\", \"BC\");\n        cipherpass.init(Cipher.ENCRYPT_MODE, key, ivSpec);\n        cipherTextPassword = new byte[cipherpass.getOutputSize(password1.length)];\n        passLength = cipherpass.update(password1, 0, password1.length, cipherTextPassword, 0);\n        passLength += cipherpass.doFinal(cipherTextPassword, passLength);\n        encryptedpassword = new String(cipherTextPassword);\n    } catch (NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException | ShortBufferException | IllegalBlockSizeException | BadPaddingException ex) {\n\n    }\n    return encryptedpassword;\n}\n byte[] password1;\nbyte[] emailpass1;\nbyte[] keyBytes = \"12345678\".getBytes();\nbyte[] ivBytes = \"input123\".getBytes();\nSecretKeySpec key = new SecretKeySpec(keyBytes, \"DES\");\nIvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\nCipher cipherEmailpass, cipherpass;\nbyte[] cipherTextPassword;\nbyte[] cipherEmailTextPassword;\nint passLength, emailpassLength;\n", "idx": 2104}
{"project": "cipher", "commit_id": "Snippet15430373_38481.java", "target": 0, "func": "    byte[] key = new byte[16];\n    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n    byte[] data = \"hello world.....\".getBytes();\n    byte[] encrypted = cipher.doFinal(data);\n    System.out.println(\"Encrypted Array : \" + Arrays.toString(encrypted));\n", "idx": 2105}
{"project": "cipher", "commit_id": "Snippet33005676_15032.java", "target": 0, "func": "import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\n\npublic class Program {\n\n    public static void main(String[] args) {\n\n        try {\n            String key = \"secret1234\";// This is the key\n\n            FileInputStream fis = new FileInputStream(\"text.txt\");//text.txt is a text file with a short message                                        \n            FileOutputStream fos = new FileOutputStream(\"encryptedText.txt\");\n            encrypt(key, fis, fos);\n\n            FileInputStream fis2 = new FileInputStream(\"encryptedText.txt\");\n            FileOutputStream fos2 = new FileOutputStream(\"decryptedText.txt\");\n            decrypt(key, fis2, fos2);\n\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public static void encrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.ENCRYPT_MODE, is, os);\n    }\n\n    public static void decrypt(String key, InputStream is, OutputStream os) throws Throwable {\n        encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);\n    }\n\n    public static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n\n        DESKeySpec dks = new DESKeySpec(key.getBytes());\n        SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey desKey = skf.generateSecret(dks);\n        Cipher cipher = Cipher.getInstance(\"DES\");\n\n        if (mode == Cipher.ENCRYPT_MODE) {\n            cipher.init(Cipher.ENCRYPT_MODE, desKey);\n            CipherInputStream cis = new CipherInputStream(is, cipher);\n            doCopy(cis, os);\n        } else if (mode == Cipher.DECRYPT_MODE) {\n            cipher.init(Cipher.DECRYPT_MODE, desKey);\n            CipherOutputStream cos = new CipherOutputStream(os, cipher);\n            doCopy(is, cos);\n        }\n    }\n\n    public static void doCopy(InputStream is, OutputStream os) throws IOException {\n        byte[] bytes = new byte[64];\n        int numBytes;\n        while ((numBytes = is.read(bytes)) != -1) {\n            os.write(bytes, 0, numBytes);\n        }\n            os.flush();\n            os.close();\n            is.close();\n    }\n\n}\n", "idx": 2106}
{"project": "cipher", "commit_id": "Snippet24841795_7165.java", "target": 0, "func": "public static byte[] encrypt(String passphrase, byte[] data) throws Exception {\n\n    // Hash the ASCII-encoded passphrase with md5\n\n    byte[] keyData = passphrase.getBytes(Charset.forName(\"US-ASCII\"));\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    byte [] md5HashOfKey = md.digest(keyData);\n\n    // Need to use bouncycastle (spongycastle on Android) to get RC2\n\n    Security.addProvider(new BouncyCastleProvider());\n\n    Cipher rc2 = Cipher.getInstance(\"RC2/CBC/PKCS5PADDING\");\n\n    // Create an RC2 40-bit key from the 1st 5 bytes of the hash.\n\n    SecretKeySpec rc2KeySpec = new SecretKeySpec(md5HashOfKey, 0, 5, \"RC2\");\n    rc2.init(Cipher.ENCRYPT_MODE, rc2KeySpec);\n\n    byte [] cipher = rc2.doFinal(data);\n\n    return cipher;\n}\n", "idx": 2107}
{"project": "cipher", "commit_id": "Snippet14095115_37457.java", "target": 0, "func": "import java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\n/**\n * Usage:\n * <pre>\n * String crypto = AESEncrypt.encrypt(masterpassword, cleartext)\n * ...\n * String cleartext = AESEncrypt.decrypt(masterpassword, crypto)\n * &lt;/pre&gt;\n * @author ferenc.hechler\n */\npublic class AESEncrypt {\n\n    public static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n\n    private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2*buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n    private final static String HEX = \"0123456789ABCDEF\";\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n    }\n\n}\n", "idx": 2108}
{"project": "cipher", "commit_id": "Snippet20751030_3348.java", "target": 0, "func": "private static final String ALGORITHM = \"AES\";\n\n protected static String encrypt(String valueToEnc, byte[] keyValue) throws Exception {\n    Key key = generateKey(keyValue);\n    Cipher c = Cipher.getInstance(ALGORITHM);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encValue = c.doFinal(valueToEnc.getBytes());\n    String encryptedValue = new BASE64Encoder().encode(encValue);\n    return encryptedValue;\n}\n\nprotected static String decrypt(String encryptedValue, byte[] keyValue) throws Exception {\n    try\n    {\n        Key key = generateKey(keyValue);\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n    catch(Exception ex)\n    {\n        return \"\";\n    }\n}\n\nprivate static Key generateKey(byte[] keyValue) throws Exception {          \n    Key key = new SecretKeySpec(keyValue, ALGORITHM);\n    return key;\n}\n", "idx": 2109}
{"project": "cipher", "commit_id": "Snippet39137994_21015.java", "target": 0, "func": "    MessageDigest md = MessageDigest.getInstance(\"MD5\");\nseed_key = md.digest(new String(key).getBytes());\n\nif (seed_key.length == 16) {\n    byte[] tempkey = new byte[24];\n    System.arraycopy(seed_key, 0, tempkey, 0, 16);\n    System.arraycopy(seed_key, 0, tempkey, 16, 8);\n\n    seed_key = tempkey;\n}\nSecretKeySpec keySpec = new SecretKeySpec(seed_key, \"DESede\");\nnCipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\nbyte[] IVector = new byte[] { 27, 9, 45, 27, 0, 72, (byte) 171, 54 };\nIvParameterSpec iv = new IvParameterSpec(IVector);\nnCipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);\n\nbyte[] cipherbyte = nCipher.doFinal(data.getBytes());\nencodeTxt = new String(Base64.encodeBase64(cipherbyte));\n", "idx": 2110}
{"project": "cipher", "commit_id": "Snippet4405334_31104.java", "target": 0, "func": "    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n", "idx": 2111}
{"project": "cipher", "commit_id": "Snippet46628867_28732.java", "target": 0, "func": "package tripledes;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.security.*;\nimport java.security.spec.*;\nimport java.io.*;\n\npublic class TripleDES {\n\npublic static void main(String[] args) {\n\n    try {\n        try {\n            Cipher c = Cipher.getInstance(\"DESede\");\n        } catch (Exception e) {\n            System.err.println(\"Installing SunJCE provicer\");\n            Provider sunjce = new com.sun.crypto.provider.SunJCE();\n            Security.addProvider(sunjce);\n        }\n\n        File keyfile = new File(args[1]);\n\n        if (args[0].equals(\"-g\")) {\n            System.out.println(\"Generating key. This may take some time...\");\n            System.out.flush();\n            SecretKey key = generateKey();\n            writeKey(key, keyfile);\n            System.out.println(\"Done\");\n            System.out.println(\"Secret key written to \" + args[1] + \". Protect that file!\");\n        } else if (args[0].equals(\"-e\")) {\n            SecretKey key = readKey(keyfile);\n            encrypt(key, System.in, System.out);\n        } else if (args[0].equals(\"-d\")) {\n            SecretKey key = readKey(keyfile);\n            decrypt(key, System.in, System.out);\n        }\n    } catch (Exception e) {\n        System.err.println(e);\n        System.err.println(\"Usage: java \" + TripleDES.class.getName() + \"-d|-e|-g <keyfile>\");\n    }\n\n}\n\npublic static SecretKey generateKey() throws NoSuchAlgorithmException {\n    KeyGenerator keygen = KeyGenerator.getInstance(\"DESede\");\n    return keygen.generateKey();\n}\n\npublic static void writeKey(SecretKey key, File f) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\n    SecretKeyFactory keyfactory = SecretKeyFactory.getInstance(\"DESede\");\n    DESedeKeySpec keyspec = (DESedeKeySpec) keyfactory.getKeySpec(key, DESedeKeySpec.class);\n    byte[] rawkey = keyspec.getKey();\n\n    FileOutputStream out = new FileOutputStream(f);\n    out.write(rawkey);\n    out.close();\n}\n\npublic static SecretKey readKey(File f) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {\n    DataInputStream in = new DataInputStream(new FileInputStream(f));\n    byte[] rawkey = new byte[(int) f.length()];\n    in.readFully(rawkey);\n    in.close();\n\n    DESedeKeySpec keyspec = new DESedeKeySpec(rawkey);\n    SecretKeyFactory keyfactory = SecretKeyFactory.getInstance(\"DESede\");\n    SecretKey key = keyfactory.generateSecret(keyspec);\n    return key;\n}\n\npublic static void encrypt(SecretKey key, InputStream in, OutputStream out)\n        throws NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException, IOException {\n    Cipher cipher = Cipher.getInstance(\"DESede\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n\n    CipherOutputStream cos = new CipherOutputStream(out, cipher);\n\n    byte[] buffer = new byte[2048];\n    int bytesRead;\n    while ((bytesRead = in.read(buffer)) != -1) {\n        cos.write(buffer, 0, bytesRead);\n    }\n    cos.close();\n\n    java.util.Arrays.fill(buffer, (byte) 0);\n}\n\npublic static void decrypt(SecretKey key, InputStream in, OutputStream out)\n        throws NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException,\n        NoSuchPaddingException, BadPaddingException {\n    Cipher cipher = Cipher.getInstance(\"DESede\");\n    cipher.init(Cipher.DECRYPT_MODE, key);\n\n    byte[] buffer = new byte[2048];\n    int bytesRead;\n    while ((bytesRead = in.read(buffer)) != -1) {\n        out.write(cipher.update(buffer, 0, bytesRead));\n    }\n    out.write(cipher.doFinal());\n    out.flush();\n}\n\n}\n", "idx": 2112}
{"project": "cipher", "commit_id": "Snippet25546069_7876.java", "target": 0, "func": "private final static String ALGORITM = \"Blowfish\";\nprivate final static String KEY = \"2356a3a42ba5781f80a72dad3f90aeee8ba93c7637aaf218a8b8c18c\";\nprivate final static String PLAIN_TEXT = \"here is your text\";\n\npublic void run(View v) {\n\n    try {\n\n        byte[] encrypted = encrypt(KEY, PLAIN_TEXT);\n        Log.i(\"FOO\", \"Encrypted: \" + bytesToHex(encrypted));\n\n        String decrypted = decrypt(KEY, encrypted);\n        Log.i(\"FOO\", \"Decrypted: \" + decrypted);\n\n    } catch (GeneralSecurityException e) {\n        e.printStackTrace();\n    }\n}\n\nprivate byte[] encrypt(String key, String plainText) throws GeneralSecurityException {\n\n    SecretKey secret_key = new SecretKeySpec(key.getBytes(), ALGORITM);\n\n    Cipher cipher = Cipher.getInstance(ALGORITM);\n    cipher.init(Cipher.ENCRYPT_MODE, secret_key);\n\n    return cipher.doFinal(plainText.getBytes());\n}\n\nprivate String decrypt(String key, byte[] encryptedText) throws GeneralSecurityException {\n\n    SecretKey secret_key = new SecretKeySpec(key.getBytes(), ALGORITM);\n\n    Cipher cipher = Cipher.getInstance(ALGORITM);\n    cipher.init(Cipher.DECRYPT_MODE, secret_key);\n\n    byte[] decrypted = cipher.doFinal(encryptedText);\n\n    return new String(decrypted);\n}\n\npublic static String bytesToHex(byte[] data) {\n\n    if (data == null)\n        return null;\n\n    String str = \"\";\n\n    for (int i = 0; i < data.length; i++) {\n        if ((data[i] & 0xFF) < 16)\n            str = str + \"0\" + java.lang.Integer.toHexString(data[i] & 0xFF);\n        else\n            str = str + java.lang.Integer.toHexString(data[i] & 0xFF);\n    }\n\n    return str;\n\n}\n", "idx": 2113}
{"project": "cipher", "commit_id": "Snippet20837986_3456.java", "target": 0, "func": "  import java.io.BufferedReader;\n import java.io.File;\n     import java.io.FileInputStream;\n     import java.io.FileOutputStream;\n     import java.io.FilterWriter;\n     import java.io.InputStream;\n     import java.io.InputStreamReader;\n\n     import javax.crypto.Cipher;\n     import javax.crypto.CipherInputStream;\n     import javax.crypto.KeyGenerator;\n     import javax.crypto.SecretKey;\n\n import android.os.Bundle;\n import android.app.Activity;\n import android.view.Menu;\n import android.view.View;\n import android.view.View.OnClickListener;\n import android.widget.Button;\n import android.widget.EditText;\n import org.apache.commons.codec.binary.Base64;\n\n  public class EncryptionTest1 extends Activity {\nEditText output, outputDecrypt;\nEditText input;\nString plainData = \"\";\nString cipherText, decryptedText;\nKeyGenerator keyGen;\nSecretKey secretKey;\n\nCipher aesCipher;\nFileOutputStream fos;\n\nbyte[] byteDataToEncrypt, byteCipherText, byteDecryptedText;\nbyte[] xmlStream;\n\n@Override\n   protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_encryption_test1);\n    input = (EditText) findViewById(R.id.text_inputText1);\n    output = (EditText) findViewById(R.id.text_Result1);\n    outputDecrypt = (EditText) findViewById(R.id.text_decrypt_Result1);\n\n    Button btn_encrypt = (Button) findViewById(R.id.btn_encrpyt1);\n\n    btn_encrypt.setOnClickListener(new OnClickListener() {\n\n        @Override\n        public void onClick(View v) {\n\n            try {\n                plainData = input.getText().toString();\n                System.out.println(\"input==>>\" + plainData);\n                byte[] fileStreams = fileOpening(\"SaleReport.xml\");\n                byte[] DataEncrypt = encrypt(fileStreams);\n                String DataDecrypt = decrypt(DataEncrypt);\n\n            System.out.println(\"Decrypted Text:===>>\" + DataDecrypt);\n                outputDecrypt.setText(DataDecrypt);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n    });\n  }\n\nprivate byte[] fileOpening(String fileName) throws Exception {\n    InputStream is = getAssets().open(fileName);\n    int size = is.available();\n    xmlStream = new byte[size];\n    is.read(xmlStream);\n    System.out.println(\"xmlstream length==>>\" + xmlStream.length);\n    return xmlStream;\n}\n\nprivate byte[] encrypt(byte[] xmlStream) throws Exception {\n\n    keyGen = KeyGenerator.getInstance(\"AES\");\n    keyGen.init(128);\n    secretKey = keyGen.generateKey();\n    aesCipher = Cipher.getInstance(\"AES\");\n    aesCipher.init(Cipher.ENCRYPT_MODE, secretKey);\n    // byteDataToEncrypt = plainData.getBytes();\n\n    byteCipherText = aesCipher.doFinal(xmlStream);\n    cipherText = new String(new Base64().encodeBase64(byteCipherText));\n    output.setText(cipherText);\n    System.out.println(cipherText);\n\n    return byteCipherText;\n\n}\n\npublic String decrypt(byte[] DataEncrypt) throws Exception {\n    aesCipher.init(Cipher.DECRYPT_MODE, secretKey,\n    aesCipher.getParameters());\n    byteDecryptedText = aesCipher.doFinal(DataEncrypt);\n    decryptedText = new String(byteDecryptedText);\n    return decryptedText;\n  }\n\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    // Inflate the menu; this adds items to the action bar if it is present.\n    getMenuInflater().inflate(R.menu.encryption_test1, menu);\n    return true;\n}\n\n   }\n", "idx": 2114}
{"project": "cipher", "commit_id": "Snippet33187543_15258.java", "target": 0, "func": "// To encrypt\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, encryptAlgorithm);\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    return cipher.doFinal(clear);\n}\n\n// To decrypt\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, encryptAlgorithm);\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    return cipher.doFinal(encrypted);\n}\n\npublic static byte[] toByteArray(double value) {\n    byte[] bytes = new byte[8];\n    ByteBuffer.wrap(bytes).putDouble(value);\n    return bytes;\n}\n\npublic static byte[] toByteArray(double[] doubleArray){\n    int times = Double.SIZE / Byte.SIZE;\n    byte[] bytes = new byte[doubleArray.length * times];\n    for(int i=0;i<doubleArray.length;i++){\n        ByteBuffer.wrap(bytes, i*times, times).putDouble(doubleArray[i]);\n    }\n    return bytes;\n}\n\npublic static double[] toDouble(byte[] bytes) {\n    ByteBuffer bb = ByteBuffer.wrap(bytes);\n    DoubleBuffer db = bb.asDoubleBuffer();\n    double[] copy = new double[db.capacity()];\n    db.get(copy);\n    return copy;\n}\n\npublic static Bitmap applyEncryption(Bitmap image, int blockSize) throws Exception {\n    int xPos = 0, yPos = 0, a = 0, b = 0;\n\n    int _w = image.getWidth();\n    int _h = image.getHeight();\n\n    int reconstImage[][] = new int[_w][_h];\n    double dctArrayGray[][] = new double[8][8];\n\n    // It will convert image bitmap pixels to 2-D arrays\n    int[][] imageData = bitmapToArray(image);\n\n    for (int i = 0; i< (_w / blockSize); i++) {\n        xPos = i * blockSize;\n        for (int j = 0; j < (_h / blockSize); j++) {\n            yPos = j * blockSize;\n\n            for (a = 0; a < blockSize; a++) {\n                for (b = 0; b < blockSize; b++) {\n                    dctArrayGray[a][b] = (double) Color.red(imageData[xPos + a][yPos + b]);\n                }\n            }\n\n            DoubleDCT_2D dct = new DoubleDCT_2D(blockSize, blockSize);\n            dct.forward(dctArrayGray, true);\n\n\n\n            // Perform Encryption here....\n            byte[] chiperBytes = encrypt(\"ThisIsASecretKey\".getBytes(), toByteArray(dctArrayGray[0][0]));\n\n            // This is the problem\n            // it will overflow the minimum/maximum DCT values, since there are max/min\n            //     when performing DCT\n\n            // 1. Save the first array in coordinate (0,0)\n            dctArrayGray[0][0] = toDouble(chiperBytes)[0];\n\n            // 2. save the second array in coordinate (7,7)\n            dctArrayGray[7][7] = toDouble(chiperBytes)[1];\n\n            // This is the problem I think, it may have \"bits lost\", after I perform `Color.rgba()` on each block to get pixel values, after below looping. \n            // If I perform `dct.reverse` again, I will not get the same value as the `chiperBytes`\n            // since it will also be decrypted (see the decryption function below this function).\n            dct.inverse(dctArrayGray, true);\n\n            for (a = 0; a < blockSize; a++) {\n                for (b = 0; b < blockSize; b++) {\n                    int red = (int) Math.round(dctArrayGray[a][b]);\n                    reconstImage[xPos+a][yPos + b] = Color.argb(0xFF, red, red, red);\n                }\n            }\n        }\n    }\n\n    // It will convert back the 2-D array to Bitmap image\n    return arrayToBitmap(reconstImage);\n }\n\n\n // Decryption\npublic static Bitmap applyDecryption(Bitmap decryptedImage, int blockSize) throws Exception {\n    int xPos = 0, yPos = 0, a = 0, b = 0;\n\n    int _w = decryptedImage.getWidth();\n    int _h = decryptedImage.getHeight();\n\n    int reconstImage[][] = new int[_w][_h];\n    double dctArrayGray[][] = new double[8][8];\n\n    // It will convert image bitmap pixels to 2-D arrays\n    int[][] imageData = bitmapToArray(decryptedImage);\n\n    for (int i = 0; i< (_w / blockSize); i++) {\n        xPos = i * blockSize;\n        for (int j = 0; j < (_h / blockSize); j++) {\n            yPos = j * blockSize;\n\n            for (a = 0; a < blockSize; a++) {\n                for (b = 0; b < blockSize; b++) {\n                    dctArrayGray[a][b] = (double) Color.red(imageData[xPos + a][yPos + b]);\n                }\n            }\n\n            DoubleDCT_2D dct = new DoubleDCT_2D(blockSize, blockSize);\n            dct.forward(dctArrayGray, true);\n\n\n            // Perform Decryption here....\n\n            // Get back the double values\n            double[] encryptedDoubleValues = new double[2];\n            encryptedDoubleValues[0] = dctArrayGray[0][0];\n            encryptedDoubleValues[1] = dctArrayGray[7][7];\n\n            // I got chiper block not completed EXCEPTION since I got bits lost during saving the encryption\n            // block to image and after converting to RGBA from IDCT (Inverse DCT)\n            byte[] chiperBytes = decrypt(\"ThisIsASecretKey\".getBytes(), toByteArray(encryptedDoubleValues));\n\n            // 1. Save the first array in coordinate (0,0)\n            // This line below suppose to bring back the original value / almost the same with original\n            dctArrayGray[0][0] = toDouble2(chiperBytes);\n\n            // 2. save the second array in coordinate (7,7) and set it to zero\n            // (since AC values are expected to be loss and not necessary needed)\n            dctArrayGray[7][7] = 0;\n\n\n            dct.inverse(dctArrayGray, true);\n\n            for (a = 0; a < blockSize; a++) {\n                for (b = 0; b < blockSize; b++) {\n                    int red = (int) Math.round(dctArrayGray[a][b]);\n                    reconstImage[xPos+a][yPos + b] = Color.argb(0xFF, red, red, red);\n                }\n            }\n        }\n    }\n\n    // It will convert back the 2-D array to Bitmap image\n    return arrayToBitmap(reconstImage);\n}\n", "idx": 2115}
{"project": "cipher", "commit_id": "Snippet21075369_3668.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 2116}
{"project": "cipher", "commit_id": "Snippet10222284_34544.java", "target": 0, "func": "public class EncryptDecryptFileStreamWithDES {\n\nprivate static Cipher ecipher;\nprivate static Cipher dcipher;\n\n// 8-byte initialization vector\nprivate static byte[] iv = {\n    (byte)0xB2, (byte)0x12, (byte)0xD5, (byte)0xB2,\n    (byte)0x44, (byte)0x21, (byte)0xC3, (byte)0xC3\n};\n\npublic static void call() {\n\n    try {\n\n        SecretKey key = KeyGenerator.getInstance(\"DES\").generateKey();\n\n        AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);\n\n        ecipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n        dcipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        ecipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n        dcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n\n    //    encrypt(new FileInputStream(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\zipped\\\\4.zip\"), new FileOutputStream(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\zipped\\\\4.dat\"));\n      //  decrypt(new FileInputStream(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\zipped\\\\4.dat\"), new FileOutputStream(\"C:\\\\Users\\\\Admin\\\\Desktop\\\\zipped\\\\4new.zip\"));\n\n    //}\n    //catch (FileNotFoundException e) {\n        //System.out.println(\"File Not Found:\" + e.getMessage());\n        //return;\n    }\n    catch (InvalidAlgorithmParameterException e) {\n        System.out.println(\"Invalid Alogorithm Parameter:\" + e.getMessage());\n        return;\n    }\n    catch (NoSuchAlgorithmException e) {\n        System.out.println(\"No Such Algorithm:\" + e.getMessage());\n        return;\n    }\n    catch (NoSuchPaddingException e) {\n        System.out.println(\"No Such Padding:\" + e.getMessage());\n        return;\n    }\n    catch (InvalidKeyException e) {\n        System.out.println(\"Invalid Key:\" + e.getMessage());\n        return;\n    }\n\n}\n\npublic static void encrypt(InputStream is, OutputStream os) {\n\n    try {\n\n        call();\n\n        byte[] buf = new byte[1024];\n\n        // bytes at this stream are first encoded\n        os = new CipherOutputStream(os, ecipher);\n\n        // read in the clear text and write to out to encrypt\n        int numRead = 0;\n        while ((numRead = is.read(buf)) >= 0) {\n            os.write(buf, 0, numRead);\n        }\n\n        // close all streams\n        os.close();\n\n    }\n    catch (IOException e) {\n        System.out.println(\"I/O Error:\" + e.getMessage());\n    }\n\n}\n\npublic static void decrypt(InputStream is, OutputStream os) {\n\n    try {\n\n        call();\n\n        byte[] buf = new byte[1024];\n\n        // bytes read from stream will be decrypted\n        CipherInputStream cis = new CipherInputStream(is, dcipher);\n\n        // read in the decrypted bytes and write the clear text to out\n        int numRead = 0;\n        while ((numRead = cis.read(buf)) > 0) {\n            os.write(buf, 0, numRead);\n        }\n\n        // close all streams\n        cis.close();\n        is.close();\n        os.close();\n\n    }\n    catch (IOException e) {\n        System.out.println(\"I/O Error:\" + e.getMessage());\n    }\n\n}\n\n}\n", "idx": 2117}
{"project": "cipher", "commit_id": "Snippet10500512_34842.java", "target": 0, "func": "public static void main(String[] args) throws Exception {\n\n\n\n        String key=\"this is key\";\n\n        String message=\"This is just an example\";\n\n           KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n\n           kgen.init(128, new SecureRandom(Base64.decodeBase64(key)));\n\n           // Generate the secret key specs.\n           SecretKey skey = kgen.generateKey();\n\n           byte[] raw = skey.getEncoded();\n\n           SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n\n           Cipher cipher = Cipher.getInstance(\"AES\");\n\n           cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n           byte[] encrypted= cipher.doFinal(Base64.decodeBase64(message));\n\n           String encryptedString=Base64.encodeBase64String(encrypted);\n\n           cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n           byte[] original =\n             cipher.doFinal(Base64.decodeBase64(encryptedString));\n\n           System.out.println(Base64.encodeBase64String(original));\n\n\n    }\n", "idx": 2118}
{"project": "cipher", "commit_id": "Snippet28389630_10555.java", "target": 0, "func": "public static void main(String[] args) {\n    Scanner input = new Scanner(System.in);\n    try\n    {\n\n        //Prompt for String\n        System.out.print(\"Enter a sentence:\");\n        String in = input.next();\n\n        //Generate Key for encryption/decryption\n        KeyGenerator keygenerator = KeyGenerator.getInstance(\"DES\");\n        SecretKey myDesKey = keygenerator.generateKey();\n        Cipher desCipher;\n        desCipher = Cipher.getInstance(\"DES\");\n        desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);\n\n        //Cast the input into bytes \n        byte[] text = in.getBytes();\n        System.out.println(\"\" + new String(text));\n        // Encrypt the text\n        byte[] textEncrypted = desCipher.doFinal(text);\n        System.out.println(\"File Encryted : \" + textEncrypted);\n        // Initialize the same cipher for decryption\n        desCipher.init(Cipher.DECRYPT_MODE, myDesKey);\n        // Decrypt the text\n        byte[] textDecrypted = desCipher.doFinal(textEncrypted);\n        System.out.println(\"File Decryted : \" +  new String(textDecrypted));\n\n    }catch(NoSuchAlgorithmException e)\n    {\n        e.printStackTrace();\n    }catch(NoSuchPaddingException e)\n    {\n        e.printStackTrace();\n    }catch(InvalidKeyException e)\n    {\n        e.printStackTrace();\n    }catch(IllegalBlockSizeException e)\n    {\n        e.printStackTrace();\n    }catch(BadPaddingException e)\n    {\n        e.printStackTrace();\n    } \n\n}\n", "idx": 2119}
{"project": "cipher", "commit_id": "Snippet35195011_17122.java", "target": 0, "func": "private static synchronized Cipher getAesCipher() throws NoSuchAlgorithmException, NoSuchPaddingException{\n    if (_aesCipher == null) {\n        _aesCipher = Cipher.getInstance(\"AES\");\n    }\n\n    return _aesCipher;\n}\n", "idx": 2120}
{"project": "cipher", "commit_id": "Snippet38869230_20773.java", "target": 0, "func": "public String encryptWithAES(String value, String key, String encoding) throws NoSuchAlgorithmException, NoSuchPaddingException, DecoderException, UnsupportedEncodingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    byte[] keyBytes = Hex.decodeHex(key.toLowerCase().toCharArray());\n    byte[] dataToSend = value.getBytes(encoding);\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec k = new SecretKeySpec(keyBytes, \"AES\");\n    c.init(1, k);\n    byte[] encryptedData = c.doFinal(dataToSend);\n    return new String(Hex.encodeHex(encryptedData));\n}\n\npublic String decryptAES(String encrypted, String key, String encoding) throws NoSuchAlgorithmException, NoSuchPaddingException, DecoderException, UnsupportedEncodingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    byte[] keyBytes = Hex.decodeHex(key.toCharArray());\n    byte[] encryptedData = Hex.decodeHex(encrypted.toCharArray());\n    Cipher c = Cipher.getInstance(\"AES\");\n    SecretKeySpec k = new SecretKeySpec(keyBytes, \"AES\");\n    c.init(2, k);\n    byte[] dencryptedData = c.doFinal(encryptedData);\n    return new String(dencryptedData, encoding);\n}\n", "idx": 2121}
{"project": "cipher", "commit_id": "Snippet44743501_26831.java", "target": 0, "func": "public class AESHelper {\n\npublic static String encrypt(String seed, String cleartext) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\",\"Crypto\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2*buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\nprivate final static String HEX = \"0123456789ABCDEF\";\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n}\n", "idx": 2122}
{"project": "cipher", "commit_id": "Snippet8362262_33178.java", "target": 0, "func": "protected static byte[] encrypt(byte[] data, String base64encodedKey) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n    Cipher cipher;\n    try {\n        cipher = Cipher.getInstance(\"AES\");\n    } catch (NoSuchAlgorithmException ex) {\n        //log error\n    } catch (NoSuchPaddingException ex) {\n        //log error\n    }\n    SecretKey key = b64EncodedStringToSecretKey(base64encodedKey);\n    cipher.init(Cipher.ENCRYPT_MODE, key); //THIS IS WHERE IT FAILS\n    data = cipher.doFinal(data);\n    return data;\n}\nprivate static SecretKey b64EncodedStringToSecretKey(String base64encodedKey) {\n    SecretKey key = null;\n\n    try {\n        byte[] temp = Base64.decodeBase64(base64encodedKey.getBytes());\n        key = new SecretKeySpec(temp, SYMMETRIC_ALGORITHM);\n    } catch (Exception e) {\n        // Do nothing\n    }\n\n    return key;\n}\n", "idx": 2123}
{"project": "cipher", "commit_id": "Snippet30861393_13015.java", "target": 0, "func": "package tutorial;\n\nimport org.apache.thrift.TByteArrayOutputStream;\nimport org.apache.thrift.transport.TMemoryInputTransport;\nimport org.apache.thrift.transport.TTransport;\nimport org.apache.thrift.transport.TTransportException;\nimport org.apache.thrift.transport.TTransportFactory;\n\nimport javax.crypto.Cipher;\nimport java.security.Key;\n/**\n * TEncryptedFramedTransport is a buffered TTransport. It encrypts fully read message\n * with the \"AES/ECB/PKCS5Padding\" symmetric algorithm and send it, preceeding with a 4-byte frame size.\n */\npublic class TEncryptedFramedTransport extends TTransport {\n    public static final String ALGORITHM = \"AES/ECB/PKCS5Padding\";\n\n    private Cipher encryptingCipher;\n    private Cipher decryptingCipher;\n\n    protected static final int DEFAULT_MAX_LENGTH = 0x7FFFFFFF;\n\n    private int maxLength_;\n\n    private TTransport transport_ = null;\n\n    private final TByteArrayOutputStream writeBuffer_ = new TByteArrayOutputStream(1024);\n    private TMemoryInputTransport readBuffer_ = new TMemoryInputTransport(new byte[0]);\n\n    public static class Factory extends TTransportFactory {\n        private int maxLength_;\n        private Key secretKey_;\n\n        public Factory(Key secretKey) {\n            this(secretKey, DEFAULT_MAX_LENGTH);\n        }\n\n        public Factory(Key secretKey, int maxLength) {\n            maxLength_ = maxLength;\n            secretKey_ = secretKey;\n        }\n\n        @Override\n        public TTransport getTransport(TTransport base) {\n            return new TEncryptedFramedTransport(base, secretKey_, maxLength_);\n        }\n    }\n\n    /**\n     * Constructor wraps around another tranpsort\n     */\n    public TEncryptedFramedTransport(TTransport transport, Key secretKey, int maxLength) {\n        transport_ = transport;\n        maxLength_ = maxLength;\n\n        try {\n            encryptingCipher = Cipher.getInstance(ALGORITHM);\n            encryptingCipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n            decryptingCipher = Cipher.getInstance(ALGORITHM);\n            decryptingCipher.init(Cipher.DECRYPT_MODE, secretKey);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Unable to initialize ciphers.\");\n        }\n    }\n\n    public TEncryptedFramedTransport(TTransport transport, Key secretKey) {\n        this(transport, secretKey, DEFAULT_MAX_LENGTH);\n    }\n\n    public void open() throws TTransportException {\n        transport_.open();\n    }\n\n    public boolean isOpen() {\n        return transport_.isOpen();\n    }\n\n    public void close() {\n        transport_.close();\n    }\n\n    public int read(byte[] buf, int off, int len) throws TTransportException {\n        if (readBuffer_ != null) {\n            int got = readBuffer_.read(buf, off, len);\n            if (got > 0) {\n                return got;\n            }\n        }\n\n        // Read another frame of data\n        readFrame();\n\n        return readBuffer_.read(buf, off, len);\n    }\n\n    @Override\n    public byte[] getBuffer() {\n        return readBuffer_.getBuffer();\n    }\n\n    @Override\n    public int getBufferPosition() {\n        return readBuffer_.getBufferPosition();\n    }\n\n    @Override\n    public int getBytesRemainingInBuffer() {\n        return readBuffer_.getBytesRemainingInBuffer();\n    }\n\n    @Override\n    public void consumeBuffer(int len) {\n        readBuffer_.consumeBuffer(len);\n    }\n\n    private final byte[] i32buf = new byte[4];\n\n    private void readFrame() throws TTransportException {\n        transport_.readAll(i32buf, 0, 4);\n        int size = decodeFrameSize(i32buf);\n\n        if (size < 0) {\n            throw new TTransportException(\"Read a negative frame size (\" + size + \")!\");\n        }\n\n        if (size > maxLength_) {\n            throw new TTransportException(\"Frame size (\" + size + \") larger than max length (\" + maxLength_ + \")!\");\n        }\n\n        byte[] buff = new byte[size];\n        transport_.readAll(buff, 0, size);\n\n        try {\n            buff = decryptingCipher.doFinal(buff);\n        } catch (Exception e) {\n            throw new TTransportException(0, e);\n        }\n\n        readBuffer_.reset(buff);\n    }\n\n    public void write(byte[] buf, int off, int len) throws TTransportException {\n        writeBuffer_.write(buf, off, len);\n    }\n\n    @Override\n    public void flush() throws TTransportException {\n        byte[] buf = writeBuffer_.get();\n        int len = writeBuffer_.len();\n        writeBuffer_.reset();\n\n        try {\n            buf = encryptingCipher.doFinal(buf, 0, len);\n        } catch (Exception e) {\n            throw new TTransportException(0, e);\n        }\n\n        encodeFrameSize(buf.length, i32buf);\n        transport_.write(i32buf, 0, 4);\n        transport_.write(buf);\n        transport_.flush();\n    }\n\n    public static void encodeFrameSize(final int frameSize, final byte[] buf) {\n        buf[0] = (byte) (0xff & (frameSize >> 24));\n        buf[1] = (byte) (0xff & (frameSize >> 16));\n        buf[2] = (byte) (0xff & (frameSize >> 8));\n        buf[3] = (byte) (0xff & (frameSize));\n    }\n\n    public static int decodeFrameSize(final byte[] buf) {\n        return\n                ((buf[0] & 0xff) << 24) |\n                        ((buf[1] & 0xff) << 16) |\n                        ((buf[2] & 0xff) << 8) |\n                        ((buf[3] & 0xff));\n    }\n}\n", "idx": 2124}
{"project": "cipher", "commit_id": "Snippet21988552_4413.java", "target": 0, "func": "private Cipher encrypt(byte[] input)\n{\n    try\n    {\n        SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n        // encryption pass\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n        int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n        ctLength += cipher.doFinal(cipherText, ctLength);\n        FileOutputStream fs = new FileOutputStream(savedScoresFileName);\n        fs.write(cipherText);\n\n        return cipher;\n    }\n    catch (Exception e)\n    {\n        Log.e(\"encrtypt\", \"Exception\", e);\n    }\n\n    return null;\n}\n\nprivate String decrypt()\n{\n    try\n    {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\", \"BC\");\n\n        SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n        byte[] cipherText = new byte[32];\n\n        FileInputStream fl = new FileInputStream(savedScoresFileName);\n        fl.read(cipherText);\n\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] plainText = new byte[cipher.getOutputSize(32)];\n        int ptLength = cipher.update(cipherText, 0, 32, plainText, 0);\n        ptLength += cipher.doFinal(plainText, ptLength);\n\n        return new String(plainText).substring(0, ptLength);\n    }\n    catch (Exception e)\n    {\n        Log.e(\"decrypt\", \"Exception\", e);\n    }\n\n    return null;\n}\n", "idx": 2125}
{"project": "cipher", "commit_id": "Snippet15903096_38892.java", "target": 0, "func": "public class Test {\n        private static File file;\n        private static final byte[] STAT_KEY = { -1, -2, 3, 4, -5, -6, -7, 8 };\n        static {\n            file = new File(\"MyFile.txt\");\n        }\n\n        private static Cipher getCipher(int mode) throws InvalidKeyException, NoSuchAlgorithmException,\n                InvalidKeySpecException, NoSuchPaddingException {\n            DESKeySpec dks = new DESKeySpec(STAT_KEY);\n            SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n            SecretKey desKey = skf.generateSecret(dks);\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            cipher.init(mode, desKey);\n            return cipher;\n        }\n\n        private static void appendToFile(String item) throws Exception {\n            CipherOutputStream cos = null;\n            try {\n                cos = new CipherOutputStream(new FileOutputStream(file, true), getCipher(Cipher.ENCRYPT_MODE));\n                cos.write((item + String.format(\"%n\")).getBytes());\n            } finally {\n                cos.close();\n            }\n        }\n\n        private static void readFromFile() throws Exception {\n            CipherInputStream cis = null;\n            try {\n                cis = new CipherInputStream(new FileInputStream(file), getCipher(Cipher.DECRYPT_MODE));\n                int content;\n                while ((content = cis.read()) != -1) {\n                    System.out.print((char) content);\n                }\n            } finally {\n                cis.close();\n            }\n        }\n\n        public static void main(String[] args) throws Exception {\n            String[] items = { \"Hello\", \"dear\", \"world\" };\n            for (String item : items) {\n                appendToFile(item);\n            }\n            readFromFile();\n        }\n    }\n", "idx": 2126}
{"project": "cipher", "commit_id": "Snippet16384493_39329.java", "target": 0, "func": "        Cipher cipher = Cipher.getInstance(\"DES\");\n        cipher.init(Cipher.ENCRYPT_MODE, password);\n        String encrypedStr = base64encoder.encode(cipher.doFinal(cleartext));\n", "idx": 2127}
{"project": "cipher", "commit_id": "Snippet24807123_7131.java", "target": 0, "func": " byte key_bytes[] = \"12345678\".getBytes();\n SecretKeySpec _keyspec = new SecretKeySpec(key_bytes, \"DES\");\n Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); // Yes, I know I shouldn't use DES\n cipher.init(Cipher.ENCRYPT_MODE, _keyspec);\n\n byte[] utf8 = value.getBytes(\"UTF8\");\n byte[] enc = cipher.doFinal(utf8);   // Encrypt\n\n String encrypted = new String(new Base64().encode(enc));\n\n return URLEncoder.encode(encrypted, \"UTF-8\");\n", "idx": 2128}
{"project": "cipher", "commit_id": "Snippet36856719_18827.java", "target": 0, "func": "public class BillnoxCryptography {\n\nprivate static final String ALGORITHM = \"AES\";\n\npublic static String encrypt(String seed, String cleartext) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException,\n        IllegalBlockSizeException, BadPaddingException {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException,\n        IllegalBlockSizeException, BadPaddingException {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\nprivate static byte[] getRawKey(byte[] seed) {\n    seed = Arrays.copyOf(seed, 16);\n    SecretKey key = new SecretKeySpec(seed, ALGORITHM);\n    byte[] raw = key.getEncoded();\n    return raw;\n}\n\n// Since the credentials are already secured through shared prefs, we're\n// using this as a lightweight solution for obfuscation. Fixing SecureRandom\n// to provide cryptographically strong values is outside the scope of this\n// application. See\n// http://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html\n@SuppressLint(\"TrulyRandom\")\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n        IllegalBlockSizeException, BadPaddingException {\n    SecretKeySpec secretKeySpec = new SecretKeySpec(raw, ALGORITHM);\n    Cipher cipher = Cipher.getInstance(ALGORITHM);\n    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n        IllegalBlockSizeException, BadPaddingException {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, ALGORITHM);\n    Cipher cipher = Cipher.getInstance(ALGORITHM);\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length() / 2;\n    byte[] result = new byte[len];\n\n    for (int i = 0; i < len; i++) {\n        result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2), 16).byteValue();\n    }\n\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null) {\n        return \"\";\n    }\n\n    StringBuffer result = new StringBuffer(2 * buf.length);\n\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n\n    return result.toString();\n}\n\nprivate final static String HEX = \"0123456789ABCDEF\";\n\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n}\n}\n\n\npublic class BillNoxApp extends Application {\n\n\n\nprivate Activity localActivity;\npublic static Context mcontext;\nprivate DBHelper db = null;\n@Override\npublic void onConfigurationChanged(Configuration newConfig) {\n    super.onConfigurationChanged(newConfig);\n}\n\n\n\n\n@Override\npublic void onCreate() {\n    super.onCreate();\n    this.mcontext = this.getApplicationContext();\n    try {\n        BillNoxApp.mcontext =this;\n        db = new DBHelper(this);\n        db.open();\n    } catch (Exception e) {\n        Log.i(\"Exception\", e + \"\");\n    }\n\n}\npublic static Context getContext() {\n\n    return mcontext;\n}\n@Override\npublic void onLowMemory() {\n    super.onLowMemory();\n}\n\n@Override\npublic void onTerminate() {\n    db.close();\n    super.onTerminate();\n}\n\npublic DBHelper getDatabase() {\n    return db;\n}\n\n\npublic void setLocalActivity(Activity localActivity) {\n    this.localActivity = localActivity;\n}\n\npublic Activity getLocalActivity() {\n    return this.localActivity;\n}\n\n\n\n\n}\n", "idx": 2129}
{"project": "cipher", "commit_id": "Snippet30035313_12113.java", "target": 0, "func": "    private static String key = \"my8bcode\"; /*Key 8 bytes or 56 bit supported by algo OF*/\n    private static byte[] byteKey = key.getBytes(); \n\n    public static void main(String[] args) throws Exception {\n          String ss = \"yuyuvdzdsfdsfsdsdsdsdsa\";\n          byte[] plainText = ss.getBytes();//Conversion en byte\n\n        try {\n            SecretKeySpec secretKeySpec = new SecretKeySpec(byteKey, \"DES\");\n\n            Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); // Request the use of the DES algorithm, using the ECB mode (Electronic CodeBook) and style padding PKCS-5.\n            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n            byte[] myCipherText = cipher.doFinal(plainText);\n            System.out.println(new String(myCipherText, \"UTF8\"));\n            System.out.println(myCipherText.length);\n\n             System.out.println(\"\\nStart decryption\");\n             cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n             byte[] newPlainText = cipher.doFinal(myCipherText);\n             System.out.println(new String(newPlainText, \"UTF8\"));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n", "idx": 2130}
{"project": "cipher", "commit_id": "Snippet44787048_26884.java", "target": 0, "func": "public static String decrypt(String encryptStr){\n                    String decrypted = null;\n        try {\n\n            while(encryptStr != null){\n                try\n                {\n\n                    String key = \"Bar12345Bar12345\"; // 128 bit key\n                    // Create key and cipher\n                    Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n                    Cipher cipher = Cipher.getInstance(\"AES\");\n                    // encrypt the text\n                    cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n\n                    // for decryption\n                    byte[] bb = new byte[encryptStr.length()];\n                    for (int i=0; i<encryptStr.length(); i++) {\n                        bb[i] = (byte) encryptStr.charAt(i);\n                    }\n\n                    // decrypt the text\n                    cipher.init(Cipher.DECRYPT_MODE, aesKey);\n                    decrypted = new String(cipher.doFinal(bb));\n\n                }\n                catch(Exception e)\n                {\n                    e.printStackTrace();\n                }\n            }\n        } catch (IOException ex) {\n            Logger.getLogger(Snake_H.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return decrypted;\n    }\n", "idx": 2131}
{"project": "cipher", "commit_id": "Snippet42767457_24812.java", "target": 0, "func": "public static void standardExceptionHandling(Exception exc, Logger alog) {\n    StringWriter sw = new StringWriter();\n    PrintWriter pw = new PrintWriter(sw);\n    exc.printStackTrace(pw);\n    alog.info(sw.toString()); /* Line 292 */\n}\n\n/**\n * Method that takes a key/value set, converts it into a standard web parameter string\n * and then encrypts the string.\n *\n * @param values the key value set\n * @return the encrypted string\n *\n */\npublic static String encrypt(Map<String, String> values) {\n    StringBuilder unencrypted = new StringBuilder();\n    boolean first = true;\n    for (Map.Entry<String, String> value : values.entrySet()) {\n        if (first) {\n            first = false;\n        } else {\n            unencrypted.append(\"&\");\n        }\n        unencrypted.append(value.getKey())\n                .append(\"=\")\n                .append(value.getValue());\n    }\n\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        Key aesKey = new SecretKeySpec(AES_KEY.getBytes(), \"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n        byte[] encrypted = cipher.doFinal(unencrypted.toString().getBytes(\"UTF8\"));\n\n        String enc = new sun.misc.BASE64Encoder().encode(encrypted);\n        return enc;\n    } catch (Exception e) {\n        standardExceptionHandling(e, log);\n        return \"\";\n    }\n}\n\n/**\n * Method that takes an encrypted string containing a standard web parameter string\n * and converts it to a key/value set\n *\n * @param encrypted the encrypted string\n * @return the key value set\n */\npublic static Map<String, String> decrypt(String encrypted) {\n    String decrypted = \"\";\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        Key aesKey = new SecretKeySpec(AES_KEY.getBytes(), \"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, aesKey);\n        byte[] dec = new sun.misc.BASE64Decoder().decodeBuffer(encrypted);\n        decrypted = new String(cipher.doFinal(dec), \"UTF8\");\n    } catch (Exception e) {\n        standardExceptionHandling(e, log);\n    }\n\n    Map<String, String> values = new HashMap<String, String>();\n    for (String pair : decrypted.split(\"&\")) {\n        String[] split_pair = pair.split(\"=\");\n        String key, value;\n        if (split_pair.length == 1) {\n            key = split_pair[0];\n            value = \"\";\n        } else if (split_pair.length == 2) {\n            key = split_pair[0];\n            value = split_pair[1];\n        } else if (split_pair.length > 2) {\n            log.debug(\"Error when decrypting string, parameter found with more than 2 parts (\" + pair + \")\");\n            continue;\n        } else {\n            // We should never reach this, as it is impossible to split a string into a 0 length array.\n            log.debug(\"The impossible happened, we split a String into a 0 length array (\" + pair + \")\");\n            continue;\n        }\n        // This is only reach when key and value have been initialised thank to the continue statements when we hit\n        // an error state.\n        values.put(key, value);\n    }\n    return values;\n}\n", "idx": 2132}
{"project": "cipher", "commit_id": "Snippet46973733_28964.java", "target": 0, "func": "btn1.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                String plainTextPassword=editText1.getText().toString();\n                String encrypted = \"\";\n                try{\n                    DESKeySpec keySpec = new DESKeySpec(\"qwertykey\".getBytes());\n                    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n                    SecretKey key = keyFactory.generateSecret(keySpec);\n                    byte[] cleartext = plainTextPassword.getBytes();\n\n                    Cipher cipher = Cipher.getInstance(\"DES/CBC/ZeroBytePadding\", \"BC\");; // cipher is not thread safe\n                    cipher.init(Cipher.ENCRYPT_MODE, key);\n                    encrypted = Base64.encodeToString(cipher.doFinal(cleartext),Base64.DEFAULT);\n\n              } catch (NoSuchAlgorithmException e) {\n                    e.printStackTrace();\n                } catch (InvalidKeyException e) {\n                    e.printStackTrace();\n                } catch (NoSuchPaddingException e) {\n                    e.printStackTrace();\n                } catch (BadPaddingException e) {\n                    e.printStackTrace();\n                } catch (InvalidKeySpecException e) {\n                    e.printStackTrace();\n                } catch (IllegalBlockSizeException e) {\n                    e.printStackTrace();\n                } catch (NoSuchProviderException e) {\n                    e.printStackTrace();\n                }\n                textView4.setText(encrypted.toString());\n\n            }});\n", "idx": 2133}
{"project": "cipher", "commit_id": "Snippet15682840_38698.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.*;\n\n// encrypt and decrypt using the DES private key algorithm\npublic class PrivateExample {\n\n  public static void main (String[] args) throws Exception {\n    String text=new String();\n    text=\"This is an encryption test\";\n\n    byte[] plainText = text.getBytes(\"UTF8\");\n\n    // get a DES private key\n    System.out.println( \"\\nStart generating DES key\" );\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\n    keyGen.init(56);\n    Key key = keyGen.generateKey();\n    System.out.println( \"Finish generating DES key\" );\n    //\n    // get a DES cipher object and print the provider\n    Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    System.out.println( \"\\n\" + cipher.getProvider().getInfo() );\n    //\n   // encrypt using the key and the plaintext\n    System.out.println( \"\\nStart encryption\" );\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    byte[] cipherText = cipher.doFinal(plainText);\n    System.out.println( \"Finish encryption: \" );\n    System.out.println( new String(cipherText, \"UTF8\") );\n\n   //Now writing to an ouput file the cipherText\n   try{\n       FileOutputStream fs=new FileOutputStream(\"c:/test.txt\");\n      fs.write(cipherText);\n     }catch(Exception e){\n       e.printStackTrace();\n     }\n//How to proceed from here\n\n}\n}\n", "idx": 2134}
{"project": "cipher", "commit_id": "Snippet9497876_33967.java", "target": 0, "func": "public static void encryptVideos(File fil,File outfile)\n{ \n  try{\n    FileInputStream fis = new FileInputStream(fil);\n    //File outfile = new File(fil2);\n    int read;\n    if(!outfile.exists())\n      outfile.createNewFile();\n    FileOutputStream fos = new FileOutputStream(outfile);\n    FileInputStream encfis = new FileInputStream(outfile);\n    Cipher encipher = Cipher.getInstance(\"AES\");\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    //byte key[] = {0x00,0x32,0x22,0x11,0x00,0x00,0x00,0x00,0x00,0x23,0x00,0x00,0x00,0x00,0x00,0x00,0x00};\n    SecretKey skey = kgen.generateKey();\n    //Lgo\n    encipher.init(Cipher.ENCRYPT_MODE, skey);\n    CipherInputStream cis = new CipherInputStream(fis, encipher);\n    while((read = cis.read())!=-1)\n      {\n        fos.write(read);\n        fos.flush();\n      }   \n    fos.close();\n  }catch (Exception e) {\n    // TODO: handle exception\n  }\n}\n", "idx": 2135}
{"project": "cipher", "commit_id": "Snippet26417778_8565.java", "target": 0, "func": "import java.util.Arrays;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\n\npublic class Encoder {\n\n\n    public String encrypt(String message, String encryptionKey) throws Exception {  \n\n        // handle the key \n        SecretKey secretKey = null;\n        byte[] keyValueAsBytes  =  Arrays.copyOf(encryptionKey.getBytes(\"UTF-8\"), 24);\n\n        DESedeKeySpec keySpec = new DESedeKeySpec(keyValueAsBytes);\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DESede\"); \n        secretKey = keyFactory.generateSecret(keySpec);\n\n        // cipher \n        Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n        // encode\n        byte[] plainText = message.getBytes(\"UTF-8\");\n        byte[] encryptedText = cipher.doFinal(plainText);       \n        return Base64.encodeBase64String(encryptedText);\n    }\n\n\n    public static void main(String[] args) throws Exception{\n        String secretKey = \"bC5PEcLzvb+jY1FZWuP4pw50\";\n        String message = \"subscriptionId=0214288302000000207\";\n\n        Encoder enc = new Encoder();\n        System.out.println(enc.encrypt(message, secretKey));\n        //returns:hw6JzwdvmjwORzmitXcQ6vsmskK6vtdIObu+KYiGW4D4DRwNGHEX2w==\n    }\n}\n", "idx": 2136}
{"project": "cipher", "commit_id": "Snippet22109799_4534.java", "target": 0, "func": "   public static SecretKey generatedessecretkey(String password) throws InvalidKeyException, UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeySpecException\n      {\n        DESKeySpec keySpec = new DESKeySpec(password.getBytes(\"UTF8\"));\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey key = keyFactory.generateSecret(keySpec);\n        return key;\n      }\n\n    public static void encrypt(IOLogger log, byte[] datablock, String grouppw, ArrayList<byte[]> resp)\n      {\n        try\n          {\n            SecretKey ks = generatedessecretkey(grouppw);\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            cipher.init(Cipher.ENCRYPT_MODE, ks);\n            byte[] b = cipher.doFinal(datablock);\n            resp.clear();\n            resp.add(b);\n            return;\n          }\n        catch (Exception e)\n          {\n          }\n      }\n", "idx": 2137}
{"project": "cipher", "commit_id": "Snippet12607937_36363.java", "target": 0, "func": "public static String encrypt(String plaintext, String enctoken){\n\n    if(enctoken == null)\n        enctoken = \"sfdjf48mdfdf3054\";\n\n    String encrypted = null; \n\n    byte[] plaintextByte = EncodingUtils.getBytes(plaintext,\"UTF-8\");\n\n    byte[] hash = Connessione.md5(enctoken);\n\n    Log.i(\"ENCRYPT\", \"MD5: \"+Base64.encodeToString(hash, 0));\n\n    try {\n        Cipher cipher = Cipher.getInstance(\"DESEDE/ECB/PKCS5Padding\");\n        SecretKeySpec myKey = new SecretKeySpec(hash,\"DESede\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, myKey); \n\n        try {\n            byte[] encryptedPlainText = cipher.doFinal(plaintextByte);\n\n            encrypted = Base64.encodeToString(encryptedPlainText, 0);\n\n            Log.i(\"ENCRYPT\", \"Pwd encrypted: \"+encrypted);\n\n            return encrypted;\n\n        } catch (IllegalBlockSizeException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    } catch (NoSuchAlgorithmException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (NoSuchPaddingException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (InvalidKeyException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }       \n\n    return \"\";\n}\n", "idx": 2138}
{"project": "cipher", "commit_id": "Snippet17854613_950.java", "target": 0, "func": "public class Crypto implements java.io.Serializable\n{\n\npublic Crypto(String filename)\n{\n\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\nSecretKeySpec secretkey = new SecretKeySpec(key(), \"AES\");\ncipher.init(Cipher.ENCRYPT_MODE, secretkey);\nCipherInputStream cipt = new CipherInputStream(new FileInputStream(new File(filename)), cipher)\n\nByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n  ObjectOutputStream obj = null;\n\n           try\n           {\n                obj =   new ObjectOutputStream(baos);\n                obj.writeObject(cipt);\n                byte[] bv = baos.toByteArray();\n                System.out.println(bv);\n\n           }\n           catch(Exception b)\n           {\n           b.printStackTrace();\n           }\n           finally\n           {\n            obj.close();\n            baos.close();\n           }\n      }\n     }\n", "idx": 2139}
{"project": "cipher", "commit_id": "Snippet27530102_9650.java", "target": 0, "func": "public class StrongAES {\n            public void encrypt_Data(){\n\n        }\n\n    public String decrypt_Data(byte[] cipherText, int ctLength) throws InvalidAlgorithmParameterException{\n\n        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n\n        byte[] keyBytes = new byte[] {'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'};\n        SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n        System.out.println(\"byte length - \"+cipherText.length);\n        Cipher cipher;\n        byte[] plainText = null;\n        try {\n            cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\",\"BC\");\n            cipher.init(Cipher.DECRYPT_MODE, key);\n\n            //decrypt\n            plainText = new byte[cipher.getOutputSize(ctLength)];\n            System.out.println(\"cipherText - \"+cipherText+\" ctLength - \"+ctLength+\" plainText - \"+plainText);\n            int ptLength = cipher.update(cipherText, 0, ctLength, plainText,0);\n            System.out.println(\"ptLength - \"+ptLength);\n\n            ptLength += cipher.doFinal(plainText, ptLength);\n\n            return new String(plainText);\n", "idx": 2140}
{"project": "cipher", "commit_id": "Snippet18589000_1615.java", "target": 0, "func": "public class SymmetricCipherTest {\n    private static final String DEFAULT_ENCRYPTION_ALGORITHM = \"PBEWithMD5AndTripleDES\";\n    public final String ENCODE_INDICATOR_START = \"ENC(\";\n    public final String ENCODE_INDICATOR_END = \")\";\n    public final String APP_ENCRYPTION_KEY_FILE = \"application/.encryption.key\";\n    public static final int INTERATION = 15;\n    private static final byte[] SALT = { (byte) 0xd7, (byte) 0x73, (byte) 0x21, (byte) 0x8c, (byte) 0x7e, (byte) 0xc8, (byte) 0xee,\n            (byte) 0x99 };\n\n//  private static SymmetricCipherTest instance = initApplicaitonKey();\n    private static Base64 base64 = new Base64();\n    private static Cipher encrypter;\n    private static Cipher decrypter;\n//  private final Base64 base64 = new Base64();\n\n    private static final int KEYLENGTH = 256;\n    public final String ERROR_KEY_GENERATION = \"Encryption key generation failed. Please verify the logs.\";\n    public static void main(String[] args) throws InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {\n        String applicationKey=\"abcdefghijklmnopqrstu\";\n        String password=\"HellowWorld\";\n        try{\n            SecretKeyFactory kf = SecretKeyFactory.getInstance(DEFAULT_ENCRYPTION_ALGORITHM);\n            PBEKeySpec keySpec = new PBEKeySpec(applicationKey.toCharArray());\n            SecretKey key = kf.generateSecret(keySpec);\n            Cipher ciph = Cipher.getInstance(DEFAULT_ENCRYPTION_ALGORITHM);\n\n            PBEParameterSpec params = new PBEParameterSpec(SALT, INTERATION);\n            ciph.init(Cipher.ENCRYPT_MODE, key, params);\n            encrypter=ciph;\n            String encriptedString=new String(base64.encode(encrypter.doFinal(password.getBytes())));\n            System.out.println(encriptedString);\n\n            Cipher ciph1 = Cipher.getInstance(DEFAULT_ENCRYPTION_ALGORITHM);\n            ciph1.init(Cipher.DECRYPT_MODE, key, params);\n            decrypter=ciph;\n            String decryiptedString=new String(base64.decode(decrypter.doFinal(encriptedString.getBytes())));\n            System.out.println(decryiptedString);\n\n        }catch(NoSuchAlgorithmException e){\n            System.out.println(\"No such algorithm\");\n        }\n\n    }\n}\n", "idx": 2141}
{"project": "cipher", "commit_id": "Snippet15946705_38930.java", "target": 0, "func": "byte[] userPin3DESEncrypted = Base64.decodeBase64(userPin3DESBase64Encrypted.getBytes());\nbyte [] keyByte = \"jgd8f3m8ybjhwlGhr4hihbp0\".getBytes();\nSecretKeySpec secretKeySpec = new SecretKeySpec(keyByte, \"DESEDE\");\nCipher cipher = Cipher.getInstance(\"DESEDE/ECB/PKCS5Padding\");\ncipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\nString userPinDecrypted = new String(cipher.doFinal(userPin3DESEncrypted));\n", "idx": 2142}
{"project": "cipher", "commit_id": "Snippet16547808_39471.java", "target": 0, "func": "  FileInputStream fis = new FileInputStream(file);\n  FileOutputStream fos = new FileOutputStream(tmp_file);\n  String seed = \"password\";\n  byte[] rawKey = Utils.getRawKey(seed.getBytes());\n  SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\n  Cipher cipher = Cipher.getInstance(\"AES\");\n  cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n  int b;\n  byte[] data = new byte[4096];\n  while((b = fis.read(data)) != -1) {\n       fos.write(cipher.doFinal(data), 0, b);\n  }\n fos.flush();\n fos.close();\n fis.close();\n", "idx": 2143}
{"project": "cipher", "commit_id": "Snippet27129435_9295.java", "target": 0, "func": "String key = enc_key;\n\n// Create key and cipher\nKey aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES\");\n\n// decrypt the text\ncipher.init(Cipher.DECRYPT_MODE, aesKey);\nstrDecrypted = new String(cipher.doFinal(Base64.decodeBase64(encrypted.getBytes())));\n", "idx": 2144}
{"project": "cipher", "commit_id": "Snippet14261084_37600.java", "target": 0, "func": "...\n    //*********************************************\n    byte[] bArray = {23, 42, 55};\n    String stringRepresentation = bArray[0] + \",\" + bArray[1] + \",\" + bArray[2];\n    System.out.println(\"Plain Byte Array: \" + Arrays.toString(bArray));\n    String eba = EncryptByteArray(bArray);\n    System.out.println(\"Encrypted Byte Array: \"+eba);\n    byte[] deba = decryptByteArray(eba);\n    System.out.println(\"Decrypted Byte Array: \"+Arrays.toString(deba));\n    //*********************************************\n}\n\npublic static String EncryptByteArray(byte[] array) throws Exception\n{\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n    String encryptedString = Base64.encodeBase64String(cipher.doFinal(array));\n    return encryptedString;\n}\n\npublic static byte[] decryptByteArray(String strToDecrypt) throws Exception\n{\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n    SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\n    return cipher.doFinal(Base64.decodeBase64(strToDecrypt));\n}\n", "idx": 2145}
{"project": "cipher", "commit_id": "Snippet17952994_1017.java", "target": 0, "func": "package com.nsaers.encryptedsms;\n\nimport java.security.Key;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class SimpleProtector {\n    private static final String ALGORITHM = \"AES\";\n    private static final byte[] keyValue = new byte[] { 'T', 'h', 'i', 's',\n            'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };\n\n    public static String encrypt(String valueToEnc) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.ENCRYPT_MODE, key);\n        byte[] encValue = c.doFinal(valueToEnc.getBytes());\n        String encryptedValue = new BASE64Encoder().encode(encValue);\n        return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedValue) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGORITHM);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n\n    private static Key generateKey() throws Exception {\n        Key key = new SecretKeySpec(keyValue, ALGORITHM);\n        // SecretKeyFactory keyFactory =\n        // SecretKeyFactory.getInstance(ALGORITHM);\n        // key = keyFactory.generateSecret(new DESKeySpec(keyValue));\n        return key;\n    }\n}\n", "idx": 2146}
{"project": "cipher", "commit_id": "Snippet41517225_23445.java", "target": 0, "func": "@Test\npublic void testCipherGetInstanceShouldDefaultToECB() throws Exception {\n    // Arrange\n    final String PLAINTEXT = \"This is a plaintext message.\"\n    final SecretKey key = new SecretKeySpec(Hex.decodeHex(\"0123456789ABCDEFFEDCBA9876543210\" as char[]), \"AES\")\n\n    Cipher unspecified = Cipher.getInstance(\"AES\")\n    final Cipher EXPECTED_CIPHER = Cipher.getInstance(\"AES/ECB/PKCS5Padding\")\n\n    unspecified.init(Cipher.ENCRYPT_MODE, key)\n    EXPECTED_CIPHER.init(Cipher.DECRYPT_MODE, key)\n\n    // Act\n    byte[] cipherBytes = unspecified.doFinal(PLAINTEXT.getBytes(StandardCharsets.UTF_8))\n    logger.info(\"Cipher text: ${Hex.encodeHexString(cipherBytes)}\")\n\n    // Assert\n    byte[] recoveredBytes = EXPECTED_CIPHER.doFinal(cipherBytes)\n    String recovered = new String(recoveredBytes, StandardCharsets.UTF_8)\n    assert recovered == PLAINTEXT\n}\n", "idx": 2147}
{"project": "cipher", "commit_id": "Snippet38407929_19350.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"Blowfish\")", "idx": 2148}
{"project": "cipher", "commit_id": "Snippet40402357_22265.java", "target": 0, "func": "public static String decrypt(String encryptedText) {\n    try {\n        byte[] keyData = secret_key.getBytes();\n        SecretKeySpec secretKey = new SecretKeySpec(keyData, \"AES/ECB/PKCS7Padding\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n        byte[] cipherText = Base64.decode(encryptedText,Base64.NO_WRAP);\n        String decryptedString = new String(cipher.doFinal(cipherText),\"UTF-8\");\n\n        return decryptedString;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 2149}
{"project": "cipher", "commit_id": "Snippet30497256_12663.java", "target": 0, "func": "import javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\n\npublic class AES128Encryption {\n\n    private static final String ALGO = \"AES/ECB/PKCS5Padding\";\n    public static String decrypt(String encryptedData) throws Exception {\n        Cipher c = Cipher.getInstance(ALGO);\n        byte[] raw = \"************\".getBytes();\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        c.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n   }\n", "idx": 2150}
{"project": "cipher", "commit_id": "Snippet30432612_12590.java", "target": 0, "func": "class AES{\n\npublic static String encrypt(String seed, String cleartext) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext.getBytes());\n        return toHex(result);\n    }\n\n    public static String decrypt(String seed, String encrypted) throws Exception {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = toByte(encrypted);\n        byte[] result = decrypt(rawKey, enc);\n        return new String(result);\n    }\n  private static byte[] getRawKey(byte[] seed) throws Exception {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr); // 192 and 256 bits may not be available\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n\n    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n\n    public static String toHex(String txt) {\n        return toHex(txt.getBytes());\n    }\n    public static String fromHex(String hex) {\n        return new String(toByte(hex));\n    }\n\n    public static byte[] toByte(String hexString) {\n        int len = hexString.length()/2;\n        byte[] result = new byte[len];\n        for (int i = 0; i < len; i++)\n            result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n        return result;\n    }\n\n    public static String toHex(byte[] buf) {\n        if (buf == null)\n            return \"\";\n        StringBuffer result = new StringBuffer(2*buf.length);\n        for (int i = 0; i < buf.length; i++) {\n            appendHex(result, buf[i]);\n        }\n        return result.toString();\n    }\n    private final static String HEX = \"0123456789ABCDEF\";\n    private static void appendHex(StringBuffer sb, byte b) {\n        sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n    }\n}\n", "idx": 2151}
{"project": "cipher", "commit_id": "Snippet40019678_21958.java", "target": 0, "func": "    byte[] message = Base64.decodeBase64(encryptedText.getBytes(\"utf-8\"));\n    //byte[] message = encryptedText.getBytes(\"utf-8\");\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n    byte[] digestOfPassword = md.digest(secretKey.getBytes(\"utf-8\"));\n    byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n    SecretKey key = new SecretKeySpec(keyBytes, \"DESede\");\n\n    //Cipher decipher = Cipher.getInstance(\"DESede\");\n    Cipher decipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    decipher.init(Cipher.DECRYPT_MODE, key);\n\n    byte[] plainText = decipher.doFinal(message);\n\n    return new String(plainText, \"UTF-8\");\n}\n", "idx": 2152}
{"project": "cipher", "commit_id": "Snippet34384612_16353.java", "target": 0, "func": "DESKeySpec dks;\nboolean status=false;\ntry {\n    dks = new DESKeySpec(key.getBytes());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey desKey = skf.generateSecret(dks);\n    Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, desKey);\n        CipherOutputStream cos = new CipherOutputStream(os, cipher);\n        status=doCopy(is, cos);\n", "idx": 2153}
{"project": "cipher", "commit_id": "Snippet40799515_22682.java", "target": 0, "func": "public class EncriptionDecriptionUtils {\n    private static byte[] nrlmEncription = { 0x77, 0x71, 0x72, 0x76, 0x52,\n     0x76, 0x44, 0x56, 0x68, 0x66, 0x75, 0x68, 0x77, 0x4b, 0x6f, 0x7d };\n\n    public String decriptionOfData(String data) throws Exception {\n        SecretKeySpec skeySpec = new SecretKeySpec(nrlmEncription, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(Base64.decode(data,         Base64.DEFAULT));\n        return new String(decrypted);\n    }\n    public String encriptionOfData(String data) throws Exception {\n       Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n       final SecretKeySpec secretKey = new SecretKeySpec(nrlmEncription, \"AES\");\n       cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n       return Base64.encodeToString(cipher.doFinal(data.getBytes()), Base64.DEFAULT);\n    }\n}\n", "idx": 2154}
{"project": "cipher", "commit_id": "Snippet44638656_26747.java", "target": 0, "func": "import java.io.PrintStream;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.nio.charset.StandardCharsets;\n\npublic class test\n{\n\n    public static void main(String[] args)\n    throws Exception\n    {\n        //byte[] encryptionKey = \"Es6XYPkgCV75J95Y\".getBytes(StandardCharsets.UTF_8);\n        byte[] encryptionKey = \"Es6XYPkgCV75J95Y\".getBytes(StandardCharsets.ISO_8859_1);\n        //byte[] plainText = args[0].getBytes(StandardCharsets.UTF_8);\n        byte[] plainText = args[0].getBytes(StandardCharsets.ISO_8859_1);\n        MyCrypto aes = new MyCrypto(encryptionKey);\n        byte[] cipherText = aes.encrypt(plainText);\n        byte[] decryptedCipherText = aes.decrypt(cipherText);\n\n        System.out.println(new String(plainText));\n        System.out.println(new String(cipherText));\n        System.out.println(new String(decryptedCipherText));\n    }\n\n}\n\nclass MyCrypto\n{\n    private byte[] key;\n\n    private static final String ALGORITHM = \"AES\";\n\n    public MyCrypto(byte[] key)\n    {\n        this.key = key;\n    }\n\n    /**\n     * Encrypts the given plain text\n     *\n     * @param plainText The plain text to encrypt\n     */\n    public byte[] encrypt(byte[] plainText) throws Exception\n    {\n        SecretKeySpec secretKey = new SecretKeySpec(key, ALGORITHM);\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n        return cipher.doFinal(plainText);\n    }\n\n    /**\n     * Decrypts the given byte array\n     *\n     * @param cipherText The data to decrypt\n     */\n    public byte[] decrypt(byte[] cipherText) throws Exception\n    {\n        SecretKeySpec secretKey = new SecretKeySpec(key, ALGORITHM);\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n\n        return cipher.doFinal(cipherText);\n    }\n}\n", "idx": 2155}
{"project": "cipher", "commit_id": "Snippet46981519_28971.java", "target": 0, "func": "public class Encryption {\n\n    public static SecretKey generateKey() throws NoSuchAlgorithmException {\n        Security.addProvider(new com.sun.crypto.provider.SunJCE());\n        KeyGenerator keygen = KeyGenerator.getInstance(\"DESede\");\n        keygen.init(168);\n        SecretKey klucz = keygen.generateKey();\n\n        return klucz;\n    }\n\n    static byte[] encrypt(byte[] plainTextByte, SecretKey klucz)\n        throws Exception {\n        Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, klucz);\n        byte[] encryptedBytes = cipher.doFinal(plainTextByte);\n        return encryptedBytes;\n    }\n\n    static byte[] decrypt(byte[] encryptedBytes, SecretKey klucz)\n        throws Exception {\n        Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, klucz);\n        byte[] decryptedBytes = cipher.doFinal(encryptedBytes);\n        return decryptedBytes;\n    }\n}\n", "idx": 2156}
{"project": "cipher", "commit_id": "Snippet22279138_4676.java", "target": 0, "func": "private static void createKey(char[] password) throws Exception {\n    System.out.println(\"Generating a Blowfish key...\");\n\n    // Create a blowfish key\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(\"Blowfish\");\n    keyGenerator.init(256);\n    Key key = keyGenerator.generateKey();\n\n    System.out.println(\"Done generating the key.\");\n\n    // Now we need to create the file with the key,\n    // encrypting it with a password.\n    byte[] salt = new byte[8];\n    SecureRandom random = new SecureRandom();\n    random.nextBytes(salt);\n    PBEKeySpec pbeKeySpec = new PBEKeySpec(password);\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithSHAAndTwofish-CBC\");\n    SecretKey pbeKey = keyFactory.generateSecret(pbeKeySpec);\n    PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, ITERATIONS);\n\n    //Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES-CBC\");\n    //Cipher cipher = Cipher.getInstance(\"PBEWithSHAAndTwofish-CBC\");\n    Cipher cipher = Cipher.getInstance(\"PBEWithSHAAndTwofish-CBC\");\n\n    cipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n\n    // Encrypt the key\n    byte[] encryptedKeyBytes = cipher.doFinal(key.getEncoded());\n\n    // Write out the salt, and then the encrypted key bytes\n    FileOutputStream fos = new FileOutputStream(KEY_FILENAME);\n    fos.write(salt);\n    fos.write(encryptedKeyBytes);\n    fos.close();\n}\n", "idx": 2157}
{"project": "cipher", "commit_id": "Snippet8723979_33455.java", "target": 0, "func": "    input = new FileInputStream(file);\n    output = new FileOutputStream(newFile);\n\n    Cipher cipher = Cipher.getInstance(\"DES\");\n    cipher.init(Cipher.DECRYPT_MODE, mySecretKey);\n\n    byte[] buf = new byte[1024];\n\n    count = input.read(buf);\n\n    while (count >= 0) {\n        output.write(cipher.update(buf, 0, count)); // HERE I WAS DOING doFinal() method\n\n        //AND HERE WAS THE BadPaddingExceotion -- the first pass in the while structure\n\n        count = input.read(buf);\n    }\n    output.write(cipher.doFinal()); // AND I DID NOT HAD THIS LINE BEFORE\n    output.flush();\n", "idx": 2158}
{"project": "cipher", "commit_id": "Snippet21039119_3619.java", "target": 0, "func": "   package com.devleb.encdecapp;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Base64;\nimport android.util.Log;\nimport android.view.ContextMenu;\nimport android.view.ContextMenu.ContextMenuInfo;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.AdapterView;\nimport android.widget.AdapterView.OnItemSelectedListener;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Spinner;\n\npublic class MainActivity extends Activity implements OnClickListener {\n    // views for the layout\n    Spinner spin;\n    EditText edit_txt_pass;\n    static EditText edit_txt_enc_string;\n    EditText edit_txt_raw;\n    static EditText edit_txt_dec_string;\n    Button btn_encrypt, btn_decrypt, btn_clear;\n\n    static String cyphertext = \"\";\n    static String STReditTxtPass;\n    String strPaddingencryption;\n    static int iterations = 1000;\n    private static final String[] items = { \"Padding Key derivation\",\n            \"SHA1PRNG key derivation\", \"PBKDF2 key derivation\",\n            \"PKCS#12 key derivation\" };\n\n    private static final String TAG = MainActivity.class.getSimpleName();\n    private static final String[] Passwords = { \"password\", \"cryptography\",\n            \"cipher\", \"algorithm\", \"qwerty\" };\n\n    // mesage that will be binded with the key to generate the cypher text\n    private static String PlainText = \"this is the text that will be encrypted\";\n\n    // the list that will be used for the OnItemSelection method\n    private static final int PADDING_ENC_IDX = 0;\n    private static final int SHA1PRNG_ENC_IDX = 1;\n    private static final int PBKDF2_ENC_IDX = 2;\n    private static final int PKCS12_ENC_IDX = 3;\n\n    byte[] salt = { (byte) 0x11, (byte) 0x9B, (byte) 0xC6, (byte) 0xFE,\n            (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x77 };;\n\n    static byte[] ivBytes = {0,0,0,0,0,0,0,0};\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // creation of the spinner with setting Array adapter and\n        // DropDownresourse\n        spin = (Spinner) findViewById(R.id.spiner);\n        spin.setOnItemSelectedListener(new OnItemSelectedListener() {\n\n            @Override\n            public void onItemSelected(AdapterView<?> arg0, View arg1,\n                    int arg2, long arg3) {\n                // TODO Auto-generated method stub\n\n            }\n\n            @Override\n            public void onNothingSelected(AdapterView<?> arg0) {\n                // TODO Auto-generated method stub\n\n            }\n        });\n\n        ArrayAdapter<String> aa = new ArrayAdapter<String>(this,\n                android.R.layout.simple_spinner_item, items);\n        aa.setDropDownViewResource(android.R.layout.simple_dropdown_item_1line);\n        spin.setAdapter(aa);\n        // end of the spinner code\n\n        edit_txt_pass = (EditText) findViewById(R.id.editTxtPass);\n        edit_txt_enc_string = (EditText) findViewById(R.id.editTxtEncString);\n        edit_txt_raw = (EditText) findViewById(R.id.editTxtRawKey);\n        edit_txt_dec_string = (EditText) findViewById(R.id.editTxtDecString);\n\n        btn_encrypt = (Button) findViewById(R.id.btnEncrypt);\n        btn_encrypt.setOnClickListener(this);\n\n        btn_decrypt = (Button) findViewById(R.id.btnDecrypt);\n        btn_decrypt.setOnClickListener(this);\n\n        btn_clear = (Button) findViewById(R.id.btnClear);\n        btn_clear.setOnClickListener(this);\n\n        // / for registering the editText to the Context Menu\n        registerForContextMenu(edit_txt_pass);\n\n    }\n\n    // for the ciphering of the plainText using the base 64\n    public static String toBase64(byte[] bytes) {\n        return Base64.encodeToString(bytes, Base64.NO_WRAP);\n    }\n\n    public static byte[] fromBase64(byte[] bytes) {\n        // return Base64.encodeToString(bytes, Base64.NO_WRAP);\n        return Base64.decode(bytes, Base64.DEFAULT);\n    }\n\n    @Override\n    public void onCreateContextMenu(ContextMenu menu, View v,\n            ContextMenuInfo menuInfo) {\n        // TODO Auto-generated method stub\n\n        int groupId = 0;\n        menu.add(groupId, 1, 1, \"password\");\n        menu.add(groupId, 2, 2, \"cryptography\");\n        menu.add(groupId, 3, 3, \"cipher\");\n        menu.add(groupId, 4, 4, \"algorithm\");\n        menu.add(groupId, 5, 5, \"qwerty\");\n\n        super.onCreateContextMenu(menu, v, menuInfo);\n    }\n\n    @Override\n    public boolean onContextItemSelected(MenuItem item) {\n        // TODO Auto-generated method stub\n\n        return getText(item);\n\n        // return super.onContextItemSelected(item);\n    }\n\n    private boolean getText(MenuItem item) {\n        // TODO Auto-generated method stub\n\n        int menuItemId = item.getItemId();\n\n        if (menuItemId == 1) {\n            edit_txt_pass.setText(\"password\");\n        }\n        if (menuItemId == 2) {\n            edit_txt_pass.setText(\"cryptography\");\n        }\n        if (menuItemId == 3) {\n            edit_txt_pass.setText(\"cipher\");\n        }\n        if (menuItemId == 4) {\n            edit_txt_pass.setText(\"algorithm\");\n        }\n        if (menuItemId == 5) {\n            edit_txt_pass.setText(\"qwerty\");\n        }\n        STReditTxtPass = edit_txt_pass.getText().toString();\n\n        Log.w(\"the String of the Password text\", STReditTxtPass);\n        return false;\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.main, menu);\n        return true;\n    }\n\n    @Override\n    public void onClick(View v) {\n        // TODO Auto-generated method stub\n\n        if (v == btn_encrypt) {\n\n            encryptPadding(PlainText, salt);\n        } else if (v == btn_clear) {\n            edit_txt_enc_string.setText(\"\");\n        } else if (v == btn_decrypt) {\n            decryptPadding(cyphertext, salt);\n        }\n    }\n\n    public static String encryptPadding(String plaintext, byte[] salt) {\n        try {\n            KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n            Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n            SecretKey SKey = kg.generateKey();\n\n            cipher.init(Cipher.ENCRYPT_MODE, SKey);\n\n            byte[] cipherText = cipher.doFinal(PlainText.getBytes(\"UTF-8\"));\n\n            cyphertext = String.format(\"%s%s%s\", toBase64(salt), \"]\",\n                    toBase64(cipherText));\n            edit_txt_enc_string.setText(cyphertext);\n            return cyphertext;\n        } catch (GeneralSecurityException e) {\n            throw new RuntimeException(e);\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static String decryptPadding(String ctext, byte[] salt) {\n        try {\n            KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n            Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n            SecretKey SKey = kg.generateKey();\n\n            IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n            cipher.init(Cipher.DECRYPT_MODE, SKey, ivSpec);\n\n            byte[] plaintxt = cipher.doFinal(cyphertext.getBytes(\"UTF-8\"));\n\n            PlainText = String.format(\"%s%s%s\", fromBase64(salt), \"]\",\n                    fromBase64(plaintxt));\n            edit_txt_dec_string.setText(PlainText);\n            return PlainText;\n        } catch (GeneralSecurityException e) {\n            throw new RuntimeException(e);\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n", "idx": 2159}
{"project": "cipher", "commit_id": "Snippet42685426_24717.java", "target": 0, "func": "final Cipher cipher = Cipher.getInstance(\"AES\");\n", "idx": 2160}
{"project": "cipher", "commit_id": "Snippet23821923_6129.java", "target": 0, "func": "import java.security.spec.AlgorithmParameterSpec;\nimport java.security.spec.KeySpec;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\npublic class Main\n{\n\n    private static class DesEncrypter\n    {\n        /** algorithm used for encrpytion and decryption */\n        private static final String ALGORITHM = \"PBEWithMD5AndDES\";\n\n        /** 8-byte Salt. */\n        private static final byte[] SALT = { <You salt> };\n\n        /** Iteration count. */\n        private static final int ITERATION_COUNT = 19;\n\n        /** Stores parameter specification. */\n        private static final AlgorithmParameterSpec PARAM_SPEC = new PBEParameterSpec(\n            SALT, ITERATION_COUNT);\n\n        /** Key specification. */\n        private final KeySpec keySpec;\n\n        /** Secret key. */\n        private final SecretKey key;\n\n        public DesEncrypter(final String passPhrase)\n        {\n            // Create the key\n            keySpec = new PBEKeySpec(passPhrase.toCharArray(), SALT, ITERATION_COUNT);\n            try\n            {\n                key = SecretKeyFactory.getInstance(ALGORITHM).generateSecret(keySpec);\n            }\n            catch (final Exception ex)\n            {\n                throw new RuntimeException(\"Could not create DesEncrypter: \" + ex.getMessage(), ex);\n            }\n        }\n\n        public final String encrypt(final String message)\n        {\n            try\n            {\n                // Create cipher instance\n                final Cipher cipher = Cipher.getInstance(ALGORITHM);\n                // Initialize cipher\n                cipher.init(Cipher.ENCRYPT_MODE, key, PARAM_SPEC);\n                // Encode string\n                final byte[] enc = cipher.doFinal(message.getBytes(\"UTF8\"));\n                // Encode bytes to base64 to get a string\n                return Base64.encodeBase64String(enc);\n            }\n            catch (final Exception ex)\n            {\n                throw new RuntimeException(\"Error encrypting message.\", ex);\n            }\n        }\n    }\n\n    public static void main(final String[] args)\n    {\n        if (args.length == 2)\n        {\n            System.out.println(\"!!\" + new DesEncrypter(args[0]).encrypt(args[1]));\n        }\n    }\n}\n", "idx": 2161}
{"project": "cipher", "commit_id": "Snippet11311247_35460.java", "target": 0, "func": "Security.addProvider(new BouncyCastleProvider())\nbyte[] bKey = Hex.decode(\"C67DDB0CE47D27FAF6F32ECA5C99E8AF\")\nbyte[] bMsg = Hex.decode(\"ff00\")\n\nbyte[] keyBytes = Arrays.copyOf(sKey.bytes, 24)\nint j = 0, k = 16\nwhile (j < 8) {\n    keyBytes[k++] = keyBytes[j++]\n}\n\nSecretKey key3 = new SecretKeySpec(keyBytes, \"DESede\")\nIvParameterSpec iv3 = new IvParameterSpec(new byte[8])\nCipher cipher3 = Cipher.getInstance(\"DESede/CBC/ZeroBytePadding\")\ncipher3.init(Cipher.ENCRYPT_MODE, key3, iv3)\n\nbyte[] bMac = cipher3.doFinal(bMsg)\nprintln new String(Hex.encode(bMac))\n", "idx": 2162}
{"project": "cipher", "commit_id": "Snippet18921263_1831.java", "target": 0, "func": "public static String encrypt(String input, String key){\n    byte[] crypted = null;\n    try{\n        SecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, skey);\n        crypted = cipher.doFinal(input.getBytes());\n    } catch(Exception e) {\n        //Log.e(\"ERR\", e.toString());\n    }\n    return new String(Base64.encode(crypted, Base64.DEFAULT));\n}\n\npublic static String decrypt(String input, String key){\n    byte[] output = null;\n    try{\n        SecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, skey);\n        output = cipher.doFinal(Base64.decode(input, Base64.DEFAULT));\n    } catch(Exception e) {\n    //Log.e(\"ERR\", e.toString());\n    }\n    return new String(output);\n}\n", "idx": 2163}
{"project": "cipher", "commit_id": "Snippet29129256_11191.java", "target": 0, "func": "import java.security.*;\nimport java.util.Scanner;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.IvParameterSpec;\n\npublic class MainApp\n{\n    static Scanner sc = new Scanner(System.in);\n    public KeyGenerator keygen;\n    public SecretKey secKey;\n    Cipher c;\n\n    static SecureRandom rnd = new SecureRandom();\n    static IvParameterSpec iv = new IvParameterSpec(rnd.generateSeed(8));\n\n    public static void main(String[] args) throws Exception\n    {\n        MainApp theApp = new MainApp();\n        theApp.start();\n    }\n\n    public void start() throws Exception\n    {\n        keygen = KeyGenerator.getInstance(\"DES\");\n        secKey = keygen.generateKey();\n\n        System.out.println(secKey);\n\n        boolean success = false;\n        boolean success2 = false;\n        boolean exit = false;\n        int type = 0;\n\n        do\n        {\n            do \n            {\n                System.out.println(\"Weclome to the DES Encryption/Decription zone!\");\n                System.out.println(\"What form of mode do you wish to use? [E]CB or [C]BC? Type [Q]uit to exit\");\n                String input = sc.nextLine();\n\n                    if(input.equalsIgnoreCase(\"e\")){\n\n                        type = 1;\n\n                        do{\n                            System.out.println(\"Do you wish to use padding? [Y]es or [N]o?\");\n                            input = sc.nextLine();\n\n                            if(input.equalsIgnoreCase(\"y\")){\n                                c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n                                success = true;\n                                success2 = true;\n                            }\n                            else if(input.equalsIgnoreCase(\"n\")){\n                                c = Cipher.getInstance(\"DES/ECB/NoPadding\");\n                                success = true;\n                                success2 = true;\n                            }\n                            else{\n                                System.out.println(\"Error - please enter a valid input\");\n                                success = false;\n                                success2 = false;\n                            }\n                        }while(!success2);\n\n                    }\n                    else if(input.equalsIgnoreCase(\"c\")){\n\n                        type = 2;\n\n                        do{\n                            System.out.println(\"Do you wish to use padding? [Y]es or [N]o?\");\n                            input = sc.nextLine();\n\n                            if(input.equalsIgnoreCase(\"y\")){\n                                c = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n                                success = true;\n                                success2 = true;\n                            }\n                            else if(input.equalsIgnoreCase(\"n\")){\n                                c = Cipher.getInstance(\"DES/CBC/NoPadding\");\n                                success = true;\n                                success2 = true;\n                            }\n                            else{\n                                System.out.println(\"Error - please enter a valid input\");\n                                success = false;\n                                success2 = false;\n                            }\n                        }while(!success2);\n                    }\n\n                    else if(input.equalsIgnoreCase(\"q\")){\n                        System.out.println(\"Thanks for using me!\");\n                        System.exit(0);\n                        success = true;\n                        exit = true;\n                    }\n                    else{\n                        System.out.println(\"Error - please enter a valid input\");\n                        success = false;\n                    }\n            }while(!success);\n\n\n            System.out.println(\"Input what you wish to encrypt\");\n            String input = sc.nextLine();\n\n            byte[] text = input.getBytes();\n\n            System.out.println(type);\n\n            System.out.println(\"--------------------------------------------\");\n\n            System.out.println(\"Text : \" + new String(text));\n\n            byte[] textEncrypted = encrypt(text, c, type);\n\n            System.out.println(\"Text Encrypted : \" + textEncrypted);\n\n            byte[] textDecrypted = decrypt(textEncrypted, c, type);\n\n            System.out.println(\"Text Decrypted : \" + new String(textDecrypted));\n\n            System.out.println(\"--------------------------------------------\");\n\n        }while(!exit);\n    }\n\n    public byte[] encrypt(byte[] b, Cipher c, int type) throws Exception\n    {\n        if(type == 1)\n        {\n        c.init(Cipher.ENCRYPT_MODE, secKey);\n        }\n        else if(type == 2)\n        {   \n            c.init(Cipher.ENCRYPT_MODE, secKey, iv);\n        }\n        byte[] encryptedText = null;\n        try {\n            encryptedText = c.doFinal(b);\n        } catch (IllegalBlockSizeException e) {\n            System.out.println(\"ERROR - If you have selected to not automatically pad your plaintext it must be a mutiple of eight bytes to be accepted. Exiting program\");\n            System.exit(0);\n        } \n\n        return encryptedText;\n    }\n\n    public byte[] decrypt(byte[] b, Cipher c, int type) throws Exception\n    {\n        if(type == 1)\n        {\n        c.init(Cipher.DECRYPT_MODE, secKey);\n        }\n        else if(type == 2)\n        {   \n            c.init(Cipher.DECRYPT_MODE, secKey, iv);\n        }\n\n        byte[] decryptedText = c.doFinal(b);\n\n        return decryptedText;\n\n    }\n\n\n}\n", "idx": 2164}
{"project": "cipher", "commit_id": "Snippet18319769_1367.java", "target": 0, "func": "public class CryptClass\n{\n\n    public byte[] encrypt(String seed, byte[] cleartext) throws Exception\n    {\n\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] result = encrypt(rawKey, cleartext);\n        //  return toHex(result);\n        return result;\n    }\n\n    public byte[] decrypt(String seed, byte[] encrypted) throws Exception\n    {\n        byte[] rawKey = getRawKey(seed.getBytes());\n        byte[] enc = encrypted;\n        byte[] result = decrypt(rawKey, enc);\n\n        return result;\n    }\n\n    //done\n    private byte[] getRawKey(byte[] seed) throws Exception\n    {\n        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n        sr.setSeed(seed);\n        kgen.init(128, sr);\n        SecretKey skey = kgen.generateKey();\n        byte[] raw = skey.getEncoded();\n        return raw;\n    }\n\n    private byte[] encrypt(byte[] raw, byte[] clear) throws Exception\n    {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n        byte[] encrypted = cipher.doFinal(clear);\n        return encrypted;\n    }\n\n    private byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception\n    {\n        SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n        byte[] decrypted = cipher.doFinal(encrypted);\n        return decrypted;\n    }\n}\n", "idx": 2165}
{"project": "cipher", "commit_id": "Snippet16369787_39315.java", "target": 0, "func": "Cipher dcipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\",\"SunJCE\");\n", "idx": 2166}
{"project": "cipher", "commit_id": "Snippet13827466_37297.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.*;\n//\n// encrypt and decrypt using the DES private key algorithm\npublic class PrivateExample {\n\n  public static void main (String[] args) throws Exception {\n  //\n  // check args and get plaintext\n    if (args.length !=1) {\n      System.err.println(\"Usage: java PrivateExample text\");\n      System.exit(1);\n    }\n  byte[] plainText = args[0].getBytes(\"UTF8\");\n  //\n  // get a DES private key\n  System.out.println( \"\\nStart generating DES key\" );\n  KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\n  keyGen.init(56);\n  Key key = keyGen.generateKey();\n  System.out.println( \"Finish generating DES key\" );\n//\n// get a DES cipher object and print the provider\nCipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\nSystem.out.println( \"\\n\" + cipher.getProvider().getInfo() );\n//\n// encrypt using the key and the plaintext\nSystem.out.println( \"\\nStart encryption\" );\ncipher.init(Cipher.ENCRYPT_MODE, key);\nbyte[] cipherText = cipher.doFinal(plainText);\nSystem.out.println( \"Finish encryption: \" );\nSystem.out.println( new String(cipherText, \"UTF8\") );\n\n//\n// decrypt the ciphertext using the same key\nSystem.out.println( \"\\nStart decryption\" );\ncipher.init(Cipher.DECRYPT_MODE, key);\nbyte[] newPlainText = cipher.doFinal(cipherText);\nSystem.out.println( \"Finish decryption: \" );\n\nSystem.out.println( new String(newPlainText, \"UTF8\") );\n}\n}\n", "idx": 2167}
{"project": "cipher", "commit_id": "Snippet36202917_18061.java", "target": 0, "func": " public static byte[] encrypt(byte[] plainText, byte[] key)  {\ntry {\n  byte[] passwordKey128 = Arrays.copyOfRange(key, 0, 16);\n  SecretKeySpec secretKey = new SecretKeySpec(passwordKey128, \"AES\");\n  Cipher cipher = Cipher.getInstance(\"AES\");\n  cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n  byte[] cipherText = cipher.doFinal(plainText);\n  // String encryptedString = Base64.getEncoder().encodeToString(cipherText);\n  return cipherText;\n", "idx": 2168}
{"project": "cipher", "commit_id": "Snippet32411759_14498.java", "target": 0, "func": "        try {\n        String dataAlgorithm =  JCEMapper.translateURItoJCEID(tmp);\n        decryptor = Cipher.getInstance(dataAlgorithm);\n\n        //decryptor = Cipher.getInstance(\"DESede/CBC/ISO10126Padding\");\n\n        int ivLen = decryptor.getBlockSize();\n        byte[] ivBytes = null; // = new byte[ivLen];\n\n        if (dataAlgorithm.matches(\".*[gG][cC][mM].*$\")) { // TK 03/09/2015 - probably needs more places for decrypting body stuff\n          ivLen = 12; // 12 for GCM - also see wss4j-2.1.2/ws-security-common/src/main/java/org/apache/wss4j/common/util/AttachmentUtils.java\n          ivBytes = new byte[ivLen];\n          System.arraycopy(cipherInput, 0, ivBytes, 0, ivLen);\n          GCMParameterSpec iv = new GCMParameterSpec(16 * Byte.SIZE, ivBytes);\n          decryptor.init(Cipher.DECRYPT_MODE, symmetricKey, iv);\n        }\n        else {\n          ivBytes = new byte[ivLen];\n          System.arraycopy(cipherInput, 0, ivBytes, 0, ivLen);\n          IvParameterSpec iv = new IvParameterSpec(ivBytes);\n          decryptor.init(Cipher.DECRYPT_MODE, symmetricKey, iv);\n        }\n\n        cipherOutput = decryptor.doFinal(cipherInput, ivLen, cipherInput.length-ivLen);\n    } catch (Exception e) {\n        log.log(Level.SEVERE, \"WSS1232.failedto.decrypt.attachment\", e);\n        throw new XWSSecurityException(e);\n    }\n", "idx": 2169}
{"project": "cipher", "commit_id": "Snippet6119359_31963.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"BlowFish/ECB/PKCS5Padding\");\n\nbyte[] keyBytes = Encoding.ASCII.GetBytes(key);\n        string keyHex = Hex.ToHexString(keyBytes); //4b334c33315551354f38325059344739\n\n        string parameters = \"{\\\"userId\\\":\\\"6440870\\\"}\";\n        byte[] parametersByte = Encoding.ASCII.GetBytes(parameters);\n        string parametersHex = Hex.ToHexString(parametersByte); //7b22757365724964223a2236343430383730227d\n\n        BlowFish bl = new BlowFish(keyHex);\n        byte[] outputEncryptedByte = bl.Encrypt_ECB(parametersByte);\n        string outputEncrypted = Encoding.ASCII.GetString(outputEncryptedByte); //7lC[t$?mQd?g???kE?W?[?\n        string outputBase64 = System.Convert.\n", "idx": 2170}
{"project": "cipher", "commit_id": "Snippet43467590_25578.java", "target": 0, "func": "    mVideoView.requestFocus();\n    mVideoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {\n\n        @Override\n        public void onCompletion(MediaPlayer mp) {\n            finish();\n        }\n    });\n\n    try{\n        byte k[] = \"SomeKey\".getBytes();\n        SecretKeySpec skey = new SecretKeySpec(k,\"DES\");\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE, skey);\n\n        Licensing.allow(this);\n        mServer = new LocalSingleHttpServer();\n\n        mServer.setCipher(cipher);\n        mServer.start();\n\n        String serverPath = mServer.getURL(path);\n        mVideoView.setVideoPath(serverPath);\n        mVideoView.setMediaController(new MediaController(this));\n        mVideoView.start();\n\n    }catch(Exception e){\n        Toast.makeText(this,e.getMessage()+\" sometext\",Toast.LENGTH_LONG).show();\n        Log.e(\"e.getMessage()\",e.getMessage());\n        e.printStackTrace();\n    }\n\n    mVideoView.setMediaController(null);\n", "idx": 2171}
{"project": "cipher", "commit_id": "Snippet7302986_32676.java", "target": 0, "func": "public String asHex(byte[] buf) {\n    StringBuffer strbuf = new StringBuffer(buf.length * 2);\n    int i;\n    for (i = 0; i < buf.length; i++) {\n        if (((int) buf[i] & 0xff) < 0x10)\n            strbuf.append(\"0\");\n        strbuf.append(Long.toString((int) buf[i] & 0xff, 16));\n    }\n    return strbuf.toString();\n}\n\nprivate SecretKeySpec skeySpec;\nprivate Cipher cipher;\nprivate byte[] encrypted;\n\npublic String encrypt(String str) throws Exception {\n    // Get the KeyGenerator\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    kgen.init(128); // 192 and 256 bits may not be available\n\n    // Generate the secret key specs.\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    skeySpec = new SecretKeySpec(raw, \"AES\");\n\n    // Instantiate the cipher\n    cipher = Cipher.getInstance(\"AES\");\n\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n    encrypted = cipher.doFinal(str.getBytes());\n    return asHex(encrypted);\n}\n\npublic String decrypt(String str) throws Exception {\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] original = cipher.doFinal(encrypted);\n    String originalString = new String(original);\n    return originalString;\n}\n", "idx": 2172}
{"project": "cipher", "commit_id": "Snippet14936809_38008.java", "target": 0, "func": "public static String encrypt(String toEncrypt, byte[ ] key) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[ ] encryptedBytes = cipher.doFinal(toEncrypt.getBytes());\n    String encrypted = Base64.encodeBytes(encryptedBytes);\n    return encrypted;\n}\n\npublic static String decrypt(String encryptedText, byte[ ] key) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] toDecrypt = Base64.decode(encryptedText);\n    byte[] encrypted = cipher.doFinal(toDecrypt);\n    return new String(encrypted);\n}\n", "idx": 2173}
{"project": "cipher", "commit_id": "Snippet18998124_1881.java", "target": 0, "func": "static void encryptLast64KB(String inputPath, String outputPath)\nthrows IOException, NoSuchAlgorithmException,\nNoSuchPaddingException, InvalidKeyException {\n\n\n    File myFile = new File(inputPath);\n    FileInputStream fis = new FileInputStream(myFile);\n\n    FileOutputStream fos = new FileOutputStream(outputPath);\n    BufferedOutputStream bus = new BufferedOutputStream(fos);\n\n    SecretKeySpec sks = new SecretKeySpec(\"MyDifficultPassw\".getBytes(),\n            \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, sks);\n\n    int b = 0;\n    byte[] d = new byte[65536];\n\n    int offset = 0;\n\n    byte[] encVal = null;\n\n    while ((b = fis.read(d)) != -1) {\n\n        offset = offset + b;\n        Log.d(TAG, \"Offset: \"+offset);\n        Log.d(TAG, \"b: \"+b);\n        if((offset)>=myFile.length())\n        {\n            Log.d(TAG, \"last 64 Kbytes\");\n\n            try {\n                encVal = cipher.doFinal(d);\n                Log.d(TAG, \"encVal: \"+encVal);\n                bus.write(encVal);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n        }\n        else\n        {\n            Log.d(TAG, \"rest of the bytes\");\n            bus.write(d);\n        }\n\n\n        bus.flush();\n        bus.close();\n        fis.close();\n    }\n\n\n}\n", "idx": 2174}
{"project": "cipher", "commit_id": "Snippet14472683_37742.java", "target": 0, "func": " try{\n\n\n    AlgorithmParameterSpec paramSpec = new IvParameterSpec(IV); \n    Cipher cipher = Cipher.getInstance(\"AES\");\n    SecretKeySpec key = new SecretKeySpec(keyGen, \"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, key, paramSpec); \n    byte[] output =  new BASE64Decoder().decodeBuffer(new String(convertDocToByteArra(\"//Path/somePDF.pdf\")));  \n\n     byte[] decrypted = cipher.doFinal(output);\n\n     convertByteArrayToDoc(decrypted);\n       }catch(Exception e){\n           e.printStackTrace();\n       }\n", "idx": 2175}
{"project": "cipher", "commit_id": "Snippet27334372_9507.java", "target": 0, "func": "public boolean validateClient(String loggedInKey) throws Exception{\n\n    /* Testing */\n    String randString = this.aI.returnString(); // Client requests a string/ server returns\n    System.out.println(\"This is what the server gave me: \"+randString);\n\n    String encryptionKey = loggedInKey;\n    SecretKeySpec key = new SecretKeySpec(encryptionKey.getBytes(\"UTF-8\"), \"AES\");\n\n    Cipher ecipher = Cipher.getInstance(\"AES\");\n    ecipher.init(Cipher.ENCRYPT_MODE, key);\n\n    SealedObject sealedClientReply = new SealedObject(randString, ecipher); // Client encrypts returned string seals it\n    System.out.println(\"This is what I'm sending back: \"+sealedClientReply);\n    if(this.aI.clientValidate(sealedClientReply, loggedInKey)){\n        System.out.println(\"Client validated!\");\n        return true;\n    }else{\n        return false;\n    }       \n}\n", "idx": 2176}
{"project": "cipher", "commit_id": "Snippet34925407_16874.java", "target": 0, "func": "   public static void setKey(String myKey) {\n\n        MessageDigest sha = null;\n        try {\n            key = new byte[]{(byte) '5', (byte) 'F', (byte) '8', (byte) 'p', (byte) 'J', (byte) 't', (byte) 'v', (byte) 'U', (byte) 'm', (byte) 'q', (byte) 'k', (byte) '7', (byte) 'A', (byte) 'M', (byte) 'v', (byte) 'b', (byte) 'q', (byte) 'o', (byte) 'H', (byte) 'M', (byte) '9', (byte) 'a', (byte) 'p', (byte) '4', (byte) '9', (byte) 'm', (byte) 'c', (byte) 'u', (byte) 'u', (byte) '5', (byte) 'B', (byte) 'X'};\n            System.out.println(new String(key, \"UTF-8\"));\n            secretKey = new SecretKeySpec(key, \"AES\");\n        } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n\n    public static String encrypt(String strToEncrypt) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            setEncryptedarr(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\")));\n            setEncryptedString(String.valueOf(Base64.encode(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\")), Base64.DEFAULT)));\n            //setEncryptedString(Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))));\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(\"Error while encrypting: \" + e.toString());\n        }\n        return null;\n    }\n\n    public static String decryptbyte(byte[] strToDecrypt) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            setDecryptedarr(cipher.doFinal(strToDecrypt));\n            System.out.println(\"encrypt : decropted size : \" + getDecryptedarr().length);\n            setDecryptedString(new String(cipher.doFinal(strToDecrypt)));\n        } catch (Exception e) {\n            System.out.println(\"Error wnhile decrypting: \" + e.toString());\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public static String decrypt(String strToDecrypt) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            setDecryptedarr(cipher.doFinal(Base64.decode(strToDecrypt, Base64.DEFAULT)));\n            setDecryptedString(new String(cipher.doFinal(Base64.decode(strToDecrypt, Base64.DEFAULT))));\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(\"Error while decrypting: \" + e.toString());\n\n        }\n        return null;\n    }\n", "idx": 2177}
{"project": "cipher", "commit_id": "Snippet35580510_17488.java", "target": 0, "func": "byte[] passwd = Base64Util.decode(pwd);\nbais = new ByteArrayInputStream(passwd);\nbaos = new ByteArrayOutputStream();\nCipher cipher = Cipher.getInstance(\"DESede\");\ncipher.init(Cipher.DECRYPT_MODE, key);\n// Read bytes, decrypt, and write them out.\nbyte[] buffer = new byte[2048];\nint bytesRead;\nwhile ((bytesRead = bais.read(buffer)) != -1) {\n    out.write(cipher.update(buffer, 0, bytesRead));\n}\n// Write out the final bunch of decrypted bytes\nout.write(cipher.doFinal());\nout.flush();\n", "idx": 2178}
{"project": "cipher", "commit_id": "Snippet31601344_13727.java", "target": 0, "func": "package xuggler;\n\nimport com.xuggle.mediatool.IMediaReader;\nimport com.xuggle.mediatool.IMediaWriter;\nimport com.xuggle.mediatool.MediaListenerAdapter;\nimport com.xuggle.mediatool.ToolFactory;\nimport com.xuggle.mediatool.event.IVideoPictureEvent;\nimport com.xuggle.xuggler.Global;\nimport com.xuggle.xuggler.ICodec;\n\nimport java.awt.Graphics2D;\nimport java.awt.Point;\nimport java.awt.Transparency;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ColorModel;\nimport java.awt.image.ComponentColorModel;\nimport java.awt.image.DataBuffer;\nimport java.awt.image.DataBufferByte;\nimport java.awt.image.Raster;\nimport java.awt.image.WritableRaster;\n\nimport java.io.File;\n\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\n\nimport javax.imageio.ImageIO;\n\n\npublic class DecodeAndCaptureFrames extends MediaListenerAdapter\n{\n\n // The number of seconds between frames.\n      public static final double SECONDS_BETWEEN_FRAMES = 5;\n\n  //The number of micro-seconds between frames.\n  public static final long MICRO_SECONDS_BETWEEN_FRAMES =(long)      (Global.DEFAULT_PTS_PER_SECOND * SECONDS_BETWEEN_FRAMES);\n\n  // Time of last frame write\n  private static long mLastPtsWrite = Global.NO_PTS;\n\nprivate static final double FRAME_RATE = 50;\n\nprivate static final int SECONDS_TO_RUN_FOR = 20;\n\nprivate static final String outputFilename = \"D:\\\\K.mp4\";\n\npublic static IMediaWriter writer = ToolFactory.makeWriter(outputFilename);\n//receive BufferedImage and returns its byte data\n    public static byte[] get_byte_data(BufferedImage image) {\n    WritableRaster raster = image.getRaster();\n    DataBufferByte buffer = (DataBufferByte) raster.getDataBuffer();\n    return buffer.getData();\n}\n\n\n//create new_img with the attributes of image\npublic static BufferedImage user_space(BufferedImage image) {\n    //create new_img with the attributes of image\n    BufferedImage new_img = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_3BYTE_BGR);\n    Graphics2D graphics = new_img.createGraphics();\n    graphics.drawRenderedImage(image, null);\n    graphics.dispose(); //release all allocated memory for this image\n    return new_img;\n}\n\npublic static BufferedImage toImage(byte[] imagebytes, int width, int height) {\n    DataBuffer buffer = new DataBufferByte(imagebytes, imagebytes.length);\n    WritableRaster raster = Raster.createInterleavedRaster(buffer, width, height,\n       3 * width, 3, new int[]{2, 1, 0}, (Point) null);\n\n    ColorModel cm = new ComponentColorModel(ColorModel.getRGBdefault().getColorSpace(), \n            false, true, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);\n    return new BufferedImage(cm, raster, true, null);\n}\n\npublic static byte[] encrypt(byte[] orgnlbytes, String key) throws NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {\n    byte[] encbytes = null;\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        SecureRandom random = SecureRandom.getInstance(\"SHA1PRNG\");\n        // cryptograph. secure random\n        random.setSeed(key.getBytes());\n\n        keyGen.init(128, random);\n        // for example\n        SecretKey secretKey = keyGen.generateKey();\n        try {\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        } catch (InvalidKeyException ex) {\n            Logger.getLogger(DecodeAndCaptureFrames.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        encbytes = cipher.doFinal(orgnlbytes);\n    }\n    catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(DecodeAndCaptureFrames.class.getName()).log(Level.SEVERE, null, ex);\n    }        catch (NoSuchPaddingException ex)\n    {\n        System.out.print(\"can not encrypt buffer\");\n    }\n\n    return encbytes;\n}\n\n\n  /**\n   * The video stream index, used to ensure we display frames from one\n   * and only one video stream from the media container.\n   */\n\n  private int mVideoStreamIndex = -1;\n\n  /**\n   * Takes a media container (file) as the first argument, opens it and\n   *  writes some of it's video frames to PNG image files in the\n   *  temporary directory.\n   *\n   * @param args must contain one string which represents a filename\n   */\n\n  public static void main(String[] args)\n  {\n    // create a new mr. decode and capture frames\n\n\n    DecodeAndCaptureFrames decodeAndCaptureFrames;\n    decodeAndCaptureFrames = new DecodeAndCaptureFrames(\"D:\\\\K.mp4\");\n  } \n\n  /** Construct a DecodeAndCaptureFrames which reads and captures\n   * frames from a video file.\n   *\n   * @param filename the name of the media file to read\n   */\n\n\n  //makes reader to the file and read the data of it\n  public DecodeAndCaptureFrames(String filename)\n  {\n    // create a media reader for processing video\n\n   IMediaReader reader = ToolFactory.makeReader(filename);\n\n// stipulate that we want BufferedImages created in BGR 24bit color space\nreader.setBufferedImageTypeToGenerate(BufferedImage.TYPE_3BYTE_BGR);\n\n\n// note that DecodeAndCaptureFrames is derived from\n// MediaReader.ListenerAdapter and thus may be added as a listener\n// to the MediaReader. DecodeAndCaptureFrames implements\n// onVideoPicture().\n\nreader.addListener(this);\n\n// read out the contents of the media file, note that nothing else\n// happens here.  action happens in the onVideoPicture() method\n// which is called when complete video pictures are extracted from\n// the media source\n\nwhile (reader.readPacket() == null)\n  do {} while(false);\n  }\n\n /**\n   * Called after a video frame has been decoded from a media stream.\n   * Optionally a BufferedImage version of the frame may be passed\n   * if the calling {@link IMediaReader} instance was configured to\n   * create BufferedImages.\n   *\n   * This method blocks, so return quickly.\n   */\n\n  public void onVideoPicture(IVideoPictureEvent event)\n  {\n    try\n    {\n      // if the stream index does not match the selected stream index,\n      // then have a closer look\n\n  if (event.getStreamIndex() != mVideoStreamIndex)\n  {\n    // if the selected video stream id is not yet set, go ahead an\n    // select this lucky video stream\n\n    if (-1 == mVideoStreamIndex)\n      mVideoStreamIndex = event.getStreamIndex();\n\n    // otherwise return, no need to show frames from this video stream\n\n    else\n      return;\n  }\n\n  // if uninitialized, backdate mLastPtsWrite so we get the very\n  // first frame\n\n  if (mLastPtsWrite == Global.NO_PTS)\n    mLastPtsWrite = event.getTimeStamp() - MICRO_SECONDS_BETWEEN_FRAMES;\n\n  // if it's time to write the next frame\n\n  if (event.getTimeStamp() - mLastPtsWrite >= MICRO_SECONDS_BETWEEN_FRAMES)\n  {\n    // Make a temporary file name\n\n   // File file = File.createTempFile(\"frame\", \".jpeg\");\n\n    // write out PNG\n\n//        ImageIO.write(event.getImage(), \"png\", file);\n\n    BufferedImage orgnlimage = event.getImage();\n        orgnlimage = user_space(orgnlimage);\n        byte[] orgnlimagebytes = get_byte_data(orgnlimage);\n        byte[] encryptedbytes = encrypt(orgnlimagebytes, \"abc\");\n        BufferedImage encryptedimage = toImage(encryptedbytes, orgnlimage.getWidth(), orgnlimage.getHeight());\n\n\n        ImageIO.write(encryptedimage, \"png\", File.createTempFile(\"frame\", \".png\"));\n//         indicate file written\n\n    double seconds = ((double)event.getTimeStamp())\n      / Global.DEFAULT_PTS_PER_SECOND;\n//        System.out.printf(\"at elapsed time of %6.3f seconds wrote: %s\\n\",seconds, file);\n\n    // update last write time\n\n    mLastPtsWrite += MICRO_SECONDS_BETWEEN_FRAMES;\n  }\n}\ncatch (Exception e)\n{\n  e.printStackTrace();\n}\n  }\n\n}\n", "idx": 2179}
{"project": "cipher", "commit_id": "Snippet32785560_14875.java", "target": 0, "func": "public String encrypt(String a,int x) {\n\n\n     String ret=\"\";\n  try {\n\n     String text = a;\n\n     String key = \"Bar12345Bar12345\"; // 128 bit key\n     // Create key and cipher\n     Key aesKey = new SecretKeySpec(key.getBytes(), \"AES\");\n\n     Cipher cipher = Cipher.getInstance(\"AES\");\n     // encrypt the text\nif(x==0)//x==0 means i want to encrypt\n{\n         cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n         byte[] encrypted = cipher.doFinal(text.getBytes());\n         ret =new String(encrypted);\n}\nelse//if not 0 i want to decrypt\n{\n        // decrypt the text\n\n    byte[] encrypted = text.getBytes(Charset.forName(\"UTF-8\"));\n         cipher.init(Cipher.DECRYPT_MODE, aesKey);\n         String decrypted = new String(cipher.doFinal(encrypted));\n         ret=decrypted;\n}\n  }catch(Exception e) {\n     e.printStackTrace();\n  }\n  return ret;\n}\n", "idx": 2180}
{"project": "cipher", "commit_id": "Snippet15103237_38151.java", "target": 0, "func": "//SecretKey to save data\n    private SecretKey desKey;\n\n    //Complete encryption and decryption work\n    private Cipher c;\n\n    //Save encryption results\n    private byte[] cipherResultByte;\n\n    private final static String Algorithm = \"DESede/ECB/NoPadding\";//Encryption method/operation mode\n\n    private static DESedeKeySpec dks;\n\n    private static SecretKeyFactory keyFactory;   \n\n    public DESeseTest02() {\n\n        Security.addProvider(new com.sun.crypto.provider.SunJCE());\n\n        try {\n\n            dks = new DESedeKeySpec(\"00000000000000000000000000000000\".getBytes());   \n\n             keyFactory = SecretKeyFactory.getInstance(\"DESede\");\n\n\n            //Generate key\n            desKey=keyFactory.generateSecret(dks);\n\n\n            //Generate Cipher object, specify its support DES algorithm\n            c=Cipher.getInstance(Algorithm);\n\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (InvalidKeySpecException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    public byte[] createEncryptor(byte[] b){\n\n        try {\n\n//          System.out.println(str);\n            //\u6839\u636e\u5bc6\u94a5\uff0c\u5bf9Cipher\u8fdb\u884c\u521d\u4f7f\u5316\uff0cDECRYPT_MODE\u52a0\u5bc6\u6a21\u5f0f\n            c.init(Cipher.ENCRYPT_MODE, desKey);\n\n//          byte[] input=str.getBytes();\n//          System.out.println(input.length);\n\n            //Encryption, the results will be preserved\n            cipherResultByte=c.doFinal(b);\n\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        }\n        return cipherResultByte;\n    }\n", "idx": 2181}
{"project": "cipher", "commit_id": "Snippet25579941_7891.java", "target": 0, "func": "package dataBases;\n\n\npublic class BackupHelper {\n\npublic static int SECURITY_NONE = 1 ;\npublic static int SECURITY_ENCRYPTED = 2 ;\n\npublic static void backup(Context context, int securityMode) {\n\n    File backup = new File(Environment.getExternalStorageDirectory()+ \n            \"/\" + \"KarAmad\" + \"/\" + \"backup\");\n    backup.mkdirs();\n\n    List<File> src = new ArrayList<File>();\n    List<File> dst = new ArrayList<File>();\n\n\n    try {\n        src.add( new File(new PrimaryInformationDataBase(context).getDirectory()) );\n        dst.add( new File(backup.getPath() + \"/\" + \"PI\") );\n\n        src.add( new File(new TransactionDataBase(context).getDirectory()) );\n        dst.add( new File(backup.getPath() + \"/\" + \"T\") );\n\n        src.add( new File(new NoteDataBase(context).getDirectory()) );\n        dst.add( new File(backup.getPath() + \"/\" + \"N\") );\n\n        src.add( new File(new PictureDataBase(context).getDirectory()) );\n        dst.add( new File(backup.getPath() + \"/\" + \"P\") );\n\n        for(int i = 0 ; i < src.size() ; i ++) {\n            dst.get(i).createNewFile();\n            if(securityMode == SECURITY_ENCRYPTED)\n                BackupHelper.encrypt(src.get(i), dst.get(i));\n            else\n                LeftFragment.copy(src.get(i), dst.get(i));\n        }\n\n        Toast.makeText(context, \"\u067e\u0634\u062a\u06cc\u0628\u0627\u0646 \u06af\u06cc\u0631\u06cc \u0627\u0646\u062c\u0627\u0645 \u0634\u062f\", Toast.LENGTH_SHORT).show();\n\n    } catch (Exception e) {\n\n        Toast.makeText(context, \"\u067e\u0634\u062a\u06cc\u0628\u0627\u0646 \u06af\u06cc\u0631\u06cc \u0627\u0646\u062c\u0627\u0645 \u0646\u0634\u062f!\", Toast.LENGTH_SHORT).show();\n        e.printStackTrace();\n\n    }\n}\n\npublic static void restore(Context context, int securityMode) {\n\n    NoteDataBase dummyNoteDataBase = new NoteDataBase(context);\n    String temp = dummyNoteDataBase.getDirectory();\n    String dataBasesPath = temp.substring(0, temp.lastIndexOf(\"/\"));\n\n    File source = new File(Environment.getExternalStorageDirectory()+ \n            \"/\" + \"KarAmad\" + \"/\" + \"backup\");\n\n    List<File> src = new ArrayList<File>();\n    List<File> dst = new ArrayList<File>();\n\n    try {\n        src.add( new File(source.getPath() + \"/\" + \"PI\") );\n        dst.add( new File(dataBasesPath + \"/\" + \"PrimaryInformation\") );\n\n        src.add( new File(source.getPath() + \"/\" + \"T\") );\n        dst.add( new File(dataBasesPath + \"/\" + \"Transaction\") );\n\n        src.add( new File(source.getPath() + \"/\" + \"N\") );\n        dst.add( new File(dataBasesPath + \"/\" + \"Note\") );\n\n        src.add( new File(source.getPath() + \"/\" + \"P\") );\n        dst.add( new File(dataBasesPath + \"/\" + \"Picture\") );\n\n        for(int i = 0 ; i < src.size() ; i++) {\n\n            dst.get(i).createNewFile();\n\n            if(securityMode == SECURITY_ENCRYPTED)\n                BackupHelper.decrypt(src.get(i), dst.get(i));\n            else\n                LeftFragment.copy(src.get(i), dst.get(i));\n        }\n\n\n\n        Toast.makeText(context, \"\u0628\u0627\u0632\u06cc\u0627\u0628\u06cc \u0641\u0627\u06cc\u0644 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646 \u0627\u0646\u062c\u0627\u0645 \u0634\u062f\", Toast.LENGTH_SHORT).show();\n\n    } catch (Exception e) {\n\n        Toast.makeText(context, \"\u0628\u0627\u0632\u06cc\u0627\u0628\u06cc \u0641\u0627\u06cc\u0644 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646 \u0627\u0646\u062c\u0627\u0645 \u0646\u0634\u062f!\", Toast.LENGTH_SHORT).show();\n        e.printStackTrace();\n\n    }\n}\n\npublic static void encrypt(File src, File dst) throws IOException,\n    NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n\n    FileInputStream inputStream = new FileInputStream(src);\n    FileOutputStream outputStream = new FileOutputStream(dst);\n\n    SecretKeySpec keySpec = new SecretKeySpec(\"1393032613930326\".getBytes(), \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n\n    CipherOutputStream cipherOutputStream = \n            new CipherOutputStream(outputStream, cipher);\n\n    int b;\n    byte[] d = new byte[8];\n    while((b = inputStream.read(d)) > 0) {\n        cipherOutputStream.write(d, 0, b);\n    }\n\n    cipherOutputStream.flush();\n    cipherOutputStream.close();\n    inputStream.close();\n}\n\n\npublic static void decrypt(File src, File dst) throws IOException,\nNoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n\n    FileInputStream inputStream = new FileInputStream(src);\n    FileOutputStream outputStream = new FileOutputStream(dst);\n\n    SecretKeySpec keySpec = new SecretKeySpec(\"1393032613930326\".getBytes(), \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, keySpec);\n\n    CipherInputStream cipherOutputStream = \n            new CipherInputStream(inputStream, cipher);\n\n    int b;\n    byte[] d = new byte[8];\n    while((b = inputStream.read(d)) > 0) {\n        outputStream.write(d, 0, b);\n    }\n\n    outputStream.flush();\n    outputStream.close();\n    cipherOutputStream.close();\n\n}\n}\n", "idx": 2182}
{"project": "cipher", "commit_id": "Snippet12110459_36048.java", "target": 0, "func": "private static final String CIPHER_ALGORITHM = \"DES/ECB/PKCS5Padding\";\nprivate static int KEY_LENGTH = 64;\n\n public static SecretKey deriveKeyDES() {\n        try {\n            long start = System.currentTimeMillis();\n\n            KeyGenerator kgen = KeyGenerator.getInstance(\"DES\");\n            kgen.init(KEY_LENGTH);\n            SecretKey result = kgen.generateKey();\n\n            long elapsed = System.currentTimeMillis() - start;\n            return result;\n\n        } catch (GeneralSecurityException e) {\n            throw new RuntimeException(e);\n        } \n    }\n\n\n    public static String encrypt(String plaintext, SecretKey key) {\n        try {\n\n            long start = System.currentTimeMillis();\n            Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\")\n\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n\n            byte[] cipherText = cipher.doFinal(plaintext.getBytes(\"UTF-8\"));\n\n            long elapsed = System.currentTimeMillis() - start;\n\n            return toBase64(cipherText);\n\n        } catch (GeneralSecurityException e) {\n            throw new RuntimeException(e);\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static String toBase64(byte[] bytes) {\n        return Base64.encodeToString(bytes, Base64.NO_WRAP).trim();\n    }\n\n\n    public static String decrypt(String ciphertext, SecretKey key) {\n        try {\n            byte[] cipherBytes = fromBase64(ciphertext);\n\n                long start = System.currentTimeMillis();\n            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);\n\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            cipher.update(cipherBytes);\n\n             // This is where I get exception\n            byte[] plaintext = cipher.doFinal(cipherBytes);\n\n            String plainrStr = new String(plaintext, \"UTF-8\").trim();\n            long elapsed = System.currentTimeMillis() - start;\n\n            return plainrStr;\n        } catch (GeneralSecurityException e) {\n            throw new RuntimeException(e);\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static byte[] fromBase64(String base64) {\n        return Base64.decode(base64, Base64.NO_WRAP);\n    }\n", "idx": 2183}
{"project": "cipher", "commit_id": "Snippet35203086_17129.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Base64;\nimport sun.misc.BASE64Encoder;\n\n\npublic class EncryptAES {\n\n    private static String toHexString(byte[] data) {        \n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < data.length; ++i) {\n            String s = Integer.toHexString(data[i] & 0XFF);\n            buf.append((s.length() == 1) ? (\"0\" + s) : s);\n        }\n        return buf.toString();\n    }\n\n    public static String encrypt(String input, String key) {\n        byte[] crypted = null;\n        try {\n            SecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, skey);\n            crypted = cipher.doFinal(input.getBytes());\n            final String encryptedString = toHexString(Base64.encodeBase64(crypted));\n            return encryptedString;\n        } catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        return new String(new BASE64Encoder().encode(crypted));\n    }\n\n    public static void main(String[] args) {\n        String key = args[0];\n        String plaintext = args[1];\n        System.out.println(\"KEY = \" + key);\n        System.out.println(\"PLAINTEXT = \" + plaintext);\n        System.out.println(\"CIPHER = \" + EncryptAES.encrypt(plaintext, key));\n    }\n}\n", "idx": 2184}
{"project": "cipher", "commit_id": "Snippet43186915_25321.java", "target": 0, "func": "  public class Java {\n\n       private static SecretKey key = null;         \n       private static Cipher cipher = null;\n\n       public static void main(String[] args) throws Exception\n       {\n          String filename = RESOURCES_DIR + \"toto.enc\";\n\n          byte[] key = Base64.decode(\"2AxIw+/AzDBj83OILV9GDpOs+izDFJEhD6pve/IPsN9=\");\n          SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n          cipher = Cipher.getInstance(\"AES\");\n\n          cipher.init(Cipher.DECRYPT_MODE, secretKey);\n          byte[] test = Base64.decode(readFile(filename));\n          byte[] decryptedBytes = cipher.doFinal(test);\n          String decryptedText = new String(decryptedBytes, \"UTF8\");\n\n          System.out.println(\"After decryption: \" + decryptedText);\n       }\n\n        public final static String RESOURCES_DIR = \"C:/Users/toto/Desktop/\";\n\n        static String readFile(String filename) throws FileNotFoundException, IOException {\n            FileReader fr;\n            BufferedReader br;\n\n            fr = new FileReader(new File(filename));\n            br = new BufferedReader(fr);\n            String str;\n            String res = \"\";\n            while ((str = br.readLine()) != null) {\n                res += str;\n            }\n            return res;\n        }\n    }\n", "idx": 2185}
{"project": "cipher", "commit_id": "Snippet9537017_33988.java", "target": 0, "func": "byte[] salt = {\n    (byte)0xc7, (byte)0x73, (byte)0x21, (byte)0x8c,\n    (byte)0x7e, (byte)0xc8, (byte)0xee, (byte)0x99\n};\n\nint count = 20;\n\nPBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, count);\nPBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());\nSecretKeyFactory keyFac = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\nSecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n\nCipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\ncipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n\nSealedObject sealed = new SealedObject(object, cipher);\n...\n", "idx": 2186}
{"project": "cipher", "commit_id": "Snippet916061_29797.java", "target": 0, "func": "static\n{\n   Security.addProvider(new BouncyCastleProvider());\n}\n\nprotected String encrypt(byte[] keyData, byte[] data) throws Exception {\n   X509EncodedKeySpec keyspec = new X509EncodedKeySpec(keyData);\n   KeyFactory kf = KeyFactory.getInstance(\"RSA\", \"BC\");\n   PublicKey pk = kf.generatePublic(keyspec);\n   Cipher rsa =  Cipher.getInstance(\"RSA/None/OAEPWithSHA1AndMGF1Padding\", \"BC\");\n   rsa.init(Cipher.ENCRYPT_MODE, pk);\n   byte[] output = rsa.doFinal(data);\n   String result = base64EncodeBytes(output);\n   return result;\n}\n", "idx": 2187}
{"project": "cipher", "commit_id": "Snippet18589000_1617.java", "target": 0, "func": "public class SymmetricCipherTest {\n    private static final String DEFAULT_ENCRYPTION_ALGORITHM = \"PBEWithMD5AndTripleDES\";\n    public final String ENCODE_INDICATOR_START = \"ENC(\";\n    public final String ENCODE_INDICATOR_END = \")\";\n    public final String APP_ENCRYPTION_KEY_FILE = \"application/.encryption.key\";\n    public static final int INTERATION = 15;\n    private static final byte[] SALT = { (byte) 0xd7, (byte) 0x73, (byte) 0x21, (byte) 0x8c, (byte) 0x7e, (byte) 0xc8, (byte) 0xee,\n            (byte) 0x99 };\n\n//  private static SymmetricCipherTest instance = initApplicaitonKey();\n    private static Base64 base64 = new Base64();\n    private static Cipher encrypter;\n    private static Cipher decrypter;\n//  private final Base64 base64 = new Base64();\n\n    public final String ERROR_KEY_GENERATION = \"Encryption key generation failed. Please verify the logs.\";\n    public static void main(String[] args) throws InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, DecoderException, NoSuchAlgorithmException {\n        String applicationKey=\"abcdefghijklmnopqrstu\";\n        String password=\"HellowWorld\";\n            encrypter=getCipherObject(applicationKey);\n            String encriptedString=new String(base64.encode(encrypter.doFinal(password.getBytes())));\n            System.out.println(encriptedString);\n\n            decrypter=getCipherObject(applicationKey);\n             String decryiptedString=new String(decrypter.doFinal(base64.decode(encriptedString.getBytes())));\n            System.out.println(decryiptedString);\n\n    }\n\n    public static Cipher getCipherObject(String applicationKey) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException{\n        SecretKeyFactory kf = SecretKeyFactory.getInstance(DEFAULT_ENCRYPTION_ALGORITHM);\n        PBEKeySpec keySpec = new PBEKeySpec(applicationKey.toCharArray());\n        SecretKey key = kf.generateSecret(keySpec);\n        Cipher ciph = Cipher.getInstance(DEFAULT_ENCRYPTION_ALGORITHM);\n\n        PBEParameterSpec params = new PBEParameterSpec(SALT, INTERATION);\n        ciph.init(Cipher.ENCRYPT_MODE, key, params);\n        return ciph;\n    }\n}\n", "idx": 2188}
{"project": "cipher", "commit_id": "Snippet31515636_13661.java", "target": 0, "func": "public class Anything\n{\n    private static final String ALGO = \"AES\";\n    //generate 128bit key\n    private static final String keyStr = \"Z8LSq0wWwB5v+6YJzurcP463H3F12iZh74fDj4S74oUH4EONkiKb2FmiWUbtFh97GG/c/lbDE47mvw6j94yXxKHOpoqu6zpLKMKPcOoSppcVWb2q34qENBJkudXUh4MWcreondLmLL2UyydtFKuU9Sa5VgY/CzGaVGJABK2ZR94=\";\n\n    private static Key generateKey() throws Exception {\n        byte[] keyValue = keyStr.getBytes(\"UTF-8\");\n        MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n        keyValue = sha.digest(keyValue);\n        keyValue = Arrays.copyOf(keyValue, 16); // use only first 128 bit       \n        Key key = new SecretKeySpec(keyValue, ALGO);\n        return key;\n    }\n\n    public static String encrypt(String Data) throws Exception {\n            Key key = generateKey();\n            Cipher c = Cipher.getInstance(ALGO);\n            c.init(Cipher.ENCRYPT_MODE, key);\n            byte[] encVal = c.doFinal(Data.getBytes());\n            String encryptedValue = DatatypeConverter.printBase64Binary(encVal);\n            return encryptedValue;\n    }\n\n    public static String decrypt(String encryptedData) throws Exception {\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);       \n        byte[] decordedValue = DatatypeConverter.parseBase64Binary(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        String decryptedValue = new String(decValue);\n        return decryptedValue;\n    }\n}\n", "idx": 2189}
{"project": "cipher", "commit_id": "Snippet23570655_5914.java", "target": 0, "func": "String key = \"abcd\";\nSecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), \"Blowfish\");\nCipher cipher = Cipher.getInstance(\"Blowfish\");\ncipher.init(cipher.ENCRYPT_MODE, keySpec);\nreturn DatatypeConverter.printBase64Binary(cipher.doFinal(key.getBytes()));\n", "idx": 2190}
{"project": "cipher", "commit_id": "Snippet17407909_627.java", "target": 0, "func": "public static byte[] tripleDes(final byte[] original, final int mode, final SecretKeySpec keySpec, final byte[] ivSpec) throws GeneralSecurityException {\n    final Cipher cipher = Cipher.getInstance(\"DESede/CBC/NoPadding\");\n    final IvParameterSpec iv = new IvParameterSpec(ivSpec);\n    cipher.init(mode, keySpec, iv);\n    return cipher.doFinal(original);\n}\n", "idx": 2191}
{"project": "cipher", "commit_id": "Snippet29881041_11945.java", "target": 0, "func": "private final String CIPHER_NAME = \"AES/ECB/PKCS5Padding\";\nprivate final String ALGORITHM_NAME = \"AES\"; // keySizes 128, 192, 256\n// private final String CIPHER_NAME = \"DES/ECB/PKCS5Padding\";\n// private final String ALGORITHM_NAME = \"DES\"; // keySize 56\n// private final String CIPHER_NAME = \"DESede/ECB/PKCS5Padding\";\n// private final String ALGORITHM_NAME = \"DESede\"; // keySize 168\n\nbyte[] encrypt(SecretKey key, long num) {\n    BigInteger bignum = BigInteger.valueOf(num);\n    Cipher cipher = Cipher.getInstance(CIPHER_NAME);\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    return cipher.doFinal(bignum.toByteArray());\n}\n\nlong decrypt(SecretKey key, byte[] ct) {\n    Cipher cipher = Cipher.getInstance(CIPHER_NAME);\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] pt = cipher.doFinal(ct);\n    BigInteger bignum = new BigInteger(pt);\n    return bignum.longValue();\n}\n\nSecretKey keyGen(String algorithm, int keySize) {\n    KeyGenerator keygen = KeyGenerator.getInstance(algorithm);\n    keygen.init(keySize);\n    return keygen.generateKey();\n}\n", "idx": 2192}
{"project": "cipher", "commit_id": "Snippet20900108_3487.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"PBEWithMD5AndDES\");\n", "idx": 2193}
{"project": "cipher", "commit_id": "Snippet42153463_24105.java", "target": 0, "func": "import java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AESHelper {\n\npublic static String encrypt(String seed, String cleartext) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\",\"Crypto\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length()/2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2*i, 2*i+2), 16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2*buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\nprivate final static String HEX = \"0123456789ABCDEF\";\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b>>4)&0x0f)).append(HEX.charAt(b&0x0f));\n}\n}\n", "idx": 2194}
{"project": "cipher", "commit_id": "Snippet10993335_35234.java", "target": 0, "func": "public class CryptData {\nprivate KeySpec keySpec;\nprivate SecretKey key;\nprivate IvParameterSpec iv;\n\npublic CryptData(String keyString, String ivString) {\n    try {\n        final MessageDigest md = MessageDigest.getInstance(\"md5\");\n\n        final byte[] digestOfPassword = md.digest(Base64\n                .decodeBase64(keyString.getBytes(\"ISO-8859-1\")));\n\n        final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);\n        for (int j = 0, k = 16; j < 8;) {\n            keyBytes[k++] = keyBytes[j++];\n        }\n\n        //keySpec = new DESedeKeySpec(keyBytes);\n        keySpec = new DESedeKeySpec(keyString.getBytes());\n\n        key = SecretKeyFactory.getInstance(\"DESede\")\n                .generateSecret(keySpec);\n\n        iv = new IvParameterSpec(ivString.getBytes());\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n\npublic String encrypt(String value) {\n    try {\n        Cipher ecipher = Cipher.getInstance(\"DESede/CFB/NoPadding\");\n\n                //\"SunJCE\");\n        ecipher.init(Cipher.ENCRYPT_MODE, key, iv);\n\n        if (value == null)\n            return null;\n\n        // Encode the string into bytes using utf-8\n        byte[] valeur = value.getBytes(\"ISO-8859-1\");\n        //byte[] utf8 = value.getBytes();\n\n        // Encrypt\n        byte[] enc = ecipher.doFinal(valeur);\n\n        // Encode bytes to base64 to get a string\n        return new String(Base64.encodeBase64(enc), \"ISO-8859-1\");\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n", "idx": 2195}
{"project": "cipher", "commit_id": "Snippet30254560_12408.java", "target": 0, "func": " private final static String HEX = \"0123456789ABCDEF\";\n\n public static String encryptString(String str) throws Exception {\n    return encrypt(\"KeY123\", str);\n}\n\npublic static String decryptString(String str) throws Exception {\n    return decrypt(\"KeY123\", str);\n}\n\npublic static String encrypt(String seed, String cleartext) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] result = encrypt(rawKey, cleartext.getBytes());\n    return toHex(result);\n}\n\npublic static String decrypt(String seed, String encrypted) throws Exception {\n    byte[] rawKey = getRawKey(seed.getBytes());\n    byte[] enc = toByte(encrypted);\n    byte[] result = decrypt(rawKey, enc);\n    return new String(result);\n}\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\", \"Crypto\");\n    sr.setSeed(seed);\n    kgen.init(128, sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\nprivate static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n\npublic static String toHex(String txt) {\n    return toHex(txt.getBytes());\n}\n\npublic static String fromHex(String hex) {\n    return new String(toByte(hex));\n}\n\npublic static byte[] toByte(String hexString) {\n    int len = hexString.length() / 2;\n    byte[] result = new byte[len];\n    for (int i = 0; i < len; i++)\n        result[i] = Integer.valueOf(hexString.substring(2 * i, 2 * i + 2), 16).byteValue();\n    return result;\n}\n\npublic static String toHex(byte[] buf) {\n    if (buf == null)\n        return \"\";\n    StringBuffer result = new StringBuffer(2 * buf.length);\n    for (int i = 0; i < buf.length; i++) {\n        appendHex(result, buf[i]);\n    }\n    return result.toString();\n}\n\nprivate static void appendHex(StringBuffer sb, byte b) {\n    sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));\n}\n", "idx": 2196}
{"project": "cipher", "commit_id": "Snippet13771186_37256.java", "target": 0, "func": "ks = new SecretKeySpec(key, \"AES\");\nciph = Cipher.getInstance(\"AES\");\n", "idx": 2197}
{"project": "cipher", "commit_id": "Snippet22280721_4677.java", "target": 0, "func": "import java.security.spec.*;\nimport javax.crypto.*;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class DESedeEncryption {\npublic static void main(String[] args) {\n\nSecretKey k1 = generateDESkey();\nSecretKey k2 = generateDESkey();\n\nString firstEncryption = desEncryption(\"plaintext\", k1);\nSystem.out.println(\"firstEncryption Value : \"+firstEncryption);\nString decryption = desDecryption(firstEncryption, k2);\nSystem.out.println(\"decryption Value : \"+decryption);\nString secondEncryption = desEncryption(decryption, k1);\nSystem.out.println(\"secondEncryption Value : \"+secondEncryption);\n\n}\n\npublic static SecretKey generateDESkey() {\nKeyGenerator keyGen = null;\ntry {\n    keyGen = KeyGenerator.getInstance(\"DESede\");\n} catch (Exception ex) {     \n}\nkeyGen.init(112); // key length 56\nSecretKey secretKey = keyGen.generateKey();\nreturn secretKey;\n}\n\npublic static String desEncryption(String strToEncrypt, SecretKey desKey) {\ntry {\n    Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, desKey);\n    BASE64Encoder base64encoder = new BASE64Encoder();\n    byte[] encryptedText = cipher.doFinal(strToEncrypt.getBytes());\n    String encryptedString =base64encoder.encode(encryptedText);\n    return encryptedString;\n} catch (Exception ex) {\n}\nreturn null;\n}\n\npublic static String desDecryption(String strToDecrypt, SecretKey desKey) {\ntry {\n    Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, desKey);\n    BASE64Decoder base64decoder = new BASE64Decoder();\n    byte[] encryptedText = base64decoder.decodeBuffer(strToDecrypt);\n    byte[] plainText = cipher.doFinal(encryptedText);\n    String decryptedString= bytes2String(plainText);\n    return decryptedString;\n} catch (Exception ex) {\n}\nreturn null;\n}\n\n private static String bytes2String(byte[] bytes) {\n    StringBuffer stringBuffer = new StringBuffer();\n    for (int i = 0; i <bytes.length; i++) {\n        stringBuffer.append((char) bytes[i]);\n    }\n    return stringBuffer.toString();\n}\n}\n", "idx": 2198}
{"project": "cipher", "commit_id": "Snippet22425951_4812.java", "target": 0, "func": "    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n\n\nprivate static byte[] getRawKey(byte[] seed) throws Exception {\n    KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom sr = new SecureRandom();\n    sr.setSeed(seed);\n    kgen.init(sr); // 192 and 256 bits may not be available\n    SecretKey skey = kgen.generateKey();\n    byte[] raw = skey.getEncoded();\n    return raw;\n}\n\nprivate static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n\n}\n", "idx": 2199}
{"project": "cipher", "commit_id": "Snippet21039407_3621.java", "target": 0, "func": "public String encryptPadding(String plaintext, byte[] salt) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, SKey);\n\n        byte[] cipherText = cipher.doFinal(PlainText.getBytes(\"UTF-8\"));\n\n        cyphertext = String.format(\"%s%s%s\", toBase64(salt), \"]\",\n                toBase64(cipherText));\n        edit_txt_enc_string.setText(cyphertext);\n        return cyphertext;\n    } catch (GeneralSecurityException e) {\n        throw new RuntimeException(e);\n    } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(e);\n    }\n}\n\npublic String decryptPadding(String ctext, byte[] salt) {\n    try {\n        Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\n        cipher.init(Cipher.DECRYPT_MODE, SKey, ivSpec);\n\n        byte[] plaintxt = cipher.doFinal(cyphertext.getBytes(\"UTF-8\"));\n\n        PlainText = String.format(\"%s%s%s\", fromBase64(salt), \"]\",\n                fromBase64(plaintxt));\n        edit_txt_dec_string.setText(PlainText);\n        return PlainText;\n    } catch (GeneralSecurityException e) {\n        throw new RuntimeException(e);\n    } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(e);\n    }\n}\n", "idx": 2200}
{"project": "cipher", "commit_id": "Snippet34349335_16324.java", "target": 0, "func": "private static final String ALGO = \"AES\";\nprivate static final byte[] keyValue = new byte[] { 'o', 'n', 'e', 'n','e', 't', 'e','d', 'o', 'c', 'e', 'i', 'r', 's', 'r', 'p' };\n    public static String decrypt(String encryptedData){\n        String decryptedValue = null;\n        try{\n        Key key = generateKey();\n        Cipher c = Cipher.getInstance(ALGO);\n        c.init(Cipher.DECRYPT_MODE, key);\n        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);\n        byte[] decValue = c.doFinal(decordedValue);\n        decryptedValue = new String(decValue);\n    }catch(Exception e){\n        //LOGGER.error(\"In TD:\" + e);\n        //Teneno_StartupService.loadForConnectionFailed();\n    }\n    return decryptedValue;\n}\nprivate static Key generateKey(){\n    Key key = new SecretKeySpec(keyValue, ALGO);\n    return key;\n}\n", "idx": 2201}
{"project": "cipher", "commit_id": "Snippet13209169_36779.java", "target": 0, "func": "Cipher.getInstance(\"AES\")", "idx": 2202}
{"project": "cipher", "commit_id": "Snippet25844026_8112.java", "target": 0, "func": "import org.bouncycastle.jce.provider.BouncyCastleProvider;\n\nimport javax.crypto.Cipher;\nimport java.security.GeneralSecurityException;\nimport java.security.Provider;\nimport java.security.Security;\n\npublic class JCETest {\npublic static void main( String[] args ) throws GeneralSecurityException\n{\n\n    BouncyCastleProvider bouncyCastleProvider = new BouncyCastleProvider();\n    Security.addProvider(bouncyCastleProvider);\n\n    System.out.println( \"\\nSecurity-Provider:\" );\n    for( Provider prov : Security.getProviders() ) {\n        System.out.println( \"  \" + prov + \": \" + prov.getInfo() );\n    }\n    System.out.println( \"\\nMaxAllowedKeyLength (for '\" + Cipher.getInstance(\"AES\").getProvider() + \"' using current 'JCE Policy Files'):\\n\"\n            + \"  DES        = \" + Cipher.getMaxAllowedKeyLength( \"DES\"        ) + \"\\n\"\n            + \"  Triple DES = \" + Cipher.getMaxAllowedKeyLength( \"Triple DES\" ) + \"\\n\"\n            + \"  AES        = \" + Cipher.getMaxAllowedKeyLength( \"AES\"        ) + \"\\n\"\n            + \"  Blowfish   = \" + Cipher.getMaxAllowedKeyLength( \"Blowfish\"   ) + \"\\n\"\n            + \"  RSA        = \" + Cipher.getMaxAllowedKeyLength( \"RSA\"        ) + \"\\n\" );\n}\n}\n", "idx": 2203}
{"project": "cipher", "commit_id": "Snippet37819550_19826.java", "target": 0, "func": "public static void encrypt(SecretKey secretKey, String filePath){\n    try {\n        // Here you read the cleartext.\n        FileInputStream fis = new FileInputStream(filePath);\n        // This stream write the encrypted text. This stream will be wrapped by another stream.\n        FileOutputStream fos = new FileOutputStream(filePath);\n\n        // Create cipher\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        // Wrap the output stream\n        CipherOutputStream cos = new CipherOutputStream(fos, cipher);\n\n        // Write bytes\n        int b;\n        byte[] d = new byte[8];\n        while ((b = fis.read(d)) != -1) {\n            cos.write(d, 0, b);\n        }\n\n        // Flush and close streams.\n        cos.flush();\n        cos.close();\n        fis.close();\n\n    }catch(IOException e){\n        e.printStackTrace();\n    }catch (NoSuchAlgorithmException e){\n        e.printStackTrace();\n    }catch(NoSuchPaddingException e){\n        e.printStackTrace();\n    }catch(InvalidKeyException e){\n        e.printStackTrace();\n    }\n}\n", "idx": 2204}
{"project": "cipher", "commit_id": "Snippet46589671_28714.java", "target": 0, "func": " try {\n    KeyGenerator  kg = KeyGenerator.getInstance(\"DESede\");\n    SecretKey key = kg.generateKey();\n    Cipher cipher = Cipher.getInstance(\"DESede\");\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    ObjectOutputStream oos = new ObjectOutputStream(new CipherOutputStream(new FileOutputStream(\"saves/data.ttg\"), cipher));\n    oos.writeObject(\"\" + CurrentMoney);\n    fos = new FileOutputStream(\"saves/key.ttg\");\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DESede\");\n    DESedeKeySpec keyspec = (DESedeKeySpec) skf.getKeySpec(key, DESedeKeySpec.class);\n    fos.write(keyspec.getKey());\n    fos.close();\n    oos.close();\n} catch (NoSuchAlgorithmException e) {\n    e.printStackTrace();\n}\n", "idx": 2205}
{"project": "cipher", "commit_id": "Snippet42696859_24735.java", "target": 0, "func": "            try {\n                        Cipher desCipher;\n                        byte[] decodedKey = pass.getText().getBytes();\n                        SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"DES\");\n                        desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n                        byte[] text = input.getText().getBytes();\n                        desCipher.init(Cipher.DECRYPT_MODE, originalKey);\n                        byte[] textDecrypted = desCipher.doFinal(input.getText().getBytes());\n                        output.setText(Arrays.toString(textDecrypted));\n                    } catch (NoSuchAlgorithmException | InvalidKeyException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException ex) {\n                        Error(ex.getMessage());\n                        Logger(ex.getMessage());\n                    }\n", "idx": 2206}
{"project": "cipher", "commit_id": "Snippet20323765_2965.java", "target": 0, "func": "public static String encrypt(String data) throws Exception {\n    byte[] keyValue = encryptionKey.getBytes();\n    Key key = new SecretKeySpec(keyValue, \"AES\");\n    Cipher c = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encVal = c.doFinal(data.getBytes());\n    String encryptedValue = new BASE64Encoder().encode(encVal);\n    return encryptedValue;\n}\n", "idx": 2207}
{"project": "cipher", "commit_id": "Snippet18093554_1131.java", "target": 0, "func": "static{\n    //install ibm's provider\n    java.security.Security.addProvider(new IBMJCE());\n}\n\npublic byte[] encrypt(byte[] input)throws SecurityException{\n    KeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n    //call ibm's provider\n    SecureRandom sr = SecureRandom.getInstance(\"IBMSecureRandom\", new IBMJCE());\n    sr.setSeed(str.getBytes());\n    kg.init(sr);\n    Key key = kg.generateKey();\n    Cipher cipher = Cipher.getInstance(\"DES\");\n    cipher.init(1, key);\n    byte[] ret = cipher.doFinal(input);\n    return ret;\n}\n", "idx": 2208}
{"project": "cipher", "commit_id": "Snippet5770064_31796.java", "target": 0, "func": "package forums;\n\nimport java.io.*;\nimport java.security.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\n\n/**\n   This program tests the DES cipher. Usage:\n   java DESTest -genkey keyfile\n   java DESTest -encrypt plaintext encrypted keyfile\n   java DESTest -decrypt encrypted decrypted keyfile\n*/\npublic class DESTest\n{\n   private static void usage() {\n      System.err.print(\n          \"This program tests the javax.crypto DES cipher package.\\n\"\n        + \"usage: java DESTest -genkey keyfile\\n\"\n        + \"java DESTest -encrypt plaintext encrypted keyfile\\n\"\n        + \"java DESTest -decrypt encrypted decrypted keyfile\\n\"\n      );\n   }\n\n   public static void main(String[] args) {\n      if ( args.length < 2 || args.length > 4\n        || !args[0].matches(\"-genkey|-encrypt|-decrypt\")\n      ) {\n          usage();\n          return;\n      }\n      try {\n         if (\"-genkey\".equals(args[0])) {\n            KeyGenerator keygen = KeyGenerator.getInstance(\"DES\");\n            SecureRandom random = new SecureRandom();\n            keygen.init(random);\n            SecretKey key = keygen.generateKey();\n            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(args[1]));\n            out.writeObject(key);\n            out.close();\n         } else {\n            int mode;\n            if (\"-encrypt\".equals(args[0])) {\n               mode = Cipher.ENCRYPT_MODE;\n            } else { //-decrypt\n               mode = Cipher.DECRYPT_MODE;\n            }\n\n            ObjectInputStream keyIn = new ObjectInputStream(new FileInputStream(args[3]));\n            Key key = (Key) keyIn.readObject();\n            keyIn.close();\n\n            InputStream in = new FileInputStream(args[1]);\n            OutputStream out = new FileOutputStream(args[2]);\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            cipher.init(mode, key);\n\n            crypt(in, out, cipher);\n            in.close();\n            out.close();\n         }\n      } catch (IOException exception) {\n         exception.printStackTrace();\n      } catch (GeneralSecurityException exception) {\n         exception.printStackTrace();\n      } catch (ClassNotFoundException exception) {\n         exception.printStackTrace();\n      }\n   }\n\n   /**\n      Uses a cipher to transform the bytes in an input stream\n      and sends the transformed bytes to an output stream.\n      @param in the input stream\n      @param out the output stream\n      @param cipher the cipher that transforms the bytes\n   */\n   public static void crypt(InputStream in, OutputStream out, Cipher cipher) \n      throws IOException, GeneralSecurityException\n   {\n      int blockSize = cipher.getBlockSize();\n      int outputSize = cipher.getOutputSize(blockSize);\n      byte[] inBytes = new byte[blockSize];\n      byte[] outBytes = new byte[outputSize];\n\n      int inLength = 0;;\n      boolean more = true;\n      while (more) {\n         inLength = in.read(inBytes);\n         if (inLength == blockSize) {\n            int outLength = cipher.update(inBytes, 0, blockSize, outBytes);\n            out.write(outBytes, 0, outLength);\n            System.out.println(outLength);\n         } else {\n            more = false;\n         }\n      }\n      if (inLength > 0) {\n         outBytes = cipher.doFinal(inBytes, 0, inLength);\n      } else {\n         outBytes = cipher.doFinal();\n      }\n      System.out.println(outBytes.length);\n      out.write(outBytes);\n   }\n\n}\n", "idx": 2209}
{"project": "cipher", "commit_id": "Snippet27746249_9918.java", "target": 0, "func": "import java.security.spec.KeySpec;\n\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class DESEncryption {\n\nprivate static final String UNICODE_FORMAT = \"UTF8\";\npublic static final String DES_ENCRYPTION_SCHEME = \"DES\";\nprivate KeySpec myKeySpec;\nprivate SecretKeyFactory mySecretKeyFactory;\nprivate Cipher cipher;\nbyte[] keyAsBytes;\nprivate String myEncryptionKey;\nprivate String myEncryptionScheme;\nSecretKey key;\n\npublic DESEncryption() throws Exception\n{\n    myEncryptionKey = \"ThisIsSecretEncryptionKey\";\n    myEncryptionScheme = DES_ENCRYPTION_SCHEME;\n    keyAsBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);\n    myKeySpec = new DESKeySpec(keyAsBytes);\n    mySecretKeyFactory = SecretKeyFactory.getInstance(myEncryptionScheme);\n    cipher = Cipher.getInstance(myEncryptionScheme);\n    key = mySecretKeyFactory.generateSecret(myKeySpec);\n}\n\n/**\n * <span class=\"IL_AD\" id=\"IL_AD2\">Method</span> To Encrypt The String\n */\npublic String encrypt(String unencryptedString) {\n    String encryptedString = null;\n    try {\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);\n        byte[] encryptedText = cipher.doFinal(plainText);\n        BASE64Encoder base64encoder = new BASE64Encoder();\n        encryptedString = base64encoder.encode(encryptedText);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return encryptedString;\n}\n/**\n * Method To Decrypt An Ecrypted String\n */\npublic String decrypt(String encryptedString) {\n    String decryptedText=null;\n    try {\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        BASE64Decoder base64decoder = new BASE64Decoder();\n        byte[] encryptedText = base64decoder.decodeBuffer(encryptedString);\n        byte[] plainText = cipher.doFinal(encryptedText);\n        decryptedText= bytes2String(plainText);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return decryptedText;\n}\n/**\n * Returns String From An Array Of Bytes\n */\nprivate static String bytes2String(byte[] bytes) {\n    StringBuffer stringBuffer = new StringBuffer();\n    for (int i = 0; i < bytes.length; i++) {\n        stringBuffer.append((char) bytes[i]);\n    }\n    return stringBuffer.toString();\n}\n\n/**\n * Testing the DES Encryption And Decryption Technique\n */\npublic static void main(String args []) throws Exception\n{\n    DESEncryption myEncryptor= new DESEncryption();\n\n    String stringToEncrypt=\"Sanjaal.com\";\n    String encrypted=myEncryptor.encrypt(stringToEncrypt);\n    String decrypted=myEncryptor.decrypt(encrypted);\n\n    System.out.println(\"String To Encrypt: \"+stringToEncrypt);\n    System.out.println(\"Encrypted Value : \" + encrypted);\n    System.out.println(\"Decrypted Value : \"+decrypted);\n\n}   \n\n}\n", "idx": 2210}
{"project": "cipher", "commit_id": "Snippet1624353_29930.java", "target": 0, "func": "Cipher cip = Cipher.getInstance(\"DES\")\n", "idx": 2211}
{"project": "cipher", "commit_id": "Snippet44294039_26356.java", "target": 0, "func": "import javafx.application.Application;\nimport javafx.application.Platform;\nimport javafx.stage.*;\nimport javafx.scene.*;\nimport javafx.scene.control.*;\nimport javafx.scene.layout.*;\nimport javafx.geometry.*;\nimport javafx.scene.image.*;\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport sun.misc.BASE64Encoder;\nimport sun.misc.BASE64Decoder;\nimport java.security.Key;\nimport javax.crypto.Cipher;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AESGui extends Application{\n\n    TextArea inputArea = new TextArea();\n    TextArea outputArea = new TextArea();\n    Main object1 = new Main();\n\n    public static void main(String [] args){\n        launch (args);\n    }\n\n\n    @Override\n    public void start(Stage stage){\n\n        HBox hbox1 = new HBox(50);\n        hbox1.setAlignment(Pos.CENTER);\n        hbox1.getChildren().addAll(inputArea, outputArea);\n\n        Button encrypt = new Button(\"Encrypt\");\n        encrypt.setOnAction (event -> {\n            object1.aesEncryption();\n        });\n\n        Button decrypt = new Button(\"Decrypt\");\n\n        HBox hbox2 = new HBox(50);\n        hbox2.setAlignment(Pos.CENTER);\n        hbox2.getChildren().addAll(encrypt, decrypt);\n\n        VBox vbox = new VBox();\n        vbox.setAlignment(Pos.CENTER);\n        vbox.getChildren().addAll(hbox1, hbox2);\n\n        Scene scene = new Scene(vbox, 900, 700);\n\n        stage.setScene(scene);\n        stage.setTitle(\"aes gui\");\n        stage.show();\n    }\n\n    public class AESAlgorithm{\n        public String algo = \"AES\";\n        public byte[] keyValue;\n\n        public AESAlgorithm(String key){\n            keyValue = key.getBytes();\n        }\n\n        public Key generateKey() throws Exception{\n            Key key = new SecretKeySpec(keyValue, algo);\n            return key;\n        }\n\n        public String encrypt(String msg) throws Exception{\n\n            Key key = generateKey();\n            Cipher c = Cipher.getInstance(algo);\n            c.init(Cipher.ENCRYPT_MODE, key);\n            byte[] encVal = c.doFinal(msg.getBytes());\n            String encryptedValue = new BASE64Encoder().encode(encVal);\n            return encryptedValue;\n\n        }\n\n        public String decrypt(String msg) throws Exception{\n\n            Key key = generateKey();\n            Cipher c = Cipher.getInstance(algo);\n            c.init(Cipher.DECRYPT_MODE, key);\n            byte[] decordedValue = new BASE64Decoder().decodeBuffer(msg);\n            byte[] decValue = c.doFinal(decordedValue);\n            String decryptedValue = new String(decValue);\n            return decryptedValue;\n        }\n    }\n\n    public class Main {\n        AESAlgorithm aesAlgo;\n        private byte[] keyValue = new byte[]{'t','h','e','b','e','s','t','s','e','c','r','e','t','k','e','y'};\n        public Main(){\n            //initComponents();\n            //here we passed key to constructor\n            aesAlgo = new AESAlgorithm(\"MySecretKey\");\n        }\n\n        private void aesEncryption(){\n            try{\n\n                String plainText = inputArea.getText();\n                String encryptedText = aesAlgo.encrypt(plainText);\n                outputArea.setText(encryptedText);\n\n            }\n            catch(Exception e){\n                e.printStackTrace();\n            }\n        }\n\n    }\n}\n", "idx": 2212}
{"project": "cipher", "commit_id": "Snippet19698721_2425.java", "target": 0, "func": "protected static String encrypt(String plaintext) {\n    final byte[] KEY = {\n            0x6d, 0x79, 0x56, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70,\n            0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b\n    };\n\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        final SecretKeySpec secretKey = new SecretKeySpec(KEY, \"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        final String encryptedString = Base64.encodeToString(\n            cipher.doFinal(plaintext.getBytes()), Base64.DEFAULT);\n\n        return encryptedString;\n    } catch (Exception e) {\n        return null;\n    }\n}\n", "idx": 2213}
{"project": "cipher", "commit_id": "Snippet14582664_37831.java", "target": 0, "func": "    byte[] encodedprivkey = privKey.getEncoded();\n    String MYPBEALG = \"PBEWithSHA1AndDESede\";\n    String password = \"test123\";\n\n    int count = 20;// hash iteration count\n    Random random = new Random();\n    byte[] salt = new byte[8];\n    random.nextBytes(salt);\n\n    PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, count);\n    PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());\n\n    SecretKeyFactory keyFac = SecretKeyFactory.getInstance(MYPBEALG);\n    SecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);\n\n    Cipher pbeCipher = Cipher.getInstance(MYPBEALG);\n    // Initialize PBE Cipher with key and parameters\n    pbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);\n\n    // Encrypt the encoded Private Key with the PBE key\n    byte[] ciphertext = pbeCipher.doFinal(encodedprivkey);\n\n\n    // Now construct  PKCS #8 EncryptedPrivateKeyInfo object\n    AlgorithmParameters algparms = AlgorithmParameters.getInstance(MYPBEALG);\n    algparms.init(pbeParamSpec);\n    EncryptedPrivateKeyInfo encinfo = new EncryptedPrivateKeyInfo(algparms, ciphertext);\n\n    FileOutputStream out3 = new FileOutputStream(\"server.key\");\n    out3.write(Base64.encodeBase64(encryptedPkcs8, true));\n    out3.flush();\n    out3.close();\n\n\n    FileOutputStream out3 = new FileOutputStream(\"server.crt\");\n    out3.write(Base64.encodeBase64(chain[0].getEncoded(), true));\n    out3.flush();\n    out3.close();\n", "idx": 2214}
{"project": "cipher", "commit_id": "Snippet11762184_35760.java", "target": 0, "func": "import java.security.*;\nimport javax.crypto.Cipher; \nimport javax.crypto.spec.SecretKeySpec;\nimport sun.misc.*;\n\npublic class Encryption {\nprivate static final String ALGORITHM = \"AES\";\nprivate static final byte[] keyValue = \n    new byte[] { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G' };\n\npublic static String encrypt(String valueToEnc) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGORITHM);\n    c.init(Cipher.ENCRYPT_MODE, key);\n    byte[] encValue = c.doFinal(valueToEnc.getBytes());\n    String encryptedValue = new BASE64Encoder().encode(encValue);\n    return encryptedValue;\n}\n\nprivate static Key generateKey() throws Exception {\n    Key key = new SecretKeySpec(keyValue, ALGORITHM);\n    return key;\n}\n\nprivate static String decrypt(String encryptedValue) throws Exception {\n    Key key = generateKey();\n    Cipher c = Cipher.getInstance(ALGORITHM);\n    c.init(Cipher.DECRYPT_MODE, key);\n    byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedValue);\n    byte[] decValue = c.doFinal(decordedValue);\n    String decryptedValue = new String(decValue);\n    return decryptedValue;\n}\n}\n", "idx": 2215}
{"project": "cipher", "commit_id": "Snippet40912549_22824.java", "target": 0, "func": " String text16 = \"6F4B1B252A5F0C3F2992E1A65E56E5B8\";\n    String secret16 = \"c4dcc3c6ce0acaec4327b6098260b0be\";\n\n    SecretKeySpec sks = new SecretKeySpec(secret16.getBytes(),\"AES\");\n    Cipher c = Cipher.getInstance(\"AES\");\n\n    c.init(Cipher.ENCRYPT_MODE, sks);\n    c.update(text16.getBytes());\n    byte[] ciphertext = c.doFinal();\n    Log.d(\"resultdebug\",new String(Hex.encode(ciphertext), \"ASCII\"));\n", "idx": 2216}
{"project": "cipher", "commit_id": "Snippet20871030_3466.java", "target": 0, "func": "  public static byte[] encrypt(byte[] raw, byte[] clear) throws Exception {\n\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n    byte[] encrypted = cipher.doFinal(clear);\n    return encrypted;\n}\n", "idx": 2217}
{"project": "cipher", "commit_id": "Snippet21190413_3733.java", "target": 0, "func": "import java.io.UnsupportedEncodingException;\nimport java.security.GeneralSecurityException;\n\nimport android.util.Base64\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\n\npublic class EncryptDecryptTest {\n\n  public static void main(String[] args) throws Exception {\n    String key = \"12345678\";\n    String ciphertext = encrypt(key, \"foo\");\n\n    String decrypted = decrypt(key, ciphertext.trim());\n    String encrypted = encrypt(key, decrypted.trim());\n\n    if (ciphertext.contentEquals(encrypted.trim())) {\n      System.out.println(\"decrypted!\");\n    } else {\n      System.out.println(\"wrong key!\");\n    }\n  }\n\n  public static String encrypt(String key, String data)\n      throws GeneralSecurityException, UnsupportedEncodingException {\n    DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(\"UTF8\"));\n    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);\n    byte[] dataBytes = data.getBytes(\"UTF8\");\n    Cipher cipher = Cipher.getInstance(\"DES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n    return Base64.encodeToString(cipher.doFinal(dataBytes), Base64.DEFAULT);\n  }\n\n  public static String decrypt(String key, String data)\n      throws GeneralSecurityException, UnsupportedEncodingException {\n    byte[] dataBytes = Base64.decode(data, Base64.DEFAULT);\n    DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(\"UTF8\"));\n    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);\n    Cipher cipher = Cipher.getInstance(\"DES\");\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\n    byte[] dataBytesDecrypted = (cipher.doFinal(dataBytes));\n    return new String(dataBytesDecrypted);\n  }    \n}\n", "idx": 2218}
{"project": "cipher", "commit_id": "Snippet27831154_9988.java", "target": 0, "func": "    public NewJFrame() {try{\n                String key = \"squirrel123\";\n                FileInputStream fis2 = newFileInputStream(\"encrypted.mui\");\n                FileOutputStream fos2 = new FileOutputStream(\"decrypt.rar\");\n\n                decrypt(key, fis2, fos2);\n                Desktop dk=Desktop.getDesktop();\n                File f = new File(\"decrypt.rar\");\n                dk.open(f);\n            }\n                catch (Throwable e) {\n         JOptionPane.showMessageDialog(null, e);\n    }}  \n    public static void decrypt(String key, InputStream is, OutputStream os) throws Throwable {\n    encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);\n}\n\npublic static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {\n\n    DESKeySpec dks = new DESKeySpec(key.getBytes());\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey desKey = skf.generateSecret(dks);\n    Cipher cipher = Cipher.getInstance(\"DES\"); // DES/ECB/PKCS5Padding for SunJCE\n\n    if (mode == Cipher.ENCRYPT_MODE) {\n        cipher.init(Cipher.ENCRYPT_MODE, desKey);\n        CipherInputStream cis = new CipherInputStream(is, cipher);\n        doCopy(cis, os);\n    } else if (mode == Cipher.DECRYPT_MODE) {\n        cipher.init(Cipher.DECRYPT_MODE, desKey);\n        CipherOutputStream cos = new CipherOutputStream(os, cipher);\n        doCopy(is, cos);\n    }\n}\n\npublic static void doCopy(InputStream is, OutputStream os) throws IOException {\n    byte[] bytes = new byte[64];\n    int numBytes;\n    while ((numBytes = is.read(bytes)) != -1) {\n        os.write(bytes, 0, numBytes);\n    }\n    os.flush();\n    os.close();\n    is.close();\n}\n", "idx": 2219}
{"project": "cipher", "commit_id": "Snippet9839754_34262.java", "target": 0, "func": "public String decrypt(byte[] pCryptedStringtoDecrypt) throws Exception{\n    byte[] key = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    System.arraycopy(this.passphrase.getBytes(), 0, key, 0, this.passphrase.getBytes().length);\n    SecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\");\n    byte[] encrypted = pCryptedStringtoDecrypt;\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n    byte[] original = cipher.doFinal(encrypted);\n    String originalString = new String(original);\n    return originalString;\n}\n", "idx": 2220}
{"project": "cipher", "commit_id": "Snippet44048908_26126.java", "target": 0, "func": "  XmlPullParser getXpp(InputStream is, String keyString){\n    DESKeySpec ks = new DESKeySpec(keyString.getBytes(\"ASCII\"));\n    SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DES\");\n    SecretKey key = skf.generateSecret(ks);\n\n    Cipher c = Cipher.getInstance(\"DES/CBC/PKCS7Padding\");\n    c.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(keyString.getBytes(\"ASCII\")));\n    CipherInputStream cis = new CipherInputStream(is, c);\n\n    XmlPullParserFactory factory = XmlPullParserFactory.newInstance();\n    factory.setNamespaceAware(true);\n    XmlPullParser xpp = factory.newPullParser();\n    xpp.setInput(cis, \"UTF-8\");\n    return xpp; \n}\n", "idx": 2221}
{"project": "cipher", "commit_id": "Snippet33579333_15628.java", "target": 0, "func": "public static String Encrypt(String plainText, byte[] key2) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {\n      byte[] encryptedTextBytes=null;\n      byte[] key3 =null;\n      MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n      key3= sha.digest(key2);\n      key3 = copyOf(key3, 16);\n      SecretKeySpec keySpec = new SecretKeySpec(key3, \"AES\");\n      // Instantiate the cipher\n      Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n      cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n      encryptedTextBytes = cipher.doFinal(plainText.getBytes(\"UTF-8\"));\n      return new Base64().encode(encryptedTextBytes);\n}\n", "idx": 2222}
{"project": "cipher", "commit_id": "Snippet24226554_6507.java", "target": 0, "func": "package Encrypt;\n\nimport org.apache.hadoop.hive.ql.exec.UDF;\nimport org.apache.hadoop.io.Text;\nimport java.security.*;\nimport org.apache.commons.codec.binary.Base64;\nimport java.io.*;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport javax.swing.JOptionPane;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic final class En1 extends UDF {\n\npublic Text evaluate(final Text s) throws Exception {\nif (s == null) {\n return null;\n}\nbyte[] sharedvector = {\n0x01, 0x02, 0x03, 0x05, 0x07, 0x0B, 0x0D, 0x11\n};\n\nString EncText = \"\";\nbyte[] keyArray = new byte[24];\nbyte[] temporaryKey;\nString key = \"developersnotedotcom\";\nbyte[] toEncryptArray = null;\n\n//try\n   // {\n\n    toEncryptArray =  s.toString().getBytes(\"UTF-8\");        \n    MessageDigest m = MessageDigest.getInstance(\"MD5\");\n    temporaryKey = m.digest(key.getBytes(\"UTF-8\"));\n\n    if(temporaryKey.length < 24) // DESede require 24 byte length key\n    {\n        int index = 0;\n        for(int i=temporaryKey.length;i< 24;i++)\n        {                   \n            keyArray[i] =  temporaryKey[index];\n        }\n    }        \n\n    Cipher c = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");            \n    c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keyArray, \"DESede\"), new IvParameterSpec(sharedvector));            \n    byte[] encrypted = c.doFinal(toEncryptArray);            \n    EncText = Base64.encodeBase64String(encrypted);\n\n\n//  }\n   /* catch(NoSuchAlgorithmException | UnsupportedEncodingException | NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException | IllegalBlockSizeException | BadPaddingException NoEx)\n{\n    //JOptionPane.showMessageDialog(null, NoEx);\n     System.out.println(NoEx);\n     System.exit(1);\n}*/\n\nreturn new Text(EncText.toString());        \n}\n\n}\n", "idx": 2223}
{"project": "cipher", "commit_id": "Snippet44211175_26125.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"PBEWITHSHA1ANDDESEDE\");\n", "idx": 2224}
{"project": "cipher", "commit_id": "Snippet25324304_7710.java", "target": 0, "func": "  byte [] key = \"AAAAA\".getBytes(\"ASCII\");\n\n  String clearText = \"66\";\n\n\n  Cipher rc4 = Cipher.getInstance(\"RC4\");\n  SecretKeySpec rc4Key = new SecretKeySpec(key, \"RC4\");\n  rc4.init(Cipher.ENCRYPT_MODE, rc4Key);\n  byte [] cipherText = rc4.update(clearText.getBytes(\"ASCII\"));\n", "idx": 2225}
{"project": "cipher", "commit_id": "Snippet42956231_25083.java", "target": 0, "func": "public static byte[] encryptWithAES(byte[] message, Key AESkey) throws Exception {\nbyte[] decryptedMessage = null;\ntry {\n    Cipher encrypt = Cipher.getInstance(\"AES/ECB/PKCS5Padding\"); // here is the change\n    encrypt.init(Cipher.ENCRYPT_MODE, AESkey);\n    decryptedMessage = encrypt.doFinal(message);\n} catch (Exception ex) {\n    System.err.println(ex.getMessage());\n    throw ex;\n}\nreturn decryptedMessage;\n}\n", "idx": 2226}
{"project": "cipher", "commit_id": "Snippet15190770_38288.java", "target": 0, "func": "public static String encrypt(byte[] raw, byte[] clear) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/ZeroBytePadding\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\n    byte[] encrypted = cipher.doFinal(clear);\n    return android.util.Base64.encodeToString(encrypted, android.util.Base64.NO_WRAP);\n}\n\npublic static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {\n    SecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/ZeroBytePadding\");\n    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\n    byte[] decrypted = cipher.doFinal(encrypted);\n    return decrypted;\n}\n", "idx": 2227}
{"project": "cipher", "commit_id": "Snippet30096206_12236.java", "target": 0, "func": "String str=message+username;\nbyte[] byte1= str.getBytes(\"UTF8\");\nbyte[] byte2= encrypt(pubk, byte1);\n\npublic byte[] encrypt(PublicKey key, byte[] plaintext)\n{\nCipher cipher = Cipher.getInstance(\"AES\");   \ncipher.init(Cipher.ENCRYPT_MODE, key);  \nreturn cipher.doFinal(plaintext);\n}\n", "idx": 2228}
{"project": "cipher", "commit_id": "Snippet12995990_36625.java", "target": 0, "func": "// in java\nchiper = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n", "idx": 2229}
{"project": "cipher", "commit_id": "Snippet45837757_27906.java", "target": 0, "func": "private String encryptDES(String sessionKey) throws Exception {\n    KeyGenerator keygenerator = KeyGenerator.getInstance(\"DESede\");\n    SecretKey myKey = keygenerator.generateKey();\n    SecureRandom sr = new SecureRandom(); \n    byte [] iv = new byte[8]; \n    sr.nextBytes(iv); \n    IvParameterSpec IV = new IvParameterSpec(iv);\n    Cipher cipher = Cipher.getInstance(\"DESede/CBC/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, myKey, IV);\n    String encrypted = Base64.encode(cipher.doFinal(sessionKey.getBytes()));\n    return encrypted;\n}\n", "idx": 2230}
{"project": "cipher", "commit_id": "Snippet31061831_13235.java", "target": 0, "func": "Cipher c = Cipher.getInstance(\"AES/ECB/NoPadding\");\nKey aesKey = new SecretKeySpec(key, \"AES\");\nc.init(Cipher.ENCRYPT_MODE, aesKey);\nfor (long i = 0; i < rounds; ++i) {\n     data = c.doFinal(data);\n}\n", "idx": 2231}
{"project": "cipher", "commit_id": "Snippet6538485_32176.java", "target": 0, "func": "byte[] key = //... secret sequence of bytes\nbyte[] dataToSend = ...\nCipher c = Cipher.getInstance(\"AES\");\nSecretKeySpec k = new SecretKeySpec(key, \"AES\");\nc.init(Cipher.ENCRYPT_MODE, k);\nbyte[] encryptedData = c.doFinal(dataToSend);\n", "idx": 2232}
{"project": "cipher", "commit_id": "Snippet15437189_38500.java", "target": 0, "func": "try{\n        //To generate the secret key\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\n        sKey = keyGen.generateKey();\n        //Initialize the cipher instance to use DES algorithm, ECB mode,\n        //and PKCS#5 padding scheme.\n        cipherObj = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n    }\n    catch(NoSuchAlgorithmException nsae){nsae.printStackTrace();\n\n    }\n    catch(NoSuchPaddingException nspe){nspe.printStackTrace();}\n", "idx": 2233}
{"project": "cipher", "commit_id": "Snippet21931925_4342.java", "target": 0, "func": "/**\n * \n * @param password\n * @return\n * @throws AuthException \n * @throws UnsupportedEncodingException \n */\npublic static String encryptPassword(String password) throws AuthException, UnsupportedEncodingException{\n    byte[] textEncrypted = \"\".getBytes();\n    try{\n\n        DESKeySpec keySpec = new DESKeySpec(Constants.DESkey);\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey myDesKey = keyFactory.generateSecret(keySpec);\n\n        Cipher desCipher;\n\n        // Create the cipher \n        desCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        AlgorithmParameterSpec alogrithm_specs = new IvParameterSpec(Constants.DESkey);\n\n        // Initialize the cipher for encryption\n        desCipher.init(Cipher.ENCRYPT_MODE, myDesKey, alogrithm_specs);\n\n        //sensitive information\n        byte[] text = password.getBytes(\"UTF-8\");\n\n        // Encrypt the text\n        textEncrypted = desCipher.doFinal(text);\n\n    }catch(NoSuchAlgorithmException e){\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    }catch(NoSuchPaddingException e){\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    }catch(InvalidKeyException e){\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    }catch(IllegalBlockSizeException e){\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    }catch(BadPaddingException e){\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    } catch (InvalidKeySpecException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    } catch (InvalidAlgorithmParameterException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the encryption phase\");\n    } \n\n    return BaseEncoding.base64().encode(textEncrypted);\n\n}   \n\n/**\n * \n * @param passwordDecrypted\n * @return\n * @throws AuthException \n * @throws UnsupportedEncodingException \n */\n\npublic static String decryptPassword(String passwordToDecrypt) throws AuthException, UnsupportedEncodingException{\n\n    DESKeySpec keySpec;\n    byte[] textDecrypted = \"\".getBytes();\n    try {\n        keySpec = new DESKeySpec(Constants.DESkey);\n\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey myDesKey = keyFactory.generateSecret(keySpec);\n\n        Cipher desCipher;\n\n        AlgorithmParameterSpec alogrithm_specs = new IvParameterSpec(Constants.DESkey);\n\n        // Create the cipher \n        //desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        desCipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\n        // Initialize the same cipher for decryption\n        desCipher.init(Cipher.DECRYPT_MODE, myDesKey, alogrithm_specs);\n\n        // Decrypt the text\n        byte[] passwordToDecryptByte = BaseEncoding.base64().decode(passwordToDecrypt);\n\n       textDecrypted = desCipher.doFinal(passwordToDecryptByte);\n\n    } catch (InvalidKeyException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    } catch (InvalidKeySpecException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    } catch (NoSuchPaddingException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    } catch (IllegalBlockSizeException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    } catch (BadPaddingException e) {\n        e.printStackTrace();\n        logger.error(\"Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    } catch (InvalidAlgorithmParameterException e) {\n        e.printStackTrace();\n        logger.error(\"[AUTH] Auth Exception...there is something wrong at the encryption phase\\n\" + e.getMessage());\n        throw new AuthException(\"Auth Exception...there is something wrong at the decryption phase\");\n    }\n\n    return new String(textDecrypted);\n\n\n}\n\n\npublic static void main(String[] args) throws AuthException, UnsupportedEncodingException{\n    String password = encryptPassword(\"testtest19\");\n\n    System.out.println(password + \" --> \" + \"\\\"\" + decryptPassword(password)+ \"\\\"\");\n\n}\n", "idx": 2234}
{"project": "cipher", "commit_id": "Snippet29642271_11710.java", "target": 0, "func": "public Decrypt(String path, String pathcode) {\n        // TODO Auto-generated constructor stub\n        filepath = path;\n        try {\n            fis = new FileInputStream(new File(path));\n            this.passcode = pathcode;\n        } catch (FileNotFoundException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    }\n\n    static String decrypt() throws IOException, NoSuchAlgorithmException,\n    NoSuchPaddingException, InvalidKeyException {\n\n        SecretKeySpec sks = new SecretKeySpec(passcode.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, sks);\n        CipherInputStream cis = new CipherInputStream(fis, cipher);\n        int size = fis.available();\n        byte[] resdata = new byte[size];\n        cis.read(resdata, 0, size);\n        String newres = new String(resdata, \"UTF-8\").trim();\n        //write(\"decrypted_file.xhtml\",newres);  \n        if(fis!=null)\n        {\n        fis.close();\n        }\n        if(cis!=null)\n            cis.close();\n        return newres;\n    }\n", "idx": 2235}
{"project": "cipher", "commit_id": "Snippet15948662_38931.java", "target": 0, "func": "String encryptedString = \u2026 ;\nString decryptedString = null;\nSecretKeySpec key = new SecretKeySpec(myKey.getBytes(), \"Blowfish\");\nCipher cipher;\ntry {\n    cipher = Cipher.getInstance(\"Blowfish\");\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    byte[] decrypted = cipher.doFinal(encryptedString.getBytes());\n    decryptedString = new String(decrypted, Charset.forName(\"UTF-8\"));\n} [ catch Exceptions \u2026 ]\n", "idx": 2236}
{"project": "cipher", "commit_id": "Snippet36671630_18532.java", "target": 0, "func": "import java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Scanner;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport sun.misc.BASE64Encoder;\nimport sun.misc.BASE64Decoder;\n\npublic class Application { \n\n    public Application() {\n        // TODO Auto-generated constructor stub\n    }\n\n    public static void main ( String[] args ) {\n        Scanner input = new Scanner(System.in);\n        String textToEncrypt = \"Hello World\";\n        String textToDecrypt;\n        String textToDecryptAscii;\n        String result;\n        int operation;\n        Cipher cipher = null;\n        try {\n            cipher = Cipher.getInstance(\"AES\");\n        } catch (NoSuchAlgorithmException e1) {\n            e1.printStackTrace();\n        } catch (NoSuchPaddingException e1) {\n            e1.printStackTrace();\n        }\n\n        //String key = \"Bar12345Bar12345\"; // 128 bit key\n        String key = null;\n        //byte[] key = null;\n\n        //BASE64Encoder asciiEncoder = new BASE64Encoder();\n        //BASE64Decoder asciiDecoder = new BASE64Decoder();\n\n        //System.out.printf(\"Enter:\\n1 for encryption\\n2 for decryption\\n\\nChoice: \");\n        //operation = input.nextInt();\n        //input.nextLine();\n\n        try { \n            System.out.print(\"Enter a 128-bit key to be used for encryption: \");\n            key = input.nextLine();\n\n            if ( key.length() != 16 ) {\n                while ( key.length() != 16 ) {\n                    System.out.print(\"You need to enter a *128-bit* key: \");\n                    key = input.nextLine();\n                }\n            }\n            System.out.println ( \"128-bit encryption key.......................[\"+key+\"] length [\"+key.length ()+\"]\");\n\n            System.out.printf ( \"Text to encrypt..............................[\");\n            //System.out.printf(\"\\n---------\\n\\nText to encrypt: \");\n            textToEncrypt = input.nextLine();\n            System.out.println ( \"Text to encrypt..............................[\"+textToEncrypt+\"] length [\"+textToEncrypt.length ()+\"]\");\n\n            //Create key and cipher\n            Key aesKey = new SecretKeySpec(key.trim().getBytes(), \"AES\");\n            //Cipher cipher = Cipher.getInstance(\"AES\");\n\n            //encrypt the text\n            cipher.init(Cipher.ENCRYPT_MODE, aesKey);\n            byte[] encrypted = cipher.doFinal(textToEncrypt.getBytes ());\n\n            StringBuilder sb = new StringBuilder();\n            for (byte b: encrypted) {\n                sb.append((char)b);\n            }\n\n            // the encrypted String\n            String enc = sb.toString();\n            System.out.println ( \"Encrypted text...............................[\"+enc+\"] length [\"+enc.length ()+\"]\");\n            //System.out.println(\"encrypted:\" + enc);\n\n            //String asciiEncodedEncryptedResult = asciiEncoder.encodeBuffer(enc.getBytes()).trim ();\n            String asciiEncodedEncryptedResult = enc.trim ();\n            System.out.println ( \"Encoded text.................................[\"+asciiEncodedEncryptedResult+\"] length [\"+asciiEncodedEncryptedResult.length ()+\"]\");\n\n            //asciiEncodedEncryptedResult = asciiEncodedEncryptedResult.replace(\"\\n\", \"\").replace(\"\\r\", \"\");\n            asciiEncodedEncryptedResult = asciiEncodedEncryptedResult.trim ();\n\n            System.out.println ( \"Encrypted text...............................[\"+asciiEncodedEncryptedResult+\"] length [\"+asciiEncodedEncryptedResult.length ()+\"]\");\n\n\n            //byte[] decodedBytes = null;\n            //try {\n            //    decodedBytes = asciiDecoder.decodeBuffer(asciiEncodedEncryptedResult);\n            //} \n            //catch (IOException e1) {\n            //    e1.printStackTrace();\n            //}\n            //System.out.println ( \"Decoded Bytes................................[\"+decodedBytes+\"] length [\"+decodedBytes.length+\"]\");\n\n            //textToDecrypt = new String(decodedBytes);\n            textToDecrypt = asciiEncodedEncryptedResult;\n\n            System.out.println ( \"Text to Decrypt..............................[\"+textToDecrypt+\"] length [\"+textToDecrypt.length()+\"]\");\n\n            //Convert the string to byte array\n            //for decryption\n            byte[] bb = new byte[textToDecrypt.length()];\n            for ( int i=0; i<textToDecrypt.length(); i++ ) {\n                bb[i] = (byte) textToDecrypt.charAt(i);\n            }\n\n            //decrypt the text\n            //Key aesKey = null;\n            String decrypted = null;\n            try {\n                //aesKey = new SecretKeySpec(key.trim ().getBytes (), \"AES\");\n                cipher.init(Cipher.DECRYPT_MODE, aesKey);\n                decrypted = new String(cipher.doFinal(bb));\n            }\n            catch (InvalidKeyException e) {\n                e.printStackTrace();\n            }\n            catch (IllegalBlockSizeException e) {\n                e.printStackTrace();\n            }\n            catch (BadPaddingException e) {\n                e.printStackTrace();\n            }\n            catch ( Exception ltheXcp ) { \n                ltheXcp.printStackTrace ();\n            }\n\n            if ( decrypted != null ) {\n                System.out.println ( \"Decrypted text...............................[\"+decrypted+\"] length [\"+decrypted.length ()+\"]\");\n            }\n            else { \n                System.out.println ( \"Decrypted text...............................[\"+decrypted+\"] length []\");\n            }\n\n        }\n        catch ( Exception ltheXcp ) { \n            ltheXcp.printStackTrace ();\n        }\n\n    }\n}\n", "idx": 2237}
{"project": "cipher", "commit_id": "Snippet29053269_11125.java", "target": 0, "func": "Protected String ScrambledPic(String ImageNow, String key)\n{\ntry{  \n\n        File ImageOld = new File(Environment.getExternalStorageDirectory(), ImageNow);\n        FileInputStream file = new FileInputStream(ImageOld);       \n        Bitmap bm=null;\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        bm.compress(Bitmap.CompressFormat.JPEG, 100, bytes);\n        File NewPhoto = new File(Environment.getExternalStorageDirectory()\n               + File.separator + \"picEnc.jpg\");\n        NewPhoto.createNewFile();\n        FileOutputStream outStream = new FileOutputStream(NewPhoto);\n        byte k[]= key.getBytes();\n        SecretKeySpec KEYY=new SecretKeySpec(k, \"DES\");\n        Cipher enc = Cipher.getInstance(\"DES\");\n        enc.init(Cipher.ENCRYPT_MODE, KEYY);\n        CipherOutputStream cos = new CipherOutputStream(outStream,enc);\n        byte[] buffer = new byte[1024];\n        int read;\n        while((read=file.read(buffer))!=-1){\n            cos.write(buffer, 0, read);\n        }\n        file.close();\n        outStream.flush();\n        cos.close();\n        Toast.makeText(getBaseContext(), \"Photo Encrypted\", Toast.LENGTH_LONG).show();\n        NewImageUri = Uri.fromFile(NewPhoto);\n        ImageView scrambled = (ImageView)findViewById(R.id.scrambled);\n\n        return NewImageUri.toString();\n\n    }\n\ncatch(FileNotFoundException e) {\nToast.makeText(getBaseContext(), \"File Not Found\", Toast.LENGTH_LONG).show();\nreturn null;\n}\n    catch (IOException e){\n        Toast.makeText(getBaseContext(), \"IOException\", Toast.LENGTH_LONG).show();\n        return ImageNow;\n    }\n    catch (NoSuchPaddingException e){\n        Toast.makeText(getBaseContext(), \"Padding Error\", Toast.LENGTH_LONG).show();\n        return ImageNow;\n    }\n    catch (NoSuchAlgorithmException e){\n        Toast.makeText(getBaseContext(), \"No Such Algorithm\", Toast.LENGTH_LONG).show();\n        return ImageNow;\n    }\n    catch (InvalidKeyException e){\n        Toast.makeText(getBaseContext(), \"Invalid Key\", Toast.LENGTH_LONG).show();\n        return ImageNow;\n    }\n}\n", "idx": 2238}
{"project": "cipher", "commit_id": "Snippet32087235_14147.java", "target": 0, "func": "<%\n//variable declaration for encrypt and decrypt\nbyte [] input ;\nbyte [] keyBytes = \"12345678\".getBytes();\nbyte [] ivBytes =\"input123\".getBytes();\n\nSecretKeySpec key = new SecretKeySpec(keyBytes,\"DES\");\nIvParameterSpec ivSpec = new IvParameterSpec(ivBytes);\nCipher cipher;\nbyte[] cipherText;\nint ctLength=0;\n\nClass.forName(\"com.mysql.jdbc.Driver\");\nconn = DriverManager.getConnection(CONN_STRING, USERNAME, PASSWORD);\n\nif(request.getParameter(\"submit\")!=null){\n    String cuser=request.getParameter(\"currentusername\"); \n    String user = request.getParameter(\"username\");\n    String pwd = request.getParameter(\"password\");\n    String cpwd = request.getParameter(\"confirmpassword\");\n\n    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n      input = pwd.getBytes();\n      key = new SecretKeySpec(keyBytes, \"DES\");\n      ivSpec = new IvParameterSpec(ivBytes);\n      cipher = Cipher.getInstance(\"DES/CTR/NoPadding\",\"BC\");\n\n      cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);\n      cipherText = new byte[cipher.getOutputSize(input.length)];\n\n      ctLength+=cipher.update(input, 0, input.length, cipherText, 0);\n\n      ctLength+= cipher.doFinal(cipherText, ctLength);\n      String enpwd = new String(cipherText);\n\n\n     String sql2 = \"update webadmin set username=? ,password=? where username='\"+cuser+\"' \";\n\n     if((cuser!=null &&cuser.length()>0) \n        && (user!=null &&user.length()>0)  \n        && (pwd!=null && pwd.length()>0)\n        && cpwd!=null && cpwd.length()>0) {\n\n         if((pwd.equals(cpwd))){\n           pst =conn.prepareStatement(sql2);\n           pst.setString(1, user);\n           pst.setString(2, enpwd);\n\n            pst.executeUpdate();\n%>\n <script language=\"JavaScript\">\n     alert(\"Sucessfully Updated\");\n </script>\n <%\n         }else{\n             %>\n           <script language=\"JavaScript\">\n            alert(\"Passwords are not matching try again\");\n            </script>\n           <%\n\n     }\n    }\n  }\n}\n\n%> \n", "idx": 2239}
{"project": "cipher", "commit_id": "Snippet40845294_22722.java", "target": 0, "func": "public static String decodeParam(String content,String key){\n    String decodeParams = \"\";\n    byte[] decodeByte =  parseHexStr2Byte(content);\n    try {\n        decodeParams = deCrypt(decodeByte,key);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return decodeParams;\n}\n\npublic static byte[] parseHexStr2Byte(String hexStr) {\n        if (hexStr.length() < 1)\n                return null;\n        byte[] result = new byte[hexStr.length()/2];\n        for (int i = 0;i< hexStr.length()/2; i++) {\n                int high = Integer.parseInt(hexStr.substring(i*2, i*2+1), 16);\n                int low = Integer.parseInt(hexStr.substring(i*2+1, i*2+2), 16);\n                result[i] = (byte) (high * 16 + low);\n        }\n        return result;\n}\n\npublic static String deCrypt (byte[] src,String strKey) throws Exception{\n    KeyGenerator keygen;\n    SecretKey desKey;\n    Cipher c;\n    byte[] cByte;\n\n    keygen = KeyGenerator.getInstance(\"AES\");\n    SecureRandom secureRandom = SecureRandom.getInstance(\"SHA1PRNG\");\n    secureRandom.setSeed(strKey.getBytes());\n    keygen.init(128, secureRandom);\n\n    SecretKeySpec securekey = new SecretKeySpec(strKey.getBytes(), \"AES\");\n\n    desKey = keygen.generateKey();\n    c = Cipher.getInstance(\"AES\");\n\n    c.init(Cipher.DECRYPT_MODE, desKey);\n\n\n    cByte = c.doFinal(src);\n\n    return new String(cByte,\"UTF-8\");\n}\n", "idx": 2240}
{"project": "cipher", "commit_id": "Snippet31018086_13199.java", "target": 0, "func": "public class SampleEncryptor extends SecretKeyWrapper{\nprivate static final SecureRandom RANDOM = new SecureRandom();\n\nprivate SharedPreferences pref;\nprivate SecretKey secretKey;\nprivate byte[] encryptedKey;\n\npublic SampleEncryptor(Context context)\n        throws GeneralSecurityException, IOException {\n    super(context, \"myalias\");\n    this.pref = context.getSharedPreferences(\"mySecretKeyStore\", Context.MODE_PRIVATE);\n    String base64key = pref.getString(\"key\", null);\n    if(base64key==null){\n        this.secretKey = KeyGenerator.getInstance(\"AES\").generateKey();\n        this.encryptedKey = this.wrap(this.secretKey);\n        pref.edit().putString(\"key\", Base64.encodeToString(encryptedKey, Base64.DEFAULT)).commit();\n    }else{\n        this.encryptedKey = Base64.decode(base64key, Base64.DEFAULT);\n        this.secretKey = this.unwrap(this.encryptedKey);\n    }\n}\n\npublic byte[] encrypt(byte[] data) throws GeneralSecurityException{     \n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n    return  cipher.doFinal(data);\n}\n\npublic byte[] decrypt(byte[] data) throws GeneralSecurityException{\n    Cipher cipher = Cipher.getInstance(\"AES\");\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\n    return  cipher.doFinal(data);\n}\n\npublic String encryptBoolean(boolean value) throws GeneralSecurityException{\n    BigInteger i = new BigInteger(128, RANDOM);\n    if(value){\n        i = i.setBit(0);\n    }else{\n        i = i.clearBit(0);\n    }\n    byte[] encrypted =  encrypt(i.toByteArray());\n\n    return Base64.encodeToString(encrypted, Base64.DEFAULT);\n}\n\npublic Boolean decryptBoolean(String encrypted) throws GeneralSecurityException{\n    byte[] data = Base64.decode(encrypted, Base64.DEFAULT);     \n    BigInteger i = new BigInteger(decrypt(data));\n    return i.testBit(0);\n}\n", "idx": 2241}
{"project": "cipher", "commit_id": "Snippet34433376_16429.java", "target": 0, "func": "cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n", "idx": 2242}
{"project": "cipher", "commit_id": "Snippet28347341_10533.java", "target": 0, "func": "private static final String KEY = \"a2[..]\";\nprivate static final String SALT = \"t[..]\";\nprivate static final String IV = \"u[..]\";\nprivate static final String DES_EDE_PKCS5 = \"DESede/CBC/PKCS5Padding\"\n\npublic static String encrypt(String password) {\n    byte[] byteSalt = Base64.decode(SALT, Base64.DEFAULT);\n    byte[] bytesIv = Base64.decode(IV, Base64.DEFAULT);\n    String mdp = \"\";        \n    try {           \n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");          \n        KeySpec spec = new PBEKeySpec(KEY.toCharArray(), byteSalt, NB_ITER_RFC, SIZE_KEY);          \n        SecretKey secretKey = factory.generateSecret(spec);             \n        Cipher c = Cipher.getInstance(DES_EDE_PKCS5);           \n        IvParameterSpec ivParam = new IvParameterSpec(bytesIv);         \n        c.init(Cipher.ENCRYPT_MODE, secretKey, ivParam);                \n        byte[] encrypted = c.doFinal(password.getBytes(\"UTF-8\"));\n        mdp = Base64.encodeToString(encrypted, Base64.DEFAULT);                 \n    }\n    catch [..]\n    return mdp;\n}\n", "idx": 2243}
{"project": "cipher", "commit_id": "Snippet7977008_33011.java", "target": 0, "func": " public static String encrypt( String content, String password ) throws NoSuchAlgorithmException,\n    NoSuchPaddingException, UnsupportedEncodingException, InvalidKeyException, IllegalBlockSizeException,\n    BadPaddingException\n{\n    KeyGenerator kgen = KeyGenerator.getInstance( \"AES\" );\n    kgen.init( 128, new SecureRandom( password.getBytes() ) );\n    SecretKey secretKey = kgen.generateKey();\n    byte[] enCodeFormat = secretKey.getEncoded();\n    SecretKeySpec key = new SecretKeySpec( enCodeFormat, \"AES\" );\n    Cipher cipher = Cipher.getInstance( \"AES\" );\n    byte[] byteContent = content.getBytes( \"utf-8\" );\n    cipher.init( Cipher.ENCRYPT_MODE, key );\n    byte[] result = cipher.doFinal( byteContent );\n    return parseByte2HexStr( result );\n}\n\n\npublic static String decrypt( String contents, String password ) throws NoSuchAlgorithmException,\n    NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException\n{\n    byte[] content = parseHexStr2Byte( contents );\n    KeyGenerator kgen = KeyGenerator.getInstance( \"AES\" );\n    kgen.init( 128, new SecureRandom( password.getBytes() ) );\n    SecretKey secretKey = kgen.generateKey();\n    byte[] enCodeFormat = secretKey.getEncoded();\n    SecretKeySpec key = new SecretKeySpec( enCodeFormat, \"AES\" );\n    Cipher cipher = Cipher.getInstance( \"AES\" );  \n    cipher.init( Cipher.DECRYPT_MODE, key );\n    byte[] result = cipher.doFinal( content );\n    return new String( result ); \n}\n\n\npublic static String parseByte2HexStr( byte buf[] )\n{\n    StringBuffer sb = new StringBuffer();\n    for( int i = 0; i < buf.length; i++ )\n    {\n        String hex = Integer.toHexString( buf[i] & 0xFF );\n        if( hex.length() == 1 )\n        {\n            hex = '0' + hex;\n        }\n        sb.append( hex.toUpperCase() );\n    }\n    return sb.toString();\n}\n\n\npublic static byte[] parseHexStr2Byte( String hexStr )\n{\n    if( hexStr.length() < 1 )\n        return null;\n    byte[] result = new byte[ hexStr.length() / 2 ];\n    for( int i = 0; i < hexStr.length() / 2; i++ )\n    {\n        int high = Integer.parseInt( hexStr.substring( i * 2, i * 2 + 1 ), 16 );\n        int low = Integer.parseInt( hexStr.substring( i * 2 + 1, i * 2 + 2 ), 16 );\n        result[i] = ( byte ) ( high * 16 + low );\n    }\n    return result;\n}\n", "idx": 2244}
{"project": "cipher", "commit_id": "Snippet15807423_38811.java", "target": 0, "func": "public class Storage \n{\n    private final byte[] salt = {\n            ( byte )0xf5, ( byte )0x33, ( byte )0x01, ( byte )0x2a,\n            ( byte )0xb2, ( byte )0xcc, ( byte )0xe4, ( byte )0x7f\n            };\n        private int iterationCount = 100;\n\n        public void encryptAndWriteToFile(String host,String user,String pw,boolean flag)\n        {\n            String usr=host+\",\"+user+\",\"+pw+\",\"+Boolean.toString(flag);\n            Cipher cipher = null;\n            try \n            {\n                PBEKeySpec keySpec =new PBEKeySpec(usr.toCharArray());\n                SecretKeyFactory keyFactory =SecretKeyFactory.getInstance( \"PBEWithMD5AndDES\" );\n                SecretKey secretKey = keyFactory.generateSecret( keySpec );\n                PBEParameterSpec parameterSpec =new PBEParameterSpec( salt, iterationCount );\n                cipher = Cipher.getInstance( \"PBEWithMD5AndDES\" );\n                cipher.init( Cipher.ENCRYPT_MODE, secretKey,parameterSpec );\n            }catch ( NoSuchAlgorithmException exception )\n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }catch ( InvalidKeySpecException exception )\n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }catch ( InvalidKeyException exception )\n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }catch ( NoSuchPaddingException exception )\n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }catch ( InvalidAlgorithmParameterException exception )\n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }\n            byte[] outputArray = null;\n            try \n            {\n                outputArray = usr.getBytes( \"ISO-8859-1\" );\n            }catch (UnsupportedEncodingException ex) \n            {\n                        Logger.getLogger(Storage.class.getName()).log(Level.SEVERE, null, ex);\n            }\n            File sdCard=Environment.getExternalStorageDirectory();//+\"/userData.txt\";\n            String user_credentails=sdCard.getName()+\"/userData.txt\";\n            File file = new File(user_credentails);\n            Log.d(user_credentails, \"is input file \");\n            FileOutputStream fileOutputStream = null;\n            try\n            {\n                fileOutputStream = new FileOutputStream( file );\n            }catch ( IOException exception )\n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }\n            CipherOutputStream out =new CipherOutputStream( fileOutputStream, cipher );\n            try\n            {\n                out.write( outputArray );\n                out.flush();\n                out.close();\n            }catch ( IOException exception )\n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }\n            Vector fileBytes = new Vector();\n            try \n            {\n                FileInputStream in = new FileInputStream( file );\n                byte contents;\n                while ( in.available() > 0 ) {\n                contents = ( byte )in.read();\n                fileBytes.add( new Byte( contents ) );\n                }\n                in.close();\n            }catch ( IOException exception )\n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }\n            byte[] encryptedText = new byte[ fileBytes.size() ];\n            for ( int i = 0; i < fileBytes.size(); i++ ) \n            {\n                encryptedText[ i ] =\n                ( ( Byte ) fileBytes.elementAt( i ) ).byteValue();\n            }\n        }\n        public String[] readFromFileAndDecrypt(boolean state)\n        {\n            Vector fileBytes = new Vector();\n            String pw = \"123\";\n            String fileName = \"security.txt\";\n            String usr=\"10.0.2.2\"+\",\"+\"haider\"+\",\"+pw+\",\"+Boolean.toString(state);\n            Cipher cipher = null;\n            try \n            {\n                PBEKeySpec keySpec =new PBEKeySpec(usr.toCharArray());\n                SecretKeyFactory keyFactory =SecretKeyFactory.getInstance( \"PBEWithMD5AndDES\" );\n                SecretKey secretKey = keyFactory.generateSecret( keySpec );\n                PBEParameterSpec parameterSpec =new PBEParameterSpec( salt, iterationCount );\n                cipher = Cipher.getInstance( \"PBEWithMD5AndDES\" );\n\n                cipher.init( Cipher.DECRYPT_MODE, secretKey,parameterSpec );\n            }catch ( NoSuchAlgorithmException exception ) \n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }catch ( InvalidKeySpecException exception ) \n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }catch ( InvalidKeyException exception )\n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }catch ( NoSuchPaddingException exception )\n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }catch ( InvalidAlgorithmParameterException exception )\n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }\n            try \n            {\n                File sdCard=Environment.getExternalStorageDirectory();\n                String user_credentails=sdCard.getAbsolutePath()+\"/userData.txt\";\n                Log.d(user_credentails, \" is file name and path\");\n                File file = new File(user_credentails);\n                FileInputStream fileInputStream =new FileInputStream( file );\n                CipherInputStream in =new CipherInputStream( fileInputStream, cipher );\n                byte contents = ( byte ) in.read();\n                Log.d(Byte.toString(contents),\"  is line\");//.out.println(\"\\n\"+contents+\"\\n\");\n                while ( contents != -1 ) \n                {\n                    fileBytes.add( new Byte( contents ) );\n                    contents = ( byte ) in.read();\n                }\n                in.close();\n            }catch ( IOException exception ) \n            {\n                exception.printStackTrace();\n                System.exit( 1 );\n            }\n            byte[] decryptedText = new byte[ fileBytes.size() ];\n            for( int i = 0; i < fileBytes.size(); i++ ) \n            {\n                 decryptedText[ i ] =( ( Byte )fileBytes.elementAt( i ) ).byteValue();\n            }\n            Log.d(new String(decryptedText),\" is data\");\n            String uUser=new String( decryptedText );\n            String[] delims=uUser.split(\",\");\n            return delims;\n        }\n\n}\n", "idx": 2245}
{"project": "cipher", "commit_id": "Snippet22285670_4682.java", "target": 0, "func": "import java.security.spec.*;\nimport javax.crypto.*;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESedeKeySpec;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class DESedeEncryption {\npublic static void main(String[] args) {\n\nSecretKey k1 = generateDESkey();\nSecretKey k2 = generateDESkey();\nSecretKey k3 = generateDESkey();\n\nString firstEncryption = desEncryption(\"plaintext\", k1);\nString decryption = desDecryption(firstEncryption, k2);\nString secondEncryption = desEncryption(decryption, k3);\nSystem.out.println(\"secondEncryption: \"+secondEncryption);\nSystem.out.println(\"firstEncryption: \"+firstEncryption);\nSystem.out.println(\"decryption: \"+decryption);\n\n}\n\npublic static SecretKey generateDESkey() {\nKeyGenerator keyGen = null;\ntry {\n    keyGen = KeyGenerator.getInstance(\"DESede\");\n} catch (Exception ex) {\n  ex.printStackTrace();\n}\nkeyGen.init(168); // key length 112 for two keys, 168 for three keys\nSecretKey secretKey = keyGen.generateKey();\nreturn secretKey;\n}\n\npublic static String desEncryption(String strToEncrypt, SecretKey desKey) {\ntry {\n    Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    cipher.init(Cipher.ENCRYPT_MODE, desKey);\n    String encryptedString = new      BASE64Encoder().encode(cipher.doFinal(strToEncrypt.getBytes()));\n    return encryptedString;\n\n\n} catch (Exception ex) {\n  ex.printStackTrace();\n}\nreturn null;\n}\n\npublic static String desDecryption(String strToDecrypt, SecretKey desKey) {\ntry {\n    Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n    cipher.init(Cipher.DECRYPT_MODE, desKey);\n    String decryptedString = new String(cipher.doFinal(new     BASE64Decoder().decodeBuffer(strToDecrypt)));\n    return decryptedString;\n\n\n} \ncatch (Exception ex) {\n  ex.printStackTrace();\n}\nreturn null;\n}\n}\n", "idx": 2246}
{"project": "cipher", "commit_id": "Snippet11477175_35585.java", "target": 0, "func": "                    // Encrypt\n                    byte[] input = jo.toString().getBytes(\"UTF-8\");\n\n                    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n                    byte[] thedigest = md.digest(ENCRYPTION_KEY.getBytes(\"UTF-8\"));\n                    SecretKeySpec skc = new SecretKeySpec(thedigest, \"AES/ECB/PKCS5Padding\");\n                    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n                    cipher.init(Cipher.ENCRYPT_MODE, skc);\n\n                    byte[] cipherText = new byte[cipher.getOutputSize(input.length)];\n                    int ctLength = cipher.update(input, 0, input.length, cipherText, 0);\n                    ctLength += cipher.doFinal(cipherText, ctLength);\n                    String query = Base64.encodeToString(cipherText, Base64.DEFAULT);\n", "idx": 2247}
{"project": "cipher", "commit_id": "Snippet33818977_15847.java", "target": 0, "func": "Cipher cipher = Cipher.getInstance(\"DES\");\n", "idx": 2248}
{"project": "cipher", "commit_id": "Snippet41974603_23963.java", "target": 0, "func": "Cipher.getInstance(\"AES/ECB/NoPadding\");", "idx": 2249}
{"project": "cipher", "commit_id": "Snippet23070838_5446.java", "target": 0, "func": "public static PrivateKey readPrivateKeyFromFile(File file, String chaveSecreta) {\n    try {\n        SecureRandom r = new SecureRandom(chaveSecreta.getBytes());\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\n        keyGen.init(56, r);\n        Key key = keyGen.generateKey();\n\n        byte[] privateKeyBytes = decryptPKFile(file, key);\n\n        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n        EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyBytes);\n        PrivateKey privateKey = null;\n        try {\n            privateKey = keyFactory.generatePrivate(privateKeySpec);\n        } catch (InvalidKeySpecException e) {\n            JOptionPane.showMessageDialog(null, \"Erro 01, tente mais tarde\");\n        }\n        return privateKey;\n    } catch (NoSuchAlgorithmException e) {\n        JOptionPane.showMessageDialog(null, \"Erro 02, tente mais tarde\");\n    }\n    return null;\n}\n\npublic static byte[] decryptPKFile(File file, Key key){\n    try{\n        Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n        byte[] cipherText = readBytes(file);\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        System.out.println(cipher);\n        System.out.println(cipherText);\n        byte[] text = cipher.doFinal(cipherText);\n        return text;\n    }catch(Exception e){\n        e.printStackTrace();\n        return null;\n    }\n}\n\npublic static byte[] readBytes(File file) {\n    try {\n        FileInputStream fs = new FileInputStream(file);\n        byte content[] = new byte[(int) file.length()];\n        fs.read(content);\n        return content;\n    } catch (FileNotFoundException e) {\n        System.out.println(\"Arquivo n\u00e3o encontrado!\");\n        e.printStackTrace();\n    } catch (IOException ioe) {\n        System.out.println(\"Erro ao ler arquivo!\");\n        ioe.printStackTrace();\n    }\n    return null;\n}\n", "idx": 2250}
{"project": "cipher", "commit_id": "Snippet16192140_39058.java", "target": 0, "func": "Cipher aes = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");//Gave padding during encryption too\naes.init(Cipher.ENCRYPT_MODE, generateKey());\nbyte[] ciphertext = aes.doFinal(rawPassword.getBytes());\n", "idx": 2251}
{"project": "cipher", "commit_id": "Snippet42548963_24595.java", "target": 0, "func": "String keyAlg = \"AES\";\nString cipherAlg = \"AES/ECB/PKCS5Padding\";\nbyte[] data = new byte[]{14,23,3,45,62};\nbyte[] pswdBytes = new byte[]{1,2,3,4,6};\nMessageDigest digest = MessageDigest.getInstance(\"MD5\");\nbyte[] hash = digest.digest(pswdBytes);\n\n\nKey key = new SecretKeySpec(hash , keyAlg);\nCipher cipher = Cipher.getInstance(cipherAlg);\ncipher.init(Cipher.ENCRYPT_MODE, key);\nbyte[] encVal = cipher.doFinal(data);\n", "idx": 2252}
{"project": "cipher", "commit_id": "Snippet30431207_12585.java", "target": 0, "func": "import javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport android.util.Base64;\n\npublic class SimpleCrypto {\n\n    private String charsetName = \"UTF8\";\n    private String algorithm = \"DES\";\n    private int base64Mode = Base64.DEFAULT;\n\n    public String getCharsetName() {\n        return charsetName;\n    }\n\n    public void setCharsetName(String charsetName) {\n        this.charsetName = charsetName;\n    }\n\n    public String getAlgorithm() {\n        return algorithm;\n    }\n\n    public void setAlgorithm(String algorithm) {\n        this.algorithm = algorithm;\n    }\n\n    public int getBase64Mode() {\n        return base64Mode;\n    }\n\n    public void setBase64Mode(int base64Mode) {\n        this.base64Mode = base64Mode;\n    }\n\n    public String encrypt(String key, String data) {\n        if (key == null || data == null)\n            return null;\n        try {\n            DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(charsetName));\n            SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithm);\n            SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);\n            byte[] dataBytes = data.getBytes(charsetName);\n            Cipher cipher = Cipher.getInstance(algorithm);\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            return Base64.encodeToString(cipher.doFinal(dataBytes), base64Mode);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    public String decrypt(String key, String data) {\n        if (key == null || data == null)\n            return null;\n        try {\n            byte[] dataBytes = Base64.decode(data, base64Mode);\n            DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(charsetName));\n            SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithm);\n            SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);\n            Cipher cipher = Cipher.getInstance(algorithm);\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            byte[] dataBytesDecrypted = (cipher.doFinal(dataBytes));\n            return new String(dataBytesDecrypted);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n}\n", "idx": 2253}
{"project": "cipher", "commit_id": "Snippet42501609_24523.java", "target": 0, "func": "    private static void startCrypting(int cipherMode, String key, File inputFile,\n                             File outputFile) throws MediaCodec.CryptoException {\n    try {\n        Key secretKey = new SecretKeySpec(key.getBytes(), \"AES\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(cipherMode, secretKey);\n\n        FileInputStream inputStream = new FileInputStream(inputFile);\n        FileOutputStream outputStream = new FileOutputStream(outputFile);\n\n        CipherOutputStream out = new CipherOutputStream(outputStream, cipher);\n        byte[] buffer = new byte[8192];\n        int count;\n        while ((count = inputStream.read(buffer)) > 0) {\n            out.write(buffer, 0, count);\n        }\n\n        out.flush();\n        out.close();\n        outputStream.close();\n        inputStream.close();\n\n    } catch (NoSuchPaddingException | NoSuchAlgorithmException | InvalidKeyException | IOException ex) {\n        ex.printStackTrace();\n    }\n}\n", "idx": 2254}
{"project": "cipher", "commit_id": "Snippet25656469_7999.java", "target": 0, "func": "MyAESKey myAESKey = new MyAESKey(new byte[16]);\nCipher aes = Cipher.getInstance(\"AES\");\naes.init(Cipher.ENCRYPT_MODE, myAESKey);\naes.doFinal(\"owlstead\".getBytes());\nmyAESKey.destroy();\naes.doFinal(\"owlstead\".getBytes());\naes.init(Cipher.ENCRYPT_MODE, myAESKey);\naes.doFinal(\"owlstead\".getBytes());\n", "idx": 2255}
